File "K1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 234, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 235, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 235, character 36:
Warning: identifier h rebound.
File "K1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 276, character 6:
Warning: identifier e rebound.
File "K1X.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ne rebound.
File "K1X.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 280, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 288, character 6:
Warning: identifier e rebound.
File "K1X.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ne rebound.
File "K1X.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 293, character 6:
Warning: identifier s rebound.
File "K1X.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "K1X.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "K1X.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 336, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 344, characters 6-7:
Warning: identifier re rebound.
File "K1X.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 347, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 348, characters 48-53:
Warning: identifier valid1 rebound.
File "K1X.noise.passive.pv", line 349, characters 6-7:
Warning: identifier rs rebound.
File "K1X.noise.passive.pv", line 350, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 375, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 385, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 559, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 550, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 375, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 543, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 536, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 344, characters 6-7:
Warning: identifier re rebound.
File "K1X.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 347, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 348, characters 48-53:
Warning: identifier valid1 rebound.
File "K1X.noise.passive.pv", line 349, characters 6-7:
Warning: identifier rs rebound.
File "K1X.noise.passive.pv", line 350, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 528, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 276, character 6:
Warning: identifier e rebound.
File "K1X.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ne rebound.
File "K1X.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 280, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 618, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 620, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 385, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 610, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 611, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 603, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 595, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 288, character 6:
Warning: identifier e rebound.
File "K1X.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ne rebound.
File "K1X.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 293, character 6:
Warning: identifier s rebound.
File "K1X.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "K1X.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 588, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "K1X.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 336, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_556: key = catch-fail(dhexp(key_s(alice),g)) in
    {5}let s_557: keypair = (if not-caught-fail(v_556) then keypairpack(v_556,key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_557));
    (
        {7}let e_558: keypair = keypairpack(empty,empty) in
        {8}let rs_559: key = empty in
        {9}let re_560: key = empty in
        {10}let v_561: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_562: key = catch-fail(v_561) in
        {12}let v_563: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_564: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then symmetricstatepack(v_563,v_562,v_561) else fail-any) else fail-any) else fail-any))) in
        {14}let v_565: symmetricstate = catch-fail((if success?((if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then symmetricstatepack(v_563,v_562,v_561) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),empty)) else fail-any) else fail-any)) in
        {15}let v_566: bitstring = catch-fail(symmetricstateunpack(v_565)) in
        {16}let v_567: symmetricstate = catch-fail((if success?(getpublickey(s_557)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then symmetricstatepack(1-proj-3-tuple(v_566),2-proj-3-tuple(v_566),hash(3-proj-3-tuple(v_566),getpublickey(s_557))) else fail-any) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_565) then (if not-caught-fail(v_567) then handshakestatepack(v_567,s_557,e_558,rs_559,re_560,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {41}get statestore(=alice,=bob,=sid,statepack_a(hs_568: handshakestate)) in
        {19}let v_569: bitstring = catch-fail(handshakestateunpack(hs_568)) in
        {20}let v_570: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_571: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {22}let v_572: keypair = catch-fail((if not-caught-fail(v_571) then keypairpack(v_571,key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_573: bitstring = catch-fail(getpublickey(v_572)) in
        {24}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_569))) in
        {25}let v_575: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_569)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),hash(3-proj-3-tuple(v_574),v_573)) else fail-any) else fail-any)) in
        {26}let v_576: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {27}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {28}let v_578: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_577),2-proj-2-tuple(v_577),3-proj-3-tuple(v_576),msg_a(alice,bob,sid))) in
        {29}let v_579: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {30}let v_580: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_577))) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then cipherstatepack(1-proj-2-tuple(v_579),increment_nonce(2-proj-2-tuple(v_577))) else fail-any) else fail-any)) in
        {31}let v_581: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_576)) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_580) then (v_580,v_578) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_582: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) in
        {33}let v_583: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_581)) && success?(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),2-proj-2-tuple(v_581))) else fail-any) else fail-any)) in
        {34}let v_584: bitstring = catch-fail((if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_583) then (v_583,2-proj-2-tuple(v_581)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_585: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_584),2-proj-7-tuple(v_569),v_572,4-proj-7-tuple(v_569),5-proj-7-tuple(v_569),6-proj-7-tuple(v_569),7-proj-7-tuple(v_569))) in
        {36}let v_586: bitstring = catch-fail(concat3(v_573,2-proj-3-tuple(v_570),2-proj-2-tuple(v_584))) in
        {37}let (hs_587: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-7-tuple(v_569))))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (if not-caught-fail(v_575) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (v_585,v_586) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {38}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {39}insert statestore(alice,bob,sid,statepack_b(hs_587));
        {40}out(pub, message_a)
    ) | (
        {89}get statestore(=alice,=bob,=sid,statepack_b(hs_588: handshakestate)) in
        {42}in(pub, message_b: bitstring);
        {43}let v_589: bitstring = catch-fail(handshakestateunpack(hs_588)) in
        {44}let v_590: bitstring = catch-fail(deconcat3(message_b)) in
        {45}let v_591: bool = catch-fail(true) in
        {46}let v_592: key = catch-fail(1-proj-3-tuple(v_590)) in
        {47}let v_593: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_589))) in
        {48}let v_594: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_589)) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_593),hash(3-proj-3-tuple(v_593),v_592)) else fail-any) else fail-any)) in
        {49}let v_595: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_589))) in
        {50}let v_596: bitstring = catch-fail(symmetricstateunpack(v_594)) in
        {51}let v_597: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_596),(if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any))) in
        {52}let v_598: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_596),(if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any))) in
        {53}let v_599: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_596),(if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any))) in
        {54}let v_600: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_596))) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (v_597,v_598,v_599) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_601: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_600)) then cipherstatepack(2-proj-3-tuple(v_600),minnonce) else fail-any),1-proj-3-tuple(v_600),3-proj-3-tuple(v_596)) else fail-any) else fail-any) else fail-any)) in
        {56}let v_602: bitstring = catch-fail(symmetricstateunpack(v_601)) in
        {57}let v_603: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_602))) in
        {58}let v_604: aead = catch-fail(decrypt(1-proj-2-tuple(v_603),2-proj-2-tuple(v_603),3-proj-3-tuple(v_602),2-proj-3-tuple(v_590))) in
        {59}let v_605: bitstring = catch-fail(aeadunpack(v_604)) in
        {60}let v_606: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_602))) in
        {61}let v_607: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_603))) && success?(1-proj-3-tuple(v_602))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then cipherstatepack(1-proj-2-tuple(v_606),increment_nonce(2-proj-2-tuple(v_603))) else fail-any) else fail-any)) in
        {62}let v_608: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_590)) && (success?(3-proj-3-tuple(v_602)) && success?(1-proj-3-tuple(v_602)))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-2-tuple(v_603))))) then (if not-caught-fail(v_604) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if not-caught-fail(v_607) then (v_607,3-proj-3-tuple(v_605),1-proj-3-tuple(v_605)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_609: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_608),2-proj-3-tuple(v_602),3-proj-3-tuple(v_602)))) in
        {64}let v_610: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_590)) && success?(symmetricstatepack(1-proj-3-tuple(v_608),2-proj-3-tuple(v_602),3-proj-3-tuple(v_602)))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),hash(3-proj-3-tuple(v_609),2-proj-3-tuple(v_590))) else fail-any) else fail-any)) in
        {65}let v_611: bitstring = catch-fail((if success?(2-proj-3-tuple(v_590)) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if not-caught-fail(v_610) then (v_610,2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {66}let v_612: key = catch-fail(2-proj-3-tuple(v_611)) in
        {67}let v_613: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_589))) in
        {68}let v_614: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_611))) in
        {69}let v_615: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_612) else fail-any) else fail-any))) in
        {70}let v_616: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_612) else fail-any) else fail-any))) in
        {71}let v_617: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_612) else fail-any) else fail-any))) in
        {72}let v_618: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_612) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_614))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (v_615,v_616,v_617) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_619: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_612) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_611))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_618)) then cipherstatepack(2-proj-3-tuple(v_618),minnonce) else fail-any),1-proj-3-tuple(v_618),3-proj-3-tuple(v_614)) else fail-any) else fail-any) else fail-any)) in
        {74}let v_620: bitstring = catch-fail(symmetricstateunpack(v_619)) in
        {75}let v_621: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {76}let v_622: aead = catch-fail(decrypt(1-proj-2-tuple(v_621),2-proj-2-tuple(v_621),3-proj-3-tuple(v_620),3-proj-3-tuple(v_590))) in
        {77}let v_623: bitstring = catch-fail(aeadunpack(v_622)) in
        {78}let v_624: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {79}let v_625: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_621))) && success?(1-proj-3-tuple(v_620))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then cipherstatepack(1-proj-2-tuple(v_624),increment_nonce(2-proj-2-tuple(v_621))) else fail-any) else fail-any)) in
        {80}let v_626: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_590)) && (success?(3-proj-3-tuple(v_620)) && success?(1-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if not-caught-fail(v_622) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_625) then (v_625,3-proj-3-tuple(v_623),1-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_627: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) in
        {82}let v_628: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_590)) && success?(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),3-proj-3-tuple(v_590))) else fail-any) else fail-any)) in
        {83}let v_629: bitstring = catch-fail((if success?(3-proj-3-tuple(v_590)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if not-caught-fail(v_628) then (v_628,2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_630: key = catch-fail(dhexp(key_s(bob),g)) in
        {85}let v_631: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_629),2-proj-7-tuple(v_589),3-proj-7-tuple(v_589),v_612,v_592,6-proj-7-tuple(v_589),7-proj-7-tuple(v_589))) in
        {86}let (hs_632: handshakestate,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-7-tuple(v_589))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (if not-caught-fail(v_594) then (if not-caught-fail(v_601) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_619) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if ((3-proj-3-tuple(v_611) && 3-proj-3-tuple(v_629)) && (v_612 = getpublickey((if not-caught-fail(v_630) then keypairpack(v_630,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_631) then (v_631,2-proj-3-tuple(v_629),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {87}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {88}insert statestore(alice,bob,sid,statepack_c(hs_632))
    ) | (
        {122}get statestore(=alice,=bob,=sid,statepack_c(hs_633: handshakestate)) in
        {90}let v_634: bitstring = catch-fail(handshakestateunpack(hs_633)) in
        {91}let v_635: bitstring = catch-fail((empty,empty,empty)) in
        {92}let v_636: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_634))) in
        {93}let v_637: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_634))) in
        {94}let v_638: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_637),(if (success?(5-proj-7-tuple(v_634)) && success?(2-proj-7-tuple(v_634))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),5-proj-7-tuple(v_634)) else fail-any) else fail-any))) in
        {95}let v_639: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_637),(if (success?(5-proj-7-tuple(v_634)) && success?(2-proj-7-tuple(v_634))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),5-proj-7-tuple(v_634)) else fail-any) else fail-any))) in
        {96}let v_640: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_637),(if (success?(5-proj-7-tuple(v_634)) && success?(2-proj-7-tuple(v_634))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),5-proj-7-tuple(v_634)) else fail-any) else fail-any))) in
        {97}let v_641: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_634)) && success?(2-proj-7-tuple(v_634))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),5-proj-7-tuple(v_634)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_637))) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then (v_638,v_639,v_640) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_642: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_634)) && success?(2-proj-7-tuple(v_634))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),5-proj-7-tuple(v_634)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_634))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_641)) then cipherstatepack(2-proj-3-tuple(v_641),minnonce) else fail-any),1-proj-3-tuple(v_641),3-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any)) in
        {99}let v_643: bitstring = catch-fail(symmetricstateunpack(v_642)) in
        {100}let v_644: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_643))) in
        {101}let v_645: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_644),2-proj-2-tuple(v_644),3-proj-3-tuple(v_643),msg_c(alice,bob,sid))) in
        {102}let v_646: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_643))) in
        {103}let v_647: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_644))) && success?(1-proj-3-tuple(v_643))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then cipherstatepack(1-proj-2-tuple(v_646),increment_nonce(2-proj-2-tuple(v_644))) else fail-any) else fail-any)) in
        {104}let v_648: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_643)) && success?(1-proj-3-tuple(v_643))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then (if not-caught-fail(v_645) then (if not-caught-fail(v_647) then (v_647,v_645) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {105}let v_649: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_648),2-proj-3-tuple(v_643),3-proj-3-tuple(v_643)))) in
        {106}let v_650: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_648)) && success?(symmetricstatepack(1-proj-2-tuple(v_648),2-proj-3-tuple(v_643),3-proj-3-tuple(v_643)))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then symmetricstatepack(1-proj-3-tuple(v_649),2-proj-3-tuple(v_649),hash(3-proj-3-tuple(v_649),2-proj-2-tuple(v_648))) else fail-any) else fail-any)) in
        {107}let v_651: bitstring = catch-fail((if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_650) then (v_650,2-proj-2-tuple(v_648)) else fail-any) else fail-any) else fail-any)) in
        {108}let v_652: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_651),2-proj-7-tuple(v_634),3-proj-7-tuple(v_634),4-proj-7-tuple(v_634),5-proj-7-tuple(v_634),6-proj-7-tuple(v_634),7-proj-7-tuple(v_634))) in
        {109}let v_653: bitstring = catch-fail(concat3(1-proj-3-tuple(v_635),2-proj-3-tuple(v_635),2-proj-2-tuple(v_651))) in
        {110}let v_654: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_651))) in
        {111}let v_655: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_654),zero)) in
        {112}let v_656: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_654),zero)) in
        {113}let v_657: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_654),zero)) in
        {114}let v_658: bitstring = catch-fail((if success?(2-proj-3-tuple(v_654)) then (if not-caught-fail(v_655) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (v_655,v_656,v_657) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_659: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_658)) then cipherstatepack(1-proj-3-tuple(v_658),minnonce) else fail-any)) in
        {116}let v_660: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_658)) then cipherstatepack(2-proj-3-tuple(v_658),minnonce) else fail-any)) in
        {117}let v_661: bitstring = catch-fail((if success?(1-proj-2-tuple(v_651)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if not-caught-fail(v_659) then (if not-caught-fail(v_660) then (1-proj-2-tuple(v_651),v_659,v_660) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let (hs_662: handshakestate,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-7-tuple(v_634))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_642) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (v_652,v_653,2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {119}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {120}insert statestore(alice,bob,sid,statepack_d(hs_662,cs1,cs2));
        {121}out(pub, message_c)
    ) | (
        {123}!
        {143}get statestore(=alice,=bob,=sid,statepack_d(hs_663: handshakestate,cs1_664: cipherstate,cs2_665: cipherstate)) in
        {124}let hs_666: handshakestate = handshakestatesetcs(hs_663,cs2_665) in
        {125}in(pub, message_d: bitstring);
        {126}let v_667: bitstring = catch-fail(handshakestateunpack(hs_666)) in
        {127}let v_668: bitstring = catch-fail(deconcat3(message_d)) in
        {128}let v_669: bool = catch-fail(true) in
        {129}let v_670: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_667))) in
        {130}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {131}let v_672: aead = catch-fail(decrypt(1-proj-2-tuple(v_671),2-proj-2-tuple(v_671),3-proj-3-tuple(v_670),3-proj-3-tuple(v_668))) in
        {132}let v_673: bitstring = catch-fail(aeadunpack(v_672)) in
        {133}let v_674: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {134}let v_675: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_671))) && success?(1-proj-3-tuple(v_670))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then cipherstatepack(1-proj-2-tuple(v_674),increment_nonce(2-proj-2-tuple(v_671))) else fail-any) else fail-any)) in
        {135}let v_676: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_668)) && (success?(3-proj-3-tuple(v_670)) && success?(1-proj-3-tuple(v_670)))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then (if not-caught-fail(v_672) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if not-caught-fail(v_675) then (v_675,3-proj-3-tuple(v_673),1-proj-3-tuple(v_673)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {136}let v_677: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_676),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) in
        {137}let v_678: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_668)) && success?(symmetricstatepack(1-proj-3-tuple(v_676),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then symmetricstatepack(1-proj-3-tuple(v_677),2-proj-3-tuple(v_677),hash(3-proj-3-tuple(v_677),3-proj-3-tuple(v_668))) else fail-any) else fail-any)) in
        {138}let v_679: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_668)) && success?(1-proj-7-tuple(v_667))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if not-caught-fail(v_678) then (v_678,2-proj-3-tuple(v_676),3-proj-3-tuple(v_676)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_680: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_679),2-proj-7-tuple(v_667),3-proj-7-tuple(v_667),4-proj-7-tuple(v_667),5-proj-7-tuple(v_667),6-proj-7-tuple(v_667),7-proj-7-tuple(v_667))) in
        {140}let (hs_681: handshakestate,plaintext_d: bitstring,valid_682: bool) = (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-7-tuple(v_667))))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if not-caught-fail(v_669) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if (v_669 && 3-proj-3-tuple(v_679)) then (if not-caught-fail(v_680) then (v_680,2-proj-3-tuple(v_679),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {141}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {142}insert statestore(alice,bob,sid,statepack_e(hs_681,cs1_664,handshakestategetcs(hs_681)))
    ) | (
        {144}!
        {162}get statestore(=alice,=bob,=sid,statepack_e(hs_683: handshakestate,cs1_684: cipherstate,cs2_685: cipherstate)) in
        {145}let hs_686: handshakestate = handshakestatesetcs(hs_683,cs1_684) in
        {146}let v_687: bitstring = catch-fail(handshakestateunpack(hs_686)) in
        {147}let v_688: bitstring = catch-fail((empty,empty,empty)) in
        {148}let v_689: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_687))) in
        {149}let v_690: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_689))) in
        {150}let v_691: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_690),2-proj-2-tuple(v_690),3-proj-3-tuple(v_689),msg_e(alice,bob,sid))) in
        {151}let v_692: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_689))) in
        {152}let v_693: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_690))) && success?(1-proj-3-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then cipherstatepack(1-proj-2-tuple(v_692),increment_nonce(2-proj-2-tuple(v_690))) else fail-any) else fail-any)) in
        {153}let v_694: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_689)) && success?(1-proj-3-tuple(v_689))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-2-tuple(v_690))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_693) then (v_693,v_691) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {154}let v_695: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_694),2-proj-3-tuple(v_689),3-proj-3-tuple(v_689)))) in
        {155}let v_696: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_694)) && success?(symmetricstatepack(1-proj-2-tuple(v_694),2-proj-3-tuple(v_689),3-proj-3-tuple(v_689)))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then symmetricstatepack(1-proj-3-tuple(v_695),2-proj-3-tuple(v_695),hash(3-proj-3-tuple(v_695),2-proj-2-tuple(v_694))) else fail-any) else fail-any)) in
        {156}let v_697: bitstring = catch-fail((if success?(1-proj-7-tuple(v_687)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then (if not-caught-fail(v_696) then (v_696,2-proj-2-tuple(v_694)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {157}let v_698: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_697),2-proj-7-tuple(v_687),3-proj-7-tuple(v_687),4-proj-7-tuple(v_687),5-proj-7-tuple(v_687),6-proj-7-tuple(v_687),7-proj-7-tuple(v_687))) in
        {158}let v_699: bitstring = catch-fail(concat3(1-proj-3-tuple(v_688),2-proj-3-tuple(v_688),2-proj-2-tuple(v_697))) in
        {159}let (hs_700: handshakestate,message_e: bitstring) = (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-7-tuple(v_687))))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then (if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (v_698,v_699) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {160}event SendMsg(alice,bob,stagepack_e(sid),msg_e(alice,bob,sid));
        {161}out(pub, message_e)
    ) | (
        {163}event LeakS(phase0,alice);
        {164}out(pub, key_s(alice))
    ) | (
        {165}phase 1;
        {166}event LeakS(phase1,alice);
        {167}out(pub, key_s(alice))
    )
) | (
    {168}let v_701: key = catch-fail(dhexp(key_s(alice),g)) in
    {169}let s_702: keypair = (if not-caught-fail(v_701) then keypairpack(v_701,key_s(alice)) else fail-any) in
    {170}out(pub, getpublickey(s_702));
    (
        {171}let e_703: keypair = keypairpack(empty,empty) in
        {172}let rs_704: key = empty in
        {173}let re_705: key = empty in
        {174}let v_706: bitstring = catch-fail(hash(somename,empty)) in
        {175}let v_707: key = catch-fail(v_706) in
        {176}let v_708: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {177}let v_709: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (if not-caught-fail(v_708) then symmetricstatepack(v_708,v_707,v_706) else fail-any) else fail-any) else fail-any))) in
        {178}let v_710: symmetricstate = catch-fail((if success?((if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (if not-caught-fail(v_708) then symmetricstatepack(v_708,v_707,v_706) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),empty)) else fail-any) else fail-any)) in
        {179}let v_711: bitstring = catch-fail(symmetricstateunpack(v_710)) in
        {180}let v_712: symmetricstate = catch-fail((if success?(getpublickey(s_702)) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then symmetricstatepack(1-proj-3-tuple(v_711),2-proj-3-tuple(v_711),hash(3-proj-3-tuple(v_711),getpublickey(s_702))) else fail-any) else fail-any)) in
        {181}let hs_713: handshakestate = (if not-caught-fail(v_710) then (if not-caught-fail(v_712) then handshakestatepack(v_712,s_702,e_703,rs_704,re_705,empty,true) else fail-any) else fail-any) in
        {182}insert statestore(alice,charlie,sid,statepack_a(hs_713))
    ) | (
        {205}get statestore(=alice,=charlie,=sid,statepack_a(hs_714: handshakestate)) in
        {183}let v_715: bitstring = catch-fail(handshakestateunpack(hs_714)) in
        {184}let v_716: bitstring = catch-fail((empty,empty,empty)) in
        {185}let v_717: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {186}let v_718: keypair = catch-fail((if not-caught-fail(v_717) then keypairpack(v_717,key_e(alice,charlie,sid)) else fail-any)) in
        {187}let v_719: bitstring = catch-fail(getpublickey(v_718)) in
        {188}let v_720: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_715))) in
        {189}let v_721: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_715)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then symmetricstatepack(1-proj-3-tuple(v_720),2-proj-3-tuple(v_720),hash(3-proj-3-tuple(v_720),v_719)) else fail-any) else fail-any)) in
        {190}let v_722: bitstring = catch-fail(symmetricstateunpack(v_721)) in
        {191}let v_723: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_722))) in
        {192}let v_724: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_723),2-proj-2-tuple(v_723),3-proj-3-tuple(v_722),msg_a(alice,charlie,sid))) in
        {193}let v_725: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_722))) in
        {194}let v_726: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_723))) && success?(1-proj-3-tuple(v_722))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-2-tuple(v_725))))) then cipherstatepack(1-proj-2-tuple(v_725),increment_nonce(2-proj-2-tuple(v_723))) else fail-any) else fail-any)) in
        {195}let v_727: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_722)) && success?(1-proj-3-tuple(v_722))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then (if not-caught-fail(v_724) then (if not-caught-fail(v_726) then (v_726,v_724) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {196}let v_728: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_727),2-proj-3-tuple(v_722),3-proj-3-tuple(v_722)))) in
        {197}let v_729: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_727)) && success?(symmetricstatepack(1-proj-2-tuple(v_727),2-proj-3-tuple(v_722),3-proj-3-tuple(v_722)))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_728),hash(3-proj-3-tuple(v_728),2-proj-2-tuple(v_727))) else fail-any) else fail-any)) in
        {198}let v_730: bitstring = catch-fail((if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-2-tuple(v_727))))) then (if not-caught-fail(v_729) then (v_729,2-proj-2-tuple(v_727)) else fail-any) else fail-any) else fail-any)) in
        {199}let v_731: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_730),2-proj-7-tuple(v_715),v_718,4-proj-7-tuple(v_715),5-proj-7-tuple(v_715),6-proj-7-tuple(v_715),7-proj-7-tuple(v_715))) in
        {200}let v_732: bitstring = catch-fail(concat3(v_719,2-proj-3-tuple(v_716),2-proj-2-tuple(v_730))) in
        {201}let (hs_733: handshakestate,message_a_734: bitstring) = (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-7-tuple(v_715))))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (if not-caught-fail(v_721) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then (if not-caught-fail(v_731) then (if not-caught-fail(v_732) then (v_731,v_732) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {202}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {203}insert statestore(alice,charlie,sid,statepack_b(hs_733));
        {204}out(pub, message_a_734)
    ) | (
        {253}get statestore(=alice,=charlie,=sid,statepack_b(hs_735: handshakestate)) in
        {206}in(pub, message_b_736: bitstring);
        {207}let v_737: bitstring = catch-fail(handshakestateunpack(hs_735)) in
        {208}let v_738: bitstring = catch-fail(deconcat3(message_b_736)) in
        {209}let v_739: bool = catch-fail(true) in
        {210}let v_740: key = catch-fail(1-proj-3-tuple(v_738)) in
        {211}let v_741: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_737))) in
        {212}let v_742: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_737)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_741),hash(3-proj-3-tuple(v_741),v_740)) else fail-any) else fail-any)) in
        {213}let v_743: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_737))) in
        {214}let v_744: bitstring = catch-fail(symmetricstateunpack(v_742)) in
        {215}let v_745: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_744),(if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),v_740) else fail-any) else fail-any))) in
        {216}let v_746: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_744),(if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),v_740) else fail-any) else fail-any))) in
        {217}let v_747: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_744),(if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),v_740) else fail-any) else fail-any))) in
        {218}let v_748: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),v_740) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_744))) then (if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (v_745,v_746,v_747) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_749: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),v_740) else fail-any) else fail-any)) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_748)) then cipherstatepack(2-proj-3-tuple(v_748),minnonce) else fail-any),1-proj-3-tuple(v_748),3-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_750: bitstring = catch-fail(symmetricstateunpack(v_749)) in
        {221}let v_751: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {222}let v_752: aead = catch-fail(decrypt(1-proj-2-tuple(v_751),2-proj-2-tuple(v_751),3-proj-3-tuple(v_750),2-proj-3-tuple(v_738))) in
        {223}let v_753: bitstring = catch-fail(aeadunpack(v_752)) in
        {224}let v_754: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {225}let v_755: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_751))) && success?(1-proj-3-tuple(v_750))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then cipherstatepack(1-proj-2-tuple(v_754),increment_nonce(2-proj-2-tuple(v_751))) else fail-any) else fail-any)) in
        {226}let v_756: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_738)) && (success?(3-proj-3-tuple(v_750)) && success?(1-proj-3-tuple(v_750)))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then (if not-caught-fail(v_752) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if not-caught-fail(v_755) then (v_755,3-proj-3-tuple(v_753),1-proj-3-tuple(v_753)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {227}let v_757: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) in
        {228}let v_758: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_738)) && success?(symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then symmetricstatepack(1-proj-3-tuple(v_757),2-proj-3-tuple(v_757),hash(3-proj-3-tuple(v_757),2-proj-3-tuple(v_738))) else fail-any) else fail-any)) in
        {229}let v_759: bitstring = catch-fail((if success?(2-proj-3-tuple(v_738)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if not-caught-fail(v_758) then (v_758,2-proj-3-tuple(v_756),3-proj-3-tuple(v_756)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_760: key = catch-fail(2-proj-3-tuple(v_759)) in
        {231}let v_761: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_737))) in
        {232}let v_762: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_759))) in
        {233}let v_763: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_762),(if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),v_760) else fail-any) else fail-any))) in
        {234}let v_764: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_762),(if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),v_760) else fail-any) else fail-any))) in
        {235}let v_765: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_762),(if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),v_760) else fail-any) else fail-any))) in
        {236}let v_766: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),v_760) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_762))) then (if not-caught-fail(v_763) then (if not-caught-fail(v_764) then (if not-caught-fail(v_765) then (v_763,v_764,v_765) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_767: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_737)) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),v_760) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_759))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_766)) then cipherstatepack(2-proj-3-tuple(v_766),minnonce) else fail-any),1-proj-3-tuple(v_766),3-proj-3-tuple(v_762)) else fail-any) else fail-any) else fail-any)) in
        {238}let v_768: bitstring = catch-fail(symmetricstateunpack(v_767)) in
        {239}let v_769: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_768))) in
        {240}let v_770: aead = catch-fail(decrypt(1-proj-2-tuple(v_769),2-proj-2-tuple(v_769),3-proj-3-tuple(v_768),3-proj-3-tuple(v_738))) in
        {241}let v_771: bitstring = catch-fail(aeadunpack(v_770)) in
        {242}let v_772: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_768))) in
        {243}let v_773: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_769))) && success?(1-proj-3-tuple(v_768))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then cipherstatepack(1-proj-2-tuple(v_772),increment_nonce(2-proj-2-tuple(v_769))) else fail-any) else fail-any)) in
        {244}let v_774: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_738)) && (success?(3-proj-3-tuple(v_768)) && success?(1-proj-3-tuple(v_768)))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then (if not-caught-fail(v_770) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if not-caught-fail(v_773) then (v_773,3-proj-3-tuple(v_771),1-proj-3-tuple(v_771)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_775: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_768),3-proj-3-tuple(v_768)))) in
        {246}let v_776: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_738)) && success?(symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_768),3-proj-3-tuple(v_768)))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then symmetricstatepack(1-proj-3-tuple(v_775),2-proj-3-tuple(v_775),hash(3-proj-3-tuple(v_775),3-proj-3-tuple(v_738))) else fail-any) else fail-any)) in
        {247}let v_777: bitstring = catch-fail((if success?(3-proj-3-tuple(v_738)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if not-caught-fail(v_776) then (v_776,2-proj-3-tuple(v_774),3-proj-3-tuple(v_774)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let v_778: key = catch-fail(dhexp(key_s(charlie),g)) in
        {249}let v_779: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_777),2-proj-7-tuple(v_737),3-proj-7-tuple(v_737),v_760,v_740,6-proj-7-tuple(v_737),7-proj-7-tuple(v_737))) in
        {250}let (hs_780: handshakestate,plaintext_b_781: bitstring,valid_782: bool) = (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-7-tuple(v_737))))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (if not-caught-fail(v_742) then (if not-caught-fail(v_749) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_767) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then (if ((3-proj-3-tuple(v_759) && 3-proj-3-tuple(v_777)) && (v_760 = getpublickey((if not-caught-fail(v_778) then keypairpack(v_778,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_779) then (v_779,2-proj-3-tuple(v_777),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {251}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_781);
        {252}insert statestore(alice,charlie,sid,statepack_c(hs_780))
    ) | (
        {286}get statestore(=alice,=charlie,=sid,statepack_c(hs_783: handshakestate)) in
        {254}let v_784: bitstring = catch-fail(handshakestateunpack(hs_783)) in
        {255}let v_785: bitstring = catch-fail((empty,empty,empty)) in
        {256}let v_786: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_784))) in
        {257}let v_787: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_784))) in
        {258}let v_788: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_787),(if (success?(5-proj-7-tuple(v_784)) && success?(2-proj-7-tuple(v_784))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),5-proj-7-tuple(v_784)) else fail-any) else fail-any))) in
        {259}let v_789: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_787),(if (success?(5-proj-7-tuple(v_784)) && success?(2-proj-7-tuple(v_784))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),5-proj-7-tuple(v_784)) else fail-any) else fail-any))) in
        {260}let v_790: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_787),(if (success?(5-proj-7-tuple(v_784)) && success?(2-proj-7-tuple(v_784))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),5-proj-7-tuple(v_784)) else fail-any) else fail-any))) in
        {261}let v_791: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_784)) && success?(2-proj-7-tuple(v_784))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),5-proj-7-tuple(v_784)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_787))) then (if not-caught-fail(v_788) then (if not-caught-fail(v_789) then (if not-caught-fail(v_790) then (v_788,v_789,v_790) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_792: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_784)) && success?(2-proj-7-tuple(v_784))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then dhexp(2-proj-2-tuple(v_786),5-proj-7-tuple(v_784)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_784))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_791)) then cipherstatepack(2-proj-3-tuple(v_791),minnonce) else fail-any),1-proj-3-tuple(v_791),3-proj-3-tuple(v_787)) else fail-any) else fail-any) else fail-any)) in
        {263}let v_793: bitstring = catch-fail(symmetricstateunpack(v_792)) in
        {264}let v_794: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_793))) in
        {265}let v_795: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_794),2-proj-2-tuple(v_794),3-proj-3-tuple(v_793),msg_c(alice,charlie,sid))) in
        {266}let v_796: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_793))) in
        {267}let v_797: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_794))) && success?(1-proj-3-tuple(v_793))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then cipherstatepack(1-proj-2-tuple(v_796),increment_nonce(2-proj-2-tuple(v_794))) else fail-any) else fail-any)) in
        {268}let v_798: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_793)) && success?(1-proj-3-tuple(v_793))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then (if not-caught-fail(v_795) then (if not-caught-fail(v_797) then (v_797,v_795) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {269}let v_799: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_798),2-proj-3-tuple(v_793),3-proj-3-tuple(v_793)))) in
        {270}let v_800: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_798)) && success?(symmetricstatepack(1-proj-2-tuple(v_798),2-proj-3-tuple(v_793),3-proj-3-tuple(v_793)))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack(1-proj-3-tuple(v_799),2-proj-3-tuple(v_799),hash(3-proj-3-tuple(v_799),2-proj-2-tuple(v_798))) else fail-any) else fail-any)) in
        {271}let v_801: bitstring = catch-fail((if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then (if not-caught-fail(v_800) then (v_800,2-proj-2-tuple(v_798)) else fail-any) else fail-any) else fail-any)) in
        {272}let v_802: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_801),2-proj-7-tuple(v_784),3-proj-7-tuple(v_784),4-proj-7-tuple(v_784),5-proj-7-tuple(v_784),6-proj-7-tuple(v_784),7-proj-7-tuple(v_784))) in
        {273}let v_803: bitstring = catch-fail(concat3(1-proj-3-tuple(v_785),2-proj-3-tuple(v_785),2-proj-2-tuple(v_801))) in
        {274}let v_804: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_801))) in
        {275}let v_805: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_804),zero)) in
        {276}let v_806: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_804),zero)) in
        {277}let v_807: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_804),zero)) in
        {278}let v_808: bitstring = catch-fail((if success?(2-proj-3-tuple(v_804)) then (if not-caught-fail(v_805) then (if not-caught-fail(v_806) then (if not-caught-fail(v_807) then (v_805,v_806,v_807) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {279}let v_809: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_808)) then cipherstatepack(1-proj-3-tuple(v_808),minnonce) else fail-any)) in
        {280}let v_810: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_808)) then cipherstatepack(2-proj-3-tuple(v_808),minnonce) else fail-any)) in
        {281}let v_811: bitstring = catch-fail((if success?(1-proj-2-tuple(v_801)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if not-caught-fail(v_809) then (if not-caught-fail(v_810) then (1-proj-2-tuple(v_801),v_809,v_810) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {282}let (hs_812: handshakestate,message_c_813: bitstring,cs1_814: cipherstate,cs2_815: cipherstate) = (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-7-tuple(v_784))))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if not-caught-fail(v_792) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then (if not-caught-fail(v_802) then (if not-caught-fail(v_803) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (v_802,v_803,2-proj-3-tuple(v_811),3-proj-3-tuple(v_811)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {283}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {284}insert statestore(alice,charlie,sid,statepack_d(hs_812,cs1_814,cs2_815));
        {285}out(pub, message_c_813)
    ) | (
        {287}!
        {307}get statestore(=alice,=charlie,=sid,statepack_d(hs_816: handshakestate,cs1_817: cipherstate,cs2_818: cipherstate)) in
        {288}let hs_819: handshakestate = handshakestatesetcs(hs_816,cs2_818) in
        {289}in(pub, message_d_820: bitstring);
        {290}let v_821: bitstring = catch-fail(handshakestateunpack(hs_819)) in
        {291}let v_822: bitstring = catch-fail(deconcat3(message_d_820)) in
        {292}let v_823: bool = catch-fail(true) in
        {293}let v_824: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_821))) in
        {294}let v_825: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_824))) in
        {295}let v_826: aead = catch-fail(decrypt(1-proj-2-tuple(v_825),2-proj-2-tuple(v_825),3-proj-3-tuple(v_824),3-proj-3-tuple(v_822))) in
        {296}let v_827: bitstring = catch-fail(aeadunpack(v_826)) in
        {297}let v_828: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_824))) in
        {298}let v_829: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_825))) && success?(1-proj-3-tuple(v_824))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-2-tuple(v_828))))) then cipherstatepack(1-proj-2-tuple(v_828),increment_nonce(2-proj-2-tuple(v_825))) else fail-any) else fail-any)) in
        {299}let v_830: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_822)) && (success?(3-proj-3-tuple(v_824)) && success?(1-proj-3-tuple(v_824)))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then (if not-caught-fail(v_826) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_829) then (v_829,3-proj-3-tuple(v_827),1-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_831: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_830),2-proj-3-tuple(v_824),3-proj-3-tuple(v_824)))) in
        {301}let v_832: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_822)) && success?(symmetricstatepack(1-proj-3-tuple(v_830),2-proj-3-tuple(v_824),3-proj-3-tuple(v_824)))) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then symmetricstatepack(1-proj-3-tuple(v_831),2-proj-3-tuple(v_831),hash(3-proj-3-tuple(v_831),3-proj-3-tuple(v_822))) else fail-any) else fail-any)) in
        {302}let v_833: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_822)) && success?(1-proj-7-tuple(v_821))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if not-caught-fail(v_832) then (v_832,2-proj-3-tuple(v_830),3-proj-3-tuple(v_830)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_834: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_833),2-proj-7-tuple(v_821),3-proj-7-tuple(v_821),4-proj-7-tuple(v_821),5-proj-7-tuple(v_821),6-proj-7-tuple(v_821),7-proj-7-tuple(v_821))) in
        {304}let (hs_835: handshakestate,plaintext_d_836: bitstring,valid_837: bool) = (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-7-tuple(v_821))))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if not-caught-fail(v_823) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if (v_823 && 3-proj-3-tuple(v_833)) then (if not-caught-fail(v_834) then (v_834,2-proj-3-tuple(v_833),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {305}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_836);
        {306}insert statestore(alice,charlie,sid,statepack_e(hs_835,cs1_817,handshakestategetcs(hs_835)))
    ) | (
        {308}!
        {326}get statestore(=alice,=charlie,=sid,statepack_e(hs_838: handshakestate,cs1_839: cipherstate,cs2_840: cipherstate)) in
        {309}let hs_841: handshakestate = handshakestatesetcs(hs_838,cs1_839) in
        {310}let v_842: bitstring = catch-fail(handshakestateunpack(hs_841)) in
        {311}let v_843: bitstring = catch-fail((empty,empty,empty)) in
        {312}let v_844: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_842))) in
        {313}let v_845: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_844))) in
        {314}let v_846: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_845),2-proj-2-tuple(v_845),3-proj-3-tuple(v_844),msg_e(alice,charlie,sid))) in
        {315}let v_847: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_844))) in
        {316}let v_848: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_845))) && success?(1-proj-3-tuple(v_844))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then cipherstatepack(1-proj-2-tuple(v_847),increment_nonce(2-proj-2-tuple(v_845))) else fail-any) else fail-any)) in
        {317}let v_849: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_844)) && success?(1-proj-3-tuple(v_844))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then (if not-caught-fail(v_846) then (if not-caught-fail(v_848) then (v_848,v_846) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {318}let v_850: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_849),2-proj-3-tuple(v_844),3-proj-3-tuple(v_844)))) in
        {319}let v_851: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_849)) && success?(symmetricstatepack(1-proj-2-tuple(v_849),2-proj-3-tuple(v_844),3-proj-3-tuple(v_844)))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then symmetricstatepack(1-proj-3-tuple(v_850),2-proj-3-tuple(v_850),hash(3-proj-3-tuple(v_850),2-proj-2-tuple(v_849))) else fail-any) else fail-any)) in
        {320}let v_852: bitstring = catch-fail((if success?(1-proj-7-tuple(v_842)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-2-tuple(v_849))))) then (if not-caught-fail(v_851) then (v_851,2-proj-2-tuple(v_849)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {321}let v_853: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_852),2-proj-7-tuple(v_842),3-proj-7-tuple(v_842),4-proj-7-tuple(v_842),5-proj-7-tuple(v_842),6-proj-7-tuple(v_842),7-proj-7-tuple(v_842))) in
        {322}let v_854: bitstring = catch-fail(concat3(1-proj-3-tuple(v_843),2-proj-3-tuple(v_843),2-proj-2-tuple(v_852))) in
        {323}let (hs_855: handshakestate,message_e_856: bitstring) = (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-7-tuple(v_842))))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then (if not-caught-fail(v_853) then (if not-caught-fail(v_854) then (v_853,v_854) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {324}event SendMsg(alice,charlie,stagepack_e(sid),msg_e(alice,charlie,sid));
        {325}out(pub, message_e_856)
    ) | (
        {327}event LeakS(phase0,alice);
        {328}out(pub, key_s(alice))
    ) | (
        {329}phase 1;
        {330}event LeakS(phase1,alice);
        {331}out(pub, key_s(alice))
    )
) | (
    {332}let s_857: keypair = keypairpack(empty,empty) in
    {333}out(pub, getpublickey(s_857));
    (
        {334}let e_858: keypair = keypairpack(empty,empty) in
        {335}let v_859: key = catch-fail(dhexp(key_s(alice),g)) in
        {336}let rs_860: key = getpublickey((if not-caught-fail(v_859) then keypairpack(v_859,key_s(alice)) else fail-any)) in
        {337}let re_861: key = empty in
        {338}let v_862: bitstring = catch-fail(hash(somename,empty)) in
        {339}let v_863: key = catch-fail(v_862) in
        {340}let v_864: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {341}let v_865: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_862) then (if not-caught-fail(v_863) then (if not-caught-fail(v_864) then symmetricstatepack(v_864,v_863,v_862) else fail-any) else fail-any) else fail-any))) in
        {342}let v_866: symmetricstate = catch-fail((if success?((if not-caught-fail(v_862) then (if not-caught-fail(v_863) then (if not-caught-fail(v_864) then symmetricstatepack(v_864,v_863,v_862) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_865),hash(3-proj-3-tuple(v_865),empty)) else fail-any) else fail-any)) in
        {343}let v_867: bitstring = catch-fail(symmetricstateunpack(v_866)) in
        {344}let v_868: symmetricstate = catch-fail((if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then symmetricstatepack(1-proj-3-tuple(v_867),2-proj-3-tuple(v_867),hash(3-proj-3-tuple(v_867),rs_860)) else fail-any)) in
        {345}let hs_869: handshakestate = (if not-caught-fail(v_866) then (if not-caught-fail(v_868) then handshakestatepack(v_868,s_857,e_858,rs_860,re_861,empty,false) else fail-any) else fail-any) in
        {346}insert statestore(bob,alice,sid,statepack_a(hs_869))
    ) | (
        {368}get statestore(=bob,=alice,=sid,statepack_a(hs_870: handshakestate)) in
        {347}in(pub, message_a_871: bitstring);
        {348}let v_872: bitstring = catch-fail(handshakestateunpack(hs_870)) in
        {349}let v_873: bitstring = catch-fail(deconcat3(message_a_871)) in
        {350}let v_874: bool = catch-fail(true) in
        {351}let v_875: key = catch-fail(1-proj-3-tuple(v_873)) in
        {352}let v_876: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_872))) in
        {353}let v_877: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_872)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then symmetricstatepack(1-proj-3-tuple(v_876),2-proj-3-tuple(v_876),hash(3-proj-3-tuple(v_876),v_875)) else fail-any) else fail-any)) in
        {354}let v_878: bitstring = catch-fail(symmetricstateunpack(v_877)) in
        {355}let v_879: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_878))) in
        {356}let v_880: aead = catch-fail(decrypt(1-proj-2-tuple(v_879),2-proj-2-tuple(v_879),3-proj-3-tuple(v_878),3-proj-3-tuple(v_873))) in
        {357}let v_881: bitstring = catch-fail(aeadunpack(v_880)) in
        {358}let v_882: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_878))) in
        {359}let v_883: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_879))) && success?(1-proj-3-tuple(v_878))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-2-tuple(v_882))))) then cipherstatepack(1-proj-2-tuple(v_882),increment_nonce(2-proj-2-tuple(v_879))) else fail-any) else fail-any)) in
        {360}let v_884: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_873)) && (success?(3-proj-3-tuple(v_878)) && success?(1-proj-3-tuple(v_878)))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-2-tuple(v_879))))) then (if not-caught-fail(v_880) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if not-caught-fail(v_883) then (v_883,3-proj-3-tuple(v_881),1-proj-3-tuple(v_881)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let v_885: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_884),2-proj-3-tuple(v_878),3-proj-3-tuple(v_878)))) in
        {362}let v_886: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_873)) && success?(symmetricstatepack(1-proj-3-tuple(v_884),2-proj-3-tuple(v_878),3-proj-3-tuple(v_878)))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then symmetricstatepack(1-proj-3-tuple(v_885),2-proj-3-tuple(v_885),hash(3-proj-3-tuple(v_885),3-proj-3-tuple(v_873))) else fail-any) else fail-any)) in
        {363}let v_887: bitstring = catch-fail((if success?(3-proj-3-tuple(v_873)) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then (if not-caught-fail(v_886) then (v_886,2-proj-3-tuple(v_884),3-proj-3-tuple(v_884)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {364}let v_888: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_887),2-proj-7-tuple(v_872),3-proj-7-tuple(v_872),4-proj-7-tuple(v_872),v_875,6-proj-7-tuple(v_872),7-proj-7-tuple(v_872))) in
        {365}let (hs_889: handshakestate,plaintext_a: bitstring,valid_890: bool) = (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-7-tuple(v_872))))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if not-caught-fail(v_874) then (if not-caught-fail(v_875) then (if not-caught-fail(v_877) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if (v_874 && 3-proj-3-tuple(v_887)) then (if not-caught-fail(v_888) then (v_888,2-proj-3-tuple(v_887),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {366}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {367}insert statestore(bob,alice,sid,statepack_b(hs_889))
    ) | (
        {416}get statestore(=bob,=alice,=sid,statepack_b(hs_891: handshakestate)) in
        {369}let v_892: bitstring = catch-fail(handshakestateunpack(hs_891)) in
        {370}let v_893: bitstring = catch-fail((empty,empty,empty)) in
        {371}let v_894: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {372}let v_895: keypair = catch-fail((if not-caught-fail(v_894) then keypairpack(v_894,key_e(bob,alice,sid)) else fail-any)) in
        {373}let v_896: bitstring = catch-fail(getpublickey(v_895)) in
        {374}let v_897: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_892))) in
        {375}let v_898: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_892)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_897),hash(3-proj-3-tuple(v_897),v_896)) else fail-any) else fail-any)) in
        {376}let v_899: bitstring = catch-fail(keypairunpack(v_895)) in
        {377}let v_900: bitstring = catch-fail(symmetricstateunpack(v_898)) in
        {378}let v_901: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_900),(if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),5-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {379}let v_902: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_900),(if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),5-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {380}let v_903: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_900),(if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),5-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {381}let v_904: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),5-proj-7-tuple(v_892)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_900))) then (if not-caught-fail(v_901) then (if not-caught-fail(v_902) then (if not-caught-fail(v_903) then (v_901,v_902,v_903) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_905: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),5-proj-7-tuple(v_892)) else fail-any) else fail-any)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_904)) then cipherstatepack(2-proj-3-tuple(v_904),minnonce) else fail-any),1-proj-3-tuple(v_904),3-proj-3-tuple(v_900)) else fail-any) else fail-any) else fail-any)) in
        {383}let v_906: key = catch-fail(dhexp(key_s(bob),g)) in
        {384}let v_907: keypair = catch-fail((if not-caught-fail(v_906) then keypairpack(v_906,key_s(bob)) else fail-any)) in
        {385}let v_908: bitstring = catch-fail(symmetricstateunpack(v_905)) in
        {386}let v_909: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_908))) in
        {387}let v_910: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_909),2-proj-2-tuple(v_909),3-proj-3-tuple(v_908),getpublickey(v_907))) in
        {388}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_908))) in
        {389}let v_912: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_909))) && success?(1-proj-3-tuple(v_908))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then cipherstatepack(1-proj-2-tuple(v_911),increment_nonce(2-proj-2-tuple(v_909))) else fail-any) else fail-any)) in
        {390}let v_913: bitstring = catch-fail((if (success?(getpublickey(v_907)) && (success?(3-proj-3-tuple(v_908)) && success?(1-proj-3-tuple(v_908)))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then (if not-caught-fail(v_910) then (if not-caught-fail(v_912) then (v_912,v_910) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {391}let v_914: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_913),2-proj-3-tuple(v_908),3-proj-3-tuple(v_908)))) in
        {392}let v_915: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_913)) && success?(symmetricstatepack(1-proj-2-tuple(v_913),2-proj-3-tuple(v_908),3-proj-3-tuple(v_908)))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then symmetricstatepack(1-proj-3-tuple(v_914),2-proj-3-tuple(v_914),hash(3-proj-3-tuple(v_914),2-proj-2-tuple(v_913))) else fail-any) else fail-any)) in
        {393}let v_916: bitstring = catch-fail((if success?(getpublickey(v_907)) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then (if not-caught-fail(v_915) then (v_915,2-proj-2-tuple(v_913)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {394}let v_917: bitstring = catch-fail(keypairunpack(v_907)) in
        {395}let v_918: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_916))) in
        {396}let v_919: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_918),(if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),5-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {397}let v_920: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_918),(if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),5-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {398}let v_921: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_918),(if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),5-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {399}let v_922: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),5-proj-7-tuple(v_892)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_918))) then (if not-caught-fail(v_919) then (if not-caught-fail(v_920) then (if not-caught-fail(v_921) then (v_919,v_920,v_921) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let v_923: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),5-proj-7-tuple(v_892)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_916))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_922)) then cipherstatepack(2-proj-3-tuple(v_922),minnonce) else fail-any),1-proj-3-tuple(v_922),3-proj-3-tuple(v_918)) else fail-any) else fail-any) else fail-any)) in
        {401}let v_924: bitstring = catch-fail(symmetricstateunpack(v_923)) in
        {402}let v_925: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {403}let v_926: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_925),2-proj-2-tuple(v_925),3-proj-3-tuple(v_924),msg_b(bob,alice,sid))) in
        {404}let v_927: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {405}let v_928: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_925))) && success?(1-proj-3-tuple(v_924))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then cipherstatepack(1-proj-2-tuple(v_927),increment_nonce(2-proj-2-tuple(v_925))) else fail-any) else fail-any)) in
        {406}let v_929: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_924)) && success?(1-proj-3-tuple(v_924))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-2-tuple(v_925))))) then (if not-caught-fail(v_926) then (if not-caught-fail(v_928) then (v_928,v_926) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_930: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_929),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) in
        {408}let v_931: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_929)) && success?(symmetricstatepack(1-proj-2-tuple(v_929),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then symmetricstatepack(1-proj-3-tuple(v_930),2-proj-3-tuple(v_930),hash(3-proj-3-tuple(v_930),2-proj-2-tuple(v_929))) else fail-any) else fail-any)) in
        {409}let v_932: bitstring = catch-fail((if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_931) then (v_931,2-proj-2-tuple(v_929)) else fail-any) else fail-any) else fail-any)) in
        {410}let v_933: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_932),v_907,v_895,4-proj-7-tuple(v_892),5-proj-7-tuple(v_892),6-proj-7-tuple(v_892),7-proj-7-tuple(v_892))) in
        {411}let v_934: bitstring = catch-fail(concat3(v_896,2-proj-2-tuple(v_916),2-proj-2-tuple(v_932))) in
        {412}let (hs_935: handshakestate,message_b_936: bitstring) = (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-7-tuple(v_892))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (if not-caught-fail(v_898) then (if not-caught-fail(v_905) then (if not-caught-fail(v_907) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then (if not-caught-fail(v_933) then (if not-caught-fail(v_934) then (v_933,v_934) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {413}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {414}insert statestore(bob,alice,sid,statepack_c(hs_935));
        {415}out(pub, message_b_936)
    ) | (
        {450}get statestore(=bob,=alice,=sid,statepack_c(hs_937: handshakestate)) in
        {417}in(pub, message_c_938: bitstring);
        {418}let v_939: bitstring = catch-fail(handshakestateunpack(hs_937)) in
        {419}let v_940: bitstring = catch-fail(deconcat3(message_c_938)) in
        {420}let v_941: bool = catch-fail(true) in
        {421}let v_942: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_939))) in
        {422}let v_943: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_939))) in
        {423}let v_944: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_943),(if (success?(4-proj-7-tuple(v_939)) && success?(3-proj-7-tuple(v_939))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),4-proj-7-tuple(v_939)) else fail-any) else fail-any))) in
        {424}let v_945: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_943),(if (success?(4-proj-7-tuple(v_939)) && success?(3-proj-7-tuple(v_939))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),4-proj-7-tuple(v_939)) else fail-any) else fail-any))) in
        {425}let v_946: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_943),(if (success?(4-proj-7-tuple(v_939)) && success?(3-proj-7-tuple(v_939))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),4-proj-7-tuple(v_939)) else fail-any) else fail-any))) in
        {426}let v_947: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_939)) && success?(3-proj-7-tuple(v_939))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),4-proj-7-tuple(v_939)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_943))) then (if not-caught-fail(v_944) then (if not-caught-fail(v_945) then (if not-caught-fail(v_946) then (v_944,v_945,v_946) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let v_948: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_939)) && success?(3-proj-7-tuple(v_939))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),4-proj-7-tuple(v_939)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_939))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-3-tuple(v_947))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_947)) then cipherstatepack(2-proj-3-tuple(v_947),minnonce) else fail-any),1-proj-3-tuple(v_947),3-proj-3-tuple(v_943)) else fail-any) else fail-any) else fail-any)) in
        {428}let v_949: bitstring = catch-fail(symmetricstateunpack(v_948)) in
        {429}let v_950: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_949))) in
        {430}let v_951: aead = catch-fail(decrypt(1-proj-2-tuple(v_950),2-proj-2-tuple(v_950),3-proj-3-tuple(v_949),3-proj-3-tuple(v_940))) in
        {431}let v_952: bitstring = catch-fail(aeadunpack(v_951)) in
        {432}let v_953: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_949))) in
        {433}let v_954: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_950))) && success?(1-proj-3-tuple(v_949))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-2-tuple(v_953))))) then cipherstatepack(1-proj-2-tuple(v_953),increment_nonce(2-proj-2-tuple(v_950))) else fail-any) else fail-any)) in
        {434}let v_955: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_940)) && (success?(3-proj-3-tuple(v_949)) && success?(1-proj-3-tuple(v_949)))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-2-tuple(v_950))))) then (if not-caught-fail(v_951) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if not-caught-fail(v_954) then (v_954,3-proj-3-tuple(v_952),1-proj-3-tuple(v_952)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {435}let v_956: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_949),3-proj-3-tuple(v_949)))) in
        {436}let v_957: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_940)) && success?(symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_949),3-proj-3-tuple(v_949)))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then symmetricstatepack(1-proj-3-tuple(v_956),2-proj-3-tuple(v_956),hash(3-proj-3-tuple(v_956),3-proj-3-tuple(v_940))) else fail-any) else fail-any)) in
        {437}let v_958: bitstring = catch-fail((if success?(3-proj-3-tuple(v_940)) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if not-caught-fail(v_957) then (v_957,2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {438}let v_959: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_958),2-proj-7-tuple(v_939),3-proj-7-tuple(v_939),4-proj-7-tuple(v_939),5-proj-7-tuple(v_939),6-proj-7-tuple(v_939),7-proj-7-tuple(v_939))) in
        {439}let v_960: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_958))) in
        {440}let v_961: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_960),zero)) in
        {441}let v_962: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_960),zero)) in
        {442}let v_963: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_960),zero)) in
        {443}let v_964: bitstring = catch-fail((if success?(2-proj-3-tuple(v_960)) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (v_961,v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {444}let v_965: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_964)) then cipherstatepack(1-proj-3-tuple(v_964),minnonce) else fail-any)) in
        {445}let v_966: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_964)) then cipherstatepack(2-proj-3-tuple(v_964),minnonce) else fail-any)) in
        {446}let v_967: bitstring = catch-fail((if success?(1-proj-3-tuple(v_958)) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if not-caught-fail(v_965) then (if not-caught-fail(v_966) then (1-proj-3-tuple(v_958),v_965,v_966) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {447}let (hs_968: handshakestate,plaintext_c: bitstring,valid_969: bool,cs1_970: cipherstate,cs2_971: cipherstate) = (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-7-tuple(v_939))))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-3-tuple(v_940))))) then (if not-caught-fail(v_941) then (if not-caught-fail(v_948) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if (v_941 && 3-proj-3-tuple(v_958)) then (if not-caught-fail(v_959) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then (v_959,2-proj-3-tuple(v_958),true,2-proj-3-tuple(v_967),3-proj-3-tuple(v_967)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {448}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {449}insert statestore(bob,alice,sid,statepack_d(hs_968,cs1_970,cs2_971))
    ) | (
        {451}!
        {470}get statestore(=bob,=alice,=sid,statepack_d(hs_972: handshakestate,cs1_973: cipherstate,cs2_974: cipherstate)) in
        {452}let hs_975: handshakestate = handshakestatesetcs(hs_972,cs2_974) in
        {453}let v_976: bitstring = catch-fail(handshakestateunpack(hs_975)) in
        {454}let v_977: bitstring = catch-fail((empty,empty,empty)) in
        {455}let v_978: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_976))) in
        {456}let v_979: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_978))) in
        {457}let v_980: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_979),2-proj-2-tuple(v_979),3-proj-3-tuple(v_978),msg_d(bob,alice,sid))) in
        {458}let v_981: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_978))) in
        {459}let v_982: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_979))) && success?(1-proj-3-tuple(v_978))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-2-tuple(v_981))))) then cipherstatepack(1-proj-2-tuple(v_981),increment_nonce(2-proj-2-tuple(v_979))) else fail-any) else fail-any)) in
        {460}let v_983: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_978)) && success?(1-proj-3-tuple(v_978))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-2-tuple(v_979))))) then (if not-caught-fail(v_980) then (if not-caught-fail(v_982) then (v_982,v_980) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {461}let v_984: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_983),2-proj-3-tuple(v_978),3-proj-3-tuple(v_978)))) in
        {462}let v_985: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_983)) && success?(symmetricstatepack(1-proj-2-tuple(v_983),2-proj-3-tuple(v_978),3-proj-3-tuple(v_978)))) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-3-tuple(v_984))))) then symmetricstatepack(1-proj-3-tuple(v_984),2-proj-3-tuple(v_984),hash(3-proj-3-tuple(v_984),2-proj-2-tuple(v_983))) else fail-any) else fail-any)) in
        {463}let v_986: bitstring = catch-fail((if success?(1-proj-7-tuple(v_976)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-2-tuple(v_983))))) then (if not-caught-fail(v_985) then (v_985,2-proj-2-tuple(v_983)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {464}let v_987: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_986),2-proj-7-tuple(v_976),3-proj-7-tuple(v_976),4-proj-7-tuple(v_976),5-proj-7-tuple(v_976),6-proj-7-tuple(v_976),7-proj-7-tuple(v_976))) in
        {465}let v_988: bitstring = catch-fail(concat3(1-proj-3-tuple(v_977),2-proj-3-tuple(v_977),2-proj-2-tuple(v_986))) in
        {466}let (hs_989: handshakestate,message_d_990: bitstring) = (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-7-tuple(v_976))))) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-2-tuple(v_986))))) then (if not-caught-fail(v_987) then (if not-caught-fail(v_988) then (v_987,v_988) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {467}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {468}insert statestore(bob,alice,sid,statepack_e(hs_989,cs1_973,handshakestategetcs(hs_989)));
        {469}out(pub, message_d_990)
    ) | (
        {471}!
        {491}get statestore(=bob,=alice,=sid,statepack_e(hs_991: handshakestate,cs1_992: cipherstate,cs2_993: cipherstate)) in
        {472}let hs_994: handshakestate = handshakestatesetcs(hs_991,cs1_992) in
        {473}in(pub, message_e_995: bitstring);
        {474}let v_996: bitstring = catch-fail(handshakestateunpack(hs_994)) in
        {475}let v_997: bitstring = catch-fail(deconcat3(message_e_995)) in
        {476}let v_998: bool = catch-fail(true) in
        {477}let v_999: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_996))) in
        {478}let v_1000: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_999))) in
        {479}let v_1001: aead = catch-fail(decrypt(1-proj-2-tuple(v_1000),2-proj-2-tuple(v_1000),3-proj-3-tuple(v_999),3-proj-3-tuple(v_997))) in
        {480}let v_1002: bitstring = catch-fail(aeadunpack(v_1001)) in
        {481}let v_1003: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_999))) in
        {482}let v_1004: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1000))) && success?(1-proj-3-tuple(v_999))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-2-tuple(v_1003))))) then cipherstatepack(1-proj-2-tuple(v_1003),increment_nonce(2-proj-2-tuple(v_1000))) else fail-any) else fail-any)) in
        {483}let v_1005: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_997)) && (success?(3-proj-3-tuple(v_999)) && success?(1-proj-3-tuple(v_999)))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-2-tuple(v_1000))))) then (if not-caught-fail(v_1001) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if not-caught-fail(v_1004) then (v_1004,3-proj-3-tuple(v_1002),1-proj-3-tuple(v_1002)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {484}let v_1006: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_999),3-proj-3-tuple(v_999)))) in
        {485}let v_1007: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_997)) && success?(symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_999),3-proj-3-tuple(v_999)))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then symmetricstatepack(1-proj-3-tuple(v_1006),2-proj-3-tuple(v_1006),hash(3-proj-3-tuple(v_1006),3-proj-3-tuple(v_997))) else fail-any) else fail-any)) in
        {486}let v_1008: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_997)) && success?(1-proj-7-tuple(v_996))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if not-caught-fail(v_1007) then (v_1007,2-proj-3-tuple(v_1005),3-proj-3-tuple(v_1005)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {487}let v_1009: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1008),2-proj-7-tuple(v_996),3-proj-7-tuple(v_996),4-proj-7-tuple(v_996),5-proj-7-tuple(v_996),6-proj-7-tuple(v_996),7-proj-7-tuple(v_996))) in
        {488}let (hs_1010: handshakestate,plaintext_e: bitstring,valid_1011: bool) = (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-7-tuple(v_996))))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then (if not-caught-fail(v_998) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if (v_998 && 3-proj-3-tuple(v_1008)) then (if not-caught-fail(v_1009) then (v_1009,2-proj-3-tuple(v_1008),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {489}event RecvMsg(bob,alice,stagepack_e(sid),plaintext_e);
        {490}event RecvEnd(valid_1011)
    ) | (
        {492}event LeakS(phase0,bob);
        {493}out(pub, key_s(bob))
    ) | (
        {494}phase 1;
        {495}event LeakS(phase1,bob);
        {496}out(pub, key_s(bob))
    )
) | (
    {497}let s_1012: keypair = keypairpack(empty,empty) in
    {498}out(pub, getpublickey(s_1012));
    (
        {499}let e_1013: keypair = keypairpack(empty,empty) in
        {500}let v_1014: key = catch-fail(dhexp(key_s(charlie),g)) in
        {501}let rs_1015: key = getpublickey((if not-caught-fail(v_1014) then keypairpack(v_1014,key_s(charlie)) else fail-any)) in
        {502}let re_1016: key = empty in
        {503}let v_1017: bitstring = catch-fail(hash(somename,empty)) in
        {504}let v_1018: key = catch-fail(v_1017) in
        {505}let v_1019: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {506}let v_1020: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then symmetricstatepack(v_1019,v_1018,v_1017) else fail-any) else fail-any) else fail-any))) in
        {507}let v_1021: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then symmetricstatepack(v_1019,v_1018,v_1017) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then symmetricstatepack(1-proj-3-tuple(v_1020),2-proj-3-tuple(v_1020),hash(3-proj-3-tuple(v_1020),empty)) else fail-any) else fail-any)) in
        {508}let v_1022: bitstring = catch-fail(symmetricstateunpack(v_1021)) in
        {509}let v_1023: symmetricstate = catch-fail((if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then symmetricstatepack(1-proj-3-tuple(v_1022),2-proj-3-tuple(v_1022),hash(3-proj-3-tuple(v_1022),rs_1015)) else fail-any)) in
        {510}let hs_1024: handshakestate = (if not-caught-fail(v_1021) then (if not-caught-fail(v_1023) then handshakestatepack(v_1023,s_1012,e_1013,rs_1015,re_1016,empty,false) else fail-any) else fail-any) in
        {511}insert statestore(bob,charlie,sid,statepack_a(hs_1024))
    ) | (
        {533}get statestore(=bob,=charlie,=sid,statepack_a(hs_1025: handshakestate)) in
        {512}in(pub, message_a_1026: bitstring);
        {513}let v_1027: bitstring = catch-fail(handshakestateunpack(hs_1025)) in
        {514}let v_1028: bitstring = catch-fail(deconcat3(message_a_1026)) in
        {515}let v_1029: bool = catch-fail(true) in
        {516}let v_1030: key = catch-fail(1-proj-3-tuple(v_1028)) in
        {517}let v_1031: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1027))) in
        {518}let v_1032: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then symmetricstatepack(1-proj-3-tuple(v_1031),2-proj-3-tuple(v_1031),hash(3-proj-3-tuple(v_1031),v_1030)) else fail-any) else fail-any)) in
        {519}let v_1033: bitstring = catch-fail(symmetricstateunpack(v_1032)) in
        {520}let v_1034: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1033))) in
        {521}let v_1035: aead = catch-fail(decrypt(1-proj-2-tuple(v_1034),2-proj-2-tuple(v_1034),3-proj-3-tuple(v_1033),3-proj-3-tuple(v_1028))) in
        {522}let v_1036: bitstring = catch-fail(aeadunpack(v_1035)) in
        {523}let v_1037: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1033))) in
        {524}let v_1038: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1034))) && success?(1-proj-3-tuple(v_1033))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-2-tuple(v_1037))))) then cipherstatepack(1-proj-2-tuple(v_1037),increment_nonce(2-proj-2-tuple(v_1034))) else fail-any) else fail-any)) in
        {525}let v_1039: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && (success?(3-proj-3-tuple(v_1033)) && success?(1-proj-3-tuple(v_1033)))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-2-tuple(v_1034))))) then (if not-caught-fail(v_1035) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if not-caught-fail(v_1038) then (v_1038,3-proj-3-tuple(v_1036),1-proj-3-tuple(v_1036)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {526}let v_1040: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1033),3-proj-3-tuple(v_1033)))) in
        {527}let v_1041: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && success?(symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1033),3-proj-3-tuple(v_1033)))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then symmetricstatepack(1-proj-3-tuple(v_1040),2-proj-3-tuple(v_1040),hash(3-proj-3-tuple(v_1040),3-proj-3-tuple(v_1028))) else fail-any) else fail-any)) in
        {528}let v_1042: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1028)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if not-caught-fail(v_1041) then (v_1041,2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1043: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1042),2-proj-7-tuple(v_1027),3-proj-7-tuple(v_1027),4-proj-7-tuple(v_1027),v_1030,6-proj-7-tuple(v_1027),7-proj-7-tuple(v_1027))) in
        {530}let (hs_1044: handshakestate,plaintext_a_1045: bitstring,valid_1046: bool) = (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-7-tuple(v_1027))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then (if not-caught-fail(v_1032) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then (if (v_1029 && 3-proj-3-tuple(v_1042)) then (if not-caught-fail(v_1043) then (v_1043,2-proj-3-tuple(v_1042),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {531}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1045);
        {532}insert statestore(bob,charlie,sid,statepack_b(hs_1044))
    ) | (
        {581}get statestore(=bob,=charlie,=sid,statepack_b(hs_1047: handshakestate)) in
        {534}let v_1048: bitstring = catch-fail(handshakestateunpack(hs_1047)) in
        {535}let v_1049: bitstring = catch-fail((empty,empty,empty)) in
        {536}let v_1050: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {537}let v_1051: keypair = catch-fail((if not-caught-fail(v_1050) then keypairpack(v_1050,key_e(bob,charlie,sid)) else fail-any)) in
        {538}let v_1052: bitstring = catch-fail(getpublickey(v_1051)) in
        {539}let v_1053: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1048))) in
        {540}let v_1054: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then symmetricstatepack(1-proj-3-tuple(v_1053),2-proj-3-tuple(v_1053),hash(3-proj-3-tuple(v_1053),v_1052)) else fail-any) else fail-any)) in
        {541}let v_1055: bitstring = catch-fail(keypairunpack(v_1051)) in
        {542}let v_1056: bitstring = catch-fail(symmetricstateunpack(v_1054)) in
        {543}let v_1057: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1056),(if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then dhexp(2-proj-2-tuple(v_1055),5-proj-7-tuple(v_1048)) else fail-any) else fail-any))) in
        {544}let v_1058: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1056),(if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then dhexp(2-proj-2-tuple(v_1055),5-proj-7-tuple(v_1048)) else fail-any) else fail-any))) in
        {545}let v_1059: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1056),(if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then dhexp(2-proj-2-tuple(v_1055),5-proj-7-tuple(v_1048)) else fail-any) else fail-any))) in
        {546}let v_1060: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then dhexp(2-proj-2-tuple(v_1055),5-proj-7-tuple(v_1048)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1056))) then (if not-caught-fail(v_1057) then (if not-caught-fail(v_1058) then (if not-caught-fail(v_1059) then (v_1057,v_1058,v_1059) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {547}let v_1061: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then dhexp(2-proj-2-tuple(v_1055),5-proj-7-tuple(v_1048)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1060)) then cipherstatepack(2-proj-3-tuple(v_1060),minnonce) else fail-any),1-proj-3-tuple(v_1060),3-proj-3-tuple(v_1056)) else fail-any) else fail-any) else fail-any)) in
        {548}let v_1062: key = catch-fail(dhexp(key_s(bob),g)) in
        {549}let v_1063: keypair = catch-fail((if not-caught-fail(v_1062) then keypairpack(v_1062,key_s(bob)) else fail-any)) in
        {550}let v_1064: bitstring = catch-fail(symmetricstateunpack(v_1061)) in
        {551}let v_1065: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1064))) in
        {552}let v_1066: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1065),2-proj-2-tuple(v_1065),3-proj-3-tuple(v_1064),getpublickey(v_1063))) in
        {553}let v_1067: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1064))) in
        {554}let v_1068: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1065))) && success?(1-proj-3-tuple(v_1064))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then cipherstatepack(1-proj-2-tuple(v_1067),increment_nonce(2-proj-2-tuple(v_1065))) else fail-any) else fail-any)) in
        {555}let v_1069: bitstring = catch-fail((if (success?(getpublickey(v_1063)) && (success?(3-proj-3-tuple(v_1064)) && success?(1-proj-3-tuple(v_1064)))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-2-tuple(v_1065))))) then (if not-caught-fail(v_1066) then (if not-caught-fail(v_1068) then (v_1068,v_1066) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {556}let v_1070: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1069),2-proj-3-tuple(v_1064),3-proj-3-tuple(v_1064)))) in
        {557}let v_1071: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1069)) && success?(symmetricstatepack(1-proj-2-tuple(v_1069),2-proj-3-tuple(v_1064),3-proj-3-tuple(v_1064)))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then symmetricstatepack(1-proj-3-tuple(v_1070),2-proj-3-tuple(v_1070),hash(3-proj-3-tuple(v_1070),2-proj-2-tuple(v_1069))) else fail-any) else fail-any)) in
        {558}let v_1072: bitstring = catch-fail((if success?(getpublickey(v_1063)) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then (if not-caught-fail(v_1071) then (v_1071,2-proj-2-tuple(v_1069)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1073: bitstring = catch-fail(keypairunpack(v_1063)) in
        {560}let v_1074: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1072))) in
        {561}let v_1075: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1074),(if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1048)) else fail-any) else fail-any))) in
        {562}let v_1076: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1074),(if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1048)) else fail-any) else fail-any))) in
        {563}let v_1077: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1074),(if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1048)) else fail-any) else fail-any))) in
        {564}let v_1078: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1048)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1074))) then (if not-caught-fail(v_1075) then (if not-caught-fail(v_1076) then (if not-caught-fail(v_1077) then (v_1075,v_1076,v_1077) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let v_1079: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1048)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1048)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1072))) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-3-tuple(v_1078))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1078)) then cipherstatepack(2-proj-3-tuple(v_1078),minnonce) else fail-any),1-proj-3-tuple(v_1078),3-proj-3-tuple(v_1074)) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1080: bitstring = catch-fail(symmetricstateunpack(v_1079)) in
        {567}let v_1081: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1080))) in
        {568}let v_1082: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1081),2-proj-2-tuple(v_1081),3-proj-3-tuple(v_1080),msg_b(bob,charlie,sid))) in
        {569}let v_1083: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1080))) in
        {570}let v_1084: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1081))) && success?(1-proj-3-tuple(v_1080))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-2-tuple(v_1083))))) then cipherstatepack(1-proj-2-tuple(v_1083),increment_nonce(2-proj-2-tuple(v_1081))) else fail-any) else fail-any)) in
        {571}let v_1085: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1080)) && success?(1-proj-3-tuple(v_1080))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-2-tuple(v_1081))))) then (if not-caught-fail(v_1082) then (if not-caught-fail(v_1084) then (v_1084,v_1082) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {572}let v_1086: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1085),2-proj-3-tuple(v_1080),3-proj-3-tuple(v_1080)))) in
        {573}let v_1087: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1085)) && success?(symmetricstatepack(1-proj-2-tuple(v_1085),2-proj-3-tuple(v_1080),3-proj-3-tuple(v_1080)))) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then symmetricstatepack(1-proj-3-tuple(v_1086),2-proj-3-tuple(v_1086),hash(3-proj-3-tuple(v_1086),2-proj-2-tuple(v_1085))) else fail-any) else fail-any)) in
        {574}let v_1088: bitstring = catch-fail((if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then (if not-caught-fail(v_1087) then (v_1087,2-proj-2-tuple(v_1085)) else fail-any) else fail-any) else fail-any)) in
        {575}let v_1089: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1088),v_1063,v_1051,4-proj-7-tuple(v_1048),5-proj-7-tuple(v_1048),6-proj-7-tuple(v_1048),7-proj-7-tuple(v_1048))) in
        {576}let v_1090: bitstring = catch-fail(concat3(v_1052,2-proj-2-tuple(v_1072),2-proj-2-tuple(v_1088))) in
        {577}let (hs_1091: handshakestate,message_b_1092: bitstring) = (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-7-tuple(v_1048))))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-3-tuple(v_1049))))) then (if not-caught-fail(v_1051) then (if not-caught-fail(v_1052) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1063) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-2-tuple(v_1072))))) then (if not-caught-fail(v_1079) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-2-tuple(v_1088))))) then (if not-caught-fail(v_1089) then (if not-caught-fail(v_1090) then (v_1089,v_1090) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {578}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {579}insert statestore(bob,charlie,sid,statepack_c(hs_1091));
        {580}out(pub, message_b_1092)
    ) | (
        {615}get statestore(=bob,=charlie,=sid,statepack_c(hs_1093: handshakestate)) in
        {582}in(pub, message_c_1094: bitstring);
        {583}let v_1095: bitstring = catch-fail(handshakestateunpack(hs_1093)) in
        {584}let v_1096: bitstring = catch-fail(deconcat3(message_c_1094)) in
        {585}let v_1097: bool = catch-fail(true) in
        {586}let v_1098: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1095))) in
        {587}let v_1099: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1095))) in
        {588}let v_1100: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1099),(if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any))) in
        {589}let v_1101: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1099),(if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any))) in
        {590}let v_1102: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1099),(if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any))) in
        {591}let v_1103: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1099))) then (if not-caught-fail(v_1100) then (if not-caught-fail(v_1101) then (if not-caught-fail(v_1102) then (v_1100,v_1101,v_1102) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1104: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-3-tuple(v_1099))))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1103)) then cipherstatepack(2-proj-3-tuple(v_1103),minnonce) else fail-any),1-proj-3-tuple(v_1103),3-proj-3-tuple(v_1099)) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1105: bitstring = catch-fail(symmetricstateunpack(v_1104)) in
        {594}let v_1106: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1105))) in
        {595}let v_1107: aead = catch-fail(decrypt(1-proj-2-tuple(v_1106),2-proj-2-tuple(v_1106),3-proj-3-tuple(v_1105),3-proj-3-tuple(v_1096))) in
        {596}let v_1108: bitstring = catch-fail(aeadunpack(v_1107)) in
        {597}let v_1109: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1105))) in
        {598}let v_1110: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1106))) && success?(1-proj-3-tuple(v_1105))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then cipherstatepack(1-proj-2-tuple(v_1109),increment_nonce(2-proj-2-tuple(v_1106))) else fail-any) else fail-any)) in
        {599}let v_1111: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1096)) && (success?(3-proj-3-tuple(v_1105)) && success?(1-proj-3-tuple(v_1105)))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then (if not-caught-fail(v_1107) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-3-tuple(v_1108))))) then (if not-caught-fail(v_1110) then (v_1110,3-proj-3-tuple(v_1108),1-proj-3-tuple(v_1108)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {600}let v_1112: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1111),2-proj-3-tuple(v_1105),3-proj-3-tuple(v_1105)))) in
        {601}let v_1113: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1096)) && success?(symmetricstatepack(1-proj-3-tuple(v_1111),2-proj-3-tuple(v_1105),3-proj-3-tuple(v_1105)))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then symmetricstatepack(1-proj-3-tuple(v_1112),2-proj-3-tuple(v_1112),hash(3-proj-3-tuple(v_1112),3-proj-3-tuple(v_1096))) else fail-any) else fail-any)) in
        {602}let v_1114: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1096)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-3-tuple(v_1105))))) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then (if not-caught-fail(v_1113) then (v_1113,2-proj-3-tuple(v_1111),3-proj-3-tuple(v_1111)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {603}let v_1115: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1114),2-proj-7-tuple(v_1095),3-proj-7-tuple(v_1095),4-proj-7-tuple(v_1095),5-proj-7-tuple(v_1095),6-proj-7-tuple(v_1095),7-proj-7-tuple(v_1095))) in
        {604}let v_1116: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1114))) in
        {605}let v_1117: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1116),zero)) in
        {606}let v_1118: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1116),zero)) in
        {607}let v_1119: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1116),zero)) in
        {608}let v_1120: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1116)) then (if not-caught-fail(v_1117) then (if not-caught-fail(v_1118) then (if not-caught-fail(v_1119) then (v_1117,v_1118,v_1119) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {609}let v_1121: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1120)) then cipherstatepack(1-proj-3-tuple(v_1120),minnonce) else fail-any)) in
        {610}let v_1122: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1120)) then cipherstatepack(2-proj-3-tuple(v_1120),minnonce) else fail-any)) in
        {611}let v_1123: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1114)) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-3-tuple(v_1116))))) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-3-tuple(v_1120))))) then (if not-caught-fail(v_1121) then (if not-caught-fail(v_1122) then (1-proj-3-tuple(v_1114),v_1121,v_1122) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {612}let (hs_1124: handshakestate,plaintext_c_1125: bitstring,valid_1126: bool,cs1_1127: cipherstate,cs2_1128: cipherstate) = (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-7-tuple(v_1095))))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-3-tuple(v_1096))))) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1104) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then (if (v_1097 && 3-proj-3-tuple(v_1114)) then (if not-caught-fail(v_1115) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (v_1115,2-proj-3-tuple(v_1114),true,2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {613}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1125);
        {614}insert statestore(bob,charlie,sid,statepack_d(hs_1124,cs1_1127,cs2_1128))
    ) | (
        {616}!
        {635}get statestore(=bob,=charlie,=sid,statepack_d(hs_1129: handshakestate,cs1_1130: cipherstate,cs2_1131: cipherstate)) in
        {617}let hs_1132: handshakestate = handshakestatesetcs(hs_1129,cs2_1131) in
        {618}let v_1133: bitstring = catch-fail(handshakestateunpack(hs_1132)) in
        {619}let v_1134: bitstring = catch-fail((empty,empty,empty)) in
        {620}let v_1135: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1133))) in
        {621}let v_1136: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1135))) in
        {622}let v_1137: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1136),2-proj-2-tuple(v_1136),3-proj-3-tuple(v_1135),msg_d(bob,charlie,sid))) in
        {623}let v_1138: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1135))) in
        {624}let v_1139: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1136))) && success?(1-proj-3-tuple(v_1135))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-2-tuple(v_1138))))) then cipherstatepack(1-proj-2-tuple(v_1138),increment_nonce(2-proj-2-tuple(v_1136))) else fail-any) else fail-any)) in
        {625}let v_1140: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1135)) && success?(1-proj-3-tuple(v_1135))) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-2-tuple(v_1136))))) then (if not-caught-fail(v_1137) then (if not-caught-fail(v_1139) then (v_1139,v_1137) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1141: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1140),2-proj-3-tuple(v_1135),3-proj-3-tuple(v_1135)))) in
        {627}let v_1142: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1140)) && success?(symmetricstatepack(1-proj-2-tuple(v_1140),2-proj-3-tuple(v_1135),3-proj-3-tuple(v_1135)))) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-3-tuple(v_1141))))) then symmetricstatepack(1-proj-3-tuple(v_1141),2-proj-3-tuple(v_1141),hash(3-proj-3-tuple(v_1141),2-proj-2-tuple(v_1140))) else fail-any) else fail-any)) in
        {628}let v_1143: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1133)) then (if (not-caught-fail(v_1135) && success?(is-true(success?(1-proj-3-tuple(v_1135))))) then (if (not-caught-fail(v_1140) && success?(is-true(success?(1-proj-2-tuple(v_1140))))) then (if not-caught-fail(v_1142) then (v_1142,2-proj-2-tuple(v_1140)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {629}let v_1144: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1143),2-proj-7-tuple(v_1133),3-proj-7-tuple(v_1133),4-proj-7-tuple(v_1133),5-proj-7-tuple(v_1133),6-proj-7-tuple(v_1133),7-proj-7-tuple(v_1133))) in
        {630}let v_1145: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1134),2-proj-3-tuple(v_1134),2-proj-2-tuple(v_1143))) in
        {631}let (hs_1146: handshakestate,message_d_1147: bitstring) = (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-7-tuple(v_1133))))) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then (if (not-caught-fail(v_1143) && success?(is-true(success?(1-proj-2-tuple(v_1143))))) then (if not-caught-fail(v_1144) then (if not-caught-fail(v_1145) then (v_1144,v_1145) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {632}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {633}insert statestore(bob,charlie,sid,statepack_e(hs_1146,cs1_1130,handshakestategetcs(hs_1146)));
        {634}out(pub, message_d_1147)
    ) | (
        {636}!
        {656}get statestore(=bob,=charlie,=sid,statepack_e(hs_1148: handshakestate,cs1_1149: cipherstate,cs2_1150: cipherstate)) in
        {637}let hs_1151: handshakestate = handshakestatesetcs(hs_1148,cs1_1149) in
        {638}in(pub, message_e_1152: bitstring);
        {639}let v_1153: bitstring = catch-fail(handshakestateunpack(hs_1151)) in
        {640}let v_1154: bitstring = catch-fail(deconcat3(message_e_1152)) in
        {641}let v_1155: bool = catch-fail(true) in
        {642}let v_1156: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1153))) in
        {643}let v_1157: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1156))) in
        {644}let v_1158: aead = catch-fail(decrypt(1-proj-2-tuple(v_1157),2-proj-2-tuple(v_1157),3-proj-3-tuple(v_1156),3-proj-3-tuple(v_1154))) in
        {645}let v_1159: bitstring = catch-fail(aeadunpack(v_1158)) in
        {646}let v_1160: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1156))) in
        {647}let v_1161: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1157))) && success?(1-proj-3-tuple(v_1156))) then (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-2-tuple(v_1160))))) then cipherstatepack(1-proj-2-tuple(v_1160),increment_nonce(2-proj-2-tuple(v_1157))) else fail-any) else fail-any)) in
        {648}let v_1162: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && (success?(3-proj-3-tuple(v_1156)) && success?(1-proj-3-tuple(v_1156)))) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-2-tuple(v_1157))))) then (if not-caught-fail(v_1158) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-3-tuple(v_1159))))) then (if not-caught-fail(v_1161) then (v_1161,3-proj-3-tuple(v_1159),1-proj-3-tuple(v_1159)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {649}let v_1163: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1162),2-proj-3-tuple(v_1156),3-proj-3-tuple(v_1156)))) in
        {650}let v_1164: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && success?(symmetricstatepack(1-proj-3-tuple(v_1162),2-proj-3-tuple(v_1156),3-proj-3-tuple(v_1156)))) then (if (not-caught-fail(v_1163) && success?(is-true(success?(1-proj-3-tuple(v_1163))))) then symmetricstatepack(1-proj-3-tuple(v_1163),2-proj-3-tuple(v_1163),hash(3-proj-3-tuple(v_1163),3-proj-3-tuple(v_1154))) else fail-any) else fail-any)) in
        {651}let v_1165: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && success?(1-proj-7-tuple(v_1153))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-3-tuple(v_1162))))) then (if not-caught-fail(v_1164) then (v_1164,2-proj-3-tuple(v_1162),3-proj-3-tuple(v_1162)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {652}let v_1166: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1165),2-proj-7-tuple(v_1153),3-proj-7-tuple(v_1153),4-proj-7-tuple(v_1153),5-proj-7-tuple(v_1153),6-proj-7-tuple(v_1153),7-proj-7-tuple(v_1153))) in
        {653}let (hs_1167: handshakestate,plaintext_e_1168: bitstring,valid_1169: bool) = (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-7-tuple(v_1153))))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-3-tuple(v_1154))))) then (if not-caught-fail(v_1155) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then (if (v_1155 && 3-proj-3-tuple(v_1165)) then (if not-caught-fail(v_1166) then (v_1166,2-proj-3-tuple(v_1165),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {654}event RecvMsg(bob,charlie,stagepack_e(sid),plaintext_e_1168);
        {655}event RecvEnd(valid_1169)
    ) | (
        {657}event LeakS(phase0,bob);
        {658}out(pub, key_s(bob))
    ) | (
        {659}phase 1;
        {660}event LeakS(phase1,bob);
        {661}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob,sid_a)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 181 rules in the queue.
400 rules inserted. The rule base contains 392 rules. 19 rules in the queue.
600 rules inserted. The rule base contains 579 rules. 178 rules in the queue.
800 rules inserted. The rule base contains 766 rules. 131 rules in the queue.
1000 rules inserted. The rule base contains 954 rules. 359 rules in the queue.
1200 rules inserted. The rule base contains 1132 rules. 325 rules in the queue.
1400 rules inserted. The rule base contains 1293 rules. 322 rules in the queue.
1600 rules inserted. The rule base contains 1466 rules. 436 rules in the queue.
1800 rules inserted. The rule base contains 1626 rules. 390 rules in the queue.
2000 rules inserted. The rule base contains 1793 rules. 343 rules in the queue.
2200 rules inserted. The rule base contains 1962 rules. 346 rules in the queue.
2400 rules inserted. The rule base contains 2127 rules. 361 rules in the queue.
2600 rules inserted. The rule base contains 2229 rules. 375 rules in the queue.
2800 rules inserted. The rule base contains 2394 rules. 437 rules in the queue.
3000 rules inserted. The rule base contains 2558 rules. 500 rules in the queue.
3200 rules inserted. The rule base contains 2662 rules. 468 rules in the queue.
3400 rules inserted. The rule base contains 2764 rules. 443 rules in the queue.
3600 rules inserted. The rule base contains 2892 rules. 457 rules in the queue.
3800 rules inserted. The rule base contains 3022 rules. 476 rules in the queue.
4000 rules inserted. The rule base contains 3092 rules. 454 rules in the queue.
4200 rules inserted. The rule base contains 3181 rules. 424 rules in the queue.
4400 rules inserted. The rule base contains 3318 rules. 386 rules in the queue.
4600 rules inserted. The rule base contains 3468 rules. 386 rules in the queue.
4800 rules inserted. The rule base contains 3627 rules. 432 rules in the queue.
5000 rules inserted. The rule base contains 3731 rules. 407 rules in the queue.
5200 rules inserted. The rule base contains 3820 rules. 354 rules in the queue.
5400 rules inserted. The rule base contains 3946 rules. 334 rules in the queue.
5600 rules inserted. The rule base contains 4061 rules. 322 rules in the queue.
5800 rules inserted. The rule base contains 4175 rules. 303 rules in the queue.
6000 rules inserted. The rule base contains 4250 rules. 239 rules in the queue.
6200 rules inserted. The rule base contains 4402 rules. 246 rules in the queue.
6400 rules inserted. The rule base contains 4571 rules. 285 rules in the queue.
6600 rules inserted. The rule base contains 4702 rules. 295 rules in the queue.
6800 rules inserted. The rule base contains 4857 rules. 320 rules in the queue.
7000 rules inserted. The rule base contains 5018 rules. 349 rules in the queue.
7200 rules inserted. The rule base contains 5167 rules. 366 rules in the queue.
7400 rules inserted. The rule base contains 5300 rules. 356 rules in the queue.
7600 rules inserted. The rule base contains 5446 rules. 310 rules in the queue.
7800 rules inserted. The rule base contains 5571 rules. 303 rules in the queue.
8000 rules inserted. The rule base contains 5732 rules. 301 rules in the queue.
8200 rules inserted. The rule base contains 5882 rules. 290 rules in the queue.
8400 rules inserted. The rule base contains 6035 rules. 297 rules in the queue.
8600 rules inserted. The rule base contains 6151 rules. 333 rules in the queue.
8800 rules inserted. The rule base contains 6263 rules. 329 rules in the queue.
9000 rules inserted. The rule base contains 6390 rules. 316 rules in the queue.
9200 rules inserted. The rule base contains 6527 rules. 278 rules in the queue.
9400 rules inserted. The rule base contains 6656 rules. 259 rules in the queue.
9600 rules inserted. The rule base contains 6812 rules. 239 rules in the queue.
9800 rules inserted. The rule base contains 6917 rules. 197 rules in the queue.
10000 rules inserted. The rule base contains 7037 rules. 223 rules in the queue.
10200 rules inserted. The rule base contains 7159 rules. 199 rules in the queue.
10400 rules inserted. The rule base contains 7287 rules. 131 rules in the queue.
10600 rules inserted. The rule base contains 7362 rules. 63 rules in the queue.
10800 rules inserted. The rule base contains 7382 rules. 0 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_348467034]),msg_a(alice,charlie,sid[!1 = @sid_348467034]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_348467035]),msg_a(alice,charlie,sid[!1 = @sid_348467034])))
Abbreviations:
sid_348467070 = sid[!1 = @sid_348467060]
sid_348467071 = sid[!1 = @sid_348467042]

1. The entry statestore(bob,alice,sid_348467070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {346}.
table(statestore(bob,alice,sid_348467070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_348467071,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {182}.
table(statestore(alice,charlie,sid_348467071,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_348467071,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {205}.
The event SendMsg(alice,charlie,stagepack_a(sid_348467071),msg_a(alice,charlie,sid_348467071)) may be executed at {202}.
So the message concat3(dhexp(key_e(alice,charlie,sid_348467071),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_348467071),g)),msg_a(alice,charlie,sid_348467071))) may be sent on channel pub at output {204}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_348467071),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_348467071),g)),msg_a(alice,charlie,sid_348467071)))).

4. The entry statestore(bob,alice,sid_348467070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {368}.
The message concat3(dhexp(key_e(alice,charlie,sid_348467071),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_348467071),g)),msg_a(alice,charlie,sid_348467071))) that may be sent on channel pub by 3 may be received at input {347}.
We have dhexp(key_e(alice,charlie,sid_348467071),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_348467070),msg_a(alice,charlie,sid_348467071)) may be executed at {366}.
end(RecvMsg(bob,alice,stagepack_a(sid_348467070),msg_a(alice,charlie,sid_348467071))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467074]),msg_a(alice,bob,sid[!1 = @sid_348467074]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_348467075]),msg_a(alice,bob,sid[!1 = @sid_348467074])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_348467078]),msg_a(alice,charlie,sid[!1 = @sid_348467078]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_348467079]),msg_a(alice,charlie,sid[!1 = @sid_348467078])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467088]),msg_a(alice,bob,sid[!1 = @sid_348467088]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_348467089]),msg_a(alice,bob,sid[!1 = @sid_348467088])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_348467092]),msg_a(alice,charlie,sid[!1 = @sid_348467092]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_348467093]),msg_a(alice,charlie,sid[!1 = @sid_348467092])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_348467106]),msg_a(alice,charlie,sid[!1 = @sid_348467106]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_348467107]),msg_a(alice,charlie,sid[!1 = @sid_348467106])))
Abbreviations:
sid_348467142 = sid[!1 = @sid_348467132]
sid_348467143 = sid[!1 = @sid_348467114]

1. The entry statestore(bob,alice,sid_348467142,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {346}.
table(statestore(bob,alice,sid_348467142,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_348467143,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {182}.
table(statestore(alice,charlie,sid_348467143,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_348467143,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {205}.
The event SendMsg(alice,charlie,stagepack_a(sid_348467143),msg_a(alice,charlie,sid_348467143)) may be executed at {202}.
So the message concat3(dhexp(key_e(alice,charlie,sid_348467143),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_348467143),g)),msg_a(alice,charlie,sid_348467143))) may be sent on channel pub at output {204}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_348467143),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_348467143),g)),msg_a(alice,charlie,sid_348467143)))).

4. The entry statestore(bob,alice,sid_348467142,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {368}.
The message concat3(dhexp(key_e(alice,charlie,sid_348467143),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_348467143),g)),msg_a(alice,charlie,sid_348467143))) that may be sent on channel pub by 3 may be received at input {347}.
We have dhexp(key_e(alice,charlie,sid_348467143),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_348467142),msg_a(alice,charlie,sid_348467143)) may be executed at {366}.
end(RecvMsg(bob,alice,stagepack_a(sid_348467142),msg_a(alice,charlie,sid_348467143))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_348467150]),msg_a(alice,charlie,sid[!1 = @sid_348467150]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_348467151]),msg_a(alice,charlie,sid[!1 = @sid_348467150])))
Abbreviations:
sid_348467186 = sid[!1 = @sid_348467176]
sid_348467187 = sid[!1 = @sid_348467158]

1. The entry statestore(bob,alice,sid_348467186,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {346}.
table(statestore(bob,alice,sid_348467186,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_348467187,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {182}.
table(statestore(alice,charlie,sid_348467187,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_348467187,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {205}.
The event SendMsg(alice,charlie,stagepack_a(sid_348467187),msg_a(alice,charlie,sid_348467187)) may be executed at {202}.
So the message concat3(dhexp(key_e(alice,charlie,sid_348467187),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_348467187),g)),msg_a(alice,charlie,sid_348467187))) may be sent on channel pub at output {204}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_348467187),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_348467187),g)),msg_a(alice,charlie,sid_348467187)))).

4. The entry statestore(bob,alice,sid_348467186,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {368}.
The message concat3(dhexp(key_e(alice,charlie,sid_348467187),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_348467187),g)),msg_a(alice,charlie,sid_348467187))) that may be sent on channel pub by 3 may be received at input {347}.
We have dhexp(key_e(alice,charlie,sid_348467187),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_348467186),msg_a(alice,charlie,sid_348467187)) may be executed at {366}.
end(RecvMsg(bob,alice,stagepack_a(sid_348467186),msg_a(alice,charlie,sid_348467187))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467190]),msg_a(alice,bob,sid[!1 = @sid_348467190]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_348467190]))
Abbreviations:
sid_348467247 = sid[!1 = @sid_348467222]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_348467247,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_348467247,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_348467247,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_348467247),msg_a(alice,bob,sid_348467247)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_348467247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_348467247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_348467247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_348467247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_348467247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_348467247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_348467247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_348467247),g).
attacker(dhexp(key_e(alice,bob,sid_348467247),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_348467247),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467247),g)),msg_a(alice,bob,sid_348467247)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_348467247).
attacker(msg_a(alice,bob,sid_348467247)).

18. By 17, the attacker may know msg_a(alice,bob,sid_348467247).
So the attacker may know msg_a(alice,bob,sid_348467247) in phase 1.
attacker_p1(msg_a(alice,bob,sid_348467247)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467250]),msg_a(alice,bob,sid[!1 = @sid_348467250]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_348467250]))
Abbreviations:
sid_348467307 = sid[!1 = @sid_348467282]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_348467307,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_348467307,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_348467307,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_348467307),msg_a(alice,bob,sid_348467307)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_348467307),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_348467307),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_348467307),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_348467307),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_348467307),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_348467307),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_348467307),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_348467307),g).
attacker(dhexp(key_e(alice,bob,sid_348467307),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_348467307),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467307),g)),msg_a(alice,bob,sid_348467307)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_348467307).
attacker(msg_a(alice,bob,sid_348467307)).

18. By 17, the attacker may know msg_a(alice,bob,sid_348467307).
So the attacker may know msg_a(alice,bob,sid_348467307) in phase 1.
attacker_p1(msg_a(alice,bob,sid_348467307)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467310]),msg_a(alice,bob,sid[!1 = @sid_348467310]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_348467310]))
Abbreviations:
sid_348467368 = sid[!1 = @sid_348467343]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_348467368,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_348467368,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_348467368,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_348467368),msg_a(alice,bob,sid_348467368)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_348467368),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_348467368),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_348467368),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_348467368),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_348467368),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_348467368),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_348467368),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_348467368),g).
attacker(dhexp(key_e(alice,bob,sid_348467368),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_348467368),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467368),g)),msg_a(alice,bob,sid_348467368)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_348467368).
attacker(msg_a(alice,bob,sid_348467368)).

18. By 17, the attacker may know msg_a(alice,bob,sid_348467368).
So the attacker may know msg_a(alice,bob,sid_348467368) in phase 1.
attacker_p1(msg_a(alice,bob,sid_348467368)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467371]),msg_a(alice,bob,sid[!1 = @sid_348467371]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_348467371]))
Abbreviations:
sid_348467428 = sid[!1 = @sid_348467403]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_348467428,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_348467428,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_348467428,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_348467428),msg_a(alice,bob,sid_348467428)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_348467428),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_348467428),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_348467428),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_348467428),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_348467428),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_348467428),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_348467428),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_348467428),g).
attacker(dhexp(key_e(alice,bob,sid_348467428),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_348467428),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348467428),g)),msg_a(alice,bob,sid_348467428)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_348467428).
attacker(msg_a(alice,bob,sid_348467428)).

18. By 17, the attacker may know msg_a(alice,bob,sid_348467428).
So the attacker may know msg_a(alice,bob,sid_348467428) in phase 1.
attacker_p1(msg_a(alice,bob,sid_348467428)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467431]),msg_b(bob,alice,sid[!1 = @sid_348467431]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467432]),msg_a(alice,bob,sid[!1 = @sid_348467432]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_348467432]),msg_b(bob,alice,sid[!1 = @sid_348467431])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467440]),msg_b(bob,alice,sid[!1 = @sid_348467440]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467441]),msg_a(alice,bob,sid[!1 = @sid_348467441]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_348467441]),msg_b(bob,alice,sid[!1 = @sid_348467440])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467450]),msg_b(bob,alice,sid[!1 = @sid_348467450]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467451]),msg_a(alice,bob,sid[!1 = @sid_348467451]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_348467451]),msg_b(bob,alice,sid[!1 = @sid_348467450])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467460]),msg_b(bob,alice,sid[!1 = @sid_348467460]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467461]),msg_a(alice,bob,sid[!1 = @sid_348467461]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_348467461]),msg_b(bob,alice,sid[!1 = @sid_348467460])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467469]),msg_b(bob,alice,sid[!1 = @sid_348467469]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467470]),msg_a(alice,bob,sid[!1 = @sid_348467470]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_348467470]),msg_b(bob,alice,sid[!1 = @sid_348467469])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467491]),msg_c(alice,bob,sid[!1 = @sid_348467491]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467492]),msg_b(bob,alice,sid[!1 = @sid_348467492]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467491]),msg_a(alice,bob,sid[!1 = @sid_348467491]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_348467492]),msg_c(alice,bob,sid[!1 = @sid_348467491])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467500]),msg_c(alice,bob,sid[!1 = @sid_348467500]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467501]),msg_b(bob,alice,sid[!1 = @sid_348467501]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467500]),msg_a(alice,bob,sid[!1 = @sid_348467500]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_348467501]),msg_c(alice,bob,sid[!1 = @sid_348467500])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467510]),msg_c(alice,bob,sid[!1 = @sid_348467510]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467511]),msg_b(bob,alice,sid[!1 = @sid_348467511]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467510]),msg_a(alice,bob,sid[!1 = @sid_348467510]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_348467511]),msg_c(alice,bob,sid[!1 = @sid_348467510])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467520]),msg_c(alice,bob,sid[!1 = @sid_348467520]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467521]),msg_b(bob,alice,sid[!1 = @sid_348467521]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467520]),msg_a(alice,bob,sid[!1 = @sid_348467520]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_348467521]),msg_c(alice,bob,sid[!1 = @sid_348467520])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467529]),msg_c(alice,bob,sid[!1 = @sid_348467529]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467530]),msg_b(bob,alice,sid[!1 = @sid_348467530]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467529]),msg_a(alice,bob,sid[!1 = @sid_348467529]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_348467530]),msg_c(alice,bob,sid[!1 = @sid_348467529])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467551]),msg_d(bob,alice,sid[!1 = @sid_348467551]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467552]),msg_c(alice,bob,sid[!1 = @sid_348467552]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467551]),msg_b(bob,alice,sid[!1 = @sid_348467551]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467552]),msg_a(alice,bob,sid[!1 = @sid_348467552]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_348467552]),msg_d(bob,alice,sid[!1 = @sid_348467551])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467560]),msg_d(bob,alice,sid[!1 = @sid_348467560]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467561]),msg_c(alice,bob,sid[!1 = @sid_348467561]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467560]),msg_b(bob,alice,sid[!1 = @sid_348467560]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467561]),msg_a(alice,bob,sid[!1 = @sid_348467561]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_348467561]),msg_d(bob,alice,sid[!1 = @sid_348467560])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467570]),msg_d(bob,alice,sid[!1 = @sid_348467570]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467571]),msg_c(alice,bob,sid[!1 = @sid_348467571]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467570]),msg_b(bob,alice,sid[!1 = @sid_348467570]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467571]),msg_a(alice,bob,sid[!1 = @sid_348467571]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_348467571]),msg_d(bob,alice,sid[!1 = @sid_348467570])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467580]),msg_d(bob,alice,sid[!1 = @sid_348467580]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467581]),msg_c(alice,bob,sid[!1 = @sid_348467581]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467580]),msg_b(bob,alice,sid[!1 = @sid_348467580]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467581]),msg_a(alice,bob,sid[!1 = @sid_348467581]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_348467581]),msg_d(bob,alice,sid[!1 = @sid_348467580])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467589]),msg_d(bob,alice,sid[!1 = @sid_348467589]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467590]),msg_c(alice,bob,sid[!1 = @sid_348467590]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467589]),msg_b(bob,alice,sid[!1 = @sid_348467589]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467590]),msg_a(alice,bob,sid[!1 = @sid_348467590]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_348467590]),msg_d(bob,alice,sid[!1 = @sid_348467589])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_348467611]),msg_e(alice,bob,sid[!1 = @sid_348467611]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467612]),msg_d(bob,alice,sid[!1 = @sid_348467612]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467611]),msg_c(alice,bob,sid[!1 = @sid_348467611]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467612]),msg_b(bob,alice,sid[!1 = @sid_348467612]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467611]),msg_a(alice,bob,sid[!1 = @sid_348467611]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_348467612]),msg_e(alice,bob,sid[!1 = @sid_348467611])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_348467620]),msg_e(alice,bob,sid[!1 = @sid_348467620]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467621]),msg_d(bob,alice,sid[!1 = @sid_348467621]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467620]),msg_c(alice,bob,sid[!1 = @sid_348467620]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467621]),msg_b(bob,alice,sid[!1 = @sid_348467621]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467620]),msg_a(alice,bob,sid[!1 = @sid_348467620]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_348467621]),msg_e(alice,bob,sid[!1 = @sid_348467620])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_348467630]),msg_e(alice,bob,sid[!1 = @sid_348467630]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467631]),msg_d(bob,alice,sid[!1 = @sid_348467631]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467630]),msg_c(alice,bob,sid[!1 = @sid_348467630]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467631]),msg_b(bob,alice,sid[!1 = @sid_348467631]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467630]),msg_a(alice,bob,sid[!1 = @sid_348467630]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_348467631]),msg_e(alice,bob,sid[!1 = @sid_348467630])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_348467640]),msg_e(alice,bob,sid[!1 = @sid_348467640]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467641]),msg_d(bob,alice,sid[!1 = @sid_348467641]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467640]),msg_c(alice,bob,sid[!1 = @sid_348467640]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467641]),msg_b(bob,alice,sid[!1 = @sid_348467641]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467640]),msg_a(alice,bob,sid[!1 = @sid_348467640]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_348467641]),msg_e(alice,bob,sid[!1 = @sid_348467640])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_348467649]),msg_e(alice,bob,sid[!1 = @sid_348467649]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467650]),msg_d(bob,alice,sid[!1 = @sid_348467650]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467649]),msg_c(alice,bob,sid[!1 = @sid_348467649]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467650]),msg_b(bob,alice,sid[!1 = @sid_348467650]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467649]),msg_a(alice,bob,sid[!1 = @sid_348467649]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_348467650]),msg_e(alice,bob,sid[!1 = @sid_348467649])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob,sid_a))
RESULT not attacker_p1(msg_e(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_348467669]),msg_e(alice,bob,sid[!1 = @sid_348467669]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_348467670]),msg_d(bob,alice,sid[!1 = @sid_348467670]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_348467669]),msg_c(alice,bob,sid[!1 = @sid_348467669]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_348467670]),msg_b(bob,alice,sid[!1 = @sid_348467670]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_348467669]),msg_a(alice,bob,sid[!1 = @sid_348467669]))) -> end(RecvEnd(true))
Abbreviations:
sid_348468070 = sid[!1 = @sid_348467989]
sid_348468071 = sid[!1 = @sid_348468059]

1. The entry statestore(bob,alice,sid_348468071,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {346}.
table(statestore(bob,alice,sid_348468071,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,bob,sid_348468070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_348468070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_348468070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_348468070),msg_a(alice,bob,sid_348468070)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_348468070),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_348468070),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070)))).

4. The entry statestore(bob,alice,sid_348468071,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {368}.
The message concat3(dhexp(key_e(alice,bob,sid_348468070),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))) that may be sent on channel pub by 3 may be received at input {347}.
We have dhexp(key_e(alice,bob,sid_348468070),g) <> caught-fail.
So the entry statestore(bob,alice,sid_348468071,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false))) may be inserted in a table at insert {367}.
table(statestore(bob,alice,sid_348468071,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false)))).

5. The entry statestore(bob,alice,sid_348468071,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false))) that may be in a table by 4 may be read at get {416}.
The event SendMsg(bob,alice,stagepack_b(sid_348468071),msg_b(bob,alice,sid_348468071)) may be executed at {413}.
So the entry statestore(bob,alice,sid_348468071,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false))) may be inserted in a table at insert {414}.
table(statestore(bob,alice,sid_348468071,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false)))).

6. The entry statestore(alice,bob,sid_348468070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_348468070),msg_a(alice,bob,sid_348468070)) may be executed at {38}.
So the entry statestore(alice,bob,sid_348468070,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),empty,empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_348468070,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_348468071,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false))) that may be in a table by 4 may be read at get {416}.
The event SendMsg(bob,alice,stagepack_b(sid_348468071),msg_b(bob,alice,sid_348468071)) may be executed at {413}.
So the message concat3(dhexp(key_e(bob,alice,sid_348468071),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))) may be sent on channel pub at output {415}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_348468071),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071)))).

8. The entry statestore(alice,bob,sid_348468070,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {89}.
The message concat3(dhexp(key_e(bob,alice,sid_348468071),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))) that may be sent on channel pub by 7 may be received at input {42}.
We have dhexp(key_e(bob,alice,sid_348468071),g) <> caught-fail.
So the entry statestore(alice,bob,sid_348468070,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true))) may be inserted in a table at insert {88}.
table(statestore(alice,bob,sid_348468070,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true)))).

9. The entry statestore(alice,bob,sid_348468070,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true))) that may be in a table by 8 may be read at get {122}.
The event SendMsg(alice,bob,stagepack_c(sid_348468070),msg_c(alice,bob,sid_348468070)) may be executed at {119}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))) may be sent on channel pub at output {121}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070)))).

10. The entry statestore(bob,alice,sid_348468071,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false))) that may be in a table by 5 may be read at get {450}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))) that may be sent on channel pub by 9 may be received at input {417}.
So the entry statestore(bob,alice,sid_348468071,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {449}.
table(statestore(bob,alice,sid_348468071,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce)))).

11. The entry statestore(bob,alice,sid_348468071,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {470}.
The event SendMsg(bob,alice,stagepack_d(sid_348468071),msg_d(bob,alice,sid_348468071)) may be executed at {467}.
So the entry statestore(bob,alice,sid_348468071,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {468}.
table(statestore(bob,alice,sid_348468071,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce))))).

12. The entry statestore(alice,bob,sid_348468070,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true))) that may be in a table by 8 may be read at get {122}.
The event SendMsg(alice,bob,stagepack_c(sid_348468070),msg_c(alice,bob,sid_348468070)) may be executed at {119}.
So the entry statestore(alice,bob,sid_348468070,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {120}.
table(statestore(alice,bob,sid_348468070,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce)))).

13. The entry statestore(bob,alice,sid_348468071,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {470}.
The event SendMsg(bob,alice,stagepack_d(sid_348468071),msg_d(bob,alice,sid_348468071)) may be executed at {467}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071))) may be sent on channel pub at output {469}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071)))).

14. The entry statestore(alice,bob,sid_348468070,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 12 may be read at get {143}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071))) that may be sent on channel pub by 13 may be received at input {125}.
So the entry statestore(alice,bob,sid_348468070,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {142}.
table(statestore(alice,bob,sid_348468070,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce))))).

15. The entry statestore(alice,bob,sid_348468070,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_348468070),g),key_e(alice,bob,sid_348468070)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_348468071),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 14 may be read at get {162}.
The event SendMsg(alice,bob,stagepack_e(sid_348468070),msg_e(alice,bob,sid_348468070)) may be executed at {160}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071))),msg_e(alice,bob,sid_348468070))) may be sent on channel pub at output {161}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071))),msg_e(alice,bob,sid_348468070)))).

16. The entry statestore(bob,alice,sid_348468071,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_348468071),g),key_e(bob,alice,sid_348468071)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_348468070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 11 may be read at get {491}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_348468070),g))),dhexp(key_e(bob,alice,sid_348468071),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_348468070),dhexp(key_e(bob,alice,sid_348468071),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_348468070),g)),msg_a(alice,bob,sid_348468070))),dhexp(key_e(bob,alice,sid_348468071),g)),dhexp(key_s(bob),g))),msg_b(bob,alice,sid_348468071))),msg_c(alice,bob,sid_348468070))),msg_d(bob,alice,sid_348468071))),msg_e(alice,bob,sid_348468070))) that may be sent on channel pub by 15 may be received at input {473}.
So event RecvEnd(true) may be executed at {490}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
