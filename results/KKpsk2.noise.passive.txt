File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "KKpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 279, character 6:
Warning: identifier e rebound.
File "KKpsk2.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk2.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 285, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 285, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 293, character 6:
Warning: identifier e rebound.
File "KKpsk2.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk2.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk2.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk2.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 317, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk2.noise.passive.pv", line 318, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 326, characters 6-7:
Warning: identifier re rebound.
File "KKpsk2.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 333, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 341, characters 6-7:
Warning: identifier re rebound.
File "KKpsk2.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 527, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 529, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 521, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk2.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 514, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 341, characters 6-7:
Warning: identifier re rebound.
File "KKpsk2.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "KKpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 279, character 6:
Warning: identifier e rebound.
File "KKpsk2.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk2.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 285, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 285, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk2.noise.passive.pv", line 286, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 581, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 582, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 317, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk2.noise.passive.pv", line 318, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 573, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 575, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 293, character 6:
Warning: identifier e rebound.
File "KKpsk2.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk2.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk2.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "KKpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 561, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 326, characters 6-7:
Warning: identifier re rebound.
File "KKpsk2.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 333, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk2.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Completing equations...
Completed equations:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_571: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_572: keypair = (if not-caught-fail(v_571) then keypairpack(validkey(v_571),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_572));
    (
        {7}let e_573: keypair = keypairpack(empty,empty) in
        {8}let v_574: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {9}let rs_575: key = getpublickey((if not-caught-fail(v_574) then keypairpack(validkey(v_574),key_s(bob)) else fail-any)) in
        {10}let re_576: key = empty in
        {11}let v_577: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_578: key = catch-fail(v_577) in
        {13}let v_579: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_580: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_577) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then symmetricstatepack(v_579,v_578,v_577) else fail-any) else fail-any) else fail-any))) in
        {15}let v_581: symmetricstate = catch-fail((if success?((if not-caught-fail(v_577) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then symmetricstatepack(v_579,v_578,v_577) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then symmetricstatepack(1-proj-3-tuple(v_580),2-proj-3-tuple(v_580),hash(3-proj-3-tuple(v_580),empty)) else fail-any) else fail-any)) in
        {16}let v_582: bitstring = catch-fail(symmetricstateunpack(v_581)) in
        {17}let v_583: symmetricstate = catch-fail((if success?(getpublickey(s_572)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),getpublickey(s_572))) else fail-any) else fail-any)) in
        {18}let v_584: bitstring = catch-fail(symmetricstateunpack(v_583)) in
        {19}let v_585: symmetricstate = catch-fail((if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then symmetricstatepack(1-proj-3-tuple(v_584),2-proj-3-tuple(v_584),hash(3-proj-3-tuple(v_584),rs_575)) else fail-any)) in
        {20}let hs: handshakestate = (if not-caught-fail(v_581) then (if not-caught-fail(v_583) then (if not-caught-fail(v_585) then handshakestatepack(v_585,s_572,e_573,rs_575,re_576,key_psk(alice,bob),true) else fail-any) else fail-any) else fail-any) in
        {21}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {64}get statestore(=alice,=bob,=sid,statepack_a(hs_586: handshakestate)) in
        {22}let v_587: bitstring = catch-fail(handshakestateunpack(hs_586)) in
        {23}let v_588: bitstring = catch-fail((empty,empty,empty)) in
        {24}let v_589: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {25}let v_590: keypair = catch-fail((if not-caught-fail(v_589) then keypairpack(validkey(v_589),key_e(alice,bob,sid)) else fail-any)) in
        {26}let v_591: bitstring = catch-fail(getpublickey(v_590)) in
        {27}let v_592: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_587))) in
        {28}let v_593: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_587)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_592),hash(3-proj-3-tuple(v_592),v_591)) else fail-any) else fail-any)) in
        {29}let v_594: bitstring = catch-fail(symmetricstateunpack(v_593)) in
        {30}let v_595: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_594),getpublickey(v_590))) in
        {31}let v_596: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_594),getpublickey(v_590))) in
        {32}let v_597: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_594),getpublickey(v_590))) in
        {33}let v_598: bitstring = catch-fail((if (success?(getpublickey(v_590)) && success?(2-proj-3-tuple(v_594))) then (if not-caught-fail(v_595) then (if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (v_595,v_596,v_597) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_599: symmetricstate = catch-fail((if success?(getpublickey(v_590)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_598)) then cipherstatepack(2-proj-3-tuple(v_598),minnonce) else fail-any),1-proj-3-tuple(v_598),3-proj-3-tuple(v_594)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_600: bitstring = catch-fail(keypairunpack(v_590)) in
        {36}let v_601: bitstring = catch-fail(symmetricstateunpack(v_599)) in
        {37}let v_602: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_601),(if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {38}let v_603: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_601),(if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {39}let v_604: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_601),(if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {40}let v_605: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_601))) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (v_602,v_603,v_604) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_606: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_605)) then cipherstatepack(2-proj-3-tuple(v_605),minnonce) else fail-any),1-proj-3-tuple(v_605),3-proj-3-tuple(v_601)) else fail-any) else fail-any) else fail-any)) in
        {42}let v_607: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_587))) in
        {43}let v_608: bitstring = catch-fail(symmetricstateunpack(v_606)) in
        {44}let v_609: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_608),(if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {45}let v_610: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_608),(if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {46}let v_611: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_608),(if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {47}let v_612: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_608))) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (v_609,v_610,v_611) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {48}let v_613: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_612)) then cipherstatepack(2-proj-3-tuple(v_612),minnonce) else fail-any),1-proj-3-tuple(v_612),3-proj-3-tuple(v_608)) else fail-any) else fail-any) else fail-any)) in
        {49}let v_614: bitstring = catch-fail(symmetricstateunpack(v_613)) in
        {50}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {51}let v_616: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_615),2-proj-2-tuple(v_615),3-proj-3-tuple(v_614),msg_a(alice,bob,sid))) in
        {52}let v_617: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {53}let v_618: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_615))) && success?(1-proj-3-tuple(v_614))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then cipherstatepack(1-proj-2-tuple(v_617),increment_nonce(2-proj-2-tuple(v_615))) else fail-any) else fail-any)) in
        {54}let v_619: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_614)) && success?(1-proj-3-tuple(v_614))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then (if not-caught-fail(v_616) then (if not-caught-fail(v_618) then (v_618,v_616) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_620: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_619),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) in
        {56}let v_621: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_619)) && success?(symmetricstatepack(1-proj-2-tuple(v_619),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),2-proj-2-tuple(v_619))) else fail-any) else fail-any)) in
        {57}let v_622: bitstring = catch-fail((if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then (if not-caught-fail(v_621) then (v_621,2-proj-2-tuple(v_619)) else fail-any) else fail-any) else fail-any)) in
        {58}let v_623: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_622),2-proj-7-tuple(v_587),v_590,4-proj-7-tuple(v_587),5-proj-7-tuple(v_587),6-proj-7-tuple(v_587),7-proj-7-tuple(v_587))) in
        {59}let v_624: bitstring = catch-fail(concat3(v_591,2-proj-3-tuple(v_588),2-proj-2-tuple(v_622))) in
        {60}let (hs_625: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-7-tuple(v_587))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then (if not-caught-fail(v_593) then (if not-caught-fail(v_599) then (if not-caught-fail(v_606) then (if not-caught-fail(v_613) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_623) then (if not-caught-fail(v_624) then (v_623,v_624) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {61}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {62}insert statestore(alice,bob,sid,statepack_b(hs_625));
        {63}out(pub, message_a)
    ) | (
        {122}get statestore(=alice,=bob,=sid,statepack_b(hs_626: handshakestate)) in
        {65}in(pub, message_b: bitstring);
        {66}let v_627: bitstring = catch-fail(handshakestateunpack(hs_626)) in
        {67}let v_628: bitstring = catch-fail(deconcat3(message_b)) in
        {68}let v_629: bool = catch-fail(true) in
        {69}let v_630: key = catch-fail(1-proj-3-tuple(v_628)) in
        {70}let v_631: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_627))) in
        {71}let v_632: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_627)) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then symmetricstatepack(1-proj-3-tuple(v_631),2-proj-3-tuple(v_631),hash(3-proj-3-tuple(v_631),v_630)) else fail-any) else fail-any)) in
        {72}let v_633: bitstring = catch-fail(symmetricstateunpack(v_632)) in
        {73}let v_634: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_633),v_630)) in
        {74}let v_635: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_633),v_630)) in
        {75}let v_636: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_633),v_630)) in
        {76}let v_637: bitstring = catch-fail((if success?(2-proj-3-tuple(v_633)) then (if not-caught-fail(v_634) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (v_634,v_635,v_636) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {77}let v_638: symmetricstate = catch-fail((if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_637)) then cipherstatepack(2-proj-3-tuple(v_637),minnonce) else fail-any),1-proj-3-tuple(v_637),3-proj-3-tuple(v_633)) else fail-any) else fail-any)) in
        {78}let v_639: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_627))) in
        {79}let v_640: bitstring = catch-fail(symmetricstateunpack(v_638)) in
        {80}let v_641: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_640),(if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_630) else fail-any) else fail-any))) in
        {81}let v_642: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_640),(if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_630) else fail-any) else fail-any))) in
        {82}let v_643: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_640),(if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_630) else fail-any) else fail-any))) in
        {83}let v_644: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_630) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_640))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (if not-caught-fail(v_643) then (v_641,v_642,v_643) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_645: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_630) else fail-any) else fail-any)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_644)) then cipherstatepack(2-proj-3-tuple(v_644),minnonce) else fail-any),1-proj-3-tuple(v_644),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any)) in
        {85}let v_646: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_627))) in
        {86}let v_647: bitstring = catch-fail(symmetricstateunpack(v_645)) in
        {87}let v_648: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_647),(if success?(2-proj-7-tuple(v_627)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_630) else fail-any) else fail-any))) in
        {88}let v_649: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_647),(if success?(2-proj-7-tuple(v_627)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_630) else fail-any) else fail-any))) in
        {89}let v_650: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_647),(if success?(2-proj-7-tuple(v_627)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_630) else fail-any) else fail-any))) in
        {90}let v_651: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_627)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_630) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_647))) then (if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then (v_648,v_649,v_650) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_652: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_627)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_630) else fail-any) else fail-any)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_651)) then cipherstatepack(2-proj-3-tuple(v_651),minnonce) else fail-any),1-proj-3-tuple(v_651),3-proj-3-tuple(v_647)) else fail-any) else fail-any) else fail-any)) in
        {92}let v_653: bitstring = catch-fail(symmetricstateunpack(v_652)) in
        {93}let v_654: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_653),6-proj-7-tuple(v_627))) in
        {94}let v_655: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_653),6-proj-7-tuple(v_627))) in
        {95}let v_656: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_653),6-proj-7-tuple(v_627))) in
        {96}let v_657: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_627)) && success?(2-proj-3-tuple(v_653))) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then (if not-caught-fail(v_656) then (v_654,v_655,v_656) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_658: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_653),1-proj-3-tuple(v_657),3-proj-3-tuple(v_653)))) in
        {98}let v_659: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_657)) && success?(symmetricstatepack(1-proj-3-tuple(v_653),1-proj-3-tuple(v_657),3-proj-3-tuple(v_653)))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),hash(3-proj-3-tuple(v_658),2-proj-3-tuple(v_657))) else fail-any) else fail-any))) in
        {99}let v_660: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_627)) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_657)) then cipherstatepack(3-proj-3-tuple(v_657),minnonce) else fail-any),1-proj-3-tuple(v_657),3-proj-3-tuple(v_659)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {100}let v_661: bitstring = catch-fail(symmetricstateunpack(v_660)) in
        {101}let v_662: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_661))) in
        {102}let v_663: aead = catch-fail(decrypt(1-proj-2-tuple(v_662),2-proj-2-tuple(v_662),3-proj-3-tuple(v_661),3-proj-3-tuple(v_628))) in
        {103}let v_664: bitstring = catch-fail(aeadunpack(v_663)) in
        {104}let v_665: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_661))) in
        {105}let v_666: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_662))) && success?(1-proj-3-tuple(v_661))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-2-tuple(v_665))))) then cipherstatepack(1-proj-2-tuple(v_665),increment_nonce(2-proj-2-tuple(v_662))) else fail-any) else fail-any)) in
        {106}let v_667: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_628)) && (success?(3-proj-3-tuple(v_661)) && success?(1-proj-3-tuple(v_661)))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then (if not-caught-fail(v_663) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then (if not-caught-fail(v_666) then (v_666,3-proj-3-tuple(v_664),1-proj-3-tuple(v_664)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_668: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)))) in
        {108}let v_669: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_628)) && success?(symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then symmetricstatepack(1-proj-3-tuple(v_668),2-proj-3-tuple(v_668),hash(3-proj-3-tuple(v_668),3-proj-3-tuple(v_628))) else fail-any) else fail-any)) in
        {109}let v_670: bitstring = catch-fail((if success?(3-proj-3-tuple(v_628)) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if not-caught-fail(v_669) then (v_669,2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {110}let v_671: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_670),2-proj-7-tuple(v_627),3-proj-7-tuple(v_627),4-proj-7-tuple(v_627),v_630,6-proj-7-tuple(v_627),7-proj-7-tuple(v_627))) in
        {111}let v_672: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_670))) in
        {112}let v_673: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_672),zero)) in
        {113}let v_674: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_672),zero)) in
        {114}let v_675: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_672),zero)) in
        {115}let v_676: bitstring = catch-fail((if success?(2-proj-3-tuple(v_672)) then (if not-caught-fail(v_673) then (if not-caught-fail(v_674) then (if not-caught-fail(v_675) then (v_673,v_674,v_675) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_677: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_676)) then cipherstatepack(1-proj-3-tuple(v_676),minnonce) else fail-any)) in
        {117}let v_678: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_676)) then cipherstatepack(2-proj-3-tuple(v_676),minnonce) else fail-any)) in
        {118}let v_679: bitstring = catch-fail((if success?(1-proj-3-tuple(v_670)) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (1-proj-3-tuple(v_670),v_677,v_678) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let (hs_680: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-7-tuple(v_627))))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then (if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (if not-caught-fail(v_632) then (if not-caught-fail(v_638) then (if not-caught-fail(v_645) then (if not-caught-fail(v_652) then (if not-caught-fail(v_660) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (v_629 && 3-proj-3-tuple(v_670)) then (if not-caught-fail(v_671) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (v_671,2-proj-3-tuple(v_670),true,2-proj-3-tuple(v_679),3-proj-3-tuple(v_679)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {120}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {121}insert statestore(alice,bob,sid,statepack_c(hs_680,cs1,cs2))
    ) | (
        {123}!
        {142}get statestore(=alice,=bob,=sid,statepack_c(hs_681: handshakestate,cs1_682: cipherstate,cs2_683: cipherstate)) in
        {124}let hs_684: handshakestate = handshakestatesetcs(hs_681,cs1_682) in
        {125}let v_685: bitstring = catch-fail(handshakestateunpack(hs_684)) in
        {126}let v_686: bitstring = catch-fail((empty,empty,empty)) in
        {127}let v_687: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_685))) in
        {128}let v_688: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_687))) in
        {129}let v_689: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_688),2-proj-2-tuple(v_688),3-proj-3-tuple(v_687),msg_c(alice,bob,sid))) in
        {130}let v_690: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_687))) in
        {131}let v_691: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_688))) && success?(1-proj-3-tuple(v_687))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-2-tuple(v_690))))) then cipherstatepack(1-proj-2-tuple(v_690),increment_nonce(2-proj-2-tuple(v_688))) else fail-any) else fail-any)) in
        {132}let v_692: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_687)) && success?(1-proj-3-tuple(v_687))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-2-tuple(v_688))))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_691) then (v_691,v_689) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {133}let v_693: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_692),2-proj-3-tuple(v_687),3-proj-3-tuple(v_687)))) in
        {134}let v_694: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_692)) && success?(symmetricstatepack(1-proj-2-tuple(v_692),2-proj-3-tuple(v_687),3-proj-3-tuple(v_687)))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_693),hash(3-proj-3-tuple(v_693),2-proj-2-tuple(v_692))) else fail-any) else fail-any)) in
        {135}let v_695: bitstring = catch-fail((if success?(1-proj-7-tuple(v_685)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then (if not-caught-fail(v_694) then (v_694,2-proj-2-tuple(v_692)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {136}let v_696: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_695),2-proj-7-tuple(v_685),3-proj-7-tuple(v_685),4-proj-7-tuple(v_685),5-proj-7-tuple(v_685),6-proj-7-tuple(v_685),7-proj-7-tuple(v_685))) in
        {137}let v_697: bitstring = catch-fail(concat3(1-proj-3-tuple(v_686),2-proj-3-tuple(v_686),2-proj-2-tuple(v_695))) in
        {138}let (hs_698: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-7-tuple(v_685))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (v_696,v_697) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {139}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {140}insert statestore(alice,bob,sid,statepack_d(hs_698,handshakestategetcs(hs_698),cs2_683));
        {141}out(pub, message_c)
    ) | (
        {143}!
        {163}get statestore(=alice,=bob,=sid,statepack_d(hs_699: handshakestate,cs1_700: cipherstate,cs2_701: cipherstate)) in
        {144}let hs_702: handshakestate = handshakestatesetcs(hs_699,cs2_701) in
        {145}in(pub, message_d: bitstring);
        {146}let v_703: bitstring = catch-fail(handshakestateunpack(hs_702)) in
        {147}let v_704: bitstring = catch-fail(deconcat3(message_d)) in
        {148}let v_705: bool = catch-fail(true) in
        {149}let v_706: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_703))) in
        {150}let v_707: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_706))) in
        {151}let v_708: aead = catch-fail(decrypt(1-proj-2-tuple(v_707),2-proj-2-tuple(v_707),3-proj-3-tuple(v_706),3-proj-3-tuple(v_704))) in
        {152}let v_709: bitstring = catch-fail(aeadunpack(v_708)) in
        {153}let v_710: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_706))) in
        {154}let v_711: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_707))) && success?(1-proj-3-tuple(v_706))) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then cipherstatepack(1-proj-2-tuple(v_710),increment_nonce(2-proj-2-tuple(v_707))) else fail-any) else fail-any)) in
        {155}let v_712: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_704)) && (success?(3-proj-3-tuple(v_706)) && success?(1-proj-3-tuple(v_706)))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-2-tuple(v_707))))) then (if not-caught-fail(v_708) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if not-caught-fail(v_711) then (v_711,3-proj-3-tuple(v_709),1-proj-3-tuple(v_709)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_713: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_706),3-proj-3-tuple(v_706)))) in
        {157}let v_714: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_704)) && success?(symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_706),3-proj-3-tuple(v_706)))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then symmetricstatepack(1-proj-3-tuple(v_713),2-proj-3-tuple(v_713),hash(3-proj-3-tuple(v_713),3-proj-3-tuple(v_704))) else fail-any) else fail-any)) in
        {158}let v_715: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_704)) && success?(1-proj-7-tuple(v_703))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if not-caught-fail(v_714) then (v_714,2-proj-3-tuple(v_712),3-proj-3-tuple(v_712)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {159}let v_716: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_715),2-proj-7-tuple(v_703),3-proj-7-tuple(v_703),4-proj-7-tuple(v_703),5-proj-7-tuple(v_703),6-proj-7-tuple(v_703),7-proj-7-tuple(v_703))) in
        {160}let (hs_717: handshakestate,plaintext_d: bitstring,valid_718: bool) = (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-7-tuple(v_703))))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then (if not-caught-fail(v_705) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (v_705 && 3-proj-3-tuple(v_715)) then (if not-caught-fail(v_716) then (v_716,2-proj-3-tuple(v_715),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {161}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {162}event RecvEnd(valid_718)
    ) | (
        {164}event LeakPsk(phase0,alice,bob);
        {165}out(pub, key_psk(alice,bob))
    ) | (
        {166}phase 1;
        {167}event LeakPsk(phase1,alice,bob);
        {168}out(pub, key_psk(alice,bob))
    ) | (
        {169}event LeakS(phase0,alice);
        {170}out(pub, key_s(alice))
    ) | (
        {171}phase 1;
        {172}event LeakS(phase1,alice);
        {173}out(pub, key_s(alice))
    )
) | (
    {174}let v_719: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {175}let s_720: keypair = (if not-caught-fail(v_719) then keypairpack(validkey(v_719),key_s(alice)) else fail-any) in
    {176}out(pub, getpublickey(s_720));
    (
        {177}let e_721: keypair = keypairpack(empty,empty) in
        {178}let v_722: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {179}let rs_723: key = getpublickey((if not-caught-fail(v_722) then keypairpack(validkey(v_722),key_s(charlie)) else fail-any)) in
        {180}let re_724: key = empty in
        {181}let v_725: bitstring = catch-fail(hash(somename,empty)) in
        {182}let v_726: key = catch-fail(v_725) in
        {183}let v_727: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {184}let v_728: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then symmetricstatepack(v_727,v_726,v_725) else fail-any) else fail-any) else fail-any))) in
        {185}let v_729: symmetricstate = catch-fail((if success?((if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then symmetricstatepack(v_727,v_726,v_725) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_728),hash(3-proj-3-tuple(v_728),empty)) else fail-any) else fail-any)) in
        {186}let v_730: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {187}let v_731: symmetricstate = catch-fail((if success?(getpublickey(s_720)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then symmetricstatepack(1-proj-3-tuple(v_730),2-proj-3-tuple(v_730),hash(3-proj-3-tuple(v_730),getpublickey(s_720))) else fail-any) else fail-any)) in
        {188}let v_732: bitstring = catch-fail(symmetricstateunpack(v_731)) in
        {189}let v_733: symmetricstate = catch-fail((if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_732),hash(3-proj-3-tuple(v_732),rs_723)) else fail-any)) in
        {190}let hs_734: handshakestate = (if not-caught-fail(v_729) then (if not-caught-fail(v_731) then (if not-caught-fail(v_733) then handshakestatepack(v_733,s_720,e_721,rs_723,re_724,key_psk(alice,charlie),true) else fail-any) else fail-any) else fail-any) in
        {191}insert statestore(alice,charlie,sid,statepack_a(hs_734))
    ) | (
        {234}get statestore(=alice,=charlie,=sid,statepack_a(hs_735: handshakestate)) in
        {192}let v_736: bitstring = catch-fail(handshakestateunpack(hs_735)) in
        {193}let v_737: bitstring = catch-fail((empty,empty,empty)) in
        {194}let v_738: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {195}let v_739: keypair = catch-fail((if not-caught-fail(v_738) then keypairpack(validkey(v_738),key_e(alice,charlie,sid)) else fail-any)) in
        {196}let v_740: bitstring = catch-fail(getpublickey(v_739)) in
        {197}let v_741: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_736))) in
        {198}let v_742: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_736)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_741),hash(3-proj-3-tuple(v_741),v_740)) else fail-any) else fail-any)) in
        {199}let v_743: bitstring = catch-fail(symmetricstateunpack(v_742)) in
        {200}let v_744: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_743),getpublickey(v_739))) in
        {201}let v_745: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_743),getpublickey(v_739))) in
        {202}let v_746: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_743),getpublickey(v_739))) in
        {203}let v_747: bitstring = catch-fail((if (success?(getpublickey(v_739)) && success?(2-proj-3-tuple(v_743))) then (if not-caught-fail(v_744) then (if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (v_744,v_745,v_746) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {204}let v_748: symmetricstate = catch-fail((if success?(getpublickey(v_739)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_747)) then cipherstatepack(2-proj-3-tuple(v_747),minnonce) else fail-any),1-proj-3-tuple(v_747),3-proj-3-tuple(v_743)) else fail-any) else fail-any) else fail-any)) in
        {205}let v_749: bitstring = catch-fail(keypairunpack(v_739)) in
        {206}let v_750: bitstring = catch-fail(symmetricstateunpack(v_748)) in
        {207}let v_751: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_750),(if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {208}let v_752: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_750),(if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {209}let v_753: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_750),(if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {210}let v_754: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_750))) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then (if not-caught-fail(v_753) then (v_751,v_752,v_753) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {211}let v_755: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_754)) then cipherstatepack(2-proj-3-tuple(v_754),minnonce) else fail-any),1-proj-3-tuple(v_754),3-proj-3-tuple(v_750)) else fail-any) else fail-any) else fail-any)) in
        {212}let v_756: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_736))) in
        {213}let v_757: bitstring = catch-fail(symmetricstateunpack(v_755)) in
        {214}let v_758: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_757),(if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then dhexp(2-proj-2-tuple(v_756),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {215}let v_759: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_757),(if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then dhexp(2-proj-2-tuple(v_756),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {216}let v_760: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_757),(if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then dhexp(2-proj-2-tuple(v_756),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {217}let v_761: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then dhexp(2-proj-2-tuple(v_756),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_757))) then (if not-caught-fail(v_758) then (if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (v_758,v_759,v_760) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_762: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then dhexp(2-proj-2-tuple(v_756),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_761)) then cipherstatepack(2-proj-3-tuple(v_761),minnonce) else fail-any),1-proj-3-tuple(v_761),3-proj-3-tuple(v_757)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_763: bitstring = catch-fail(symmetricstateunpack(v_762)) in
        {220}let v_764: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_763))) in
        {221}let v_765: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_764),2-proj-2-tuple(v_764),3-proj-3-tuple(v_763),msg_a(alice,charlie,sid))) in
        {222}let v_766: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_763))) in
        {223}let v_767: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_764))) && success?(1-proj-3-tuple(v_763))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then cipherstatepack(1-proj-2-tuple(v_766),increment_nonce(2-proj-2-tuple(v_764))) else fail-any) else fail-any)) in
        {224}let v_768: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_763)) && success?(1-proj-3-tuple(v_763))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then (if not-caught-fail(v_765) then (if not-caught-fail(v_767) then (v_767,v_765) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_769: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_768),2-proj-3-tuple(v_763),3-proj-3-tuple(v_763)))) in
        {226}let v_770: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_768)) && success?(symmetricstatepack(1-proj-2-tuple(v_768),2-proj-3-tuple(v_763),3-proj-3-tuple(v_763)))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then symmetricstatepack(1-proj-3-tuple(v_769),2-proj-3-tuple(v_769),hash(3-proj-3-tuple(v_769),2-proj-2-tuple(v_768))) else fail-any) else fail-any)) in
        {227}let v_771: bitstring = catch-fail((if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_770) then (v_770,2-proj-2-tuple(v_768)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_772: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_771),2-proj-7-tuple(v_736),v_739,4-proj-7-tuple(v_736),5-proj-7-tuple(v_736),6-proj-7-tuple(v_736),7-proj-7-tuple(v_736))) in
        {229}let v_773: bitstring = catch-fail(concat3(v_740,2-proj-3-tuple(v_737),2-proj-2-tuple(v_771))) in
        {230}let (hs_774: handshakestate,message_a_775: bitstring) = (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-7-tuple(v_736))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (if not-caught-fail(v_742) then (if not-caught-fail(v_748) then (if not-caught-fail(v_755) then (if not-caught-fail(v_762) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then (if not-caught-fail(v_772) then (if not-caught-fail(v_773) then (v_772,v_773) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {231}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {232}insert statestore(alice,charlie,sid,statepack_b(hs_774));
        {233}out(pub, message_a_775)
    ) | (
        {292}get statestore(=alice,=charlie,=sid,statepack_b(hs_776: handshakestate)) in
        {235}in(pub, message_b_777: bitstring);
        {236}let v_778: bitstring = catch-fail(handshakestateunpack(hs_776)) in
        {237}let v_779: bitstring = catch-fail(deconcat3(message_b_777)) in
        {238}let v_780: bool = catch-fail(true) in
        {239}let v_781: key = catch-fail(1-proj-3-tuple(v_779)) in
        {240}let v_782: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_778))) in
        {241}let v_783: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_778)) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_782),hash(3-proj-3-tuple(v_782),v_781)) else fail-any) else fail-any)) in
        {242}let v_784: bitstring = catch-fail(symmetricstateunpack(v_783)) in
        {243}let v_785: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_784),v_781)) in
        {244}let v_786: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_784),v_781)) in
        {245}let v_787: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_784),v_781)) in
        {246}let v_788: bitstring = catch-fail((if success?(2-proj-3-tuple(v_784)) then (if not-caught-fail(v_785) then (if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (v_785,v_786,v_787) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_789: symmetricstate = catch-fail((if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_788)) then cipherstatepack(2-proj-3-tuple(v_788),minnonce) else fail-any),1-proj-3-tuple(v_788),3-proj-3-tuple(v_784)) else fail-any) else fail-any)) in
        {248}let v_790: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_778))) in
        {249}let v_791: bitstring = catch-fail(symmetricstateunpack(v_789)) in
        {250}let v_792: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_791),(if success?(3-proj-7-tuple(v_778)) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),v_781) else fail-any) else fail-any))) in
        {251}let v_793: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_791),(if success?(3-proj-7-tuple(v_778)) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),v_781) else fail-any) else fail-any))) in
        {252}let v_794: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_791),(if success?(3-proj-7-tuple(v_778)) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),v_781) else fail-any) else fail-any))) in
        {253}let v_795: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_778)) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),v_781) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_791))) then (if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (if not-caught-fail(v_794) then (v_792,v_793,v_794) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {254}let v_796: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_778)) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),v_781) else fail-any) else fail-any)) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_795)) then cipherstatepack(2-proj-3-tuple(v_795),minnonce) else fail-any),1-proj-3-tuple(v_795),3-proj-3-tuple(v_791)) else fail-any) else fail-any) else fail-any)) in
        {255}let v_797: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_778))) in
        {256}let v_798: bitstring = catch-fail(symmetricstateunpack(v_796)) in
        {257}let v_799: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_798),(if success?(2-proj-7-tuple(v_778)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-2-tuple(v_797))))) then dhexp(2-proj-2-tuple(v_797),v_781) else fail-any) else fail-any))) in
        {258}let v_800: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_798),(if success?(2-proj-7-tuple(v_778)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-2-tuple(v_797))))) then dhexp(2-proj-2-tuple(v_797),v_781) else fail-any) else fail-any))) in
        {259}let v_801: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_798),(if success?(2-proj-7-tuple(v_778)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-2-tuple(v_797))))) then dhexp(2-proj-2-tuple(v_797),v_781) else fail-any) else fail-any))) in
        {260}let v_802: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_778)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-2-tuple(v_797))))) then dhexp(2-proj-2-tuple(v_797),v_781) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_798))) then (if not-caught-fail(v_799) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then (v_799,v_800,v_801) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_803: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_778)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-2-tuple(v_797))))) then dhexp(2-proj-2-tuple(v_797),v_781) else fail-any) else fail-any)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_802)) then cipherstatepack(2-proj-3-tuple(v_802),minnonce) else fail-any),1-proj-3-tuple(v_802),3-proj-3-tuple(v_798)) else fail-any) else fail-any) else fail-any)) in
        {262}let v_804: bitstring = catch-fail(symmetricstateunpack(v_803)) in
        {263}let v_805: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_804),6-proj-7-tuple(v_778))) in
        {264}let v_806: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_804),6-proj-7-tuple(v_778))) in
        {265}let v_807: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_804),6-proj-7-tuple(v_778))) in
        {266}let v_808: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_778)) && success?(2-proj-3-tuple(v_804))) then (if not-caught-fail(v_805) then (if not-caught-fail(v_806) then (if not-caught-fail(v_807) then (v_805,v_806,v_807) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_809: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_804),1-proj-3-tuple(v_808),3-proj-3-tuple(v_804)))) in
        {268}let v_810: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_808)) && success?(symmetricstatepack(1-proj-3-tuple(v_804),1-proj-3-tuple(v_808),3-proj-3-tuple(v_804)))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_809),hash(3-proj-3-tuple(v_809),2-proj-3-tuple(v_808))) else fail-any) else fail-any))) in
        {269}let v_811: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_778)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_808)) then cipherstatepack(3-proj-3-tuple(v_808),minnonce) else fail-any),1-proj-3-tuple(v_808),3-proj-3-tuple(v_810)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_812: bitstring = catch-fail(symmetricstateunpack(v_811)) in
        {271}let v_813: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_812))) in
        {272}let v_814: aead = catch-fail(decrypt(1-proj-2-tuple(v_813),2-proj-2-tuple(v_813),3-proj-3-tuple(v_812),3-proj-3-tuple(v_779))) in
        {273}let v_815: bitstring = catch-fail(aeadunpack(v_814)) in
        {274}let v_816: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_812))) in
        {275}let v_817: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_813))) && success?(1-proj-3-tuple(v_812))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then cipherstatepack(1-proj-2-tuple(v_816),increment_nonce(2-proj-2-tuple(v_813))) else fail-any) else fail-any)) in
        {276}let v_818: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_779)) && (success?(3-proj-3-tuple(v_812)) && success?(1-proj-3-tuple(v_812)))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then (if not-caught-fail(v_814) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if not-caught-fail(v_817) then (v_817,3-proj-3-tuple(v_815),1-proj-3-tuple(v_815)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_819: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)))) in
        {278}let v_820: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_779)) && success?(symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),hash(3-proj-3-tuple(v_819),3-proj-3-tuple(v_779))) else fail-any) else fail-any)) in
        {279}let v_821: bitstring = catch-fail((if success?(3-proj-3-tuple(v_779)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if not-caught-fail(v_820) then (v_820,2-proj-3-tuple(v_818),3-proj-3-tuple(v_818)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_822: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_821),2-proj-7-tuple(v_778),3-proj-7-tuple(v_778),4-proj-7-tuple(v_778),v_781,6-proj-7-tuple(v_778),7-proj-7-tuple(v_778))) in
        {281}let v_823: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_821))) in
        {282}let v_824: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_823),zero)) in
        {283}let v_825: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_823),zero)) in
        {284}let v_826: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_823),zero)) in
        {285}let v_827: bitstring = catch-fail((if success?(2-proj-3-tuple(v_823)) then (if not-caught-fail(v_824) then (if not-caught-fail(v_825) then (if not-caught-fail(v_826) then (v_824,v_825,v_826) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_828: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_827)) then cipherstatepack(1-proj-3-tuple(v_827),minnonce) else fail-any)) in
        {287}let v_829: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_827)) then cipherstatepack(2-proj-3-tuple(v_827),minnonce) else fail-any)) in
        {288}let v_830: bitstring = catch-fail((if success?(1-proj-3-tuple(v_821)) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_828) then (if not-caught-fail(v_829) then (1-proj-3-tuple(v_821),v_828,v_829) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {289}let (hs_831: handshakestate,plaintext_b_832: bitstring,valid_833: bool,cs1_834: cipherstate,cs2_835: cipherstate) = (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-7-tuple(v_778))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (if not-caught-fail(v_783) then (if not-caught-fail(v_789) then (if not-caught-fail(v_796) then (if not-caught-fail(v_803) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (v_780 && 3-proj-3-tuple(v_821)) then (if not-caught-fail(v_822) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (v_822,2-proj-3-tuple(v_821),true,2-proj-3-tuple(v_830),3-proj-3-tuple(v_830)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {290}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_832);
        {291}insert statestore(alice,charlie,sid,statepack_c(hs_831,cs1_834,cs2_835))
    ) | (
        {293}!
        {312}get statestore(=alice,=charlie,=sid,statepack_c(hs_836: handshakestate,cs1_837: cipherstate,cs2_838: cipherstate)) in
        {294}let hs_839: handshakestate = handshakestatesetcs(hs_836,cs1_837) in
        {295}let v_840: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {296}let v_841: bitstring = catch-fail((empty,empty,empty)) in
        {297}let v_842: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_840))) in
        {298}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {299}let v_844: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_843),2-proj-2-tuple(v_843),3-proj-3-tuple(v_842),msg_c(alice,charlie,sid))) in
        {300}let v_845: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {301}let v_846: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_843))) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then cipherstatepack(1-proj-2-tuple(v_845),increment_nonce(2-proj-2-tuple(v_843))) else fail-any) else fail-any)) in
        {302}let v_847: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (v_846,v_844) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_848: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) in
        {304}let v_849: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_847)) && success?(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_848),hash(3-proj-3-tuple(v_848),2-proj-2-tuple(v_847))) else fail-any) else fail-any)) in
        {305}let v_850: bitstring = catch-fail((if success?(1-proj-7-tuple(v_840)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if not-caught-fail(v_849) then (v_849,2-proj-2-tuple(v_847)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_851: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_850),2-proj-7-tuple(v_840),3-proj-7-tuple(v_840),4-proj-7-tuple(v_840),5-proj-7-tuple(v_840),6-proj-7-tuple(v_840),7-proj-7-tuple(v_840))) in
        {307}let v_852: bitstring = catch-fail(concat3(1-proj-3-tuple(v_841),2-proj-3-tuple(v_841),2-proj-2-tuple(v_850))) in
        {308}let (hs_853: handshakestate,message_c_854: bitstring) = (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-7-tuple(v_840))))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (v_851,v_852) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {309}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {310}insert statestore(alice,charlie,sid,statepack_d(hs_853,handshakestategetcs(hs_853),cs2_838));
        {311}out(pub, message_c_854)
    ) | (
        {313}!
        {333}get statestore(=alice,=charlie,=sid,statepack_d(hs_855: handshakestate,cs1_856: cipherstate,cs2_857: cipherstate)) in
        {314}let hs_858: handshakestate = handshakestatesetcs(hs_855,cs2_857) in
        {315}in(pub, message_d_859: bitstring);
        {316}let v_860: bitstring = catch-fail(handshakestateunpack(hs_858)) in
        {317}let v_861: bitstring = catch-fail(deconcat3(message_d_859)) in
        {318}let v_862: bool = catch-fail(true) in
        {319}let v_863: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_860))) in
        {320}let v_864: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {321}let v_865: aead = catch-fail(decrypt(1-proj-2-tuple(v_864),2-proj-2-tuple(v_864),3-proj-3-tuple(v_863),3-proj-3-tuple(v_861))) in
        {322}let v_866: bitstring = catch-fail(aeadunpack(v_865)) in
        {323}let v_867: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {324}let v_868: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_864))) && success?(1-proj-3-tuple(v_863))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then cipherstatepack(1-proj-2-tuple(v_867),increment_nonce(2-proj-2-tuple(v_864))) else fail-any) else fail-any)) in
        {325}let v_869: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_861)) && (success?(3-proj-3-tuple(v_863)) && success?(1-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-2-tuple(v_864))))) then (if not-caught-fail(v_865) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then (if not-caught-fail(v_868) then (v_868,3-proj-3-tuple(v_866),1-proj-3-tuple(v_866)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {326}let v_870: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) in
        {327}let v_871: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_861)) && success?(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_870),hash(3-proj-3-tuple(v_870),3-proj-3-tuple(v_861))) else fail-any) else fail-any)) in
        {328}let v_872: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_861)) && success?(1-proj-7-tuple(v_860))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then (if not-caught-fail(v_871) then (v_871,2-proj-3-tuple(v_869),3-proj-3-tuple(v_869)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {329}let v_873: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_872),2-proj-7-tuple(v_860),3-proj-7-tuple(v_860),4-proj-7-tuple(v_860),5-proj-7-tuple(v_860),6-proj-7-tuple(v_860),7-proj-7-tuple(v_860))) in
        {330}let (hs_874: handshakestate,plaintext_d_875: bitstring,valid_876: bool) = (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-7-tuple(v_860))))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then (if not-caught-fail(v_862) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then (if (v_862 && 3-proj-3-tuple(v_872)) then (if not-caught-fail(v_873) then (v_873,2-proj-3-tuple(v_872),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {331}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_875);
        {332}event RecvEnd(valid_876)
    ) | (
        {334}event LeakPsk(phase0,alice,charlie);
        {335}out(pub, key_psk(alice,charlie))
    ) | (
        {336}phase 1;
        {337}event LeakPsk(phase1,alice,charlie);
        {338}out(pub, key_psk(alice,charlie))
    ) | (
        {339}event LeakS(phase0,alice);
        {340}out(pub, key_s(alice))
    ) | (
        {341}phase 1;
        {342}event LeakS(phase1,alice);
        {343}out(pub, key_s(alice))
    )
) | (
    {344}let v_877: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {345}let s_878: keypair = (if not-caught-fail(v_877) then keypairpack(validkey(v_877),key_s(bob)) else fail-any) in
    {346}out(pub, getpublickey(s_878));
    (
        {347}let e_879: keypair = keypairpack(empty,empty) in
        {348}let v_880: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {349}let rs_881: key = getpublickey((if not-caught-fail(v_880) then keypairpack(validkey(v_880),key_s(alice)) else fail-any)) in
        {350}let re_882: key = empty in
        {351}let v_883: bitstring = catch-fail(hash(somename,empty)) in
        {352}let v_884: key = catch-fail(v_883) in
        {353}let v_885: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {354}let v_886: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_883) then (if not-caught-fail(v_884) then (if not-caught-fail(v_885) then symmetricstatepack(v_885,v_884,v_883) else fail-any) else fail-any) else fail-any))) in
        {355}let v_887: symmetricstate = catch-fail((if success?((if not-caught-fail(v_883) then (if not-caught-fail(v_884) then (if not-caught-fail(v_885) then symmetricstatepack(v_885,v_884,v_883) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then symmetricstatepack(1-proj-3-tuple(v_886),2-proj-3-tuple(v_886),hash(3-proj-3-tuple(v_886),empty)) else fail-any) else fail-any)) in
        {356}let v_888: bitstring = catch-fail(symmetricstateunpack(v_887)) in
        {357}let v_889: symmetricstate = catch-fail((if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then symmetricstatepack(1-proj-3-tuple(v_888),2-proj-3-tuple(v_888),hash(3-proj-3-tuple(v_888),rs_881)) else fail-any)) in
        {358}let v_890: bitstring = catch-fail(symmetricstateunpack(v_889)) in
        {359}let v_891: symmetricstate = catch-fail((if success?(getpublickey(s_878)) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then symmetricstatepack(1-proj-3-tuple(v_890),2-proj-3-tuple(v_890),hash(3-proj-3-tuple(v_890),getpublickey(s_878))) else fail-any) else fail-any)) in
        {360}let hs_892: handshakestate = (if not-caught-fail(v_887) then (if not-caught-fail(v_889) then (if not-caught-fail(v_891) then handshakestatepack(v_891,s_878,e_879,rs_881,re_882,key_psk(alice,bob),false) else fail-any) else fail-any) else fail-any) in
        {361}insert statestore(bob,alice,sid,statepack_a(hs_892))
    ) | (
        {403}get statestore(=bob,=alice,=sid,statepack_a(hs_893: handshakestate)) in
        {362}in(pub, message_a_894: bitstring);
        {363}let v_895: bitstring = catch-fail(handshakestateunpack(hs_893)) in
        {364}let v_896: bitstring = catch-fail(deconcat3(message_a_894)) in
        {365}let v_897: bool = catch-fail(true) in
        {366}let v_898: key = catch-fail(1-proj-3-tuple(v_896)) in
        {367}let v_899: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_895))) in
        {368}let v_900: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_895)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_899),hash(3-proj-3-tuple(v_899),v_898)) else fail-any) else fail-any)) in
        {369}let v_901: bitstring = catch-fail(symmetricstateunpack(v_900)) in
        {370}let v_902: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_901),v_898)) in
        {371}let v_903: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_901),v_898)) in
        {372}let v_904: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_901),v_898)) in
        {373}let v_905: bitstring = catch-fail((if success?(2-proj-3-tuple(v_901)) then (if not-caught-fail(v_902) then (if not-caught-fail(v_903) then (if not-caught-fail(v_904) then (v_902,v_903,v_904) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_906: symmetricstate = catch-fail((if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_905)) then cipherstatepack(2-proj-3-tuple(v_905),minnonce) else fail-any),1-proj-3-tuple(v_905),3-proj-3-tuple(v_901)) else fail-any) else fail-any)) in
        {375}let v_907: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_895))) in
        {376}let v_908: bitstring = catch-fail(symmetricstateunpack(v_906)) in
        {377}let v_909: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_908),(if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),v_898) else fail-any) else fail-any))) in
        {378}let v_910: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_908),(if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),v_898) else fail-any) else fail-any))) in
        {379}let v_911: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_908),(if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),v_898) else fail-any) else fail-any))) in
        {380}let v_912: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),v_898) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_908))) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (if not-caught-fail(v_911) then (v_909,v_910,v_911) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_913: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),v_898) else fail-any) else fail-any)) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_912)) then cipherstatepack(2-proj-3-tuple(v_912),minnonce) else fail-any),1-proj-3-tuple(v_912),3-proj-3-tuple(v_908)) else fail-any) else fail-any) else fail-any)) in
        {382}let v_914: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_895))) in
        {383}let v_915: bitstring = catch-fail(symmetricstateunpack(v_913)) in
        {384}let v_916: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_915),(if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_895)) else fail-any) else fail-any))) in
        {385}let v_917: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_915),(if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_895)) else fail-any) else fail-any))) in
        {386}let v_918: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_915),(if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_895)) else fail-any) else fail-any))) in
        {387}let v_919: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_895)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_915))) then (if not-caught-fail(v_916) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (v_916,v_917,v_918) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {388}let v_920: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_895)) else fail-any) else fail-any)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_919)) then cipherstatepack(2-proj-3-tuple(v_919),minnonce) else fail-any),1-proj-3-tuple(v_919),3-proj-3-tuple(v_915)) else fail-any) else fail-any) else fail-any)) in
        {389}let v_921: bitstring = catch-fail(symmetricstateunpack(v_920)) in
        {390}let v_922: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {391}let v_923: aead = catch-fail(decrypt(1-proj-2-tuple(v_922),2-proj-2-tuple(v_922),3-proj-3-tuple(v_921),3-proj-3-tuple(v_896))) in
        {392}let v_924: bitstring = catch-fail(aeadunpack(v_923)) in
        {393}let v_925: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {394}let v_926: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_922))) && success?(1-proj-3-tuple(v_921))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-2-tuple(v_925))))) then cipherstatepack(1-proj-2-tuple(v_925),increment_nonce(2-proj-2-tuple(v_922))) else fail-any) else fail-any)) in
        {395}let v_927: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_896)) && (success?(3-proj-3-tuple(v_921)) && success?(1-proj-3-tuple(v_921)))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if not-caught-fail(v_926) then (v_926,3-proj-3-tuple(v_924),1-proj-3-tuple(v_924)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {396}let v_928: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) in
        {397}let v_929: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_896)) && success?(symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then symmetricstatepack(1-proj-3-tuple(v_928),2-proj-3-tuple(v_928),hash(3-proj-3-tuple(v_928),3-proj-3-tuple(v_896))) else fail-any) else fail-any)) in
        {398}let v_930: bitstring = catch-fail((if success?(3-proj-3-tuple(v_896)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if not-caught-fail(v_929) then (v_929,2-proj-3-tuple(v_927),3-proj-3-tuple(v_927)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_931: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_930),2-proj-7-tuple(v_895),3-proj-7-tuple(v_895),4-proj-7-tuple(v_895),v_898,6-proj-7-tuple(v_895),7-proj-7-tuple(v_895))) in
        {400}let (hs_932: handshakestate,plaintext_a: bitstring,valid_933: bool) = (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-7-tuple(v_895))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (if not-caught-fail(v_900) then (if not-caught-fail(v_906) then (if not-caught-fail(v_913) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if (v_897 && 3-proj-3-tuple(v_930)) then (if not-caught-fail(v_931) then (v_931,2-proj-3-tuple(v_930),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {401}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {402}insert statestore(bob,alice,sid,statepack_b(hs_932))
    ) | (
        {462}get statestore(=bob,=alice,=sid,statepack_b(hs_934: handshakestate)) in
        {404}let v_935: bitstring = catch-fail(handshakestateunpack(hs_934)) in
        {405}let v_936: bitstring = catch-fail((empty,empty,empty)) in
        {406}let v_937: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {407}let v_938: keypair = catch-fail((if not-caught-fail(v_937) then keypairpack(validkey(v_937),key_e(bob,alice,sid)) else fail-any)) in
        {408}let v_939: bitstring = catch-fail(getpublickey(v_938)) in
        {409}let v_940: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_935))) in
        {410}let v_941: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_935)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-3-tuple(v_940))))) then symmetricstatepack(1-proj-3-tuple(v_940),2-proj-3-tuple(v_940),hash(3-proj-3-tuple(v_940),v_939)) else fail-any) else fail-any)) in
        {411}let v_942: bitstring = catch-fail(symmetricstateunpack(v_941)) in
        {412}let v_943: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_942),getpublickey(v_938))) in
        {413}let v_944: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_942),getpublickey(v_938))) in
        {414}let v_945: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_942),getpublickey(v_938))) in
        {415}let v_946: bitstring = catch-fail((if (success?(getpublickey(v_938)) && success?(2-proj-3-tuple(v_942))) then (if not-caught-fail(v_943) then (if not-caught-fail(v_944) then (if not-caught-fail(v_945) then (v_943,v_944,v_945) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {416}let v_947: symmetricstate = catch-fail((if success?(getpublickey(v_938)) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_946)) then cipherstatepack(2-proj-3-tuple(v_946),minnonce) else fail-any),1-proj-3-tuple(v_946),3-proj-3-tuple(v_942)) else fail-any) else fail-any) else fail-any)) in
        {417}let v_948: bitstring = catch-fail(keypairunpack(v_938)) in
        {418}let v_949: bitstring = catch-fail(symmetricstateunpack(v_947)) in
        {419}let v_950: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_949),(if success?(5-proj-7-tuple(v_935)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_935)) else fail-any) else fail-any))) in
        {420}let v_951: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_949),(if success?(5-proj-7-tuple(v_935)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_935)) else fail-any) else fail-any))) in
        {421}let v_952: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_949),(if success?(5-proj-7-tuple(v_935)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_935)) else fail-any) else fail-any))) in
        {422}let v_953: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_935)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_935)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_949))) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then (if not-caught-fail(v_952) then (v_950,v_951,v_952) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {423}let v_954: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_935)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_935)) else fail-any) else fail-any)) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_953)) then cipherstatepack(2-proj-3-tuple(v_953),minnonce) else fail-any),1-proj-3-tuple(v_953),3-proj-3-tuple(v_949)) else fail-any) else fail-any) else fail-any)) in
        {424}let v_955: bitstring = catch-fail(keypairunpack(v_938)) in
        {425}let v_956: bitstring = catch-fail(symmetricstateunpack(v_954)) in
        {426}let v_957: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_956),(if success?(4-proj-7-tuple(v_935)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_935)) else fail-any) else fail-any))) in
        {427}let v_958: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_956),(if success?(4-proj-7-tuple(v_935)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_935)) else fail-any) else fail-any))) in
        {428}let v_959: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_956),(if success?(4-proj-7-tuple(v_935)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_935)) else fail-any) else fail-any))) in
        {429}let v_960: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_935)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_935)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_956))) then (if not-caught-fail(v_957) then (if not-caught-fail(v_958) then (if not-caught-fail(v_959) then (v_957,v_958,v_959) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {430}let v_961: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_935)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_935)) else fail-any) else fail-any)) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_960)) then cipherstatepack(2-proj-3-tuple(v_960),minnonce) else fail-any),1-proj-3-tuple(v_960),3-proj-3-tuple(v_956)) else fail-any) else fail-any) else fail-any)) in
        {431}let v_962: bitstring = catch-fail(symmetricstateunpack(v_961)) in
        {432}let v_963: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_962),6-proj-7-tuple(v_935))) in
        {433}let v_964: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_962),6-proj-7-tuple(v_935))) in
        {434}let v_965: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_962),6-proj-7-tuple(v_935))) in
        {435}let v_966: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_935)) && success?(2-proj-3-tuple(v_962))) then (if not-caught-fail(v_963) then (if not-caught-fail(v_964) then (if not-caught-fail(v_965) then (v_963,v_964,v_965) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_967: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_962),1-proj-3-tuple(v_966),3-proj-3-tuple(v_962)))) in
        {437}let v_968: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_966)) && success?(symmetricstatepack(1-proj-3-tuple(v_962),1-proj-3-tuple(v_966),3-proj-3-tuple(v_962)))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then symmetricstatepack(1-proj-3-tuple(v_967),2-proj-3-tuple(v_967),hash(3-proj-3-tuple(v_967),2-proj-3-tuple(v_966))) else fail-any) else fail-any))) in
        {438}let v_969: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_935)) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_966)) then cipherstatepack(3-proj-3-tuple(v_966),minnonce) else fail-any),1-proj-3-tuple(v_966),3-proj-3-tuple(v_968)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_970: bitstring = catch-fail(symmetricstateunpack(v_969)) in
        {440}let v_971: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_970))) in
        {441}let v_972: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_971),2-proj-2-tuple(v_971),3-proj-3-tuple(v_970),msg_b(bob,alice,sid))) in
        {442}let v_973: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_970))) in
        {443}let v_974: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_971))) && success?(1-proj-3-tuple(v_970))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-2-tuple(v_973))))) then cipherstatepack(1-proj-2-tuple(v_973),increment_nonce(2-proj-2-tuple(v_971))) else fail-any) else fail-any)) in
        {444}let v_975: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_970)) && success?(1-proj-3-tuple(v_970))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-2-tuple(v_971))))) then (if not-caught-fail(v_972) then (if not-caught-fail(v_974) then (v_974,v_972) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_976: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_975),2-proj-3-tuple(v_970),3-proj-3-tuple(v_970)))) in
        {446}let v_977: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_975)) && success?(symmetricstatepack(1-proj-2-tuple(v_975),2-proj-3-tuple(v_970),3-proj-3-tuple(v_970)))) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then symmetricstatepack(1-proj-3-tuple(v_976),2-proj-3-tuple(v_976),hash(3-proj-3-tuple(v_976),2-proj-2-tuple(v_975))) else fail-any) else fail-any)) in
        {447}let v_978: bitstring = catch-fail((if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-2-tuple(v_975))))) then (if not-caught-fail(v_977) then (v_977,2-proj-2-tuple(v_975)) else fail-any) else fail-any) else fail-any)) in
        {448}let v_979: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_978),2-proj-7-tuple(v_935),v_938,4-proj-7-tuple(v_935),5-proj-7-tuple(v_935),6-proj-7-tuple(v_935),7-proj-7-tuple(v_935))) in
        {449}let v_980: bitstring = catch-fail(concat3(v_939,2-proj-3-tuple(v_936),2-proj-2-tuple(v_978))) in
        {450}let v_981: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_978))) in
        {451}let v_982: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_981),zero)) in
        {452}let v_983: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_981),zero)) in
        {453}let v_984: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_981),zero)) in
        {454}let v_985: bitstring = catch-fail((if success?(2-proj-3-tuple(v_981)) then (if not-caught-fail(v_982) then (if not-caught-fail(v_983) then (if not-caught-fail(v_984) then (v_982,v_983,v_984) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {455}let v_986: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_985)) then cipherstatepack(1-proj-3-tuple(v_985),minnonce) else fail-any)) in
        {456}let v_987: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_985)) then cipherstatepack(2-proj-3-tuple(v_985),minnonce) else fail-any)) in
        {457}let v_988: bitstring = catch-fail((if success?(1-proj-2-tuple(v_978)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-3-tuple(v_985))))) then (if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (1-proj-2-tuple(v_978),v_986,v_987) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {458}let (hs_989: handshakestate,message_b_990: bitstring,cs1_991: cipherstate,cs2_992: cipherstate) = (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-7-tuple(v_935))))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if not-caught-fail(v_938) then (if not-caught-fail(v_939) then (if not-caught-fail(v_941) then (if not-caught-fail(v_947) then (if not-caught-fail(v_954) then (if not-caught-fail(v_961) then (if not-caught-fail(v_969) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then (if not-caught-fail(v_979) then (if not-caught-fail(v_980) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (v_979,v_980,2-proj-3-tuple(v_988),3-proj-3-tuple(v_988)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {459}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {460}insert statestore(bob,alice,sid,statepack_c(hs_989,cs1_991,cs2_992));
        {461}out(pub, message_b_990)
    ) | (
        {463}!
        {483}get statestore(=bob,=alice,=sid,statepack_c(hs_993: handshakestate,cs1_994: cipherstate,cs2_995: cipherstate)) in
        {464}let hs_996: handshakestate = handshakestatesetcs(hs_993,cs1_994) in
        {465}in(pub, message_c_997: bitstring);
        {466}let v_998: bitstring = catch-fail(handshakestateunpack(hs_996)) in
        {467}let v_999: bitstring = catch-fail(deconcat3(message_c_997)) in
        {468}let v_1000: bool = catch-fail(true) in
        {469}let v_1001: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_998))) in
        {470}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1001))) in
        {471}let v_1003: aead = catch-fail(decrypt(1-proj-2-tuple(v_1002),2-proj-2-tuple(v_1002),3-proj-3-tuple(v_1001),3-proj-3-tuple(v_999))) in
        {472}let v_1004: bitstring = catch-fail(aeadunpack(v_1003)) in
        {473}let v_1005: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1001))) in
        {474}let v_1006: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1002))) && success?(1-proj-3-tuple(v_1001))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-2-tuple(v_1005))))) then cipherstatepack(1-proj-2-tuple(v_1005),increment_nonce(2-proj-2-tuple(v_1002))) else fail-any) else fail-any)) in
        {475}let v_1007: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_999)) && (success?(3-proj-3-tuple(v_1001)) && success?(1-proj-3-tuple(v_1001)))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then (if not-caught-fail(v_1003) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,3-proj-3-tuple(v_1004),1-proj-3-tuple(v_1004)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_1008: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1007),2-proj-3-tuple(v_1001),3-proj-3-tuple(v_1001)))) in
        {477}let v_1009: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_999)) && success?(symmetricstatepack(1-proj-3-tuple(v_1007),2-proj-3-tuple(v_1001),3-proj-3-tuple(v_1001)))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then symmetricstatepack(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1008),hash(3-proj-3-tuple(v_1008),3-proj-3-tuple(v_999))) else fail-any) else fail-any)) in
        {478}let v_1010: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_999)) && success?(1-proj-7-tuple(v_998))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if not-caught-fail(v_1009) then (v_1009,2-proj-3-tuple(v_1007),3-proj-3-tuple(v_1007)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {479}let v_1011: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1010),2-proj-7-tuple(v_998),3-proj-7-tuple(v_998),4-proj-7-tuple(v_998),5-proj-7-tuple(v_998),6-proj-7-tuple(v_998),7-proj-7-tuple(v_998))) in
        {480}let (hs_1012: handshakestate,plaintext_c: bitstring,valid_1013: bool) = (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-7-tuple(v_998))))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then (if (v_1000 && 3-proj-3-tuple(v_1010)) then (if not-caught-fail(v_1011) then (v_1011,2-proj-3-tuple(v_1010),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {481}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {482}insert statestore(bob,alice,sid,statepack_d(hs_1012,handshakestategetcs(hs_1012),cs2_995))
    ) | (
        {484}!
        {502}get statestore(=bob,=alice,=sid,statepack_d(hs_1014: handshakestate,cs1_1015: cipherstate,cs2_1016: cipherstate)) in
        {485}let hs_1017: handshakestate = handshakestatesetcs(hs_1014,cs2_1016) in
        {486}let v_1018: bitstring = catch-fail(handshakestateunpack(hs_1017)) in
        {487}let v_1019: bitstring = catch-fail((empty,empty,empty)) in
        {488}let v_1020: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1018))) in
        {489}let v_1021: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1020))) in
        {490}let v_1022: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1021),2-proj-2-tuple(v_1021),3-proj-3-tuple(v_1020),msg_d(bob,alice,sid))) in
        {491}let v_1023: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1020))) in
        {492}let v_1024: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1021))) && success?(1-proj-3-tuple(v_1020))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then cipherstatepack(1-proj-2-tuple(v_1023),increment_nonce(2-proj-2-tuple(v_1021))) else fail-any) else fail-any)) in
        {493}let v_1025: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1020)) && success?(1-proj-3-tuple(v_1020))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1024) then (v_1024,v_1022) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {494}let v_1026: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1025),2-proj-3-tuple(v_1020),3-proj-3-tuple(v_1020)))) in
        {495}let v_1027: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1025)) && success?(symmetricstatepack(1-proj-2-tuple(v_1025),2-proj-3-tuple(v_1020),3-proj-3-tuple(v_1020)))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then symmetricstatepack(1-proj-3-tuple(v_1026),2-proj-3-tuple(v_1026),hash(3-proj-3-tuple(v_1026),2-proj-2-tuple(v_1025))) else fail-any) else fail-any)) in
        {496}let v_1028: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1018)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then (if not-caught-fail(v_1027) then (v_1027,2-proj-2-tuple(v_1025)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {497}let v_1029: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1028),2-proj-7-tuple(v_1018),3-proj-7-tuple(v_1018),4-proj-7-tuple(v_1018),5-proj-7-tuple(v_1018),6-proj-7-tuple(v_1018),7-proj-7-tuple(v_1018))) in
        {498}let v_1030: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),2-proj-2-tuple(v_1028))) in
        {499}let (hs_1031: handshakestate,message_d_1032: bitstring) = (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-7-tuple(v_1018))))) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then (v_1029,v_1030) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {500}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {501}out(pub, message_d_1032)
    ) | (
        {503}event LeakPsk(phase0,alice,bob);
        {504}out(pub, key_psk(alice,bob))
    ) | (
        {505}phase 1;
        {506}event LeakPsk(phase1,alice,bob);
        {507}out(pub, key_psk(alice,bob))
    ) | (
        {508}event LeakS(phase0,bob);
        {509}out(pub, key_s(bob))
    ) | (
        {510}phase 1;
        {511}event LeakS(phase1,bob);
        {512}out(pub, key_s(bob))
    )
) | (
    {513}let v_1033: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {514}let s_1034: keypair = (if not-caught-fail(v_1033) then keypairpack(validkey(v_1033),key_s(bob)) else fail-any) in
    {515}out(pub, getpublickey(s_1034));
    (
        {516}let e_1035: keypair = keypairpack(empty,empty) in
        {517}let v_1036: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {518}let rs_1037: key = getpublickey((if not-caught-fail(v_1036) then keypairpack(validkey(v_1036),key_s(charlie)) else fail-any)) in
        {519}let re_1038: key = empty in
        {520}let v_1039: bitstring = catch-fail(hash(somename,empty)) in
        {521}let v_1040: key = catch-fail(v_1039) in
        {522}let v_1041: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {523}let v_1042: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1039) then (if not-caught-fail(v_1040) then (if not-caught-fail(v_1041) then symmetricstatepack(v_1041,v_1040,v_1039) else fail-any) else fail-any) else fail-any))) in
        {524}let v_1043: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1039) then (if not-caught-fail(v_1040) then (if not-caught-fail(v_1041) then symmetricstatepack(v_1041,v_1040,v_1039) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then symmetricstatepack(1-proj-3-tuple(v_1042),2-proj-3-tuple(v_1042),hash(3-proj-3-tuple(v_1042),empty)) else fail-any) else fail-any)) in
        {525}let v_1044: bitstring = catch-fail(symmetricstateunpack(v_1043)) in
        {526}let v_1045: symmetricstate = catch-fail((if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then symmetricstatepack(1-proj-3-tuple(v_1044),2-proj-3-tuple(v_1044),hash(3-proj-3-tuple(v_1044),rs_1037)) else fail-any)) in
        {527}let v_1046: bitstring = catch-fail(symmetricstateunpack(v_1045)) in
        {528}let v_1047: symmetricstate = catch-fail((if success?(getpublickey(s_1034)) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then symmetricstatepack(1-proj-3-tuple(v_1046),2-proj-3-tuple(v_1046),hash(3-proj-3-tuple(v_1046),getpublickey(s_1034))) else fail-any) else fail-any)) in
        {529}let hs_1048: handshakestate = (if not-caught-fail(v_1043) then (if not-caught-fail(v_1045) then (if not-caught-fail(v_1047) then handshakestatepack(v_1047,s_1034,e_1035,rs_1037,re_1038,key_psk(charlie,bob),false) else fail-any) else fail-any) else fail-any) in
        {530}insert statestore(bob,charlie,sid,statepack_a(hs_1048))
    ) | (
        {572}get statestore(=bob,=charlie,=sid,statepack_a(hs_1049: handshakestate)) in
        {531}in(pub, message_a_1050: bitstring);
        {532}let v_1051: bitstring = catch-fail(handshakestateunpack(hs_1049)) in
        {533}let v_1052: bitstring = catch-fail(deconcat3(message_a_1050)) in
        {534}let v_1053: bool = catch-fail(true) in
        {535}let v_1054: key = catch-fail(1-proj-3-tuple(v_1052)) in
        {536}let v_1055: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1051))) in
        {537}let v_1056: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-3-tuple(v_1055))))) then symmetricstatepack(1-proj-3-tuple(v_1055),2-proj-3-tuple(v_1055),hash(3-proj-3-tuple(v_1055),v_1054)) else fail-any) else fail-any)) in
        {538}let v_1057: bitstring = catch-fail(symmetricstateunpack(v_1056)) in
        {539}let v_1058: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1057),v_1054)) in
        {540}let v_1059: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1057),v_1054)) in
        {541}let v_1060: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1057),v_1054)) in
        {542}let v_1061: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1057)) then (if not-caught-fail(v_1058) then (if not-caught-fail(v_1059) then (if not-caught-fail(v_1060) then (v_1058,v_1059,v_1060) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1062: symmetricstate = catch-fail((if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1061)) then cipherstatepack(2-proj-3-tuple(v_1061),minnonce) else fail-any),1-proj-3-tuple(v_1061),3-proj-3-tuple(v_1057)) else fail-any) else fail-any)) in
        {544}let v_1063: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1051))) in
        {545}let v_1064: bitstring = catch-fail(symmetricstateunpack(v_1062)) in
        {546}let v_1065: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1064),(if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then dhexp(2-proj-2-tuple(v_1063),v_1054) else fail-any) else fail-any))) in
        {547}let v_1066: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1064),(if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then dhexp(2-proj-2-tuple(v_1063),v_1054) else fail-any) else fail-any))) in
        {548}let v_1067: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1064),(if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then dhexp(2-proj-2-tuple(v_1063),v_1054) else fail-any) else fail-any))) in
        {549}let v_1068: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then dhexp(2-proj-2-tuple(v_1063),v_1054) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1064))) then (if not-caught-fail(v_1065) then (if not-caught-fail(v_1066) then (if not-caught-fail(v_1067) then (v_1065,v_1066,v_1067) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {550}let v_1069: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then dhexp(2-proj-2-tuple(v_1063),v_1054) else fail-any) else fail-any)) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1068)) then cipherstatepack(2-proj-3-tuple(v_1068),minnonce) else fail-any),1-proj-3-tuple(v_1068),3-proj-3-tuple(v_1064)) else fail-any) else fail-any) else fail-any)) in
        {551}let v_1070: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1051))) in
        {552}let v_1071: bitstring = catch-fail(symmetricstateunpack(v_1069)) in
        {553}let v_1072: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1071),(if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1051)) else fail-any) else fail-any))) in
        {554}let v_1073: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1071),(if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1051)) else fail-any) else fail-any))) in
        {555}let v_1074: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1071),(if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1051)) else fail-any) else fail-any))) in
        {556}let v_1075: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1051)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1071))) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1073) then (if not-caught-fail(v_1074) then (v_1072,v_1073,v_1074) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {557}let v_1076: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1051)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-3-tuple(v_1071))))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-3-tuple(v_1075))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1075)) then cipherstatepack(2-proj-3-tuple(v_1075),minnonce) else fail-any),1-proj-3-tuple(v_1075),3-proj-3-tuple(v_1071)) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1077: bitstring = catch-fail(symmetricstateunpack(v_1076)) in
        {559}let v_1078: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1077))) in
        {560}let v_1079: aead = catch-fail(decrypt(1-proj-2-tuple(v_1078),2-proj-2-tuple(v_1078),3-proj-3-tuple(v_1077),3-proj-3-tuple(v_1052))) in
        {561}let v_1080: bitstring = catch-fail(aeadunpack(v_1079)) in
        {562}let v_1081: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1077))) in
        {563}let v_1082: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1078))) && success?(1-proj-3-tuple(v_1077))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-2-tuple(v_1081))))) then cipherstatepack(1-proj-2-tuple(v_1081),increment_nonce(2-proj-2-tuple(v_1078))) else fail-any) else fail-any)) in
        {564}let v_1083: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1052)) && (success?(3-proj-3-tuple(v_1077)) && success?(1-proj-3-tuple(v_1077)))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then (if not-caught-fail(v_1079) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if not-caught-fail(v_1082) then (v_1082,3-proj-3-tuple(v_1080),1-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let v_1084: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)))) in
        {566}let v_1085: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1052)) && success?(symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then symmetricstatepack(1-proj-3-tuple(v_1084),2-proj-3-tuple(v_1084),hash(3-proj-3-tuple(v_1084),3-proj-3-tuple(v_1052))) else fail-any) else fail-any)) in
        {567}let v_1086: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1052)) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if not-caught-fail(v_1085) then (v_1085,2-proj-3-tuple(v_1083),3-proj-3-tuple(v_1083)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1087: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1086),2-proj-7-tuple(v_1051),3-proj-7-tuple(v_1051),4-proj-7-tuple(v_1051),v_1054,6-proj-7-tuple(v_1051),7-proj-7-tuple(v_1051))) in
        {569}let (hs_1088: handshakestate,plaintext_a_1089: bitstring,valid_1090: bool) = (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-7-tuple(v_1051))))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if not-caught-fail(v_1053) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1056) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1069) then (if not-caught-fail(v_1076) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if (v_1053 && 3-proj-3-tuple(v_1086)) then (if not-caught-fail(v_1087) then (v_1087,2-proj-3-tuple(v_1086),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {570}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1089);
        {571}insert statestore(bob,charlie,sid,statepack_b(hs_1088))
    ) | (
        {631}get statestore(=bob,=charlie,=sid,statepack_b(hs_1091: handshakestate)) in
        {573}let v_1092: bitstring = catch-fail(handshakestateunpack(hs_1091)) in
        {574}let v_1093: bitstring = catch-fail((empty,empty,empty)) in
        {575}let v_1094: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {576}let v_1095: keypair = catch-fail((if not-caught-fail(v_1094) then keypairpack(validkey(v_1094),key_e(bob,charlie,sid)) else fail-any)) in
        {577}let v_1096: bitstring = catch-fail(getpublickey(v_1095)) in
        {578}let v_1097: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1092))) in
        {579}let v_1098: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-3-tuple(v_1097))))) then symmetricstatepack(1-proj-3-tuple(v_1097),2-proj-3-tuple(v_1097),hash(3-proj-3-tuple(v_1097),v_1096)) else fail-any) else fail-any)) in
        {580}let v_1099: bitstring = catch-fail(symmetricstateunpack(v_1098)) in
        {581}let v_1100: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1099),getpublickey(v_1095))) in
        {582}let v_1101: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1099),getpublickey(v_1095))) in
        {583}let v_1102: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1099),getpublickey(v_1095))) in
        {584}let v_1103: bitstring = catch-fail((if (success?(getpublickey(v_1095)) && success?(2-proj-3-tuple(v_1099))) then (if not-caught-fail(v_1100) then (if not-caught-fail(v_1101) then (if not-caught-fail(v_1102) then (v_1100,v_1101,v_1102) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {585}let v_1104: symmetricstate = catch-fail((if success?(getpublickey(v_1095)) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-3-tuple(v_1099))))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1103)) then cipherstatepack(2-proj-3-tuple(v_1103),minnonce) else fail-any),1-proj-3-tuple(v_1103),3-proj-3-tuple(v_1099)) else fail-any) else fail-any) else fail-any)) in
        {586}let v_1105: bitstring = catch-fail(keypairunpack(v_1095)) in
        {587}let v_1106: bitstring = catch-fail(symmetricstateunpack(v_1104)) in
        {588}let v_1107: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1106),(if success?(5-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then dhexp(2-proj-2-tuple(v_1105),5-proj-7-tuple(v_1092)) else fail-any) else fail-any))) in
        {589}let v_1108: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1106),(if success?(5-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then dhexp(2-proj-2-tuple(v_1105),5-proj-7-tuple(v_1092)) else fail-any) else fail-any))) in
        {590}let v_1109: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1106),(if success?(5-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then dhexp(2-proj-2-tuple(v_1105),5-proj-7-tuple(v_1092)) else fail-any) else fail-any))) in
        {591}let v_1110: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then dhexp(2-proj-2-tuple(v_1105),5-proj-7-tuple(v_1092)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1106))) then (if not-caught-fail(v_1107) then (if not-caught-fail(v_1108) then (if not-caught-fail(v_1109) then (v_1107,v_1108,v_1109) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1111: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then dhexp(2-proj-2-tuple(v_1105),5-proj-7-tuple(v_1092)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1110)) then cipherstatepack(2-proj-3-tuple(v_1110),minnonce) else fail-any),1-proj-3-tuple(v_1110),3-proj-3-tuple(v_1106)) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1112: bitstring = catch-fail(keypairunpack(v_1095)) in
        {594}let v_1113: bitstring = catch-fail(symmetricstateunpack(v_1111)) in
        {595}let v_1114: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1113),(if success?(4-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-2-tuple(v_1112))))) then dhexp(2-proj-2-tuple(v_1112),4-proj-7-tuple(v_1092)) else fail-any) else fail-any))) in
        {596}let v_1115: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1113),(if success?(4-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-2-tuple(v_1112))))) then dhexp(2-proj-2-tuple(v_1112),4-proj-7-tuple(v_1092)) else fail-any) else fail-any))) in
        {597}let v_1116: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1113),(if success?(4-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-2-tuple(v_1112))))) then dhexp(2-proj-2-tuple(v_1112),4-proj-7-tuple(v_1092)) else fail-any) else fail-any))) in
        {598}let v_1117: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-2-tuple(v_1112))))) then dhexp(2-proj-2-tuple(v_1112),4-proj-7-tuple(v_1092)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1113))) then (if not-caught-fail(v_1114) then (if not-caught-fail(v_1115) then (if not-caught-fail(v_1116) then (v_1114,v_1115,v_1116) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {599}let v_1118: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-2-tuple(v_1112))))) then dhexp(2-proj-2-tuple(v_1112),4-proj-7-tuple(v_1092)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-3-tuple(v_1113))))) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-3-tuple(v_1117))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1117)) then cipherstatepack(2-proj-3-tuple(v_1117),minnonce) else fail-any),1-proj-3-tuple(v_1117),3-proj-3-tuple(v_1113)) else fail-any) else fail-any) else fail-any)) in
        {600}let v_1119: bitstring = catch-fail(symmetricstateunpack(v_1118)) in
        {601}let v_1120: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1119),6-proj-7-tuple(v_1092))) in
        {602}let v_1121: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1119),6-proj-7-tuple(v_1092))) in
        {603}let v_1122: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1119),6-proj-7-tuple(v_1092))) in
        {604}let v_1123: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_1092)) && success?(2-proj-3-tuple(v_1119))) then (if not-caught-fail(v_1120) then (if not-caught-fail(v_1121) then (if not-caught-fail(v_1122) then (v_1120,v_1121,v_1122) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1124: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1119),1-proj-3-tuple(v_1123),3-proj-3-tuple(v_1119)))) in
        {606}let v_1125: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_1123)) && success?(symmetricstatepack(1-proj-3-tuple(v_1119),1-proj-3-tuple(v_1123),3-proj-3-tuple(v_1119)))) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-3-tuple(v_1124))))) then symmetricstatepack(1-proj-3-tuple(v_1124),2-proj-3-tuple(v_1124),hash(3-proj-3-tuple(v_1124),2-proj-3-tuple(v_1123))) else fail-any) else fail-any))) in
        {607}let v_1126: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1119) && success?(is-true(success?(1-proj-3-tuple(v_1119))))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_1123)) then cipherstatepack(3-proj-3-tuple(v_1123),minnonce) else fail-any),1-proj-3-tuple(v_1123),3-proj-3-tuple(v_1125)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1127: bitstring = catch-fail(symmetricstateunpack(v_1126)) in
        {609}let v_1128: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1127))) in
        {610}let v_1129: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1128),2-proj-2-tuple(v_1128),3-proj-3-tuple(v_1127),msg_b(bob,charlie,sid))) in
        {611}let v_1130: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1127))) in
        {612}let v_1131: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1128))) && success?(1-proj-3-tuple(v_1127))) then (if (not-caught-fail(v_1130) && success?(is-true(success?(1-proj-2-tuple(v_1130))))) then cipherstatepack(1-proj-2-tuple(v_1130),increment_nonce(2-proj-2-tuple(v_1128))) else fail-any) else fail-any)) in
        {613}let v_1132: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1127)) && success?(1-proj-3-tuple(v_1127))) then (if (not-caught-fail(v_1128) && success?(is-true(success?(1-proj-2-tuple(v_1128))))) then (if not-caught-fail(v_1129) then (if not-caught-fail(v_1131) then (v_1131,v_1129) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {614}let v_1133: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1132),2-proj-3-tuple(v_1127),3-proj-3-tuple(v_1127)))) in
        {615}let v_1134: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1132)) && success?(symmetricstatepack(1-proj-2-tuple(v_1132),2-proj-3-tuple(v_1127),3-proj-3-tuple(v_1127)))) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-3-tuple(v_1133))))) then symmetricstatepack(1-proj-3-tuple(v_1133),2-proj-3-tuple(v_1133),hash(3-proj-3-tuple(v_1133),2-proj-2-tuple(v_1132))) else fail-any) else fail-any)) in
        {616}let v_1135: bitstring = catch-fail((if (not-caught-fail(v_1127) && success?(is-true(success?(1-proj-3-tuple(v_1127))))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-2-tuple(v_1132))))) then (if not-caught-fail(v_1134) then (v_1134,2-proj-2-tuple(v_1132)) else fail-any) else fail-any) else fail-any)) in
        {617}let v_1136: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1135),2-proj-7-tuple(v_1092),v_1095,4-proj-7-tuple(v_1092),5-proj-7-tuple(v_1092),6-proj-7-tuple(v_1092),7-proj-7-tuple(v_1092))) in
        {618}let v_1137: bitstring = catch-fail(concat3(v_1096,2-proj-3-tuple(v_1093),2-proj-2-tuple(v_1135))) in
        {619}let v_1138: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1135))) in
        {620}let v_1139: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1138),zero)) in
        {621}let v_1140: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1138),zero)) in
        {622}let v_1141: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1138),zero)) in
        {623}let v_1142: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1138)) then (if not-caught-fail(v_1139) then (if not-caught-fail(v_1140) then (if not-caught-fail(v_1141) then (v_1139,v_1140,v_1141) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {624}let v_1143: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1142)) then cipherstatepack(1-proj-3-tuple(v_1142),minnonce) else fail-any)) in
        {625}let v_1144: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1142)) then cipherstatepack(2-proj-3-tuple(v_1142),minnonce) else fail-any)) in
        {626}let v_1145: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1135)) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-3-tuple(v_1138))))) then (if (not-caught-fail(v_1142) && success?(is-true(success?(1-proj-3-tuple(v_1142))))) then (if not-caught-fail(v_1143) then (if not-caught-fail(v_1144) then (1-proj-2-tuple(v_1135),v_1143,v_1144) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {627}let (hs_1146: handshakestate,message_b_1147: bitstring,cs1_1148: cipherstate,cs2_1149: cipherstate) = (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-7-tuple(v_1092))))) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-3-tuple(v_1093))))) then (if not-caught-fail(v_1095) then (if not-caught-fail(v_1096) then (if not-caught-fail(v_1098) then (if not-caught-fail(v_1104) then (if not-caught-fail(v_1111) then (if not-caught-fail(v_1118) then (if not-caught-fail(v_1126) then (if (not-caught-fail(v_1135) && success?(is-true(success?(1-proj-2-tuple(v_1135))))) then (if not-caught-fail(v_1136) then (if not-caught-fail(v_1137) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-3-tuple(v_1145))))) then (v_1136,v_1137,2-proj-3-tuple(v_1145),3-proj-3-tuple(v_1145)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {628}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {629}insert statestore(bob,charlie,sid,statepack_c(hs_1146,cs1_1148,cs2_1149));
        {630}out(pub, message_b_1147)
    ) | (
        {632}!
        {652}get statestore(=bob,=charlie,=sid,statepack_c(hs_1150: handshakestate,cs1_1151: cipherstate,cs2_1152: cipherstate)) in
        {633}let hs_1153: handshakestate = handshakestatesetcs(hs_1150,cs1_1151) in
        {634}in(pub, message_c_1154: bitstring);
        {635}let v_1155: bitstring = catch-fail(handshakestateunpack(hs_1153)) in
        {636}let v_1156: bitstring = catch-fail(deconcat3(message_c_1154)) in
        {637}let v_1157: bool = catch-fail(true) in
        {638}let v_1158: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1155))) in
        {639}let v_1159: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1158))) in
        {640}let v_1160: aead = catch-fail(decrypt(1-proj-2-tuple(v_1159),2-proj-2-tuple(v_1159),3-proj-3-tuple(v_1158),3-proj-3-tuple(v_1156))) in
        {641}let v_1161: bitstring = catch-fail(aeadunpack(v_1160)) in
        {642}let v_1162: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1158))) in
        {643}let v_1163: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1159))) && success?(1-proj-3-tuple(v_1158))) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-2-tuple(v_1162))))) then cipherstatepack(1-proj-2-tuple(v_1162),increment_nonce(2-proj-2-tuple(v_1159))) else fail-any) else fail-any)) in
        {644}let v_1164: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1156)) && (success?(3-proj-3-tuple(v_1158)) && success?(1-proj-3-tuple(v_1158)))) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-2-tuple(v_1159))))) then (if not-caught-fail(v_1160) then (if (not-caught-fail(v_1161) && success?(is-true(success?(1-proj-3-tuple(v_1161))))) then (if not-caught-fail(v_1163) then (v_1163,3-proj-3-tuple(v_1161),1-proj-3-tuple(v_1161)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {645}let v_1165: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1164),2-proj-3-tuple(v_1158),3-proj-3-tuple(v_1158)))) in
        {646}let v_1166: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1156)) && success?(symmetricstatepack(1-proj-3-tuple(v_1164),2-proj-3-tuple(v_1158),3-proj-3-tuple(v_1158)))) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then symmetricstatepack(1-proj-3-tuple(v_1165),2-proj-3-tuple(v_1165),hash(3-proj-3-tuple(v_1165),3-proj-3-tuple(v_1156))) else fail-any) else fail-any)) in
        {647}let v_1167: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1156)) && success?(1-proj-7-tuple(v_1155))) then (if (not-caught-fail(v_1158) && success?(is-true(success?(1-proj-3-tuple(v_1158))))) then (if (not-caught-fail(v_1164) && success?(is-true(success?(1-proj-3-tuple(v_1164))))) then (if not-caught-fail(v_1166) then (v_1166,2-proj-3-tuple(v_1164),3-proj-3-tuple(v_1164)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {648}let v_1168: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1167),2-proj-7-tuple(v_1155),3-proj-7-tuple(v_1155),4-proj-7-tuple(v_1155),5-proj-7-tuple(v_1155),6-proj-7-tuple(v_1155),7-proj-7-tuple(v_1155))) in
        {649}let (hs_1169: handshakestate,plaintext_c_1170: bitstring,valid_1171: bool) = (if (not-caught-fail(v_1155) && success?(is-true(success?(1-proj-7-tuple(v_1155))))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if not-caught-fail(v_1157) then (if (not-caught-fail(v_1167) && success?(is-true(success?(1-proj-3-tuple(v_1167))))) then (if (v_1157 && 3-proj-3-tuple(v_1167)) then (if not-caught-fail(v_1168) then (v_1168,2-proj-3-tuple(v_1167),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {650}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1170);
        {651}insert statestore(bob,charlie,sid,statepack_d(hs_1169,handshakestategetcs(hs_1169),cs2_1152))
    ) | (
        {653}!
        {671}get statestore(=bob,=charlie,=sid,statepack_d(hs_1172: handshakestate,cs1_1173: cipherstate,cs2_1174: cipherstate)) in
        {654}let hs_1175: handshakestate = handshakestatesetcs(hs_1172,cs2_1174) in
        {655}let v_1176: bitstring = catch-fail(handshakestateunpack(hs_1175)) in
        {656}let v_1177: bitstring = catch-fail((empty,empty,empty)) in
        {657}let v_1178: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1176))) in
        {658}let v_1179: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1178))) in
        {659}let v_1180: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1179),2-proj-2-tuple(v_1179),3-proj-3-tuple(v_1178),msg_d(bob,charlie,sid))) in
        {660}let v_1181: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1178))) in
        {661}let v_1182: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1179))) && success?(1-proj-3-tuple(v_1178))) then (if (not-caught-fail(v_1181) && success?(is-true(success?(1-proj-2-tuple(v_1181))))) then cipherstatepack(1-proj-2-tuple(v_1181),increment_nonce(2-proj-2-tuple(v_1179))) else fail-any) else fail-any)) in
        {662}let v_1183: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1178)) && success?(1-proj-3-tuple(v_1178))) then (if (not-caught-fail(v_1179) && success?(is-true(success?(1-proj-2-tuple(v_1179))))) then (if not-caught-fail(v_1180) then (if not-caught-fail(v_1182) then (v_1182,v_1180) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {663}let v_1184: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1183),2-proj-3-tuple(v_1178),3-proj-3-tuple(v_1178)))) in
        {664}let v_1185: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1183)) && success?(symmetricstatepack(1-proj-2-tuple(v_1183),2-proj-3-tuple(v_1178),3-proj-3-tuple(v_1178)))) then (if (not-caught-fail(v_1184) && success?(is-true(success?(1-proj-3-tuple(v_1184))))) then symmetricstatepack(1-proj-3-tuple(v_1184),2-proj-3-tuple(v_1184),hash(3-proj-3-tuple(v_1184),2-proj-2-tuple(v_1183))) else fail-any) else fail-any)) in
        {665}let v_1186: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1176)) then (if (not-caught-fail(v_1178) && success?(is-true(success?(1-proj-3-tuple(v_1178))))) then (if (not-caught-fail(v_1183) && success?(is-true(success?(1-proj-2-tuple(v_1183))))) then (if not-caught-fail(v_1185) then (v_1185,2-proj-2-tuple(v_1183)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {666}let v_1187: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1186),2-proj-7-tuple(v_1176),3-proj-7-tuple(v_1176),4-proj-7-tuple(v_1176),5-proj-7-tuple(v_1176),6-proj-7-tuple(v_1176),7-proj-7-tuple(v_1176))) in
        {667}let v_1188: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1177),2-proj-3-tuple(v_1177),2-proj-2-tuple(v_1186))) in
        {668}let (hs_1189: handshakestate,message_d_1190: bitstring) = (if (not-caught-fail(v_1176) && success?(is-true(success?(1-proj-7-tuple(v_1176))))) then (if (not-caught-fail(v_1177) && success?(is-true(success?(1-proj-3-tuple(v_1177))))) then (if (not-caught-fail(v_1186) && success?(is-true(success?(1-proj-2-tuple(v_1186))))) then (if not-caught-fail(v_1187) then (if not-caught-fail(v_1188) then (v_1187,v_1188) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {669}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {670}out(pub, message_d_1190)
    ) | (
        {672}event LeakPsk(phase0,charlie,bob);
        {673}out(pub, key_psk(charlie,bob))
    ) | (
        {674}phase 1;
        {675}event LeakPsk(phase1,charlie,bob);
        {676}out(pub, key_psk(charlie,bob))
    ) | (
        {677}event LeakS(phase0,bob);
        {678}out(pub, key_s(bob))
    ) | (
        {679}phase 1;
        {680}event LeakS(phase1,bob);
        {681}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 189 rules in the queue.
400 rules inserted. The rule base contains 396 rules. 49 rules in the queue.
600 rules inserted. The rule base contains 573 rules. 196 rules in the queue.
800 rules inserted. The rule base contains 748 rules. 128 rules in the queue.
1000 rules inserted. The rule base contains 940 rules. 227 rules in the queue.
1200 rules inserted. The rule base contains 1137 rules. 317 rules in the queue.
1400 rules inserted. The rule base contains 1315 rules. 304 rules in the queue.
1600 rules inserted. The rule base contains 1508 rules. 328 rules in the queue.
1800 rules inserted. The rule base contains 1708 rules. 360 rules in the queue.
2000 rules inserted. The rule base contains 1888 rules. 406 rules in the queue.
2200 rules inserted. The rule base contains 2069 rules. 450 rules in the queue.
2400 rules inserted. The rule base contains 2216 rules. 549 rules in the queue.
2600 rules inserted. The rule base contains 2374 rules. 615 rules in the queue.
2800 rules inserted. The rule base contains 2481 rules. 625 rules in the queue.
3000 rules inserted. The rule base contains 2592 rules. 617 rules in the queue.
3200 rules inserted. The rule base contains 2708 rules. 608 rules in the queue.
3400 rules inserted. The rule base contains 2795 rules. 578 rules in the queue.
3600 rules inserted. The rule base contains 2872 rules. 531 rules in the queue.
3800 rules inserted. The rule base contains 2972 rules. 556 rules in the queue.
4000 rules inserted. The rule base contains 3068 rules. 585 rules in the queue.
4200 rules inserted. The rule base contains 3173 rules. 581 rules in the queue.
4400 rules inserted. The rule base contains 3296 rules. 581 rules in the queue.
4600 rules inserted. The rule base contains 3417 rules. 580 rules in the queue.
4800 rules inserted. The rule base contains 3568 rules. 602 rules in the queue.
5000 rules inserted. The rule base contains 3754 rules. 658 rules in the queue.
5200 rules inserted. The rule base contains 3888 rules. 668 rules in the queue.
5400 rules inserted. The rule base contains 4036 rules. 649 rules in the queue.
5600 rules inserted. The rule base contains 4205 rules. 649 rules in the queue.
5800 rules inserted. The rule base contains 4342 rules. 637 rules in the queue.
6000 rules inserted. The rule base contains 4514 rules. 613 rules in the queue.
6200 rules inserted. The rule base contains 4697 rules. 601 rules in the queue.
6400 rules inserted. The rule base contains 4825 rules. 590 rules in the queue.
6600 rules inserted. The rule base contains 4976 rules. 598 rules in the queue.
6800 rules inserted. The rule base contains 5133 rules. 613 rules in the queue.
7000 rules inserted. The rule base contains 5257 rules. 594 rules in the queue.
7200 rules inserted. The rule base contains 5391 rules. 586 rules in the queue.
7400 rules inserted. The rule base contains 5206 rules. 578 rules in the queue.
7600 rules inserted. The rule base contains 5385 rules. 648 rules in the queue.
7800 rules inserted. The rule base contains 5546 rules. 713 rules in the queue.
8000 rules inserted. The rule base contains 5704 rules. 768 rules in the queue.
8200 rules inserted. The rule base contains 5879 rules. 812 rules in the queue.
8400 rules inserted. The rule base contains 6059 rules. 858 rules in the queue.
8600 rules inserted. The rule base contains 6229 rules. 890 rules in the queue.
8800 rules inserted. The rule base contains 6419 rules. 928 rules in the queue.
9000 rules inserted. The rule base contains 6604 rules. 951 rules in the queue.
9200 rules inserted. The rule base contains 6779 rules. 961 rules in the queue.
9400 rules inserted. The rule base contains 6965 rules. 983 rules in the queue.
9600 rules inserted. The rule base contains 7135 rules. 1000 rules in the queue.
9800 rules inserted. The rule base contains 7309 rules. 991 rules in the queue.
10000 rules inserted. The rule base contains 7472 rules. 981 rules in the queue.
10200 rules inserted. The rule base contains 7635 rules. 997 rules in the queue.
10400 rules inserted. The rule base contains 7813 rules. 998 rules in the queue.
10600 rules inserted. The rule base contains 7945 rules. 987 rules in the queue.
10800 rules inserted. The rule base contains 8084 rules. 982 rules in the queue.
11000 rules inserted. The rule base contains 8222 rules. 945 rules in the queue.
11200 rules inserted. The rule base contains 8377 rules. 901 rules in the queue.
11400 rules inserted. The rule base contains 8515 rules. 856 rules in the queue.
11600 rules inserted. The rule base contains 8654 rules. 864 rules in the queue.
11800 rules inserted. The rule base contains 8783 rules. 858 rules in the queue.
12000 rules inserted. The rule base contains 8949 rules. 853 rules in the queue.
12200 rules inserted. The rule base contains 9072 rules. 858 rules in the queue.
12400 rules inserted. The rule base contains 9189 rules. 851 rules in the queue.
12600 rules inserted. The rule base contains 9295 rules. 837 rules in the queue.
12800 rules inserted. The rule base contains 9467 rules. 814 rules in the queue.
13000 rules inserted. The rule base contains 9531 rules. 812 rules in the queue.
13200 rules inserted. The rule base contains 9654 rules. 826 rules in the queue.
13400 rules inserted. The rule base contains 9804 rules. 848 rules in the queue.
13600 rules inserted. The rule base contains 10004 rules. 894 rules in the queue.
13800 rules inserted. The rule base contains 10073 rules. 857 rules in the queue.
14000 rules inserted. The rule base contains 10169 rules. 859 rules in the queue.
14200 rules inserted. The rule base contains 10368 rules. 878 rules in the queue.
14400 rules inserted. The rule base contains 10568 rules. 905 rules in the queue.
14600 rules inserted. The rule base contains 10645 rules. 903 rules in the queue.
14800 rules inserted. The rule base contains 10787 rules. 893 rules in the queue.
15000 rules inserted. The rule base contains 10982 rules. 914 rules in the queue.
15200 rules inserted. The rule base contains 11177 rules. 931 rules in the queue.
15400 rules inserted. The rule base contains 11240 rules. 915 rules in the queue.
15600 rules inserted. The rule base contains 11407 rules. 923 rules in the queue.
15800 rules inserted. The rule base contains 11584 rules. 935 rules in the queue.
16000 rules inserted. The rule base contains 11771 rules. 970 rules in the queue.
16200 rules inserted. The rule base contains 11901 rules. 936 rules in the queue.
16400 rules inserted. The rule base contains 12031 rules. 915 rules in the queue.
16600 rules inserted. The rule base contains 12197 rules. 925 rules in the queue.
16800 rules inserted. The rule base contains 12380 rules. 908 rules in the queue.
17000 rules inserted. The rule base contains 12532 rules. 884 rules in the queue.
17200 rules inserted. The rule base contains 12593 rules. 833 rules in the queue.
17400 rules inserted. The rule base contains 12723 rules. 826 rules in the queue.
17600 rules inserted. The rule base contains 12916 rules. 798 rules in the queue.
17800 rules inserted. The rule base contains 13023 rules. 787 rules in the queue.
18000 rules inserted. The rule base contains 13153 rules. 794 rules in the queue.
18200 rules inserted. The rule base contains 13284 rules. 801 rules in the queue.
18400 rules inserted. The rule base contains 13458 rules. 827 rules in the queue.
18600 rules inserted. The rule base contains 13493 rules. 809 rules in the queue.
18800 rules inserted. The rule base contains 13568 rules. 824 rules in the queue.
19000 rules inserted. The rule base contains 13756 rules. 843 rules in the queue.
19200 rules inserted. The rule base contains 13875 rules. 844 rules in the queue.
19400 rules inserted. The rule base contains 13993 rules. 824 rules in the queue.
19600 rules inserted. The rule base contains 14079 rules. 812 rules in the queue.
19800 rules inserted. The rule base contains 14261 rules. 851 rules in the queue.
20000 rules inserted. The rule base contains 14354 rules. 835 rules in the queue.
20200 rules inserted. The rule base contains 14457 rules. 827 rules in the queue.
20400 rules inserted. The rule base contains 14583 rules. 803 rules in the queue.
20600 rules inserted. The rule base contains 14743 rules. 749 rules in the queue.
20800 rules inserted. The rule base contains 14781 rules. 699 rules in the queue.
21000 rules inserted. The rule base contains 14883 rules. 657 rules in the queue.
21200 rules inserted. The rule base contains 15026 rules. 590 rules in the queue.
21400 rules inserted. The rule base contains 15079 rules. 527 rules in the queue.
21600 rules inserted. The rule base contains 15175 rules. 483 rules in the queue.
21800 rules inserted. The rule base contains 15158 rules. 430 rules in the queue.
22000 rules inserted. The rule base contains 15201 rules. 390 rules in the queue.
22200 rules inserted. The rule base contains 15228 rules. 328 rules in the queue.
22400 rules inserted. The rule base contains 15260 rules. 296 rules in the queue.
22600 rules inserted. The rule base contains 15264 rules. 234 rules in the queue.
22800 rules inserted. The rule base contains 15299 rules. 157 rules in the queue.
23000 rules inserted. The rule base contains 15286 rules. 33 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535598]),msg_a(alice,bob,sid[!1 = @sid_1693535598]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535599]),msg_a(alice,bob,sid[!1 = @sid_1693535598])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535607]),msg_a(alice,bob,sid[!1 = @sid_1693535607]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535608]),msg_a(alice,bob,sid[!1 = @sid_1693535607])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535617]),msg_a(alice,bob,sid[!1 = @sid_1693535617]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535618]),msg_a(alice,bob,sid[!1 = @sid_1693535617])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535627]),msg_a(alice,bob,sid[!1 = @sid_1693535627]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535628]),msg_a(alice,bob,sid[!1 = @sid_1693535627])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535636]),msg_a(alice,bob,sid[!1 = @sid_1693535636]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1693535637]),msg_a(alice,bob,sid[!1 = @sid_1693535636])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535644]),msg_a(alice,bob,sid[!1 = @sid_1693535644]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1693535644]))
Abbreviations:
sid_1693535748 = sid[!1 = @sid_1693535723]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1693535748,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1693535748,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1693535748,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693535748),msg_a(alice,bob,sid_1693535748)) may be executed at {61}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748))) may be sent on channel pub at output {63}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {511}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {512}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))).

28. By 14, the attacker may know hash(somename,empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g)))).

31. By 30, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535748),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748))).

33. By 32, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535748),g))),msg_a(alice,bob,sid_1693535748)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1693535748) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1693535748)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535750]),msg_a(alice,bob,sid[!1 = @sid_1693535750]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1693535750]))
Abbreviations:
sid_1693535854 = sid[!1 = @sid_1693535829]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1693535854,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1693535854,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1693535854,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693535854),msg_a(alice,bob,sid_1693535854)) may be executed at {61}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854))) may be sent on channel pub at output {63}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {511}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {512}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))).

28. By 14, the attacker may know hash(somename,empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g)))).

31. By 30, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535854),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854))).

33. By 32, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535854),g))),msg_a(alice,bob,sid_1693535854)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1693535854) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1693535854)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535856]),msg_a(alice,bob,sid[!1 = @sid_1693535856]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1693535856]))
Abbreviations:
sid_1693535963 = sid[!1 = @sid_1693535938]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1693535963,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1693535963,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1693535963,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693535963),msg_a(alice,bob,sid_1693535963)) may be executed at {61}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963))) may be sent on channel pub at output {63}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {511}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {512}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))).

28. By 14, the attacker may know hash(somename,empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g)))).

31. By 30, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693535963),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963))).

33. By 32, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693535963),g))),msg_a(alice,bob,sid_1693535963)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1693535963) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1693535963)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693535965]),msg_a(alice,bob,sid[!1 = @sid_1693535965]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1693535965]))
Abbreviations:
sid_1693536069 = sid[!1 = @sid_1693536044]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1693536069,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1693536069,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1693536069,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693536069),msg_a(alice,bob,sid_1693536069)) may be executed at {61}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069))) may be sent on channel pub at output {63}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))).

8. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

9. By 1, the attacker may have the channel pub.
By 8, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

10. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

11. By 1, the attacker may have the channel pub.
By 10, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 9, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {511}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {512}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

26. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))).

28. By 14, the attacker may know hash(somename,empty).
By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g)))).

31. By 30, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))) in phase 1.
By 25, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536069),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069))).

33. By 32, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536069),g))),msg_a(alice,bob,sid_1693536069)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1693536069) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1693536069)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536072]),msg_b(bob,alice,sid[!1 = @sid_1693536072]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536073]),msg_a(alice,bob,sid[!1 = @sid_1693536073]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693536073]),msg_b(bob,alice,sid[!1 = @sid_1693536072])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536081]),msg_b(bob,alice,sid[!1 = @sid_1693536081]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536082]),msg_a(alice,bob,sid[!1 = @sid_1693536082]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693536082]),msg_b(bob,alice,sid[!1 = @sid_1693536081])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536091]),msg_b(bob,alice,sid[!1 = @sid_1693536091]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536092]),msg_a(alice,bob,sid[!1 = @sid_1693536092]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693536092]),msg_b(bob,alice,sid[!1 = @sid_1693536091])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536101]),msg_b(bob,alice,sid[!1 = @sid_1693536101]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536102]),msg_a(alice,bob,sid[!1 = @sid_1693536102]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693536102]),msg_b(bob,alice,sid[!1 = @sid_1693536101])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536110]),msg_b(bob,alice,sid[!1 = @sid_1693536110]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536111]),msg_a(alice,bob,sid[!1 = @sid_1693536111]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1693536111]),msg_b(bob,alice,sid[!1 = @sid_1693536110])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536134]),msg_c(alice,bob,sid[!1 = @sid_1693536134]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536135]),msg_b(bob,alice,sid[!1 = @sid_1693536135]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536134]),msg_a(alice,bob,sid[!1 = @sid_1693536134]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693536135]),msg_c(alice,bob,sid[!1 = @sid_1693536134])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536143]),msg_c(alice,bob,sid[!1 = @sid_1693536143]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536144]),msg_b(bob,alice,sid[!1 = @sid_1693536144]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536143]),msg_a(alice,bob,sid[!1 = @sid_1693536143]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693536144]),msg_c(alice,bob,sid[!1 = @sid_1693536143])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536153]),msg_c(alice,bob,sid[!1 = @sid_1693536153]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536154]),msg_b(bob,alice,sid[!1 = @sid_1693536154]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536153]),msg_a(alice,bob,sid[!1 = @sid_1693536153]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693536154]),msg_c(alice,bob,sid[!1 = @sid_1693536153])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536163]),msg_c(alice,bob,sid[!1 = @sid_1693536163]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536164]),msg_b(bob,alice,sid[!1 = @sid_1693536164]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536163]),msg_a(alice,bob,sid[!1 = @sid_1693536163]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693536164]),msg_c(alice,bob,sid[!1 = @sid_1693536163])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536172]),msg_c(alice,bob,sid[!1 = @sid_1693536172]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536173]),msg_b(bob,alice,sid[!1 = @sid_1693536173]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536172]),msg_a(alice,bob,sid[!1 = @sid_1693536172]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1693536173]),msg_c(alice,bob,sid[!1 = @sid_1693536172])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693536196]),msg_d(bob,alice,sid[!1 = @sid_1693536196]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536197]),msg_c(alice,bob,sid[!1 = @sid_1693536197]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536196]),msg_b(bob,alice,sid[!1 = @sid_1693536196]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536197]),msg_a(alice,bob,sid[!1 = @sid_1693536197]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693536197]),msg_d(bob,alice,sid[!1 = @sid_1693536196])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693536205]),msg_d(bob,alice,sid[!1 = @sid_1693536205]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536206]),msg_c(alice,bob,sid[!1 = @sid_1693536206]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536205]),msg_b(bob,alice,sid[!1 = @sid_1693536205]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536206]),msg_a(alice,bob,sid[!1 = @sid_1693536206]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693536206]),msg_d(bob,alice,sid[!1 = @sid_1693536205])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693536215]),msg_d(bob,alice,sid[!1 = @sid_1693536215]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536216]),msg_c(alice,bob,sid[!1 = @sid_1693536216]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536215]),msg_b(bob,alice,sid[!1 = @sid_1693536215]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536216]),msg_a(alice,bob,sid[!1 = @sid_1693536216]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693536216]),msg_d(bob,alice,sid[!1 = @sid_1693536215])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693536225]),msg_d(bob,alice,sid[!1 = @sid_1693536225]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536226]),msg_c(alice,bob,sid[!1 = @sid_1693536226]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536225]),msg_b(bob,alice,sid[!1 = @sid_1693536225]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536226]),msg_a(alice,bob,sid[!1 = @sid_1693536226]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693536226]),msg_d(bob,alice,sid[!1 = @sid_1693536225])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693536234]),msg_d(bob,alice,sid[!1 = @sid_1693536234]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536235]),msg_c(alice,bob,sid[!1 = @sid_1693536235]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536234]),msg_b(bob,alice,sid[!1 = @sid_1693536234]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536235]),msg_a(alice,bob,sid[!1 = @sid_1693536235]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1693536235]),msg_d(bob,alice,sid[!1 = @sid_1693536234])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1693536256]),msg_d(bob,alice,sid[!1 = @sid_1693536256]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1693536257]),msg_c(alice,bob,sid[!1 = @sid_1693536257]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1693536256]),msg_b(bob,alice,sid[!1 = @sid_1693536256]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1693536257]),msg_a(alice,bob,sid[!1 = @sid_1693536257]))) -> end(RecvEnd(true))
Abbreviations:
sid_1693536501 = sid[!1 = @sid_1693536490]
sid_1693536502 = sid[!1 = @sid_1693536445]

1. The entry statestore(alice,bob,sid_1693536501,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1693536501,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_1693536501,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693536501),msg_a(alice,bob,sid_1693536501)) may be executed at {61}.
So the entry statestore(alice,bob,sid_1693536501,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {62}.
table(statestore(alice,bob,sid_1693536501,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_1693536502,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {361}.
table(statestore(bob,alice,sid_1693536502,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_1693536501,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {64}.
The event SendMsg(alice,bob,stagepack_a(sid_1693536501),msg_a(alice,bob,sid_1693536501)) may be executed at {61}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))) may be sent on channel pub at output {63}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501)))).

5. The entry statestore(bob,alice,sid_1693536502,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {403}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))) that may be sent on channel pub by 4 may be received at input {362}.
So the entry statestore(bob,alice,sid_1693536502,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {402}.
table(statestore(bob,alice,sid_1693536502,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_1693536502,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {462}.
The event SendMsg(bob,alice,stagepack_b(sid_1693536502),msg_b(bob,alice,sid_1693536502)) may be executed at {459}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),empty,encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))) may be sent on channel pub at output {461}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),empty,encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502)))).

7. The entry statestore(alice,bob,sid_1693536501,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {122}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),empty,encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))) that may be sent on channel pub by 6 may be received at input {65}.
So the entry statestore(alice,bob,sid_1693536501,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {121}.
table(statestore(alice,bob,sid_1693536501,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_1693536501,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {142}.
The event SendMsg(alice,bob,stagepack_c(sid_1693536501),msg_c(alice,bob,sid_1693536501)) may be executed at {139}.
So the entry statestore(alice,bob,sid_1693536501,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {140}.
table(statestore(alice,bob,sid_1693536501,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_1693536502,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {462}.
The event SendMsg(bob,alice,stagepack_b(sid_1693536502),msg_b(bob,alice,sid_1693536502)) may be executed at {459}.
So the entry statestore(bob,alice,sid_1693536502,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_e(bob,alice,sid_1693536502)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {460}.
table(statestore(bob,alice,sid_1693536502,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_e(bob,alice,sid_1693536502)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_1693536501,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {142}.
The event SendMsg(alice,bob,stagepack_c(sid_1693536501),msg_c(alice,bob,sid_1693536501)) may be executed at {139}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501))) may be sent on channel pub at output {141}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501)))).

11. The entry statestore(bob,alice,sid_1693536502,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_e(bob,alice,sid_1693536502)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 9 may be read at get {483}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501))) that may be sent on channel pub by 10 may be received at input {465}.
So the entry statestore(bob,alice,sid_1693536502,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_e(bob,alice,sid_1693536502)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {482}.
table(statestore(bob,alice,sid_1693536502,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_e(bob,alice,sid_1693536502)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_1693536502,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_e(bob,alice,sid_1693536502)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 11 may be read at get {502}.
The event SendMsg(bob,alice,stagepack_d(sid_1693536502),msg_d(bob,alice,sid_1693536502)) may be executed at {500}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501))),msg_d(bob,alice,sid_1693536502))) may be sent on channel pub at output {501}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501))),msg_d(bob,alice,sid_1693536502)))).

13. The entry statestore(alice,bob,sid_1693536501,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g)),key_e(alice,bob,sid_1693536501)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 8 may be read at get {163}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),msg_a(alice,bob,sid_1693536501))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1693536502),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_e(alice,bob,sid_1693536501),g))),dhexp_real(key_e(bob,alice,sid_1693536502),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_1693536502))),msg_c(alice,bob,sid_1693536501))),msg_d(bob,alice,sid_1693536502))) that may be sent on channel pub by 12 may be received at input {145}.
So event RecvEnd(true) may be executed at {162}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
