File "KN.noise.passive.pv", line 223, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 232, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 233, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 233, character 36:
Warning: identifier h rebound.
File "KN.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 248, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 249, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 274, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 278, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 279, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 286, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 292, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 301, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 318, characters 6-7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 323, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 336, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 338, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 359, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 506, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 508, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 359, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 248, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 249, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 498, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 499, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 301, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 491, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 336, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 338, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 223, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 223, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 248, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 249, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 483, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 274, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 278, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 279, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 559, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 550, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 248, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 249, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 543, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 286, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 292, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 292, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 293, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 223, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 223, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 536, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 318, characters 6-7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 323, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 248, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 249, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_473: key = catch-fail(dhexp(key_s(alice),g)) in
    {5}let s_474: keypair = (if not-caught-fail(v_473) then keypairpack(v_473,key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_474));
    (
        {7}let e_475: keypair = keypairpack(empty,empty) in
        {8}let rs_476: key = empty in
        {9}let re_477: key = empty in
        {10}let v_478: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_479: key = catch-fail(v_478) in
        {12}let v_480: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_481: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any))) in
        {14}let v_482: symmetricstate = catch-fail((if success?((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then symmetricstatepack(1-proj-3-tuple(v_481),2-proj-3-tuple(v_481),hash(3-proj-3-tuple(v_481),empty)) else fail-any) else fail-any)) in
        {15}let v_483: bitstring = catch-fail(symmetricstateunpack(v_482)) in
        {16}let v_484: symmetricstate = catch-fail((if success?(getpublickey(s_474)) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack(1-proj-3-tuple(v_483),2-proj-3-tuple(v_483),hash(3-proj-3-tuple(v_483),getpublickey(s_474))) else fail-any) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_482) then (if not-caught-fail(v_484) then handshakestatepack(v_484,s_474,e_475,rs_476,re_477,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {41}get statestore(=alice,=bob,=sid,statepack_a(hs_485: handshakestate)) in
        {19}let v_486: bitstring = catch-fail(handshakestateunpack(hs_485)) in
        {20}let v_487: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_488: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {22}let v_489: keypair = catch-fail((if not-caught-fail(v_488) then keypairpack(v_488,key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_490: bitstring = catch-fail(getpublickey(v_489)) in
        {24}let v_491: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_486))) in
        {25}let v_492: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_486)) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then symmetricstatepack(1-proj-3-tuple(v_491),2-proj-3-tuple(v_491),hash(3-proj-3-tuple(v_491),v_490)) else fail-any) else fail-any)) in
        {26}let v_493: bitstring = catch-fail(symmetricstateunpack(v_492)) in
        {27}let v_494: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {28}let v_495: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_494),2-proj-2-tuple(v_494),3-proj-3-tuple(v_493),msg_a(alice,bob,sid))) in
        {29}let v_496: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {30}let v_497: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_494))) && success?(1-proj-3-tuple(v_493))) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-2-tuple(v_496))))) then cipherstatepack(1-proj-2-tuple(v_496),increment_nonce(2-proj-2-tuple(v_494))) else fail-any) else fail-any)) in
        {31}let v_498: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_493)) && success?(1-proj-3-tuple(v_493))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-2-tuple(v_494))))) then (if not-caught-fail(v_495) then (if not-caught-fail(v_497) then (v_497,v_495) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_499: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_498),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) in
        {33}let v_500: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_498)) && success?(symmetricstatepack(1-proj-2-tuple(v_498),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-3-tuple(v_499))))) then symmetricstatepack(1-proj-3-tuple(v_499),2-proj-3-tuple(v_499),hash(3-proj-3-tuple(v_499),2-proj-2-tuple(v_498))) else fail-any) else fail-any)) in
        {34}let v_501: bitstring = catch-fail((if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-3-tuple(v_493))))) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-2-tuple(v_498))))) then (if not-caught-fail(v_500) then (v_500,2-proj-2-tuple(v_498)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_502: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_501),2-proj-7-tuple(v_486),v_489,4-proj-7-tuple(v_486),5-proj-7-tuple(v_486),6-proj-7-tuple(v_486),7-proj-7-tuple(v_486))) in
        {36}let v_503: bitstring = catch-fail(concat3(v_490,2-proj-3-tuple(v_487),2-proj-2-tuple(v_501))) in
        {37}let (hs_504: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-7-tuple(v_486))))) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then (if not-caught-fail(v_489) then (if not-caught-fail(v_490) then (if not-caught-fail(v_492) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-2-tuple(v_501))))) then (if not-caught-fail(v_502) then (if not-caught-fail(v_503) then (v_502,v_503) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {38}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {39}insert statestore(alice,bob,sid,statepack_b(hs_504));
        {40}out(pub, message_a)
    ) | (
        {85}get statestore(=alice,=bob,=sid,statepack_b(hs_505: handshakestate)) in
        {42}in(pub, message_b: bitstring);
        {43}let v_506: bitstring = catch-fail(handshakestateunpack(hs_505)) in
        {44}let v_507: bitstring = catch-fail(deconcat3(message_b)) in
        {45}let v_508: bool = catch-fail(true) in
        {46}let v_509: key = catch-fail(1-proj-3-tuple(v_507)) in
        {47}let v_510: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_506))) in
        {48}let v_511: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_506)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then symmetricstatepack(1-proj-3-tuple(v_510),2-proj-3-tuple(v_510),hash(3-proj-3-tuple(v_510),v_509)) else fail-any) else fail-any)) in
        {49}let v_512: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_506))) in
        {50}let v_513: bitstring = catch-fail(symmetricstateunpack(v_511)) in
        {51}let v_514: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_513),(if success?(3-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any))) in
        {52}let v_515: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_513),(if success?(3-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any))) in
        {53}let v_516: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_513),(if success?(3-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any))) in
        {54}let v_517: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_513))) then (if not-caught-fail(v_514) then (if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (v_514,v_515,v_516) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_518: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any)) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-3-tuple(v_513))))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-3-tuple(v_517))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_517)) then cipherstatepack(2-proj-3-tuple(v_517),minnonce) else fail-any),1-proj-3-tuple(v_517),3-proj-3-tuple(v_513)) else fail-any) else fail-any) else fail-any)) in
        {56}let v_519: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_506))) in
        {57}let v_520: bitstring = catch-fail(symmetricstateunpack(v_518)) in
        {58}let v_521: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_520),(if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_509) else fail-any) else fail-any))) in
        {59}let v_522: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_520),(if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_509) else fail-any) else fail-any))) in
        {60}let v_523: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_520),(if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_509) else fail-any) else fail-any))) in
        {61}let v_524: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_509) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_520))) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (v_521,v_522,v_523) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_525: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_509) else fail-any) else fail-any)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_524)) then cipherstatepack(2-proj-3-tuple(v_524),minnonce) else fail-any),1-proj-3-tuple(v_524),3-proj-3-tuple(v_520)) else fail-any) else fail-any) else fail-any)) in
        {63}let v_526: bitstring = catch-fail(symmetricstateunpack(v_525)) in
        {64}let v_527: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_526))) in
        {65}let v_528: aead = catch-fail(decrypt(1-proj-2-tuple(v_527),2-proj-2-tuple(v_527),3-proj-3-tuple(v_526),3-proj-3-tuple(v_507))) in
        {66}let v_529: bitstring = catch-fail(aeadunpack(v_528)) in
        {67}let v_530: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_526))) in
        {68}let v_531: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_527))) && success?(1-proj-3-tuple(v_526))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then cipherstatepack(1-proj-2-tuple(v_530),increment_nonce(2-proj-2-tuple(v_527))) else fail-any) else fail-any)) in
        {69}let v_532: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_507)) && (success?(3-proj-3-tuple(v_526)) && success?(1-proj-3-tuple(v_526)))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then (if not-caught-fail(v_528) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then (if not-caught-fail(v_531) then (v_531,3-proj-3-tuple(v_529),1-proj-3-tuple(v_529)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_533: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_532),2-proj-3-tuple(v_526),3-proj-3-tuple(v_526)))) in
        {71}let v_534: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_507)) && success?(symmetricstatepack(1-proj-3-tuple(v_532),2-proj-3-tuple(v_526),3-proj-3-tuple(v_526)))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then symmetricstatepack(1-proj-3-tuple(v_533),2-proj-3-tuple(v_533),hash(3-proj-3-tuple(v_533),3-proj-3-tuple(v_507))) else fail-any) else fail-any)) in
        {72}let v_535: bitstring = catch-fail((if success?(3-proj-3-tuple(v_507)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (if not-caught-fail(v_534) then (v_534,2-proj-3-tuple(v_532),3-proj-3-tuple(v_532)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_536: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_535),2-proj-7-tuple(v_506),3-proj-7-tuple(v_506),4-proj-7-tuple(v_506),v_509,6-proj-7-tuple(v_506),7-proj-7-tuple(v_506))) in
        {74}let v_537: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_535))) in
        {75}let v_538: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_537),zero)) in
        {76}let v_539: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_537),zero)) in
        {77}let v_540: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_537),zero)) in
        {78}let v_541: bitstring = catch-fail((if success?(2-proj-3-tuple(v_537)) then (if not-caught-fail(v_538) then (if not-caught-fail(v_539) then (if not-caught-fail(v_540) then (v_538,v_539,v_540) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_542: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_541)) then cipherstatepack(1-proj-3-tuple(v_541),minnonce) else fail-any)) in
        {80}let v_543: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_541)) then cipherstatepack(2-proj-3-tuple(v_541),minnonce) else fail-any)) in
        {81}let v_544: bitstring = catch-fail((if success?(1-proj-3-tuple(v_535)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (1-proj-3-tuple(v_535),v_542,v_543) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {82}let (hs_545: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-7-tuple(v_506))))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then (if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (if not-caught-fail(v_511) then (if not-caught-fail(v_518) then (if not-caught-fail(v_525) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if (v_508 && 3-proj-3-tuple(v_535)) then (if not-caught-fail(v_536) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (v_536,2-proj-3-tuple(v_535),true,2-proj-3-tuple(v_544),3-proj-3-tuple(v_544)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {83}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {84}insert statestore(alice,bob,sid,statepack_c(hs_545,cs1,cs2))
    ) | (
        {86}!
        {105}get statestore(=alice,=bob,=sid,statepack_c(hs_546: handshakestate,cs1_547: cipherstate,cs2_548: cipherstate)) in
        {87}let hs_549: handshakestate = handshakestatesetcs(hs_546,cs1_547) in
        {88}let v_550: bitstring = catch-fail(handshakestateunpack(hs_549)) in
        {89}let v_551: bitstring = catch-fail((empty,empty,empty)) in
        {90}let v_552: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_550))) in
        {91}let v_553: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_552))) in
        {92}let v_554: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_553),2-proj-2-tuple(v_553),3-proj-3-tuple(v_552),msg_c(alice,bob,sid))) in
        {93}let v_555: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_552))) in
        {94}let v_556: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_553))) && success?(1-proj-3-tuple(v_552))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then cipherstatepack(1-proj-2-tuple(v_555),increment_nonce(2-proj-2-tuple(v_553))) else fail-any) else fail-any)) in
        {95}let v_557: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_552)) && success?(1-proj-3-tuple(v_552))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then (if not-caught-fail(v_554) then (if not-caught-fail(v_556) then (v_556,v_554) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let v_558: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_557),2-proj-3-tuple(v_552),3-proj-3-tuple(v_552)))) in
        {97}let v_559: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_557)) && success?(symmetricstatepack(1-proj-2-tuple(v_557),2-proj-3-tuple(v_552),3-proj-3-tuple(v_552)))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then symmetricstatepack(1-proj-3-tuple(v_558),2-proj-3-tuple(v_558),hash(3-proj-3-tuple(v_558),2-proj-2-tuple(v_557))) else fail-any) else fail-any)) in
        {98}let v_560: bitstring = catch-fail((if success?(1-proj-7-tuple(v_550)) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then (if not-caught-fail(v_559) then (v_559,2-proj-2-tuple(v_557)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_561: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_560),2-proj-7-tuple(v_550),3-proj-7-tuple(v_550),4-proj-7-tuple(v_550),5-proj-7-tuple(v_550),6-proj-7-tuple(v_550),7-proj-7-tuple(v_550))) in
        {100}let v_562: bitstring = catch-fail(concat3(1-proj-3-tuple(v_551),2-proj-3-tuple(v_551),2-proj-2-tuple(v_560))) in
        {101}let (hs_563: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-7-tuple(v_550))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (v_561,v_562) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {102}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {103}insert statestore(alice,bob,sid,statepack_d(hs_563,handshakestategetcs(hs_563),cs2_548));
        {104}out(pub, message_c)
    ) | (
        {106}!
        {126}get statestore(=alice,=bob,=sid,statepack_d(hs_564: handshakestate,cs1_565: cipherstate,cs2_566: cipherstate)) in
        {107}let hs_567: handshakestate = handshakestatesetcs(hs_564,cs2_566) in
        {108}in(pub, message_d: bitstring);
        {109}let v_568: bitstring = catch-fail(handshakestateunpack(hs_567)) in
        {110}let v_569: bitstring = catch-fail(deconcat3(message_d)) in
        {111}let v_570: bool = catch-fail(true) in
        {112}let v_571: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_568))) in
        {113}let v_572: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {114}let v_573: aead = catch-fail(decrypt(1-proj-2-tuple(v_572),2-proj-2-tuple(v_572),3-proj-3-tuple(v_571),3-proj-3-tuple(v_569))) in
        {115}let v_574: bitstring = catch-fail(aeadunpack(v_573)) in
        {116}let v_575: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {117}let v_576: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_572))) && success?(1-proj-3-tuple(v_571))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then cipherstatepack(1-proj-2-tuple(v_575),increment_nonce(2-proj-2-tuple(v_572))) else fail-any) else fail-any)) in
        {118}let v_577: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_569)) && (success?(3-proj-3-tuple(v_571)) && success?(1-proj-3-tuple(v_571)))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_573) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if not-caught-fail(v_576) then (v_576,3-proj-3-tuple(v_574),1-proj-3-tuple(v_574)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let v_578: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) in
        {120}let v_579: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_569)) && success?(symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then symmetricstatepack(1-proj-3-tuple(v_578),2-proj-3-tuple(v_578),hash(3-proj-3-tuple(v_578),3-proj-3-tuple(v_569))) else fail-any) else fail-any)) in
        {121}let v_580: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_569)) && success?(1-proj-7-tuple(v_568))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if not-caught-fail(v_579) then (v_579,2-proj-3-tuple(v_577),3-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_581: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_580),2-proj-7-tuple(v_568),3-proj-7-tuple(v_568),4-proj-7-tuple(v_568),5-proj-7-tuple(v_568),6-proj-7-tuple(v_568),7-proj-7-tuple(v_568))) in
        {123}let (hs_582: handshakestate,plaintext_d: bitstring,valid_583: bool) = (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-7-tuple(v_568))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if not-caught-fail(v_570) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if (v_570 && 3-proj-3-tuple(v_580)) then (if not-caught-fail(v_581) then (v_581,2-proj-3-tuple(v_580),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {124}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {125}event RecvEnd(valid_583)
    ) | (
        {127}event LeakS(phase0,alice);
        {128}out(pub, key_s(alice))
    ) | (
        {129}phase 1;
        {130}event LeakS(phase1,alice);
        {131}out(pub, key_s(alice))
    )
) | (
    {132}let v_584: key = catch-fail(dhexp(key_s(alice),g)) in
    {133}let s_585: keypair = (if not-caught-fail(v_584) then keypairpack(v_584,key_s(alice)) else fail-any) in
    {134}out(pub, getpublickey(s_585));
    (
        {135}let e_586: keypair = keypairpack(empty,empty) in
        {136}let rs_587: key = empty in
        {137}let re_588: key = empty in
        {138}let v_589: bitstring = catch-fail(hash(somename,empty)) in
        {139}let v_590: key = catch-fail(v_589) in
        {140}let v_591: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {141}let v_592: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any))) in
        {142}let v_593: symmetricstate = catch-fail((if success?((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_592),hash(3-proj-3-tuple(v_592),empty)) else fail-any) else fail-any)) in
        {143}let v_594: bitstring = catch-fail(symmetricstateunpack(v_593)) in
        {144}let v_595: symmetricstate = catch-fail((if success?(getpublickey(s_585)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),getpublickey(s_585))) else fail-any) else fail-any)) in
        {145}let hs_596: handshakestate = (if not-caught-fail(v_593) then (if not-caught-fail(v_595) then handshakestatepack(v_595,s_585,e_586,rs_587,re_588,empty,true) else fail-any) else fail-any) in
        {146}insert statestore(alice,charlie,sid,statepack_a(hs_596))
    ) | (
        {169}get statestore(=alice,=charlie,=sid,statepack_a(hs_597: handshakestate)) in
        {147}let v_598: bitstring = catch-fail(handshakestateunpack(hs_597)) in
        {148}let v_599: bitstring = catch-fail((empty,empty,empty)) in
        {149}let v_600: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {150}let v_601: keypair = catch-fail((if not-caught-fail(v_600) then keypairpack(v_600,key_e(alice,charlie,sid)) else fail-any)) in
        {151}let v_602: bitstring = catch-fail(getpublickey(v_601)) in
        {152}let v_603: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_598))) in
        {153}let v_604: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_598)) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then symmetricstatepack(1-proj-3-tuple(v_603),2-proj-3-tuple(v_603),hash(3-proj-3-tuple(v_603),v_602)) else fail-any) else fail-any)) in
        {154}let v_605: bitstring = catch-fail(symmetricstateunpack(v_604)) in
        {155}let v_606: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_605))) in
        {156}let v_607: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_606),2-proj-2-tuple(v_606),3-proj-3-tuple(v_605),msg_a(alice,charlie,sid))) in
        {157}let v_608: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_605))) in
        {158}let v_609: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_606))) && success?(1-proj-3-tuple(v_605))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then cipherstatepack(1-proj-2-tuple(v_608),increment_nonce(2-proj-2-tuple(v_606))) else fail-any) else fail-any)) in
        {159}let v_610: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_605)) && success?(1-proj-3-tuple(v_605))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then (if not-caught-fail(v_607) then (if not-caught-fail(v_609) then (v_609,v_607) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {160}let v_611: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_610),2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)))) in
        {161}let v_612: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_610)) && success?(symmetricstatepack(1-proj-2-tuple(v_610),2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),2-proj-2-tuple(v_610))) else fail-any) else fail-any)) in
        {162}let v_613: bitstring = catch-fail((if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then (if not-caught-fail(v_612) then (v_612,2-proj-2-tuple(v_610)) else fail-any) else fail-any) else fail-any)) in
        {163}let v_614: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_613),2-proj-7-tuple(v_598),v_601,4-proj-7-tuple(v_598),5-proj-7-tuple(v_598),6-proj-7-tuple(v_598),7-proj-7-tuple(v_598))) in
        {164}let v_615: bitstring = catch-fail(concat3(v_602,2-proj-3-tuple(v_599),2-proj-2-tuple(v_613))) in
        {165}let (hs_616: handshakestate,message_a_617: bitstring) = (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-7-tuple(v_598))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (if not-caught-fail(v_604) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then (v_614,v_615) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {166}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {167}insert statestore(alice,charlie,sid,statepack_b(hs_616));
        {168}out(pub, message_a_617)
    ) | (
        {213}get statestore(=alice,=charlie,=sid,statepack_b(hs_618: handshakestate)) in
        {170}in(pub, message_b_619: bitstring);
        {171}let v_620: bitstring = catch-fail(handshakestateunpack(hs_618)) in
        {172}let v_621: bitstring = catch-fail(deconcat3(message_b_619)) in
        {173}let v_622: bool = catch-fail(true) in
        {174}let v_623: key = catch-fail(1-proj-3-tuple(v_621)) in
        {175}let v_624: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_620))) in
        {176}let v_625: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_620)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then symmetricstatepack(1-proj-3-tuple(v_624),2-proj-3-tuple(v_624),hash(3-proj-3-tuple(v_624),v_623)) else fail-any) else fail-any)) in
        {177}let v_626: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_620))) in
        {178}let v_627: bitstring = catch-fail(symmetricstateunpack(v_625)) in
        {179}let v_628: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_627),(if success?(3-proj-7-tuple(v_620)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then dhexp(2-proj-2-tuple(v_626),v_623) else fail-any) else fail-any))) in
        {180}let v_629: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_627),(if success?(3-proj-7-tuple(v_620)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then dhexp(2-proj-2-tuple(v_626),v_623) else fail-any) else fail-any))) in
        {181}let v_630: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_627),(if success?(3-proj-7-tuple(v_620)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then dhexp(2-proj-2-tuple(v_626),v_623) else fail-any) else fail-any))) in
        {182}let v_631: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_620)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then dhexp(2-proj-2-tuple(v_626),v_623) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_627))) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (v_628,v_629,v_630) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {183}let v_632: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_620)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then dhexp(2-proj-2-tuple(v_626),v_623) else fail-any) else fail-any)) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_631)) then cipherstatepack(2-proj-3-tuple(v_631),minnonce) else fail-any),1-proj-3-tuple(v_631),3-proj-3-tuple(v_627)) else fail-any) else fail-any) else fail-any)) in
        {184}let v_633: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_620))) in
        {185}let v_634: bitstring = catch-fail(symmetricstateunpack(v_632)) in
        {186}let v_635: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_634),(if success?(2-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_623) else fail-any) else fail-any))) in
        {187}let v_636: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_634),(if success?(2-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_623) else fail-any) else fail-any))) in
        {188}let v_637: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_634),(if success?(2-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_623) else fail-any) else fail-any))) in
        {189}let v_638: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_623) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_634))) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (if not-caught-fail(v_637) then (v_635,v_636,v_637) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_639: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_620)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_623) else fail-any) else fail-any)) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_638)) then cipherstatepack(2-proj-3-tuple(v_638),minnonce) else fail-any),1-proj-3-tuple(v_638),3-proj-3-tuple(v_634)) else fail-any) else fail-any) else fail-any)) in
        {191}let v_640: bitstring = catch-fail(symmetricstateunpack(v_639)) in
        {192}let v_641: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {193}let v_642: aead = catch-fail(decrypt(1-proj-2-tuple(v_641),2-proj-2-tuple(v_641),3-proj-3-tuple(v_640),3-proj-3-tuple(v_621))) in
        {194}let v_643: bitstring = catch-fail(aeadunpack(v_642)) in
        {195}let v_644: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {196}let v_645: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_641))) && success?(1-proj-3-tuple(v_640))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then cipherstatepack(1-proj-2-tuple(v_644),increment_nonce(2-proj-2-tuple(v_641))) else fail-any) else fail-any)) in
        {197}let v_646: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_621)) && (success?(3-proj-3-tuple(v_640)) && success?(1-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-2-tuple(v_641))))) then (if not-caught-fail(v_642) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if not-caught-fail(v_645) then (v_645,3-proj-3-tuple(v_643),1-proj-3-tuple(v_643)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {198}let v_647: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) in
        {199}let v_648: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_621)) && success?(symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),3-proj-3-tuple(v_621))) else fail-any) else fail-any)) in
        {200}let v_649: bitstring = catch-fail((if success?(3-proj-3-tuple(v_621)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if not-caught-fail(v_648) then (v_648,2-proj-3-tuple(v_646),3-proj-3-tuple(v_646)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {201}let v_650: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_649),2-proj-7-tuple(v_620),3-proj-7-tuple(v_620),4-proj-7-tuple(v_620),v_623,6-proj-7-tuple(v_620),7-proj-7-tuple(v_620))) in
        {202}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_649))) in
        {203}let v_652: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_651),zero)) in
        {204}let v_653: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_651),zero)) in
        {205}let v_654: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_651),zero)) in
        {206}let v_655: bitstring = catch-fail((if success?(2-proj-3-tuple(v_651)) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (v_652,v_653,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {207}let v_656: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_655)) then cipherstatepack(1-proj-3-tuple(v_655),minnonce) else fail-any)) in
        {208}let v_657: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_655)) then cipherstatepack(2-proj-3-tuple(v_655),minnonce) else fail-any)) in
        {209}let v_658: bitstring = catch-fail((if success?(1-proj-3-tuple(v_649)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (1-proj-3-tuple(v_649),v_656,v_657) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {210}let (hs_659: handshakestate,plaintext_b_660: bitstring,valid_661: bool,cs1_662: cipherstate,cs2_663: cipherstate) = (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-7-tuple(v_620))))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if not-caught-fail(v_622) then (if not-caught-fail(v_623) then (if not-caught-fail(v_625) then (if not-caught-fail(v_632) then (if not-caught-fail(v_639) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if (v_622 && 3-proj-3-tuple(v_649)) then (if not-caught-fail(v_650) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (v_650,2-proj-3-tuple(v_649),true,2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {211}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_660);
        {212}insert statestore(alice,charlie,sid,statepack_c(hs_659,cs1_662,cs2_663))
    ) | (
        {214}!
        {233}get statestore(=alice,=charlie,=sid,statepack_c(hs_664: handshakestate,cs1_665: cipherstate,cs2_666: cipherstate)) in
        {215}let hs_667: handshakestate = handshakestatesetcs(hs_664,cs1_665) in
        {216}let v_668: bitstring = catch-fail(handshakestateunpack(hs_667)) in
        {217}let v_669: bitstring = catch-fail((empty,empty,empty)) in
        {218}let v_670: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_668))) in
        {219}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {220}let v_672: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_671),2-proj-2-tuple(v_671),3-proj-3-tuple(v_670),msg_c(alice,charlie,sid))) in
        {221}let v_673: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {222}let v_674: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_671))) && success?(1-proj-3-tuple(v_670))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then cipherstatepack(1-proj-2-tuple(v_673),increment_nonce(2-proj-2-tuple(v_671))) else fail-any) else fail-any)) in
        {223}let v_675: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_670)) && success?(1-proj-3-tuple(v_670))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then (if not-caught-fail(v_672) then (if not-caught-fail(v_674) then (v_674,v_672) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {224}let v_676: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_675),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) in
        {225}let v_677: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_675)) && success?(symmetricstatepack(1-proj-2-tuple(v_675),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then symmetricstatepack(1-proj-3-tuple(v_676),2-proj-3-tuple(v_676),hash(3-proj-3-tuple(v_676),2-proj-2-tuple(v_675))) else fail-any) else fail-any)) in
        {226}let v_678: bitstring = catch-fail((if success?(1-proj-7-tuple(v_668)) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then (if not-caught-fail(v_677) then (v_677,2-proj-2-tuple(v_675)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {227}let v_679: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_678),2-proj-7-tuple(v_668),3-proj-7-tuple(v_668),4-proj-7-tuple(v_668),5-proj-7-tuple(v_668),6-proj-7-tuple(v_668),7-proj-7-tuple(v_668))) in
        {228}let v_680: bitstring = catch-fail(concat3(1-proj-3-tuple(v_669),2-proj-3-tuple(v_669),2-proj-2-tuple(v_678))) in
        {229}let (hs_681: handshakestate,message_c_682: bitstring) = (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-7-tuple(v_668))))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (v_679,v_680) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {230}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {231}insert statestore(alice,charlie,sid,statepack_d(hs_681,handshakestategetcs(hs_681),cs2_666));
        {232}out(pub, message_c_682)
    ) | (
        {234}!
        {254}get statestore(=alice,=charlie,=sid,statepack_d(hs_683: handshakestate,cs1_684: cipherstate,cs2_685: cipherstate)) in
        {235}let hs_686: handshakestate = handshakestatesetcs(hs_683,cs2_685) in
        {236}in(pub, message_d_687: bitstring);
        {237}let v_688: bitstring = catch-fail(handshakestateunpack(hs_686)) in
        {238}let v_689: bitstring = catch-fail(deconcat3(message_d_687)) in
        {239}let v_690: bool = catch-fail(true) in
        {240}let v_691: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_688))) in
        {241}let v_692: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_691))) in
        {242}let v_693: aead = catch-fail(decrypt(1-proj-2-tuple(v_692),2-proj-2-tuple(v_692),3-proj-3-tuple(v_691),3-proj-3-tuple(v_689))) in
        {243}let v_694: bitstring = catch-fail(aeadunpack(v_693)) in
        {244}let v_695: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_691))) in
        {245}let v_696: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_692))) && success?(1-proj-3-tuple(v_691))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then cipherstatepack(1-proj-2-tuple(v_695),increment_nonce(2-proj-2-tuple(v_692))) else fail-any) else fail-any)) in
        {246}let v_697: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_689)) && (success?(3-proj-3-tuple(v_691)) && success?(1-proj-3-tuple(v_691)))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then (if not-caught-fail(v_693) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if not-caught-fail(v_696) then (v_696,3-proj-3-tuple(v_694),1-proj-3-tuple(v_694)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_698: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_697),2-proj-3-tuple(v_691),3-proj-3-tuple(v_691)))) in
        {248}let v_699: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_689)) && success?(symmetricstatepack(1-proj-3-tuple(v_697),2-proj-3-tuple(v_691),3-proj-3-tuple(v_691)))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then symmetricstatepack(1-proj-3-tuple(v_698),2-proj-3-tuple(v_698),hash(3-proj-3-tuple(v_698),3-proj-3-tuple(v_689))) else fail-any) else fail-any)) in
        {249}let v_700: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_689)) && success?(1-proj-7-tuple(v_688))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if not-caught-fail(v_699) then (v_699,2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_701: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_700),2-proj-7-tuple(v_688),3-proj-7-tuple(v_688),4-proj-7-tuple(v_688),5-proj-7-tuple(v_688),6-proj-7-tuple(v_688),7-proj-7-tuple(v_688))) in
        {251}let (hs_702: handshakestate,plaintext_d_703: bitstring,valid_704: bool) = (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-7-tuple(v_688))))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if not-caught-fail(v_690) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if (v_690 && 3-proj-3-tuple(v_700)) then (if not-caught-fail(v_701) then (v_701,2-proj-3-tuple(v_700),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {252}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_703);
        {253}event RecvEnd(valid_704)
    ) | (
        {255}event LeakS(phase0,alice);
        {256}out(pub, key_s(alice))
    ) | (
        {257}phase 1;
        {258}event LeakS(phase1,alice);
        {259}out(pub, key_s(alice))
    )
) | (
    {260}let s_705: keypair = keypairpack(empty,empty) in
    (
        {261}let e_706: keypair = keypairpack(empty,empty) in
        {262}let v_707: key = catch-fail(dhexp(key_s(alice),g)) in
        {263}let rs_708: key = getpublickey((if not-caught-fail(v_707) then keypairpack(v_707,key_s(alice)) else fail-any)) in
        {264}let re_709: key = empty in
        {265}let v_710: bitstring = catch-fail(hash(somename,empty)) in
        {266}let v_711: key = catch-fail(v_710) in
        {267}let v_712: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {268}let v_713: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (if not-caught-fail(v_712) then symmetricstatepack(v_712,v_711,v_710) else fail-any) else fail-any) else fail-any))) in
        {269}let v_714: symmetricstate = catch-fail((if success?((if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (if not-caught-fail(v_712) then symmetricstatepack(v_712,v_711,v_710) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then symmetricstatepack(1-proj-3-tuple(v_713),2-proj-3-tuple(v_713),hash(3-proj-3-tuple(v_713),empty)) else fail-any) else fail-any)) in
        {270}let v_715: bitstring = catch-fail(symmetricstateunpack(v_714)) in
        {271}let v_716: symmetricstate = catch-fail((if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then symmetricstatepack(1-proj-3-tuple(v_715),2-proj-3-tuple(v_715),hash(3-proj-3-tuple(v_715),rs_708)) else fail-any)) in
        {272}let hs_717: handshakestate = (if not-caught-fail(v_714) then (if not-caught-fail(v_716) then handshakestatepack(v_716,s_705,e_706,rs_708,re_709,empty,false) else fail-any) else fail-any) in
        {273}insert statestore(bob,alice,sid,statepack_a(hs_717))
    ) | (
        {295}get statestore(=bob,=alice,=sid,statepack_a(hs_718: handshakestate)) in
        {274}in(pub, message_a_719: bitstring);
        {275}let v_720: bitstring = catch-fail(handshakestateunpack(hs_718)) in
        {276}let v_721: bitstring = catch-fail(deconcat3(message_a_719)) in
        {277}let v_722: bool = catch-fail(true) in
        {278}let v_723: key = catch-fail(1-proj-3-tuple(v_721)) in
        {279}let v_724: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_720))) in
        {280}let v_725: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_720)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then symmetricstatepack(1-proj-3-tuple(v_724),2-proj-3-tuple(v_724),hash(3-proj-3-tuple(v_724),v_723)) else fail-any) else fail-any)) in
        {281}let v_726: bitstring = catch-fail(symmetricstateunpack(v_725)) in
        {282}let v_727: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {283}let v_728: aead = catch-fail(decrypt(1-proj-2-tuple(v_727),2-proj-2-tuple(v_727),3-proj-3-tuple(v_726),3-proj-3-tuple(v_721))) in
        {284}let v_729: bitstring = catch-fail(aeadunpack(v_728)) in
        {285}let v_730: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {286}let v_731: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_727))) && success?(1-proj-3-tuple(v_726))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then cipherstatepack(1-proj-2-tuple(v_730),increment_nonce(2-proj-2-tuple(v_727))) else fail-any) else fail-any)) in
        {287}let v_732: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_721)) && (success?(3-proj-3-tuple(v_726)) && success?(1-proj-3-tuple(v_726)))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-2-tuple(v_727))))) then (if not-caught-fail(v_728) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if not-caught-fail(v_731) then (v_731,3-proj-3-tuple(v_729),1-proj-3-tuple(v_729)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {288}let v_733: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) in
        {289}let v_734: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_721)) && success?(symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_733),hash(3-proj-3-tuple(v_733),3-proj-3-tuple(v_721))) else fail-any) else fail-any)) in
        {290}let v_735: bitstring = catch-fail((if success?(3-proj-3-tuple(v_721)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if not-caught-fail(v_734) then (v_734,2-proj-3-tuple(v_732),3-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {291}let v_736: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_735),2-proj-7-tuple(v_720),3-proj-7-tuple(v_720),4-proj-7-tuple(v_720),v_723,6-proj-7-tuple(v_720),7-proj-7-tuple(v_720))) in
        {292}let (hs_737: handshakestate,plaintext_a: bitstring,valid_738: bool) = (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-7-tuple(v_720))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (if not-caught-fail(v_725) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if (v_722 && 3-proj-3-tuple(v_735)) then (if not-caught-fail(v_736) then (v_736,2-proj-3-tuple(v_735),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {293}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {294}insert statestore(bob,alice,sid,statepack_b(hs_737))
    ) | (
        {340}get statestore(=bob,=alice,=sid,statepack_b(hs_739: handshakestate)) in
        {296}let v_740: bitstring = catch-fail(handshakestateunpack(hs_739)) in
        {297}let v_741: bitstring = catch-fail((empty,empty,empty)) in
        {298}let v_742: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {299}let v_743: keypair = catch-fail((if not-caught-fail(v_742) then keypairpack(v_742,key_e(bob,alice,sid)) else fail-any)) in
        {300}let v_744: bitstring = catch-fail(getpublickey(v_743)) in
        {301}let v_745: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_740))) in
        {302}let v_746: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_740)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then symmetricstatepack(1-proj-3-tuple(v_745),2-proj-3-tuple(v_745),hash(3-proj-3-tuple(v_745),v_744)) else fail-any) else fail-any)) in
        {303}let v_747: bitstring = catch-fail(keypairunpack(v_743)) in
        {304}let v_748: bitstring = catch-fail(symmetricstateunpack(v_746)) in
        {305}let v_749: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_748),(if success?(5-proj-7-tuple(v_740)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_740)) else fail-any) else fail-any))) in
        {306}let v_750: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_748),(if success?(5-proj-7-tuple(v_740)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_740)) else fail-any) else fail-any))) in
        {307}let v_751: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_748),(if success?(5-proj-7-tuple(v_740)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_740)) else fail-any) else fail-any))) in
        {308}let v_752: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_740)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_740)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_748))) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (v_749,v_750,v_751) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {309}let v_753: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_740)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),5-proj-7-tuple(v_740)) else fail-any) else fail-any)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_752)) then cipherstatepack(2-proj-3-tuple(v_752),minnonce) else fail-any),1-proj-3-tuple(v_752),3-proj-3-tuple(v_748)) else fail-any) else fail-any) else fail-any)) in
        {310}let v_754: bitstring = catch-fail(keypairunpack(v_743)) in
        {311}let v_755: bitstring = catch-fail(symmetricstateunpack(v_753)) in
        {312}let v_756: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_755),(if success?(4-proj-7-tuple(v_740)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_740)) else fail-any) else fail-any))) in
        {313}let v_757: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_755),(if success?(4-proj-7-tuple(v_740)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_740)) else fail-any) else fail-any))) in
        {314}let v_758: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_755),(if success?(4-proj-7-tuple(v_740)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_740)) else fail-any) else fail-any))) in
        {315}let v_759: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_740)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_740)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_755))) then (if not-caught-fail(v_756) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (v_756,v_757,v_758) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_760: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_740)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_740)) else fail-any) else fail-any)) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_759)) then cipherstatepack(2-proj-3-tuple(v_759),minnonce) else fail-any),1-proj-3-tuple(v_759),3-proj-3-tuple(v_755)) else fail-any) else fail-any) else fail-any)) in
        {317}let v_761: bitstring = catch-fail(symmetricstateunpack(v_760)) in
        {318}let v_762: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {319}let v_763: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_762),2-proj-2-tuple(v_762),3-proj-3-tuple(v_761),msg_b(bob,alice,sid))) in
        {320}let v_764: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {321}let v_765: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_762))) && success?(1-proj-3-tuple(v_761))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then cipherstatepack(1-proj-2-tuple(v_764),increment_nonce(2-proj-2-tuple(v_762))) else fail-any) else fail-any)) in
        {322}let v_766: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_761)) && success?(1-proj-3-tuple(v_761))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_763) then (if not-caught-fail(v_765) then (v_765,v_763) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {323}let v_767: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_766),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) in
        {324}let v_768: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_766)) && success?(symmetricstatepack(1-proj-2-tuple(v_766),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then symmetricstatepack(1-proj-3-tuple(v_767),2-proj-3-tuple(v_767),hash(3-proj-3-tuple(v_767),2-proj-2-tuple(v_766))) else fail-any) else fail-any)) in
        {325}let v_769: bitstring = catch-fail((if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then (if not-caught-fail(v_768) then (v_768,2-proj-2-tuple(v_766)) else fail-any) else fail-any) else fail-any)) in
        {326}let v_770: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_769),2-proj-7-tuple(v_740),v_743,4-proj-7-tuple(v_740),5-proj-7-tuple(v_740),6-proj-7-tuple(v_740),7-proj-7-tuple(v_740))) in
        {327}let v_771: bitstring = catch-fail(concat3(v_744,2-proj-3-tuple(v_741),2-proj-2-tuple(v_769))) in
        {328}let v_772: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_769))) in
        {329}let v_773: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_772),zero)) in
        {330}let v_774: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_772),zero)) in
        {331}let v_775: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_772),zero)) in
        {332}let v_776: bitstring = catch-fail((if success?(2-proj-3-tuple(v_772)) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (v_773,v_774,v_775) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let v_777: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_776)) then cipherstatepack(1-proj-3-tuple(v_776),minnonce) else fail-any)) in
        {334}let v_778: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_776)) then cipherstatepack(2-proj-3-tuple(v_776),minnonce) else fail-any)) in
        {335}let v_779: bitstring = catch-fail((if success?(1-proj-2-tuple(v_769)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (1-proj-2-tuple(v_769),v_777,v_778) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {336}let (hs_780: handshakestate,message_b_781: bitstring,cs1_782: cipherstate,cs2_783: cipherstate) = (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-7-tuple(v_740))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_743) then (if not-caught-fail(v_744) then (if not-caught-fail(v_746) then (if not-caught-fail(v_753) then (if not-caught-fail(v_760) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then (if not-caught-fail(v_770) then (if not-caught-fail(v_771) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (v_770,v_771,2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {337}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {338}insert statestore(bob,alice,sid,statepack_c(hs_780,cs1_782,cs2_783));
        {339}out(pub, message_b_781)
    ) | (
        {341}!
        {361}get statestore(=bob,=alice,=sid,statepack_c(hs_784: handshakestate,cs1_785: cipherstate,cs2_786: cipherstate)) in
        {342}let hs_787: handshakestate = handshakestatesetcs(hs_784,cs1_785) in
        {343}in(pub, message_c_788: bitstring);
        {344}let v_789: bitstring = catch-fail(handshakestateunpack(hs_787)) in
        {345}let v_790: bitstring = catch-fail(deconcat3(message_c_788)) in
        {346}let v_791: bool = catch-fail(true) in
        {347}let v_792: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_789))) in
        {348}let v_793: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_792))) in
        {349}let v_794: aead = catch-fail(decrypt(1-proj-2-tuple(v_793),2-proj-2-tuple(v_793),3-proj-3-tuple(v_792),3-proj-3-tuple(v_790))) in
        {350}let v_795: bitstring = catch-fail(aeadunpack(v_794)) in
        {351}let v_796: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_792))) in
        {352}let v_797: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_793))) && success?(1-proj-3-tuple(v_792))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then cipherstatepack(1-proj-2-tuple(v_796),increment_nonce(2-proj-2-tuple(v_793))) else fail-any) else fail-any)) in
        {353}let v_798: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_790)) && (success?(3-proj-3-tuple(v_792)) && success?(1-proj-3-tuple(v_792)))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-2-tuple(v_793))))) then (if not-caught-fail(v_794) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if not-caught-fail(v_797) then (v_797,3-proj-3-tuple(v_795),1-proj-3-tuple(v_795)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {354}let v_799: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_798),2-proj-3-tuple(v_792),3-proj-3-tuple(v_792)))) in
        {355}let v_800: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_790)) && success?(symmetricstatepack(1-proj-3-tuple(v_798),2-proj-3-tuple(v_792),3-proj-3-tuple(v_792)))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack(1-proj-3-tuple(v_799),2-proj-3-tuple(v_799),hash(3-proj-3-tuple(v_799),3-proj-3-tuple(v_790))) else fail-any) else fail-any)) in
        {356}let v_801: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_790)) && success?(1-proj-7-tuple(v_789))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then (if not-caught-fail(v_800) then (v_800,2-proj-3-tuple(v_798),3-proj-3-tuple(v_798)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {357}let v_802: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_801),2-proj-7-tuple(v_789),3-proj-7-tuple(v_789),4-proj-7-tuple(v_789),5-proj-7-tuple(v_789),6-proj-7-tuple(v_789),7-proj-7-tuple(v_789))) in
        {358}let (hs_803: handshakestate,plaintext_c: bitstring,valid_804: bool) = (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-7-tuple(v_789))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_791) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (v_791 && 3-proj-3-tuple(v_801)) then (if not-caught-fail(v_802) then (v_802,2-proj-3-tuple(v_801),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {359}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {360}insert statestore(bob,alice,sid,statepack_d(hs_803,handshakestategetcs(hs_803),cs2_786))
    ) | (
        {362}!
        {380}get statestore(=bob,=alice,=sid,statepack_d(hs_805: handshakestate,cs1_806: cipherstate,cs2_807: cipherstate)) in
        {363}let hs_808: handshakestate = handshakestatesetcs(hs_805,cs2_807) in
        {364}let v_809: bitstring = catch-fail(handshakestateunpack(hs_808)) in
        {365}let v_810: bitstring = catch-fail((empty,empty,empty)) in
        {366}let v_811: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_809))) in
        {367}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_811))) in
        {368}let v_813: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_812),2-proj-2-tuple(v_812),3-proj-3-tuple(v_811),msg_d(bob,alice,sid))) in
        {369}let v_814: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_811))) in
        {370}let v_815: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_812))) && success?(1-proj-3-tuple(v_811))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then cipherstatepack(1-proj-2-tuple(v_814),increment_nonce(2-proj-2-tuple(v_812))) else fail-any) else fail-any)) in
        {371}let v_816: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_811)) && success?(1-proj-3-tuple(v_811))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then (if not-caught-fail(v_813) then (if not-caught-fail(v_815) then (v_815,v_813) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_817: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_816),2-proj-3-tuple(v_811),3-proj-3-tuple(v_811)))) in
        {373}let v_818: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_816)) && success?(symmetricstatepack(1-proj-2-tuple(v_816),2-proj-3-tuple(v_811),3-proj-3-tuple(v_811)))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then symmetricstatepack(1-proj-3-tuple(v_817),2-proj-3-tuple(v_817),hash(3-proj-3-tuple(v_817),2-proj-2-tuple(v_816))) else fail-any) else fail-any)) in
        {374}let v_819: bitstring = catch-fail((if success?(1-proj-7-tuple(v_809)) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then (if not-caught-fail(v_818) then (v_818,2-proj-2-tuple(v_816)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_820: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_819),2-proj-7-tuple(v_809),3-proj-7-tuple(v_809),4-proj-7-tuple(v_809),5-proj-7-tuple(v_809),6-proj-7-tuple(v_809),7-proj-7-tuple(v_809))) in
        {376}let v_821: bitstring = catch-fail(concat3(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),2-proj-2-tuple(v_819))) in
        {377}let (hs_822: handshakestate,message_d_823: bitstring) = (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-7-tuple(v_809))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-2-tuple(v_819))))) then (if not-caught-fail(v_820) then (if not-caught-fail(v_821) then (v_820,v_821) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {378}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {379}out(pub, message_d_823)
    ) | (
        {381}event LeakS(phase0,bob);
        {382}out(pub, key_s(bob))
    ) | (
        {383}phase 1;
        {384}event LeakS(phase1,bob);
        {385}out(pub, key_s(bob))
    )
) | (
    {386}let s_824: keypair = keypairpack(empty,empty) in
    (
        {387}let e_825: keypair = keypairpack(empty,empty) in
        {388}let v_826: key = catch-fail(dhexp(key_s(charlie),g)) in
        {389}let rs_827: key = getpublickey((if not-caught-fail(v_826) then keypairpack(v_826,key_s(charlie)) else fail-any)) in
        {390}let re_828: key = empty in
        {391}let v_829: bitstring = catch-fail(hash(somename,empty)) in
        {392}let v_830: key = catch-fail(v_829) in
        {393}let v_831: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {394}let v_832: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then symmetricstatepack(v_831,v_830,v_829) else fail-any) else fail-any) else fail-any))) in
        {395}let v_833: symmetricstate = catch-fail((if success?((if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then symmetricstatepack(v_831,v_830,v_829) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then symmetricstatepack(1-proj-3-tuple(v_832),2-proj-3-tuple(v_832),hash(3-proj-3-tuple(v_832),empty)) else fail-any) else fail-any)) in
        {396}let v_834: bitstring = catch-fail(symmetricstateunpack(v_833)) in
        {397}let v_835: symmetricstate = catch-fail((if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_834),hash(3-proj-3-tuple(v_834),rs_827)) else fail-any)) in
        {398}let hs_836: handshakestate = (if not-caught-fail(v_833) then (if not-caught-fail(v_835) then handshakestatepack(v_835,s_824,e_825,rs_827,re_828,empty,false) else fail-any) else fail-any) in
        {399}insert statestore(bob,charlie,sid,statepack_a(hs_836))
    ) | (
        {421}get statestore(=bob,=charlie,=sid,statepack_a(hs_837: handshakestate)) in
        {400}in(pub, message_a_838: bitstring);
        {401}let v_839: bitstring = catch-fail(handshakestateunpack(hs_837)) in
        {402}let v_840: bitstring = catch-fail(deconcat3(message_a_838)) in
        {403}let v_841: bool = catch-fail(true) in
        {404}let v_842: key = catch-fail(1-proj-3-tuple(v_840)) in
        {405}let v_843: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_839))) in
        {406}let v_844: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_839)) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then symmetricstatepack(1-proj-3-tuple(v_843),2-proj-3-tuple(v_843),hash(3-proj-3-tuple(v_843),v_842)) else fail-any) else fail-any)) in
        {407}let v_845: bitstring = catch-fail(symmetricstateunpack(v_844)) in
        {408}let v_846: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {409}let v_847: aead = catch-fail(decrypt(1-proj-2-tuple(v_846),2-proj-2-tuple(v_846),3-proj-3-tuple(v_845),3-proj-3-tuple(v_840))) in
        {410}let v_848: bitstring = catch-fail(aeadunpack(v_847)) in
        {411}let v_849: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {412}let v_850: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_846))) && success?(1-proj-3-tuple(v_845))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-2-tuple(v_849))))) then cipherstatepack(1-proj-2-tuple(v_849),increment_nonce(2-proj-2-tuple(v_846))) else fail-any) else fail-any)) in
        {413}let v_851: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_840)) && (success?(3-proj-3-tuple(v_845)) && success?(1-proj-3-tuple(v_845)))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then (if not-caught-fail(v_847) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if not-caught-fail(v_850) then (v_850,3-proj-3-tuple(v_848),1-proj-3-tuple(v_848)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {414}let v_852: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_851),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) in
        {415}let v_853: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_840)) && success?(symmetricstatepack(1-proj-3-tuple(v_851),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then symmetricstatepack(1-proj-3-tuple(v_852),2-proj-3-tuple(v_852),hash(3-proj-3-tuple(v_852),3-proj-3-tuple(v_840))) else fail-any) else fail-any)) in
        {416}let v_854: bitstring = catch-fail((if success?(3-proj-3-tuple(v_840)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if not-caught-fail(v_853) then (v_853,2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {417}let v_855: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_854),2-proj-7-tuple(v_839),3-proj-7-tuple(v_839),4-proj-7-tuple(v_839),v_842,6-proj-7-tuple(v_839),7-proj-7-tuple(v_839))) in
        {418}let (hs_856: handshakestate,plaintext_a_857: bitstring,valid_858: bool) = (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-7-tuple(v_839))))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then (if not-caught-fail(v_841) then (if not-caught-fail(v_842) then (if not-caught-fail(v_844) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if (v_841 && 3-proj-3-tuple(v_854)) then (if not-caught-fail(v_855) then (v_855,2-proj-3-tuple(v_854),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {419}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_857);
        {420}insert statestore(bob,charlie,sid,statepack_b(hs_856))
    ) | (
        {466}get statestore(=bob,=charlie,=sid,statepack_b(hs_859: handshakestate)) in
        {422}let v_860: bitstring = catch-fail(handshakestateunpack(hs_859)) in
        {423}let v_861: bitstring = catch-fail((empty,empty,empty)) in
        {424}let v_862: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {425}let v_863: keypair = catch-fail((if not-caught-fail(v_862) then keypairpack(v_862,key_e(bob,charlie,sid)) else fail-any)) in
        {426}let v_864: bitstring = catch-fail(getpublickey(v_863)) in
        {427}let v_865: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_860))) in
        {428}let v_866: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_860)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_865),hash(3-proj-3-tuple(v_865),v_864)) else fail-any) else fail-any)) in
        {429}let v_867: bitstring = catch-fail(keypairunpack(v_863)) in
        {430}let v_868: bitstring = catch-fail(symmetricstateunpack(v_866)) in
        {431}let v_869: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_868),(if success?(5-proj-7-tuple(v_860)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_860)) else fail-any) else fail-any))) in
        {432}let v_870: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_868),(if success?(5-proj-7-tuple(v_860)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_860)) else fail-any) else fail-any))) in
        {433}let v_871: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_868),(if success?(5-proj-7-tuple(v_860)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_860)) else fail-any) else fail-any))) in
        {434}let v_872: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_860)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_860)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_868))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then (v_869,v_870,v_871) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {435}let v_873: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_860)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_860)) else fail-any) else fail-any)) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_872)) then cipherstatepack(2-proj-3-tuple(v_872),minnonce) else fail-any),1-proj-3-tuple(v_872),3-proj-3-tuple(v_868)) else fail-any) else fail-any) else fail-any)) in
        {436}let v_874: bitstring = catch-fail(keypairunpack(v_863)) in
        {437}let v_875: bitstring = catch-fail(symmetricstateunpack(v_873)) in
        {438}let v_876: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_875),(if success?(4-proj-7-tuple(v_860)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),4-proj-7-tuple(v_860)) else fail-any) else fail-any))) in
        {439}let v_877: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_875),(if success?(4-proj-7-tuple(v_860)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),4-proj-7-tuple(v_860)) else fail-any) else fail-any))) in
        {440}let v_878: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_875),(if success?(4-proj-7-tuple(v_860)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),4-proj-7-tuple(v_860)) else fail-any) else fail-any))) in
        {441}let v_879: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_860)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),4-proj-7-tuple(v_860)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_875))) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then (if not-caught-fail(v_878) then (v_876,v_877,v_878) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {442}let v_880: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_860)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),4-proj-7-tuple(v_860)) else fail-any) else fail-any)) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_879)) then cipherstatepack(2-proj-3-tuple(v_879),minnonce) else fail-any),1-proj-3-tuple(v_879),3-proj-3-tuple(v_875)) else fail-any) else fail-any) else fail-any)) in
        {443}let v_881: bitstring = catch-fail(symmetricstateunpack(v_880)) in
        {444}let v_882: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {445}let v_883: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_882),2-proj-2-tuple(v_882),3-proj-3-tuple(v_881),msg_b(bob,charlie,sid))) in
        {446}let v_884: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {447}let v_885: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_882))) && success?(1-proj-3-tuple(v_881))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then cipherstatepack(1-proj-2-tuple(v_884),increment_nonce(2-proj-2-tuple(v_882))) else fail-any) else fail-any)) in
        {448}let v_886: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_881)) && success?(1-proj-3-tuple(v_881))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-2-tuple(v_882))))) then (if not-caught-fail(v_883) then (if not-caught-fail(v_885) then (v_885,v_883) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {449}let v_887: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_886),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) in
        {450}let v_888: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_886)) && success?(symmetricstatepack(1-proj-2-tuple(v_886),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_887),hash(3-proj-3-tuple(v_887),2-proj-2-tuple(v_886))) else fail-any) else fail-any)) in
        {451}let v_889: bitstring = catch-fail((if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then (if not-caught-fail(v_888) then (v_888,2-proj-2-tuple(v_886)) else fail-any) else fail-any) else fail-any)) in
        {452}let v_890: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_889),2-proj-7-tuple(v_860),v_863,4-proj-7-tuple(v_860),5-proj-7-tuple(v_860),6-proj-7-tuple(v_860),7-proj-7-tuple(v_860))) in
        {453}let v_891: bitstring = catch-fail(concat3(v_864,2-proj-3-tuple(v_861),2-proj-2-tuple(v_889))) in
        {454}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_889))) in
        {455}let v_893: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_892),zero)) in
        {456}let v_894: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_892),zero)) in
        {457}let v_895: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_892),zero)) in
        {458}let v_896: bitstring = catch-fail((if success?(2-proj-3-tuple(v_892)) then (if not-caught-fail(v_893) then (if not-caught-fail(v_894) then (if not-caught-fail(v_895) then (v_893,v_894,v_895) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_897: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_896)) then cipherstatepack(1-proj-3-tuple(v_896),minnonce) else fail-any)) in
        {460}let v_898: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_896)) then cipherstatepack(2-proj-3-tuple(v_896),minnonce) else fail-any)) in
        {461}let v_899: bitstring = catch-fail((if success?(1-proj-2-tuple(v_889)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (1-proj-2-tuple(v_889),v_897,v_898) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {462}let (hs_900: handshakestate,message_b_901: bitstring,cs1_902: cipherstate,cs2_903: cipherstate) = (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-7-tuple(v_860))))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then (if not-caught-fail(v_863) then (if not-caught-fail(v_864) then (if not-caught-fail(v_866) then (if not-caught-fail(v_873) then (if not-caught-fail(v_880) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then (if not-caught-fail(v_890) then (if not-caught-fail(v_891) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (v_890,v_891,2-proj-3-tuple(v_899),3-proj-3-tuple(v_899)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {463}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {464}insert statestore(bob,charlie,sid,statepack_c(hs_900,cs1_902,cs2_903));
        {465}out(pub, message_b_901)
    ) | (
        {467}!
        {487}get statestore(=bob,=charlie,=sid,statepack_c(hs_904: handshakestate,cs1_905: cipherstate,cs2_906: cipherstate)) in
        {468}let hs_907: handshakestate = handshakestatesetcs(hs_904,cs1_905) in
        {469}in(pub, message_c_908: bitstring);
        {470}let v_909: bitstring = catch-fail(handshakestateunpack(hs_907)) in
        {471}let v_910: bitstring = catch-fail(deconcat3(message_c_908)) in
        {472}let v_911: bool = catch-fail(true) in
        {473}let v_912: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_909))) in
        {474}let v_913: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_912))) in
        {475}let v_914: aead = catch-fail(decrypt(1-proj-2-tuple(v_913),2-proj-2-tuple(v_913),3-proj-3-tuple(v_912),3-proj-3-tuple(v_910))) in
        {476}let v_915: bitstring = catch-fail(aeadunpack(v_914)) in
        {477}let v_916: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_912))) in
        {478}let v_917: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_913))) && success?(1-proj-3-tuple(v_912))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then cipherstatepack(1-proj-2-tuple(v_916),increment_nonce(2-proj-2-tuple(v_913))) else fail-any) else fail-any)) in
        {479}let v_918: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_910)) && (success?(3-proj-3-tuple(v_912)) && success?(1-proj-3-tuple(v_912)))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then (if not-caught-fail(v_914) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if not-caught-fail(v_917) then (v_917,3-proj-3-tuple(v_915),1-proj-3-tuple(v_915)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {480}let v_919: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_918),2-proj-3-tuple(v_912),3-proj-3-tuple(v_912)))) in
        {481}let v_920: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_910)) && success?(symmetricstatepack(1-proj-3-tuple(v_918),2-proj-3-tuple(v_912),3-proj-3-tuple(v_912)))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_919),hash(3-proj-3-tuple(v_919),3-proj-3-tuple(v_910))) else fail-any) else fail-any)) in
        {482}let v_921: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_910)) && success?(1-proj-7-tuple(v_909))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if not-caught-fail(v_920) then (v_920,2-proj-3-tuple(v_918),3-proj-3-tuple(v_918)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_922: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_921),2-proj-7-tuple(v_909),3-proj-7-tuple(v_909),4-proj-7-tuple(v_909),5-proj-7-tuple(v_909),6-proj-7-tuple(v_909),7-proj-7-tuple(v_909))) in
        {484}let (hs_923: handshakestate,plaintext_c_924: bitstring,valid_925: bool) = (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-7-tuple(v_909))))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if not-caught-fail(v_911) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (v_911 && 3-proj-3-tuple(v_921)) then (if not-caught-fail(v_922) then (v_922,2-proj-3-tuple(v_921),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {485}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_924);
        {486}insert statestore(bob,charlie,sid,statepack_d(hs_923,handshakestategetcs(hs_923),cs2_906))
    ) | (
        {488}!
        {506}get statestore(=bob,=charlie,=sid,statepack_d(hs_926: handshakestate,cs1_927: cipherstate,cs2_928: cipherstate)) in
        {489}let hs_929: handshakestate = handshakestatesetcs(hs_926,cs2_928) in
        {490}let v_930: bitstring = catch-fail(handshakestateunpack(hs_929)) in
        {491}let v_931: bitstring = catch-fail((empty,empty,empty)) in
        {492}let v_932: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_930))) in
        {493}let v_933: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_932))) in
        {494}let v_934: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_933),2-proj-2-tuple(v_933),3-proj-3-tuple(v_932),msg_d(bob,charlie,sid))) in
        {495}let v_935: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_932))) in
        {496}let v_936: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_933))) && success?(1-proj-3-tuple(v_932))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then cipherstatepack(1-proj-2-tuple(v_935),increment_nonce(2-proj-2-tuple(v_933))) else fail-any) else fail-any)) in
        {497}let v_937: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_932)) && success?(1-proj-3-tuple(v_932))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-2-tuple(v_933))))) then (if not-caught-fail(v_934) then (if not-caught-fail(v_936) then (v_936,v_934) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_938: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_937),2-proj-3-tuple(v_932),3-proj-3-tuple(v_932)))) in
        {499}let v_939: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_937)) && success?(symmetricstatepack(1-proj-2-tuple(v_937),2-proj-3-tuple(v_932),3-proj-3-tuple(v_932)))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then symmetricstatepack(1-proj-3-tuple(v_938),2-proj-3-tuple(v_938),hash(3-proj-3-tuple(v_938),2-proj-2-tuple(v_937))) else fail-any) else fail-any)) in
        {500}let v_940: bitstring = catch-fail((if success?(1-proj-7-tuple(v_930)) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then (if not-caught-fail(v_939) then (v_939,2-proj-2-tuple(v_937)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_941: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_940),2-proj-7-tuple(v_930),3-proj-7-tuple(v_930),4-proj-7-tuple(v_930),5-proj-7-tuple(v_930),6-proj-7-tuple(v_930),7-proj-7-tuple(v_930))) in
        {502}let v_942: bitstring = catch-fail(concat3(1-proj-3-tuple(v_931),2-proj-3-tuple(v_931),2-proj-2-tuple(v_940))) in
        {503}let (hs_943: handshakestate,message_d_944: bitstring) = (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-7-tuple(v_930))))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then (v_941,v_942) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {504}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {505}out(pub, message_d_944)
    ) | (
        {507}event LeakS(phase0,bob);
        {508}out(pub, key_s(bob))
    ) | (
        {509}phase 1;
        {510}event LeakS(phase1,bob);
        {511}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 100 rules in the queue.
400 rules inserted. The rule base contains 387 rules. 86 rules in the queue.
600 rules inserted. The rule base contains 570 rules. 107 rules in the queue.
800 rules inserted. The rule base contains 742 rules. 103 rules in the queue.
1000 rules inserted. The rule base contains 860 rules. 153 rules in the queue.
1200 rules inserted. The rule base contains 984 rules. 156 rules in the queue.
1400 rules inserted. The rule base contains 1130 rules. 184 rules in the queue.
1600 rules inserted. The rule base contains 1315 rules. 199 rules in the queue.
1800 rules inserted. The rule base contains 1479 rules. 225 rules in the queue.
2000 rules inserted. The rule base contains 1606 rules. 191 rules in the queue.
2200 rules inserted. The rule base contains 1699 rules. 157 rules in the queue.
2400 rules inserted. The rule base contains 1838 rules. 179 rules in the queue.
2600 rules inserted. The rule base contains 1996 rules. 189 rules in the queue.
2800 rules inserted. The rule base contains 2115 rules. 202 rules in the queue.
3000 rules inserted. The rule base contains 2233 rules. 198 rules in the queue.
3200 rules inserted. The rule base contains 2361 rules. 160 rules in the queue.
3400 rules inserted. The rule base contains 2498 rules. 136 rules in the queue.
3600 rules inserted. The rule base contains 2620 rules. 132 rules in the queue.
3800 rules inserted. The rule base contains 2685 rules. 70 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600776455]),msg_a(alice,charlie,sid[!1 = @sid_600776455]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_600776456]),msg_a(alice,charlie,sid[!1 = @sid_600776455])))
Abbreviations:
sid_600776491 = sid[!1 = @sid_600776481]
sid_600776492 = sid[!1 = @sid_600776463]

1. The entry statestore(bob,alice,sid_600776491,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {273}.
table(statestore(bob,alice,sid_600776491,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_600776492,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,sid_600776492,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_600776492,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stagepack_a(sid_600776492),msg_a(alice,charlie,sid_600776492)) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie,sid_600776492),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600776492),g)),msg_a(alice,charlie,sid_600776492))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_600776492),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600776492),g)),msg_a(alice,charlie,sid_600776492)))).

4. The entry statestore(bob,alice,sid_600776491,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {295}.
The message concat3(dhexp(key_e(alice,charlie,sid_600776492),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600776492),g)),msg_a(alice,charlie,sid_600776492))) that may be sent on channel pub by 3 may be received at input {274}.
We have dhexp(key_e(alice,charlie,sid_600776492),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_600776491),msg_a(alice,charlie,sid_600776492)) may be executed at {293}.
end(RecvMsg(bob,alice,stagepack_a(sid_600776491),msg_a(alice,charlie,sid_600776492))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776495]),msg_a(alice,bob,sid[!1 = @sid_600776495]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_600776496]),msg_a(alice,bob,sid[!1 = @sid_600776495])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600776499]),msg_a(alice,charlie,sid[!1 = @sid_600776499]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_600776500]),msg_a(alice,charlie,sid[!1 = @sid_600776499])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776509]),msg_a(alice,bob,sid[!1 = @sid_600776509]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_600776510]),msg_a(alice,bob,sid[!1 = @sid_600776509])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600776513]),msg_a(alice,charlie,sid[!1 = @sid_600776513]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_600776514]),msg_a(alice,charlie,sid[!1 = @sid_600776513])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600776527]),msg_a(alice,charlie,sid[!1 = @sid_600776527]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_600776528]),msg_a(alice,charlie,sid[!1 = @sid_600776527])))
Abbreviations:
sid_600776563 = sid[!1 = @sid_600776553]
sid_600776564 = sid[!1 = @sid_600776535]

1. The entry statestore(bob,alice,sid_600776563,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {273}.
table(statestore(bob,alice,sid_600776563,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_600776564,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,sid_600776564,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_600776564,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stagepack_a(sid_600776564),msg_a(alice,charlie,sid_600776564)) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie,sid_600776564),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600776564),g)),msg_a(alice,charlie,sid_600776564))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_600776564),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600776564),g)),msg_a(alice,charlie,sid_600776564)))).

4. The entry statestore(bob,alice,sid_600776563,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {295}.
The message concat3(dhexp(key_e(alice,charlie,sid_600776564),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600776564),g)),msg_a(alice,charlie,sid_600776564))) that may be sent on channel pub by 3 may be received at input {274}.
We have dhexp(key_e(alice,charlie,sid_600776564),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_600776563),msg_a(alice,charlie,sid_600776564)) may be executed at {293}.
end(RecvMsg(bob,alice,stagepack_a(sid_600776563),msg_a(alice,charlie,sid_600776564))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600776571]),msg_a(alice,charlie,sid[!1 = @sid_600776571]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_600776572]),msg_a(alice,charlie,sid[!1 = @sid_600776571])))
Abbreviations:
sid_600776607 = sid[!1 = @sid_600776597]
sid_600776608 = sid[!1 = @sid_600776579]

1. The entry statestore(bob,alice,sid_600776607,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {273}.
table(statestore(bob,alice,sid_600776607,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_600776608,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,sid_600776608,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_600776608,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stagepack_a(sid_600776608),msg_a(alice,charlie,sid_600776608)) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie,sid_600776608),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600776608),g)),msg_a(alice,charlie,sid_600776608))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_600776608),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600776608),g)),msg_a(alice,charlie,sid_600776608)))).

4. The entry statestore(bob,alice,sid_600776607,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {295}.
The message concat3(dhexp(key_e(alice,charlie,sid_600776608),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600776608),g)),msg_a(alice,charlie,sid_600776608))) that may be sent on channel pub by 3 may be received at input {274}.
We have dhexp(key_e(alice,charlie,sid_600776608),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_600776607),msg_a(alice,charlie,sid_600776608)) may be executed at {293}.
end(RecvMsg(bob,alice,stagepack_a(sid_600776607),msg_a(alice,charlie,sid_600776608))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776610]),msg_a(alice,bob,sid[!1 = @sid_600776610]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_600776610]))
Abbreviations:
sid_600776671 = sid[!1 = @sid_600776646]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_600776671,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_600776671,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_600776671,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_600776671),msg_a(alice,bob,sid_600776671)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_600776671),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_600776671),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_600776671),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_600776671),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_600776671),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_600776671),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_600776671),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_600776671),g).
attacker(dhexp(key_e(alice,bob,sid_600776671),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_600776671),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776671),g)),msg_a(alice,bob,sid_600776671)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_600776671) in phase 1.
attacker_p1(msg_a(alice,bob,sid_600776671)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776673]),msg_a(alice,bob,sid[!1 = @sid_600776673]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_600776673]))
Abbreviations:
sid_600776734 = sid[!1 = @sid_600776709]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_600776734,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_600776734,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_600776734,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_600776734),msg_a(alice,bob,sid_600776734)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_600776734),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_600776734),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_600776734),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_600776734),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_600776734),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_600776734),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_600776734),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_600776734),g).
attacker(dhexp(key_e(alice,bob,sid_600776734),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_600776734),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776734),g)),msg_a(alice,bob,sid_600776734)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_600776734) in phase 1.
attacker_p1(msg_a(alice,bob,sid_600776734)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776736]),msg_a(alice,bob,sid[!1 = @sid_600776736]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_600776736]))
Abbreviations:
sid_600776798 = sid[!1 = @sid_600776773]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_600776798,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_600776798,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_600776798,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_600776798),msg_a(alice,bob,sid_600776798)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_600776798),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_600776798),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_600776798),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_600776798),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_600776798),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_600776798),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_600776798),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_600776798),g).
attacker(dhexp(key_e(alice,bob,sid_600776798),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_600776798),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776798),g)),msg_a(alice,bob,sid_600776798)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_600776798) in phase 1.
attacker_p1(msg_a(alice,bob,sid_600776798)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776800]),msg_a(alice,bob,sid[!1 = @sid_600776800]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_600776800]))
Abbreviations:
sid_600776861 = sid[!1 = @sid_600776836]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_600776861,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_600776861,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_600776861,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_600776861),msg_a(alice,bob,sid_600776861)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_600776861),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_600776861),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_600776861),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_600776861),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_600776861),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_600776861),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_600776861),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_600776861),g).
attacker(dhexp(key_e(alice,bob,sid_600776861),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_600776861),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600776861),g)),msg_a(alice,bob,sid_600776861)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_600776861) in phase 1.
attacker_p1(msg_a(alice,bob,sid_600776861)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600776864]),msg_b(bob,alice,sid[!1 = @sid_600776864]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776865]),msg_a(alice,bob,sid[!1 = @sid_600776865]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_600776865]),msg_b(bob,alice,sid[!1 = @sid_600776864])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600776873]),msg_b(bob,alice,sid[!1 = @sid_600776873]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776874]),msg_a(alice,bob,sid[!1 = @sid_600776874]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_600776874]),msg_b(bob,alice,sid[!1 = @sid_600776873])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600776883]),msg_b(bob,alice,sid[!1 = @sid_600776883]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776884]),msg_a(alice,bob,sid[!1 = @sid_600776884]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_600776884]),msg_b(bob,alice,sid[!1 = @sid_600776883])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600776893]),msg_b(bob,alice,sid[!1 = @sid_600776893]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776894]),msg_a(alice,bob,sid[!1 = @sid_600776894]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_600776894]),msg_b(bob,alice,sid[!1 = @sid_600776893])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600776902]),msg_b(bob,alice,sid[!1 = @sid_600776902]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600776903]),msg_a(alice,bob,sid[!1 = @sid_600776903]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_600776903]),msg_b(bob,alice,sid[!1 = @sid_600776902])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_600776928]),msg_c(alice,charlie,sid[!1 = @sid_600776928]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600776929]),msg_b(bob,alice,sid[!1 = @sid_600776929]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600776928]),msg_a(alice,charlie,sid[!1 = @sid_600776928]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_600776929]),msg_c(alice,charlie,sid[!1 = @sid_600776928])))
Abbreviations:
sid_600777069 = sid[!1 = @sid_600777056]
sid_600777070 = sid[!1 = @sid_600777014]

1. The entry statestore(bob,alice,sid_600777069,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {273}.
table(statestore(bob,alice,sid_600777069,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_600777070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,sid_600777070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_600777070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stagepack_a(sid_600777070),msg_a(alice,charlie,sid_600777070)) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie,sid_600777070),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_600777070),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070)))).

4. The entry statestore(bob,alice,sid_600777069,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {295}.
The message concat3(dhexp(key_e(alice,charlie,sid_600777070),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))) that may be sent on channel pub by 3 may be received at input {274}.
We have dhexp(key_e(alice,charlie,sid_600777070),g) <> caught-fail.
So the entry statestore(bob,alice,sid_600777069,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777070),g),empty,false))) may be inserted in a table at insert {294}.
table(statestore(bob,alice,sid_600777069,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777070),g),empty,false)))).

5. The entry statestore(bob,alice,sid_600777069,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777070),g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stagepack_b(sid_600777069),msg_b(bob,alice,sid_600777069)) may be executed at {337}.
So the entry statestore(bob,alice,sid_600777069,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777069),g),key_e(bob,alice,sid_600777069)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,sid_600777069,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777069),g),key_e(bob,alice,sid_600777069)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce)))).

6. The entry statestore(alice,charlie,sid_600777070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stagepack_a(sid_600777070),msg_a(alice,charlie,sid_600777070)) may be executed at {166}.
So the entry statestore(alice,charlie,sid_600777070,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777070),g),key_e(alice,charlie,sid_600777070)),empty,empty,empty,true))) may be inserted in a table at insert {167}.
table(statestore(alice,charlie,sid_600777070,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777070),g),key_e(alice,charlie,sid_600777070)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_600777069,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777070),g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stagepack_b(sid_600777069),msg_b(bob,alice,sid_600777069)) may be executed at {337}.
So the message concat3(dhexp(key_e(bob,alice,sid_600777069),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069))) may be sent on channel pub at output {339}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_600777069),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069)))).

8. The entry statestore(alice,charlie,sid_600777070,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777070),g),key_e(alice,charlie,sid_600777070)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {213}.
The message concat3(dhexp(key_e(bob,alice,sid_600777069),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069))) that may be sent on channel pub by 7 may be received at input {170}.
So the entry statestore(alice,charlie,sid_600777070,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777070),g),key_e(alice,charlie,sid_600777070)),empty,dhexp(key_e(bob,alice,sid_600777069),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {212}.
table(statestore(alice,charlie,sid_600777070,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777070),g),key_e(alice,charlie,sid_600777070)),empty,dhexp(key_e(bob,alice,sid_600777069),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce)))).

9. The entry statestore(alice,charlie,sid_600777070,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777070),g),key_e(alice,charlie,sid_600777070)),empty,dhexp(key_e(bob,alice,sid_600777069),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 8 may be read at get {233}.
The event SendMsg(alice,charlie,stagepack_c(sid_600777070),msg_c(alice,charlie,sid_600777070)) may be executed at {230}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069))),msg_c(alice,charlie,sid_600777070))) may be sent on channel pub at output {232}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069))),msg_c(alice,charlie,sid_600777070)))).

10. The entry statestore(bob,alice,sid_600777069,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777069),g),key_e(bob,alice,sid_600777069)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777070),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 5 may be read at get {361}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_e(bob,alice,sid_600777069),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777070),dhexp(key_e(bob,alice,sid_600777069),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777069),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777070),g)),msg_a(alice,charlie,sid_600777070))),dhexp(key_e(bob,alice,sid_600777069),g)),msg_b(bob,alice,sid_600777069))),msg_c(alice,charlie,sid_600777070))) that may be sent on channel pub by 9 may be received at input {343}.
So event RecvMsg(bob,alice,stagepack_c(sid_600777069),msg_c(alice,charlie,sid_600777070)) may be executed at {359}.
end(RecvMsg(bob,alice,stagepack_c(sid_600777069),msg_c(alice,charlie,sid_600777070))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_600777073]),msg_c(alice,bob,sid[!1 = @sid_600777073]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777074]),msg_b(bob,alice,sid[!1 = @sid_600777074]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600777073]),msg_a(alice,bob,sid[!1 = @sid_600777073]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_600777074]),msg_c(alice,bob,sid[!1 = @sid_600777073])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_600777077]),msg_c(alice,charlie,sid[!1 = @sid_600777077]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777078]),msg_b(bob,alice,sid[!1 = @sid_600777078]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600777077]),msg_a(alice,charlie,sid[!1 = @sid_600777077]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_600777078]),msg_c(alice,charlie,sid[!1 = @sid_600777077])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_600777087]),msg_c(alice,bob,sid[!1 = @sid_600777087]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777088]),msg_b(bob,alice,sid[!1 = @sid_600777088]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600777087]),msg_a(alice,bob,sid[!1 = @sid_600777087]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_600777088]),msg_c(alice,bob,sid[!1 = @sid_600777087])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_600777091]),msg_c(alice,charlie,sid[!1 = @sid_600777091]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777092]),msg_b(bob,alice,sid[!1 = @sid_600777092]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600777091]),msg_a(alice,charlie,sid[!1 = @sid_600777091]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_600777092]),msg_c(alice,charlie,sid[!1 = @sid_600777091])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_600777105]),msg_c(alice,charlie,sid[!1 = @sid_600777105]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777106]),msg_b(bob,alice,sid[!1 = @sid_600777106]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600777105]),msg_a(alice,charlie,sid[!1 = @sid_600777105]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_600777106]),msg_c(alice,charlie,sid[!1 = @sid_600777105])))
Abbreviations:
sid_600777246 = sid[!1 = @sid_600777233]
sid_600777247 = sid[!1 = @sid_600777191]

1. The entry statestore(bob,alice,sid_600777246,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {273}.
table(statestore(bob,alice,sid_600777246,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_600777247,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,sid_600777247,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_600777247,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stagepack_a(sid_600777247),msg_a(alice,charlie,sid_600777247)) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie,sid_600777247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_600777247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247)))).

4. The entry statestore(bob,alice,sid_600777246,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {295}.
The message concat3(dhexp(key_e(alice,charlie,sid_600777247),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))) that may be sent on channel pub by 3 may be received at input {274}.
We have dhexp(key_e(alice,charlie,sid_600777247),g) <> caught-fail.
So the entry statestore(bob,alice,sid_600777246,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777247),g),empty,false))) may be inserted in a table at insert {294}.
table(statestore(bob,alice,sid_600777246,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777247),g),empty,false)))).

5. The entry statestore(bob,alice,sid_600777246,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777247),g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stagepack_b(sid_600777246),msg_b(bob,alice,sid_600777246)) may be executed at {337}.
So the entry statestore(bob,alice,sid_600777246,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777246),g),key_e(bob,alice,sid_600777246)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777247),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,sid_600777246,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777246),g),key_e(bob,alice,sid_600777246)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777247),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce)))).

6. The entry statestore(alice,charlie,sid_600777247,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stagepack_a(sid_600777247),msg_a(alice,charlie,sid_600777247)) may be executed at {166}.
So the entry statestore(alice,charlie,sid_600777247,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777247),g),key_e(alice,charlie,sid_600777247)),empty,empty,empty,true))) may be inserted in a table at insert {167}.
table(statestore(alice,charlie,sid_600777247,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777247),g),key_e(alice,charlie,sid_600777247)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_600777246,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777247),g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stagepack_b(sid_600777246),msg_b(bob,alice,sid_600777246)) may be executed at {337}.
So the message concat3(dhexp(key_e(bob,alice,sid_600777246),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246))) may be sent on channel pub at output {339}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_600777246),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246)))).

8. The entry statestore(alice,charlie,sid_600777247,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777247),g),key_e(alice,charlie,sid_600777247)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {213}.
The message concat3(dhexp(key_e(bob,alice,sid_600777246),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246))) that may be sent on channel pub by 7 may be received at input {170}.
So the entry statestore(alice,charlie,sid_600777247,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777247),g),key_e(alice,charlie,sid_600777247)),empty,dhexp(key_e(bob,alice,sid_600777246),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {212}.
table(statestore(alice,charlie,sid_600777247,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777247),g),key_e(alice,charlie,sid_600777247)),empty,dhexp(key_e(bob,alice,sid_600777246),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce)))).

9. The entry statestore(alice,charlie,sid_600777247,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777247),g),key_e(alice,charlie,sid_600777247)),empty,dhexp(key_e(bob,alice,sid_600777246),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 8 may be read at get {233}.
The event SendMsg(alice,charlie,stagepack_c(sid_600777247),msg_c(alice,charlie,sid_600777247)) may be executed at {230}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246))),msg_c(alice,charlie,sid_600777247))) may be sent on channel pub at output {232}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246))),msg_c(alice,charlie,sid_600777247)))).

10. The entry statestore(bob,alice,sid_600777246,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777246),g),key_e(bob,alice,sid_600777246)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777247),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 5 may be read at get {361}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_e(bob,alice,sid_600777246),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777247),dhexp(key_e(bob,alice,sid_600777246),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777246),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777247),g)),msg_a(alice,charlie,sid_600777247))),dhexp(key_e(bob,alice,sid_600777246),g)),msg_b(bob,alice,sid_600777246))),msg_c(alice,charlie,sid_600777247))) that may be sent on channel pub by 9 may be received at input {343}.
So event RecvMsg(bob,alice,stagepack_c(sid_600777246),msg_c(alice,charlie,sid_600777247)) may be executed at {359}.
end(RecvMsg(bob,alice,stagepack_c(sid_600777246),msg_c(alice,charlie,sid_600777247))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_600777254]),msg_c(alice,charlie,sid[!1 = @sid_600777254]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777255]),msg_b(bob,alice,sid[!1 = @sid_600777255]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_600777254]),msg_a(alice,charlie,sid[!1 = @sid_600777254]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_600777255]),msg_c(alice,charlie,sid[!1 = @sid_600777254])))
Abbreviations:
sid_600777395 = sid[!1 = @sid_600777382]
sid_600777396 = sid[!1 = @sid_600777340]

1. The entry statestore(bob,alice,sid_600777395,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {273}.
table(statestore(bob,alice,sid_600777395,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_600777396,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,sid_600777396,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_600777396,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stagepack_a(sid_600777396),msg_a(alice,charlie,sid_600777396)) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie,sid_600777396),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_600777396),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396)))).

4. The entry statestore(bob,alice,sid_600777395,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {295}.
The message concat3(dhexp(key_e(alice,charlie,sid_600777396),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))) that may be sent on channel pub by 3 may be received at input {274}.
We have dhexp(key_e(alice,charlie,sid_600777396),g) <> caught-fail.
So the entry statestore(bob,alice,sid_600777395,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777396),g),empty,false))) may be inserted in a table at insert {294}.
table(statestore(bob,alice,sid_600777395,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777396),g),empty,false)))).

5. The entry statestore(bob,alice,sid_600777395,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777396),g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stagepack_b(sid_600777395),msg_b(bob,alice,sid_600777395)) may be executed at {337}.
So the entry statestore(bob,alice,sid_600777395,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777395),g),key_e(bob,alice,sid_600777395)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777396),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,sid_600777395,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777395),g),key_e(bob,alice,sid_600777395)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777396),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce)))).

6. The entry statestore(alice,charlie,sid_600777396,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stagepack_a(sid_600777396),msg_a(alice,charlie,sid_600777396)) may be executed at {166}.
So the entry statestore(alice,charlie,sid_600777396,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777396),g),key_e(alice,charlie,sid_600777396)),empty,empty,empty,true))) may be inserted in a table at insert {167}.
table(statestore(alice,charlie,sid_600777396,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777396),g),key_e(alice,charlie,sid_600777396)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_600777395,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777396),g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stagepack_b(sid_600777395),msg_b(bob,alice,sid_600777395)) may be executed at {337}.
So the message concat3(dhexp(key_e(bob,alice,sid_600777395),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395))) may be sent on channel pub at output {339}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_600777395),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395)))).

8. The entry statestore(alice,charlie,sid_600777396,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777396),g),key_e(alice,charlie,sid_600777396)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {213}.
The message concat3(dhexp(key_e(bob,alice,sid_600777395),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395))) that may be sent on channel pub by 7 may be received at input {170}.
So the entry statestore(alice,charlie,sid_600777396,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777396),g),key_e(alice,charlie,sid_600777396)),empty,dhexp(key_e(bob,alice,sid_600777395),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {212}.
table(statestore(alice,charlie,sid_600777396,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777396),g),key_e(alice,charlie,sid_600777396)),empty,dhexp(key_e(bob,alice,sid_600777395),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce)))).

9. The entry statestore(alice,charlie,sid_600777396,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_600777396),g),key_e(alice,charlie,sid_600777396)),empty,dhexp(key_e(bob,alice,sid_600777395),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 8 may be read at get {233}.
The event SendMsg(alice,charlie,stagepack_c(sid_600777396),msg_c(alice,charlie,sid_600777396)) may be executed at {230}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395))),msg_c(alice,charlie,sid_600777396))) may be sent on channel pub at output {232}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395))),msg_c(alice,charlie,sid_600777396)))).

10. The entry statestore(bob,alice,sid_600777395,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777395),g),key_e(bob,alice,sid_600777395)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_600777396),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 5 may be read at get {361}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_e(bob,alice,sid_600777395),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_600777396),dhexp(key_e(bob,alice,sid_600777395),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777395),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie,sid_600777396),g)),msg_a(alice,charlie,sid_600777396))),dhexp(key_e(bob,alice,sid_600777395),g)),msg_b(bob,alice,sid_600777395))),msg_c(alice,charlie,sid_600777396))) that may be sent on channel pub by 9 may be received at input {343}.
So event RecvMsg(bob,alice,stagepack_c(sid_600777395),msg_c(alice,charlie,sid_600777396)) may be executed at {359}.
end(RecvMsg(bob,alice,stagepack_c(sid_600777395),msg_c(alice,charlie,sid_600777396))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_600777412]),msg_d(bob,alice,sid[!1 = @sid_600777412]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_600777413]),msg_c(alice,bob,sid[!1 = @sid_600777413]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777412]),msg_b(bob,alice,sid[!1 = @sid_600777412]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600777413]),msg_a(alice,bob,sid[!1 = @sid_600777413]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_600777413]),msg_d(bob,alice,sid[!1 = @sid_600777412])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_600777421]),msg_d(bob,alice,sid[!1 = @sid_600777421]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_600777422]),msg_c(alice,bob,sid[!1 = @sid_600777422]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777421]),msg_b(bob,alice,sid[!1 = @sid_600777421]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600777422]),msg_a(alice,bob,sid[!1 = @sid_600777422]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_600777422]),msg_d(bob,alice,sid[!1 = @sid_600777421])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_600777431]),msg_d(bob,alice,sid[!1 = @sid_600777431]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_600777432]),msg_c(alice,bob,sid[!1 = @sid_600777432]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777431]),msg_b(bob,alice,sid[!1 = @sid_600777431]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600777432]),msg_a(alice,bob,sid[!1 = @sid_600777432]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_600777432]),msg_d(bob,alice,sid[!1 = @sid_600777431])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_600777441]),msg_d(bob,alice,sid[!1 = @sid_600777441]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_600777442]),msg_c(alice,bob,sid[!1 = @sid_600777442]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777441]),msg_b(bob,alice,sid[!1 = @sid_600777441]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600777442]),msg_a(alice,bob,sid[!1 = @sid_600777442]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_600777442]),msg_d(bob,alice,sid[!1 = @sid_600777441])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_600777450]),msg_d(bob,alice,sid[!1 = @sid_600777450]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_600777451]),msg_c(alice,bob,sid[!1 = @sid_600777451]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777450]),msg_b(bob,alice,sid[!1 = @sid_600777450]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600777451]),msg_a(alice,bob,sid[!1 = @sid_600777451]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_600777451]),msg_d(bob,alice,sid[!1 = @sid_600777450])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_600777470]),msg_d(bob,alice,sid[!1 = @sid_600777470]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_600777471]),msg_c(alice,bob,sid[!1 = @sid_600777471]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_600777470]),msg_b(bob,alice,sid[!1 = @sid_600777470]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_600777471]),msg_a(alice,bob,sid[!1 = @sid_600777471]))) -> end(RecvEnd(true))
Abbreviations:
sid_600777723 = sid[!1 = @sid_600777712]
sid_600777724 = sid[!1 = @sid_600777667]

1. The entry statestore(alice,bob,sid_600777723,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_600777723,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,sid_600777723,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_600777723),msg_a(alice,bob,sid_600777723)) may be executed at {38}.
So the entry statestore(alice,bob,sid_600777723,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_600777723,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,sid_600777724,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {273}.
table(statestore(bob,alice,sid_600777724,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

4. The entry statestore(alice,bob,sid_600777723,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_600777723),msg_a(alice,bob,sid_600777723)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_600777723),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_600777723),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723)))).

5. The entry statestore(bob,alice,sid_600777724,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 3 may be read at get {295}.
The message concat3(dhexp(key_e(alice,bob,sid_600777723),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))) that may be sent on channel pub by 4 may be received at input {274}.
We have dhexp(key_e(alice,bob,sid_600777723),g) <> caught-fail.
So the entry statestore(bob,alice,sid_600777724,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false))) may be inserted in a table at insert {294}.
table(statestore(bob,alice,sid_600777724,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false)))).

6. The entry statestore(bob,alice,sid_600777724,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false))) that may be in a table by 5 may be read at get {340}.
The event SendMsg(bob,alice,stagepack_b(sid_600777724),msg_b(bob,alice,sid_600777724)) may be executed at {337}.
So the message concat3(dhexp(key_e(bob,alice,sid_600777724),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))) may be sent on channel pub at output {339}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_600777724),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724)))).

7. The entry statestore(alice,bob,sid_600777723,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {85}.
The message concat3(dhexp(key_e(bob,alice,sid_600777724),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))) that may be sent on channel pub by 6 may be received at input {42}.
So the entry statestore(alice,bob,sid_600777723,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,dhexp(key_e(bob,alice,sid_600777724),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {84}.
table(statestore(alice,bob,sid_600777723,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,dhexp(key_e(bob,alice,sid_600777724),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_600777723,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,dhexp(key_e(bob,alice,sid_600777724),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 7 may be read at get {105}.
The event SendMsg(alice,bob,stagepack_c(sid_600777723),msg_c(alice,bob,sid_600777723)) may be executed at {102}.
So the entry statestore(alice,bob,sid_600777723,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,dhexp(key_e(bob,alice,sid_600777724),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {103}.
table(statestore(alice,bob,sid_600777723,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,dhexp(key_e(bob,alice,sid_600777724),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_600777724,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false))) that may be in a table by 5 may be read at get {340}.
The event SendMsg(bob,alice,stagepack_b(sid_600777724),msg_b(bob,alice,sid_600777724)) may be executed at {337}.
So the entry statestore(bob,alice,sid_600777724,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777724),g),key_e(bob,alice,sid_600777724)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,sid_600777724,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777724),g),key_e(bob,alice,sid_600777724)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_600777723,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,dhexp(key_e(bob,alice,sid_600777724),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 7 may be read at get {105}.
The event SendMsg(alice,bob,stagepack_c(sid_600777723),msg_c(alice,bob,sid_600777723)) may be executed at {102}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723))) may be sent on channel pub at output {104}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723)))).

11. The entry statestore(bob,alice,sid_600777724,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777724),g),key_e(bob,alice,sid_600777724)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 9 may be read at get {361}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723))) that may be sent on channel pub by 10 may be received at input {343}.
So the entry statestore(bob,alice,sid_600777724,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777724),g),key_e(bob,alice,sid_600777724)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {360}.
table(statestore(bob,alice,sid_600777724,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777724),g),key_e(bob,alice,sid_600777724)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_600777724,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_600777724),g),key_e(bob,alice,sid_600777724)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_600777723),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 11 may be read at get {380}.
The event SendMsg(bob,alice,stagepack_d(sid_600777724),msg_d(bob,alice,sid_600777724)) may be executed at {378}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723))),msg_d(bob,alice,sid_600777724))) may be sent on channel pub at output {379}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723))),msg_d(bob,alice,sid_600777724)))).

13. The entry statestore(alice,bob,sid_600777723,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_600777723),g),key_e(alice,bob,sid_600777723)),empty,dhexp(key_e(bob,alice,sid_600777724),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 8 may be read at get {126}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_e(bob,alice,sid_600777724),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_600777723),dhexp(key_e(bob,alice,sid_600777724),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_600777724),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob,sid_600777723),g)),msg_a(alice,bob,sid_600777723))),dhexp(key_e(bob,alice,sid_600777724),g)),msg_b(bob,alice,sid_600777724))),msg_c(alice,bob,sid_600777723))),msg_d(bob,alice,sid_600777724))) that may be sent on channel pub by 12 may be received at input {108}.
So event RecvEnd(true) may be executed at {125}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
