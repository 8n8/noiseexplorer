File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "KKpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 280, character 6:
Warning: identifier e rebound.
File "KKpsk0.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk0.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 286, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 286, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 294, character 6:
Warning: identifier e rebound.
File "KKpsk0.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk0.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk0.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk0.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 317, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk0.noise.passive.pv", line 318, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "KKpsk0.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 334, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 342, characters 6-7:
Warning: identifier re rebound.
File "KKpsk0.noise.passive.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 527, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 529, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 521, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk0.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 514, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 342, characters 6-7:
Warning: identifier re rebound.
File "KKpsk0.noise.passive.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 280, character 6:
Warning: identifier e rebound.
File "KKpsk0.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk0.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 283, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 286, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 286, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 581, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 582, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 317, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk0.noise.passive.pv", line 318, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 573, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 575, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 294, character 6:
Warning: identifier e rebound.
File "KKpsk0.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "KKpsk0.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KKpsk0.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 561, characters 8-9:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 327, characters 6-7:
Warning: identifier re rebound.
File "KKpsk0.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 334, characters 7-8:
Warning: identifier hs rebound.
File "KKpsk0.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KKpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KKpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KKpsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Completing equations...
Completed equations:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_571: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_572: keypair = (if not-caught-fail(v_571) then keypairpack(validkey(v_571),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_572));
    (
        {7}let e_573: keypair = keypairpack(empty,empty) in
        {8}let v_574: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {9}let rs_575: key = getpublickey((if not-caught-fail(v_574) then keypairpack(validkey(v_574),key_s(bob)) else fail-any)) in
        {10}let re_576: key = empty in
        {11}let v_577: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_578: key = catch-fail(v_577) in
        {13}let v_579: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_580: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_577) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then symmetricstatepack(v_579,v_578,v_577) else fail-any) else fail-any) else fail-any))) in
        {15}let v_581: symmetricstate = catch-fail((if success?((if not-caught-fail(v_577) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then symmetricstatepack(v_579,v_578,v_577) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then symmetricstatepack(1-proj-3-tuple(v_580),2-proj-3-tuple(v_580),hash(3-proj-3-tuple(v_580),empty)) else fail-any) else fail-any)) in
        {16}let v_582: bitstring = catch-fail(symmetricstateunpack(v_581)) in
        {17}let v_583: symmetricstate = catch-fail((if success?(getpublickey(s_572)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),getpublickey(s_572))) else fail-any) else fail-any)) in
        {18}let v_584: bitstring = catch-fail(symmetricstateunpack(v_583)) in
        {19}let v_585: symmetricstate = catch-fail((if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then symmetricstatepack(1-proj-3-tuple(v_584),2-proj-3-tuple(v_584),hash(3-proj-3-tuple(v_584),rs_575)) else fail-any)) in
        {20}let hs: handshakestate = (if not-caught-fail(v_581) then (if not-caught-fail(v_583) then (if not-caught-fail(v_585) then handshakestatepack(v_585,s_572,e_573,rs_575,re_576,key_psk(alice,bob),true) else fail-any) else fail-any) else fail-any) in
        {21}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {72}get statestore(=alice,=bob,=sid,statepack_a(hs_586: handshakestate)) in
        {22}let v_587: bitstring = catch-fail(handshakestateunpack(hs_586)) in
        {23}let v_588: bitstring = catch-fail((empty,empty,empty)) in
        {24}let v_589: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_587))) in
        {25}let v_590: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_589),6-proj-7-tuple(v_587))) in
        {26}let v_591: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_589),6-proj-7-tuple(v_587))) in
        {27}let v_592: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_589),6-proj-7-tuple(v_587))) in
        {28}let v_593: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_587)) && success?(2-proj-3-tuple(v_589))) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (v_590,v_591,v_592) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_594: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_589),1-proj-3-tuple(v_593),3-proj-3-tuple(v_589)))) in
        {30}let v_595: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_593)) && success?(symmetricstatepack(1-proj-3-tuple(v_589),1-proj-3-tuple(v_593),3-proj-3-tuple(v_589)))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),2-proj-3-tuple(v_593))) else fail-any) else fail-any))) in
        {31}let v_596: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_587)) && success?(1-proj-7-tuple(v_587))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_593)) then cipherstatepack(3-proj-3-tuple(v_593),minnonce) else fail-any),1-proj-3-tuple(v_593),3-proj-3-tuple(v_595)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_597: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {33}let v_598: keypair = catch-fail((if not-caught-fail(v_597) then keypairpack(validkey(v_597),key_e(alice,bob,sid)) else fail-any)) in
        {34}let v_599: bitstring = catch-fail(getpublickey(v_598)) in
        {35}let v_600: bitstring = catch-fail(symmetricstateunpack(v_596)) in
        {36}let v_601: symmetricstate = catch-fail((if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_600),hash(3-proj-3-tuple(v_600),v_599)) else fail-any)) in
        {37}let v_602: bitstring = catch-fail(symmetricstateunpack(v_601)) in
        {38}let v_603: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_602),getpublickey(v_598))) in
        {39}let v_604: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_602),getpublickey(v_598))) in
        {40}let v_605: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_602),getpublickey(v_598))) in
        {41}let v_606: bitstring = catch-fail((if (success?(getpublickey(v_598)) && success?(2-proj-3-tuple(v_602))) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (v_603,v_604,v_605) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_607: symmetricstate = catch-fail((if success?(getpublickey(v_598)) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_606)) then cipherstatepack(2-proj-3-tuple(v_606),minnonce) else fail-any),1-proj-3-tuple(v_606),3-proj-3-tuple(v_602)) else fail-any) else fail-any) else fail-any)) in
        {43}let v_608: bitstring = catch-fail(keypairunpack(v_598)) in
        {44}let v_609: bitstring = catch-fail(symmetricstateunpack(v_607)) in
        {45}let v_610: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_609),(if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {46}let v_611: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_609),(if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {47}let v_612: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_609),(if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {48}let v_613: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_609))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (if not-caught-fail(v_612) then (v_610,v_611,v_612) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {49}let v_614: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_587)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_613)) then cipherstatepack(2-proj-3-tuple(v_613),minnonce) else fail-any),1-proj-3-tuple(v_613),3-proj-3-tuple(v_609)) else fail-any) else fail-any) else fail-any)) in
        {50}let v_615: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_587))) in
        {51}let v_616: bitstring = catch-fail(symmetricstateunpack(v_614)) in
        {52}let v_617: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_616),(if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {53}let v_618: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_616),(if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {54}let v_619: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_616),(if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),4-proj-7-tuple(v_587)) else fail-any) else fail-any))) in
        {55}let v_620: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_616))) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (v_617,v_618,v_619) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {56}let v_621: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_587)) && success?(2-proj-7-tuple(v_587))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),4-proj-7-tuple(v_587)) else fail-any) else fail-any)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_620)) then cipherstatepack(2-proj-3-tuple(v_620),minnonce) else fail-any),1-proj-3-tuple(v_620),3-proj-3-tuple(v_616)) else fail-any) else fail-any) else fail-any)) in
        {57}let v_622: bitstring = catch-fail(symmetricstateunpack(v_621)) in
        {58}let v_623: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_622))) in
        {59}let v_624: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_623),2-proj-2-tuple(v_623),3-proj-3-tuple(v_622),msg_a(alice,bob,sid))) in
        {60}let v_625: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_622))) in
        {61}let v_626: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_623))) && success?(1-proj-3-tuple(v_622))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then cipherstatepack(1-proj-2-tuple(v_625),increment_nonce(2-proj-2-tuple(v_623))) else fail-any) else fail-any)) in
        {62}let v_627: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_622)) && success?(1-proj-3-tuple(v_622))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_626) then (v_626,v_624) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_628: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_627),2-proj-3-tuple(v_622),3-proj-3-tuple(v_622)))) in
        {64}let v_629: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_627)) && success?(symmetricstatepack(1-proj-2-tuple(v_627),2-proj-3-tuple(v_622),3-proj-3-tuple(v_622)))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then symmetricstatepack(1-proj-3-tuple(v_628),2-proj-3-tuple(v_628),hash(3-proj-3-tuple(v_628),2-proj-2-tuple(v_627))) else fail-any) else fail-any)) in
        {65}let v_630: bitstring = catch-fail((if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then (if not-caught-fail(v_629) then (v_629,2-proj-2-tuple(v_627)) else fail-any) else fail-any) else fail-any)) in
        {66}let v_631: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_630),2-proj-7-tuple(v_587),v_598,4-proj-7-tuple(v_587),5-proj-7-tuple(v_587),6-proj-7-tuple(v_587),7-proj-7-tuple(v_587))) in
        {67}let v_632: bitstring = catch-fail(concat3(v_599,2-proj-3-tuple(v_588),2-proj-2-tuple(v_630))) in
        {68}let (hs_633: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-7-tuple(v_587))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if not-caught-fail(v_596) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (if not-caught-fail(v_601) then (if not-caught-fail(v_607) then (if not-caught-fail(v_614) then (if not-caught-fail(v_621) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-2-tuple(v_630))))) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (v_631,v_632) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {69}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {70}insert statestore(alice,bob,sid,statepack_b(hs_633));
        {71}out(pub, message_a)
    ) | (
        {122}get statestore(=alice,=bob,=sid,statepack_b(hs_634: handshakestate)) in
        {73}in(pub, message_b: bitstring);
        {74}let v_635: bitstring = catch-fail(handshakestateunpack(hs_634)) in
        {75}let v_636: bitstring = catch-fail(deconcat3(message_b)) in
        {76}let v_637: bool = catch-fail(true) in
        {77}let v_638: key = catch-fail(1-proj-3-tuple(v_636)) in
        {78}let v_639: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_635))) in
        {79}let v_640: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_635)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then symmetricstatepack(1-proj-3-tuple(v_639),2-proj-3-tuple(v_639),hash(3-proj-3-tuple(v_639),v_638)) else fail-any) else fail-any)) in
        {80}let v_641: bitstring = catch-fail(symmetricstateunpack(v_640)) in
        {81}let v_642: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_641),v_638)) in
        {82}let v_643: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_641),v_638)) in
        {83}let v_644: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_641),v_638)) in
        {84}let v_645: bitstring = catch-fail((if success?(2-proj-3-tuple(v_641)) then (if not-caught-fail(v_642) then (if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (v_642,v_643,v_644) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {85}let v_646: symmetricstate = catch-fail((if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_645)) then cipherstatepack(2-proj-3-tuple(v_645),minnonce) else fail-any),1-proj-3-tuple(v_645),3-proj-3-tuple(v_641)) else fail-any) else fail-any)) in
        {86}let v_647: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_635))) in
        {87}let v_648: bitstring = catch-fail(symmetricstateunpack(v_646)) in
        {88}let v_649: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_648),(if success?(3-proj-7-tuple(v_635)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_638) else fail-any) else fail-any))) in
        {89}let v_650: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_648),(if success?(3-proj-7-tuple(v_635)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_638) else fail-any) else fail-any))) in
        {90}let v_651: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_648),(if success?(3-proj-7-tuple(v_635)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_638) else fail-any) else fail-any))) in
        {91}let v_652: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_635)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_638) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_648))) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then (if not-caught-fail(v_651) then (v_649,v_650,v_651) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_653: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_635)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_638) else fail-any) else fail-any)) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_652)) then cipherstatepack(2-proj-3-tuple(v_652),minnonce) else fail-any),1-proj-3-tuple(v_652),3-proj-3-tuple(v_648)) else fail-any) else fail-any) else fail-any)) in
        {93}let v_654: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_635))) in
        {94}let v_655: bitstring = catch-fail(symmetricstateunpack(v_653)) in
        {95}let v_656: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_655),(if success?(2-proj-7-tuple(v_635)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),v_638) else fail-any) else fail-any))) in
        {96}let v_657: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_655),(if success?(2-proj-7-tuple(v_635)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),v_638) else fail-any) else fail-any))) in
        {97}let v_658: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_655),(if success?(2-proj-7-tuple(v_635)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),v_638) else fail-any) else fail-any))) in
        {98}let v_659: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_635)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),v_638) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_655))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (if not-caught-fail(v_658) then (v_656,v_657,v_658) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_660: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_635)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),v_638) else fail-any) else fail-any)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_659)) then cipherstatepack(2-proj-3-tuple(v_659),minnonce) else fail-any),1-proj-3-tuple(v_659),3-proj-3-tuple(v_655)) else fail-any) else fail-any) else fail-any)) in
        {100}let v_661: bitstring = catch-fail(symmetricstateunpack(v_660)) in
        {101}let v_662: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_661))) in
        {102}let v_663: aead = catch-fail(decrypt(1-proj-2-tuple(v_662),2-proj-2-tuple(v_662),3-proj-3-tuple(v_661),3-proj-3-tuple(v_636))) in
        {103}let v_664: bitstring = catch-fail(aeadunpack(v_663)) in
        {104}let v_665: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_661))) in
        {105}let v_666: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_662))) && success?(1-proj-3-tuple(v_661))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-2-tuple(v_665))))) then cipherstatepack(1-proj-2-tuple(v_665),increment_nonce(2-proj-2-tuple(v_662))) else fail-any) else fail-any)) in
        {106}let v_667: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_636)) && (success?(3-proj-3-tuple(v_661)) && success?(1-proj-3-tuple(v_661)))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then (if not-caught-fail(v_663) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then (if not-caught-fail(v_666) then (v_666,3-proj-3-tuple(v_664),1-proj-3-tuple(v_664)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_668: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)))) in
        {108}let v_669: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_636)) && success?(symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then symmetricstatepack(1-proj-3-tuple(v_668),2-proj-3-tuple(v_668),hash(3-proj-3-tuple(v_668),3-proj-3-tuple(v_636))) else fail-any) else fail-any)) in
        {109}let v_670: bitstring = catch-fail((if success?(3-proj-3-tuple(v_636)) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if not-caught-fail(v_669) then (v_669,2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {110}let v_671: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_670),2-proj-7-tuple(v_635),3-proj-7-tuple(v_635),4-proj-7-tuple(v_635),v_638,6-proj-7-tuple(v_635),7-proj-7-tuple(v_635))) in
        {111}let v_672: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_670))) in
        {112}let v_673: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_672),zero)) in
        {113}let v_674: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_672),zero)) in
        {114}let v_675: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_672),zero)) in
        {115}let v_676: bitstring = catch-fail((if success?(2-proj-3-tuple(v_672)) then (if not-caught-fail(v_673) then (if not-caught-fail(v_674) then (if not-caught-fail(v_675) then (v_673,v_674,v_675) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_677: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_676)) then cipherstatepack(1-proj-3-tuple(v_676),minnonce) else fail-any)) in
        {117}let v_678: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_676)) then cipherstatepack(2-proj-3-tuple(v_676),minnonce) else fail-any)) in
        {118}let v_679: bitstring = catch-fail((if success?(1-proj-3-tuple(v_670)) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (1-proj-3-tuple(v_670),v_677,v_678) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let (hs_680: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-7-tuple(v_635))))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (if not-caught-fail(v_640) then (if not-caught-fail(v_646) then (if not-caught-fail(v_653) then (if not-caught-fail(v_660) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (v_637 && 3-proj-3-tuple(v_670)) then (if not-caught-fail(v_671) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (v_671,2-proj-3-tuple(v_670),true,2-proj-3-tuple(v_679),3-proj-3-tuple(v_679)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {120}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {121}insert statestore(alice,bob,sid,statepack_c(hs_680,cs1,cs2))
    ) | (
        {123}!
        {142}get statestore(=alice,=bob,=sid,statepack_c(hs_681: handshakestate,cs1_682: cipherstate,cs2_683: cipherstate)) in
        {124}let hs_684: handshakestate = handshakestatesetcs(hs_681,cs1_682) in
        {125}let v_685: bitstring = catch-fail(handshakestateunpack(hs_684)) in
        {126}let v_686: bitstring = catch-fail((empty,empty,empty)) in
        {127}let v_687: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_685))) in
        {128}let v_688: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_687))) in
        {129}let v_689: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_688),2-proj-2-tuple(v_688),3-proj-3-tuple(v_687),msg_c(alice,bob,sid))) in
        {130}let v_690: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_687))) in
        {131}let v_691: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_688))) && success?(1-proj-3-tuple(v_687))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-2-tuple(v_690))))) then cipherstatepack(1-proj-2-tuple(v_690),increment_nonce(2-proj-2-tuple(v_688))) else fail-any) else fail-any)) in
        {132}let v_692: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_687)) && success?(1-proj-3-tuple(v_687))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-2-tuple(v_688))))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_691) then (v_691,v_689) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {133}let v_693: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_692),2-proj-3-tuple(v_687),3-proj-3-tuple(v_687)))) in
        {134}let v_694: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_692)) && success?(symmetricstatepack(1-proj-2-tuple(v_692),2-proj-3-tuple(v_687),3-proj-3-tuple(v_687)))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_693),hash(3-proj-3-tuple(v_693),2-proj-2-tuple(v_692))) else fail-any) else fail-any)) in
        {135}let v_695: bitstring = catch-fail((if success?(1-proj-7-tuple(v_685)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then (if not-caught-fail(v_694) then (v_694,2-proj-2-tuple(v_692)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {136}let v_696: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_695),2-proj-7-tuple(v_685),3-proj-7-tuple(v_685),4-proj-7-tuple(v_685),5-proj-7-tuple(v_685),6-proj-7-tuple(v_685),7-proj-7-tuple(v_685))) in
        {137}let v_697: bitstring = catch-fail(concat3(1-proj-3-tuple(v_686),2-proj-3-tuple(v_686),2-proj-2-tuple(v_695))) in
        {138}let (hs_698: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-7-tuple(v_685))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (v_696,v_697) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {139}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {140}insert statestore(alice,bob,sid,statepack_d(hs_698,handshakestategetcs(hs_698),cs2_683));
        {141}out(pub, message_c)
    ) | (
        {143}!
        {163}get statestore(=alice,=bob,=sid,statepack_d(hs_699: handshakestate,cs1_700: cipherstate,cs2_701: cipherstate)) in
        {144}let hs_702: handshakestate = handshakestatesetcs(hs_699,cs2_701) in
        {145}in(pub, message_d: bitstring);
        {146}let v_703: bitstring = catch-fail(handshakestateunpack(hs_702)) in
        {147}let v_704: bitstring = catch-fail(deconcat3(message_d)) in
        {148}let v_705: bool = catch-fail(true) in
        {149}let v_706: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_703))) in
        {150}let v_707: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_706))) in
        {151}let v_708: aead = catch-fail(decrypt(1-proj-2-tuple(v_707),2-proj-2-tuple(v_707),3-proj-3-tuple(v_706),3-proj-3-tuple(v_704))) in
        {152}let v_709: bitstring = catch-fail(aeadunpack(v_708)) in
        {153}let v_710: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_706))) in
        {154}let v_711: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_707))) && success?(1-proj-3-tuple(v_706))) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then cipherstatepack(1-proj-2-tuple(v_710),increment_nonce(2-proj-2-tuple(v_707))) else fail-any) else fail-any)) in
        {155}let v_712: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_704)) && (success?(3-proj-3-tuple(v_706)) && success?(1-proj-3-tuple(v_706)))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-2-tuple(v_707))))) then (if not-caught-fail(v_708) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if not-caught-fail(v_711) then (v_711,3-proj-3-tuple(v_709),1-proj-3-tuple(v_709)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_713: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_706),3-proj-3-tuple(v_706)))) in
        {157}let v_714: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_704)) && success?(symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_706),3-proj-3-tuple(v_706)))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then symmetricstatepack(1-proj-3-tuple(v_713),2-proj-3-tuple(v_713),hash(3-proj-3-tuple(v_713),3-proj-3-tuple(v_704))) else fail-any) else fail-any)) in
        {158}let v_715: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_704)) && success?(1-proj-7-tuple(v_703))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if not-caught-fail(v_714) then (v_714,2-proj-3-tuple(v_712),3-proj-3-tuple(v_712)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {159}let v_716: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_715),2-proj-7-tuple(v_703),3-proj-7-tuple(v_703),4-proj-7-tuple(v_703),5-proj-7-tuple(v_703),6-proj-7-tuple(v_703),7-proj-7-tuple(v_703))) in
        {160}let (hs_717: handshakestate,plaintext_d: bitstring,valid_718: bool) = (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-7-tuple(v_703))))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then (if not-caught-fail(v_705) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (v_705 && 3-proj-3-tuple(v_715)) then (if not-caught-fail(v_716) then (v_716,2-proj-3-tuple(v_715),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {161}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {162}event RecvEnd(valid_718)
    ) | (
        {164}event LeakPsk(phase0,alice,bob);
        {165}out(pub, key_psk(alice,bob))
    ) | (
        {166}phase 1;
        {167}event LeakPsk(phase1,alice,bob);
        {168}out(pub, key_psk(alice,bob))
    ) | (
        {169}event LeakS(phase0,alice);
        {170}out(pub, key_s(alice))
    ) | (
        {171}phase 1;
        {172}event LeakS(phase1,alice);
        {173}out(pub, key_s(alice))
    )
) | (
    {174}let v_719: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {175}let s_720: keypair = (if not-caught-fail(v_719) then keypairpack(validkey(v_719),key_s(alice)) else fail-any) in
    {176}out(pub, getpublickey(s_720));
    (
        {177}let e_721: keypair = keypairpack(empty,empty) in
        {178}let v_722: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {179}let rs_723: key = getpublickey((if not-caught-fail(v_722) then keypairpack(validkey(v_722),key_s(charlie)) else fail-any)) in
        {180}let re_724: key = empty in
        {181}let v_725: bitstring = catch-fail(hash(somename,empty)) in
        {182}let v_726: key = catch-fail(v_725) in
        {183}let v_727: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {184}let v_728: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then symmetricstatepack(v_727,v_726,v_725) else fail-any) else fail-any) else fail-any))) in
        {185}let v_729: symmetricstate = catch-fail((if success?((if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then symmetricstatepack(v_727,v_726,v_725) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_728),hash(3-proj-3-tuple(v_728),empty)) else fail-any) else fail-any)) in
        {186}let v_730: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {187}let v_731: symmetricstate = catch-fail((if success?(getpublickey(s_720)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then symmetricstatepack(1-proj-3-tuple(v_730),2-proj-3-tuple(v_730),hash(3-proj-3-tuple(v_730),getpublickey(s_720))) else fail-any) else fail-any)) in
        {188}let v_732: bitstring = catch-fail(symmetricstateunpack(v_731)) in
        {189}let v_733: symmetricstate = catch-fail((if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_732),hash(3-proj-3-tuple(v_732),rs_723)) else fail-any)) in
        {190}let hs_734: handshakestate = (if not-caught-fail(v_729) then (if not-caught-fail(v_731) then (if not-caught-fail(v_733) then handshakestatepack(v_733,s_720,e_721,rs_723,re_724,key_psk(alice,charlie),true) else fail-any) else fail-any) else fail-any) in
        {191}insert statestore(alice,charlie,sid,statepack_a(hs_734))
    ) | (
        {242}get statestore(=alice,=charlie,=sid,statepack_a(hs_735: handshakestate)) in
        {192}let v_736: bitstring = catch-fail(handshakestateunpack(hs_735)) in
        {193}let v_737: bitstring = catch-fail((empty,empty,empty)) in
        {194}let v_738: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_736))) in
        {195}let v_739: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_738),6-proj-7-tuple(v_736))) in
        {196}let v_740: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_738),6-proj-7-tuple(v_736))) in
        {197}let v_741: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_738),6-proj-7-tuple(v_736))) in
        {198}let v_742: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_736)) && success?(2-proj-3-tuple(v_738))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (if not-caught-fail(v_741) then (v_739,v_740,v_741) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_743: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_738),1-proj-3-tuple(v_742),3-proj-3-tuple(v_738)))) in
        {200}let v_744: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_742)) && success?(symmetricstatepack(1-proj-3-tuple(v_738),1-proj-3-tuple(v_742),3-proj-3-tuple(v_738)))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then symmetricstatepack(1-proj-3-tuple(v_743),2-proj-3-tuple(v_743),hash(3-proj-3-tuple(v_743),2-proj-3-tuple(v_742))) else fail-any) else fail-any))) in
        {201}let v_745: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_736)) && success?(1-proj-7-tuple(v_736))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_742)) then cipherstatepack(3-proj-3-tuple(v_742),minnonce) else fail-any),1-proj-3-tuple(v_742),3-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_746: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {203}let v_747: keypair = catch-fail((if not-caught-fail(v_746) then keypairpack(validkey(v_746),key_e(alice,charlie,sid)) else fail-any)) in
        {204}let v_748: bitstring = catch-fail(getpublickey(v_747)) in
        {205}let v_749: bitstring = catch-fail(symmetricstateunpack(v_745)) in
        {206}let v_750: symmetricstate = catch-fail((if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then symmetricstatepack(1-proj-3-tuple(v_749),2-proj-3-tuple(v_749),hash(3-proj-3-tuple(v_749),v_748)) else fail-any)) in
        {207}let v_751: bitstring = catch-fail(symmetricstateunpack(v_750)) in
        {208}let v_752: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_751),getpublickey(v_747))) in
        {209}let v_753: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_751),getpublickey(v_747))) in
        {210}let v_754: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_751),getpublickey(v_747))) in
        {211}let v_755: bitstring = catch-fail((if (success?(getpublickey(v_747)) && success?(2-proj-3-tuple(v_751))) then (if not-caught-fail(v_752) then (if not-caught-fail(v_753) then (if not-caught-fail(v_754) then (v_752,v_753,v_754) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_756: symmetricstate = catch-fail((if success?(getpublickey(v_747)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_755)) then cipherstatepack(2-proj-3-tuple(v_755),minnonce) else fail-any),1-proj-3-tuple(v_755),3-proj-3-tuple(v_751)) else fail-any) else fail-any) else fail-any)) in
        {213}let v_757: bitstring = catch-fail(keypairunpack(v_747)) in
        {214}let v_758: bitstring = catch-fail(symmetricstateunpack(v_756)) in
        {215}let v_759: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_758),(if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {216}let v_760: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_758),(if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {217}let v_761: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_758),(if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {218}let v_762: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_758))) then (if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (v_759,v_760,v_761) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_763: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_736)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_762)) then cipherstatepack(2-proj-3-tuple(v_762),minnonce) else fail-any),1-proj-3-tuple(v_762),3-proj-3-tuple(v_758)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_764: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_736))) in
        {221}let v_765: bitstring = catch-fail(symmetricstateunpack(v_763)) in
        {222}let v_766: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_765),(if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {223}let v_767: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_765),(if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {224}let v_768: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_765),(if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {225}let v_769: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_765))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (if not-caught-fail(v_768) then (v_766,v_767,v_768) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let v_770: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_736)) && success?(2-proj-7-tuple(v_736))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_769)) then cipherstatepack(2-proj-3-tuple(v_769),minnonce) else fail-any),1-proj-3-tuple(v_769),3-proj-3-tuple(v_765)) else fail-any) else fail-any) else fail-any)) in
        {227}let v_771: bitstring = catch-fail(symmetricstateunpack(v_770)) in
        {228}let v_772: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {229}let v_773: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_772),2-proj-2-tuple(v_772),3-proj-3-tuple(v_771),msg_a(alice,charlie,sid))) in
        {230}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {231}let v_775: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_772))) && success?(1-proj-3-tuple(v_771))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then cipherstatepack(1-proj-2-tuple(v_774),increment_nonce(2-proj-2-tuple(v_772))) else fail-any) else fail-any)) in
        {232}let v_776: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_771)) && success?(1-proj-3-tuple(v_771))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_773) then (if not-caught-fail(v_775) then (v_775,v_773) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_777: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_776),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) in
        {234}let v_778: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_776)) && success?(symmetricstatepack(1-proj-2-tuple(v_776),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then symmetricstatepack(1-proj-3-tuple(v_777),2-proj-3-tuple(v_777),hash(3-proj-3-tuple(v_777),2-proj-2-tuple(v_776))) else fail-any) else fail-any)) in
        {235}let v_779: bitstring = catch-fail((if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,2-proj-2-tuple(v_776)) else fail-any) else fail-any) else fail-any)) in
        {236}let v_780: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_779),2-proj-7-tuple(v_736),v_747,4-proj-7-tuple(v_736),5-proj-7-tuple(v_736),6-proj-7-tuple(v_736),7-proj-7-tuple(v_736))) in
        {237}let v_781: bitstring = catch-fail(concat3(v_748,2-proj-3-tuple(v_737),2-proj-2-tuple(v_779))) in
        {238}let (hs_782: handshakestate,message_a_783: bitstring) = (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-7-tuple(v_736))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_745) then (if not-caught-fail(v_747) then (if not-caught-fail(v_748) then (if not-caught-fail(v_750) then (if not-caught-fail(v_756) then (if not-caught-fail(v_763) then (if not-caught-fail(v_770) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (v_780,v_781) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {239}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {240}insert statestore(alice,charlie,sid,statepack_b(hs_782));
        {241}out(pub, message_a_783)
    ) | (
        {292}get statestore(=alice,=charlie,=sid,statepack_b(hs_784: handshakestate)) in
        {243}in(pub, message_b_785: bitstring);
        {244}let v_786: bitstring = catch-fail(handshakestateunpack(hs_784)) in
        {245}let v_787: bitstring = catch-fail(deconcat3(message_b_785)) in
        {246}let v_788: bool = catch-fail(true) in
        {247}let v_789: key = catch-fail(1-proj-3-tuple(v_787)) in
        {248}let v_790: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_786))) in
        {249}let v_791: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_786)) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_790),hash(3-proj-3-tuple(v_790),v_789)) else fail-any) else fail-any)) in
        {250}let v_792: bitstring = catch-fail(symmetricstateunpack(v_791)) in
        {251}let v_793: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_792),v_789)) in
        {252}let v_794: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_792),v_789)) in
        {253}let v_795: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_792),v_789)) in
        {254}let v_796: bitstring = catch-fail((if success?(2-proj-3-tuple(v_792)) then (if not-caught-fail(v_793) then (if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (v_793,v_794,v_795) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_797: symmetricstate = catch-fail((if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_796)) then cipherstatepack(2-proj-3-tuple(v_796),minnonce) else fail-any),1-proj-3-tuple(v_796),3-proj-3-tuple(v_792)) else fail-any) else fail-any)) in
        {256}let v_798: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_786))) in
        {257}let v_799: bitstring = catch-fail(symmetricstateunpack(v_797)) in
        {258}let v_800: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_799),(if success?(3-proj-7-tuple(v_786)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_789) else fail-any) else fail-any))) in
        {259}let v_801: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_799),(if success?(3-proj-7-tuple(v_786)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_789) else fail-any) else fail-any))) in
        {260}let v_802: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_799),(if success?(3-proj-7-tuple(v_786)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_789) else fail-any) else fail-any))) in
        {261}let v_803: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_786)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_789) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_799))) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then (if not-caught-fail(v_802) then (v_800,v_801,v_802) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_804: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_786)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_789) else fail-any) else fail-any)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_803)) then cipherstatepack(2-proj-3-tuple(v_803),minnonce) else fail-any),1-proj-3-tuple(v_803),3-proj-3-tuple(v_799)) else fail-any) else fail-any) else fail-any)) in
        {263}let v_805: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_786))) in
        {264}let v_806: bitstring = catch-fail(symmetricstateunpack(v_804)) in
        {265}let v_807: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_806),(if success?(2-proj-7-tuple(v_786)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then dhexp(2-proj-2-tuple(v_805),v_789) else fail-any) else fail-any))) in
        {266}let v_808: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_806),(if success?(2-proj-7-tuple(v_786)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then dhexp(2-proj-2-tuple(v_805),v_789) else fail-any) else fail-any))) in
        {267}let v_809: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_806),(if success?(2-proj-7-tuple(v_786)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then dhexp(2-proj-2-tuple(v_805),v_789) else fail-any) else fail-any))) in
        {268}let v_810: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_786)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then dhexp(2-proj-2-tuple(v_805),v_789) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_806))) then (if not-caught-fail(v_807) then (if not-caught-fail(v_808) then (if not-caught-fail(v_809) then (v_807,v_808,v_809) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {269}let v_811: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_786)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then dhexp(2-proj-2-tuple(v_805),v_789) else fail-any) else fail-any)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_810)) then cipherstatepack(2-proj-3-tuple(v_810),minnonce) else fail-any),1-proj-3-tuple(v_810),3-proj-3-tuple(v_806)) else fail-any) else fail-any) else fail-any)) in
        {270}let v_812: bitstring = catch-fail(symmetricstateunpack(v_811)) in
        {271}let v_813: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_812))) in
        {272}let v_814: aead = catch-fail(decrypt(1-proj-2-tuple(v_813),2-proj-2-tuple(v_813),3-proj-3-tuple(v_812),3-proj-3-tuple(v_787))) in
        {273}let v_815: bitstring = catch-fail(aeadunpack(v_814)) in
        {274}let v_816: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_812))) in
        {275}let v_817: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_813))) && success?(1-proj-3-tuple(v_812))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then cipherstatepack(1-proj-2-tuple(v_816),increment_nonce(2-proj-2-tuple(v_813))) else fail-any) else fail-any)) in
        {276}let v_818: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_787)) && (success?(3-proj-3-tuple(v_812)) && success?(1-proj-3-tuple(v_812)))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then (if not-caught-fail(v_814) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if not-caught-fail(v_817) then (v_817,3-proj-3-tuple(v_815),1-proj-3-tuple(v_815)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_819: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)))) in
        {278}let v_820: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_787)) && success?(symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),hash(3-proj-3-tuple(v_819),3-proj-3-tuple(v_787))) else fail-any) else fail-any)) in
        {279}let v_821: bitstring = catch-fail((if success?(3-proj-3-tuple(v_787)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if not-caught-fail(v_820) then (v_820,2-proj-3-tuple(v_818),3-proj-3-tuple(v_818)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_822: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_821),2-proj-7-tuple(v_786),3-proj-7-tuple(v_786),4-proj-7-tuple(v_786),v_789,6-proj-7-tuple(v_786),7-proj-7-tuple(v_786))) in
        {281}let v_823: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_821))) in
        {282}let v_824: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_823),zero)) in
        {283}let v_825: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_823),zero)) in
        {284}let v_826: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_823),zero)) in
        {285}let v_827: bitstring = catch-fail((if success?(2-proj-3-tuple(v_823)) then (if not-caught-fail(v_824) then (if not-caught-fail(v_825) then (if not-caught-fail(v_826) then (v_824,v_825,v_826) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_828: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_827)) then cipherstatepack(1-proj-3-tuple(v_827),minnonce) else fail-any)) in
        {287}let v_829: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_827)) then cipherstatepack(2-proj-3-tuple(v_827),minnonce) else fail-any)) in
        {288}let v_830: bitstring = catch-fail((if success?(1-proj-3-tuple(v_821)) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_828) then (if not-caught-fail(v_829) then (1-proj-3-tuple(v_821),v_828,v_829) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {289}let (hs_831: handshakestate,plaintext_b_832: bitstring,valid_833: bool,cs1_834: cipherstate,cs2_835: cipherstate) = (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-7-tuple(v_786))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_788) then (if not-caught-fail(v_789) then (if not-caught-fail(v_791) then (if not-caught-fail(v_797) then (if not-caught-fail(v_804) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (v_788 && 3-proj-3-tuple(v_821)) then (if not-caught-fail(v_822) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (v_822,2-proj-3-tuple(v_821),true,2-proj-3-tuple(v_830),3-proj-3-tuple(v_830)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {290}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_832);
        {291}insert statestore(alice,charlie,sid,statepack_c(hs_831,cs1_834,cs2_835))
    ) | (
        {293}!
        {312}get statestore(=alice,=charlie,=sid,statepack_c(hs_836: handshakestate,cs1_837: cipherstate,cs2_838: cipherstate)) in
        {294}let hs_839: handshakestate = handshakestatesetcs(hs_836,cs1_837) in
        {295}let v_840: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {296}let v_841: bitstring = catch-fail((empty,empty,empty)) in
        {297}let v_842: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_840))) in
        {298}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {299}let v_844: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_843),2-proj-2-tuple(v_843),3-proj-3-tuple(v_842),msg_c(alice,charlie,sid))) in
        {300}let v_845: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {301}let v_846: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_843))) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then cipherstatepack(1-proj-2-tuple(v_845),increment_nonce(2-proj-2-tuple(v_843))) else fail-any) else fail-any)) in
        {302}let v_847: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (v_846,v_844) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_848: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) in
        {304}let v_849: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_847)) && success?(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_848),hash(3-proj-3-tuple(v_848),2-proj-2-tuple(v_847))) else fail-any) else fail-any)) in
        {305}let v_850: bitstring = catch-fail((if success?(1-proj-7-tuple(v_840)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if not-caught-fail(v_849) then (v_849,2-proj-2-tuple(v_847)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_851: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_850),2-proj-7-tuple(v_840),3-proj-7-tuple(v_840),4-proj-7-tuple(v_840),5-proj-7-tuple(v_840),6-proj-7-tuple(v_840),7-proj-7-tuple(v_840))) in
        {307}let v_852: bitstring = catch-fail(concat3(1-proj-3-tuple(v_841),2-proj-3-tuple(v_841),2-proj-2-tuple(v_850))) in
        {308}let (hs_853: handshakestate,message_c_854: bitstring) = (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-7-tuple(v_840))))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (v_851,v_852) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {309}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {310}insert statestore(alice,charlie,sid,statepack_d(hs_853,handshakestategetcs(hs_853),cs2_838));
        {311}out(pub, message_c_854)
    ) | (
        {313}!
        {333}get statestore(=alice,=charlie,=sid,statepack_d(hs_855: handshakestate,cs1_856: cipherstate,cs2_857: cipherstate)) in
        {314}let hs_858: handshakestate = handshakestatesetcs(hs_855,cs2_857) in
        {315}in(pub, message_d_859: bitstring);
        {316}let v_860: bitstring = catch-fail(handshakestateunpack(hs_858)) in
        {317}let v_861: bitstring = catch-fail(deconcat3(message_d_859)) in
        {318}let v_862: bool = catch-fail(true) in
        {319}let v_863: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_860))) in
        {320}let v_864: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {321}let v_865: aead = catch-fail(decrypt(1-proj-2-tuple(v_864),2-proj-2-tuple(v_864),3-proj-3-tuple(v_863),3-proj-3-tuple(v_861))) in
        {322}let v_866: bitstring = catch-fail(aeadunpack(v_865)) in
        {323}let v_867: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {324}let v_868: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_864))) && success?(1-proj-3-tuple(v_863))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then cipherstatepack(1-proj-2-tuple(v_867),increment_nonce(2-proj-2-tuple(v_864))) else fail-any) else fail-any)) in
        {325}let v_869: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_861)) && (success?(3-proj-3-tuple(v_863)) && success?(1-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-2-tuple(v_864))))) then (if not-caught-fail(v_865) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then (if not-caught-fail(v_868) then (v_868,3-proj-3-tuple(v_866),1-proj-3-tuple(v_866)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {326}let v_870: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) in
        {327}let v_871: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_861)) && success?(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_870),hash(3-proj-3-tuple(v_870),3-proj-3-tuple(v_861))) else fail-any) else fail-any)) in
        {328}let v_872: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_861)) && success?(1-proj-7-tuple(v_860))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then (if not-caught-fail(v_871) then (v_871,2-proj-3-tuple(v_869),3-proj-3-tuple(v_869)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {329}let v_873: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_872),2-proj-7-tuple(v_860),3-proj-7-tuple(v_860),4-proj-7-tuple(v_860),5-proj-7-tuple(v_860),6-proj-7-tuple(v_860),7-proj-7-tuple(v_860))) in
        {330}let (hs_874: handshakestate,plaintext_d_875: bitstring,valid_876: bool) = (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-7-tuple(v_860))))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then (if not-caught-fail(v_862) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then (if (v_862 && 3-proj-3-tuple(v_872)) then (if not-caught-fail(v_873) then (v_873,2-proj-3-tuple(v_872),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {331}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_875);
        {332}event RecvEnd(valid_876)
    ) | (
        {334}event LeakPsk(phase0,alice,charlie);
        {335}out(pub, key_psk(alice,charlie))
    ) | (
        {336}phase 1;
        {337}event LeakPsk(phase1,alice,charlie);
        {338}out(pub, key_psk(alice,charlie))
    ) | (
        {339}event LeakS(phase0,alice);
        {340}out(pub, key_s(alice))
    ) | (
        {341}phase 1;
        {342}event LeakS(phase1,alice);
        {343}out(pub, key_s(alice))
    )
) | (
    {344}let v_877: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {345}let s_878: keypair = (if not-caught-fail(v_877) then keypairpack(validkey(v_877),key_s(bob)) else fail-any) in
    {346}out(pub, getpublickey(s_878));
    (
        {347}let e_879: keypair = keypairpack(empty,empty) in
        {348}let v_880: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {349}let rs_881: key = getpublickey((if not-caught-fail(v_880) then keypairpack(validkey(v_880),key_s(alice)) else fail-any)) in
        {350}let re_882: key = empty in
        {351}let v_883: bitstring = catch-fail(hash(somename,empty)) in
        {352}let v_884: key = catch-fail(v_883) in
        {353}let v_885: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {354}let v_886: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_883) then (if not-caught-fail(v_884) then (if not-caught-fail(v_885) then symmetricstatepack(v_885,v_884,v_883) else fail-any) else fail-any) else fail-any))) in
        {355}let v_887: symmetricstate = catch-fail((if success?((if not-caught-fail(v_883) then (if not-caught-fail(v_884) then (if not-caught-fail(v_885) then symmetricstatepack(v_885,v_884,v_883) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then symmetricstatepack(1-proj-3-tuple(v_886),2-proj-3-tuple(v_886),hash(3-proj-3-tuple(v_886),empty)) else fail-any) else fail-any)) in
        {356}let v_888: bitstring = catch-fail(symmetricstateunpack(v_887)) in
        {357}let v_889: symmetricstate = catch-fail((if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then symmetricstatepack(1-proj-3-tuple(v_888),2-proj-3-tuple(v_888),hash(3-proj-3-tuple(v_888),rs_881)) else fail-any)) in
        {358}let v_890: bitstring = catch-fail(symmetricstateunpack(v_889)) in
        {359}let v_891: symmetricstate = catch-fail((if success?(getpublickey(s_878)) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then symmetricstatepack(1-proj-3-tuple(v_890),2-proj-3-tuple(v_890),hash(3-proj-3-tuple(v_890),getpublickey(s_878))) else fail-any) else fail-any)) in
        {360}let hs_892: handshakestate = (if not-caught-fail(v_887) then (if not-caught-fail(v_889) then (if not-caught-fail(v_891) then handshakestatepack(v_891,s_878,e_879,rs_881,re_882,key_psk(alice,bob),false) else fail-any) else fail-any) else fail-any) in
        {361}insert statestore(bob,alice,sid,statepack_a(hs_892))
    ) | (
        {411}get statestore(=bob,=alice,=sid,statepack_a(hs_893: handshakestate)) in
        {362}in(pub, message_a_894: bitstring);
        {363}let v_895: bitstring = catch-fail(handshakestateunpack(hs_893)) in
        {364}let v_896: bitstring = catch-fail(deconcat3(message_a_894)) in
        {365}let v_897: bool = catch-fail(true) in
        {366}let v_898: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_895))) in
        {367}let v_899: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_898),6-proj-7-tuple(v_895))) in
        {368}let v_900: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_898),6-proj-7-tuple(v_895))) in
        {369}let v_901: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_898),6-proj-7-tuple(v_895))) in
        {370}let v_902: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_895)) && success?(2-proj-3-tuple(v_898))) then (if not-caught-fail(v_899) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (v_899,v_900,v_901) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {371}let v_903: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_898),1-proj-3-tuple(v_902),3-proj-3-tuple(v_898)))) in
        {372}let v_904: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_902)) && success?(symmetricstatepack(1-proj-3-tuple(v_898),1-proj-3-tuple(v_902),3-proj-3-tuple(v_898)))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then symmetricstatepack(1-proj-3-tuple(v_903),2-proj-3-tuple(v_903),hash(3-proj-3-tuple(v_903),2-proj-3-tuple(v_902))) else fail-any) else fail-any))) in
        {373}let v_905: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_895)) && success?(1-proj-7-tuple(v_895))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_902)) then cipherstatepack(3-proj-3-tuple(v_902),minnonce) else fail-any),1-proj-3-tuple(v_902),3-proj-3-tuple(v_904)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_906: key = catch-fail(1-proj-3-tuple(v_896)) in
        {375}let v_907: bitstring = catch-fail(symmetricstateunpack(v_905)) in
        {376}let v_908: symmetricstate = catch-fail((if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then symmetricstatepack(1-proj-3-tuple(v_907),2-proj-3-tuple(v_907),hash(3-proj-3-tuple(v_907),v_906)) else fail-any)) in
        {377}let v_909: bitstring = catch-fail(symmetricstateunpack(v_908)) in
        {378}let v_910: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_909),v_906)) in
        {379}let v_911: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_909),v_906)) in
        {380}let v_912: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_909),v_906)) in
        {381}let v_913: bitstring = catch-fail((if success?(2-proj-3-tuple(v_909)) then (if not-caught-fail(v_910) then (if not-caught-fail(v_911) then (if not-caught-fail(v_912) then (v_910,v_911,v_912) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_914: symmetricstate = catch-fail((if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_913)) then cipherstatepack(2-proj-3-tuple(v_913),minnonce) else fail-any),1-proj-3-tuple(v_913),3-proj-3-tuple(v_909)) else fail-any) else fail-any)) in
        {383}let v_915: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_895))) in
        {384}let v_916: bitstring = catch-fail(symmetricstateunpack(v_914)) in
        {385}let v_917: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_916),(if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),v_906) else fail-any) else fail-any))) in
        {386}let v_918: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_916),(if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),v_906) else fail-any) else fail-any))) in
        {387}let v_919: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_916),(if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),v_906) else fail-any) else fail-any))) in
        {388}let v_920: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),v_906) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_916))) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (v_917,v_918,v_919) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {389}let v_921: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_895)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),v_906) else fail-any) else fail-any)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_920)) then cipherstatepack(2-proj-3-tuple(v_920),minnonce) else fail-any),1-proj-3-tuple(v_920),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any)) in
        {390}let v_922: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_895))) in
        {391}let v_923: bitstring = catch-fail(symmetricstateunpack(v_921)) in
        {392}let v_924: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_923),(if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),4-proj-7-tuple(v_895)) else fail-any) else fail-any))) in
        {393}let v_925: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_923),(if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),4-proj-7-tuple(v_895)) else fail-any) else fail-any))) in
        {394}let v_926: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_923),(if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),4-proj-7-tuple(v_895)) else fail-any) else fail-any))) in
        {395}let v_927: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),4-proj-7-tuple(v_895)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_923))) then (if not-caught-fail(v_924) then (if not-caught-fail(v_925) then (if not-caught-fail(v_926) then (v_924,v_925,v_926) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {396}let v_928: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_895)) && success?(2-proj-7-tuple(v_895))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),4-proj-7-tuple(v_895)) else fail-any) else fail-any)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_927)) then cipherstatepack(2-proj-3-tuple(v_927),minnonce) else fail-any),1-proj-3-tuple(v_927),3-proj-3-tuple(v_923)) else fail-any) else fail-any) else fail-any)) in
        {397}let v_929: bitstring = catch-fail(symmetricstateunpack(v_928)) in
        {398}let v_930: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {399}let v_931: aead = catch-fail(decrypt(1-proj-2-tuple(v_930),2-proj-2-tuple(v_930),3-proj-3-tuple(v_929),3-proj-3-tuple(v_896))) in
        {400}let v_932: bitstring = catch-fail(aeadunpack(v_931)) in
        {401}let v_933: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {402}let v_934: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_930))) && success?(1-proj-3-tuple(v_929))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-2-tuple(v_933))))) then cipherstatepack(1-proj-2-tuple(v_933),increment_nonce(2-proj-2-tuple(v_930))) else fail-any) else fail-any)) in
        {403}let v_935: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_896)) && (success?(3-proj-3-tuple(v_929)) && success?(1-proj-3-tuple(v_929)))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then (if not-caught-fail(v_931) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if not-caught-fail(v_934) then (v_934,3-proj-3-tuple(v_932),1-proj-3-tuple(v_932)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {404}let v_936: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) in
        {405}let v_937: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_896)) && success?(symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_936),hash(3-proj-3-tuple(v_936),3-proj-3-tuple(v_896))) else fail-any) else fail-any)) in
        {406}let v_938: bitstring = catch-fail((if success?(3-proj-3-tuple(v_896)) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if not-caught-fail(v_937) then (v_937,2-proj-3-tuple(v_935),3-proj-3-tuple(v_935)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_939: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_938),2-proj-7-tuple(v_895),3-proj-7-tuple(v_895),4-proj-7-tuple(v_895),v_906,6-proj-7-tuple(v_895),7-proj-7-tuple(v_895))) in
        {408}let (hs_940: handshakestate,plaintext_a: bitstring,valid_941: bool) = (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-7-tuple(v_895))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_905) then (if not-caught-fail(v_906) then (if not-caught-fail(v_908) then (if not-caught-fail(v_914) then (if not-caught-fail(v_921) then (if not-caught-fail(v_928) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if (v_897 && 3-proj-3-tuple(v_938)) then (if not-caught-fail(v_939) then (v_939,2-proj-3-tuple(v_938),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {409}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {410}insert statestore(bob,alice,sid,statepack_b(hs_940))
    ) | (
        {462}get statestore(=bob,=alice,=sid,statepack_b(hs_942: handshakestate)) in
        {412}let v_943: bitstring = catch-fail(handshakestateunpack(hs_942)) in
        {413}let v_944: bitstring = catch-fail((empty,empty,empty)) in
        {414}let v_945: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {415}let v_946: keypair = catch-fail((if not-caught-fail(v_945) then keypairpack(validkey(v_945),key_e(bob,alice,sid)) else fail-any)) in
        {416}let v_947: bitstring = catch-fail(getpublickey(v_946)) in
        {417}let v_948: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_943))) in
        {418}let v_949: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_943)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then symmetricstatepack(1-proj-3-tuple(v_948),2-proj-3-tuple(v_948),hash(3-proj-3-tuple(v_948),v_947)) else fail-any) else fail-any)) in
        {419}let v_950: bitstring = catch-fail(symmetricstateunpack(v_949)) in
        {420}let v_951: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_950),getpublickey(v_946))) in
        {421}let v_952: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_950),getpublickey(v_946))) in
        {422}let v_953: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_950),getpublickey(v_946))) in
        {423}let v_954: bitstring = catch-fail((if (success?(getpublickey(v_946)) && success?(2-proj-3-tuple(v_950))) then (if not-caught-fail(v_951) then (if not-caught-fail(v_952) then (if not-caught-fail(v_953) then (v_951,v_952,v_953) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_955: symmetricstate = catch-fail((if success?(getpublickey(v_946)) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_954)) then cipherstatepack(2-proj-3-tuple(v_954),minnonce) else fail-any),1-proj-3-tuple(v_954),3-proj-3-tuple(v_950)) else fail-any) else fail-any) else fail-any)) in
        {425}let v_956: bitstring = catch-fail(keypairunpack(v_946)) in
        {426}let v_957: bitstring = catch-fail(symmetricstateunpack(v_955)) in
        {427}let v_958: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_957),(if success?(5-proj-7-tuple(v_943)) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then dhexp(2-proj-2-tuple(v_956),5-proj-7-tuple(v_943)) else fail-any) else fail-any))) in
        {428}let v_959: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_957),(if success?(5-proj-7-tuple(v_943)) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then dhexp(2-proj-2-tuple(v_956),5-proj-7-tuple(v_943)) else fail-any) else fail-any))) in
        {429}let v_960: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_957),(if success?(5-proj-7-tuple(v_943)) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then dhexp(2-proj-2-tuple(v_956),5-proj-7-tuple(v_943)) else fail-any) else fail-any))) in
        {430}let v_961: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_943)) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then dhexp(2-proj-2-tuple(v_956),5-proj-7-tuple(v_943)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_957))) then (if not-caught-fail(v_958) then (if not-caught-fail(v_959) then (if not-caught-fail(v_960) then (v_958,v_959,v_960) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_962: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_943)) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then dhexp(2-proj-2-tuple(v_956),5-proj-7-tuple(v_943)) else fail-any) else fail-any)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_961)) then cipherstatepack(2-proj-3-tuple(v_961),minnonce) else fail-any),1-proj-3-tuple(v_961),3-proj-3-tuple(v_957)) else fail-any) else fail-any) else fail-any)) in
        {432}let v_963: bitstring = catch-fail(keypairunpack(v_946)) in
        {433}let v_964: bitstring = catch-fail(symmetricstateunpack(v_962)) in
        {434}let v_965: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_964),(if success?(4-proj-7-tuple(v_943)) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-2-tuple(v_963))))) then dhexp(2-proj-2-tuple(v_963),4-proj-7-tuple(v_943)) else fail-any) else fail-any))) in
        {435}let v_966: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_964),(if success?(4-proj-7-tuple(v_943)) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-2-tuple(v_963))))) then dhexp(2-proj-2-tuple(v_963),4-proj-7-tuple(v_943)) else fail-any) else fail-any))) in
        {436}let v_967: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_964),(if success?(4-proj-7-tuple(v_943)) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-2-tuple(v_963))))) then dhexp(2-proj-2-tuple(v_963),4-proj-7-tuple(v_943)) else fail-any) else fail-any))) in
        {437}let v_968: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_943)) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-2-tuple(v_963))))) then dhexp(2-proj-2-tuple(v_963),4-proj-7-tuple(v_943)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_964))) then (if not-caught-fail(v_965) then (if not-caught-fail(v_966) then (if not-caught-fail(v_967) then (v_965,v_966,v_967) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {438}let v_969: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_943)) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-2-tuple(v_963))))) then dhexp(2-proj-2-tuple(v_963),4-proj-7-tuple(v_943)) else fail-any) else fail-any)) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_968)) then cipherstatepack(2-proj-3-tuple(v_968),minnonce) else fail-any),1-proj-3-tuple(v_968),3-proj-3-tuple(v_964)) else fail-any) else fail-any) else fail-any)) in
        {439}let v_970: bitstring = catch-fail(symmetricstateunpack(v_969)) in
        {440}let v_971: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_970))) in
        {441}let v_972: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_971),2-proj-2-tuple(v_971),3-proj-3-tuple(v_970),msg_b(bob,alice,sid))) in
        {442}let v_973: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_970))) in
        {443}let v_974: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_971))) && success?(1-proj-3-tuple(v_970))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-2-tuple(v_973))))) then cipherstatepack(1-proj-2-tuple(v_973),increment_nonce(2-proj-2-tuple(v_971))) else fail-any) else fail-any)) in
        {444}let v_975: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_970)) && success?(1-proj-3-tuple(v_970))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-2-tuple(v_971))))) then (if not-caught-fail(v_972) then (if not-caught-fail(v_974) then (v_974,v_972) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_976: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_975),2-proj-3-tuple(v_970),3-proj-3-tuple(v_970)))) in
        {446}let v_977: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_975)) && success?(symmetricstatepack(1-proj-2-tuple(v_975),2-proj-3-tuple(v_970),3-proj-3-tuple(v_970)))) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then symmetricstatepack(1-proj-3-tuple(v_976),2-proj-3-tuple(v_976),hash(3-proj-3-tuple(v_976),2-proj-2-tuple(v_975))) else fail-any) else fail-any)) in
        {447}let v_978: bitstring = catch-fail((if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-2-tuple(v_975))))) then (if not-caught-fail(v_977) then (v_977,2-proj-2-tuple(v_975)) else fail-any) else fail-any) else fail-any)) in
        {448}let v_979: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_978),2-proj-7-tuple(v_943),v_946,4-proj-7-tuple(v_943),5-proj-7-tuple(v_943),6-proj-7-tuple(v_943),7-proj-7-tuple(v_943))) in
        {449}let v_980: bitstring = catch-fail(concat3(v_947,2-proj-3-tuple(v_944),2-proj-2-tuple(v_978))) in
        {450}let v_981: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_978))) in
        {451}let v_982: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_981),zero)) in
        {452}let v_983: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_981),zero)) in
        {453}let v_984: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_981),zero)) in
        {454}let v_985: bitstring = catch-fail((if success?(2-proj-3-tuple(v_981)) then (if not-caught-fail(v_982) then (if not-caught-fail(v_983) then (if not-caught-fail(v_984) then (v_982,v_983,v_984) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {455}let v_986: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_985)) then cipherstatepack(1-proj-3-tuple(v_985),minnonce) else fail-any)) in
        {456}let v_987: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_985)) then cipherstatepack(2-proj-3-tuple(v_985),minnonce) else fail-any)) in
        {457}let v_988: bitstring = catch-fail((if success?(1-proj-2-tuple(v_978)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-3-tuple(v_985))))) then (if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (1-proj-2-tuple(v_978),v_986,v_987) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {458}let (hs_989: handshakestate,message_b_990: bitstring,cs1_991: cipherstate,cs2_992: cipherstate) = (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-7-tuple(v_943))))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then (if not-caught-fail(v_946) then (if not-caught-fail(v_947) then (if not-caught-fail(v_949) then (if not-caught-fail(v_955) then (if not-caught-fail(v_962) then (if not-caught-fail(v_969) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then (if not-caught-fail(v_979) then (if not-caught-fail(v_980) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (v_979,v_980,2-proj-3-tuple(v_988),3-proj-3-tuple(v_988)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {459}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {460}insert statestore(bob,alice,sid,statepack_c(hs_989,cs1_991,cs2_992));
        {461}out(pub, message_b_990)
    ) | (
        {463}!
        {483}get statestore(=bob,=alice,=sid,statepack_c(hs_993: handshakestate,cs1_994: cipherstate,cs2_995: cipherstate)) in
        {464}let hs_996: handshakestate = handshakestatesetcs(hs_993,cs1_994) in
        {465}in(pub, message_c_997: bitstring);
        {466}let v_998: bitstring = catch-fail(handshakestateunpack(hs_996)) in
        {467}let v_999: bitstring = catch-fail(deconcat3(message_c_997)) in
        {468}let v_1000: bool = catch-fail(true) in
        {469}let v_1001: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_998))) in
        {470}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1001))) in
        {471}let v_1003: aead = catch-fail(decrypt(1-proj-2-tuple(v_1002),2-proj-2-tuple(v_1002),3-proj-3-tuple(v_1001),3-proj-3-tuple(v_999))) in
        {472}let v_1004: bitstring = catch-fail(aeadunpack(v_1003)) in
        {473}let v_1005: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1001))) in
        {474}let v_1006: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1002))) && success?(1-proj-3-tuple(v_1001))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-2-tuple(v_1005))))) then cipherstatepack(1-proj-2-tuple(v_1005),increment_nonce(2-proj-2-tuple(v_1002))) else fail-any) else fail-any)) in
        {475}let v_1007: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_999)) && (success?(3-proj-3-tuple(v_1001)) && success?(1-proj-3-tuple(v_1001)))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then (if not-caught-fail(v_1003) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,3-proj-3-tuple(v_1004),1-proj-3-tuple(v_1004)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_1008: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1007),2-proj-3-tuple(v_1001),3-proj-3-tuple(v_1001)))) in
        {477}let v_1009: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_999)) && success?(symmetricstatepack(1-proj-3-tuple(v_1007),2-proj-3-tuple(v_1001),3-proj-3-tuple(v_1001)))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then symmetricstatepack(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1008),hash(3-proj-3-tuple(v_1008),3-proj-3-tuple(v_999))) else fail-any) else fail-any)) in
        {478}let v_1010: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_999)) && success?(1-proj-7-tuple(v_998))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if not-caught-fail(v_1009) then (v_1009,2-proj-3-tuple(v_1007),3-proj-3-tuple(v_1007)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {479}let v_1011: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1010),2-proj-7-tuple(v_998),3-proj-7-tuple(v_998),4-proj-7-tuple(v_998),5-proj-7-tuple(v_998),6-proj-7-tuple(v_998),7-proj-7-tuple(v_998))) in
        {480}let (hs_1012: handshakestate,plaintext_c: bitstring,valid_1013: bool) = (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-7-tuple(v_998))))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then (if (v_1000 && 3-proj-3-tuple(v_1010)) then (if not-caught-fail(v_1011) then (v_1011,2-proj-3-tuple(v_1010),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {481}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {482}insert statestore(bob,alice,sid,statepack_d(hs_1012,handshakestategetcs(hs_1012),cs2_995))
    ) | (
        {484}!
        {502}get statestore(=bob,=alice,=sid,statepack_d(hs_1014: handshakestate,cs1_1015: cipherstate,cs2_1016: cipherstate)) in
        {485}let hs_1017: handshakestate = handshakestatesetcs(hs_1014,cs2_1016) in
        {486}let v_1018: bitstring = catch-fail(handshakestateunpack(hs_1017)) in
        {487}let v_1019: bitstring = catch-fail((empty,empty,empty)) in
        {488}let v_1020: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1018))) in
        {489}let v_1021: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1020))) in
        {490}let v_1022: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1021),2-proj-2-tuple(v_1021),3-proj-3-tuple(v_1020),msg_d(bob,alice,sid))) in
        {491}let v_1023: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1020))) in
        {492}let v_1024: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1021))) && success?(1-proj-3-tuple(v_1020))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then cipherstatepack(1-proj-2-tuple(v_1023),increment_nonce(2-proj-2-tuple(v_1021))) else fail-any) else fail-any)) in
        {493}let v_1025: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1020)) && success?(1-proj-3-tuple(v_1020))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1024) then (v_1024,v_1022) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {494}let v_1026: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1025),2-proj-3-tuple(v_1020),3-proj-3-tuple(v_1020)))) in
        {495}let v_1027: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1025)) && success?(symmetricstatepack(1-proj-2-tuple(v_1025),2-proj-3-tuple(v_1020),3-proj-3-tuple(v_1020)))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then symmetricstatepack(1-proj-3-tuple(v_1026),2-proj-3-tuple(v_1026),hash(3-proj-3-tuple(v_1026),2-proj-2-tuple(v_1025))) else fail-any) else fail-any)) in
        {496}let v_1028: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1018)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then (if not-caught-fail(v_1027) then (v_1027,2-proj-2-tuple(v_1025)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {497}let v_1029: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1028),2-proj-7-tuple(v_1018),3-proj-7-tuple(v_1018),4-proj-7-tuple(v_1018),5-proj-7-tuple(v_1018),6-proj-7-tuple(v_1018),7-proj-7-tuple(v_1018))) in
        {498}let v_1030: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),2-proj-2-tuple(v_1028))) in
        {499}let (hs_1031: handshakestate,message_d_1032: bitstring) = (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-7-tuple(v_1018))))) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then (v_1029,v_1030) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {500}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {501}out(pub, message_d_1032)
    ) | (
        {503}event LeakPsk(phase0,alice,bob);
        {504}out(pub, key_psk(alice,bob))
    ) | (
        {505}phase 1;
        {506}event LeakPsk(phase1,alice,bob);
        {507}out(pub, key_psk(alice,bob))
    ) | (
        {508}event LeakS(phase0,bob);
        {509}out(pub, key_s(bob))
    ) | (
        {510}phase 1;
        {511}event LeakS(phase1,bob);
        {512}out(pub, key_s(bob))
    )
) | (
    {513}let v_1033: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {514}let s_1034: keypair = (if not-caught-fail(v_1033) then keypairpack(validkey(v_1033),key_s(bob)) else fail-any) in
    {515}out(pub, getpublickey(s_1034));
    (
        {516}let e_1035: keypair = keypairpack(empty,empty) in
        {517}let v_1036: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {518}let rs_1037: key = getpublickey((if not-caught-fail(v_1036) then keypairpack(validkey(v_1036),key_s(charlie)) else fail-any)) in
        {519}let re_1038: key = empty in
        {520}let v_1039: bitstring = catch-fail(hash(somename,empty)) in
        {521}let v_1040: key = catch-fail(v_1039) in
        {522}let v_1041: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {523}let v_1042: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1039) then (if not-caught-fail(v_1040) then (if not-caught-fail(v_1041) then symmetricstatepack(v_1041,v_1040,v_1039) else fail-any) else fail-any) else fail-any))) in
        {524}let v_1043: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1039) then (if not-caught-fail(v_1040) then (if not-caught-fail(v_1041) then symmetricstatepack(v_1041,v_1040,v_1039) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then symmetricstatepack(1-proj-3-tuple(v_1042),2-proj-3-tuple(v_1042),hash(3-proj-3-tuple(v_1042),empty)) else fail-any) else fail-any)) in
        {525}let v_1044: bitstring = catch-fail(symmetricstateunpack(v_1043)) in
        {526}let v_1045: symmetricstate = catch-fail((if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then symmetricstatepack(1-proj-3-tuple(v_1044),2-proj-3-tuple(v_1044),hash(3-proj-3-tuple(v_1044),rs_1037)) else fail-any)) in
        {527}let v_1046: bitstring = catch-fail(symmetricstateunpack(v_1045)) in
        {528}let v_1047: symmetricstate = catch-fail((if success?(getpublickey(s_1034)) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then symmetricstatepack(1-proj-3-tuple(v_1046),2-proj-3-tuple(v_1046),hash(3-proj-3-tuple(v_1046),getpublickey(s_1034))) else fail-any) else fail-any)) in
        {529}let hs_1048: handshakestate = (if not-caught-fail(v_1043) then (if not-caught-fail(v_1045) then (if not-caught-fail(v_1047) then handshakestatepack(v_1047,s_1034,e_1035,rs_1037,re_1038,key_psk(charlie,bob),false) else fail-any) else fail-any) else fail-any) in
        {530}insert statestore(bob,charlie,sid,statepack_a(hs_1048))
    ) | (
        {580}get statestore(=bob,=charlie,=sid,statepack_a(hs_1049: handshakestate)) in
        {531}in(pub, message_a_1050: bitstring);
        {532}let v_1051: bitstring = catch-fail(handshakestateunpack(hs_1049)) in
        {533}let v_1052: bitstring = catch-fail(deconcat3(message_a_1050)) in
        {534}let v_1053: bool = catch-fail(true) in
        {535}let v_1054: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1051))) in
        {536}let v_1055: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1054),6-proj-7-tuple(v_1051))) in
        {537}let v_1056: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1054),6-proj-7-tuple(v_1051))) in
        {538}let v_1057: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1054),6-proj-7-tuple(v_1051))) in
        {539}let v_1058: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_1051)) && success?(2-proj-3-tuple(v_1054))) then (if not-caught-fail(v_1055) then (if not-caught-fail(v_1056) then (if not-caught-fail(v_1057) then (v_1055,v_1056,v_1057) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {540}let v_1059: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1054),1-proj-3-tuple(v_1058),3-proj-3-tuple(v_1054)))) in
        {541}let v_1060: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_1058)) && success?(symmetricstatepack(1-proj-3-tuple(v_1054),1-proj-3-tuple(v_1058),3-proj-3-tuple(v_1054)))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then symmetricstatepack(1-proj-3-tuple(v_1059),2-proj-3-tuple(v_1059),hash(3-proj-3-tuple(v_1059),2-proj-3-tuple(v_1058))) else fail-any) else fail-any))) in
        {542}let v_1061: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_1051)) && success?(1-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_1058)) then cipherstatepack(3-proj-3-tuple(v_1058),minnonce) else fail-any),1-proj-3-tuple(v_1058),3-proj-3-tuple(v_1060)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1062: key = catch-fail(1-proj-3-tuple(v_1052)) in
        {544}let v_1063: bitstring = catch-fail(symmetricstateunpack(v_1061)) in
        {545}let v_1064: symmetricstate = catch-fail((if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-3-tuple(v_1063))))) then symmetricstatepack(1-proj-3-tuple(v_1063),2-proj-3-tuple(v_1063),hash(3-proj-3-tuple(v_1063),v_1062)) else fail-any)) in
        {546}let v_1065: bitstring = catch-fail(symmetricstateunpack(v_1064)) in
        {547}let v_1066: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1065),v_1062)) in
        {548}let v_1067: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1065),v_1062)) in
        {549}let v_1068: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1065),v_1062)) in
        {550}let v_1069: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1065)) then (if not-caught-fail(v_1066) then (if not-caught-fail(v_1067) then (if not-caught-fail(v_1068) then (v_1066,v_1067,v_1068) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {551}let v_1070: symmetricstate = catch-fail((if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1069)) then cipherstatepack(2-proj-3-tuple(v_1069),minnonce) else fail-any),1-proj-3-tuple(v_1069),3-proj-3-tuple(v_1065)) else fail-any) else fail-any)) in
        {552}let v_1071: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1051))) in
        {553}let v_1072: bitstring = catch-fail(symmetricstateunpack(v_1070)) in
        {554}let v_1073: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1072),(if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),v_1062) else fail-any) else fail-any))) in
        {555}let v_1074: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1072),(if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),v_1062) else fail-any) else fail-any))) in
        {556}let v_1075: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1072),(if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),v_1062) else fail-any) else fail-any))) in
        {557}let v_1076: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),v_1062) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1072))) then (if not-caught-fail(v_1073) then (if not-caught-fail(v_1074) then (if not-caught-fail(v_1075) then (v_1073,v_1074,v_1075) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1077: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1051)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then dhexp(2-proj-2-tuple(v_1071),v_1062) else fail-any) else fail-any)) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1076)) then cipherstatepack(2-proj-3-tuple(v_1076),minnonce) else fail-any),1-proj-3-tuple(v_1076),3-proj-3-tuple(v_1072)) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1078: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1051))) in
        {560}let v_1079: bitstring = catch-fail(symmetricstateunpack(v_1077)) in
        {561}let v_1080: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1079),(if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then dhexp(2-proj-2-tuple(v_1078),4-proj-7-tuple(v_1051)) else fail-any) else fail-any))) in
        {562}let v_1081: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1079),(if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then dhexp(2-proj-2-tuple(v_1078),4-proj-7-tuple(v_1051)) else fail-any) else fail-any))) in
        {563}let v_1082: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1079),(if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then dhexp(2-proj-2-tuple(v_1078),4-proj-7-tuple(v_1051)) else fail-any) else fail-any))) in
        {564}let v_1083: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then dhexp(2-proj-2-tuple(v_1078),4-proj-7-tuple(v_1051)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1079))) then (if not-caught-fail(v_1080) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1082) then (v_1080,v_1081,v_1082) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let v_1084: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_1051)) && success?(2-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then dhexp(2-proj-2-tuple(v_1078),4-proj-7-tuple(v_1051)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-3-tuple(v_1079))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1083)) then cipherstatepack(2-proj-3-tuple(v_1083),minnonce) else fail-any),1-proj-3-tuple(v_1083),3-proj-3-tuple(v_1079)) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1085: bitstring = catch-fail(symmetricstateunpack(v_1084)) in
        {567}let v_1086: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1085))) in
        {568}let v_1087: aead = catch-fail(decrypt(1-proj-2-tuple(v_1086),2-proj-2-tuple(v_1086),3-proj-3-tuple(v_1085),3-proj-3-tuple(v_1052))) in
        {569}let v_1088: bitstring = catch-fail(aeadunpack(v_1087)) in
        {570}let v_1089: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1085))) in
        {571}let v_1090: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1086))) && success?(1-proj-3-tuple(v_1085))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-2-tuple(v_1089))))) then cipherstatepack(1-proj-2-tuple(v_1089),increment_nonce(2-proj-2-tuple(v_1086))) else fail-any) else fail-any)) in
        {572}let v_1091: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1052)) && (success?(3-proj-3-tuple(v_1085)) && success?(1-proj-3-tuple(v_1085)))) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-2-tuple(v_1086))))) then (if not-caught-fail(v_1087) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-3-tuple(v_1088))))) then (if not-caught-fail(v_1090) then (v_1090,3-proj-3-tuple(v_1088),1-proj-3-tuple(v_1088)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {573}let v_1092: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1085),3-proj-3-tuple(v_1085)))) in
        {574}let v_1093: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1052)) && success?(symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1085),3-proj-3-tuple(v_1085)))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1092),hash(3-proj-3-tuple(v_1092),3-proj-3-tuple(v_1052))) else fail-any) else fail-any)) in
        {575}let v_1094: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1052)) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-3-tuple(v_1085))))) then (if (not-caught-fail(v_1091) && success?(is-true(success?(1-proj-3-tuple(v_1091))))) then (if not-caught-fail(v_1093) then (v_1093,2-proj-3-tuple(v_1091),3-proj-3-tuple(v_1091)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {576}let v_1095: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1094),2-proj-7-tuple(v_1051),3-proj-7-tuple(v_1051),4-proj-7-tuple(v_1051),v_1062,6-proj-7-tuple(v_1051),7-proj-7-tuple(v_1051))) in
        {577}let (hs_1096: handshakestate,plaintext_a_1097: bitstring,valid_1098: bool) = (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-7-tuple(v_1051))))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if not-caught-fail(v_1053) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1064) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1077) then (if not-caught-fail(v_1084) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if (v_1053 && 3-proj-3-tuple(v_1094)) then (if not-caught-fail(v_1095) then (v_1095,2-proj-3-tuple(v_1094),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {578}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1097);
        {579}insert statestore(bob,charlie,sid,statepack_b(hs_1096))
    ) | (
        {631}get statestore(=bob,=charlie,=sid,statepack_b(hs_1099: handshakestate)) in
        {581}let v_1100: bitstring = catch-fail(handshakestateunpack(hs_1099)) in
        {582}let v_1101: bitstring = catch-fail((empty,empty,empty)) in
        {583}let v_1102: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {584}let v_1103: keypair = catch-fail((if not-caught-fail(v_1102) then keypairpack(validkey(v_1102),key_e(bob,charlie,sid)) else fail-any)) in
        {585}let v_1104: bitstring = catch-fail(getpublickey(v_1103)) in
        {586}let v_1105: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1100))) in
        {587}let v_1106: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-3-tuple(v_1105))))) then symmetricstatepack(1-proj-3-tuple(v_1105),2-proj-3-tuple(v_1105),hash(3-proj-3-tuple(v_1105),v_1104)) else fail-any) else fail-any)) in
        {588}let v_1107: bitstring = catch-fail(symmetricstateunpack(v_1106)) in
        {589}let v_1108: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1107),getpublickey(v_1103))) in
        {590}let v_1109: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1107),getpublickey(v_1103))) in
        {591}let v_1110: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1107),getpublickey(v_1103))) in
        {592}let v_1111: bitstring = catch-fail((if (success?(getpublickey(v_1103)) && success?(2-proj-3-tuple(v_1107))) then (if not-caught-fail(v_1108) then (if not-caught-fail(v_1109) then (if not-caught-fail(v_1110) then (v_1108,v_1109,v_1110) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1112: symmetricstate = catch-fail((if success?(getpublickey(v_1103)) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1111)) then cipherstatepack(2-proj-3-tuple(v_1111),minnonce) else fail-any),1-proj-3-tuple(v_1111),3-proj-3-tuple(v_1107)) else fail-any) else fail-any) else fail-any)) in
        {594}let v_1113: bitstring = catch-fail(keypairunpack(v_1103)) in
        {595}let v_1114: bitstring = catch-fail(symmetricstateunpack(v_1112)) in
        {596}let v_1115: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1114),(if success?(5-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-2-tuple(v_1113))))) then dhexp(2-proj-2-tuple(v_1113),5-proj-7-tuple(v_1100)) else fail-any) else fail-any))) in
        {597}let v_1116: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1114),(if success?(5-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-2-tuple(v_1113))))) then dhexp(2-proj-2-tuple(v_1113),5-proj-7-tuple(v_1100)) else fail-any) else fail-any))) in
        {598}let v_1117: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1114),(if success?(5-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-2-tuple(v_1113))))) then dhexp(2-proj-2-tuple(v_1113),5-proj-7-tuple(v_1100)) else fail-any) else fail-any))) in
        {599}let v_1118: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-2-tuple(v_1113))))) then dhexp(2-proj-2-tuple(v_1113),5-proj-7-tuple(v_1100)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1114))) then (if not-caught-fail(v_1115) then (if not-caught-fail(v_1116) then (if not-caught-fail(v_1117) then (v_1115,v_1116,v_1117) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {600}let v_1119: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-2-tuple(v_1113))))) then dhexp(2-proj-2-tuple(v_1113),5-proj-7-tuple(v_1100)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-3-tuple(v_1118))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1118)) then cipherstatepack(2-proj-3-tuple(v_1118),minnonce) else fail-any),1-proj-3-tuple(v_1118),3-proj-3-tuple(v_1114)) else fail-any) else fail-any) else fail-any)) in
        {601}let v_1120: bitstring = catch-fail(keypairunpack(v_1103)) in
        {602}let v_1121: bitstring = catch-fail(symmetricstateunpack(v_1119)) in
        {603}let v_1122: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1121),(if success?(4-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-2-tuple(v_1120))))) then dhexp(2-proj-2-tuple(v_1120),4-proj-7-tuple(v_1100)) else fail-any) else fail-any))) in
        {604}let v_1123: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1121),(if success?(4-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-2-tuple(v_1120))))) then dhexp(2-proj-2-tuple(v_1120),4-proj-7-tuple(v_1100)) else fail-any) else fail-any))) in
        {605}let v_1124: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1121),(if success?(4-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-2-tuple(v_1120))))) then dhexp(2-proj-2-tuple(v_1120),4-proj-7-tuple(v_1100)) else fail-any) else fail-any))) in
        {606}let v_1125: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-2-tuple(v_1120))))) then dhexp(2-proj-2-tuple(v_1120),4-proj-7-tuple(v_1100)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1121))) then (if not-caught-fail(v_1122) then (if not-caught-fail(v_1123) then (if not-caught-fail(v_1124) then (v_1122,v_1123,v_1124) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {607}let v_1126: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1100)) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-2-tuple(v_1120))))) then dhexp(2-proj-2-tuple(v_1120),4-proj-7-tuple(v_1100)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1125)) then cipherstatepack(2-proj-3-tuple(v_1125),minnonce) else fail-any),1-proj-3-tuple(v_1125),3-proj-3-tuple(v_1121)) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1127: bitstring = catch-fail(symmetricstateunpack(v_1126)) in
        {609}let v_1128: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1127))) in
        {610}let v_1129: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1128),2-proj-2-tuple(v_1128),3-proj-3-tuple(v_1127),msg_b(bob,charlie,sid))) in
        {611}let v_1130: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1127))) in
        {612}let v_1131: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1128))) && success?(1-proj-3-tuple(v_1127))) then (if (not-caught-fail(v_1130) && success?(is-true(success?(1-proj-2-tuple(v_1130))))) then cipherstatepack(1-proj-2-tuple(v_1130),increment_nonce(2-proj-2-tuple(v_1128))) else fail-any) else fail-any)) in
        {613}let v_1132: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1127)) && success?(1-proj-3-tuple(v_1127))) then (if (not-caught-fail(v_1128) && success?(is-true(success?(1-proj-2-tuple(v_1128))))) then (if not-caught-fail(v_1129) then (if not-caught-fail(v_1131) then (v_1131,v_1129) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {614}let v_1133: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1132),2-proj-3-tuple(v_1127),3-proj-3-tuple(v_1127)))) in
        {615}let v_1134: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1132)) && success?(symmetricstatepack(1-proj-2-tuple(v_1132),2-proj-3-tuple(v_1127),3-proj-3-tuple(v_1127)))) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-3-tuple(v_1133))))) then symmetricstatepack(1-proj-3-tuple(v_1133),2-proj-3-tuple(v_1133),hash(3-proj-3-tuple(v_1133),2-proj-2-tuple(v_1132))) else fail-any) else fail-any)) in
        {616}let v_1135: bitstring = catch-fail((if (not-caught-fail(v_1127) && success?(is-true(success?(1-proj-3-tuple(v_1127))))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-2-tuple(v_1132))))) then (if not-caught-fail(v_1134) then (v_1134,2-proj-2-tuple(v_1132)) else fail-any) else fail-any) else fail-any)) in
        {617}let v_1136: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1135),2-proj-7-tuple(v_1100),v_1103,4-proj-7-tuple(v_1100),5-proj-7-tuple(v_1100),6-proj-7-tuple(v_1100),7-proj-7-tuple(v_1100))) in
        {618}let v_1137: bitstring = catch-fail(concat3(v_1104,2-proj-3-tuple(v_1101),2-proj-2-tuple(v_1135))) in
        {619}let v_1138: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1135))) in
        {620}let v_1139: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1138),zero)) in
        {621}let v_1140: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1138),zero)) in
        {622}let v_1141: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1138),zero)) in
        {623}let v_1142: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1138)) then (if not-caught-fail(v_1139) then (if not-caught-fail(v_1140) then (if not-caught-fail(v_1141) then (v_1139,v_1140,v_1141) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {624}let v_1143: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1142)) then cipherstatepack(1-proj-3-tuple(v_1142),minnonce) else fail-any)) in
        {625}let v_1144: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1142)) then cipherstatepack(2-proj-3-tuple(v_1142),minnonce) else fail-any)) in
        {626}let v_1145: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1135)) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-3-tuple(v_1138))))) then (if (not-caught-fail(v_1142) && success?(is-true(success?(1-proj-3-tuple(v_1142))))) then (if not-caught-fail(v_1143) then (if not-caught-fail(v_1144) then (1-proj-2-tuple(v_1135),v_1143,v_1144) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {627}let (hs_1146: handshakestate,message_b_1147: bitstring,cs1_1148: cipherstate,cs2_1149: cipherstate) = (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-7-tuple(v_1100))))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then (if not-caught-fail(v_1103) then (if not-caught-fail(v_1104) then (if not-caught-fail(v_1106) then (if not-caught-fail(v_1112) then (if not-caught-fail(v_1119) then (if not-caught-fail(v_1126) then (if (not-caught-fail(v_1135) && success?(is-true(success?(1-proj-2-tuple(v_1135))))) then (if not-caught-fail(v_1136) then (if not-caught-fail(v_1137) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-3-tuple(v_1145))))) then (v_1136,v_1137,2-proj-3-tuple(v_1145),3-proj-3-tuple(v_1145)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {628}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {629}insert statestore(bob,charlie,sid,statepack_c(hs_1146,cs1_1148,cs2_1149));
        {630}out(pub, message_b_1147)
    ) | (
        {632}!
        {652}get statestore(=bob,=charlie,=sid,statepack_c(hs_1150: handshakestate,cs1_1151: cipherstate,cs2_1152: cipherstate)) in
        {633}let hs_1153: handshakestate = handshakestatesetcs(hs_1150,cs1_1151) in
        {634}in(pub, message_c_1154: bitstring);
        {635}let v_1155: bitstring = catch-fail(handshakestateunpack(hs_1153)) in
        {636}let v_1156: bitstring = catch-fail(deconcat3(message_c_1154)) in
        {637}let v_1157: bool = catch-fail(true) in
        {638}let v_1158: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1155))) in
        {639}let v_1159: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1158))) in
        {640}let v_1160: aead = catch-fail(decrypt(1-proj-2-tuple(v_1159),2-proj-2-tuple(v_1159),3-proj-3-tuple(v_1158),3-proj-3-tuple(v_1156))) in
        {641}let v_1161: bitstring = catch-fail(aeadunpack(v_1160)) in
        {642}let v_1162: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1158))) in
        {643}let v_1163: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1159))) && success?(1-proj-3-tuple(v_1158))) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-2-tuple(v_1162))))) then cipherstatepack(1-proj-2-tuple(v_1162),increment_nonce(2-proj-2-tuple(v_1159))) else fail-any) else fail-any)) in
        {644}let v_1164: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1156)) && (success?(3-proj-3-tuple(v_1158)) && success?(1-proj-3-tuple(v_1158)))) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-2-tuple(v_1159))))) then (if not-caught-fail(v_1160) then (if (not-caught-fail(v_1161) && success?(is-true(success?(1-proj-3-tuple(v_1161))))) then (if not-caught-fail(v_1163) then (v_1163,3-proj-3-tuple(v_1161),1-proj-3-tuple(v_1161)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {645}let v_1165: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1164),2-proj-3-tuple(v_1158),3-proj-3-tuple(v_1158)))) in
        {646}let v_1166: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1156)) && success?(symmetricstatepack(1-proj-3-tuple(v_1164),2-proj-3-tuple(v_1158),3-proj-3-tuple(v_1158)))) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then symmetricstatepack(1-proj-3-tuple(v_1165),2-proj-3-tuple(v_1165),hash(3-proj-3-tuple(v_1165),3-proj-3-tuple(v_1156))) else fail-any) else fail-any)) in
        {647}let v_1167: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1156)) && success?(1-proj-7-tuple(v_1155))) then (if (not-caught-fail(v_1158) && success?(is-true(success?(1-proj-3-tuple(v_1158))))) then (if (not-caught-fail(v_1164) && success?(is-true(success?(1-proj-3-tuple(v_1164))))) then (if not-caught-fail(v_1166) then (v_1166,2-proj-3-tuple(v_1164),3-proj-3-tuple(v_1164)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {648}let v_1168: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1167),2-proj-7-tuple(v_1155),3-proj-7-tuple(v_1155),4-proj-7-tuple(v_1155),5-proj-7-tuple(v_1155),6-proj-7-tuple(v_1155),7-proj-7-tuple(v_1155))) in
        {649}let (hs_1169: handshakestate,plaintext_c_1170: bitstring,valid_1171: bool) = (if (not-caught-fail(v_1155) && success?(is-true(success?(1-proj-7-tuple(v_1155))))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if not-caught-fail(v_1157) then (if (not-caught-fail(v_1167) && success?(is-true(success?(1-proj-3-tuple(v_1167))))) then (if (v_1157 && 3-proj-3-tuple(v_1167)) then (if not-caught-fail(v_1168) then (v_1168,2-proj-3-tuple(v_1167),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {650}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1170);
        {651}insert statestore(bob,charlie,sid,statepack_d(hs_1169,handshakestategetcs(hs_1169),cs2_1152))
    ) | (
        {653}!
        {671}get statestore(=bob,=charlie,=sid,statepack_d(hs_1172: handshakestate,cs1_1173: cipherstate,cs2_1174: cipherstate)) in
        {654}let hs_1175: handshakestate = handshakestatesetcs(hs_1172,cs2_1174) in
        {655}let v_1176: bitstring = catch-fail(handshakestateunpack(hs_1175)) in
        {656}let v_1177: bitstring = catch-fail((empty,empty,empty)) in
        {657}let v_1178: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1176))) in
        {658}let v_1179: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1178))) in
        {659}let v_1180: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1179),2-proj-2-tuple(v_1179),3-proj-3-tuple(v_1178),msg_d(bob,charlie,sid))) in
        {660}let v_1181: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1178))) in
        {661}let v_1182: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1179))) && success?(1-proj-3-tuple(v_1178))) then (if (not-caught-fail(v_1181) && success?(is-true(success?(1-proj-2-tuple(v_1181))))) then cipherstatepack(1-proj-2-tuple(v_1181),increment_nonce(2-proj-2-tuple(v_1179))) else fail-any) else fail-any)) in
        {662}let v_1183: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1178)) && success?(1-proj-3-tuple(v_1178))) then (if (not-caught-fail(v_1179) && success?(is-true(success?(1-proj-2-tuple(v_1179))))) then (if not-caught-fail(v_1180) then (if not-caught-fail(v_1182) then (v_1182,v_1180) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {663}let v_1184: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1183),2-proj-3-tuple(v_1178),3-proj-3-tuple(v_1178)))) in
        {664}let v_1185: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1183)) && success?(symmetricstatepack(1-proj-2-tuple(v_1183),2-proj-3-tuple(v_1178),3-proj-3-tuple(v_1178)))) then (if (not-caught-fail(v_1184) && success?(is-true(success?(1-proj-3-tuple(v_1184))))) then symmetricstatepack(1-proj-3-tuple(v_1184),2-proj-3-tuple(v_1184),hash(3-proj-3-tuple(v_1184),2-proj-2-tuple(v_1183))) else fail-any) else fail-any)) in
        {665}let v_1186: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1176)) then (if (not-caught-fail(v_1178) && success?(is-true(success?(1-proj-3-tuple(v_1178))))) then (if (not-caught-fail(v_1183) && success?(is-true(success?(1-proj-2-tuple(v_1183))))) then (if not-caught-fail(v_1185) then (v_1185,2-proj-2-tuple(v_1183)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {666}let v_1187: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1186),2-proj-7-tuple(v_1176),3-proj-7-tuple(v_1176),4-proj-7-tuple(v_1176),5-proj-7-tuple(v_1176),6-proj-7-tuple(v_1176),7-proj-7-tuple(v_1176))) in
        {667}let v_1188: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1177),2-proj-3-tuple(v_1177),2-proj-2-tuple(v_1186))) in
        {668}let (hs_1189: handshakestate,message_d_1190: bitstring) = (if (not-caught-fail(v_1176) && success?(is-true(success?(1-proj-7-tuple(v_1176))))) then (if (not-caught-fail(v_1177) && success?(is-true(success?(1-proj-3-tuple(v_1177))))) then (if (not-caught-fail(v_1186) && success?(is-true(success?(1-proj-2-tuple(v_1186))))) then (if not-caught-fail(v_1187) then (if not-caught-fail(v_1188) then (v_1187,v_1188) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {669}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {670}out(pub, message_d_1190)
    ) | (
        {672}event LeakPsk(phase0,charlie,bob);
        {673}out(pub, key_psk(charlie,bob))
    ) | (
        {674}phase 1;
        {675}event LeakPsk(phase1,charlie,bob);
        {676}out(pub, key_psk(charlie,bob))
    ) | (
        {677}event LeakS(phase0,bob);
        {678}out(pub, key_s(bob))
    ) | (
        {679}phase 1;
        {680}event LeakS(phase1,bob);
        {681}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 209 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 53 rules in the queue.
600 rules inserted. The rule base contains 573 rules. 216 rules in the queue.
800 rules inserted. The rule base contains 763 rules. 314 rules in the queue.
1000 rules inserted. The rule base contains 946 rules. 173 rules in the queue.
1200 rules inserted. The rule base contains 1140 rules. 303 rules in the queue.
1400 rules inserted. The rule base contains 1340 rules. 419 rules in the queue.
1600 rules inserted. The rule base contains 1527 rules. 463 rules in the queue.
1800 rules inserted. The rule base contains 1699 rules. 425 rules in the queue.
2000 rules inserted. The rule base contains 1876 rules. 408 rules in the queue.
2200 rules inserted. The rule base contains 2066 rules. 424 rules in the queue.
2400 rules inserted. The rule base contains 2258 rules. 450 rules in the queue.
2600 rules inserted. The rule base contains 2353 rules. 431 rules in the queue.
2800 rules inserted. The rule base contains 2512 rules. 476 rules in the queue.
3000 rules inserted. The rule base contains 2694 rules. 566 rules in the queue.
3200 rules inserted. The rule base contains 2876 rules. 608 rules in the queue.
3400 rules inserted. The rule base contains 3016 rules. 622 rules in the queue.
3600 rules inserted. The rule base contains 3156 rules. 608 rules in the queue.
3800 rules inserted. The rule base contains 3340 rules. 663 rules in the queue.
4000 rules inserted. The rule base contains 3510 rules. 724 rules in the queue.
4200 rules inserted. The rule base contains 3684 rules. 738 rules in the queue.
4400 rules inserted. The rule base contains 3832 rules. 742 rules in the queue.
4600 rules inserted. The rule base contains 3944 rules. 727 rules in the queue.
4800 rules inserted. The rule base contains 4075 rules. 697 rules in the queue.
5000 rules inserted. The rule base contains 4193 rules. 699 rules in the queue.
5200 rules inserted. The rule base contains 4349 rules. 691 rules in the queue.
5400 rules inserted. The rule base contains 4520 rules. 670 rules in the queue.
5600 rules inserted. The rule base contains 4661 rules. 642 rules in the queue.
5800 rules inserted. The rule base contains 4778 rules. 636 rules in the queue.
6000 rules inserted. The rule base contains 4927 rules. 635 rules in the queue.
6200 rules inserted. The rule base contains 5053 rules. 614 rules in the queue.
6400 rules inserted. The rule base contains 5159 rules. 578 rules in the queue.
6600 rules inserted. The rule base contains 5261 rules. 539 rules in the queue.
6800 rules inserted. The rule base contains 5429 rules. 579 rules in the queue.
7000 rules inserted. The rule base contains 5605 rules. 612 rules in the queue.
7200 rules inserted. The rule base contains 5752 rules. 649 rules in the queue.
7400 rules inserted. The rule base contains 5904 rules. 697 rules in the queue.
7600 rules inserted. The rule base contains 6098 rules. 762 rules in the queue.
7800 rules inserted. The rule base contains 6239 rules. 788 rules in the queue.
8000 rules inserted. The rule base contains 6401 rules. 808 rules in the queue.
8200 rules inserted. The rule base contains 6591 rules. 853 rules in the queue.
8400 rules inserted. The rule base contains 6737 rules. 858 rules in the queue.
8600 rules inserted. The rule base contains 6902 rules. 853 rules in the queue.
8800 rules inserted. The rule base contains 7046 rules. 828 rules in the queue.
9000 rules inserted. The rule base contains 7213 rules. 829 rules in the queue.
9200 rules inserted. The rule base contains 7362 rules. 815 rules in the queue.
9400 rules inserted. The rule base contains 7538 rules. 870 rules in the queue.
9600 rules inserted. The rule base contains 7704 rules. 909 rules in the queue.
9800 rules inserted. The rule base contains 7883 rules. 977 rules in the queue.
10000 rules inserted. The rule base contains 8042 rules. 1000 rules in the queue.
10200 rules inserted. The rule base contains 8199 rules. 1027 rules in the queue.
10400 rules inserted. The rule base contains 8353 rules. 1057 rules in the queue.
10600 rules inserted. The rule base contains 8526 rules. 1041 rules in the queue.
10800 rules inserted. The rule base contains 8705 rules. 1031 rules in the queue.
11000 rules inserted. The rule base contains 8847 rules. 1022 rules in the queue.
11200 rules inserted. The rule base contains 8999 rules. 1024 rules in the queue.
11400 rules inserted. The rule base contains 9123 rules. 1009 rules in the queue.
11600 rules inserted. The rule base contains 9304 rules. 975 rules in the queue.
11800 rules inserted. The rule base contains 9481 rules. 941 rules in the queue.
12000 rules inserted. The rule base contains 9597 rules. 944 rules in the queue.
12200 rules inserted. The rule base contains 9743 rules. 973 rules in the queue.
12400 rules inserted. The rule base contains 9869 rules. 971 rules in the queue.
12600 rules inserted. The rule base contains 10050 rules. 985 rules in the queue.
12800 rules inserted. The rule base contains 10167 rules. 999 rules in the queue.
13000 rules inserted. The rule base contains 10298 rules. 1008 rules in the queue.
13200 rules inserted. The rule base contains 10402 rules. 1035 rules in the queue.
13400 rules inserted. The rule base contains 10576 rules. 1052 rules in the queue.
13600 rules inserted. The rule base contains 10750 rules. 1090 rules in the queue.
13800 rules inserted. The rule base contains 10832 rules. 1083 rules in the queue.
14000 rules inserted. The rule base contains 10966 rules. 1079 rules in the queue.
14200 rules inserted. The rule base contains 11065 rules. 1066 rules in the queue.
14400 rules inserted. The rule base contains 11235 rules. 1086 rules in the queue.
14600 rules inserted. The rule base contains 11407 rules. 1116 rules in the queue.
14800 rules inserted. The rule base contains 11485 rules. 1070 rules in the queue.
15000 rules inserted. The rule base contains 11577 rules. 1048 rules in the queue.
15200 rules inserted. The rule base contains 11722 rules. 1044 rules in the queue.
15400 rules inserted. The rule base contains 11876 rules. 1062 rules in the queue.
15600 rules inserted. The rule base contains 12030 rules. 1084 rules in the queue.
15800 rules inserted. The rule base contains 12148 rules. 1075 rules in the queue.
16000 rules inserted. The rule base contains 12239 rules. 1061 rules in the queue.
16200 rules inserted. The rule base contains 12394 rules. 1081 rules in the queue.
16400 rules inserted. The rule base contains 12554 rules. 1108 rules in the queue.
16600 rules inserted. The rule base contains 12708 rules. 1142 rules in the queue.
16800 rules inserted. The rule base contains 12828 rules. 1165 rules in the queue.
17000 rules inserted. The rule base contains 12890 rules. 1165 rules in the queue.
17200 rules inserted. The rule base contains 13041 rules. 1185 rules in the queue.
17400 rules inserted. The rule base contains 13211 rules. 1193 rules in the queue.
17600 rules inserted. The rule base contains 13378 rules. 1206 rules in the queue.
17800 rules inserted. The rule base contains 13485 rules. 1211 rules in the queue.
18000 rules inserted. The rule base contains 13550 rules. 1214 rules in the queue.
18200 rules inserted. The rule base contains 13657 rules. 1220 rules in the queue.
18400 rules inserted. The rule base contains 13823 rules. 1212 rules in the queue.
18600 rules inserted. The rule base contains 14001 rules. 1189 rules in the queue.
18800 rules inserted. The rule base contains 14108 rules. 1193 rules in the queue.
19000 rules inserted. The rule base contains 14185 rules. 1159 rules in the queue.
19200 rules inserted. The rule base contains 14295 rules. 1159 rules in the queue.
19400 rules inserted. The rule base contains 14417 rules. 1149 rules in the queue.
19600 rules inserted. The rule base contains 14585 rules. 1151 rules in the queue.
19800 rules inserted. The rule base contains 14686 rules. 1153 rules in the queue.
20000 rules inserted. The rule base contains 14773 rules. 1156 rules in the queue.
20200 rules inserted. The rule base contains 14834 rules. 1129 rules in the queue.
20400 rules inserted. The rule base contains 14922 rules. 1160 rules in the queue.
20600 rules inserted. The rule base contains 15070 rules. 1140 rules in the queue.
20800 rules inserted. The rule base contains 15181 rules. 1152 rules in the queue.
21000 rules inserted. The rule base contains 15232 rules. 1126 rules in the queue.
21200 rules inserted. The rule base contains 15336 rules. 1098 rules in the queue.
21400 rules inserted. The rule base contains 15417 rules. 1093 rules in the queue.
21600 rules inserted. The rule base contains 15569 rules. 1130 rules in the queue.
21800 rules inserted. The rule base contains 15704 rules. 1150 rules in the queue.
22000 rules inserted. The rule base contains 15735 rules. 1057 rules in the queue.
22200 rules inserted. The rule base contains 15808 rules. 1042 rules in the queue.
22400 rules inserted. The rule base contains 15942 rules. 1030 rules in the queue.
22600 rules inserted. The rule base contains 16102 rules. 1011 rules in the queue.
22800 rules inserted. The rule base contains 16212 rules. 983 rules in the queue.
23000 rules inserted. The rule base contains 16264 rules. 908 rules in the queue.
23200 rules inserted. The rule base contains 16352 rules. 878 rules in the queue.
23400 rules inserted. The rule base contains 16503 rules. 808 rules in the queue.
23600 rules inserted. The rule base contains 16625 rules. 763 rules in the queue.
23800 rules inserted. The rule base contains 16655 rules. 732 rules in the queue.
24000 rules inserted. The rule base contains 16736 rules. 699 rules in the queue.
24200 rules inserted. The rule base contains 16809 rules. 621 rules in the queue.
24400 rules inserted. The rule base contains 16832 rules. 619 rules in the queue.
24600 rules inserted. The rule base contains 16911 rules. 612 rules in the queue.
24800 rules inserted. The rule base contains 16972 rules. 558 rules in the queue.
25000 rules inserted. The rule base contains 17025 rules. 510 rules in the queue.
25200 rules inserted. The rule base contains 17081 rules. 420 rules in the queue.
25400 rules inserted. The rule base contains 17083 rules. 346 rules in the queue.
25600 rules inserted. The rule base contains 17157 rules. 256 rules in the queue.
25800 rules inserted. The rule base contains 17208 rules. 199 rules in the queue.
26000 rules inserted. The rule base contains 17192 rules. 149 rules in the queue.
26200 rules inserted. The rule base contains 17191 rules. 62 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306807]),msg_a(alice,bob,sid[!1 = @sid_1484306807]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306808]),msg_a(alice,bob,sid[!1 = @sid_1484306807])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306816]),msg_a(alice,bob,sid[!1 = @sid_1484306816]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306817]),msg_a(alice,bob,sid[!1 = @sid_1484306816])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306826]),msg_a(alice,bob,sid[!1 = @sid_1484306826]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306827]),msg_a(alice,bob,sid[!1 = @sid_1484306826])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306836]),msg_a(alice,bob,sid[!1 = @sid_1484306836]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306837]),msg_a(alice,bob,sid[!1 = @sid_1484306836])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306845]),msg_a(alice,bob,sid[!1 = @sid_1484306845]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1484306846]),msg_a(alice,bob,sid[!1 = @sid_1484306845])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306853]),msg_a(alice,bob,sid[!1 = @sid_1484306853]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306853]))
Abbreviations:
sid_1484306983 = sid[!1 = @sid_1484306958]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1484306983,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1484306983,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1484306983,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484306983),msg_a(alice,bob,sid_1484306983)) may be executed at {69}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983))) may be sent on channel pub at output {71}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {167}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {168}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

19. By 1, the attacker may have the channel pub.
By 18, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

20. Using the function empty the attacker may obtain empty.
attacker(empty).

21. Using the function somename the attacker may obtain somename.
attacker(somename).

22. By 21, the attacker may know somename.
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

23. By 22, the attacker may know hash(somename,empty).
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

24. By 23, the attacker may know hash(hash(somename,empty),empty).
By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

25. By 24, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

26. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

27. By 26, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

28. By 27, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)))).

29. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

30. By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

31. The event LeakS(phase0,bob) may be executed at {508}.
So the message key_s(bob) may be sent on channel pub at output {509}.
mess(pub,key_s(bob)).

32. By 1, the attacker may have the channel pub.
By 31, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

33. By 32, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

35. By 33, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))).

36. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g)))).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))) in phase 1.
By 35, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g)))).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))) in phase 1.
By 34, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 29, the attacker may know minnonce in phase 1.
By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484306983),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484306983),g))),msg_a(alice,bob,sid_1484306983)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1484306983) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1484306983)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306985]),msg_a(alice,bob,sid[!1 = @sid_1484306985]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306985]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306987]),msg_a(alice,bob,sid[!1 = @sid_1484306987]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306987]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306989]),msg_a(alice,bob,sid[!1 = @sid_1484306989]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306989]))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484306992]),msg_a(alice,bob,sid[!1 = @sid_1484306992]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484306992]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307008]),msg_a(alice,bob,sid[!1 = @sid_1484307008]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484307008]))
Abbreviations:
sid_1484307141 = sid[!1 = @sid_1484307116]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1484307141,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1484307141,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1484307141,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484307141),msg_a(alice,bob,sid_1484307141)) may be executed at {69}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141))) may be sent on channel pub at output {71}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {167}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {168}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

19. By 1, the attacker may have the channel pub.
By 18, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

20. Using the function empty the attacker may obtain empty.
attacker(empty).

21. Using the function somename the attacker may obtain somename.
attacker(somename).

22. By 21, the attacker may know somename.
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

23. By 22, the attacker may know hash(somename,empty).
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

24. By 23, the attacker may know hash(hash(somename,empty),empty).
By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

25. By 24, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

26. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

27. By 26, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

28. By 27, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)))).

29. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

30. By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

31. The event LeakS(phase0,bob) may be executed at {508}.
So the message key_s(bob) may be sent on channel pub at output {509}.
mess(pub,key_s(bob)).

32. By 1, the attacker may have the channel pub.
By 31, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

33. By 32, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

35. By 33, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))).

36. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g)))).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))) in phase 1.
By 35, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g)))).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))) in phase 1.
By 34, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 29, the attacker may know minnonce in phase 1.
By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307141),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307141),g))),msg_a(alice,bob,sid_1484307141)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1484307141) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1484307141)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307143]),msg_a(alice,bob,sid[!1 = @sid_1484307143]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1484307143]))
Abbreviations:
sid_1484307273 = sid[!1 = @sid_1484307248]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1484307273,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1484307273,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1484307273,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484307273),msg_a(alice,bob,sid_1484307273)) may be executed at {69}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273))) may be sent on channel pub at output {71}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {167}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {168}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {346}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

19. By 1, the attacker may have the channel pub.
By 18, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

20. Using the function empty the attacker may obtain empty.
attacker(empty).

21. Using the function somename the attacker may obtain somename.
attacker(somename).

22. By 21, the attacker may know somename.
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

23. By 22, the attacker may know hash(somename,empty).
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

24. By 23, the attacker may know hash(hash(somename,empty),empty).
By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

25. By 24, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

26. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

27. By 26, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

28. By 27, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)))).

29. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

30. By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

31. The event LeakS(phase0,bob) may be executed at {508}.
So the message key_s(bob) may be sent on channel pub at output {509}.
mess(pub,key_s(bob)).

32. By 1, the attacker may have the channel pub.
By 31, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

33. By 32, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

35. By 33, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))).

36. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g)))).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))) in phase 1.
By 35, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g)))).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))) in phase 1.
By 34, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 29, the attacker may know minnonce in phase 1.
By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307273),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307273),g))),msg_a(alice,bob,sid_1484307273)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1484307273) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1484307273)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307276]),msg_b(bob,alice,sid[!1 = @sid_1484307276]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307277]),msg_a(alice,bob,sid[!1 = @sid_1484307277]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484307277]),msg_b(bob,alice,sid[!1 = @sid_1484307276])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307285]),msg_b(bob,alice,sid[!1 = @sid_1484307285]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307286]),msg_a(alice,bob,sid[!1 = @sid_1484307286]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484307286]),msg_b(bob,alice,sid[!1 = @sid_1484307285])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307295]),msg_b(bob,alice,sid[!1 = @sid_1484307295]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307296]),msg_a(alice,bob,sid[!1 = @sid_1484307296]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484307296]),msg_b(bob,alice,sid[!1 = @sid_1484307295])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307305]),msg_b(bob,alice,sid[!1 = @sid_1484307305]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307306]),msg_a(alice,bob,sid[!1 = @sid_1484307306]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484307306]),msg_b(bob,alice,sid[!1 = @sid_1484307305])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307314]),msg_b(bob,alice,sid[!1 = @sid_1484307314]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307315]),msg_a(alice,bob,sid[!1 = @sid_1484307315]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_1484307315]),msg_b(bob,alice,sid[!1 = @sid_1484307314])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307338]),msg_c(alice,bob,sid[!1 = @sid_1484307338]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307339]),msg_b(bob,alice,sid[!1 = @sid_1484307339]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307338]),msg_a(alice,bob,sid[!1 = @sid_1484307338]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307339]),msg_c(alice,bob,sid[!1 = @sid_1484307338])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307347]),msg_c(alice,bob,sid[!1 = @sid_1484307347]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307348]),msg_b(bob,alice,sid[!1 = @sid_1484307348]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307347]),msg_a(alice,bob,sid[!1 = @sid_1484307347]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307348]),msg_c(alice,bob,sid[!1 = @sid_1484307347])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307357]),msg_c(alice,bob,sid[!1 = @sid_1484307357]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307358]),msg_b(bob,alice,sid[!1 = @sid_1484307358]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307357]),msg_a(alice,bob,sid[!1 = @sid_1484307357]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307358]),msg_c(alice,bob,sid[!1 = @sid_1484307357])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1308,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307367]),msg_c(alice,bob,sid[!1 = @sid_1484307367]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307368]),msg_b(bob,alice,sid[!1 = @sid_1484307368]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307367]),msg_a(alice,bob,sid[!1 = @sid_1484307367]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307368]),msg_c(alice,bob,sid[!1 = @sid_1484307367])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307376]),msg_c(alice,bob,sid[!1 = @sid_1484307376]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307377]),msg_b(bob,alice,sid[!1 = @sid_1484307377]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307376]),msg_a(alice,bob,sid[!1 = @sid_1484307376]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_1484307377]),msg_c(alice,bob,sid[!1 = @sid_1484307376])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307400]),msg_d(bob,alice,sid[!1 = @sid_1484307400]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307401]),msg_c(alice,bob,sid[!1 = @sid_1484307401]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307400]),msg_b(bob,alice,sid[!1 = @sid_1484307400]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307401]),msg_a(alice,bob,sid[!1 = @sid_1484307401]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307401]),msg_d(bob,alice,sid[!1 = @sid_1484307400])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307409]),msg_d(bob,alice,sid[!1 = @sid_1484307409]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307410]),msg_c(alice,bob,sid[!1 = @sid_1484307410]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307409]),msg_b(bob,alice,sid[!1 = @sid_1484307409]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307410]),msg_a(alice,bob,sid[!1 = @sid_1484307410]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307410]),msg_d(bob,alice,sid[!1 = @sid_1484307409])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307419]),msg_d(bob,alice,sid[!1 = @sid_1484307419]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307420]),msg_c(alice,bob,sid[!1 = @sid_1484307420]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307419]),msg_b(bob,alice,sid[!1 = @sid_1484307419]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307420]),msg_a(alice,bob,sid[!1 = @sid_1484307420]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307420]),msg_d(bob,alice,sid[!1 = @sid_1484307419])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1308,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307429]),msg_d(bob,alice,sid[!1 = @sid_1484307429]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307430]),msg_c(alice,bob,sid[!1 = @sid_1484307430]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307429]),msg_b(bob,alice,sid[!1 = @sid_1484307429]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307430]),msg_a(alice,bob,sid[!1 = @sid_1484307430]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307430]),msg_d(bob,alice,sid[!1 = @sid_1484307429])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307438]),msg_d(bob,alice,sid[!1 = @sid_1484307438]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307439]),msg_c(alice,bob,sid[!1 = @sid_1484307439]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307438]),msg_b(bob,alice,sid[!1 = @sid_1484307438]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307439]),msg_a(alice,bob,sid[!1 = @sid_1484307439]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_1484307439]),msg_d(bob,alice,sid[!1 = @sid_1484307438])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,alice)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_1484307460]),msg_d(bob,alice,sid[!1 = @sid_1484307460]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_1484307461]),msg_c(alice,bob,sid[!1 = @sid_1484307461]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_1484307460]),msg_b(bob,alice,sid[!1 = @sid_1484307460]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1484307461]),msg_a(alice,bob,sid[!1 = @sid_1484307461]))) -> end(RecvEnd(true))
Abbreviations:
sid_1484307705 = sid[!1 = @sid_1484307694]
sid_1484307706 = sid[!1 = @sid_1484307649]

1. The entry statestore(alice,bob,sid_1484307705,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1484307705,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_1484307705,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484307705),msg_a(alice,bob,sid_1484307705)) may be executed at {69}.
So the entry statestore(alice,bob,sid_1484307705,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {70}.
table(statestore(alice,bob,sid_1484307705,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_1484307706,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {361}.
table(statestore(bob,alice,sid_1484307706,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_1484307705,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {72}.
The event SendMsg(alice,bob,stagepack_a(sid_1484307705),msg_a(alice,bob,sid_1484307705)) may be executed at {69}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))) may be sent on channel pub at output {71}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705)))).

5. The entry statestore(bob,alice,sid_1484307706,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {411}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))) that may be sent on channel pub by 4 may be received at input {362}.
So the entry statestore(bob,alice,sid_1484307706,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {410}.
table(statestore(bob,alice,sid_1484307706,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_1484307706,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {462}.
The event SendMsg(bob,alice,stagepack_b(sid_1484307706),msg_b(bob,alice,sid_1484307706)) may be executed at {459}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))) may be sent on channel pub at output {461}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706)))).

7. The entry statestore(alice,bob,sid_1484307705,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {122}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))) that may be sent on channel pub by 6 may be received at input {73}.
So the entry statestore(alice,bob,sid_1484307705,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce))) may be inserted in a table at insert {121}.
table(statestore(alice,bob,sid_1484307705,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_1484307705,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce))) that may be in a table by 7 may be read at get {142}.
The event SendMsg(alice,bob,stagepack_c(sid_1484307705),msg_c(alice,bob,sid_1484307705)) may be executed at {139}.
So the entry statestore(alice,bob,sid_1484307705,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce))) may be inserted in a table at insert {140}.
table(statestore(alice,bob,sid_1484307705,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_1484307706,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {462}.
The event SendMsg(bob,alice,stagepack_b(sid_1484307706),msg_b(bob,alice,sid_1484307706)) may be executed at {459}.
So the entry statestore(bob,alice,sid_1484307706,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_e(bob,alice,sid_1484307706)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce))) may be inserted in a table at insert {460}.
table(statestore(bob,alice,sid_1484307706,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_e(bob,alice,sid_1484307706)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_1484307705,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce))) that may be in a table by 7 may be read at get {142}.
The event SendMsg(alice,bob,stagepack_c(sid_1484307705),msg_c(alice,bob,sid_1484307705)) may be executed at {139}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705))) may be sent on channel pub at output {141}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705)))).

11. The entry statestore(bob,alice,sid_1484307706,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_e(bob,alice,sid_1484307706)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce))) that may be in a table by 9 may be read at get {483}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705))) that may be sent on channel pub by 10 may be received at input {465}.
So the entry statestore(bob,alice,sid_1484307706,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_e(bob,alice,sid_1484307706)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce))) may be inserted in a table at insert {482}.
table(statestore(bob,alice,sid_1484307706,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_e(bob,alice,sid_1484307706)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_1484307706,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_e(bob,alice,sid_1484307706)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce))) that may be in a table by 11 may be read at get {502}.
The event SendMsg(bob,alice,stagepack_d(sid_1484307706),msg_d(bob,alice,sid_1484307706)) may be executed at {500}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705))),msg_d(bob,alice,sid_1484307706))) may be sent on channel pub at output {501}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705))),msg_d(bob,alice,sid_1484307706)))).

13. The entry statestore(alice,bob,sid_1484307705,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g)),key_e(alice,bob,sid_1484307705)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce))) that may be in a table by 8 may be read at get {163}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_1484307706),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_e(bob,alice,sid_1484307706),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1484307705),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1484307705),g))),msg_a(alice,bob,sid_1484307705))),validkey(dhexp_real(key_e(bob,alice,sid_1484307706),g))),msg_b(bob,alice,sid_1484307706))),msg_c(alice,bob,sid_1484307705))),msg_d(bob,alice,sid_1484307706))) that may be sent on channel pub by 12 may be received at input {145}.
So event RecvEnd(true) may be executed at {162}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
