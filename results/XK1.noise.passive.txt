File "XK1.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 234, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 235, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 235, character 36:
Warning: identifier h rebound.
File "XK1.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 276, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 280, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 288, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 302, character 6:
Warning: identifier s rebound.
File "XK1.noise.passive.pv", line 303, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 303, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XK1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 336, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 344, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 347, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 349, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 351, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 359, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 359, characters 48-53:
Warning: identifier valid1 rebound.
File "XK1.noise.passive.pv", line 360, characters 6-7:
Warning: identifier rs rebound.
File "XK1.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 375, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 385, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 559, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 550, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 375, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 543, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 302, character 6:
Warning: identifier s rebound.
File "XK1.noise.passive.pv", line 303, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 303, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XK1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 536, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 344, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 347, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 349, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 351, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 528, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 276, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 280, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 618, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 620, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 385, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 610, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 611, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 603, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 359, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 359, characters 48-53:
Warning: identifier valid1 rebound.
File "XK1.noise.passive.pv", line 360, characters 6-7:
Warning: identifier rs rebound.
File "XK1.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 595, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 288, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 588, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 336, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_556: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_556));
    (
        {6}let e_557: keypair = keypairpack(empty,empty) in
        {7}let v_558: key = catch-fail(dhexp(key_s(bob),g)) in
        {8}let rs_559: key = getpublickey((if not-caught-fail(v_558) then keypairpack(v_558,key_s(bob)) else fail-any)) in
        {9}let re_560: key = empty in
        {10}let v_561: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_562: key = catch-fail(v_561) in
        {12}let v_563: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_564: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then symmetricstatepack(v_563,v_562,v_561) else fail-any) else fail-any) else fail-any))) in
        {14}let v_565: symmetricstate = catch-fail((if success?((if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then symmetricstatepack(v_563,v_562,v_561) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),empty)) else fail-any) else fail-any)) in
        {15}let v_566: bitstring = catch-fail(symmetricstateunpack(v_565)) in
        {16}let v_567: symmetricstate = catch-fail((if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then symmetricstatepack(1-proj-3-tuple(v_566),2-proj-3-tuple(v_566),hash(3-proj-3-tuple(v_566),rs_559)) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_565) then (if not-caught-fail(v_567) then handshakestatepack(v_567,s_556,e_557,rs_559,re_560,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {41}get statestore(=alice,=bob,=sid,statepack_a(hs_568: handshakestate)) in
        {19}let v_569: bitstring = catch-fail(handshakestateunpack(hs_568)) in
        {20}let v_570: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_571: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {22}let v_572: keypair = catch-fail((if not-caught-fail(v_571) then keypairpack(v_571,key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_573: bitstring = catch-fail(getpublickey(v_572)) in
        {24}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_569))) in
        {25}let v_575: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_569)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),hash(3-proj-3-tuple(v_574),v_573)) else fail-any) else fail-any)) in
        {26}let v_576: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {27}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {28}let v_578: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_577),2-proj-2-tuple(v_577),3-proj-3-tuple(v_576),msg_a(alice,bob,sid))) in
        {29}let v_579: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {30}let v_580: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_577))) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then cipherstatepack(1-proj-2-tuple(v_579),increment_nonce(2-proj-2-tuple(v_577))) else fail-any) else fail-any)) in
        {31}let v_581: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_576)) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_580) then (v_580,v_578) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_582: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) in
        {33}let v_583: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_581)) && success?(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),2-proj-2-tuple(v_581))) else fail-any) else fail-any)) in
        {34}let v_584: bitstring = catch-fail((if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_583) then (v_583,2-proj-2-tuple(v_581)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_585: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_584),2-proj-7-tuple(v_569),v_572,4-proj-7-tuple(v_569),5-proj-7-tuple(v_569),6-proj-7-tuple(v_569),7-proj-7-tuple(v_569))) in
        {36}let v_586: bitstring = catch-fail(concat3(v_573,2-proj-3-tuple(v_570),2-proj-2-tuple(v_584))) in
        {37}let (hs_587: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-7-tuple(v_569))))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (if not-caught-fail(v_575) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (v_585,v_586) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {38}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {39}insert statestore(alice,bob,sid,statepack_b(hs_587));
        {40}out(pub, message_a)
    ) | (
        {77}get statestore(=alice,=bob,=sid,statepack_b(hs_588: handshakestate)) in
        {42}in(pub, message_b: bitstring);
        {43}let v_589: bitstring = catch-fail(handshakestateunpack(hs_588)) in
        {44}let v_590: bitstring = catch-fail(deconcat3(message_b)) in
        {45}let v_591: bool = catch-fail(true) in
        {46}let v_592: key = catch-fail(1-proj-3-tuple(v_590)) in
        {47}let v_593: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_589))) in
        {48}let v_594: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_589)) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_593),hash(3-proj-3-tuple(v_593),v_592)) else fail-any) else fail-any)) in
        {49}let v_595: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_589))) in
        {50}let v_596: bitstring = catch-fail(symmetricstateunpack(v_594)) in
        {51}let v_597: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_596),(if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any))) in
        {52}let v_598: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_596),(if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any))) in
        {53}let v_599: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_596),(if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any))) in
        {54}let v_600: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_596))) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (v_597,v_598,v_599) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_601: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_589)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then dhexp(2-proj-2-tuple(v_595),v_592) else fail-any) else fail-any)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_600)) then cipherstatepack(2-proj-3-tuple(v_600),minnonce) else fail-any),1-proj-3-tuple(v_600),3-proj-3-tuple(v_596)) else fail-any) else fail-any) else fail-any)) in
        {56}let v_602: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_589))) in
        {57}let v_603: bitstring = catch-fail(symmetricstateunpack(v_601)) in
        {58}let v_604: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_603),(if (success?(4-proj-7-tuple(v_589)) && success?(3-proj-7-tuple(v_589))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),4-proj-7-tuple(v_589)) else fail-any) else fail-any))) in
        {59}let v_605: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_603),(if (success?(4-proj-7-tuple(v_589)) && success?(3-proj-7-tuple(v_589))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),4-proj-7-tuple(v_589)) else fail-any) else fail-any))) in
        {60}let v_606: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_603),(if (success?(4-proj-7-tuple(v_589)) && success?(3-proj-7-tuple(v_589))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),4-proj-7-tuple(v_589)) else fail-any) else fail-any))) in
        {61}let v_607: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_589)) && success?(3-proj-7-tuple(v_589))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),4-proj-7-tuple(v_589)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_603))) then (if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then (v_604,v_605,v_606) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_608: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_589)) && success?(3-proj-7-tuple(v_589))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),4-proj-7-tuple(v_589)) else fail-any) else fail-any)) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_607)) then cipherstatepack(2-proj-3-tuple(v_607),minnonce) else fail-any),1-proj-3-tuple(v_607),3-proj-3-tuple(v_603)) else fail-any) else fail-any) else fail-any)) in
        {63}let v_609: bitstring = catch-fail(symmetricstateunpack(v_608)) in
        {64}let v_610: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_609))) in
        {65}let v_611: aead = catch-fail(decrypt(1-proj-2-tuple(v_610),2-proj-2-tuple(v_610),3-proj-3-tuple(v_609),3-proj-3-tuple(v_590))) in
        {66}let v_612: bitstring = catch-fail(aeadunpack(v_611)) in
        {67}let v_613: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_609))) in
        {68}let v_614: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_610))) && success?(1-proj-3-tuple(v_609))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then cipherstatepack(1-proj-2-tuple(v_613),increment_nonce(2-proj-2-tuple(v_610))) else fail-any) else fail-any)) in
        {69}let v_615: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_590)) && (success?(3-proj-3-tuple(v_609)) && success?(1-proj-3-tuple(v_609)))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then (if not-caught-fail(v_611) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if not-caught-fail(v_614) then (v_614,3-proj-3-tuple(v_612),1-proj-3-tuple(v_612)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_616: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_615),2-proj-3-tuple(v_609),3-proj-3-tuple(v_609)))) in
        {71}let v_617: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_590)) && success?(symmetricstatepack(1-proj-3-tuple(v_615),2-proj-3-tuple(v_609),3-proj-3-tuple(v_609)))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack(1-proj-3-tuple(v_616),2-proj-3-tuple(v_616),hash(3-proj-3-tuple(v_616),3-proj-3-tuple(v_590))) else fail-any) else fail-any)) in
        {72}let v_618: bitstring = catch-fail((if success?(3-proj-3-tuple(v_590)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if not-caught-fail(v_617) then (v_617,2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_619: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_618),2-proj-7-tuple(v_589),3-proj-7-tuple(v_589),4-proj-7-tuple(v_589),v_592,6-proj-7-tuple(v_589),7-proj-7-tuple(v_589))) in
        {74}let (hs_620: handshakestate,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-7-tuple(v_589))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (if not-caught-fail(v_594) then (if not-caught-fail(v_601) then (if not-caught-fail(v_608) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (v_591 && 3-proj-3-tuple(v_618)) then (if not-caught-fail(v_619) then (v_619,2-proj-3-tuple(v_618),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {75}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {76}insert statestore(alice,bob,sid,statepack_c(hs_620))
    ) | (
        {121}get statestore(=alice,=bob,=sid,statepack_c(hs_621: handshakestate)) in
        {78}let v_622: bitstring = catch-fail(handshakestateunpack(hs_621)) in
        {79}let v_623: bitstring = catch-fail((empty,empty,empty)) in
        {80}let v_624: key = catch-fail(dhexp(key_s(alice),g)) in
        {81}let v_625: keypair = catch-fail((if not-caught-fail(v_624) then keypairpack(v_624,key_s(alice)) else fail-any)) in
        {82}let v_626: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_622))) in
        {83}let v_627: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_626))) in
        {84}let v_628: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_627),2-proj-2-tuple(v_627),3-proj-3-tuple(v_626),getpublickey(v_625))) in
        {85}let v_629: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_626))) in
        {86}let v_630: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_627))) && success?(1-proj-3-tuple(v_626))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then cipherstatepack(1-proj-2-tuple(v_629),increment_nonce(2-proj-2-tuple(v_627))) else fail-any) else fail-any)) in
        {87}let v_631: bitstring = catch-fail((if (success?(getpublickey(v_625)) && (success?(3-proj-3-tuple(v_626)) && success?(1-proj-3-tuple(v_626)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then (if not-caught-fail(v_628) then (if not-caught-fail(v_630) then (v_630,v_628) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {88}let v_632: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_631),2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)))) in
        {89}let v_633: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_631)) && success?(symmetricstatepack(1-proj-2-tuple(v_631),2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then symmetricstatepack(1-proj-3-tuple(v_632),2-proj-3-tuple(v_632),hash(3-proj-3-tuple(v_632),2-proj-2-tuple(v_631))) else fail-any) else fail-any)) in
        {90}let v_634: bitstring = catch-fail((if (success?(getpublickey(v_625)) && success?(1-proj-7-tuple(v_622))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then (if not-caught-fail(v_633) then (v_633,2-proj-2-tuple(v_631)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_635: bitstring = catch-fail(keypairunpack(v_625)) in
        {92}let v_636: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_634))) in
        {93}let v_637: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_636),(if success?(5-proj-7-tuple(v_622)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_622)) else fail-any) else fail-any))) in
        {94}let v_638: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_636),(if success?(5-proj-7-tuple(v_622)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_622)) else fail-any) else fail-any))) in
        {95}let v_639: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_636),(if success?(5-proj-7-tuple(v_622)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_622)) else fail-any) else fail-any))) in
        {96}let v_640: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_622)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_622)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_636))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (v_637,v_638,v_639) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_641: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_622)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_622)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_634))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_640)) then cipherstatepack(2-proj-3-tuple(v_640),minnonce) else fail-any),1-proj-3-tuple(v_640),3-proj-3-tuple(v_636)) else fail-any) else fail-any) else fail-any)) in
        {98}let v_642: bitstring = catch-fail(symmetricstateunpack(v_641)) in
        {99}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {100}let v_644: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_643),2-proj-2-tuple(v_643),3-proj-3-tuple(v_642),msg_c(alice,bob,sid))) in
        {101}let v_645: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {102}let v_646: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_643))) && success?(1-proj-3-tuple(v_642))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then cipherstatepack(1-proj-2-tuple(v_645),increment_nonce(2-proj-2-tuple(v_643))) else fail-any) else fail-any)) in
        {103}let v_647: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_642)) && success?(1-proj-3-tuple(v_642))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then (if not-caught-fail(v_644) then (if not-caught-fail(v_646) then (v_646,v_644) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_648: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) in
        {105}let v_649: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_647)) && success?(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack(1-proj-3-tuple(v_648),2-proj-3-tuple(v_648),hash(3-proj-3-tuple(v_648),2-proj-2-tuple(v_647))) else fail-any) else fail-any)) in
        {106}let v_650: bitstring = catch-fail((if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then (if not-caught-fail(v_649) then (v_649,2-proj-2-tuple(v_647)) else fail-any) else fail-any) else fail-any)) in
        {107}let v_651: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_650),v_625,3-proj-7-tuple(v_622),4-proj-7-tuple(v_622),5-proj-7-tuple(v_622),6-proj-7-tuple(v_622),7-proj-7-tuple(v_622))) in
        {108}let v_652: bitstring = catch-fail(concat3(1-proj-3-tuple(v_623),2-proj-2-tuple(v_634),2-proj-2-tuple(v_650))) in
        {109}let v_653: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_650))) in
        {110}let v_654: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_653),zero)) in
        {111}let v_655: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_653),zero)) in
        {112}let v_656: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_653),zero)) in
        {113}let v_657: bitstring = catch-fail((if success?(2-proj-3-tuple(v_653)) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then (if not-caught-fail(v_656) then (v_654,v_655,v_656) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_658: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_657)) then cipherstatepack(1-proj-3-tuple(v_657),minnonce) else fail-any)) in
        {115}let v_659: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_657)) then cipherstatepack(2-proj-3-tuple(v_657),minnonce) else fail-any)) in
        {116}let v_660: bitstring = catch-fail((if success?(1-proj-2-tuple(v_650)) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if not-caught-fail(v_658) then (if not-caught-fail(v_659) then (1-proj-2-tuple(v_650),v_658,v_659) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let (hs_661: handshakestate,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-7-tuple(v_622))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_625) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-2-tuple(v_634))))) then (if not-caught-fail(v_641) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (v_651,v_652,2-proj-3-tuple(v_660),3-proj-3-tuple(v_660)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {118}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {119}insert statestore(alice,bob,sid,statepack_d(hs_661,cs1,cs2));
        {120}out(pub, message_c)
    ) | (
        {122}!
        {142}get statestore(=alice,=bob,=sid,statepack_d(hs_662: handshakestate,cs1_663: cipherstate,cs2_664: cipherstate)) in
        {123}let hs_665: handshakestate = handshakestatesetcs(hs_662,cs2_664) in
        {124}in(pub, message_d: bitstring);
        {125}let v_666: bitstring = catch-fail(handshakestateunpack(hs_665)) in
        {126}let v_667: bitstring = catch-fail(deconcat3(message_d)) in
        {127}let v_668: bool = catch-fail(true) in
        {128}let v_669: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_666))) in
        {129}let v_670: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {130}let v_671: aead = catch-fail(decrypt(1-proj-2-tuple(v_670),2-proj-2-tuple(v_670),3-proj-3-tuple(v_669),3-proj-3-tuple(v_667))) in
        {131}let v_672: bitstring = catch-fail(aeadunpack(v_671)) in
        {132}let v_673: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {133}let v_674: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_670))) && success?(1-proj-3-tuple(v_669))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then cipherstatepack(1-proj-2-tuple(v_673),increment_nonce(2-proj-2-tuple(v_670))) else fail-any) else fail-any)) in
        {134}let v_675: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_667)) && (success?(3-proj-3-tuple(v_669)) && success?(1-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-2-tuple(v_670))))) then (if not-caught-fail(v_671) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then (if not-caught-fail(v_674) then (v_674,3-proj-3-tuple(v_672),1-proj-3-tuple(v_672)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_676: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) in
        {136}let v_677: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_667)) && success?(symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then symmetricstatepack(1-proj-3-tuple(v_676),2-proj-3-tuple(v_676),hash(3-proj-3-tuple(v_676),3-proj-3-tuple(v_667))) else fail-any) else fail-any)) in
        {137}let v_678: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_667)) && success?(1-proj-7-tuple(v_666))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if not-caught-fail(v_677) then (v_677,2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_679: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_678),2-proj-7-tuple(v_666),3-proj-7-tuple(v_666),4-proj-7-tuple(v_666),5-proj-7-tuple(v_666),6-proj-7-tuple(v_666),7-proj-7-tuple(v_666))) in
        {139}let (hs_680: handshakestate,plaintext_d: bitstring,valid_681: bool) = (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-7-tuple(v_666))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if not-caught-fail(v_668) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if (v_668 && 3-proj-3-tuple(v_678)) then (if not-caught-fail(v_679) then (v_679,2-proj-3-tuple(v_678),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {140}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {141}insert statestore(alice,bob,sid,statepack_e(hs_680,cs1_663,handshakestategetcs(hs_680)))
    ) | (
        {143}!
        {161}get statestore(=alice,=bob,=sid,statepack_e(hs_682: handshakestate,cs1_683: cipherstate,cs2_684: cipherstate)) in
        {144}let hs_685: handshakestate = handshakestatesetcs(hs_682,cs1_683) in
        {145}let v_686: bitstring = catch-fail(handshakestateunpack(hs_685)) in
        {146}let v_687: bitstring = catch-fail((empty,empty,empty)) in
        {147}let v_688: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_686))) in
        {148}let v_689: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {149}let v_690: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_689),2-proj-2-tuple(v_689),3-proj-3-tuple(v_688),msg_e(alice,bob,sid))) in
        {150}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {151}let v_692: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_689))) && success?(1-proj-3-tuple(v_688))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then cipherstatepack(1-proj-2-tuple(v_691),increment_nonce(2-proj-2-tuple(v_689))) else fail-any) else fail-any)) in
        {152}let v_693: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_688)) && success?(1-proj-3-tuple(v_688))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then (if not-caught-fail(v_690) then (if not-caught-fail(v_692) then (v_692,v_690) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {153}let v_694: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) in
        {154}let v_695: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_693)) && success?(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then symmetricstatepack(1-proj-3-tuple(v_694),2-proj-3-tuple(v_694),hash(3-proj-3-tuple(v_694),2-proj-2-tuple(v_693))) else fail-any) else fail-any)) in
        {155}let v_696: bitstring = catch-fail((if success?(1-proj-7-tuple(v_686)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,2-proj-2-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_697: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_696),2-proj-7-tuple(v_686),3-proj-7-tuple(v_686),4-proj-7-tuple(v_686),5-proj-7-tuple(v_686),6-proj-7-tuple(v_686),7-proj-7-tuple(v_686))) in
        {157}let v_698: bitstring = catch-fail(concat3(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),2-proj-2-tuple(v_696))) in
        {158}let (hs_699: handshakestate,message_e: bitstring) = (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-7-tuple(v_686))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (v_697,v_698) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {159}event SendMsg(alice,bob,stagepack_e(sid),msg_e(alice,bob,sid));
        {160}out(pub, message_e)
    ) | (
        {162}event LeakS(phase0,alice);
        {163}out(pub, key_s(alice))
    ) | (
        {164}phase 1;
        {165}event LeakS(phase1,alice);
        {166}out(pub, key_s(alice))
    )
) | (
    {167}let s_700: keypair = keypairpack(empty,empty) in
    {168}out(pub, getpublickey(s_700));
    (
        {169}let e_701: keypair = keypairpack(empty,empty) in
        {170}let v_702: key = catch-fail(dhexp(key_s(charlie),g)) in
        {171}let rs_703: key = getpublickey((if not-caught-fail(v_702) then keypairpack(v_702,key_s(charlie)) else fail-any)) in
        {172}let re_704: key = empty in
        {173}let v_705: bitstring = catch-fail(hash(somename,empty)) in
        {174}let v_706: key = catch-fail(v_705) in
        {175}let v_707: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {176}let v_708: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_705) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then symmetricstatepack(v_707,v_706,v_705) else fail-any) else fail-any) else fail-any))) in
        {177}let v_709: symmetricstate = catch-fail((if success?((if not-caught-fail(v_705) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then symmetricstatepack(v_707,v_706,v_705) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_708),hash(3-proj-3-tuple(v_708),empty)) else fail-any) else fail-any)) in
        {178}let v_710: bitstring = catch-fail(symmetricstateunpack(v_709)) in
        {179}let v_711: symmetricstate = catch-fail((if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then symmetricstatepack(1-proj-3-tuple(v_710),2-proj-3-tuple(v_710),hash(3-proj-3-tuple(v_710),rs_703)) else fail-any)) in
        {180}let hs_712: handshakestate = (if not-caught-fail(v_709) then (if not-caught-fail(v_711) then handshakestatepack(v_711,s_700,e_701,rs_703,re_704,empty,true) else fail-any) else fail-any) in
        {181}insert statestore(alice,charlie,sid,statepack_a(hs_712))
    ) | (
        {204}get statestore(=alice,=charlie,=sid,statepack_a(hs_713: handshakestate)) in
        {182}let v_714: bitstring = catch-fail(handshakestateunpack(hs_713)) in
        {183}let v_715: bitstring = catch-fail((empty,empty,empty)) in
        {184}let v_716: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {185}let v_717: keypair = catch-fail((if not-caught-fail(v_716) then keypairpack(v_716,key_e(alice,charlie,sid)) else fail-any)) in
        {186}let v_718: bitstring = catch-fail(getpublickey(v_717)) in
        {187}let v_719: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_714))) in
        {188}let v_720: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_714)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),hash(3-proj-3-tuple(v_719),v_718)) else fail-any) else fail-any)) in
        {189}let v_721: bitstring = catch-fail(symmetricstateunpack(v_720)) in
        {190}let v_722: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_721))) in
        {191}let v_723: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_722),2-proj-2-tuple(v_722),3-proj-3-tuple(v_721),msg_a(alice,charlie,sid))) in
        {192}let v_724: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_721))) in
        {193}let v_725: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_722))) && success?(1-proj-3-tuple(v_721))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then cipherstatepack(1-proj-2-tuple(v_724),increment_nonce(2-proj-2-tuple(v_722))) else fail-any) else fail-any)) in
        {194}let v_726: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_721)) && success?(1-proj-3-tuple(v_721))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then (if not-caught-fail(v_723) then (if not-caught-fail(v_725) then (v_725,v_723) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {195}let v_727: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_726),2-proj-3-tuple(v_721),3-proj-3-tuple(v_721)))) in
        {196}let v_728: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_726)) && success?(symmetricstatepack(1-proj-2-tuple(v_726),2-proj-3-tuple(v_721),3-proj-3-tuple(v_721)))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then symmetricstatepack(1-proj-3-tuple(v_727),2-proj-3-tuple(v_727),hash(3-proj-3-tuple(v_727),2-proj-2-tuple(v_726))) else fail-any) else fail-any)) in
        {197}let v_729: bitstring = catch-fail((if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then (if not-caught-fail(v_728) then (v_728,2-proj-2-tuple(v_726)) else fail-any) else fail-any) else fail-any)) in
        {198}let v_730: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_729),2-proj-7-tuple(v_714),v_717,4-proj-7-tuple(v_714),5-proj-7-tuple(v_714),6-proj-7-tuple(v_714),7-proj-7-tuple(v_714))) in
        {199}let v_731: bitstring = catch-fail(concat3(v_718,2-proj-3-tuple(v_715),2-proj-2-tuple(v_729))) in
        {200}let (hs_732: handshakestate,message_a_733: bitstring) = (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-7-tuple(v_714))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (if not-caught-fail(v_720) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-2-tuple(v_729))))) then (if not-caught-fail(v_730) then (if not-caught-fail(v_731) then (v_730,v_731) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {201}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {202}insert statestore(alice,charlie,sid,statepack_b(hs_732));
        {203}out(pub, message_a_733)
    ) | (
        {240}get statestore(=alice,=charlie,=sid,statepack_b(hs_734: handshakestate)) in
        {205}in(pub, message_b_735: bitstring);
        {206}let v_736: bitstring = catch-fail(handshakestateunpack(hs_734)) in
        {207}let v_737: bitstring = catch-fail(deconcat3(message_b_735)) in
        {208}let v_738: bool = catch-fail(true) in
        {209}let v_739: key = catch-fail(1-proj-3-tuple(v_737)) in
        {210}let v_740: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_736))) in
        {211}let v_741: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_736)) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then symmetricstatepack(1-proj-3-tuple(v_740),2-proj-3-tuple(v_740),hash(3-proj-3-tuple(v_740),v_739)) else fail-any) else fail-any)) in
        {212}let v_742: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_736))) in
        {213}let v_743: bitstring = catch-fail(symmetricstateunpack(v_741)) in
        {214}let v_744: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_743),(if success?(3-proj-7-tuple(v_736)) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then dhexp(2-proj-2-tuple(v_742),v_739) else fail-any) else fail-any))) in
        {215}let v_745: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_743),(if success?(3-proj-7-tuple(v_736)) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then dhexp(2-proj-2-tuple(v_742),v_739) else fail-any) else fail-any))) in
        {216}let v_746: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_743),(if success?(3-proj-7-tuple(v_736)) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then dhexp(2-proj-2-tuple(v_742),v_739) else fail-any) else fail-any))) in
        {217}let v_747: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_736)) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then dhexp(2-proj-2-tuple(v_742),v_739) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_743))) then (if not-caught-fail(v_744) then (if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (v_744,v_745,v_746) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_748: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_736)) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then dhexp(2-proj-2-tuple(v_742),v_739) else fail-any) else fail-any)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_747)) then cipherstatepack(2-proj-3-tuple(v_747),minnonce) else fail-any),1-proj-3-tuple(v_747),3-proj-3-tuple(v_743)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_749: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_736))) in
        {220}let v_750: bitstring = catch-fail(symmetricstateunpack(v_748)) in
        {221}let v_751: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_750),(if (success?(4-proj-7-tuple(v_736)) && success?(3-proj-7-tuple(v_736))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {222}let v_752: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_750),(if (success?(4-proj-7-tuple(v_736)) && success?(3-proj-7-tuple(v_736))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {223}let v_753: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_750),(if (success?(4-proj-7-tuple(v_736)) && success?(3-proj-7-tuple(v_736))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {224}let v_754: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_736)) && success?(3-proj-7-tuple(v_736))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_750))) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then (if not-caught-fail(v_753) then (v_751,v_752,v_753) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_755: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_736)) && success?(3-proj-7-tuple(v_736))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then dhexp(2-proj-2-tuple(v_749),4-proj-7-tuple(v_736)) else fail-any) else fail-any)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_754)) then cipherstatepack(2-proj-3-tuple(v_754),minnonce) else fail-any),1-proj-3-tuple(v_754),3-proj-3-tuple(v_750)) else fail-any) else fail-any) else fail-any)) in
        {226}let v_756: bitstring = catch-fail(symmetricstateunpack(v_755)) in
        {227}let v_757: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_756))) in
        {228}let v_758: aead = catch-fail(decrypt(1-proj-2-tuple(v_757),2-proj-2-tuple(v_757),3-proj-3-tuple(v_756),3-proj-3-tuple(v_737))) in
        {229}let v_759: bitstring = catch-fail(aeadunpack(v_758)) in
        {230}let v_760: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_756))) in
        {231}let v_761: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_757))) && success?(1-proj-3-tuple(v_756))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then cipherstatepack(1-proj-2-tuple(v_760),increment_nonce(2-proj-2-tuple(v_757))) else fail-any) else fail-any)) in
        {232}let v_762: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_737)) && (success?(3-proj-3-tuple(v_756)) && success?(1-proj-3-tuple(v_756)))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then (if not-caught-fail(v_758) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if not-caught-fail(v_761) then (v_761,3-proj-3-tuple(v_759),1-proj-3-tuple(v_759)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_763: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_756),3-proj-3-tuple(v_756)))) in
        {234}let v_764: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_737)) && success?(symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_756),3-proj-3-tuple(v_756)))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack(1-proj-3-tuple(v_763),2-proj-3-tuple(v_763),hash(3-proj-3-tuple(v_763),3-proj-3-tuple(v_737))) else fail-any) else fail-any)) in
        {235}let v_765: bitstring = catch-fail((if success?(3-proj-3-tuple(v_737)) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then (if not-caught-fail(v_764) then (v_764,2-proj-3-tuple(v_762),3-proj-3-tuple(v_762)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_766: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_765),2-proj-7-tuple(v_736),3-proj-7-tuple(v_736),4-proj-7-tuple(v_736),v_739,6-proj-7-tuple(v_736),7-proj-7-tuple(v_736))) in
        {237}let (hs_767: handshakestate,plaintext_b_768: bitstring,valid_769: bool) = (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-7-tuple(v_736))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_738) then (if not-caught-fail(v_739) then (if not-caught-fail(v_741) then (if not-caught-fail(v_748) then (if not-caught-fail(v_755) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (v_738 && 3-proj-3-tuple(v_765)) then (if not-caught-fail(v_766) then (v_766,2-proj-3-tuple(v_765),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {238}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_768);
        {239}insert statestore(alice,charlie,sid,statepack_c(hs_767))
    ) | (
        {284}get statestore(=alice,=charlie,=sid,statepack_c(hs_770: handshakestate)) in
        {241}let v_771: bitstring = catch-fail(handshakestateunpack(hs_770)) in
        {242}let v_772: bitstring = catch-fail((empty,empty,empty)) in
        {243}let v_773: key = catch-fail(dhexp(key_s(alice),g)) in
        {244}let v_774: keypair = catch-fail((if not-caught-fail(v_773) then keypairpack(v_773,key_s(alice)) else fail-any)) in
        {245}let v_775: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_771))) in
        {246}let v_776: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_775))) in
        {247}let v_777: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_776),2-proj-2-tuple(v_776),3-proj-3-tuple(v_775),getpublickey(v_774))) in
        {248}let v_778: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_775))) in
        {249}let v_779: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_776))) && success?(1-proj-3-tuple(v_775))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then cipherstatepack(1-proj-2-tuple(v_778),increment_nonce(2-proj-2-tuple(v_776))) else fail-any) else fail-any)) in
        {250}let v_780: bitstring = catch-fail((if (success?(getpublickey(v_774)) && (success?(3-proj-3-tuple(v_775)) && success?(1-proj-3-tuple(v_775)))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then (if not-caught-fail(v_777) then (if not-caught-fail(v_779) then (v_779,v_777) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_781: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_780),2-proj-3-tuple(v_775),3-proj-3-tuple(v_775)))) in
        {252}let v_782: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_780)) && success?(symmetricstatepack(1-proj-2-tuple(v_780),2-proj-3-tuple(v_775),3-proj-3-tuple(v_775)))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then symmetricstatepack(1-proj-3-tuple(v_781),2-proj-3-tuple(v_781),hash(3-proj-3-tuple(v_781),2-proj-2-tuple(v_780))) else fail-any) else fail-any)) in
        {253}let v_783: bitstring = catch-fail((if (success?(getpublickey(v_774)) && success?(1-proj-7-tuple(v_771))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then (if not-caught-fail(v_782) then (v_782,2-proj-2-tuple(v_780)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {254}let v_784: bitstring = catch-fail(keypairunpack(v_774)) in
        {255}let v_785: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_783))) in
        {256}let v_786: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_785),(if success?(5-proj-7-tuple(v_771)) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_771)) else fail-any) else fail-any))) in
        {257}let v_787: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_785),(if success?(5-proj-7-tuple(v_771)) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_771)) else fail-any) else fail-any))) in
        {258}let v_788: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_785),(if success?(5-proj-7-tuple(v_771)) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_771)) else fail-any) else fail-any))) in
        {259}let v_789: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_771)) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_771)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_785))) then (if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (if not-caught-fail(v_788) then (v_786,v_787,v_788) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_790: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_771)) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_771)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_783))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_789)) then cipherstatepack(2-proj-3-tuple(v_789),minnonce) else fail-any),1-proj-3-tuple(v_789),3-proj-3-tuple(v_785)) else fail-any) else fail-any) else fail-any)) in
        {261}let v_791: bitstring = catch-fail(symmetricstateunpack(v_790)) in
        {262}let v_792: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {263}let v_793: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_792),2-proj-2-tuple(v_792),3-proj-3-tuple(v_791),msg_c(alice,charlie,sid))) in
        {264}let v_794: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {265}let v_795: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_792))) && success?(1-proj-3-tuple(v_791))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then cipherstatepack(1-proj-2-tuple(v_794),increment_nonce(2-proj-2-tuple(v_792))) else fail-any) else fail-any)) in
        {266}let v_796: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_791)) && success?(1-proj-3-tuple(v_791))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then (if not-caught-fail(v_793) then (if not-caught-fail(v_795) then (v_795,v_793) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_797: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_796),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) in
        {268}let v_798: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_796)) && success?(symmetricstatepack(1-proj-2-tuple(v_796),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_797),hash(3-proj-3-tuple(v_797),2-proj-2-tuple(v_796))) else fail-any) else fail-any)) in
        {269}let v_799: bitstring = catch-fail((if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then (if not-caught-fail(v_798) then (v_798,2-proj-2-tuple(v_796)) else fail-any) else fail-any) else fail-any)) in
        {270}let v_800: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_799),v_774,3-proj-7-tuple(v_771),4-proj-7-tuple(v_771),5-proj-7-tuple(v_771),6-proj-7-tuple(v_771),7-proj-7-tuple(v_771))) in
        {271}let v_801: bitstring = catch-fail(concat3(1-proj-3-tuple(v_772),2-proj-2-tuple(v_783),2-proj-2-tuple(v_799))) in
        {272}let v_802: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_799))) in
        {273}let v_803: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_802),zero)) in
        {274}let v_804: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_802),zero)) in
        {275}let v_805: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_802),zero)) in
        {276}let v_806: bitstring = catch-fail((if success?(2-proj-3-tuple(v_802)) then (if not-caught-fail(v_803) then (if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (v_803,v_804,v_805) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_807: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_806)) then cipherstatepack(1-proj-3-tuple(v_806),minnonce) else fail-any)) in
        {278}let v_808: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_806)) then cipherstatepack(2-proj-3-tuple(v_806),minnonce) else fail-any)) in
        {279}let v_809: bitstring = catch-fail((if success?(1-proj-2-tuple(v_799)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if not-caught-fail(v_807) then (if not-caught-fail(v_808) then (1-proj-2-tuple(v_799),v_807,v_808) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let (hs_810: handshakestate,message_c_811: bitstring,cs1_812: cipherstate,cs2_813: cipherstate) = (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-7-tuple(v_771))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if not-caught-fail(v_774) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then (if not-caught-fail(v_790) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (v_800,v_801,2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {281}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {282}insert statestore(alice,charlie,sid,statepack_d(hs_810,cs1_812,cs2_813));
        {283}out(pub, message_c_811)
    ) | (
        {285}!
        {305}get statestore(=alice,=charlie,=sid,statepack_d(hs_814: handshakestate,cs1_815: cipherstate,cs2_816: cipherstate)) in
        {286}let hs_817: handshakestate = handshakestatesetcs(hs_814,cs2_816) in
        {287}in(pub, message_d_818: bitstring);
        {288}let v_819: bitstring = catch-fail(handshakestateunpack(hs_817)) in
        {289}let v_820: bitstring = catch-fail(deconcat3(message_d_818)) in
        {290}let v_821: bool = catch-fail(true) in
        {291}let v_822: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_819))) in
        {292}let v_823: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_822))) in
        {293}let v_824: aead = catch-fail(decrypt(1-proj-2-tuple(v_823),2-proj-2-tuple(v_823),3-proj-3-tuple(v_822),3-proj-3-tuple(v_820))) in
        {294}let v_825: bitstring = catch-fail(aeadunpack(v_824)) in
        {295}let v_826: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_822))) in
        {296}let v_827: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_823))) && success?(1-proj-3-tuple(v_822))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-2-tuple(v_826))))) then cipherstatepack(1-proj-2-tuple(v_826),increment_nonce(2-proj-2-tuple(v_823))) else fail-any) else fail-any)) in
        {297}let v_828: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_820)) && (success?(3-proj-3-tuple(v_822)) && success?(1-proj-3-tuple(v_822)))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then (if not-caught-fail(v_824) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (if not-caught-fail(v_827) then (v_827,3-proj-3-tuple(v_825),1-proj-3-tuple(v_825)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let v_829: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_822),3-proj-3-tuple(v_822)))) in
        {299}let v_830: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_820)) && success?(symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_822),3-proj-3-tuple(v_822)))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then symmetricstatepack(1-proj-3-tuple(v_829),2-proj-3-tuple(v_829),hash(3-proj-3-tuple(v_829),3-proj-3-tuple(v_820))) else fail-any) else fail-any)) in
        {300}let v_831: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_820)) && success?(1-proj-7-tuple(v_819))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then (if not-caught-fail(v_830) then (v_830,2-proj-3-tuple(v_828),3-proj-3-tuple(v_828)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_832: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_831),2-proj-7-tuple(v_819),3-proj-7-tuple(v_819),4-proj-7-tuple(v_819),5-proj-7-tuple(v_819),6-proj-7-tuple(v_819),7-proj-7-tuple(v_819))) in
        {302}let (hs_833: handshakestate,plaintext_d_834: bitstring,valid_835: bool) = (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-7-tuple(v_819))))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if not-caught-fail(v_821) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if (v_821 && 3-proj-3-tuple(v_831)) then (if not-caught-fail(v_832) then (v_832,2-proj-3-tuple(v_831),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {303}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_834);
        {304}insert statestore(alice,charlie,sid,statepack_e(hs_833,cs1_815,handshakestategetcs(hs_833)))
    ) | (
        {306}!
        {324}get statestore(=alice,=charlie,=sid,statepack_e(hs_836: handshakestate,cs1_837: cipherstate,cs2_838: cipherstate)) in
        {307}let hs_839: handshakestate = handshakestatesetcs(hs_836,cs1_837) in
        {308}let v_840: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {309}let v_841: bitstring = catch-fail((empty,empty,empty)) in
        {310}let v_842: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_840))) in
        {311}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {312}let v_844: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_843),2-proj-2-tuple(v_843),3-proj-3-tuple(v_842),msg_e(alice,charlie,sid))) in
        {313}let v_845: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {314}let v_846: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_843))) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then cipherstatepack(1-proj-2-tuple(v_845),increment_nonce(2-proj-2-tuple(v_843))) else fail-any) else fail-any)) in
        {315}let v_847: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (v_846,v_844) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_848: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) in
        {317}let v_849: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_847)) && success?(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_848),hash(3-proj-3-tuple(v_848),2-proj-2-tuple(v_847))) else fail-any) else fail-any)) in
        {318}let v_850: bitstring = catch-fail((if success?(1-proj-7-tuple(v_840)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if not-caught-fail(v_849) then (v_849,2-proj-2-tuple(v_847)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {319}let v_851: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_850),2-proj-7-tuple(v_840),3-proj-7-tuple(v_840),4-proj-7-tuple(v_840),5-proj-7-tuple(v_840),6-proj-7-tuple(v_840),7-proj-7-tuple(v_840))) in
        {320}let v_852: bitstring = catch-fail(concat3(1-proj-3-tuple(v_841),2-proj-3-tuple(v_841),2-proj-2-tuple(v_850))) in
        {321}let (hs_853: handshakestate,message_e_854: bitstring) = (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-7-tuple(v_840))))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (v_851,v_852) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {322}event SendMsg(alice,charlie,stagepack_e(sid),msg_e(alice,charlie,sid));
        {323}out(pub, message_e_854)
    ) | (
        {325}event LeakS(phase0,alice);
        {326}out(pub, key_s(alice))
    ) | (
        {327}phase 1;
        {328}event LeakS(phase1,alice);
        {329}out(pub, key_s(alice))
    )
) | (
    {330}let v_855: key = catch-fail(dhexp(key_s(bob),g)) in
    {331}let s_856: keypair = (if not-caught-fail(v_855) then keypairpack(v_855,key_s(bob)) else fail-any) in
    {332}out(pub, getpublickey(s_856));
    (
        {333}let e_857: keypair = keypairpack(empty,empty) in
        {334}let rs_858: key = empty in
        {335}let re_859: key = empty in
        {336}let v_860: bitstring = catch-fail(hash(somename,empty)) in
        {337}let v_861: key = catch-fail(v_860) in
        {338}let v_862: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {339}let v_863: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (if not-caught-fail(v_862) then symmetricstatepack(v_862,v_861,v_860) else fail-any) else fail-any) else fail-any))) in
        {340}let v_864: symmetricstate = catch-fail((if success?((if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (if not-caught-fail(v_862) then symmetricstatepack(v_862,v_861,v_860) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),hash(3-proj-3-tuple(v_863),empty)) else fail-any) else fail-any)) in
        {341}let v_865: bitstring = catch-fail(symmetricstateunpack(v_864)) in
        {342}let v_866: symmetricstate = catch-fail((if success?(getpublickey(s_856)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_865),hash(3-proj-3-tuple(v_865),getpublickey(s_856))) else fail-any) else fail-any)) in
        {343}let hs_867: handshakestate = (if not-caught-fail(v_864) then (if not-caught-fail(v_866) then handshakestatepack(v_866,s_856,e_857,rs_858,re_859,empty,false) else fail-any) else fail-any) in
        {344}insert statestore(bob,alice,sid,statepack_a(hs_867))
    ) | (
        {366}get statestore(=bob,=alice,=sid,statepack_a(hs_868: handshakestate)) in
        {345}in(pub, message_a_869: bitstring);
        {346}let v_870: bitstring = catch-fail(handshakestateunpack(hs_868)) in
        {347}let v_871: bitstring = catch-fail(deconcat3(message_a_869)) in
        {348}let v_872: bool = catch-fail(true) in
        {349}let v_873: key = catch-fail(1-proj-3-tuple(v_871)) in
        {350}let v_874: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_870))) in
        {351}let v_875: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_870)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack(1-proj-3-tuple(v_874),2-proj-3-tuple(v_874),hash(3-proj-3-tuple(v_874),v_873)) else fail-any) else fail-any)) in
        {352}let v_876: bitstring = catch-fail(symmetricstateunpack(v_875)) in
        {353}let v_877: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_876))) in
        {354}let v_878: aead = catch-fail(decrypt(1-proj-2-tuple(v_877),2-proj-2-tuple(v_877),3-proj-3-tuple(v_876),3-proj-3-tuple(v_871))) in
        {355}let v_879: bitstring = catch-fail(aeadunpack(v_878)) in
        {356}let v_880: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_876))) in
        {357}let v_881: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_877))) && success?(1-proj-3-tuple(v_876))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then cipherstatepack(1-proj-2-tuple(v_880),increment_nonce(2-proj-2-tuple(v_877))) else fail-any) else fail-any)) in
        {358}let v_882: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_871)) && (success?(3-proj-3-tuple(v_876)) && success?(1-proj-3-tuple(v_876)))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-2-tuple(v_877))))) then (if not-caught-fail(v_878) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if not-caught-fail(v_881) then (v_881,3-proj-3-tuple(v_879),1-proj-3-tuple(v_879)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {359}let v_883: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_882),2-proj-3-tuple(v_876),3-proj-3-tuple(v_876)))) in
        {360}let v_884: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_871)) && success?(symmetricstatepack(1-proj-3-tuple(v_882),2-proj-3-tuple(v_876),3-proj-3-tuple(v_876)))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_883),hash(3-proj-3-tuple(v_883),3-proj-3-tuple(v_871))) else fail-any) else fail-any)) in
        {361}let v_885: bitstring = catch-fail((if success?(3-proj-3-tuple(v_871)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (if not-caught-fail(v_884) then (v_884,2-proj-3-tuple(v_882),3-proj-3-tuple(v_882)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {362}let v_886: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_885),2-proj-7-tuple(v_870),3-proj-7-tuple(v_870),4-proj-7-tuple(v_870),v_873,6-proj-7-tuple(v_870),7-proj-7-tuple(v_870))) in
        {363}let (hs_887: handshakestate,plaintext_a: bitstring,valid_888: bool) = (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-7-tuple(v_870))))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_875) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if (v_872 && 3-proj-3-tuple(v_885)) then (if not-caught-fail(v_886) then (v_886,2-proj-3-tuple(v_885),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {364}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {365}insert statestore(bob,alice,sid,statepack_b(hs_887))
    ) | (
        {403}get statestore(=bob,=alice,=sid,statepack_b(hs_889: handshakestate)) in
        {367}let v_890: bitstring = catch-fail(handshakestateunpack(hs_889)) in
        {368}let v_891: bitstring = catch-fail((empty,empty,empty)) in
        {369}let v_892: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {370}let v_893: keypair = catch-fail((if not-caught-fail(v_892) then keypairpack(v_892,key_e(bob,alice,sid)) else fail-any)) in
        {371}let v_894: bitstring = catch-fail(getpublickey(v_893)) in
        {372}let v_895: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_890))) in
        {373}let v_896: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_890)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then symmetricstatepack(1-proj-3-tuple(v_895),2-proj-3-tuple(v_895),hash(3-proj-3-tuple(v_895),v_894)) else fail-any) else fail-any)) in
        {374}let v_897: bitstring = catch-fail(keypairunpack(v_893)) in
        {375}let v_898: bitstring = catch-fail(symmetricstateunpack(v_896)) in
        {376}let v_899: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_898),(if success?(5-proj-7-tuple(v_890)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then dhexp(2-proj-2-tuple(v_897),5-proj-7-tuple(v_890)) else fail-any) else fail-any))) in
        {377}let v_900: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_898),(if success?(5-proj-7-tuple(v_890)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then dhexp(2-proj-2-tuple(v_897),5-proj-7-tuple(v_890)) else fail-any) else fail-any))) in
        {378}let v_901: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_898),(if success?(5-proj-7-tuple(v_890)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then dhexp(2-proj-2-tuple(v_897),5-proj-7-tuple(v_890)) else fail-any) else fail-any))) in
        {379}let v_902: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_890)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then dhexp(2-proj-2-tuple(v_897),5-proj-7-tuple(v_890)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_898))) then (if not-caught-fail(v_899) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (v_899,v_900,v_901) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_903: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_890)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then dhexp(2-proj-2-tuple(v_897),5-proj-7-tuple(v_890)) else fail-any) else fail-any)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_902)) then cipherstatepack(2-proj-3-tuple(v_902),minnonce) else fail-any),1-proj-3-tuple(v_902),3-proj-3-tuple(v_898)) else fail-any) else fail-any) else fail-any)) in
        {381}let v_904: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_890))) in
        {382}let v_905: bitstring = catch-fail(symmetricstateunpack(v_903)) in
        {383}let v_906: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_905),(if (success?(5-proj-7-tuple(v_890)) && success?(2-proj-7-tuple(v_890))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),5-proj-7-tuple(v_890)) else fail-any) else fail-any))) in
        {384}let v_907: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_905),(if (success?(5-proj-7-tuple(v_890)) && success?(2-proj-7-tuple(v_890))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),5-proj-7-tuple(v_890)) else fail-any) else fail-any))) in
        {385}let v_908: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_905),(if (success?(5-proj-7-tuple(v_890)) && success?(2-proj-7-tuple(v_890))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),5-proj-7-tuple(v_890)) else fail-any) else fail-any))) in
        {386}let v_909: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_890)) && success?(2-proj-7-tuple(v_890))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),5-proj-7-tuple(v_890)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_905))) then (if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (if not-caught-fail(v_908) then (v_906,v_907,v_908) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_910: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_890)) && success?(2-proj-7-tuple(v_890))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then dhexp(2-proj-2-tuple(v_904),5-proj-7-tuple(v_890)) else fail-any) else fail-any)) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_909)) then cipherstatepack(2-proj-3-tuple(v_909),minnonce) else fail-any),1-proj-3-tuple(v_909),3-proj-3-tuple(v_905)) else fail-any) else fail-any) else fail-any)) in
        {388}let v_911: bitstring = catch-fail(symmetricstateunpack(v_910)) in
        {389}let v_912: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_911))) in
        {390}let v_913: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_912),2-proj-2-tuple(v_912),3-proj-3-tuple(v_911),msg_b(bob,alice,sid))) in
        {391}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_911))) in
        {392}let v_915: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_912))) && success?(1-proj-3-tuple(v_911))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then cipherstatepack(1-proj-2-tuple(v_914),increment_nonce(2-proj-2-tuple(v_912))) else fail-any) else fail-any)) in
        {393}let v_916: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_911)) && success?(1-proj-3-tuple(v_911))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-2-tuple(v_912))))) then (if not-caught-fail(v_913) then (if not-caught-fail(v_915) then (v_915,v_913) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {394}let v_917: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_916),2-proj-3-tuple(v_911),3-proj-3-tuple(v_911)))) in
        {395}let v_918: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_916)) && success?(symmetricstatepack(1-proj-2-tuple(v_916),2-proj-3-tuple(v_911),3-proj-3-tuple(v_911)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then symmetricstatepack(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),hash(3-proj-3-tuple(v_917),2-proj-2-tuple(v_916))) else fail-any) else fail-any)) in
        {396}let v_919: bitstring = catch-fail((if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,2-proj-2-tuple(v_916)) else fail-any) else fail-any) else fail-any)) in
        {397}let v_920: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_919),2-proj-7-tuple(v_890),v_893,4-proj-7-tuple(v_890),5-proj-7-tuple(v_890),6-proj-7-tuple(v_890),7-proj-7-tuple(v_890))) in
        {398}let v_921: bitstring = catch-fail(concat3(v_894,2-proj-3-tuple(v_891),2-proj-2-tuple(v_919))) in
        {399}let (hs_922: handshakestate,message_b_923: bitstring) = (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-7-tuple(v_890))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_894) then (if not-caught-fail(v_896) then (if not-caught-fail(v_903) then (if not-caught-fail(v_910) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-2-tuple(v_919))))) then (if not-caught-fail(v_920) then (if not-caught-fail(v_921) then (v_920,v_921) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {400}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {401}insert statestore(bob,alice,sid,statepack_c(hs_922));
        {402}out(pub, message_b_923)
    ) | (
        {449}get statestore(=bob,=alice,=sid,statepack_c(hs_924: handshakestate)) in
        {404}in(pub, message_c_925: bitstring);
        {405}let v_926: bitstring = catch-fail(handshakestateunpack(hs_924)) in
        {406}let v_927: bitstring = catch-fail(deconcat3(message_c_925)) in
        {407}let v_928: bool = catch-fail(true) in
        {408}let v_929: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_926))) in
        {409}let v_930: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {410}let v_931: aead = catch-fail(decrypt(1-proj-2-tuple(v_930),2-proj-2-tuple(v_930),3-proj-3-tuple(v_929),2-proj-3-tuple(v_927))) in
        {411}let v_932: bitstring = catch-fail(aeadunpack(v_931)) in
        {412}let v_933: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {413}let v_934: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_930))) && success?(1-proj-3-tuple(v_929))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-2-tuple(v_933))))) then cipherstatepack(1-proj-2-tuple(v_933),increment_nonce(2-proj-2-tuple(v_930))) else fail-any) else fail-any)) in
        {414}let v_935: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_927)) && (success?(3-proj-3-tuple(v_929)) && success?(1-proj-3-tuple(v_929)))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then (if not-caught-fail(v_931) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if not-caught-fail(v_934) then (v_934,3-proj-3-tuple(v_932),1-proj-3-tuple(v_932)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {415}let v_936: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) in
        {416}let v_937: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_927)) && success?(symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_936),hash(3-proj-3-tuple(v_936),2-proj-3-tuple(v_927))) else fail-any) else fail-any)) in
        {417}let v_938: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_927)) && success?(1-proj-7-tuple(v_926))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if not-caught-fail(v_937) then (v_937,2-proj-3-tuple(v_935),3-proj-3-tuple(v_935)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_939: key = catch-fail(2-proj-3-tuple(v_938)) in
        {419}let v_940: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_926))) in
        {420}let v_941: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_938))) in
        {421}let v_942: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_941),(if success?(3-proj-7-tuple(v_926)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_939) else fail-any) else fail-any))) in
        {422}let v_943: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_941),(if success?(3-proj-7-tuple(v_926)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_939) else fail-any) else fail-any))) in
        {423}let v_944: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_941),(if success?(3-proj-7-tuple(v_926)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_939) else fail-any) else fail-any))) in
        {424}let v_945: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_926)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_939) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_941))) then (if not-caught-fail(v_942) then (if not-caught-fail(v_943) then (if not-caught-fail(v_944) then (v_942,v_943,v_944) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {425}let v_946: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_926)) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then dhexp(2-proj-2-tuple(v_940),v_939) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_938))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_945)) then cipherstatepack(2-proj-3-tuple(v_945),minnonce) else fail-any),1-proj-3-tuple(v_945),3-proj-3-tuple(v_941)) else fail-any) else fail-any) else fail-any)) in
        {426}let v_947: bitstring = catch-fail(symmetricstateunpack(v_946)) in
        {427}let v_948: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_947))) in
        {428}let v_949: aead = catch-fail(decrypt(1-proj-2-tuple(v_948),2-proj-2-tuple(v_948),3-proj-3-tuple(v_947),3-proj-3-tuple(v_927))) in
        {429}let v_950: bitstring = catch-fail(aeadunpack(v_949)) in
        {430}let v_951: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_947))) in
        {431}let v_952: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_948))) && success?(1-proj-3-tuple(v_947))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then cipherstatepack(1-proj-2-tuple(v_951),increment_nonce(2-proj-2-tuple(v_948))) else fail-any) else fail-any)) in
        {432}let v_953: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_927)) && (success?(3-proj-3-tuple(v_947)) && success?(1-proj-3-tuple(v_947)))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then (if not-caught-fail(v_949) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_952) then (v_952,3-proj-3-tuple(v_950),1-proj-3-tuple(v_950)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {433}let v_954: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_953),2-proj-3-tuple(v_947),3-proj-3-tuple(v_947)))) in
        {434}let v_955: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_927)) && success?(symmetricstatepack(1-proj-3-tuple(v_953),2-proj-3-tuple(v_947),3-proj-3-tuple(v_947)))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then symmetricstatepack(1-proj-3-tuple(v_954),2-proj-3-tuple(v_954),hash(3-proj-3-tuple(v_954),3-proj-3-tuple(v_927))) else fail-any) else fail-any)) in
        {435}let v_956: bitstring = catch-fail((if success?(3-proj-3-tuple(v_927)) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-3-tuple(v_947))))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if not-caught-fail(v_955) then (v_955,2-proj-3-tuple(v_953),3-proj-3-tuple(v_953)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_957: key = catch-fail(dhexp(key_s(alice),g)) in
        {437}let v_958: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_956),2-proj-7-tuple(v_926),3-proj-7-tuple(v_926),v_939,5-proj-7-tuple(v_926),6-proj-7-tuple(v_926),7-proj-7-tuple(v_926))) in
        {438}let v_959: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_956))) in
        {439}let v_960: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_959),zero)) in
        {440}let v_961: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_959),zero)) in
        {441}let v_962: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_959),zero)) in
        {442}let v_963: bitstring = catch-fail((if success?(2-proj-3-tuple(v_959)) then (if not-caught-fail(v_960) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (v_960,v_961,v_962) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_964: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_963)) then cipherstatepack(1-proj-3-tuple(v_963),minnonce) else fail-any)) in
        {444}let v_965: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_963)) then cipherstatepack(2-proj-3-tuple(v_963),minnonce) else fail-any)) in
        {445}let v_966: bitstring = catch-fail((if success?(1-proj-3-tuple(v_956)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if not-caught-fail(v_964) then (if not-caught-fail(v_965) then (1-proj-3-tuple(v_956),v_964,v_965) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {446}let (hs_967: handshakestate,plaintext_c: bitstring,valid_968: bool,cs1_969: cipherstate,cs2_970: cipherstate) = (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-7-tuple(v_926))))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if not-caught-fail(v_928) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if not-caught-fail(v_939) then (if not-caught-fail(v_946) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then (if ((3-proj-3-tuple(v_938) && 3-proj-3-tuple(v_956)) && (v_939 = getpublickey((if not-caught-fail(v_957) then keypairpack(v_957,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_958) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (v_958,2-proj-3-tuple(v_956),true,2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {447}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {448}insert statestore(bob,alice,sid,statepack_d(hs_967,cs1_969,cs2_970))
    ) | (
        {450}!
        {469}get statestore(=bob,=alice,=sid,statepack_d(hs_971: handshakestate,cs1_972: cipherstate,cs2_973: cipherstate)) in
        {451}let hs_974: handshakestate = handshakestatesetcs(hs_971,cs2_973) in
        {452}let v_975: bitstring = catch-fail(handshakestateunpack(hs_974)) in
        {453}let v_976: bitstring = catch-fail((empty,empty,empty)) in
        {454}let v_977: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_975))) in
        {455}let v_978: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_977))) in
        {456}let v_979: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_978),2-proj-2-tuple(v_978),3-proj-3-tuple(v_977),msg_d(bob,alice,sid))) in
        {457}let v_980: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_977))) in
        {458}let v_981: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_978))) && success?(1-proj-3-tuple(v_977))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then cipherstatepack(1-proj-2-tuple(v_980),increment_nonce(2-proj-2-tuple(v_978))) else fail-any) else fail-any)) in
        {459}let v_982: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_977)) && success?(1-proj-3-tuple(v_977))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then (if not-caught-fail(v_979) then (if not-caught-fail(v_981) then (v_981,v_979) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_983: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_982),2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)))) in
        {461}let v_984: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_982)) && success?(symmetricstatepack(1-proj-2-tuple(v_982),2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then symmetricstatepack(1-proj-3-tuple(v_983),2-proj-3-tuple(v_983),hash(3-proj-3-tuple(v_983),2-proj-2-tuple(v_982))) else fail-any) else fail-any)) in
        {462}let v_985: bitstring = catch-fail((if success?(1-proj-7-tuple(v_975)) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-2-tuple(v_982))))) then (if not-caught-fail(v_984) then (v_984,2-proj-2-tuple(v_982)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let v_986: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_985),2-proj-7-tuple(v_975),3-proj-7-tuple(v_975),4-proj-7-tuple(v_975),5-proj-7-tuple(v_975),6-proj-7-tuple(v_975),7-proj-7-tuple(v_975))) in
        {464}let v_987: bitstring = catch-fail(concat3(1-proj-3-tuple(v_976),2-proj-3-tuple(v_976),2-proj-2-tuple(v_985))) in
        {465}let (hs_988: handshakestate,message_d_989: bitstring) = (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-7-tuple(v_975))))) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-2-tuple(v_985))))) then (if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (v_986,v_987) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {466}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {467}insert statestore(bob,alice,sid,statepack_e(hs_988,cs1_972,handshakestategetcs(hs_988)));
        {468}out(pub, message_d_989)
    ) | (
        {470}!
        {490}get statestore(=bob,=alice,=sid,statepack_e(hs_990: handshakestate,cs1_991: cipherstate,cs2_992: cipherstate)) in
        {471}let hs_993: handshakestate = handshakestatesetcs(hs_990,cs1_991) in
        {472}in(pub, message_e_994: bitstring);
        {473}let v_995: bitstring = catch-fail(handshakestateunpack(hs_993)) in
        {474}let v_996: bitstring = catch-fail(deconcat3(message_e_994)) in
        {475}let v_997: bool = catch-fail(true) in
        {476}let v_998: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_995))) in
        {477}let v_999: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {478}let v_1000: aead = catch-fail(decrypt(1-proj-2-tuple(v_999),2-proj-2-tuple(v_999),3-proj-3-tuple(v_998),3-proj-3-tuple(v_996))) in
        {479}let v_1001: bitstring = catch-fail(aeadunpack(v_1000)) in
        {480}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {481}let v_1003: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_999))) && success?(1-proj-3-tuple(v_998))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then cipherstatepack(1-proj-2-tuple(v_1002),increment_nonce(2-proj-2-tuple(v_999))) else fail-any) else fail-any)) in
        {482}let v_1004: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_996)) && (success?(3-proj-3-tuple(v_998)) && success?(1-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if not-caught-fail(v_1003) then (v_1003,3-proj-3-tuple(v_1001),1-proj-3-tuple(v_1001)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_1005: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) in
        {484}let v_1006: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_996)) && success?(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),hash(3-proj-3-tuple(v_1005),3-proj-3-tuple(v_996))) else fail-any) else fail-any)) in
        {485}let v_1007: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_996)) && success?(1-proj-7-tuple(v_995))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,2-proj-3-tuple(v_1004),3-proj-3-tuple(v_1004)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {486}let v_1008: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1007),2-proj-7-tuple(v_995),3-proj-7-tuple(v_995),4-proj-7-tuple(v_995),5-proj-7-tuple(v_995),6-proj-7-tuple(v_995),7-proj-7-tuple(v_995))) in
        {487}let (hs_1009: handshakestate,plaintext_e: bitstring,valid_1010: bool) = (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-7-tuple(v_995))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if not-caught-fail(v_997) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if (v_997 && 3-proj-3-tuple(v_1007)) then (if not-caught-fail(v_1008) then (v_1008,2-proj-3-tuple(v_1007),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {488}event RecvMsg(bob,alice,stagepack_e(sid),plaintext_e);
        {489}event RecvEnd(valid_1010)
    ) | (
        {491}event LeakS(phase0,bob);
        {492}out(pub, key_s(bob))
    ) | (
        {493}phase 1;
        {494}event LeakS(phase1,bob);
        {495}out(pub, key_s(bob))
    )
) | (
    {496}let v_1011: key = catch-fail(dhexp(key_s(bob),g)) in
    {497}let s_1012: keypair = (if not-caught-fail(v_1011) then keypairpack(v_1011,key_s(bob)) else fail-any) in
    {498}out(pub, getpublickey(s_1012));
    (
        {499}let e_1013: keypair = keypairpack(empty,empty) in
        {500}let rs_1014: key = empty in
        {501}let re_1015: key = empty in
        {502}let v_1016: bitstring = catch-fail(hash(somename,empty)) in
        {503}let v_1017: key = catch-fail(v_1016) in
        {504}let v_1018: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {505}let v_1019: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1016) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then symmetricstatepack(v_1018,v_1017,v_1016) else fail-any) else fail-any) else fail-any))) in
        {506}let v_1020: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1016) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then symmetricstatepack(v_1018,v_1017,v_1016) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then symmetricstatepack(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),hash(3-proj-3-tuple(v_1019),empty)) else fail-any) else fail-any)) in
        {507}let v_1021: bitstring = catch-fail(symmetricstateunpack(v_1020)) in
        {508}let v_1022: symmetricstate = catch-fail((if success?(getpublickey(s_1012)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then symmetricstatepack(1-proj-3-tuple(v_1021),2-proj-3-tuple(v_1021),hash(3-proj-3-tuple(v_1021),getpublickey(s_1012))) else fail-any) else fail-any)) in
        {509}let hs_1023: handshakestate = (if not-caught-fail(v_1020) then (if not-caught-fail(v_1022) then handshakestatepack(v_1022,s_1012,e_1013,rs_1014,re_1015,empty,false) else fail-any) else fail-any) in
        {510}insert statestore(bob,charlie,sid,statepack_a(hs_1023))
    ) | (
        {532}get statestore(=bob,=charlie,=sid,statepack_a(hs_1024: handshakestate)) in
        {511}in(pub, message_a_1025: bitstring);
        {512}let v_1026: bitstring = catch-fail(handshakestateunpack(hs_1024)) in
        {513}let v_1027: bitstring = catch-fail(deconcat3(message_a_1025)) in
        {514}let v_1028: bool = catch-fail(true) in
        {515}let v_1029: key = catch-fail(1-proj-3-tuple(v_1027)) in
        {516}let v_1030: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1026))) in
        {517}let v_1031: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then symmetricstatepack(1-proj-3-tuple(v_1030),2-proj-3-tuple(v_1030),hash(3-proj-3-tuple(v_1030),v_1029)) else fail-any) else fail-any)) in
        {518}let v_1032: bitstring = catch-fail(symmetricstateunpack(v_1031)) in
        {519}let v_1033: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1032))) in
        {520}let v_1034: aead = catch-fail(decrypt(1-proj-2-tuple(v_1033),2-proj-2-tuple(v_1033),3-proj-3-tuple(v_1032),3-proj-3-tuple(v_1027))) in
        {521}let v_1035: bitstring = catch-fail(aeadunpack(v_1034)) in
        {522}let v_1036: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1032))) in
        {523}let v_1037: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1033))) && success?(1-proj-3-tuple(v_1032))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-2-tuple(v_1036))))) then cipherstatepack(1-proj-2-tuple(v_1036),increment_nonce(2-proj-2-tuple(v_1033))) else fail-any) else fail-any)) in
        {524}let v_1038: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1027)) && (success?(3-proj-3-tuple(v_1032)) && success?(1-proj-3-tuple(v_1032)))) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then (if not-caught-fail(v_1034) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then (if not-caught-fail(v_1037) then (v_1037,3-proj-3-tuple(v_1035),1-proj-3-tuple(v_1035)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1039: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1038),2-proj-3-tuple(v_1032),3-proj-3-tuple(v_1032)))) in
        {526}let v_1040: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1027)) && success?(symmetricstatepack(1-proj-3-tuple(v_1038),2-proj-3-tuple(v_1032),3-proj-3-tuple(v_1032)))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1039),hash(3-proj-3-tuple(v_1039),3-proj-3-tuple(v_1027))) else fail-any) else fail-any)) in
        {527}let v_1041: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1027)) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-3-tuple(v_1032))))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then (if not-caught-fail(v_1040) then (v_1040,2-proj-3-tuple(v_1038),3-proj-3-tuple(v_1038)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {528}let v_1042: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1041),2-proj-7-tuple(v_1026),3-proj-7-tuple(v_1026),4-proj-7-tuple(v_1026),v_1029,6-proj-7-tuple(v_1026),7-proj-7-tuple(v_1026))) in
        {529}let (hs_1043: handshakestate,plaintext_a_1044: bitstring,valid_1045: bool) = (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-7-tuple(v_1026))))) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-3-tuple(v_1027))))) then (if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1031) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if (v_1028 && 3-proj-3-tuple(v_1041)) then (if not-caught-fail(v_1042) then (v_1042,2-proj-3-tuple(v_1041),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {530}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1044);
        {531}insert statestore(bob,charlie,sid,statepack_b(hs_1043))
    ) | (
        {569}get statestore(=bob,=charlie,=sid,statepack_b(hs_1046: handshakestate)) in
        {533}let v_1047: bitstring = catch-fail(handshakestateunpack(hs_1046)) in
        {534}let v_1048: bitstring = catch-fail((empty,empty,empty)) in
        {535}let v_1049: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {536}let v_1050: keypair = catch-fail((if not-caught-fail(v_1049) then keypairpack(v_1049,key_e(bob,charlie,sid)) else fail-any)) in
        {537}let v_1051: bitstring = catch-fail(getpublickey(v_1050)) in
        {538}let v_1052: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1047))) in
        {539}let v_1053: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1047)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then symmetricstatepack(1-proj-3-tuple(v_1052),2-proj-3-tuple(v_1052),hash(3-proj-3-tuple(v_1052),v_1051)) else fail-any) else fail-any)) in
        {540}let v_1054: bitstring = catch-fail(keypairunpack(v_1050)) in
        {541}let v_1055: bitstring = catch-fail(symmetricstateunpack(v_1053)) in
        {542}let v_1056: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1055),(if success?(5-proj-7-tuple(v_1047)) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then dhexp(2-proj-2-tuple(v_1054),5-proj-7-tuple(v_1047)) else fail-any) else fail-any))) in
        {543}let v_1057: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1055),(if success?(5-proj-7-tuple(v_1047)) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then dhexp(2-proj-2-tuple(v_1054),5-proj-7-tuple(v_1047)) else fail-any) else fail-any))) in
        {544}let v_1058: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1055),(if success?(5-proj-7-tuple(v_1047)) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then dhexp(2-proj-2-tuple(v_1054),5-proj-7-tuple(v_1047)) else fail-any) else fail-any))) in
        {545}let v_1059: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1047)) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then dhexp(2-proj-2-tuple(v_1054),5-proj-7-tuple(v_1047)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1055))) then (if not-caught-fail(v_1056) then (if not-caught-fail(v_1057) then (if not-caught-fail(v_1058) then (v_1056,v_1057,v_1058) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {546}let v_1060: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1047)) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then dhexp(2-proj-2-tuple(v_1054),5-proj-7-tuple(v_1047)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-3-tuple(v_1055))))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1059)) then cipherstatepack(2-proj-3-tuple(v_1059),minnonce) else fail-any),1-proj-3-tuple(v_1059),3-proj-3-tuple(v_1055)) else fail-any) else fail-any) else fail-any)) in
        {547}let v_1061: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1047))) in
        {548}let v_1062: bitstring = catch-fail(symmetricstateunpack(v_1060)) in
        {549}let v_1063: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1062),(if (success?(5-proj-7-tuple(v_1047)) && success?(2-proj-7-tuple(v_1047))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then dhexp(2-proj-2-tuple(v_1061),5-proj-7-tuple(v_1047)) else fail-any) else fail-any))) in
        {550}let v_1064: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1062),(if (success?(5-proj-7-tuple(v_1047)) && success?(2-proj-7-tuple(v_1047))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then dhexp(2-proj-2-tuple(v_1061),5-proj-7-tuple(v_1047)) else fail-any) else fail-any))) in
        {551}let v_1065: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1062),(if (success?(5-proj-7-tuple(v_1047)) && success?(2-proj-7-tuple(v_1047))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then dhexp(2-proj-2-tuple(v_1061),5-proj-7-tuple(v_1047)) else fail-any) else fail-any))) in
        {552}let v_1066: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1047)) && success?(2-proj-7-tuple(v_1047))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then dhexp(2-proj-2-tuple(v_1061),5-proj-7-tuple(v_1047)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1062))) then (if not-caught-fail(v_1063) then (if not-caught-fail(v_1064) then (if not-caught-fail(v_1065) then (v_1063,v_1064,v_1065) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1067: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_1047)) && success?(2-proj-7-tuple(v_1047))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then dhexp(2-proj-2-tuple(v_1061),5-proj-7-tuple(v_1047)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-3-tuple(v_1062))))) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1066)) then cipherstatepack(2-proj-3-tuple(v_1066),minnonce) else fail-any),1-proj-3-tuple(v_1066),3-proj-3-tuple(v_1062)) else fail-any) else fail-any) else fail-any)) in
        {554}let v_1068: bitstring = catch-fail(symmetricstateunpack(v_1067)) in
        {555}let v_1069: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1068))) in
        {556}let v_1070: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1069),2-proj-2-tuple(v_1069),3-proj-3-tuple(v_1068),msg_b(bob,charlie,sid))) in
        {557}let v_1071: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1068))) in
        {558}let v_1072: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1069))) && success?(1-proj-3-tuple(v_1068))) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then cipherstatepack(1-proj-2-tuple(v_1071),increment_nonce(2-proj-2-tuple(v_1069))) else fail-any) else fail-any)) in
        {559}let v_1073: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1068)) && success?(1-proj-3-tuple(v_1068))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1072) then (v_1072,v_1070) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {560}let v_1074: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1073),2-proj-3-tuple(v_1068),3-proj-3-tuple(v_1068)))) in
        {561}let v_1075: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1073)) && success?(symmetricstatepack(1-proj-2-tuple(v_1073),2-proj-3-tuple(v_1068),3-proj-3-tuple(v_1068)))) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then symmetricstatepack(1-proj-3-tuple(v_1074),2-proj-3-tuple(v_1074),hash(3-proj-3-tuple(v_1074),2-proj-2-tuple(v_1073))) else fail-any) else fail-any)) in
        {562}let v_1076: bitstring = catch-fail((if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then (if not-caught-fail(v_1075) then (v_1075,2-proj-2-tuple(v_1073)) else fail-any) else fail-any) else fail-any)) in
        {563}let v_1077: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1076),2-proj-7-tuple(v_1047),v_1050,4-proj-7-tuple(v_1047),5-proj-7-tuple(v_1047),6-proj-7-tuple(v_1047),7-proj-7-tuple(v_1047))) in
        {564}let v_1078: bitstring = catch-fail(concat3(v_1051,2-proj-3-tuple(v_1048),2-proj-2-tuple(v_1076))) in
        {565}let (hs_1079: handshakestate,message_b_1080: bitstring) = (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-7-tuple(v_1047))))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if not-caught-fail(v_1050) then (if not-caught-fail(v_1051) then (if not-caught-fail(v_1053) then (if not-caught-fail(v_1060) then (if not-caught-fail(v_1067) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-2-tuple(v_1076))))) then (if not-caught-fail(v_1077) then (if not-caught-fail(v_1078) then (v_1077,v_1078) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {566}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {567}insert statestore(bob,charlie,sid,statepack_c(hs_1079));
        {568}out(pub, message_b_1080)
    ) | (
        {615}get statestore(=bob,=charlie,=sid,statepack_c(hs_1081: handshakestate)) in
        {570}in(pub, message_c_1082: bitstring);
        {571}let v_1083: bitstring = catch-fail(handshakestateunpack(hs_1081)) in
        {572}let v_1084: bitstring = catch-fail(deconcat3(message_c_1082)) in
        {573}let v_1085: bool = catch-fail(true) in
        {574}let v_1086: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1083))) in
        {575}let v_1087: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1086))) in
        {576}let v_1088: aead = catch-fail(decrypt(1-proj-2-tuple(v_1087),2-proj-2-tuple(v_1087),3-proj-3-tuple(v_1086),2-proj-3-tuple(v_1084))) in
        {577}let v_1089: bitstring = catch-fail(aeadunpack(v_1088)) in
        {578}let v_1090: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1086))) in
        {579}let v_1091: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1087))) && success?(1-proj-3-tuple(v_1086))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-2-tuple(v_1090))))) then cipherstatepack(1-proj-2-tuple(v_1090),increment_nonce(2-proj-2-tuple(v_1087))) else fail-any) else fail-any)) in
        {580}let v_1092: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1084)) && (success?(3-proj-3-tuple(v_1086)) && success?(1-proj-3-tuple(v_1086)))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-2-tuple(v_1087))))) then (if not-caught-fail(v_1088) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-3-tuple(v_1089))))) then (if not-caught-fail(v_1091) then (v_1091,3-proj-3-tuple(v_1089),1-proj-3-tuple(v_1089)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {581}let v_1093: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1086),3-proj-3-tuple(v_1086)))) in
        {582}let v_1094: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1084)) && success?(symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1086),3-proj-3-tuple(v_1086)))) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-3-tuple(v_1093))))) then symmetricstatepack(1-proj-3-tuple(v_1093),2-proj-3-tuple(v_1093),hash(3-proj-3-tuple(v_1093),2-proj-3-tuple(v_1084))) else fail-any) else fail-any)) in
        {583}let v_1095: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1084)) && success?(1-proj-7-tuple(v_1083))) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then (if not-caught-fail(v_1094) then (v_1094,2-proj-3-tuple(v_1092),3-proj-3-tuple(v_1092)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {584}let v_1096: key = catch-fail(2-proj-3-tuple(v_1095)) in
        {585}let v_1097: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1083))) in
        {586}let v_1098: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1095))) in
        {587}let v_1099: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1098),(if success?(3-proj-7-tuple(v_1083)) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-2-tuple(v_1097))))) then dhexp(2-proj-2-tuple(v_1097),v_1096) else fail-any) else fail-any))) in
        {588}let v_1100: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1098),(if success?(3-proj-7-tuple(v_1083)) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-2-tuple(v_1097))))) then dhexp(2-proj-2-tuple(v_1097),v_1096) else fail-any) else fail-any))) in
        {589}let v_1101: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1098),(if success?(3-proj-7-tuple(v_1083)) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-2-tuple(v_1097))))) then dhexp(2-proj-2-tuple(v_1097),v_1096) else fail-any) else fail-any))) in
        {590}let v_1102: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_1083)) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-2-tuple(v_1097))))) then dhexp(2-proj-2-tuple(v_1097),v_1096) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1098))) then (if not-caught-fail(v_1099) then (if not-caught-fail(v_1100) then (if not-caught-fail(v_1101) then (v_1099,v_1100,v_1101) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {591}let v_1103: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_1083)) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-2-tuple(v_1097))))) then dhexp(2-proj-2-tuple(v_1097),v_1096) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-3-tuple(v_1098))))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-3-tuple(v_1102))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1102)) then cipherstatepack(2-proj-3-tuple(v_1102),minnonce) else fail-any),1-proj-3-tuple(v_1102),3-proj-3-tuple(v_1098)) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1104: bitstring = catch-fail(symmetricstateunpack(v_1103)) in
        {593}let v_1105: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1104))) in
        {594}let v_1106: aead = catch-fail(decrypt(1-proj-2-tuple(v_1105),2-proj-2-tuple(v_1105),3-proj-3-tuple(v_1104),3-proj-3-tuple(v_1084))) in
        {595}let v_1107: bitstring = catch-fail(aeadunpack(v_1106)) in
        {596}let v_1108: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1104))) in
        {597}let v_1109: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1105))) && success?(1-proj-3-tuple(v_1104))) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then cipherstatepack(1-proj-2-tuple(v_1108),increment_nonce(2-proj-2-tuple(v_1105))) else fail-any) else fail-any)) in
        {598}let v_1110: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1084)) && (success?(3-proj-3-tuple(v_1104)) && success?(1-proj-3-tuple(v_1104)))) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then (if not-caught-fail(v_1106) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then (if not-caught-fail(v_1109) then (v_1109,3-proj-3-tuple(v_1107),1-proj-3-tuple(v_1107)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {599}let v_1111: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1110),2-proj-3-tuple(v_1104),3-proj-3-tuple(v_1104)))) in
        {600}let v_1112: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1084)) && success?(symmetricstatepack(1-proj-3-tuple(v_1110),2-proj-3-tuple(v_1104),3-proj-3-tuple(v_1104)))) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then symmetricstatepack(1-proj-3-tuple(v_1111),2-proj-3-tuple(v_1111),hash(3-proj-3-tuple(v_1111),3-proj-3-tuple(v_1084))) else fail-any) else fail-any)) in
        {601}let v_1113: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1084)) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-3-tuple(v_1104))))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then (if not-caught-fail(v_1112) then (v_1112,2-proj-3-tuple(v_1110),3-proj-3-tuple(v_1110)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {602}let v_1114: key = catch-fail(dhexp(key_s(charlie),g)) in
        {603}let v_1115: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1113),2-proj-7-tuple(v_1083),3-proj-7-tuple(v_1083),v_1096,5-proj-7-tuple(v_1083),6-proj-7-tuple(v_1083),7-proj-7-tuple(v_1083))) in
        {604}let v_1116: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1113))) in
        {605}let v_1117: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1116),zero)) in
        {606}let v_1118: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1116),zero)) in
        {607}let v_1119: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1116),zero)) in
        {608}let v_1120: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1116)) then (if not-caught-fail(v_1117) then (if not-caught-fail(v_1118) then (if not-caught-fail(v_1119) then (v_1117,v_1118,v_1119) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {609}let v_1121: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1120)) then cipherstatepack(1-proj-3-tuple(v_1120),minnonce) else fail-any)) in
        {610}let v_1122: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1120)) then cipherstatepack(2-proj-3-tuple(v_1120),minnonce) else fail-any)) in
        {611}let v_1123: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1113)) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-3-tuple(v_1116))))) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-3-tuple(v_1120))))) then (if not-caught-fail(v_1121) then (if not-caught-fail(v_1122) then (1-proj-3-tuple(v_1113),v_1121,v_1122) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {612}let (hs_1124: handshakestate,plaintext_c_1125: bitstring,valid_1126: bool,cs1_1127: cipherstate,cs2_1128: cipherstate) = (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-7-tuple(v_1083))))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then (if not-caught-fail(v_1085) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if not-caught-fail(v_1096) then (if not-caught-fail(v_1103) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-3-tuple(v_1113))))) then (if ((3-proj-3-tuple(v_1095) && 3-proj-3-tuple(v_1113)) && (v_1096 = getpublickey((if not-caught-fail(v_1114) then keypairpack(v_1114,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1115) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (v_1115,2-proj-3-tuple(v_1113),true,2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {613}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1125);
        {614}insert statestore(bob,charlie,sid,statepack_d(hs_1124,cs1_1127,cs2_1128))
    ) | (
        {616}!
        {635}get statestore(=bob,=charlie,=sid,statepack_d(hs_1129: handshakestate,cs1_1130: cipherstate,cs2_1131: cipherstate)) in
        {617}let hs_1132: handshakestate = handshakestatesetcs(hs_1129,cs2_1131) in
        {618}let v_1133: bitstring = catch-fail(handshakestateunpack(hs_1132)) in
        {619}let v_1134: bitstring = catch-fail((empty,empty,empty)) in
        {620}let v_1135: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1133))) in
        {621}let v_1136: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1135))) in
        {622}let v_1137: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1136),2-proj-2-tuple(v_1136),3-proj-3-tuple(v_1135),msg_d(bob,charlie,sid))) in
        {623}let v_1138: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1135))) in
        {624}let v_1139: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1136))) && success?(1-proj-3-tuple(v_1135))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-2-tuple(v_1138))))) then cipherstatepack(1-proj-2-tuple(v_1138),increment_nonce(2-proj-2-tuple(v_1136))) else fail-any) else fail-any)) in
        {625}let v_1140: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1135)) && success?(1-proj-3-tuple(v_1135))) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-2-tuple(v_1136))))) then (if not-caught-fail(v_1137) then (if not-caught-fail(v_1139) then (v_1139,v_1137) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1141: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1140),2-proj-3-tuple(v_1135),3-proj-3-tuple(v_1135)))) in
        {627}let v_1142: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1140)) && success?(symmetricstatepack(1-proj-2-tuple(v_1140),2-proj-3-tuple(v_1135),3-proj-3-tuple(v_1135)))) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-3-tuple(v_1141))))) then symmetricstatepack(1-proj-3-tuple(v_1141),2-proj-3-tuple(v_1141),hash(3-proj-3-tuple(v_1141),2-proj-2-tuple(v_1140))) else fail-any) else fail-any)) in
        {628}let v_1143: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1133)) then (if (not-caught-fail(v_1135) && success?(is-true(success?(1-proj-3-tuple(v_1135))))) then (if (not-caught-fail(v_1140) && success?(is-true(success?(1-proj-2-tuple(v_1140))))) then (if not-caught-fail(v_1142) then (v_1142,2-proj-2-tuple(v_1140)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {629}let v_1144: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1143),2-proj-7-tuple(v_1133),3-proj-7-tuple(v_1133),4-proj-7-tuple(v_1133),5-proj-7-tuple(v_1133),6-proj-7-tuple(v_1133),7-proj-7-tuple(v_1133))) in
        {630}let v_1145: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1134),2-proj-3-tuple(v_1134),2-proj-2-tuple(v_1143))) in
        {631}let (hs_1146: handshakestate,message_d_1147: bitstring) = (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-7-tuple(v_1133))))) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then (if (not-caught-fail(v_1143) && success?(is-true(success?(1-proj-2-tuple(v_1143))))) then (if not-caught-fail(v_1144) then (if not-caught-fail(v_1145) then (v_1144,v_1145) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {632}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {633}insert statestore(bob,charlie,sid,statepack_e(hs_1146,cs1_1130,handshakestategetcs(hs_1146)));
        {634}out(pub, message_d_1147)
    ) | (
        {636}!
        {656}get statestore(=bob,=charlie,=sid,statepack_e(hs_1148: handshakestate,cs1_1149: cipherstate,cs2_1150: cipherstate)) in
        {637}let hs_1151: handshakestate = handshakestatesetcs(hs_1148,cs1_1149) in
        {638}in(pub, message_e_1152: bitstring);
        {639}let v_1153: bitstring = catch-fail(handshakestateunpack(hs_1151)) in
        {640}let v_1154: bitstring = catch-fail(deconcat3(message_e_1152)) in
        {641}let v_1155: bool = catch-fail(true) in
        {642}let v_1156: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1153))) in
        {643}let v_1157: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1156))) in
        {644}let v_1158: aead = catch-fail(decrypt(1-proj-2-tuple(v_1157),2-proj-2-tuple(v_1157),3-proj-3-tuple(v_1156),3-proj-3-tuple(v_1154))) in
        {645}let v_1159: bitstring = catch-fail(aeadunpack(v_1158)) in
        {646}let v_1160: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1156))) in
        {647}let v_1161: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1157))) && success?(1-proj-3-tuple(v_1156))) then (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-2-tuple(v_1160))))) then cipherstatepack(1-proj-2-tuple(v_1160),increment_nonce(2-proj-2-tuple(v_1157))) else fail-any) else fail-any)) in
        {648}let v_1162: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && (success?(3-proj-3-tuple(v_1156)) && success?(1-proj-3-tuple(v_1156)))) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-2-tuple(v_1157))))) then (if not-caught-fail(v_1158) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-3-tuple(v_1159))))) then (if not-caught-fail(v_1161) then (v_1161,3-proj-3-tuple(v_1159),1-proj-3-tuple(v_1159)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {649}let v_1163: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1162),2-proj-3-tuple(v_1156),3-proj-3-tuple(v_1156)))) in
        {650}let v_1164: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && success?(symmetricstatepack(1-proj-3-tuple(v_1162),2-proj-3-tuple(v_1156),3-proj-3-tuple(v_1156)))) then (if (not-caught-fail(v_1163) && success?(is-true(success?(1-proj-3-tuple(v_1163))))) then symmetricstatepack(1-proj-3-tuple(v_1163),2-proj-3-tuple(v_1163),hash(3-proj-3-tuple(v_1163),3-proj-3-tuple(v_1154))) else fail-any) else fail-any)) in
        {651}let v_1165: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && success?(1-proj-7-tuple(v_1153))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-3-tuple(v_1162))))) then (if not-caught-fail(v_1164) then (v_1164,2-proj-3-tuple(v_1162),3-proj-3-tuple(v_1162)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {652}let v_1166: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1165),2-proj-7-tuple(v_1153),3-proj-7-tuple(v_1153),4-proj-7-tuple(v_1153),5-proj-7-tuple(v_1153),6-proj-7-tuple(v_1153),7-proj-7-tuple(v_1153))) in
        {653}let (hs_1167: handshakestate,plaintext_e_1168: bitstring,valid_1169: bool) = (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-7-tuple(v_1153))))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-3-tuple(v_1154))))) then (if not-caught-fail(v_1155) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then (if (v_1155 && 3-proj-3-tuple(v_1165)) then (if not-caught-fail(v_1166) then (v_1166,2-proj-3-tuple(v_1165),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {654}event RecvMsg(bob,charlie,stagepack_e(sid),plaintext_e_1168);
        {655}event RecvEnd(valid_1169)
    ) | (
        {657}event LeakS(phase0,bob);
        {658}out(pub, key_s(bob))
    ) | (
        {659}phase 1;
        {660}event LeakS(phase1,bob);
        {661}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob,sid_a)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 133 rules in the queue.
400 rules inserted. The rule base contains 388 rules. 67 rules in the queue.
600 rules inserted. The rule base contains 576 rules. 270 rules in the queue.
800 rules inserted. The rule base contains 752 rules. 254 rules in the queue.
1000 rules inserted. The rule base contains 929 rules. 118 rules in the queue.
1200 rules inserted. The rule base contains 1121 rules. 283 rules in the queue.
1400 rules inserted. The rule base contains 1280 rules. 336 rules in the queue.
1600 rules inserted. The rule base contains 1423 rules. 310 rules in the queue.
1800 rules inserted. The rule base contains 1529 rules. 307 rules in the queue.
2000 rules inserted. The rule base contains 1613 rules. 282 rules in the queue.
2200 rules inserted. The rule base contains 1779 rules. 312 rules in the queue.
2400 rules inserted. The rule base contains 1955 rules. 385 rules in the queue.
2600 rules inserted. The rule base contains 2092 rules. 393 rules in the queue.
2800 rules inserted. The rule base contains 2219 rules. 353 rules in the queue.
3000 rules inserted. The rule base contains 2373 rules. 398 rules in the queue.
3200 rules inserted. The rule base contains 2519 rules. 435 rules in the queue.
3400 rules inserted. The rule base contains 2608 rules. 419 rules in the queue.
3600 rules inserted. The rule base contains 2731 rules. 413 rules in the queue.
3800 rules inserted. The rule base contains 2840 rules. 383 rules in the queue.
4000 rules inserted. The rule base contains 2971 rules. 395 rules in the queue.
4200 rules inserted. The rule base contains 3110 rules. 416 rules in the queue.
4400 rules inserted. The rule base contains 3219 rules. 402 rules in the queue.
4600 rules inserted. The rule base contains 3359 rules. 418 rules in the queue.
4800 rules inserted. The rule base contains 3490 rules. 417 rules in the queue.
5000 rules inserted. The rule base contains 3620 rules. 427 rules in the queue.
5200 rules inserted. The rule base contains 3725 rules. 434 rules in the queue.
5400 rules inserted. The rule base contains 3836 rules. 433 rules in the queue.
5600 rules inserted. The rule base contains 3975 rules. 420 rules in the queue.
5800 rules inserted. The rule base contains 4151 rules. 415 rules in the queue.
6000 rules inserted. The rule base contains 4317 rules. 405 rules in the queue.
6200 rules inserted. The rule base contains 4474 rules. 427 rules in the queue.
6400 rules inserted. The rule base contains 4634 rules. 410 rules in the queue.
6600 rules inserted. The rule base contains 4770 rules. 426 rules in the queue.
6800 rules inserted. The rule base contains 4921 rules. 475 rules in the queue.
7000 rules inserted. The rule base contains 5076 rules. 478 rules in the queue.
7200 rules inserted. The rule base contains 5213 rules. 471 rules in the queue.
7400 rules inserted. The rule base contains 5344 rules. 496 rules in the queue.
7600 rules inserted. The rule base contains 5441 rules. 451 rules in the queue.
7800 rules inserted. The rule base contains 5547 rules. 426 rules in the queue.
8000 rules inserted. The rule base contains 5647 rules. 365 rules in the queue.
8200 rules inserted. The rule base contains 5774 rules. 336 rules in the queue.
8400 rules inserted. The rule base contains 5889 rules. 302 rules in the queue.
8600 rules inserted. The rule base contains 6031 rules. 300 rules in the queue.
8800 rules inserted. The rule base contains 6166 rules. 341 rules in the queue.
9000 rules inserted. The rule base contains 6260 rules. 333 rules in the queue.
9200 rules inserted. The rule base contains 6379 rules. 350 rules in the queue.
9400 rules inserted. The rule base contains 6498 rules. 339 rules in the queue.
9600 rules inserted. The rule base contains 6576 rules. 297 rules in the queue.
9800 rules inserted. The rule base contains 6709 rules. 247 rules in the queue.
10000 rules inserted. The rule base contains 6860 rules. 206 rules in the queue.
10200 rules inserted. The rule base contains 6973 rules. 186 rules in the queue.
10400 rules inserted. The rule base contains 7097 rules. 229 rules in the queue.
10600 rules inserted. The rule base contains 7200 rules. 192 rules in the queue.
10800 rules inserted. The rule base contains 7315 rules. 115 rules in the queue.
11000 rules inserted. The rule base contains 7370 rules. 52 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394029969]),msg_a(alice,bob,sid[!1 = @sid_394029969]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_394029970]),msg_a(alice,bob,sid[!1 = @sid_394029969])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394029978]),msg_a(alice,bob,sid[!1 = @sid_394029978]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_394029979]),msg_a(alice,bob,sid[!1 = @sid_394029978])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394029988]),msg_a(alice,bob,sid[!1 = @sid_394029988]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_394029989]),msg_a(alice,bob,sid[!1 = @sid_394029988])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394029998]),msg_a(alice,bob,sid[!1 = @sid_394029998]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_394029999]),msg_a(alice,bob,sid[!1 = @sid_394029998])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030007]),msg_a(alice,bob,sid[!1 = @sid_394030007]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_394030008]),msg_a(alice,bob,sid[!1 = @sid_394030007])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030016]),msg_a(alice,bob,sid[!1 = @sid_394030016]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_394030016]))
Abbreviations:
sid_394030073 = sid[!1 = @sid_394030048]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_394030073,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_394030073,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_394030073,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030073),msg_a(alice,bob,sid_394030073)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_394030073),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_394030073),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_394030073),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_394030073),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_394030073),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_394030073),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_394030073),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_394030073),g).
attacker(dhexp(key_e(alice,bob,sid_394030073),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {332}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_394030073),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030073),g)),msg_a(alice,bob,sid_394030073)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_394030073).
attacker(msg_a(alice,bob,sid_394030073)).

18. By 17, the attacker may know msg_a(alice,bob,sid_394030073).
So the attacker may know msg_a(alice,bob,sid_394030073) in phase 1.
attacker_p1(msg_a(alice,bob,sid_394030073)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030076]),msg_a(alice,bob,sid[!1 = @sid_394030076]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_394030076]))
Abbreviations:
sid_394030133 = sid[!1 = @sid_394030108]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_394030133,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_394030133,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_394030133,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030133),msg_a(alice,bob,sid_394030133)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_394030133),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_394030133),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_394030133),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_394030133),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_394030133),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_394030133),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_394030133),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_394030133),g).
attacker(dhexp(key_e(alice,bob,sid_394030133),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {332}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_394030133),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030133),g)),msg_a(alice,bob,sid_394030133)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_394030133).
attacker(msg_a(alice,bob,sid_394030133)).

18. By 17, the attacker may know msg_a(alice,bob,sid_394030133).
So the attacker may know msg_a(alice,bob,sid_394030133) in phase 1.
attacker_p1(msg_a(alice,bob,sid_394030133)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030136]),msg_a(alice,bob,sid[!1 = @sid_394030136]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_394030136]))
Abbreviations:
sid_394030194 = sid[!1 = @sid_394030169]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_394030194,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_394030194,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_394030194,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030194),msg_a(alice,bob,sid_394030194)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_394030194),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_394030194),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_394030194),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_394030194),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_394030194),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_394030194),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_394030194),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_394030194),g).
attacker(dhexp(key_e(alice,bob,sid_394030194),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {332}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_394030194),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030194),g)),msg_a(alice,bob,sid_394030194)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_394030194).
attacker(msg_a(alice,bob,sid_394030194)).

18. By 17, the attacker may know msg_a(alice,bob,sid_394030194).
So the attacker may know msg_a(alice,bob,sid_394030194) in phase 1.
attacker_p1(msg_a(alice,bob,sid_394030194)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030197]),msg_a(alice,bob,sid[!1 = @sid_394030197]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_394030197]))
Abbreviations:
sid_394030254 = sid[!1 = @sid_394030229]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_394030254,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_394030254,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_394030254,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030254),msg_a(alice,bob,sid_394030254)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_394030254),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_394030254),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_394030254),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_394030254),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_394030254),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_394030254),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_394030254),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_394030254),g).
attacker(dhexp(key_e(alice,bob,sid_394030254),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {332}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_394030254),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030254),g)),msg_a(alice,bob,sid_394030254)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_394030254).
attacker(msg_a(alice,bob,sid_394030254)).

18. By 17, the attacker may know msg_a(alice,bob,sid_394030254).
So the attacker may know msg_a(alice,bob,sid_394030254) in phase 1.
attacker_p1(msg_a(alice,bob,sid_394030254)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_394030257]),msg_b(bob,charlie,sid[!1 = @sid_394030257]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030258]),msg_a(alice,bob,sid[!1 = @sid_394030258]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_394030258]),msg_b(bob,charlie,sid[!1 = @sid_394030257])))
Abbreviations:
sid_394030334 = sid[!1 = @sid_394030281]
sid_394030335 = sid[!1 = @sid_394030307]

1. The entry statestore(alice,bob,sid_394030334,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_394030334,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_394030334,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030334),msg_a(alice,bob,sid_394030334)) may be executed at {38}.
So the entry statestore(alice,bob,sid_394030334,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394030334),g),key_e(alice,bob,sid_394030334)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_394030334,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394030334),g),key_e(alice,bob,sid_394030334)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_394030335,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {510}.
table(statestore(bob,charlie,sid_394030335,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_394030334,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030334),msg_a(alice,bob,sid_394030334)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_394030334),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_394030334),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334)))).

5. The entry statestore(bob,charlie,sid_394030335,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {532}.
The message concat3(dhexp(key_e(alice,bob,sid_394030334),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334))) that may be sent on channel pub by 4 may be received at input {511}.
We have dhexp(key_e(alice,bob,sid_394030334),g) <> caught-fail.
So the entry statestore(bob,charlie,sid_394030335,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394030334),g),empty,false))) may be inserted in a table at insert {531}.
table(statestore(bob,charlie,sid_394030335,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394030334),g),empty,false)))).

6. The entry statestore(bob,charlie,sid_394030335,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394030334),g),empty,false))) that may be in a table by 5 may be read at get {569}.
The event SendMsg(bob,charlie,stagepack_b(sid_394030335),msg_b(bob,charlie,sid_394030335)) may be executed at {566}.
So the message concat3(dhexp(key_e(bob,charlie,sid_394030335),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394030334),dhexp(key_e(bob,charlie,sid_394030335),g))),dhexp(key_e(alice,bob,sid_394030334),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334))),dhexp(key_e(bob,charlie,sid_394030335),g)),msg_b(bob,charlie,sid_394030335))) may be sent on channel pub at output {568}.
mess(pub,concat3(dhexp(key_e(bob,charlie,sid_394030335),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394030334),dhexp(key_e(bob,charlie,sid_394030335),g))),dhexp(key_e(alice,bob,sid_394030334),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334))),dhexp(key_e(bob,charlie,sid_394030335),g)),msg_b(bob,charlie,sid_394030335)))).

7. The entry statestore(alice,bob,sid_394030334,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394030334),g),key_e(alice,bob,sid_394030334)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie,sid_394030335),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394030334),dhexp(key_e(bob,charlie,sid_394030335),g))),dhexp(key_e(alice,bob,sid_394030334),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030334),g)),msg_a(alice,bob,sid_394030334))),dhexp(key_e(bob,charlie,sid_394030335),g)),msg_b(bob,charlie,sid_394030335))) that may be sent on channel pub by 6 may be received at input {42}.
We have dhexp(key_e(bob,charlie,sid_394030335),g) <> caught-fail.
So event RecvMsg(alice,bob,stagepack_b(sid_394030334),msg_b(bob,charlie,sid_394030335)) may be executed at {75}.
end(RecvMsg(alice,bob,stagepack_b(sid_394030334),msg_b(bob,charlie,sid_394030335))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_394030338]),msg_b(bob,charlie,sid[!1 = @sid_394030338]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030339]),msg_a(alice,bob,sid[!1 = @sid_394030339]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_394030339]),msg_b(bob,charlie,sid[!1 = @sid_394030338])))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030342]),msg_b(bob,alice,sid[!1 = @sid_394030342]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030343]),msg_a(alice,bob,sid[!1 = @sid_394030343]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_394030343]),msg_b(bob,alice,sid[!1 = @sid_394030342])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_394030352]),msg_b(bob,charlie,sid[!1 = @sid_394030352]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030353]),msg_a(alice,bob,sid[!1 = @sid_394030353]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_394030353]),msg_b(bob,charlie,sid[!1 = @sid_394030352])))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030356]),msg_b(bob,alice,sid[!1 = @sid_394030356]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030357]),msg_a(alice,bob,sid[!1 = @sid_394030357]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_394030357]),msg_b(bob,alice,sid[!1 = @sid_394030356])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_394030366]),msg_b(bob,charlie,sid[!1 = @sid_394030366]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030367]),msg_a(alice,bob,sid[!1 = @sid_394030367]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_394030367]),msg_b(bob,charlie,sid[!1 = @sid_394030366])))
Abbreviations:
sid_394030443 = sid[!1 = @sid_394030390]
sid_394030444 = sid[!1 = @sid_394030416]

1. The entry statestore(alice,bob,sid_394030443,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_394030443,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_394030443,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030443),msg_a(alice,bob,sid_394030443)) may be executed at {38}.
So the entry statestore(alice,bob,sid_394030443,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394030443),g),key_e(alice,bob,sid_394030443)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_394030443,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394030443),g),key_e(alice,bob,sid_394030443)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_394030444,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {510}.
table(statestore(bob,charlie,sid_394030444,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_394030443,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030443),msg_a(alice,bob,sid_394030443)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_394030443),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_394030443),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443)))).

5. The entry statestore(bob,charlie,sid_394030444,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {532}.
The message concat3(dhexp(key_e(alice,bob,sid_394030443),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443))) that may be sent on channel pub by 4 may be received at input {511}.
We have dhexp(key_e(alice,bob,sid_394030443),g) <> caught-fail.
So the entry statestore(bob,charlie,sid_394030444,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394030443),g),empty,false))) may be inserted in a table at insert {531}.
table(statestore(bob,charlie,sid_394030444,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394030443),g),empty,false)))).

6. The entry statestore(bob,charlie,sid_394030444,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394030443),g),empty,false))) that may be in a table by 5 may be read at get {569}.
The event SendMsg(bob,charlie,stagepack_b(sid_394030444),msg_b(bob,charlie,sid_394030444)) may be executed at {566}.
So the message concat3(dhexp(key_e(bob,charlie,sid_394030444),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394030443),dhexp(key_e(bob,charlie,sid_394030444),g))),dhexp(key_e(alice,bob,sid_394030443),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443))),dhexp(key_e(bob,charlie,sid_394030444),g)),msg_b(bob,charlie,sid_394030444))) may be sent on channel pub at output {568}.
mess(pub,concat3(dhexp(key_e(bob,charlie,sid_394030444),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394030443),dhexp(key_e(bob,charlie,sid_394030444),g))),dhexp(key_e(alice,bob,sid_394030443),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443))),dhexp(key_e(bob,charlie,sid_394030444),g)),msg_b(bob,charlie,sid_394030444)))).

7. The entry statestore(alice,bob,sid_394030443,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394030443),g),key_e(alice,bob,sid_394030443)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie,sid_394030444),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394030443),dhexp(key_e(bob,charlie,sid_394030444),g))),dhexp(key_e(alice,bob,sid_394030443),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030443),g)),msg_a(alice,bob,sid_394030443))),dhexp(key_e(bob,charlie,sid_394030444),g)),msg_b(bob,charlie,sid_394030444))) that may be sent on channel pub by 6 may be received at input {42}.
We have dhexp(key_e(bob,charlie,sid_394030444),g) <> caught-fail.
So event RecvMsg(alice,bob,stagepack_b(sid_394030443),msg_b(bob,charlie,sid_394030444)) may be executed at {75}.
end(RecvMsg(alice,bob,stagepack_b(sid_394030443),msg_b(bob,charlie,sid_394030444))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_394030447]),msg_b(bob,charlie,sid[!1 = @sid_394030447]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030448]),msg_a(alice,bob,sid[!1 = @sid_394030448]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_394030448]),msg_b(bob,charlie,sid[!1 = @sid_394030447])))
Abbreviations:
sid_394030524 = sid[!1 = @sid_394030471]
sid_394030525 = sid[!1 = @sid_394030497]

1. The entry statestore(alice,bob,sid_394030524,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_394030524,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_394030524,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030524),msg_a(alice,bob,sid_394030524)) may be executed at {38}.
So the entry statestore(alice,bob,sid_394030524,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394030524),g),key_e(alice,bob,sid_394030524)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_394030524,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394030524),g),key_e(alice,bob,sid_394030524)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_394030525,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {510}.
table(statestore(bob,charlie,sid_394030525,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_394030524,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394030524),msg_a(alice,bob,sid_394030524)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_394030524),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_394030524),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524)))).

5. The entry statestore(bob,charlie,sid_394030525,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {532}.
The message concat3(dhexp(key_e(alice,bob,sid_394030524),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524))) that may be sent on channel pub by 4 may be received at input {511}.
We have dhexp(key_e(alice,bob,sid_394030524),g) <> caught-fail.
So the entry statestore(bob,charlie,sid_394030525,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394030524),g),empty,false))) may be inserted in a table at insert {531}.
table(statestore(bob,charlie,sid_394030525,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394030524),g),empty,false)))).

6. The entry statestore(bob,charlie,sid_394030525,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394030524),g),empty,false))) that may be in a table by 5 may be read at get {569}.
The event SendMsg(bob,charlie,stagepack_b(sid_394030525),msg_b(bob,charlie,sid_394030525)) may be executed at {566}.
So the message concat3(dhexp(key_e(bob,charlie,sid_394030525),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394030524),dhexp(key_e(bob,charlie,sid_394030525),g))),dhexp(key_e(alice,bob,sid_394030524),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524))),dhexp(key_e(bob,charlie,sid_394030525),g)),msg_b(bob,charlie,sid_394030525))) may be sent on channel pub at output {568}.
mess(pub,concat3(dhexp(key_e(bob,charlie,sid_394030525),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394030524),dhexp(key_e(bob,charlie,sid_394030525),g))),dhexp(key_e(alice,bob,sid_394030524),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524))),dhexp(key_e(bob,charlie,sid_394030525),g)),msg_b(bob,charlie,sid_394030525)))).

7. The entry statestore(alice,bob,sid_394030524,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394030524),g),key_e(alice,bob,sid_394030524)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie,sid_394030525),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394030524),dhexp(key_e(bob,charlie,sid_394030525),g))),dhexp(key_e(alice,bob,sid_394030524),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394030524),g)),msg_a(alice,bob,sid_394030524))),dhexp(key_e(bob,charlie,sid_394030525),g)),msg_b(bob,charlie,sid_394030525))) that may be sent on channel pub by 6 may be received at input {42}.
We have dhexp(key_e(bob,charlie,sid_394030525),g) <> caught-fail.
So event RecvMsg(alice,bob,stagepack_b(sid_394030524),msg_b(bob,charlie,sid_394030525)) may be executed at {75}.
end(RecvMsg(alice,bob,stagepack_b(sid_394030524),msg_b(bob,charlie,sid_394030525))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030541]),msg_c(alice,bob,sid[!1 = @sid_394030541]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030542]),msg_b(bob,alice,sid[!1 = @sid_394030542]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030541]),msg_a(alice,bob,sid[!1 = @sid_394030541]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_394030542]),msg_c(alice,bob,sid[!1 = @sid_394030541])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030550]),msg_c(alice,bob,sid[!1 = @sid_394030550]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030551]),msg_b(bob,alice,sid[!1 = @sid_394030551]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030550]),msg_a(alice,bob,sid[!1 = @sid_394030550]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_394030551]),msg_c(alice,bob,sid[!1 = @sid_394030550])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030560]),msg_c(alice,bob,sid[!1 = @sid_394030560]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030561]),msg_b(bob,alice,sid[!1 = @sid_394030561]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030560]),msg_a(alice,bob,sid[!1 = @sid_394030560]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_394030561]),msg_c(alice,bob,sid[!1 = @sid_394030560])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030570]),msg_c(alice,bob,sid[!1 = @sid_394030570]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030571]),msg_b(bob,alice,sid[!1 = @sid_394030571]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030570]),msg_a(alice,bob,sid[!1 = @sid_394030570]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_394030571]),msg_c(alice,bob,sid[!1 = @sid_394030570])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030579]),msg_c(alice,bob,sid[!1 = @sid_394030579]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030580]),msg_b(bob,alice,sid[!1 = @sid_394030580]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030579]),msg_a(alice,bob,sid[!1 = @sid_394030579]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_394030580]),msg_c(alice,bob,sid[!1 = @sid_394030579])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030601]),msg_d(bob,alice,sid[!1 = @sid_394030601]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030602]),msg_c(alice,bob,sid[!1 = @sid_394030602]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030601]),msg_b(bob,alice,sid[!1 = @sid_394030601]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030602]),msg_a(alice,bob,sid[!1 = @sid_394030602]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_394030602]),msg_d(bob,alice,sid[!1 = @sid_394030601])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030610]),msg_d(bob,alice,sid[!1 = @sid_394030610]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030611]),msg_c(alice,bob,sid[!1 = @sid_394030611]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030610]),msg_b(bob,alice,sid[!1 = @sid_394030610]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030611]),msg_a(alice,bob,sid[!1 = @sid_394030611]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_394030611]),msg_d(bob,alice,sid[!1 = @sid_394030610])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030620]),msg_d(bob,alice,sid[!1 = @sid_394030620]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030621]),msg_c(alice,bob,sid[!1 = @sid_394030621]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030620]),msg_b(bob,alice,sid[!1 = @sid_394030620]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030621]),msg_a(alice,bob,sid[!1 = @sid_394030621]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_394030621]),msg_d(bob,alice,sid[!1 = @sid_394030620])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030630]),msg_d(bob,alice,sid[!1 = @sid_394030630]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030631]),msg_c(alice,bob,sid[!1 = @sid_394030631]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030630]),msg_b(bob,alice,sid[!1 = @sid_394030630]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030631]),msg_a(alice,bob,sid[!1 = @sid_394030631]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_394030631]),msg_d(bob,alice,sid[!1 = @sid_394030630])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030639]),msg_d(bob,alice,sid[!1 = @sid_394030639]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030640]),msg_c(alice,bob,sid[!1 = @sid_394030640]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030639]),msg_b(bob,alice,sid[!1 = @sid_394030639]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030640]),msg_a(alice,bob,sid[!1 = @sid_394030640]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_394030640]),msg_d(bob,alice,sid[!1 = @sid_394030639])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_394030661]),msg_e(alice,bob,sid[!1 = @sid_394030661]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030662]),msg_d(bob,alice,sid[!1 = @sid_394030662]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030661]),msg_c(alice,bob,sid[!1 = @sid_394030661]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030662]),msg_b(bob,alice,sid[!1 = @sid_394030662]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030661]),msg_a(alice,bob,sid[!1 = @sid_394030661]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_394030662]),msg_e(alice,bob,sid[!1 = @sid_394030661])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_394030670]),msg_e(alice,bob,sid[!1 = @sid_394030670]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030671]),msg_d(bob,alice,sid[!1 = @sid_394030671]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030670]),msg_c(alice,bob,sid[!1 = @sid_394030670]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030671]),msg_b(bob,alice,sid[!1 = @sid_394030671]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030670]),msg_a(alice,bob,sid[!1 = @sid_394030670]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_394030671]),msg_e(alice,bob,sid[!1 = @sid_394030670])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_394030680]),msg_e(alice,bob,sid[!1 = @sid_394030680]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030681]),msg_d(bob,alice,sid[!1 = @sid_394030681]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030680]),msg_c(alice,bob,sid[!1 = @sid_394030680]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030681]),msg_b(bob,alice,sid[!1 = @sid_394030681]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030680]),msg_a(alice,bob,sid[!1 = @sid_394030680]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_394030681]),msg_e(alice,bob,sid[!1 = @sid_394030680])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_394030690]),msg_e(alice,bob,sid[!1 = @sid_394030690]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030691]),msg_d(bob,alice,sid[!1 = @sid_394030691]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030690]),msg_c(alice,bob,sid[!1 = @sid_394030690]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030691]),msg_b(bob,alice,sid[!1 = @sid_394030691]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030690]),msg_a(alice,bob,sid[!1 = @sid_394030690]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_394030691]),msg_e(alice,bob,sid[!1 = @sid_394030690])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_394030699]),msg_e(alice,bob,sid[!1 = @sid_394030699]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030700]),msg_d(bob,alice,sid[!1 = @sid_394030700]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030699]),msg_c(alice,bob,sid[!1 = @sid_394030699]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030700]),msg_b(bob,alice,sid[!1 = @sid_394030700]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030699]),msg_a(alice,bob,sid[!1 = @sid_394030699]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_394030700]),msg_e(alice,bob,sid[!1 = @sid_394030699])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob,sid_a))
RESULT not attacker_p1(msg_e(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_394030719]),msg_e(alice,bob,sid[!1 = @sid_394030719]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_394030720]),msg_d(bob,alice,sid[!1 = @sid_394030720]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_394030719]),msg_c(alice,bob,sid[!1 = @sid_394030719]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_394030720]),msg_b(bob,alice,sid[!1 = @sid_394030720]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_394030719]),msg_a(alice,bob,sid[!1 = @sid_394030719]))) -> end(RecvEnd(true))
Abbreviations:
sid_394031128 = sid[!1 = @sid_394031072]
sid_394031129 = sid[!1 = @sid_394031117]

1. The entry statestore(bob,alice,sid_394031129,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {344}.
table(statestore(bob,alice,sid_394031129,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,bob,sid_394031128,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_394031128,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_394031128,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394031128),msg_a(alice,bob,sid_394031128)) may be executed at {38}.
So the message concat3(dhexp(key_e(alice,bob,sid_394031128),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))) may be sent on channel pub at output {40}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_394031128),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128)))).

4. The entry statestore(bob,alice,sid_394031129,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {366}.
The message concat3(dhexp(key_e(alice,bob,sid_394031128),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))) that may be sent on channel pub by 3 may be received at input {345}.
We have dhexp(key_e(alice,bob,sid_394031128),g) <> caught-fail.
So the entry statestore(bob,alice,sid_394031129,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394031128),g),empty,false))) may be inserted in a table at insert {365}.
table(statestore(bob,alice,sid_394031129,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394031128),g),empty,false)))).

5. The entry statestore(bob,alice,sid_394031129,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394031128),g),empty,false))) that may be in a table by 4 may be read at get {403}.
The event SendMsg(bob,alice,stagepack_b(sid_394031129),msg_b(bob,alice,sid_394031129)) may be executed at {400}.
So the entry statestore(bob,alice,sid_394031129,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),empty,dhexp(key_e(alice,bob,sid_394031128),g),empty,false))) may be inserted in a table at insert {401}.
table(statestore(bob,alice,sid_394031129,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),empty,dhexp(key_e(alice,bob,sid_394031128),g),empty,false)))).

6. The entry statestore(alice,bob,sid_394031128,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {41}.
The event SendMsg(alice,bob,stagepack_a(sid_394031128),msg_a(alice,bob,sid_394031128)) may be executed at {38}.
So the entry statestore(alice,bob,sid_394031128,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {39}.
table(statestore(alice,bob,sid_394031128,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),empty,empty,true)))).

7. The entry statestore(bob,alice,sid_394031129,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_394031128),g),empty,false))) that may be in a table by 4 may be read at get {403}.
The event SendMsg(bob,alice,stagepack_b(sid_394031129),msg_b(bob,alice,sid_394031129)) may be executed at {400}.
So the message concat3(dhexp(key_e(bob,alice,sid_394031129),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))) may be sent on channel pub at output {402}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_394031129),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129)))).

8. The entry statestore(alice,bob,sid_394031128,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 6 may be read at get {77}.
The message concat3(dhexp(key_e(bob,alice,sid_394031129),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))) that may be sent on channel pub by 7 may be received at input {42}.
We have dhexp(key_e(bob,alice,sid_394031129),g) <> caught-fail.
So the entry statestore(alice,bob,sid_394031128,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true))) may be inserted in a table at insert {76}.
table(statestore(alice,bob,sid_394031128,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true)))).

9. The entry statestore(alice,bob,sid_394031128,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true))) that may be in a table by 8 may be read at get {121}.
The event SendMsg(alice,bob,stagepack_c(sid_394031128),msg_c(alice,bob,sid_394031128)) may be executed at {118}.
So the message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))) may be sent on channel pub at output {120}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128)))).

10. The entry statestore(bob,alice,sid_394031129,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),empty,dhexp(key_e(alice,bob,sid_394031128),g),empty,false))) that may be in a table by 5 may be read at get {449}.
The message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))) that may be sent on channel pub by 9 may be received at input {404}.
So the entry statestore(bob,alice,sid_394031129,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_394031128),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce))) may be inserted in a table at insert {448}.
table(statestore(bob,alice,sid_394031129,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_394031128),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce)))).

11. The entry statestore(bob,alice,sid_394031129,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_394031128),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce))) that may be in a table by 10 may be read at get {469}.
The event SendMsg(bob,alice,stagepack_d(sid_394031129),msg_d(bob,alice,sid_394031129)) may be executed at {466}.
So the entry statestore(bob,alice,sid_394031129,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_394031128),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {467}.
table(statestore(bob,alice,sid_394031129,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_394031128),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce))))).

12. The entry statestore(alice,bob,sid_394031128,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true))) that may be in a table by 8 may be read at get {121}.
The event SendMsg(alice,bob,stagepack_c(sid_394031128),msg_c(alice,bob,sid_394031128)) may be executed at {118}.
So the entry statestore(alice,bob,sid_394031128,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce))) may be inserted in a table at insert {119}.
table(statestore(alice,bob,sid_394031128,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce)))).

13. The entry statestore(bob,alice,sid_394031129,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_394031128),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce))) that may be in a table by 10 may be read at get {469}.
The event SendMsg(bob,alice,stagepack_d(sid_394031129),msg_d(bob,alice,sid_394031129)) may be executed at {466}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129))) may be sent on channel pub at output {468}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129)))).

14. The entry statestore(alice,bob,sid_394031128,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce))) that may be in a table by 12 may be read at get {142}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129))) that may be sent on channel pub by 13 may be received at input {124}.
So the entry statestore(alice,bob,sid_394031128,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {141}.
table(statestore(alice,bob,sid_394031128,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce))))).

15. The entry statestore(alice,bob,sid_394031128,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_394031128),g),key_e(alice,bob,sid_394031128)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_394031129),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)))) that may be in a table by 14 may be read at get {161}.
The event SendMsg(alice,bob,stagepack_e(sid_394031128),msg_e(alice,bob,sid_394031128)) may be executed at {159}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129))),msg_e(alice,bob,sid_394031128))) may be sent on channel pub at output {160}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129))),msg_e(alice,bob,sid_394031128)))).

16. The entry statestore(bob,alice,sid_394031129,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_394031129),g),key_e(bob,alice,sid_394031129)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_394031128),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),increment_nonce(minnonce)))) that may be in a table by 11 may be read at get {490}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_394031129),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_394031128),g))),dhexp(key_e(bob,alice,sid_394031129),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_e(bob,alice,sid_394031129),g))),dhexp(key_e(alice,bob,sid_394031128),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_394031128),g)),msg_a(alice,bob,sid_394031128))),dhexp(key_e(bob,alice,sid_394031129),g)),msg_b(bob,alice,sid_394031129))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_394031128))),msg_d(bob,alice,sid_394031129))),msg_e(alice,bob,sid_394031128))) that may be sent on channel pub by 15 may be received at input {472}.
So event RecvEnd(true) may be executed at {489}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
