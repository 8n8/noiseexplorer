File "INpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "INpsk1.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 275, character 6:
Warning: identifier e rebound.
File "INpsk1.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ne rebound.
File "INpsk1.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 279, character 6:
Warning: identifier s rebound.
File "INpsk1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 280, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "INpsk1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 282, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 282, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "INpsk1.noise.passive.pv", line 283, characters 6-7:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "INpsk1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "INpsk1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "INpsk1.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "INpsk1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "INpsk1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 322, characters 6-7:
Warning: identifier re rebound.
File "INpsk1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 325, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 325, characters 48-53:
Warning: identifier valid1 rebound.
File "INpsk1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier rs rebound.
File "INpsk1.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 338, characters 6-7:
Warning: identifier re rebound.
File "INpsk1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 345, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 522, characters 8-9:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 513, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 514, characters 8-9:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "INpsk1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 338, characters 6-7:
Warning: identifier re rebound.
File "INpsk1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 345, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 500, characters 8-9:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 275, character 6:
Warning: identifier e rebound.
File "INpsk1.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ne rebound.
File "INpsk1.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 279, character 6:
Warning: identifier s rebound.
File "INpsk1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 280, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "INpsk1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 282, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 282, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "INpsk1.noise.passive.pv", line 283, characters 6-7:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "INpsk1.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 574, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 575, characters 8-9:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "INpsk1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 566, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "INpsk1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "INpsk1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "INpsk1.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 322, characters 6-7:
Warning: identifier re rebound.
File "INpsk1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 325, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 325, characters 48-53:
Warning: identifier valid1 rebound.
File "INpsk1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier rs rebound.
File "INpsk1.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier hs rebound.
File "INpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "INpsk1.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "INpsk1.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "INpsk1.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "INpsk1.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Completing equations...
Completed equations:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_550: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_550));
    (
        {6}let e_551: keypair = keypairpack(empty,empty) in
        {7}let rs_552: key = empty in
        {8}let re_553: key = empty in
        {9}let v_554: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_555: key = catch-fail(v_554) in
        {11}let v_556: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_557: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_554) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then symmetricstatepack(v_556,v_555,v_554) else fail-any) else fail-any) else fail-any))) in
        {13}let v_558: symmetricstate = catch-fail((if success?((if not-caught-fail(v_554) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then symmetricstatepack(v_556,v_555,v_554) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack(1-proj-3-tuple(v_557),2-proj-3-tuple(v_557),hash(3-proj-3-tuple(v_557),empty)) else fail-any) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_558) then handshakestatepack(v_558,s_550,e_551,rs_552,re_553,key_psk(alice,bob),true) else fail-any) in
        {15}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {63}get statestore(=alice,=bob,=sid,statepack_a(hs_559: handshakestate)) in
        {16}let v_560: bitstring = catch-fail(handshakestateunpack(hs_559)) in
        {17}let v_561: bitstring = catch-fail((empty,empty,empty)) in
        {18}let v_562: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {19}let v_563: keypair = catch-fail((if not-caught-fail(v_562) then keypairpack(validkey(v_562),key_e(alice,bob,sid)) else fail-any)) in
        {20}let v_564: bitstring = catch-fail(getpublickey(v_563)) in
        {21}let v_565: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_560))) in
        {22}let v_566: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_560)) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then symmetricstatepack(1-proj-3-tuple(v_565),2-proj-3-tuple(v_565),hash(3-proj-3-tuple(v_565),v_564)) else fail-any) else fail-any)) in
        {23}let v_567: bitstring = catch-fail(symmetricstateunpack(v_566)) in
        {24}let v_568: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_567),getpublickey(v_563))) in
        {25}let v_569: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_567),getpublickey(v_563))) in
        {26}let v_570: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_567),getpublickey(v_563))) in
        {27}let v_571: bitstring = catch-fail((if (success?(getpublickey(v_563)) && success?(2-proj-3-tuple(v_567))) then (if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (v_568,v_569,v_570) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {28}let v_572: symmetricstate = catch-fail((if success?(getpublickey(v_563)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_571)) then cipherstatepack(2-proj-3-tuple(v_571),minnonce) else fail-any),1-proj-3-tuple(v_571),3-proj-3-tuple(v_567)) else fail-any) else fail-any) else fail-any)) in
        {29}let v_573: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {30}let v_574: keypair = catch-fail((if not-caught-fail(v_573) then keypairpack(validkey(v_573),key_s(alice)) else fail-any)) in
        {31}let v_575: bitstring = catch-fail(symmetricstateunpack(v_572)) in
        {32}let v_576: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_575))) in
        {33}let v_577: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_576),2-proj-2-tuple(v_576),3-proj-3-tuple(v_575),getpublickey(v_574))) in
        {34}let v_578: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_575))) in
        {35}let v_579: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_576))) && success?(1-proj-3-tuple(v_575))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-2-tuple(v_578))))) then cipherstatepack(1-proj-2-tuple(v_578),increment_nonce(2-proj-2-tuple(v_576))) else fail-any) else fail-any)) in
        {36}let v_580: bitstring = catch-fail((if (success?(getpublickey(v_574)) && (success?(3-proj-3-tuple(v_575)) && success?(1-proj-3-tuple(v_575)))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then (if not-caught-fail(v_577) then (if not-caught-fail(v_579) then (v_579,v_577) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {37}let v_581: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_580),2-proj-3-tuple(v_575),3-proj-3-tuple(v_575)))) in
        {38}let v_582: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_580)) && success?(symmetricstatepack(1-proj-2-tuple(v_580),2-proj-3-tuple(v_575),3-proj-3-tuple(v_575)))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),hash(3-proj-3-tuple(v_581),2-proj-2-tuple(v_580))) else fail-any) else fail-any)) in
        {39}let v_583: bitstring = catch-fail((if success?(getpublickey(v_574)) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then (if not-caught-fail(v_582) then (v_582,2-proj-2-tuple(v_580)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_584: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_583))) in
        {41}let v_585: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_584),6-proj-7-tuple(v_560))) in
        {42}let v_586: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_584),6-proj-7-tuple(v_560))) in
        {43}let v_587: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_584),6-proj-7-tuple(v_560))) in
        {44}let v_588: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_560)) && success?(2-proj-3-tuple(v_584))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (v_585,v_586,v_587) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {45}let v_589: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_584),1-proj-3-tuple(v_588),3-proj-3-tuple(v_584)))) in
        {46}let v_590: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_588)) && success?(symmetricstatepack(1-proj-3-tuple(v_584),1-proj-3-tuple(v_588),3-proj-3-tuple(v_584)))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then symmetricstatepack(1-proj-3-tuple(v_589),2-proj-3-tuple(v_589),hash(3-proj-3-tuple(v_589),2-proj-3-tuple(v_588))) else fail-any) else fail-any))) in
        {47}let v_591: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_560)) && success?(1-proj-2-tuple(v_583))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_588)) then cipherstatepack(3-proj-3-tuple(v_588),minnonce) else fail-any),1-proj-3-tuple(v_588),3-proj-3-tuple(v_590)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {48}let v_592: bitstring = catch-fail(symmetricstateunpack(v_591)) in
        {49}let v_593: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
        {50}let v_594: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_593),2-proj-2-tuple(v_593),3-proj-3-tuple(v_592),msg_a(alice,bob,sid))) in
        {51}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
        {52}let v_596: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_593))) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then cipherstatepack(1-proj-2-tuple(v_595),increment_nonce(2-proj-2-tuple(v_593))) else fail-any) else fail-any)) in
        {53}let v_597: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_592)) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then (if not-caught-fail(v_594) then (if not-caught-fail(v_596) then (v_596,v_594) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {54}let v_598: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) in
        {55}let v_599: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_597)) && success?(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack(1-proj-3-tuple(v_598),2-proj-3-tuple(v_598),hash(3-proj-3-tuple(v_598),2-proj-2-tuple(v_597))) else fail-any) else fail-any)) in
        {56}let v_600: bitstring = catch-fail((if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,2-proj-2-tuple(v_597)) else fail-any) else fail-any) else fail-any)) in
        {57}let v_601: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_600),v_574,v_563,4-proj-7-tuple(v_560),5-proj-7-tuple(v_560),6-proj-7-tuple(v_560),7-proj-7-tuple(v_560))) in
        {58}let v_602: bitstring = catch-fail(concat3(v_564,2-proj-2-tuple(v_583),2-proj-2-tuple(v_600))) in
        {59}let (hs_603: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-7-tuple(v_560))))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if not-caught-fail(v_563) then (if not-caught-fail(v_564) then (if not-caught-fail(v_566) then (if not-caught-fail(v_572) then (if not-caught-fail(v_574) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then (if not-caught-fail(v_591) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (v_601,v_602) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {60}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {61}insert statestore(alice,bob,sid,statepack_b(hs_603));
        {62}out(pub, message_a)
    ) | (
        {113}get statestore(=alice,=bob,=sid,statepack_b(hs_604: handshakestate)) in
        {64}in(pub, message_b: bitstring);
        {65}let v_605: bitstring = catch-fail(handshakestateunpack(hs_604)) in
        {66}let v_606: bitstring = catch-fail(deconcat3(message_b)) in
        {67}let v_607: bool = catch-fail(true) in
        {68}let v_608: key = catch-fail(1-proj-3-tuple(v_606)) in
        {69}let v_609: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_605))) in
        {70}let v_610: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_605)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),hash(3-proj-3-tuple(v_609),v_608)) else fail-any) else fail-any)) in
        {71}let v_611: bitstring = catch-fail(symmetricstateunpack(v_610)) in
        {72}let v_612: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_611),v_608)) in
        {73}let v_613: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_611),v_608)) in
        {74}let v_614: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_611),v_608)) in
        {75}let v_615: bitstring = catch-fail((if success?(2-proj-3-tuple(v_611)) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (v_612,v_613,v_614) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_616: symmetricstate = catch-fail((if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_615)) then cipherstatepack(2-proj-3-tuple(v_615),minnonce) else fail-any),1-proj-3-tuple(v_615),3-proj-3-tuple(v_611)) else fail-any) else fail-any)) in
        {77}let v_617: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_605))) in
        {78}let v_618: bitstring = catch-fail(symmetricstateunpack(v_616)) in
        {79}let v_619: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_618),(if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_608) else fail-any) else fail-any))) in
        {80}let v_620: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_618),(if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_608) else fail-any) else fail-any))) in
        {81}let v_621: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_618),(if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_608) else fail-any) else fail-any))) in
        {82}let v_622: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_608) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_618))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (v_619,v_620,v_621) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_623: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_605)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_608) else fail-any) else fail-any)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_622)) then cipherstatepack(2-proj-3-tuple(v_622),minnonce) else fail-any),1-proj-3-tuple(v_622),3-proj-3-tuple(v_618)) else fail-any) else fail-any) else fail-any)) in
        {84}let v_624: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_605))) in
        {85}let v_625: bitstring = catch-fail(symmetricstateunpack(v_623)) in
        {86}let v_626: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_625),(if success?(2-proj-7-tuple(v_605)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then dhexp(2-proj-2-tuple(v_624),v_608) else fail-any) else fail-any))) in
        {87}let v_627: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_625),(if success?(2-proj-7-tuple(v_605)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then dhexp(2-proj-2-tuple(v_624),v_608) else fail-any) else fail-any))) in
        {88}let v_628: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_625),(if success?(2-proj-7-tuple(v_605)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then dhexp(2-proj-2-tuple(v_624),v_608) else fail-any) else fail-any))) in
        {89}let v_629: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_605)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then dhexp(2-proj-2-tuple(v_624),v_608) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_625))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (v_626,v_627,v_628) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let v_630: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_605)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then dhexp(2-proj-2-tuple(v_624),v_608) else fail-any) else fail-any)) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_629)) then cipherstatepack(2-proj-3-tuple(v_629),minnonce) else fail-any),1-proj-3-tuple(v_629),3-proj-3-tuple(v_625)) else fail-any) else fail-any) else fail-any)) in
        {91}let v_631: bitstring = catch-fail(symmetricstateunpack(v_630)) in
        {92}let v_632: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_631))) in
        {93}let v_633: aead = catch-fail(decrypt(1-proj-2-tuple(v_632),2-proj-2-tuple(v_632),3-proj-3-tuple(v_631),3-proj-3-tuple(v_606))) in
        {94}let v_634: bitstring = catch-fail(aeadunpack(v_633)) in
        {95}let v_635: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_631))) in
        {96}let v_636: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_632))) && success?(1-proj-3-tuple(v_631))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then cipherstatepack(1-proj-2-tuple(v_635),increment_nonce(2-proj-2-tuple(v_632))) else fail-any) else fail-any)) in
        {97}let v_637: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_606)) && (success?(3-proj-3-tuple(v_631)) && success?(1-proj-3-tuple(v_631)))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then (if not-caught-fail(v_633) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if not-caught-fail(v_636) then (v_636,3-proj-3-tuple(v_634),1-proj-3-tuple(v_634)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_638: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_637),2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)))) in
        {99}let v_639: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_606)) && success?(symmetricstatepack(1-proj-3-tuple(v_637),2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_638),hash(3-proj-3-tuple(v_638),3-proj-3-tuple(v_606))) else fail-any) else fail-any)) in
        {100}let v_640: bitstring = catch-fail((if success?(3-proj-3-tuple(v_606)) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_639) then (v_639,2-proj-3-tuple(v_637),3-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {101}let v_641: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_640),2-proj-7-tuple(v_605),3-proj-7-tuple(v_605),4-proj-7-tuple(v_605),v_608,6-proj-7-tuple(v_605),7-proj-7-tuple(v_605))) in
        {102}let v_642: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_640))) in
        {103}let v_643: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_642),zero)) in
        {104}let v_644: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_642),zero)) in
        {105}let v_645: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_642),zero)) in
        {106}let v_646: bitstring = catch-fail((if success?(2-proj-3-tuple(v_642)) then (if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (if not-caught-fail(v_645) then (v_643,v_644,v_645) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_647: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_646)) then cipherstatepack(1-proj-3-tuple(v_646),minnonce) else fail-any)) in
        {108}let v_648: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_646)) then cipherstatepack(2-proj-3-tuple(v_646),minnonce) else fail-any)) in
        {109}let v_649: bitstring = catch-fail((if success?(1-proj-3-tuple(v_640)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if not-caught-fail(v_647) then (if not-caught-fail(v_648) then (1-proj-3-tuple(v_640),v_647,v_648) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {110}let (hs_650: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-7-tuple(v_605))))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if not-caught-fail(v_607) then (if not-caught-fail(v_608) then (if not-caught-fail(v_610) then (if not-caught-fail(v_616) then (if not-caught-fail(v_623) then (if not-caught-fail(v_630) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (v_607 && 3-proj-3-tuple(v_640)) then (if not-caught-fail(v_641) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (v_641,2-proj-3-tuple(v_640),true,2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {111}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {112}insert statestore(alice,bob,sid,statepack_c(hs_650,cs1,cs2))
    ) | (
        {114}!
        {133}get statestore(=alice,=bob,=sid,statepack_c(hs_651: handshakestate,cs1_652: cipherstate,cs2_653: cipherstate)) in
        {115}let hs_654: handshakestate = handshakestatesetcs(hs_651,cs1_652) in
        {116}let v_655: bitstring = catch-fail(handshakestateunpack(hs_654)) in
        {117}let v_656: bitstring = catch-fail((empty,empty,empty)) in
        {118}let v_657: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_655))) in
        {119}let v_658: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_657))) in
        {120}let v_659: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_658),2-proj-2-tuple(v_658),3-proj-3-tuple(v_657),msg_c(alice,bob,sid))) in
        {121}let v_660: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_657))) in
        {122}let v_661: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_658))) && success?(1-proj-3-tuple(v_657))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then cipherstatepack(1-proj-2-tuple(v_660),increment_nonce(2-proj-2-tuple(v_658))) else fail-any) else fail-any)) in
        {123}let v_662: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_657)) && success?(1-proj-3-tuple(v_657))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-2-tuple(v_658))))) then (if not-caught-fail(v_659) then (if not-caught-fail(v_661) then (v_661,v_659) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_663: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_662),2-proj-3-tuple(v_657),3-proj-3-tuple(v_657)))) in
        {125}let v_664: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_662)) && success?(symmetricstatepack(1-proj-2-tuple(v_662),2-proj-3-tuple(v_657),3-proj-3-tuple(v_657)))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then symmetricstatepack(1-proj-3-tuple(v_663),2-proj-3-tuple(v_663),hash(3-proj-3-tuple(v_663),2-proj-2-tuple(v_662))) else fail-any) else fail-any)) in
        {126}let v_665: bitstring = catch-fail((if success?(1-proj-7-tuple(v_655)) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then (if not-caught-fail(v_664) then (v_664,2-proj-2-tuple(v_662)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_666: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_665),2-proj-7-tuple(v_655),3-proj-7-tuple(v_655),4-proj-7-tuple(v_655),5-proj-7-tuple(v_655),6-proj-7-tuple(v_655),7-proj-7-tuple(v_655))) in
        {128}let v_667: bitstring = catch-fail(concat3(1-proj-3-tuple(v_656),2-proj-3-tuple(v_656),2-proj-2-tuple(v_665))) in
        {129}let (hs_668: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-7-tuple(v_655))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-2-tuple(v_665))))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (v_666,v_667) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {130}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {131}insert statestore(alice,bob,sid,statepack_d(hs_668,handshakestategetcs(hs_668),cs2_653));
        {132}out(pub, message_c)
    ) | (
        {134}!
        {154}get statestore(=alice,=bob,=sid,statepack_d(hs_669: handshakestate,cs1_670: cipherstate,cs2_671: cipherstate)) in
        {135}let hs_672: handshakestate = handshakestatesetcs(hs_669,cs2_671) in
        {136}in(pub, message_d: bitstring);
        {137}let v_673: bitstring = catch-fail(handshakestateunpack(hs_672)) in
        {138}let v_674: bitstring = catch-fail(deconcat3(message_d)) in
        {139}let v_675: bool = catch-fail(true) in
        {140}let v_676: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_673))) in
        {141}let v_677: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_676))) in
        {142}let v_678: aead = catch-fail(decrypt(1-proj-2-tuple(v_677),2-proj-2-tuple(v_677),3-proj-3-tuple(v_676),3-proj-3-tuple(v_674))) in
        {143}let v_679: bitstring = catch-fail(aeadunpack(v_678)) in
        {144}let v_680: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_676))) in
        {145}let v_681: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_677))) && success?(1-proj-3-tuple(v_676))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then cipherstatepack(1-proj-2-tuple(v_680),increment_nonce(2-proj-2-tuple(v_677))) else fail-any) else fail-any)) in
        {146}let v_682: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_674)) && (success?(3-proj-3-tuple(v_676)) && success?(1-proj-3-tuple(v_676)))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-2-tuple(v_677))))) then (if not-caught-fail(v_678) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if not-caught-fail(v_681) then (v_681,3-proj-3-tuple(v_679),1-proj-3-tuple(v_679)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {147}let v_683: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_676),3-proj-3-tuple(v_676)))) in
        {148}let v_684: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_674)) && success?(symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_676),3-proj-3-tuple(v_676)))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_683),hash(3-proj-3-tuple(v_683),3-proj-3-tuple(v_674))) else fail-any) else fail-any)) in
        {149}let v_685: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_674)) && success?(1-proj-7-tuple(v_673))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then (if not-caught-fail(v_684) then (v_684,2-proj-3-tuple(v_682),3-proj-3-tuple(v_682)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {150}let v_686: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_685),2-proj-7-tuple(v_673),3-proj-7-tuple(v_673),4-proj-7-tuple(v_673),5-proj-7-tuple(v_673),6-proj-7-tuple(v_673),7-proj-7-tuple(v_673))) in
        {151}let (hs_687: handshakestate,plaintext_d: bitstring,valid_688: bool) = (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-7-tuple(v_673))))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if not-caught-fail(v_675) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then (if (v_675 && 3-proj-3-tuple(v_685)) then (if not-caught-fail(v_686) then (v_686,2-proj-3-tuple(v_685),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {152}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {153}event RecvEnd(valid_688)
    ) | (
        {155}event LeakPsk(phase0,alice,bob);
        {156}out(pub, key_psk(alice,bob))
    ) | (
        {157}phase 1;
        {158}event LeakPsk(phase1,alice,bob);
        {159}out(pub, key_psk(alice,bob))
    ) | (
        {160}event LeakS(phase0,alice);
        {161}out(pub, key_s(alice))
    ) | (
        {162}phase 1;
        {163}event LeakS(phase1,alice);
        {164}out(pub, key_s(alice))
    )
) | (
    {165}let s_689: keypair = keypairpack(empty,empty) in
    {166}out(pub, getpublickey(s_689));
    (
        {167}let e_690: keypair = keypairpack(empty,empty) in
        {168}let rs_691: key = empty in
        {169}let re_692: key = empty in
        {170}let v_693: bitstring = catch-fail(hash(somename,empty)) in
        {171}let v_694: key = catch-fail(v_693) in
        {172}let v_695: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {173}let v_696: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_693) then (if not-caught-fail(v_694) then (if not-caught-fail(v_695) then symmetricstatepack(v_695,v_694,v_693) else fail-any) else fail-any) else fail-any))) in
        {174}let v_697: symmetricstate = catch-fail((if success?((if not-caught-fail(v_693) then (if not-caught-fail(v_694) then (if not-caught-fail(v_695) then symmetricstatepack(v_695,v_694,v_693) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then symmetricstatepack(1-proj-3-tuple(v_696),2-proj-3-tuple(v_696),hash(3-proj-3-tuple(v_696),empty)) else fail-any) else fail-any)) in
        {175}let hs_698: handshakestate = (if not-caught-fail(v_697) then handshakestatepack(v_697,s_689,e_690,rs_691,re_692,key_psk(alice,charlie),true) else fail-any) in
        {176}insert statestore(alice,charlie,sid,statepack_a(hs_698))
    ) | (
        {224}get statestore(=alice,=charlie,=sid,statepack_a(hs_699: handshakestate)) in
        {177}let v_700: bitstring = catch-fail(handshakestateunpack(hs_699)) in
        {178}let v_701: bitstring = catch-fail((empty,empty,empty)) in
        {179}let v_702: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {180}let v_703: keypair = catch-fail((if not-caught-fail(v_702) then keypairpack(validkey(v_702),key_e(alice,charlie,sid)) else fail-any)) in
        {181}let v_704: bitstring = catch-fail(getpublickey(v_703)) in
        {182}let v_705: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_700))) in
        {183}let v_706: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_700)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then symmetricstatepack(1-proj-3-tuple(v_705),2-proj-3-tuple(v_705),hash(3-proj-3-tuple(v_705),v_704)) else fail-any) else fail-any)) in
        {184}let v_707: bitstring = catch-fail(symmetricstateunpack(v_706)) in
        {185}let v_708: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_707),getpublickey(v_703))) in
        {186}let v_709: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_707),getpublickey(v_703))) in
        {187}let v_710: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_707),getpublickey(v_703))) in
        {188}let v_711: bitstring = catch-fail((if (success?(getpublickey(v_703)) && success?(2-proj-3-tuple(v_707))) then (if not-caught-fail(v_708) then (if not-caught-fail(v_709) then (if not-caught-fail(v_710) then (v_708,v_709,v_710) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_712: symmetricstate = catch-fail((if success?(getpublickey(v_703)) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_711)) then cipherstatepack(2-proj-3-tuple(v_711),minnonce) else fail-any),1-proj-3-tuple(v_711),3-proj-3-tuple(v_707)) else fail-any) else fail-any) else fail-any)) in
        {190}let v_713: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {191}let v_714: keypair = catch-fail((if not-caught-fail(v_713) then keypairpack(validkey(v_713),key_s(alice)) else fail-any)) in
        {192}let v_715: bitstring = catch-fail(symmetricstateunpack(v_712)) in
        {193}let v_716: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_715))) in
        {194}let v_717: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_716),2-proj-2-tuple(v_716),3-proj-3-tuple(v_715),getpublickey(v_714))) in
        {195}let v_718: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_715))) in
        {196}let v_719: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_716))) && success?(1-proj-3-tuple(v_715))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then cipherstatepack(1-proj-2-tuple(v_718),increment_nonce(2-proj-2-tuple(v_716))) else fail-any) else fail-any)) in
        {197}let v_720: bitstring = catch-fail((if (success?(getpublickey(v_714)) && (success?(3-proj-3-tuple(v_715)) && success?(1-proj-3-tuple(v_715)))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then (if not-caught-fail(v_717) then (if not-caught-fail(v_719) then (v_719,v_717) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {198}let v_721: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_720),2-proj-3-tuple(v_715),3-proj-3-tuple(v_715)))) in
        {199}let v_722: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_720)) && success?(symmetricstatepack(1-proj-2-tuple(v_720),2-proj-3-tuple(v_715),3-proj-3-tuple(v_715)))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_721),hash(3-proj-3-tuple(v_721),2-proj-2-tuple(v_720))) else fail-any) else fail-any)) in
        {200}let v_723: bitstring = catch-fail((if success?(getpublickey(v_714)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then (if not-caught-fail(v_722) then (v_722,2-proj-2-tuple(v_720)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {201}let v_724: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_723))) in
        {202}let v_725: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_724),6-proj-7-tuple(v_700))) in
        {203}let v_726: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_724),6-proj-7-tuple(v_700))) in
        {204}let v_727: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_724),6-proj-7-tuple(v_700))) in
        {205}let v_728: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_700)) && success?(2-proj-3-tuple(v_724))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (v_725,v_726,v_727) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let v_729: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_724),1-proj-3-tuple(v_728),3-proj-3-tuple(v_724)))) in
        {207}let v_730: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_728)) && success?(symmetricstatepack(1-proj-3-tuple(v_724),1-proj-3-tuple(v_728),3-proj-3-tuple(v_724)))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then symmetricstatepack(1-proj-3-tuple(v_729),2-proj-3-tuple(v_729),hash(3-proj-3-tuple(v_729),2-proj-3-tuple(v_728))) else fail-any) else fail-any))) in
        {208}let v_731: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_700)) && success?(1-proj-2-tuple(v_723))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_728)) then cipherstatepack(3-proj-3-tuple(v_728),minnonce) else fail-any),1-proj-3-tuple(v_728),3-proj-3-tuple(v_730)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let v_732: bitstring = catch-fail(symmetricstateunpack(v_731)) in
        {210}let v_733: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_732))) in
        {211}let v_734: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_733),2-proj-2-tuple(v_733),3-proj-3-tuple(v_732),msg_a(alice,charlie,sid))) in
        {212}let v_735: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_732))) in
        {213}let v_736: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_733))) && success?(1-proj-3-tuple(v_732))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then cipherstatepack(1-proj-2-tuple(v_735),increment_nonce(2-proj-2-tuple(v_733))) else fail-any) else fail-any)) in
        {214}let v_737: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_732)) && success?(1-proj-3-tuple(v_732))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then (if not-caught-fail(v_734) then (if not-caught-fail(v_736) then (v_736,v_734) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {215}let v_738: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_737),2-proj-3-tuple(v_732),3-proj-3-tuple(v_732)))) in
        {216}let v_739: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_737)) && success?(symmetricstatepack(1-proj-2-tuple(v_737),2-proj-3-tuple(v_732),3-proj-3-tuple(v_732)))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack(1-proj-3-tuple(v_738),2-proj-3-tuple(v_738),hash(3-proj-3-tuple(v_738),2-proj-2-tuple(v_737))) else fail-any) else fail-any)) in
        {217}let v_740: bitstring = catch-fail((if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then (if not-caught-fail(v_739) then (v_739,2-proj-2-tuple(v_737)) else fail-any) else fail-any) else fail-any)) in
        {218}let v_741: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_740),v_714,v_703,4-proj-7-tuple(v_700),5-proj-7-tuple(v_700),6-proj-7-tuple(v_700),7-proj-7-tuple(v_700))) in
        {219}let v_742: bitstring = catch-fail(concat3(v_704,2-proj-2-tuple(v_723),2-proj-2-tuple(v_740))) in
        {220}let (hs_743: handshakestate,message_a_744: bitstring) = (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-7-tuple(v_700))))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if not-caught-fail(v_706) then (if not-caught-fail(v_712) then (if not-caught-fail(v_714) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then (if not-caught-fail(v_731) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then (if not-caught-fail(v_741) then (if not-caught-fail(v_742) then (v_741,v_742) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {221}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {222}insert statestore(alice,charlie,sid,statepack_b(hs_743));
        {223}out(pub, message_a_744)
    ) | (
        {274}get statestore(=alice,=charlie,=sid,statepack_b(hs_745: handshakestate)) in
        {225}in(pub, message_b_746: bitstring);
        {226}let v_747: bitstring = catch-fail(handshakestateunpack(hs_745)) in
        {227}let v_748: bitstring = catch-fail(deconcat3(message_b_746)) in
        {228}let v_749: bool = catch-fail(true) in
        {229}let v_750: key = catch-fail(1-proj-3-tuple(v_748)) in
        {230}let v_751: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_747))) in
        {231}let v_752: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_747)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then symmetricstatepack(1-proj-3-tuple(v_751),2-proj-3-tuple(v_751),hash(3-proj-3-tuple(v_751),v_750)) else fail-any) else fail-any)) in
        {232}let v_753: bitstring = catch-fail(symmetricstateunpack(v_752)) in
        {233}let v_754: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_753),v_750)) in
        {234}let v_755: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_753),v_750)) in
        {235}let v_756: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_753),v_750)) in
        {236}let v_757: bitstring = catch-fail((if success?(2-proj-3-tuple(v_753)) then (if not-caught-fail(v_754) then (if not-caught-fail(v_755) then (if not-caught-fail(v_756) then (v_754,v_755,v_756) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_758: symmetricstate = catch-fail((if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_757)) then cipherstatepack(2-proj-3-tuple(v_757),minnonce) else fail-any),1-proj-3-tuple(v_757),3-proj-3-tuple(v_753)) else fail-any) else fail-any)) in
        {238}let v_759: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_747))) in
        {239}let v_760: bitstring = catch-fail(symmetricstateunpack(v_758)) in
        {240}let v_761: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_760),(if success?(3-proj-7-tuple(v_747)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_750) else fail-any) else fail-any))) in
        {241}let v_762: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_760),(if success?(3-proj-7-tuple(v_747)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_750) else fail-any) else fail-any))) in
        {242}let v_763: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_760),(if success?(3-proj-7-tuple(v_747)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_750) else fail-any) else fail-any))) in
        {243}let v_764: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_747)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_750) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_760))) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then (v_761,v_762,v_763) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_765: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_747)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_750) else fail-any) else fail-any)) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_764)) then cipherstatepack(2-proj-3-tuple(v_764),minnonce) else fail-any),1-proj-3-tuple(v_764),3-proj-3-tuple(v_760)) else fail-any) else fail-any) else fail-any)) in
        {245}let v_766: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_747))) in
        {246}let v_767: bitstring = catch-fail(symmetricstateunpack(v_765)) in
        {247}let v_768: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_767),(if success?(2-proj-7-tuple(v_747)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_750) else fail-any) else fail-any))) in
        {248}let v_769: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_767),(if success?(2-proj-7-tuple(v_747)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_750) else fail-any) else fail-any))) in
        {249}let v_770: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_767),(if success?(2-proj-7-tuple(v_747)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_750) else fail-any) else fail-any))) in
        {250}let v_771: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_747)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_750) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_767))) then (if not-caught-fail(v_768) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (v_768,v_769,v_770) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_772: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_747)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_750) else fail-any) else fail-any)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_771)) then cipherstatepack(2-proj-3-tuple(v_771),minnonce) else fail-any),1-proj-3-tuple(v_771),3-proj-3-tuple(v_767)) else fail-any) else fail-any) else fail-any)) in
        {252}let v_773: bitstring = catch-fail(symmetricstateunpack(v_772)) in
        {253}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {254}let v_775: aead = catch-fail(decrypt(1-proj-2-tuple(v_774),2-proj-2-tuple(v_774),3-proj-3-tuple(v_773),3-proj-3-tuple(v_748))) in
        {255}let v_776: bitstring = catch-fail(aeadunpack(v_775)) in
        {256}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {257}let v_778: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_774))) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then cipherstatepack(1-proj-2-tuple(v_777),increment_nonce(2-proj-2-tuple(v_774))) else fail-any) else fail-any)) in
        {258}let v_779: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_748)) && (success?(3-proj-3-tuple(v_773)) && success?(1-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,3-proj-3-tuple(v_776),1-proj-3-tuple(v_776)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {259}let v_780: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) in
        {260}let v_781: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_748)) && success?(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then symmetricstatepack(1-proj-3-tuple(v_780),2-proj-3-tuple(v_780),hash(3-proj-3-tuple(v_780),3-proj-3-tuple(v_748))) else fail-any) else fail-any)) in
        {261}let v_782: bitstring = catch-fail((if success?(3-proj-3-tuple(v_748)) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_783: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_782),2-proj-7-tuple(v_747),3-proj-7-tuple(v_747),4-proj-7-tuple(v_747),v_750,6-proj-7-tuple(v_747),7-proj-7-tuple(v_747))) in
        {263}let v_784: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_782))) in
        {264}let v_785: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_784),zero)) in
        {265}let v_786: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_784),zero)) in
        {266}let v_787: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_784),zero)) in
        {267}let v_788: bitstring = catch-fail((if success?(2-proj-3-tuple(v_784)) then (if not-caught-fail(v_785) then (if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (v_785,v_786,v_787) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {268}let v_789: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_788)) then cipherstatepack(1-proj-3-tuple(v_788),minnonce) else fail-any)) in
        {269}let v_790: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_788)) then cipherstatepack(2-proj-3-tuple(v_788),minnonce) else fail-any)) in
        {270}let v_791: bitstring = catch-fail((if success?(1-proj-3-tuple(v_782)) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if not-caught-fail(v_789) then (if not-caught-fail(v_790) then (1-proj-3-tuple(v_782),v_789,v_790) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {271}let (hs_792: handshakestate,plaintext_b_793: bitstring,valid_794: bool,cs1_795: cipherstate,cs2_796: cipherstate) = (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-7-tuple(v_747))))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (if not-caught-fail(v_752) then (if not-caught-fail(v_758) then (if not-caught-fail(v_765) then (if not-caught-fail(v_772) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (v_749 && 3-proj-3-tuple(v_782)) then (if not-caught-fail(v_783) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (v_783,2-proj-3-tuple(v_782),true,2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {272}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_793);
        {273}insert statestore(alice,charlie,sid,statepack_c(hs_792,cs1_795,cs2_796))
    ) | (
        {275}!
        {294}get statestore(=alice,=charlie,=sid,statepack_c(hs_797: handshakestate,cs1_798: cipherstate,cs2_799: cipherstate)) in
        {276}let hs_800: handshakestate = handshakestatesetcs(hs_797,cs1_798) in
        {277}let v_801: bitstring = catch-fail(handshakestateunpack(hs_800)) in
        {278}let v_802: bitstring = catch-fail((empty,empty,empty)) in
        {279}let v_803: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_801))) in
        {280}let v_804: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_803))) in
        {281}let v_805: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_804),2-proj-2-tuple(v_804),3-proj-3-tuple(v_803),msg_c(alice,charlie,sid))) in
        {282}let v_806: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_803))) in
        {283}let v_807: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_804))) && success?(1-proj-3-tuple(v_803))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then cipherstatepack(1-proj-2-tuple(v_806),increment_nonce(2-proj-2-tuple(v_804))) else fail-any) else fail-any)) in
        {284}let v_808: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_803)) && success?(1-proj-3-tuple(v_803))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then (if not-caught-fail(v_805) then (if not-caught-fail(v_807) then (v_807,v_805) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {285}let v_809: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_808),2-proj-3-tuple(v_803),3-proj-3-tuple(v_803)))) in
        {286}let v_810: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_808)) && success?(symmetricstatepack(1-proj-2-tuple(v_808),2-proj-3-tuple(v_803),3-proj-3-tuple(v_803)))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_809),hash(3-proj-3-tuple(v_809),2-proj-2-tuple(v_808))) else fail-any) else fail-any)) in
        {287}let v_811: bitstring = catch-fail((if success?(1-proj-7-tuple(v_801)) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then (if not-caught-fail(v_810) then (v_810,2-proj-2-tuple(v_808)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {288}let v_812: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_811),2-proj-7-tuple(v_801),3-proj-7-tuple(v_801),4-proj-7-tuple(v_801),5-proj-7-tuple(v_801),6-proj-7-tuple(v_801),7-proj-7-tuple(v_801))) in
        {289}let v_813: bitstring = catch-fail(concat3(1-proj-3-tuple(v_802),2-proj-3-tuple(v_802),2-proj-2-tuple(v_811))) in
        {290}let (hs_814: handshakestate,message_c_815: bitstring) = (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-7-tuple(v_801))))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then (if not-caught-fail(v_812) then (if not-caught-fail(v_813) then (v_812,v_813) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {291}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {292}insert statestore(alice,charlie,sid,statepack_d(hs_814,handshakestategetcs(hs_814),cs2_799));
        {293}out(pub, message_c_815)
    ) | (
        {295}!
        {315}get statestore(=alice,=charlie,=sid,statepack_d(hs_816: handshakestate,cs1_817: cipherstate,cs2_818: cipherstate)) in
        {296}let hs_819: handshakestate = handshakestatesetcs(hs_816,cs2_818) in
        {297}in(pub, message_d_820: bitstring);
        {298}let v_821: bitstring = catch-fail(handshakestateunpack(hs_819)) in
        {299}let v_822: bitstring = catch-fail(deconcat3(message_d_820)) in
        {300}let v_823: bool = catch-fail(true) in
        {301}let v_824: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_821))) in
        {302}let v_825: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_824))) in
        {303}let v_826: aead = catch-fail(decrypt(1-proj-2-tuple(v_825),2-proj-2-tuple(v_825),3-proj-3-tuple(v_824),3-proj-3-tuple(v_822))) in
        {304}let v_827: bitstring = catch-fail(aeadunpack(v_826)) in
        {305}let v_828: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_824))) in
        {306}let v_829: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_825))) && success?(1-proj-3-tuple(v_824))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-2-tuple(v_828))))) then cipherstatepack(1-proj-2-tuple(v_828),increment_nonce(2-proj-2-tuple(v_825))) else fail-any) else fail-any)) in
        {307}let v_830: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_822)) && (success?(3-proj-3-tuple(v_824)) && success?(1-proj-3-tuple(v_824)))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then (if not-caught-fail(v_826) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_829) then (v_829,3-proj-3-tuple(v_827),1-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {308}let v_831: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_830),2-proj-3-tuple(v_824),3-proj-3-tuple(v_824)))) in
        {309}let v_832: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_822)) && success?(symmetricstatepack(1-proj-3-tuple(v_830),2-proj-3-tuple(v_824),3-proj-3-tuple(v_824)))) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then symmetricstatepack(1-proj-3-tuple(v_831),2-proj-3-tuple(v_831),hash(3-proj-3-tuple(v_831),3-proj-3-tuple(v_822))) else fail-any) else fail-any)) in
        {310}let v_833: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_822)) && success?(1-proj-7-tuple(v_821))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if not-caught-fail(v_832) then (v_832,2-proj-3-tuple(v_830),3-proj-3-tuple(v_830)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {311}let v_834: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_833),2-proj-7-tuple(v_821),3-proj-7-tuple(v_821),4-proj-7-tuple(v_821),5-proj-7-tuple(v_821),6-proj-7-tuple(v_821),7-proj-7-tuple(v_821))) in
        {312}let (hs_835: handshakestate,plaintext_d_836: bitstring,valid_837: bool) = (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-7-tuple(v_821))))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if not-caught-fail(v_823) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if (v_823 && 3-proj-3-tuple(v_833)) then (if not-caught-fail(v_834) then (v_834,2-proj-3-tuple(v_833),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {313}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_836);
        {314}event RecvEnd(valid_837)
    ) | (
        {316}event LeakPsk(phase0,alice,charlie);
        {317}out(pub, key_psk(alice,charlie))
    ) | (
        {318}phase 1;
        {319}event LeakPsk(phase1,alice,charlie);
        {320}out(pub, key_psk(alice,charlie))
    ) | (
        {321}event LeakS(phase0,alice);
        {322}out(pub, key_s(alice))
    ) | (
        {323}phase 1;
        {324}event LeakS(phase1,alice);
        {325}out(pub, key_s(alice))
    )
) | (
    {326}let s_838: keypair = keypairpack(empty,empty) in
    (
        {327}let e_839: keypair = keypairpack(empty,empty) in
        {328}let rs_840: key = empty in
        {329}let re_841: key = empty in
        {330}let v_842: bitstring = catch-fail(hash(somename,empty)) in
        {331}let v_843: key = catch-fail(v_842) in
        {332}let v_844: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {333}let v_845: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then symmetricstatepack(v_844,v_843,v_842) else fail-any) else fail-any) else fail-any))) in
        {334}let v_846: symmetricstate = catch-fail((if success?((if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then symmetricstatepack(v_844,v_843,v_842) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),empty)) else fail-any) else fail-any)) in
        {335}let hs_847: handshakestate = (if not-caught-fail(v_846) then handshakestatepack(v_846,s_838,e_839,rs_840,re_841,key_psk(alice,bob),false) else fail-any) in
        {336}insert statestore(bob,alice,sid,statepack_a(hs_847))
    ) | (
        {384}get statestore(=bob,=alice,=sid,statepack_a(hs_848: handshakestate)) in
        {337}in(pub, message_a_849: bitstring);
        {338}let v_850: bitstring = catch-fail(handshakestateunpack(hs_848)) in
        {339}let v_851: bitstring = catch-fail(deconcat3(message_a_849)) in
        {340}let v_852: bool = catch-fail(true) in
        {341}let v_853: key = catch-fail(1-proj-3-tuple(v_851)) in
        {342}let v_854: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_850))) in
        {343}let v_855: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_850)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_854),hash(3-proj-3-tuple(v_854),v_853)) else fail-any) else fail-any)) in
        {344}let v_856: bitstring = catch-fail(symmetricstateunpack(v_855)) in
        {345}let v_857: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_856),v_853)) in
        {346}let v_858: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_856),v_853)) in
        {347}let v_859: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_856),v_853)) in
        {348}let v_860: bitstring = catch-fail((if success?(2-proj-3-tuple(v_856)) then (if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (v_857,v_858,v_859) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {349}let v_861: symmetricstate = catch-fail((if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_860)) then cipherstatepack(2-proj-3-tuple(v_860),minnonce) else fail-any),1-proj-3-tuple(v_860),3-proj-3-tuple(v_856)) else fail-any) else fail-any)) in
        {350}let v_862: bitstring = catch-fail(symmetricstateunpack(v_861)) in
        {351}let v_863: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_862))) in
        {352}let v_864: aead = catch-fail(decrypt(1-proj-2-tuple(v_863),2-proj-2-tuple(v_863),3-proj-3-tuple(v_862),2-proj-3-tuple(v_851))) in
        {353}let v_865: bitstring = catch-fail(aeadunpack(v_864)) in
        {354}let v_866: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_862))) in
        {355}let v_867: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_863))) && success?(1-proj-3-tuple(v_862))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then cipherstatepack(1-proj-2-tuple(v_866),increment_nonce(2-proj-2-tuple(v_863))) else fail-any) else fail-any)) in
        {356}let v_868: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_851)) && (success?(3-proj-3-tuple(v_862)) && success?(1-proj-3-tuple(v_862)))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then (if not-caught-fail(v_864) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_867) then (v_867,3-proj-3-tuple(v_865),1-proj-3-tuple(v_865)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {357}let v_869: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_868),2-proj-3-tuple(v_862),3-proj-3-tuple(v_862)))) in
        {358}let v_870: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_851)) && success?(symmetricstatepack(1-proj-3-tuple(v_868),2-proj-3-tuple(v_862),3-proj-3-tuple(v_862)))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_869),hash(3-proj-3-tuple(v_869),2-proj-3-tuple(v_851))) else fail-any) else fail-any)) in
        {359}let v_871: bitstring = catch-fail((if success?(2-proj-3-tuple(v_851)) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if not-caught-fail(v_870) then (v_870,2-proj-3-tuple(v_868),3-proj-3-tuple(v_868)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {360}let v_872: key = catch-fail(2-proj-3-tuple(v_871)) in
        {361}let v_873: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_871))) in
        {362}let v_874: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_873),6-proj-7-tuple(v_850))) in
        {363}let v_875: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_873),6-proj-7-tuple(v_850))) in
        {364}let v_876: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_873),6-proj-7-tuple(v_850))) in
        {365}let v_877: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_850)) && success?(2-proj-3-tuple(v_873))) then (if not-caught-fail(v_874) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (v_874,v_875,v_876) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {366}let v_878: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_873),1-proj-3-tuple(v_877),3-proj-3-tuple(v_873)))) in
        {367}let v_879: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_877)) && success?(symmetricstatepack(1-proj-3-tuple(v_873),1-proj-3-tuple(v_877),3-proj-3-tuple(v_873)))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then symmetricstatepack(1-proj-3-tuple(v_878),2-proj-3-tuple(v_878),hash(3-proj-3-tuple(v_878),2-proj-3-tuple(v_877))) else fail-any) else fail-any))) in
        {368}let v_880: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_850)) && success?(1-proj-3-tuple(v_871))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_877)) then cipherstatepack(3-proj-3-tuple(v_877),minnonce) else fail-any),1-proj-3-tuple(v_877),3-proj-3-tuple(v_879)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_881: bitstring = catch-fail(symmetricstateunpack(v_880)) in
        {370}let v_882: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {371}let v_883: aead = catch-fail(decrypt(1-proj-2-tuple(v_882),2-proj-2-tuple(v_882),3-proj-3-tuple(v_881),3-proj-3-tuple(v_851))) in
        {372}let v_884: bitstring = catch-fail(aeadunpack(v_883)) in
        {373}let v_885: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {374}let v_886: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_882))) && success?(1-proj-3-tuple(v_881))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then cipherstatepack(1-proj-2-tuple(v_885),increment_nonce(2-proj-2-tuple(v_882))) else fail-any) else fail-any)) in
        {375}let v_887: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_851)) && (success?(3-proj-3-tuple(v_881)) && success?(1-proj-3-tuple(v_881)))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-2-tuple(v_882))))) then (if not-caught-fail(v_883) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then (if not-caught-fail(v_886) then (v_886,3-proj-3-tuple(v_884),1-proj-3-tuple(v_884)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {376}let v_888: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) in
        {377}let v_889: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_851)) && success?(symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then symmetricstatepack(1-proj-3-tuple(v_888),2-proj-3-tuple(v_888),hash(3-proj-3-tuple(v_888),3-proj-3-tuple(v_851))) else fail-any) else fail-any)) in
        {378}let v_890: bitstring = catch-fail((if success?(3-proj-3-tuple(v_851)) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if not-caught-fail(v_889) then (v_889,2-proj-3-tuple(v_887),3-proj-3-tuple(v_887)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {379}let v_891: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {380}let v_892: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_890),2-proj-7-tuple(v_850),3-proj-7-tuple(v_850),v_872,v_853,6-proj-7-tuple(v_850),7-proj-7-tuple(v_850))) in
        {381}let (hs_893: handshakestate,plaintext_a: bitstring,valid_894: bool) = (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-7-tuple(v_850))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if not-caught-fail(v_852) then (if not-caught-fail(v_853) then (if not-caught-fail(v_855) then (if not-caught-fail(v_861) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if not-caught-fail(v_872) then (if not-caught-fail(v_880) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if ((3-proj-3-tuple(v_871) && 3-proj-3-tuple(v_890)) && (v_872 = getpublickey((if not-caught-fail(v_891) then keypairpack(validkey(v_891),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_892) then (v_892,2-proj-3-tuple(v_890),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {382}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {383}insert statestore(bob,alice,sid,statepack_b(hs_893))
    ) | (
        {435}get statestore(=bob,=alice,=sid,statepack_b(hs_895: handshakestate)) in
        {385}let v_896: bitstring = catch-fail(handshakestateunpack(hs_895)) in
        {386}let v_897: bitstring = catch-fail((empty,empty,empty)) in
        {387}let v_898: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {388}let v_899: keypair = catch-fail((if not-caught-fail(v_898) then keypairpack(validkey(v_898),key_e(bob,alice,sid)) else fail-any)) in
        {389}let v_900: bitstring = catch-fail(getpublickey(v_899)) in
        {390}let v_901: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_896))) in
        {391}let v_902: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_896)) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_901),hash(3-proj-3-tuple(v_901),v_900)) else fail-any) else fail-any)) in
        {392}let v_903: bitstring = catch-fail(symmetricstateunpack(v_902)) in
        {393}let v_904: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_903),getpublickey(v_899))) in
        {394}let v_905: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_903),getpublickey(v_899))) in
        {395}let v_906: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_903),getpublickey(v_899))) in
        {396}let v_907: bitstring = catch-fail((if (success?(getpublickey(v_899)) && success?(2-proj-3-tuple(v_903))) then (if not-caught-fail(v_904) then (if not-caught-fail(v_905) then (if not-caught-fail(v_906) then (v_904,v_905,v_906) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {397}let v_908: symmetricstate = catch-fail((if success?(getpublickey(v_899)) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_907)) then cipherstatepack(2-proj-3-tuple(v_907),minnonce) else fail-any),1-proj-3-tuple(v_907),3-proj-3-tuple(v_903)) else fail-any) else fail-any) else fail-any)) in
        {398}let v_909: bitstring = catch-fail(keypairunpack(v_899)) in
        {399}let v_910: bitstring = catch-fail(symmetricstateunpack(v_908)) in
        {400}let v_911: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_910),(if success?(5-proj-7-tuple(v_896)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_896)) else fail-any) else fail-any))) in
        {401}let v_912: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_910),(if success?(5-proj-7-tuple(v_896)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_896)) else fail-any) else fail-any))) in
        {402}let v_913: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_910),(if success?(5-proj-7-tuple(v_896)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_896)) else fail-any) else fail-any))) in
        {403}let v_914: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_896)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_896)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_910))) then (if not-caught-fail(v_911) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then (v_911,v_912,v_913) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {404}let v_915: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_896)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_896)) else fail-any) else fail-any)) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_914)) then cipherstatepack(2-proj-3-tuple(v_914),minnonce) else fail-any),1-proj-3-tuple(v_914),3-proj-3-tuple(v_910)) else fail-any) else fail-any) else fail-any)) in
        {405}let v_916: bitstring = catch-fail(keypairunpack(v_899)) in
        {406}let v_917: bitstring = catch-fail(symmetricstateunpack(v_915)) in
        {407}let v_918: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_917),(if success?(4-proj-7-tuple(v_896)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),4-proj-7-tuple(v_896)) else fail-any) else fail-any))) in
        {408}let v_919: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_917),(if success?(4-proj-7-tuple(v_896)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),4-proj-7-tuple(v_896)) else fail-any) else fail-any))) in
        {409}let v_920: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_917),(if success?(4-proj-7-tuple(v_896)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),4-proj-7-tuple(v_896)) else fail-any) else fail-any))) in
        {410}let v_921: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_896)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),4-proj-7-tuple(v_896)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_917))) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (if not-caught-fail(v_920) then (v_918,v_919,v_920) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {411}let v_922: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_896)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),4-proj-7-tuple(v_896)) else fail-any) else fail-any)) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_921)) then cipherstatepack(2-proj-3-tuple(v_921),minnonce) else fail-any),1-proj-3-tuple(v_921),3-proj-3-tuple(v_917)) else fail-any) else fail-any) else fail-any)) in
        {412}let v_923: bitstring = catch-fail(symmetricstateunpack(v_922)) in
        {413}let v_924: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_923))) in
        {414}let v_925: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_924),2-proj-2-tuple(v_924),3-proj-3-tuple(v_923),msg_b(bob,alice,sid))) in
        {415}let v_926: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_923))) in
        {416}let v_927: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_924))) && success?(1-proj-3-tuple(v_923))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-2-tuple(v_926))))) then cipherstatepack(1-proj-2-tuple(v_926),increment_nonce(2-proj-2-tuple(v_924))) else fail-any) else fail-any)) in
        {417}let v_928: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_923)) && success?(1-proj-3-tuple(v_923))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-2-tuple(v_924))))) then (if not-caught-fail(v_925) then (if not-caught-fail(v_927) then (v_927,v_925) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_929: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_928),2-proj-3-tuple(v_923),3-proj-3-tuple(v_923)))) in
        {419}let v_930: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_928)) && success?(symmetricstatepack(1-proj-2-tuple(v_928),2-proj-3-tuple(v_923),3-proj-3-tuple(v_923)))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then symmetricstatepack(1-proj-3-tuple(v_929),2-proj-3-tuple(v_929),hash(3-proj-3-tuple(v_929),2-proj-2-tuple(v_928))) else fail-any) else fail-any)) in
        {420}let v_931: bitstring = catch-fail((if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then (if not-caught-fail(v_930) then (v_930,2-proj-2-tuple(v_928)) else fail-any) else fail-any) else fail-any)) in
        {421}let v_932: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_931),2-proj-7-tuple(v_896),v_899,4-proj-7-tuple(v_896),5-proj-7-tuple(v_896),6-proj-7-tuple(v_896),7-proj-7-tuple(v_896))) in
        {422}let v_933: bitstring = catch-fail(concat3(v_900,2-proj-3-tuple(v_897),2-proj-2-tuple(v_931))) in
        {423}let v_934: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_931))) in
        {424}let v_935: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_934),zero)) in
        {425}let v_936: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_934),zero)) in
        {426}let v_937: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_934),zero)) in
        {427}let v_938: bitstring = catch-fail((if success?(2-proj-3-tuple(v_934)) then (if not-caught-fail(v_935) then (if not-caught-fail(v_936) then (if not-caught-fail(v_937) then (v_935,v_936,v_937) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {428}let v_939: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_938)) then cipherstatepack(1-proj-3-tuple(v_938),minnonce) else fail-any)) in
        {429}let v_940: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_938)) then cipherstatepack(2-proj-3-tuple(v_938),minnonce) else fail-any)) in
        {430}let v_941: bitstring = catch-fail((if success?(1-proj-2-tuple(v_931)) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if not-caught-fail(v_939) then (if not-caught-fail(v_940) then (1-proj-2-tuple(v_931),v_939,v_940) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let (hs_942: handshakestate,message_b_943: bitstring,cs1_944: cipherstate,cs2_945: cipherstate) = (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-7-tuple(v_896))))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if not-caught-fail(v_899) then (if not-caught-fail(v_900) then (if not-caught-fail(v_902) then (if not-caught-fail(v_908) then (if not-caught-fail(v_915) then (if not-caught-fail(v_922) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-2-tuple(v_931))))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_933) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then (v_932,v_933,2-proj-3-tuple(v_941),3-proj-3-tuple(v_941)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {432}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {433}insert statestore(bob,alice,sid,statepack_c(hs_942,cs1_944,cs2_945));
        {434}out(pub, message_b_943)
    ) | (
        {436}!
        {456}get statestore(=bob,=alice,=sid,statepack_c(hs_946: handshakestate,cs1_947: cipherstate,cs2_948: cipherstate)) in
        {437}let hs_949: handshakestate = handshakestatesetcs(hs_946,cs1_947) in
        {438}in(pub, message_c_950: bitstring);
        {439}let v_951: bitstring = catch-fail(handshakestateunpack(hs_949)) in
        {440}let v_952: bitstring = catch-fail(deconcat3(message_c_950)) in
        {441}let v_953: bool = catch-fail(true) in
        {442}let v_954: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_951))) in
        {443}let v_955: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_954))) in
        {444}let v_956: aead = catch-fail(decrypt(1-proj-2-tuple(v_955),2-proj-2-tuple(v_955),3-proj-3-tuple(v_954),3-proj-3-tuple(v_952))) in
        {445}let v_957: bitstring = catch-fail(aeadunpack(v_956)) in
        {446}let v_958: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_954))) in
        {447}let v_959: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_955))) && success?(1-proj-3-tuple(v_954))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then cipherstatepack(1-proj-2-tuple(v_958),increment_nonce(2-proj-2-tuple(v_955))) else fail-any) else fail-any)) in
        {448}let v_960: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_952)) && (success?(3-proj-3-tuple(v_954)) && success?(1-proj-3-tuple(v_954)))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then (if not-caught-fail(v_956) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if not-caught-fail(v_959) then (v_959,3-proj-3-tuple(v_957),1-proj-3-tuple(v_957)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {449}let v_961: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_960),2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)))) in
        {450}let v_962: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_952)) && success?(symmetricstatepack(1-proj-3-tuple(v_960),2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_961),hash(3-proj-3-tuple(v_961),3-proj-3-tuple(v_952))) else fail-any) else fail-any)) in
        {451}let v_963: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_952)) && success?(1-proj-7-tuple(v_951))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if not-caught-fail(v_962) then (v_962,2-proj-3-tuple(v_960),3-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {452}let v_964: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_963),2-proj-7-tuple(v_951),3-proj-7-tuple(v_951),4-proj-7-tuple(v_951),5-proj-7-tuple(v_951),6-proj-7-tuple(v_951),7-proj-7-tuple(v_951))) in
        {453}let (hs_965: handshakestate,plaintext_c: bitstring,valid_966: bool) = (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-7-tuple(v_951))))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if not-caught-fail(v_953) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if (v_953 && 3-proj-3-tuple(v_963)) then (if not-caught-fail(v_964) then (v_964,2-proj-3-tuple(v_963),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {454}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {455}insert statestore(bob,alice,sid,statepack_d(hs_965,handshakestategetcs(hs_965),cs2_948))
    ) | (
        {457}!
        {475}get statestore(=bob,=alice,=sid,statepack_d(hs_967: handshakestate,cs1_968: cipherstate,cs2_969: cipherstate)) in
        {458}let hs_970: handshakestate = handshakestatesetcs(hs_967,cs2_969) in
        {459}let v_971: bitstring = catch-fail(handshakestateunpack(hs_970)) in
        {460}let v_972: bitstring = catch-fail((empty,empty,empty)) in
        {461}let v_973: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_971))) in
        {462}let v_974: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_973))) in
        {463}let v_975: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_974),2-proj-2-tuple(v_974),3-proj-3-tuple(v_973),msg_d(bob,alice,sid))) in
        {464}let v_976: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_973))) in
        {465}let v_977: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_974))) && success?(1-proj-3-tuple(v_973))) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then cipherstatepack(1-proj-2-tuple(v_976),increment_nonce(2-proj-2-tuple(v_974))) else fail-any) else fail-any)) in
        {466}let v_978: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_973)) && success?(1-proj-3-tuple(v_973))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-2-tuple(v_974))))) then (if not-caught-fail(v_975) then (if not-caught-fail(v_977) then (v_977,v_975) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {467}let v_979: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_978),2-proj-3-tuple(v_973),3-proj-3-tuple(v_973)))) in
        {468}let v_980: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_978)) && success?(symmetricstatepack(1-proj-2-tuple(v_978),2-proj-3-tuple(v_973),3-proj-3-tuple(v_973)))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then symmetricstatepack(1-proj-3-tuple(v_979),2-proj-3-tuple(v_979),hash(3-proj-3-tuple(v_979),2-proj-2-tuple(v_978))) else fail-any) else fail-any)) in
        {469}let v_981: bitstring = catch-fail((if success?(1-proj-7-tuple(v_971)) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then (if not-caught-fail(v_980) then (v_980,2-proj-2-tuple(v_978)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {470}let v_982: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_981),2-proj-7-tuple(v_971),3-proj-7-tuple(v_971),4-proj-7-tuple(v_971),5-proj-7-tuple(v_971),6-proj-7-tuple(v_971),7-proj-7-tuple(v_971))) in
        {471}let v_983: bitstring = catch-fail(concat3(1-proj-3-tuple(v_972),2-proj-3-tuple(v_972),2-proj-2-tuple(v_981))) in
        {472}let (hs_984: handshakestate,message_d_985: bitstring) = (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-7-tuple(v_971))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-2-tuple(v_981))))) then (if not-caught-fail(v_982) then (if not-caught-fail(v_983) then (v_982,v_983) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {473}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {474}out(pub, message_d_985)
    ) | (
        {476}event LeakPsk(phase0,alice,bob);
        {477}out(pub, key_psk(alice,bob))
    ) | (
        {478}phase 1;
        {479}event LeakPsk(phase1,alice,bob);
        {480}out(pub, key_psk(alice,bob))
    ) | (
        0
    )
) | (
    {481}let s_986: keypair = keypairpack(empty,empty) in
    (
        {482}let e_987: keypair = keypairpack(empty,empty) in
        {483}let rs_988: key = empty in
        {484}let re_989: key = empty in
        {485}let v_990: bitstring = catch-fail(hash(somename,empty)) in
        {486}let v_991: key = catch-fail(v_990) in
        {487}let v_992: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {488}let v_993: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_990) then (if not-caught-fail(v_991) then (if not-caught-fail(v_992) then symmetricstatepack(v_992,v_991,v_990) else fail-any) else fail-any) else fail-any))) in
        {489}let v_994: symmetricstate = catch-fail((if success?((if not-caught-fail(v_990) then (if not-caught-fail(v_991) then (if not-caught-fail(v_992) then symmetricstatepack(v_992,v_991,v_990) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then symmetricstatepack(1-proj-3-tuple(v_993),2-proj-3-tuple(v_993),hash(3-proj-3-tuple(v_993),empty)) else fail-any) else fail-any)) in
        {490}let hs_995: handshakestate = (if not-caught-fail(v_994) then handshakestatepack(v_994,s_986,e_987,rs_988,re_989,key_psk(charlie,bob),false) else fail-any) in
        {491}insert statestore(bob,charlie,sid,statepack_a(hs_995))
    ) | (
        {539}get statestore(=bob,=charlie,=sid,statepack_a(hs_996: handshakestate)) in
        {492}in(pub, message_a_997: bitstring);
        {493}let v_998: bitstring = catch-fail(handshakestateunpack(hs_996)) in
        {494}let v_999: bitstring = catch-fail(deconcat3(message_a_997)) in
        {495}let v_1000: bool = catch-fail(true) in
        {496}let v_1001: key = catch-fail(1-proj-3-tuple(v_999)) in
        {497}let v_1002: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_998))) in
        {498}let v_1003: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_998)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_1002),hash(3-proj-3-tuple(v_1002),v_1001)) else fail-any) else fail-any)) in
        {499}let v_1004: bitstring = catch-fail(symmetricstateunpack(v_1003)) in
        {500}let v_1005: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1004),v_1001)) in
        {501}let v_1006: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1004),v_1001)) in
        {502}let v_1007: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1004),v_1001)) in
        {503}let v_1008: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1004)) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1006) then (if not-caught-fail(v_1007) then (v_1005,v_1006,v_1007) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {504}let v_1009: symmetricstate = catch-fail((if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1008)) then cipherstatepack(2-proj-3-tuple(v_1008),minnonce) else fail-any),1-proj-3-tuple(v_1008),3-proj-3-tuple(v_1004)) else fail-any) else fail-any)) in
        {505}let v_1010: bitstring = catch-fail(symmetricstateunpack(v_1009)) in
        {506}let v_1011: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1010))) in
        {507}let v_1012: aead = catch-fail(decrypt(1-proj-2-tuple(v_1011),2-proj-2-tuple(v_1011),3-proj-3-tuple(v_1010),2-proj-3-tuple(v_999))) in
        {508}let v_1013: bitstring = catch-fail(aeadunpack(v_1012)) in
        {509}let v_1014: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1010))) in
        {510}let v_1015: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1011))) && success?(1-proj-3-tuple(v_1010))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then cipherstatepack(1-proj-2-tuple(v_1014),increment_nonce(2-proj-2-tuple(v_1011))) else fail-any) else fail-any)) in
        {511}let v_1016: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_999)) && (success?(3-proj-3-tuple(v_1010)) && success?(1-proj-3-tuple(v_1010)))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-2-tuple(v_1011))))) then (if not-caught-fail(v_1012) then (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-3-tuple(v_1013))))) then (if not-caught-fail(v_1015) then (v_1015,3-proj-3-tuple(v_1013),1-proj-3-tuple(v_1013)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_1017: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1016),2-proj-3-tuple(v_1010),3-proj-3-tuple(v_1010)))) in
        {513}let v_1018: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_999)) && success?(symmetricstatepack(1-proj-3-tuple(v_1016),2-proj-3-tuple(v_1010),3-proj-3-tuple(v_1010)))) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then symmetricstatepack(1-proj-3-tuple(v_1017),2-proj-3-tuple(v_1017),hash(3-proj-3-tuple(v_1017),2-proj-3-tuple(v_999))) else fail-any) else fail-any)) in
        {514}let v_1019: bitstring = catch-fail((if success?(2-proj-3-tuple(v_999)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-3-tuple(v_1016))))) then (if not-caught-fail(v_1018) then (v_1018,2-proj-3-tuple(v_1016),3-proj-3-tuple(v_1016)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {515}let v_1020: key = catch-fail(2-proj-3-tuple(v_1019)) in
        {516}let v_1021: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1019))) in
        {517}let v_1022: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1021),6-proj-7-tuple(v_998))) in
        {518}let v_1023: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1021),6-proj-7-tuple(v_998))) in
        {519}let v_1024: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1021),6-proj-7-tuple(v_998))) in
        {520}let v_1025: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_998)) && success?(2-proj-3-tuple(v_1021))) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1023) then (if not-caught-fail(v_1024) then (v_1022,v_1023,v_1024) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {521}let v_1026: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1021),1-proj-3-tuple(v_1025),3-proj-3-tuple(v_1021)))) in
        {522}let v_1027: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_1025)) && success?(symmetricstatepack(1-proj-3-tuple(v_1021),1-proj-3-tuple(v_1025),3-proj-3-tuple(v_1021)))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then symmetricstatepack(1-proj-3-tuple(v_1026),2-proj-3-tuple(v_1026),hash(3-proj-3-tuple(v_1026),2-proj-3-tuple(v_1025))) else fail-any) else fail-any))) in
        {523}let v_1028: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_998)) && success?(1-proj-3-tuple(v_1019))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-3-tuple(v_1027))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_1025)) then cipherstatepack(3-proj-3-tuple(v_1025),minnonce) else fail-any),1-proj-3-tuple(v_1025),3-proj-3-tuple(v_1027)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {524}let v_1029: bitstring = catch-fail(symmetricstateunpack(v_1028)) in
        {525}let v_1030: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1029))) in
        {526}let v_1031: aead = catch-fail(decrypt(1-proj-2-tuple(v_1030),2-proj-2-tuple(v_1030),3-proj-3-tuple(v_1029),3-proj-3-tuple(v_999))) in
        {527}let v_1032: bitstring = catch-fail(aeadunpack(v_1031)) in
        {528}let v_1033: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1029))) in
        {529}let v_1034: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1030))) && success?(1-proj-3-tuple(v_1029))) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then cipherstatepack(1-proj-2-tuple(v_1033),increment_nonce(2-proj-2-tuple(v_1030))) else fail-any) else fail-any)) in
        {530}let v_1035: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_999)) && (success?(3-proj-3-tuple(v_1029)) && success?(1-proj-3-tuple(v_1029)))) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then (if not-caught-fail(v_1031) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-3-tuple(v_1032))))) then (if not-caught-fail(v_1034) then (v_1034,3-proj-3-tuple(v_1032),1-proj-3-tuple(v_1032)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {531}let v_1036: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1035),2-proj-3-tuple(v_1029),3-proj-3-tuple(v_1029)))) in
        {532}let v_1037: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_999)) && success?(symmetricstatepack(1-proj-3-tuple(v_1035),2-proj-3-tuple(v_1029),3-proj-3-tuple(v_1029)))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then symmetricstatepack(1-proj-3-tuple(v_1036),2-proj-3-tuple(v_1036),hash(3-proj-3-tuple(v_1036),3-proj-3-tuple(v_999))) else fail-any) else fail-any)) in
        {533}let v_1038: bitstring = catch-fail((if success?(3-proj-3-tuple(v_999)) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-3-tuple(v_1029))))) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then (if not-caught-fail(v_1037) then (v_1037,2-proj-3-tuple(v_1035),3-proj-3-tuple(v_1035)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {534}let v_1039: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {535}let v_1040: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1038),2-proj-7-tuple(v_998),3-proj-7-tuple(v_998),v_1020,v_1001,6-proj-7-tuple(v_998),7-proj-7-tuple(v_998))) in
        {536}let (hs_1041: handshakestate,plaintext_a_1042: bitstring,valid_1043: bool) = (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-7-tuple(v_998))))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if not-caught-fail(v_1001) then (if not-caught-fail(v_1003) then (if not-caught-fail(v_1009) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if not-caught-fail(v_1020) then (if not-caught-fail(v_1028) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then (if ((3-proj-3-tuple(v_1019) && 3-proj-3-tuple(v_1038)) && (v_1020 = getpublickey((if not-caught-fail(v_1039) then keypairpack(validkey(v_1039),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1040) then (v_1040,2-proj-3-tuple(v_1038),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {537}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1042);
        {538}insert statestore(bob,charlie,sid,statepack_b(hs_1041))
    ) | (
        {590}get statestore(=bob,=charlie,=sid,statepack_b(hs_1044: handshakestate)) in
        {540}let v_1045: bitstring = catch-fail(handshakestateunpack(hs_1044)) in
        {541}let v_1046: bitstring = catch-fail((empty,empty,empty)) in
        {542}let v_1047: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {543}let v_1048: keypair = catch-fail((if not-caught-fail(v_1047) then keypairpack(validkey(v_1047),key_e(bob,charlie,sid)) else fail-any)) in
        {544}let v_1049: bitstring = catch-fail(getpublickey(v_1048)) in
        {545}let v_1050: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1045))) in
        {546}let v_1051: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then symmetricstatepack(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1050),hash(3-proj-3-tuple(v_1050),v_1049)) else fail-any) else fail-any)) in
        {547}let v_1052: bitstring = catch-fail(symmetricstateunpack(v_1051)) in
        {548}let v_1053: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1052),getpublickey(v_1048))) in
        {549}let v_1054: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1052),getpublickey(v_1048))) in
        {550}let v_1055: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1052),getpublickey(v_1048))) in
        {551}let v_1056: bitstring = catch-fail((if (success?(getpublickey(v_1048)) && success?(2-proj-3-tuple(v_1052))) then (if not-caught-fail(v_1053) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1055) then (v_1053,v_1054,v_1055) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {552}let v_1057: symmetricstate = catch-fail((if success?(getpublickey(v_1048)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1056)) then cipherstatepack(2-proj-3-tuple(v_1056),minnonce) else fail-any),1-proj-3-tuple(v_1056),3-proj-3-tuple(v_1052)) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1058: bitstring = catch-fail(keypairunpack(v_1048)) in
        {554}let v_1059: bitstring = catch-fail(symmetricstateunpack(v_1057)) in
        {555}let v_1060: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1059),(if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {556}let v_1061: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1059),(if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {557}let v_1062: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1059),(if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {558}let v_1063: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),5-proj-7-tuple(v_1045)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1059))) then (if not-caught-fail(v_1060) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (v_1060,v_1061,v_1062) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1064: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),5-proj-7-tuple(v_1045)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-3-tuple(v_1063))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1063)) then cipherstatepack(2-proj-3-tuple(v_1063),minnonce) else fail-any),1-proj-3-tuple(v_1063),3-proj-3-tuple(v_1059)) else fail-any) else fail-any) else fail-any)) in
        {560}let v_1065: bitstring = catch-fail(keypairunpack(v_1048)) in
        {561}let v_1066: bitstring = catch-fail(symmetricstateunpack(v_1064)) in
        {562}let v_1067: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1066),(if success?(4-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-2-tuple(v_1065))))) then dhexp(2-proj-2-tuple(v_1065),4-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {563}let v_1068: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1066),(if success?(4-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-2-tuple(v_1065))))) then dhexp(2-proj-2-tuple(v_1065),4-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {564}let v_1069: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1066),(if success?(4-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-2-tuple(v_1065))))) then dhexp(2-proj-2-tuple(v_1065),4-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {565}let v_1070: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-2-tuple(v_1065))))) then dhexp(2-proj-2-tuple(v_1065),4-proj-7-tuple(v_1045)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1066))) then (if not-caught-fail(v_1067) then (if not-caught-fail(v_1068) then (if not-caught-fail(v_1069) then (v_1067,v_1068,v_1069) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1071: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-2-tuple(v_1065))))) then dhexp(2-proj-2-tuple(v_1065),4-proj-7-tuple(v_1045)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1070)) then cipherstatepack(2-proj-3-tuple(v_1070),minnonce) else fail-any),1-proj-3-tuple(v_1070),3-proj-3-tuple(v_1066)) else fail-any) else fail-any) else fail-any)) in
        {567}let v_1072: bitstring = catch-fail(symmetricstateunpack(v_1071)) in
        {568}let v_1073: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1072))) in
        {569}let v_1074: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1073),2-proj-2-tuple(v_1073),3-proj-3-tuple(v_1072),msg_b(bob,charlie,sid))) in
        {570}let v_1075: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1072))) in
        {571}let v_1076: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1073))) && success?(1-proj-3-tuple(v_1072))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then cipherstatepack(1-proj-2-tuple(v_1075),increment_nonce(2-proj-2-tuple(v_1073))) else fail-any) else fail-any)) in
        {572}let v_1077: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1072)) && success?(1-proj-3-tuple(v_1072))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then (if not-caught-fail(v_1074) then (if not-caught-fail(v_1076) then (v_1076,v_1074) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {573}let v_1078: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1077),2-proj-3-tuple(v_1072),3-proj-3-tuple(v_1072)))) in
        {574}let v_1079: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1077)) && success?(symmetricstatepack(1-proj-2-tuple(v_1077),2-proj-3-tuple(v_1072),3-proj-3-tuple(v_1072)))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-3-tuple(v_1078))))) then symmetricstatepack(1-proj-3-tuple(v_1078),2-proj-3-tuple(v_1078),hash(3-proj-3-tuple(v_1078),2-proj-2-tuple(v_1077))) else fail-any) else fail-any)) in
        {575}let v_1080: bitstring = catch-fail((if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-2-tuple(v_1077))))) then (if not-caught-fail(v_1079) then (v_1079,2-proj-2-tuple(v_1077)) else fail-any) else fail-any) else fail-any)) in
        {576}let v_1081: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1080),2-proj-7-tuple(v_1045),v_1048,4-proj-7-tuple(v_1045),5-proj-7-tuple(v_1045),6-proj-7-tuple(v_1045),7-proj-7-tuple(v_1045))) in
        {577}let v_1082: bitstring = catch-fail(concat3(v_1049,2-proj-3-tuple(v_1046),2-proj-2-tuple(v_1080))) in
        {578}let v_1083: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1080))) in
        {579}let v_1084: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1083),zero)) in
        {580}let v_1085: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1083),zero)) in
        {581}let v_1086: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1083),zero)) in
        {582}let v_1087: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1083)) then (if not-caught-fail(v_1084) then (if not-caught-fail(v_1085) then (if not-caught-fail(v_1086) then (v_1084,v_1085,v_1086) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {583}let v_1088: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1087)) then cipherstatepack(1-proj-3-tuple(v_1087),minnonce) else fail-any)) in
        {584}let v_1089: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1087)) then cipherstatepack(2-proj-3-tuple(v_1087),minnonce) else fail-any)) in
        {585}let v_1090: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1080)) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-3-tuple(v_1087))))) then (if not-caught-fail(v_1088) then (if not-caught-fail(v_1089) then (1-proj-2-tuple(v_1080),v_1088,v_1089) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {586}let (hs_1091: handshakestate,message_b_1092: bitstring,cs1_1093: cipherstate,cs2_1094: cipherstate) = (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-7-tuple(v_1045))))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then (if not-caught-fail(v_1048) then (if not-caught-fail(v_1049) then (if not-caught-fail(v_1051) then (if not-caught-fail(v_1057) then (if not-caught-fail(v_1064) then (if not-caught-fail(v_1071) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-2-tuple(v_1080))))) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1082) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then (v_1081,v_1082,2-proj-3-tuple(v_1090),3-proj-3-tuple(v_1090)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {587}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {588}insert statestore(bob,charlie,sid,statepack_c(hs_1091,cs1_1093,cs2_1094));
        {589}out(pub, message_b_1092)
    ) | (
        {591}!
        {611}get statestore(=bob,=charlie,=sid,statepack_c(hs_1095: handshakestate,cs1_1096: cipherstate,cs2_1097: cipherstate)) in
        {592}let hs_1098: handshakestate = handshakestatesetcs(hs_1095,cs1_1096) in
        {593}in(pub, message_c_1099: bitstring);
        {594}let v_1100: bitstring = catch-fail(handshakestateunpack(hs_1098)) in
        {595}let v_1101: bitstring = catch-fail(deconcat3(message_c_1099)) in
        {596}let v_1102: bool = catch-fail(true) in
        {597}let v_1103: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1100))) in
        {598}let v_1104: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1103))) in
        {599}let v_1105: aead = catch-fail(decrypt(1-proj-2-tuple(v_1104),2-proj-2-tuple(v_1104),3-proj-3-tuple(v_1103),3-proj-3-tuple(v_1101))) in
        {600}let v_1106: bitstring = catch-fail(aeadunpack(v_1105)) in
        {601}let v_1107: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1103))) in
        {602}let v_1108: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1104))) && success?(1-proj-3-tuple(v_1103))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-2-tuple(v_1107))))) then cipherstatepack(1-proj-2-tuple(v_1107),increment_nonce(2-proj-2-tuple(v_1104))) else fail-any) else fail-any)) in
        {603}let v_1109: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1101)) && (success?(3-proj-3-tuple(v_1103)) && success?(1-proj-3-tuple(v_1103)))) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-2-tuple(v_1104))))) then (if not-caught-fail(v_1105) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then (if not-caught-fail(v_1108) then (v_1108,3-proj-3-tuple(v_1106),1-proj-3-tuple(v_1106)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {604}let v_1110: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1109),2-proj-3-tuple(v_1103),3-proj-3-tuple(v_1103)))) in
        {605}let v_1111: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1101)) && success?(symmetricstatepack(1-proj-3-tuple(v_1109),2-proj-3-tuple(v_1103),3-proj-3-tuple(v_1103)))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then symmetricstatepack(1-proj-3-tuple(v_1110),2-proj-3-tuple(v_1110),hash(3-proj-3-tuple(v_1110),3-proj-3-tuple(v_1101))) else fail-any) else fail-any)) in
        {606}let v_1112: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1101)) && success?(1-proj-7-tuple(v_1100))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then (if not-caught-fail(v_1111) then (v_1111,2-proj-3-tuple(v_1109),3-proj-3-tuple(v_1109)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {607}let v_1113: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1112),2-proj-7-tuple(v_1100),3-proj-7-tuple(v_1100),4-proj-7-tuple(v_1100),5-proj-7-tuple(v_1100),6-proj-7-tuple(v_1100),7-proj-7-tuple(v_1100))) in
        {608}let (hs_1114: handshakestate,plaintext_c_1115: bitstring,valid_1116: bool) = (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-7-tuple(v_1100))))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then (if not-caught-fail(v_1102) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if (v_1102 && 3-proj-3-tuple(v_1112)) then (if not-caught-fail(v_1113) then (v_1113,2-proj-3-tuple(v_1112),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {609}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1115);
        {610}insert statestore(bob,charlie,sid,statepack_d(hs_1114,handshakestategetcs(hs_1114),cs2_1097))
    ) | (
        {612}!
        {630}get statestore(=bob,=charlie,=sid,statepack_d(hs_1117: handshakestate,cs1_1118: cipherstate,cs2_1119: cipherstate)) in
        {613}let hs_1120: handshakestate = handshakestatesetcs(hs_1117,cs2_1119) in
        {614}let v_1121: bitstring = catch-fail(handshakestateunpack(hs_1120)) in
        {615}let v_1122: bitstring = catch-fail((empty,empty,empty)) in
        {616}let v_1123: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1121))) in
        {617}let v_1124: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {618}let v_1125: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1124),2-proj-2-tuple(v_1124),3-proj-3-tuple(v_1123),msg_d(bob,charlie,sid))) in
        {619}let v_1126: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {620}let v_1127: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1124))) && success?(1-proj-3-tuple(v_1123))) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-2-tuple(v_1126))))) then cipherstatepack(1-proj-2-tuple(v_1126),increment_nonce(2-proj-2-tuple(v_1124))) else fail-any) else fail-any)) in
        {621}let v_1128: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1123)) && success?(1-proj-3-tuple(v_1123))) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then (if not-caught-fail(v_1125) then (if not-caught-fail(v_1127) then (v_1127,v_1125) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {622}let v_1129: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1128),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) in
        {623}let v_1130: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1128)) && success?(symmetricstatepack(1-proj-2-tuple(v_1128),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) then (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-3-tuple(v_1129))))) then symmetricstatepack(1-proj-3-tuple(v_1129),2-proj-3-tuple(v_1129),hash(3-proj-3-tuple(v_1129),2-proj-2-tuple(v_1128))) else fail-any) else fail-any)) in
        {624}let v_1131: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1121)) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (if (not-caught-fail(v_1128) && success?(is-true(success?(1-proj-2-tuple(v_1128))))) then (if not-caught-fail(v_1130) then (v_1130,2-proj-2-tuple(v_1128)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {625}let v_1132: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1131),2-proj-7-tuple(v_1121),3-proj-7-tuple(v_1121),4-proj-7-tuple(v_1121),5-proj-7-tuple(v_1121),6-proj-7-tuple(v_1121),7-proj-7-tuple(v_1121))) in
        {626}let v_1133: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1122),2-proj-3-tuple(v_1122),2-proj-2-tuple(v_1131))) in
        {627}let (hs_1134: handshakestate,message_d_1135: bitstring) = (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-7-tuple(v_1121))))) then (if (not-caught-fail(v_1122) && success?(is-true(success?(1-proj-3-tuple(v_1122))))) then (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-2-tuple(v_1131))))) then (if not-caught-fail(v_1132) then (if not-caught-fail(v_1133) then (v_1132,v_1133) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {628}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {629}out(pub, message_d_1135)
    ) | (
        {631}event LeakPsk(phase0,charlie,bob);
        {632}out(pub, key_psk(charlie,bob))
    ) | (
        {633}phase 1;
        {634}event LeakPsk(phase1,charlie,bob);
        {635}out(pub, key_psk(charlie,bob))
    ) | (
        0
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 138 rules in the queue.
400 rules inserted. The rule base contains 381 rules. 54 rules in the queue.
600 rules inserted. The rule base contains 548 rules. 61 rules in the queue.
800 rules inserted. The rule base contains 672 rules. 70 rules in the queue.
1000 rules inserted. The rule base contains 798 rules. 102 rules in the queue.
1200 rules inserted. The rule base contains 896 rules. 108 rules in the queue.
1400 rules inserted. The rule base contains 1047 rules. 98 rules in the queue.
1600 rules inserted. The rule base contains 1193 rules. 121 rules in the queue.
1800 rules inserted. The rule base contains 1348 rules. 147 rules in the queue.
2000 rules inserted. The rule base contains 1487 rules. 169 rules in the queue.
2200 rules inserted. The rule base contains 1619 rules. 155 rules in the queue.
2400 rules inserted. The rule base contains 1732 rules. 153 rules in the queue.
2600 rules inserted. The rule base contains 1826 rules. 156 rules in the queue.
2800 rules inserted. The rule base contains 1959 rules. 124 rules in the queue.
3000 rules inserted. The rule base contains 2097 rules. 96 rules in the queue.
3200 rules inserted. The rule base contains 2179 rules. 95 rules in the queue.
3400 rules inserted. The rule base contains 2276 rules. 50 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096371]),msg_a(alice,bob,sid[!1 = @sid_768096371]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_768096372]),msg_a(alice,bob,sid[!1 = @sid_768096371])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096380]),msg_a(alice,bob,sid[!1 = @sid_768096380]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_768096381]),msg_a(alice,bob,sid[!1 = @sid_768096380])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096390]),msg_a(alice,bob,sid[!1 = @sid_768096390]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_768096391]),msg_a(alice,bob,sid[!1 = @sid_768096390])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096400]),msg_a(alice,bob,sid[!1 = @sid_768096400]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_768096401]),msg_a(alice,bob,sid[!1 = @sid_768096400])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096409]),msg_a(alice,bob,sid[!1 = @sid_768096409]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_768096410]),msg_a(alice,bob,sid[!1 = @sid_768096409])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096417]),msg_a(alice,bob,sid[!1 = @sid_768096417]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_768096417]))
Abbreviations:
sid_768096503 = sid[!1 = @sid_768096479]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_768096503,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_768096503,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_768096503,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_768096503),msg_a(alice,bob,sid_768096503)) may be executed at {60}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503))) may be sent on channel pub at output {62}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503)).
attacker(encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503))).

6. By 5, the attacker may know encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503)).
So the attacker may know encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503)) in phase 1.
attacker_p1(encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503))).

7. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

8. The event LeakPsk(phase1,alice,bob) may be executed at {158}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {159}.
mess_p1(pub,key_psk(alice,bob)).

9. By 7, the attacker may have the channel pub in phase 1.
By 8, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

10. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)))).

15. By 14, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)))).

16. By 15, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))).

17. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))).

18. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))).
By 17, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g))))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 16, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. By 15, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash3 the attacker may obtain hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503))).

26. By 25, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096503),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096503)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_768096503) in phase 1.
attacker_p1(msg_a(alice,bob,sid_768096503)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096505]),msg_a(alice,bob,sid[!1 = @sid_768096505]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_768096505]))
goal reachable: begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096508]),msg_a(alice,bob,sid[!1 = @sid_768096508]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_768096508]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096514]),msg_a(alice,bob,sid[!1 = @sid_768096514]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_768096514]))
Abbreviations:
sid_768096601 = sid[!1 = @sid_768096577]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_768096601,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_768096601,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_768096601,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_768096601),msg_a(alice,bob,sid_768096601)) may be executed at {60}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601))) may be sent on channel pub at output {62}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601)).
attacker(encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601))).

6. By 5, the attacker may know encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601)).
So the attacker may know encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601)) in phase 1.
attacker_p1(encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601))).

7. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

8. The event LeakPsk(phase1,alice,bob) may be executed at {158}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {159}.
mess_p1(pub,key_psk(alice,bob)).

9. By 7, the attacker may have the channel pub in phase 1.
By 8, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

10. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)))).

15. By 14, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)))).

16. By 15, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))).

17. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))).

18. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))).
By 17, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g))))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 16, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. By 15, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash3 the attacker may obtain hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601))).

26. By 25, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096601),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096601)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_768096601) in phase 1.
attacker_p1(msg_a(alice,bob,sid_768096601)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096603]),msg_a(alice,bob,sid[!1 = @sid_768096603]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_768096603]))
Abbreviations:
sid_768096689 = sid[!1 = @sid_768096665]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_768096689,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_768096689,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_768096689,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_768096689),msg_a(alice,bob,sid_768096689)) may be executed at {60}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689))) may be sent on channel pub at output {62}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689)).
attacker(encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689))).

6. By 5, the attacker may know encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689)).
So the attacker may know encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689)) in phase 1.
attacker_p1(encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689))).

7. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

8. The event LeakPsk(phase1,alice,bob) may be executed at {158}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {159}.
mess_p1(pub,key_psk(alice,bob)).

9. By 7, the attacker may have the channel pub in phase 1.
By 8, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

10. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)))).

15. By 14, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)))).

16. By 15, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))).

17. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))).

18. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))).
By 17, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g))))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 16, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. By 15, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash3 the attacker may obtain hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689))).

26. By 25, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768096689),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768096689)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_768096689) in phase 1.
attacker_p1(msg_a(alice,bob,sid_768096689)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096692]),msg_b(bob,alice,sid[!1 = @sid_768096692]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096693]),msg_a(alice,bob,sid[!1 = @sid_768096693]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_768096693]),msg_b(bob,alice,sid[!1 = @sid_768096692])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096701]),msg_b(bob,alice,sid[!1 = @sid_768096701]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096702]),msg_a(alice,bob,sid[!1 = @sid_768096702]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_768096702]),msg_b(bob,alice,sid[!1 = @sid_768096701])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096711]),msg_b(bob,alice,sid[!1 = @sid_768096711]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096712]),msg_a(alice,bob,sid[!1 = @sid_768096712]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_768096712]),msg_b(bob,alice,sid[!1 = @sid_768096711])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096721]),msg_b(bob,alice,sid[!1 = @sid_768096721]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096722]),msg_a(alice,bob,sid[!1 = @sid_768096722]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_768096722]),msg_b(bob,alice,sid[!1 = @sid_768096721])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096730]),msg_b(bob,alice,sid[!1 = @sid_768096730]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096731]),msg_a(alice,bob,sid[!1 = @sid_768096731]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_768096731]),msg_b(bob,alice,sid[!1 = @sid_768096730])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096751]),msg_c(alice,bob,sid[!1 = @sid_768096751]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096752]),msg_b(bob,alice,sid[!1 = @sid_768096752]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096751]),msg_a(alice,bob,sid[!1 = @sid_768096751]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_768096752]),msg_c(alice,bob,sid[!1 = @sid_768096751])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096760]),msg_c(alice,bob,sid[!1 = @sid_768096760]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096761]),msg_b(bob,alice,sid[!1 = @sid_768096761]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096760]),msg_a(alice,bob,sid[!1 = @sid_768096760]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_768096761]),msg_c(alice,bob,sid[!1 = @sid_768096760])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096770]),msg_c(alice,bob,sid[!1 = @sid_768096770]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096771]),msg_b(bob,alice,sid[!1 = @sid_768096771]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096770]),msg_a(alice,bob,sid[!1 = @sid_768096770]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_768096771]),msg_c(alice,bob,sid[!1 = @sid_768096770])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096780]),msg_c(alice,bob,sid[!1 = @sid_768096780]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096781]),msg_b(bob,alice,sid[!1 = @sid_768096781]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096780]),msg_a(alice,bob,sid[!1 = @sid_768096780]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_768096781]),msg_c(alice,bob,sid[!1 = @sid_768096780])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096789]),msg_c(alice,bob,sid[!1 = @sid_768096789]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096790]),msg_b(bob,alice,sid[!1 = @sid_768096790]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096789]),msg_a(alice,bob,sid[!1 = @sid_768096789]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_768096790]),msg_c(alice,bob,sid[!1 = @sid_768096789])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_768096811]),msg_d(bob,alice,sid[!1 = @sid_768096811]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096812]),msg_c(alice,bob,sid[!1 = @sid_768096812]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096811]),msg_b(bob,alice,sid[!1 = @sid_768096811]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096812]),msg_a(alice,bob,sid[!1 = @sid_768096812]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_768096812]),msg_d(bob,alice,sid[!1 = @sid_768096811])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_768096820]),msg_d(bob,alice,sid[!1 = @sid_768096820]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096821]),msg_c(alice,bob,sid[!1 = @sid_768096821]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096820]),msg_b(bob,alice,sid[!1 = @sid_768096820]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096821]),msg_a(alice,bob,sid[!1 = @sid_768096821]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_768096821]),msg_d(bob,alice,sid[!1 = @sid_768096820])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_768096830]),msg_d(bob,alice,sid[!1 = @sid_768096830]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096831]),msg_c(alice,bob,sid[!1 = @sid_768096831]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096830]),msg_b(bob,alice,sid[!1 = @sid_768096830]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096831]),msg_a(alice,bob,sid[!1 = @sid_768096831]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_768096831]),msg_d(bob,alice,sid[!1 = @sid_768096830])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_768096840]),msg_d(bob,alice,sid[!1 = @sid_768096840]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096841]),msg_c(alice,bob,sid[!1 = @sid_768096841]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096840]),msg_b(bob,alice,sid[!1 = @sid_768096840]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096841]),msg_a(alice,bob,sid[!1 = @sid_768096841]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_768096841]),msg_d(bob,alice,sid[!1 = @sid_768096840])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_768096849]),msg_d(bob,alice,sid[!1 = @sid_768096849]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096850]),msg_c(alice,bob,sid[!1 = @sid_768096850]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096849]),msg_b(bob,alice,sid[!1 = @sid_768096849]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096850]),msg_a(alice,bob,sid[!1 = @sid_768096850]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_768096850]),msg_d(bob,alice,sid[!1 = @sid_768096849])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_768096868]),msg_d(bob,alice,sid[!1 = @sid_768096868]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_768096869]),msg_c(alice,bob,sid[!1 = @sid_768096869]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_768096868]),msg_b(bob,alice,sid[!1 = @sid_768096868]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_768096869]),msg_a(alice,bob,sid[!1 = @sid_768096869]))) -> end(RecvEnd(true))
Abbreviations:
sid_768097102 = sid[!1 = @sid_768097091]
sid_768097103 = sid[!1 = @sid_768097046]

1. The entry statestore(alice,bob,sid_768097102,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_768097102,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_768097102,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_768097102),msg_a(alice,bob,sid_768097102)) may be executed at {60}.
So the entry statestore(alice,bob,sid_768097102,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {61}.
table(statestore(alice,bob,sid_768097102,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_768097103,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {336}.
table(statestore(bob,alice,sid_768097103,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_768097102,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {63}.
The event SendMsg(alice,bob,stagepack_a(sid_768097102),msg_a(alice,bob,sid_768097102)) may be executed at {60}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))) may be sent on channel pub at output {62}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102)))).

5. The entry statestore(bob,alice,sid_768097103,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {384}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))) that may be sent on channel pub by 4 may be received at input {337}.
We have validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_768097103,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {383}.
table(statestore(bob,alice,sid_768097103,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_768097103,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {435}.
The event SendMsg(bob,alice,stagepack_b(sid_768097103),msg_b(bob,alice,sid_768097103)) may be executed at {432}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))) may be sent on channel pub at output {434}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103)))).

7. The entry statestore(alice,bob,sid_768097102,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {113}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))) that may be sent on channel pub by 6 may be received at input {64}.
So the entry statestore(alice,bob,sid_768097102,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce))) may be inserted in a table at insert {112}.
table(statestore(alice,bob,sid_768097102,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_768097102,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce))) that may be in a table by 7 may be read at get {133}.
The event SendMsg(alice,bob,stagepack_c(sid_768097102),msg_c(alice,bob,sid_768097102)) may be executed at {130}.
So the entry statestore(alice,bob,sid_768097102,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce))) may be inserted in a table at insert {131}.
table(statestore(alice,bob,sid_768097102,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_768097103,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {435}.
The event SendMsg(bob,alice,stagepack_b(sid_768097103),msg_b(bob,alice,sid_768097103)) may be executed at {432}.
So the entry statestore(bob,alice,sid_768097103,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_e(bob,alice,sid_768097103)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce))) may be inserted in a table at insert {433}.
table(statestore(bob,alice,sid_768097103,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_e(bob,alice,sid_768097103)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_768097102,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce))) that may be in a table by 7 may be read at get {133}.
The event SendMsg(alice,bob,stagepack_c(sid_768097102),msg_c(alice,bob,sid_768097102)) may be executed at {130}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102))) may be sent on channel pub at output {132}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102)))).

11. The entry statestore(bob,alice,sid_768097103,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_e(bob,alice,sid_768097103)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce))) that may be in a table by 9 may be read at get {456}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102))) that may be sent on channel pub by 10 may be received at input {438}.
So the entry statestore(bob,alice,sid_768097103,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_e(bob,alice,sid_768097103)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce))) may be inserted in a table at insert {455}.
table(statestore(bob,alice,sid_768097103,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_e(bob,alice,sid_768097103)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_768097103,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_e(bob,alice,sid_768097103)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce))) that may be in a table by 11 may be read at get {475}.
The event SendMsg(bob,alice,stagepack_d(sid_768097103),msg_d(bob,alice,sid_768097103)) may be executed at {473}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102))),msg_d(bob,alice,sid_768097103))) may be sent on channel pub at output {474}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102))),msg_d(bob,alice,sid_768097103)))).

13. The entry statestore(alice,bob,sid_768097102,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_768097102),g)),key_e(alice,bob,sid_768097102)),empty,validkey(dhexp_real(key_e(bob,alice,sid_768097103),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce))) that may be in a table by 8 may be read at get {154}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_768097103),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_e(alice,bob,sid_768097102),g))),dhexp_real(key_e(bob,alice,sid_768097103),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_768097102),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_768097102))),validkey(dhexp_real(key_e(bob,alice,sid_768097103),g))),msg_b(bob,alice,sid_768097103))),msg_c(alice,bob,sid_768097102))),msg_d(bob,alice,sid_768097103))) that may be sent on channel pub by 12 may be received at input {136}.
So event RecvEnd(true) may be executed at {153}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
