File "NK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "NK1.noise.passive.pv", line 270, characters 7-8:
Warning: identifier ck rebound.
File "NK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NK1.noise.passive.pv", line 271, character 36:
Warning: identifier h rebound.
File "NK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "NK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "NK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 312, character 6:
Warning: identifier e rebound.
File "NK1.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ne rebound.
File "NK1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 324, character 6:
Warning: identifier e rebound.
File "NK1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ne rebound.
File "NK1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier re rebound.
File "NK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 345, characters 7-8:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 353, characters 6-7:
Warning: identifier re rebound.
File "NK1.noise.passive.pv", line 354, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 455, characters 8-9:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 353, characters 6-7:
Warning: identifier re rebound.
File "NK1.noise.passive.pv", line 354, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "NK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "NK1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "NK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 447, characters 8-9:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 312, character 6:
Warning: identifier e rebound.
File "NK1.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ne rebound.
File "NK1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "NK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 490, characters 8-9:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 324, character 6:
Warning: identifier e rebound.
File "NK1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ne rebound.
File "NK1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "NK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "NK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "NK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 483, characters 8-9:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier re rebound.
File "NK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 345, characters 7-8:
Warning: identifier hs rebound.
File "NK1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "NK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "NK1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_372: keypair = keypairpack(empty,empty) in
    (
        {3}let e_373: keypair = keypairpack(empty,empty) in
        {4}let v_374: key = catch-fail(dhexp(key_s(bob),g)) in
        {5}let rs_375: key = getpublickey((if not-caught-fail(v_374) then keypairpack(v_374,key_s(bob)) else fail-any)) in
        {6}let re_376: key = empty in
        {7}let v_377: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_378: key = catch-fail(v_377) in
        {9}let v_379: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_380: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_377) then (if not-caught-fail(v_378) then (if not-caught-fail(v_379) then symmetricstatepack(v_379,v_378,v_377) else fail-any) else fail-any) else fail-any))) in
        {11}let v_381: symmetricstate = catch-fail((if success?((if not-caught-fail(v_377) then (if not-caught-fail(v_378) then (if not-caught-fail(v_379) then symmetricstatepack(v_379,v_378,v_377) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_380) && success?(is-true(success?(1-proj-3-tuple(v_380))))) then symmetricstatepack(1-proj-3-tuple(v_380),2-proj-3-tuple(v_380),hash(3-proj-3-tuple(v_380),empty)) else fail-any) else fail-any)) in
        {12}let v_382: bitstring = catch-fail(symmetricstateunpack(v_381)) in
        {13}let v_383: symmetricstate = catch-fail((if (not-caught-fail(v_382) && success?(is-true(success?(1-proj-3-tuple(v_382))))) then symmetricstatepack(1-proj-3-tuple(v_382),2-proj-3-tuple(v_382),hash(3-proj-3-tuple(v_382),rs_375)) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_381) then (if not-caught-fail(v_383) then handshakestatepack(v_383,s_372,e_373,rs_375,re_376,empty,true) else fail-any) else fail-any) in
        {15}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {38}get statestore(=alice,=bob,statepack_a(hs_384: handshakestate)) in
        {16}let v_385: bitstring = catch-fail(handshakestateunpack(hs_384)) in
        {17}let v_386: bitstring = catch-fail((empty,empty,empty)) in
        {18}let v_387: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {19}let v_388: keypair = catch-fail((if not-caught-fail(v_387) then keypairpack(v_387,key_e(alice,bob)) else fail-any)) in
        {20}let v_389: bitstring = catch-fail(getpublickey(v_388)) in
        {21}let v_390: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_385))) in
        {22}let v_391: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_385)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-3-tuple(v_390))))) then symmetricstatepack(1-proj-3-tuple(v_390),2-proj-3-tuple(v_390),hash(3-proj-3-tuple(v_390),v_389)) else fail-any) else fail-any)) in
        {23}let v_392: bitstring = catch-fail(symmetricstateunpack(v_391)) in
        {24}let v_393: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_392))) in
        {25}let v_394: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_393),2-proj-2-tuple(v_393),3-proj-3-tuple(v_392),msg_a(alice,bob))) in
        {26}let v_395: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_392))) in
        {27}let v_396: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_393))) && success?(1-proj-3-tuple(v_392))) then (if (not-caught-fail(v_395) && success?(is-true(success?(1-proj-2-tuple(v_395))))) then cipherstatepack(1-proj-2-tuple(v_395),increment_nonce(2-proj-2-tuple(v_393))) else fail-any) else fail-any)) in
        {28}let v_397: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_392)) && success?(1-proj-3-tuple(v_392))) then (if (not-caught-fail(v_393) && success?(is-true(success?(1-proj-2-tuple(v_393))))) then (if not-caught-fail(v_394) then (if not-caught-fail(v_396) then (v_396,v_394) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_398: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_397),2-proj-3-tuple(v_392),3-proj-3-tuple(v_392)))) in
        {30}let v_399: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_397)) && success?(symmetricstatepack(1-proj-2-tuple(v_397),2-proj-3-tuple(v_392),3-proj-3-tuple(v_392)))) then (if (not-caught-fail(v_398) && success?(is-true(success?(1-proj-3-tuple(v_398))))) then symmetricstatepack(1-proj-3-tuple(v_398),2-proj-3-tuple(v_398),hash(3-proj-3-tuple(v_398),2-proj-2-tuple(v_397))) else fail-any) else fail-any)) in
        {31}let v_400: bitstring = catch-fail((if (not-caught-fail(v_392) && success?(is-true(success?(1-proj-3-tuple(v_392))))) then (if (not-caught-fail(v_397) && success?(is-true(success?(1-proj-2-tuple(v_397))))) then (if not-caught-fail(v_399) then (v_399,2-proj-2-tuple(v_397)) else fail-any) else fail-any) else fail-any)) in
        {32}let v_401: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_400),2-proj-7-tuple(v_385),v_388,4-proj-7-tuple(v_385),5-proj-7-tuple(v_385),6-proj-7-tuple(v_385),7-proj-7-tuple(v_385))) in
        {33}let v_402: bitstring = catch-fail(concat3(v_389,2-proj-3-tuple(v_386),2-proj-2-tuple(v_400))) in
        {34}let (hs_403: handshakestate,re_404: key,message_a: bitstring) = (if (not-caught-fail(v_385) && success?(is-true(success?(1-proj-7-tuple(v_385))))) then (if (not-caught-fail(v_386) && success?(is-true(success?(1-proj-3-tuple(v_386))))) then (if not-caught-fail(v_388) then (if not-caught-fail(v_389) then (if not-caught-fail(v_391) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-2-tuple(v_400))))) then (if not-caught-fail(v_401) then (if not-caught-fail(v_402) then (v_401,5-proj-7-tuple(v_385),v_402) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {35}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {36}insert statestore(alice,bob,statepack_b(hs_403));
        {37}out(pub, message_a)
    ) | (
        {83}get statestore(=alice,=bob,statepack_b(hs_405: handshakestate)) in
        {39}in(pub, message_b: bitstring);
        {40}let v_406: bitstring = catch-fail(handshakestateunpack(hs_405)) in
        {41}let v_407: bitstring = catch-fail(deconcat3(message_b)) in
        {42}let v_408: bool = catch-fail(true) in
        {43}let v_409: key = catch-fail(1-proj-3-tuple(v_407)) in
        {44}let v_410: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_406))) in
        {45}let v_411: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_406)) then (if (not-caught-fail(v_410) && success?(is-true(success?(1-proj-3-tuple(v_410))))) then symmetricstatepack(1-proj-3-tuple(v_410),2-proj-3-tuple(v_410),hash(3-proj-3-tuple(v_410),v_409)) else fail-any) else fail-any)) in
        {46}let v_412: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_406))) in
        {47}let v_413: bitstring = catch-fail(symmetricstateunpack(v_411)) in
        {48}let v_414: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_413),(if success?(3-proj-7-tuple(v_406)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),v_409) else fail-any) else fail-any))) in
        {49}let v_415: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_413),(if success?(3-proj-7-tuple(v_406)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),v_409) else fail-any) else fail-any))) in
        {50}let v_416: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_413),(if success?(3-proj-7-tuple(v_406)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),v_409) else fail-any) else fail-any))) in
        {51}let v_417: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_406)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),v_409) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_413))) then (if not-caught-fail(v_414) then (if not-caught-fail(v_415) then (if not-caught-fail(v_416) then (v_414,v_415,v_416) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {52}let v_418: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_406)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),v_409) else fail-any) else fail-any)) then (if (not-caught-fail(v_413) && success?(is-true(success?(1-proj-3-tuple(v_413))))) then (if (not-caught-fail(v_417) && success?(is-true(success?(1-proj-3-tuple(v_417))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_417)) then cipherstatepack(2-proj-3-tuple(v_417),minnonce) else fail-any),1-proj-3-tuple(v_417),3-proj-3-tuple(v_413)) else fail-any) else fail-any) else fail-any)) in
        {53}let v_419: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_406))) in
        {54}let v_420: bitstring = catch-fail(symmetricstateunpack(v_418)) in
        {55}let v_421: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_420),(if (success?(4-proj-7-tuple(v_406)) && success?(3-proj-7-tuple(v_406))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_406)) else fail-any) else fail-any))) in
        {56}let v_422: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_420),(if (success?(4-proj-7-tuple(v_406)) && success?(3-proj-7-tuple(v_406))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_406)) else fail-any) else fail-any))) in
        {57}let v_423: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_420),(if (success?(4-proj-7-tuple(v_406)) && success?(3-proj-7-tuple(v_406))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_406)) else fail-any) else fail-any))) in
        {58}let v_424: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_406)) && success?(3-proj-7-tuple(v_406))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_406)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_420))) then (if not-caught-fail(v_421) then (if not-caught-fail(v_422) then (if not-caught-fail(v_423) then (v_421,v_422,v_423) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {59}let v_425: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_406)) && success?(3-proj-7-tuple(v_406))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_406)) else fail-any) else fail-any)) then (if (not-caught-fail(v_420) && success?(is-true(success?(1-proj-3-tuple(v_420))))) then (if (not-caught-fail(v_424) && success?(is-true(success?(1-proj-3-tuple(v_424))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_424)) then cipherstatepack(2-proj-3-tuple(v_424),minnonce) else fail-any),1-proj-3-tuple(v_424),3-proj-3-tuple(v_420)) else fail-any) else fail-any) else fail-any)) in
        {60}let v_426: bitstring = catch-fail(symmetricstateunpack(v_425)) in
        {61}let v_427: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_426))) in
        {62}let v_428: aead = catch-fail(decrypt(1-proj-2-tuple(v_427),2-proj-2-tuple(v_427),3-proj-3-tuple(v_426),3-proj-3-tuple(v_407))) in
        {63}let v_429: bitstring = catch-fail(aeadunpack(v_428)) in
        {64}let v_430: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_426))) in
        {65}let v_431: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_427))) && success?(1-proj-3-tuple(v_426))) then (if (not-caught-fail(v_430) && success?(is-true(success?(1-proj-2-tuple(v_430))))) then cipherstatepack(1-proj-2-tuple(v_430),increment_nonce(2-proj-2-tuple(v_427))) else fail-any) else fail-any)) in
        {66}let v_432: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_407)) && (success?(3-proj-3-tuple(v_426)) && success?(1-proj-3-tuple(v_426)))) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-2-tuple(v_427))))) then (if not-caught-fail(v_428) then (if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-3-tuple(v_429))))) then (if not-caught-fail(v_431) then (v_431,3-proj-3-tuple(v_429),1-proj-3-tuple(v_429)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {67}let v_433: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_432),2-proj-3-tuple(v_426),3-proj-3-tuple(v_426)))) in
        {68}let v_434: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_407)) && success?(symmetricstatepack(1-proj-3-tuple(v_432),2-proj-3-tuple(v_426),3-proj-3-tuple(v_426)))) then (if (not-caught-fail(v_433) && success?(is-true(success?(1-proj-3-tuple(v_433))))) then symmetricstatepack(1-proj-3-tuple(v_433),2-proj-3-tuple(v_433),hash(3-proj-3-tuple(v_433),3-proj-3-tuple(v_407))) else fail-any) else fail-any)) in
        {69}let v_435: bitstring = catch-fail((if success?(3-proj-3-tuple(v_407)) then (if (not-caught-fail(v_426) && success?(is-true(success?(1-proj-3-tuple(v_426))))) then (if (not-caught-fail(v_432) && success?(is-true(success?(1-proj-3-tuple(v_432))))) then (if not-caught-fail(v_434) then (v_434,2-proj-3-tuple(v_432),3-proj-3-tuple(v_432)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_436: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_435),2-proj-7-tuple(v_406),3-proj-7-tuple(v_406),4-proj-7-tuple(v_406),v_409,6-proj-7-tuple(v_406),7-proj-7-tuple(v_406))) in
        {71}let v_437: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_435))) in
        {72}let v_438: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_437),zero)) in
        {73}let v_439: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_437),zero)) in
        {74}let v_440: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_437),zero)) in
        {75}let v_441: bitstring = catch-fail((if success?(2-proj-3-tuple(v_437)) then (if not-caught-fail(v_438) then (if not-caught-fail(v_439) then (if not-caught-fail(v_440) then (v_438,v_439,v_440) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_442: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_441)) then cipherstatepack(1-proj-3-tuple(v_441),minnonce) else fail-any)) in
        {77}let v_443: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_441)) then cipherstatepack(2-proj-3-tuple(v_441),minnonce) else fail-any)) in
        {78}let v_444: bitstring = catch-fail((if success?(1-proj-3-tuple(v_435)) then (if (not-caught-fail(v_437) && success?(is-true(success?(1-proj-3-tuple(v_437))))) then (if (not-caught-fail(v_441) && success?(is-true(success?(1-proj-3-tuple(v_441))))) then (if not-caught-fail(v_442) then (if not-caught-fail(v_443) then (1-proj-3-tuple(v_435),v_442,v_443) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let (hs_445: handshakestate,re_446: key,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_406) && success?(is-true(success?(1-proj-7-tuple(v_406))))) then (if (not-caught-fail(v_407) && success?(is-true(success?(1-proj-3-tuple(v_407))))) then (if not-caught-fail(v_408) then (if not-caught-fail(v_409) then (if not-caught-fail(v_411) then (if not-caught-fail(v_418) then (if not-caught-fail(v_425) then (if (not-caught-fail(v_435) && success?(is-true(success?(1-proj-3-tuple(v_435))))) then (if (v_408 && 3-proj-3-tuple(v_435)) then (if not-caught-fail(v_436) then (if (not-caught-fail(v_444) && success?(is-true(success?(1-proj-3-tuple(v_444))))) then (v_436,getpublickey(3-proj-7-tuple(v_406)),2-proj-3-tuple(v_435),true,2-proj-3-tuple(v_444),3-proj-3-tuple(v_444)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {80}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {81}insert statestore(alice,bob,statepack_c(hs_445));
        {82}event RecvEnd(valid)
    ) | (
        {84}event LeakS(phase0,alice);
        {85}out(pub, key_s(alice))
    ) | (
        {86}phase 1;
        {87}event LeakS(phase1,alice);
        {88}out(pub, key_s(alice))
    )
) | (
    {89}let s_447: keypair = keypairpack(empty,empty) in
    (
        {90}let e_448: keypair = keypairpack(empty,empty) in
        {91}let v_449: key = catch-fail(dhexp(key_s(charlie),g)) in
        {92}let rs_450: key = getpublickey((if not-caught-fail(v_449) then keypairpack(v_449,key_s(charlie)) else fail-any)) in
        {93}let re_451: key = empty in
        {94}let v_452: bitstring = catch-fail(hash(somename,empty)) in
        {95}let v_453: key = catch-fail(v_452) in
        {96}let v_454: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {97}let v_455: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_452) then (if not-caught-fail(v_453) then (if not-caught-fail(v_454) then symmetricstatepack(v_454,v_453,v_452) else fail-any) else fail-any) else fail-any))) in
        {98}let v_456: symmetricstate = catch-fail((if success?((if not-caught-fail(v_452) then (if not-caught-fail(v_453) then (if not-caught-fail(v_454) then symmetricstatepack(v_454,v_453,v_452) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_455) && success?(is-true(success?(1-proj-3-tuple(v_455))))) then symmetricstatepack(1-proj-3-tuple(v_455),2-proj-3-tuple(v_455),hash(3-proj-3-tuple(v_455),empty)) else fail-any) else fail-any)) in
        {99}let v_457: bitstring = catch-fail(symmetricstateunpack(v_456)) in
        {100}let v_458: symmetricstate = catch-fail((if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-3-tuple(v_457))))) then symmetricstatepack(1-proj-3-tuple(v_457),2-proj-3-tuple(v_457),hash(3-proj-3-tuple(v_457),rs_450)) else fail-any)) in
        {101}let hs_459: handshakestate = (if not-caught-fail(v_456) then (if not-caught-fail(v_458) then handshakestatepack(v_458,s_447,e_448,rs_450,re_451,empty,true) else fail-any) else fail-any) in
        {102}insert statestore(alice,charlie,statepack_a(hs_459))
    ) | (
        {125}get statestore(=alice,=charlie,statepack_a(hs_460: handshakestate)) in
        {103}let v_461: bitstring = catch-fail(handshakestateunpack(hs_460)) in
        {104}let v_462: bitstring = catch-fail((empty,empty,empty)) in
        {105}let v_463: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {106}let v_464: keypair = catch-fail((if not-caught-fail(v_463) then keypairpack(v_463,key_e(alice,charlie)) else fail-any)) in
        {107}let v_465: bitstring = catch-fail(getpublickey(v_464)) in
        {108}let v_466: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_461))) in
        {109}let v_467: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_461)) then (if (not-caught-fail(v_466) && success?(is-true(success?(1-proj-3-tuple(v_466))))) then symmetricstatepack(1-proj-3-tuple(v_466),2-proj-3-tuple(v_466),hash(3-proj-3-tuple(v_466),v_465)) else fail-any) else fail-any)) in
        {110}let v_468: bitstring = catch-fail(symmetricstateunpack(v_467)) in
        {111}let v_469: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_468))) in
        {112}let v_470: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_469),2-proj-2-tuple(v_469),3-proj-3-tuple(v_468),msg_a(alice,charlie))) in
        {113}let v_471: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_468))) in
        {114}let v_472: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_469))) && success?(1-proj-3-tuple(v_468))) then (if (not-caught-fail(v_471) && success?(is-true(success?(1-proj-2-tuple(v_471))))) then cipherstatepack(1-proj-2-tuple(v_471),increment_nonce(2-proj-2-tuple(v_469))) else fail-any) else fail-any)) in
        {115}let v_473: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_468)) && success?(1-proj-3-tuple(v_468))) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-2-tuple(v_469))))) then (if not-caught-fail(v_470) then (if not-caught-fail(v_472) then (v_472,v_470) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_474: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_473),2-proj-3-tuple(v_468),3-proj-3-tuple(v_468)))) in
        {117}let v_475: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_473)) && success?(symmetricstatepack(1-proj-2-tuple(v_473),2-proj-3-tuple(v_468),3-proj-3-tuple(v_468)))) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-3-tuple(v_474))))) then symmetricstatepack(1-proj-3-tuple(v_474),2-proj-3-tuple(v_474),hash(3-proj-3-tuple(v_474),2-proj-2-tuple(v_473))) else fail-any) else fail-any)) in
        {118}let v_476: bitstring = catch-fail((if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-3-tuple(v_468))))) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-2-tuple(v_473))))) then (if not-caught-fail(v_475) then (v_475,2-proj-2-tuple(v_473)) else fail-any) else fail-any) else fail-any)) in
        {119}let v_477: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_476),2-proj-7-tuple(v_461),v_464,4-proj-7-tuple(v_461),5-proj-7-tuple(v_461),6-proj-7-tuple(v_461),7-proj-7-tuple(v_461))) in
        {120}let v_478: bitstring = catch-fail(concat3(v_465,2-proj-3-tuple(v_462),2-proj-2-tuple(v_476))) in
        {121}let (hs_479: handshakestate,re_480: key,message_a_481: bitstring) = (if (not-caught-fail(v_461) && success?(is-true(success?(1-proj-7-tuple(v_461))))) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-3-tuple(v_462))))) then (if not-caught-fail(v_464) then (if not-caught-fail(v_465) then (if not-caught-fail(v_467) then (if (not-caught-fail(v_476) && success?(is-true(success?(1-proj-2-tuple(v_476))))) then (if not-caught-fail(v_477) then (if not-caught-fail(v_478) then (v_477,5-proj-7-tuple(v_461),v_478) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {122}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {123}insert statestore(alice,charlie,statepack_b(hs_479));
        {124}out(pub, message_a_481)
    ) | (
        {170}get statestore(=alice,=charlie,statepack_b(hs_482: handshakestate)) in
        {126}in(pub, message_b_483: bitstring);
        {127}let v_484: bitstring = catch-fail(handshakestateunpack(hs_482)) in
        {128}let v_485: bitstring = catch-fail(deconcat3(message_b_483)) in
        {129}let v_486: bool = catch-fail(true) in
        {130}let v_487: key = catch-fail(1-proj-3-tuple(v_485)) in
        {131}let v_488: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_484))) in
        {132}let v_489: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_484)) then (if (not-caught-fail(v_488) && success?(is-true(success?(1-proj-3-tuple(v_488))))) then symmetricstatepack(1-proj-3-tuple(v_488),2-proj-3-tuple(v_488),hash(3-proj-3-tuple(v_488),v_487)) else fail-any) else fail-any)) in
        {133}let v_490: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_484))) in
        {134}let v_491: bitstring = catch-fail(symmetricstateunpack(v_489)) in
        {135}let v_492: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_491),(if success?(3-proj-7-tuple(v_484)) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-2-tuple(v_490))))) then dhexp(2-proj-2-tuple(v_490),v_487) else fail-any) else fail-any))) in
        {136}let v_493: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_491),(if success?(3-proj-7-tuple(v_484)) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-2-tuple(v_490))))) then dhexp(2-proj-2-tuple(v_490),v_487) else fail-any) else fail-any))) in
        {137}let v_494: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_491),(if success?(3-proj-7-tuple(v_484)) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-2-tuple(v_490))))) then dhexp(2-proj-2-tuple(v_490),v_487) else fail-any) else fail-any))) in
        {138}let v_495: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_484)) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-2-tuple(v_490))))) then dhexp(2-proj-2-tuple(v_490),v_487) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_491))) then (if not-caught-fail(v_492) then (if not-caught-fail(v_493) then (if not-caught-fail(v_494) then (v_492,v_493,v_494) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_496: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_484)) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-2-tuple(v_490))))) then dhexp(2-proj-2-tuple(v_490),v_487) else fail-any) else fail-any)) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-3-tuple(v_495))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_495)) then cipherstatepack(2-proj-3-tuple(v_495),minnonce) else fail-any),1-proj-3-tuple(v_495),3-proj-3-tuple(v_491)) else fail-any) else fail-any) else fail-any)) in
        {140}let v_497: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_484))) in
        {141}let v_498: bitstring = catch-fail(symmetricstateunpack(v_496)) in
        {142}let v_499: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_498),(if (success?(4-proj-7-tuple(v_484)) && success?(3-proj-7-tuple(v_484))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then dhexp(2-proj-2-tuple(v_497),4-proj-7-tuple(v_484)) else fail-any) else fail-any))) in
        {143}let v_500: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_498),(if (success?(4-proj-7-tuple(v_484)) && success?(3-proj-7-tuple(v_484))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then dhexp(2-proj-2-tuple(v_497),4-proj-7-tuple(v_484)) else fail-any) else fail-any))) in
        {144}let v_501: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_498),(if (success?(4-proj-7-tuple(v_484)) && success?(3-proj-7-tuple(v_484))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then dhexp(2-proj-2-tuple(v_497),4-proj-7-tuple(v_484)) else fail-any) else fail-any))) in
        {145}let v_502: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_484)) && success?(3-proj-7-tuple(v_484))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then dhexp(2-proj-2-tuple(v_497),4-proj-7-tuple(v_484)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_498))) then (if not-caught-fail(v_499) then (if not-caught-fail(v_500) then (if not-caught-fail(v_501) then (v_499,v_500,v_501) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {146}let v_503: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_484)) && success?(3-proj-7-tuple(v_484))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then dhexp(2-proj-2-tuple(v_497),4-proj-7-tuple(v_484)) else fail-any) else fail-any)) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-3-tuple(v_498))))) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_502)) then cipherstatepack(2-proj-3-tuple(v_502),minnonce) else fail-any),1-proj-3-tuple(v_502),3-proj-3-tuple(v_498)) else fail-any) else fail-any) else fail-any)) in
        {147}let v_504: bitstring = catch-fail(symmetricstateunpack(v_503)) in
        {148}let v_505: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_504))) in
        {149}let v_506: aead = catch-fail(decrypt(1-proj-2-tuple(v_505),2-proj-2-tuple(v_505),3-proj-3-tuple(v_504),3-proj-3-tuple(v_485))) in
        {150}let v_507: bitstring = catch-fail(aeadunpack(v_506)) in
        {151}let v_508: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_504))) in
        {152}let v_509: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_505))) && success?(1-proj-3-tuple(v_504))) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-2-tuple(v_508))))) then cipherstatepack(1-proj-2-tuple(v_508),increment_nonce(2-proj-2-tuple(v_505))) else fail-any) else fail-any)) in
        {153}let v_510: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_485)) && (success?(3-proj-3-tuple(v_504)) && success?(1-proj-3-tuple(v_504)))) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then (if not-caught-fail(v_506) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then (if not-caught-fail(v_509) then (v_509,3-proj-3-tuple(v_507),1-proj-3-tuple(v_507)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {154}let v_511: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_510),2-proj-3-tuple(v_504),3-proj-3-tuple(v_504)))) in
        {155}let v_512: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_485)) && success?(symmetricstatepack(1-proj-3-tuple(v_510),2-proj-3-tuple(v_504),3-proj-3-tuple(v_504)))) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-3-tuple(v_511))))) then symmetricstatepack(1-proj-3-tuple(v_511),2-proj-3-tuple(v_511),hash(3-proj-3-tuple(v_511),3-proj-3-tuple(v_485))) else fail-any) else fail-any)) in
        {156}let v_513: bitstring = catch-fail((if success?(3-proj-3-tuple(v_485)) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-3-tuple(v_504))))) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then (if not-caught-fail(v_512) then (v_512,2-proj-3-tuple(v_510),3-proj-3-tuple(v_510)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {157}let v_514: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_513),2-proj-7-tuple(v_484),3-proj-7-tuple(v_484),4-proj-7-tuple(v_484),v_487,6-proj-7-tuple(v_484),7-proj-7-tuple(v_484))) in
        {158}let v_515: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_513))) in
        {159}let v_516: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_515),zero)) in
        {160}let v_517: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_515),zero)) in
        {161}let v_518: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_515),zero)) in
        {162}let v_519: bitstring = catch-fail((if success?(2-proj-3-tuple(v_515)) then (if not-caught-fail(v_516) then (if not-caught-fail(v_517) then (if not-caught-fail(v_518) then (v_516,v_517,v_518) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {163}let v_520: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_519)) then cipherstatepack(1-proj-3-tuple(v_519),minnonce) else fail-any)) in
        {164}let v_521: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_519)) then cipherstatepack(2-proj-3-tuple(v_519),minnonce) else fail-any)) in
        {165}let v_522: bitstring = catch-fail((if success?(1-proj-3-tuple(v_513)) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-3-tuple(v_515))))) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then (if not-caught-fail(v_520) then (if not-caught-fail(v_521) then (1-proj-3-tuple(v_513),v_520,v_521) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {166}let (hs_523: handshakestate,re_524: key,plaintext_b_525: bitstring,valid_526: bool,cs1_527: cipherstate,cs2_528: cipherstate) = (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-7-tuple(v_484))))) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then (if not-caught-fail(v_486) then (if not-caught-fail(v_487) then (if not-caught-fail(v_489) then (if not-caught-fail(v_496) then (if not-caught-fail(v_503) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-3-tuple(v_513))))) then (if (v_486 && 3-proj-3-tuple(v_513)) then (if not-caught-fail(v_514) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then (v_514,getpublickey(3-proj-7-tuple(v_484)),2-proj-3-tuple(v_513),true,2-proj-3-tuple(v_522),3-proj-3-tuple(v_522)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {167}event RecvMsg(alice,charlie,stage_b,plaintext_b_525,valid_526);
        {168}insert statestore(alice,charlie,statepack_c(hs_523));
        {169}event RecvEnd(valid_526)
    ) | (
        {171}event LeakS(phase0,alice);
        {172}out(pub, key_s(alice))
    ) | (
        {173}phase 1;
        {174}event LeakS(phase1,alice);
        {175}out(pub, key_s(alice))
    )
) | (
    {176}let v_529: key = catch-fail(dhexp(key_s(bob),g)) in
    {177}let s_530: keypair = (if not-caught-fail(v_529) then keypairpack(v_529,key_s(bob)) else fail-any) in
    {178}out(pub, getpublickey(s_530));
    (
        {179}let e_531: keypair = keypairpack(empty,empty) in
        {180}let rs_532: key = empty in
        {181}let re_533: key = empty in
        {182}let v_534: bitstring = catch-fail(hash(somename,empty)) in
        {183}let v_535: key = catch-fail(v_534) in
        {184}let v_536: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {185}let v_537: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any))) in
        {186}let v_538: symmetricstate = catch-fail((if success?((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then symmetricstatepack(1-proj-3-tuple(v_537),2-proj-3-tuple(v_537),hash(3-proj-3-tuple(v_537),empty)) else fail-any) else fail-any)) in
        {187}let v_539: bitstring = catch-fail(symmetricstateunpack(v_538)) in
        {188}let v_540: symmetricstate = catch-fail((if success?(getpublickey(s_530)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),getpublickey(s_530))) else fail-any) else fail-any)) in
        {189}let hs_541: handshakestate = (if not-caught-fail(v_538) then (if not-caught-fail(v_540) then handshakestatepack(v_540,s_530,e_531,rs_532,re_533,empty,false) else fail-any) else fail-any) in
        {190}insert statestore(bob,alice,statepack_a(hs_541))
    ) | (
        {212}get statestore(=bob,=alice,statepack_a(hs_542: handshakestate)) in
        {191}in(pub, message_a_543: bitstring);
        {192}let v_544: bitstring = catch-fail(handshakestateunpack(hs_542)) in
        {193}let v_545: bitstring = catch-fail(deconcat3(message_a_543)) in
        {194}let v_546: bool = catch-fail(true) in
        {195}let v_547: key = catch-fail(1-proj-3-tuple(v_545)) in
        {196}let v_548: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_544))) in
        {197}let v_549: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_544)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then symmetricstatepack(1-proj-3-tuple(v_548),2-proj-3-tuple(v_548),hash(3-proj-3-tuple(v_548),v_547)) else fail-any) else fail-any)) in
        {198}let v_550: bitstring = catch-fail(symmetricstateunpack(v_549)) in
        {199}let v_551: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_550))) in
        {200}let v_552: aead = catch-fail(decrypt(1-proj-2-tuple(v_551),2-proj-2-tuple(v_551),3-proj-3-tuple(v_550),3-proj-3-tuple(v_545))) in
        {201}let v_553: bitstring = catch-fail(aeadunpack(v_552)) in
        {202}let v_554: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_550))) in
        {203}let v_555: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_551))) && success?(1-proj-3-tuple(v_550))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then cipherstatepack(1-proj-2-tuple(v_554),increment_nonce(2-proj-2-tuple(v_551))) else fail-any) else fail-any)) in
        {204}let v_556: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_545)) && (success?(3-proj-3-tuple(v_550)) && success?(1-proj-3-tuple(v_550)))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then (if not-caught-fail(v_552) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-3-tuple(v_553))))) then (if not-caught-fail(v_555) then (v_555,3-proj-3-tuple(v_553),1-proj-3-tuple(v_553)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {205}let v_557: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_550),3-proj-3-tuple(v_550)))) in
        {206}let v_558: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_545)) && success?(symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_550),3-proj-3-tuple(v_550)))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack(1-proj-3-tuple(v_557),2-proj-3-tuple(v_557),hash(3-proj-3-tuple(v_557),3-proj-3-tuple(v_545))) else fail-any) else fail-any)) in
        {207}let v_559: bitstring = catch-fail((if success?(3-proj-3-tuple(v_545)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then (if not-caught-fail(v_558) then (v_558,2-proj-3-tuple(v_556),3-proj-3-tuple(v_556)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let v_560: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_559),2-proj-7-tuple(v_544),3-proj-7-tuple(v_544),4-proj-7-tuple(v_544),v_547,6-proj-7-tuple(v_544),7-proj-7-tuple(v_544))) in
        {209}let (hs_561: handshakestate,re_562: key,plaintext_a: bitstring,valid_563: bool) = (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-7-tuple(v_544))))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (if not-caught-fail(v_549) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if (v_546 && 3-proj-3-tuple(v_559)) then (if not-caught-fail(v_560) then (v_560,getpublickey(3-proj-7-tuple(v_544)),2-proj-3-tuple(v_559),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {210}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_563);
        {211}insert statestore(bob,alice,statepack_b(hs_561))
    ) | (
        {257}get statestore(=bob,=alice,statepack_b(hs_564: handshakestate)) in
        {213}let v_565: bitstring = catch-fail(handshakestateunpack(hs_564)) in
        {214}let v_566: bitstring = catch-fail((empty,empty,empty)) in
        {215}let v_567: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {216}let v_568: keypair = catch-fail((if not-caught-fail(v_567) then keypairpack(v_567,key_e(bob,alice)) else fail-any)) in
        {217}let v_569: bitstring = catch-fail(getpublickey(v_568)) in
        {218}let v_570: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_565))) in
        {219}let v_571: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_565)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_570),hash(3-proj-3-tuple(v_570),v_569)) else fail-any) else fail-any)) in
        {220}let v_572: bitstring = catch-fail(keypairunpack(v_568)) in
        {221}let v_573: bitstring = catch-fail(symmetricstateunpack(v_571)) in
        {222}let v_574: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_573),(if success?(5-proj-7-tuple(v_565)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then dhexp(2-proj-2-tuple(v_572),5-proj-7-tuple(v_565)) else fail-any) else fail-any))) in
        {223}let v_575: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_573),(if success?(5-proj-7-tuple(v_565)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then dhexp(2-proj-2-tuple(v_572),5-proj-7-tuple(v_565)) else fail-any) else fail-any))) in
        {224}let v_576: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_573),(if success?(5-proj-7-tuple(v_565)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then dhexp(2-proj-2-tuple(v_572),5-proj-7-tuple(v_565)) else fail-any) else fail-any))) in
        {225}let v_577: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_565)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then dhexp(2-proj-2-tuple(v_572),5-proj-7-tuple(v_565)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_573))) then (if not-caught-fail(v_574) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (v_574,v_575,v_576) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let v_578: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_565)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then dhexp(2-proj-2-tuple(v_572),5-proj-7-tuple(v_565)) else fail-any) else fail-any)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_577)) then cipherstatepack(2-proj-3-tuple(v_577),minnonce) else fail-any),1-proj-3-tuple(v_577),3-proj-3-tuple(v_573)) else fail-any) else fail-any) else fail-any)) in
        {227}let v_579: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_565))) in
        {228}let v_580: bitstring = catch-fail(symmetricstateunpack(v_578)) in
        {229}let v_581: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_580),(if (success?(5-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),5-proj-7-tuple(v_565)) else fail-any) else fail-any))) in
        {230}let v_582: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_580),(if (success?(5-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),5-proj-7-tuple(v_565)) else fail-any) else fail-any))) in
        {231}let v_583: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_580),(if (success?(5-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),5-proj-7-tuple(v_565)) else fail-any) else fail-any))) in
        {232}let v_584: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),5-proj-7-tuple(v_565)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_580))) then (if not-caught-fail(v_581) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (v_581,v_582,v_583) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_585: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),5-proj-7-tuple(v_565)) else fail-any) else fail-any)) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_584)) then cipherstatepack(2-proj-3-tuple(v_584),minnonce) else fail-any),1-proj-3-tuple(v_584),3-proj-3-tuple(v_580)) else fail-any) else fail-any) else fail-any)) in
        {234}let v_586: bitstring = catch-fail(symmetricstateunpack(v_585)) in
        {235}let v_587: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_586))) in
        {236}let v_588: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_587),2-proj-2-tuple(v_587),3-proj-3-tuple(v_586),msg_b(bob,alice))) in
        {237}let v_589: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_586))) in
        {238}let v_590: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_587))) && success?(1-proj-3-tuple(v_586))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then cipherstatepack(1-proj-2-tuple(v_589),increment_nonce(2-proj-2-tuple(v_587))) else fail-any) else fail-any)) in
        {239}let v_591: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_586)) && success?(1-proj-3-tuple(v_586))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then (if not-caught-fail(v_588) then (if not-caught-fail(v_590) then (v_590,v_588) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {240}let v_592: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_591),2-proj-3-tuple(v_586),3-proj-3-tuple(v_586)))) in
        {241}let v_593: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_591)) && success?(symmetricstatepack(1-proj-2-tuple(v_591),2-proj-3-tuple(v_586),3-proj-3-tuple(v_586)))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_592),hash(3-proj-3-tuple(v_592),2-proj-2-tuple(v_591))) else fail-any) else fail-any)) in
        {242}let v_594: bitstring = catch-fail((if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then (if not-caught-fail(v_593) then (v_593,2-proj-2-tuple(v_591)) else fail-any) else fail-any) else fail-any)) in
        {243}let v_595: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_594),2-proj-7-tuple(v_565),v_568,4-proj-7-tuple(v_565),5-proj-7-tuple(v_565),6-proj-7-tuple(v_565),7-proj-7-tuple(v_565))) in
        {244}let v_596: bitstring = catch-fail(concat3(v_569,2-proj-3-tuple(v_566),2-proj-2-tuple(v_594))) in
        {245}let v_597: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_594))) in
        {246}let v_598: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_597),zero)) in
        {247}let v_599: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_597),zero)) in
        {248}let v_600: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_597),zero)) in
        {249}let v_601: bitstring = catch-fail((if success?(2-proj-3-tuple(v_597)) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (v_598,v_599,v_600) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_602: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_601)) then cipherstatepack(1-proj-3-tuple(v_601),minnonce) else fail-any)) in
        {251}let v_603: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_601)) then cipherstatepack(2-proj-3-tuple(v_601),minnonce) else fail-any)) in
        {252}let v_604: bitstring = catch-fail((if success?(1-proj-2-tuple(v_594)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (1-proj-2-tuple(v_594),v_602,v_603) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let (hs_605: handshakestate,re_606: key,message_b_607: bitstring,cs1_608: cipherstate,cs2_609: cipherstate) = (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-7-tuple(v_565))))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (if not-caught-fail(v_571) then (if not-caught-fail(v_578) then (if not-caught-fail(v_585) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then (if not-caught-fail(v_595) then (if not-caught-fail(v_596) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (v_595,5-proj-7-tuple(v_565),v_596,2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {254}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {255}insert statestore(bob,alice,statepack_c(hs_605));
        {256}out(pub, message_b_607)
    ) | (
        {258}event LeakS(phase0,bob);
        {259}out(pub, key_s(bob))
    ) | (
        {260}phase 1;
        {261}event LeakS(phase1,bob);
        {262}out(pub, key_s(bob))
    )
) | (
    {263}let v_610: key = catch-fail(dhexp(key_s(bob),g)) in
    {264}let s_611: keypair = (if not-caught-fail(v_610) then keypairpack(v_610,key_s(bob)) else fail-any) in
    {265}out(pub, getpublickey(s_611));
    (
        {266}let e_612: keypair = keypairpack(empty,empty) in
        {267}let rs_613: key = empty in
        {268}let re_614: key = empty in
        {269}let v_615: bitstring = catch-fail(hash(somename,empty)) in
        {270}let v_616: key = catch-fail(v_615) in
        {271}let v_617: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {272}let v_618: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_615) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then symmetricstatepack(v_617,v_616,v_615) else fail-any) else fail-any) else fail-any))) in
        {273}let v_619: symmetricstate = catch-fail((if success?((if not-caught-fail(v_615) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then symmetricstatepack(v_617,v_616,v_615) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),hash(3-proj-3-tuple(v_618),empty)) else fail-any) else fail-any)) in
        {274}let v_620: bitstring = catch-fail(symmetricstateunpack(v_619)) in
        {275}let v_621: symmetricstate = catch-fail((if success?(getpublickey(s_611)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),getpublickey(s_611))) else fail-any) else fail-any)) in
        {276}let hs_622: handshakestate = (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then handshakestatepack(v_621,s_611,e_612,rs_613,re_614,empty,false) else fail-any) else fail-any) in
        {277}insert statestore(bob,charlie,statepack_a(hs_622))
    ) | (
        {299}get statestore(=bob,=charlie,statepack_a(hs_623: handshakestate)) in
        {278}in(pub, message_a_624: bitstring);
        {279}let v_625: bitstring = catch-fail(handshakestateunpack(hs_623)) in
        {280}let v_626: bitstring = catch-fail(deconcat3(message_a_624)) in
        {281}let v_627: bool = catch-fail(true) in
        {282}let v_628: key = catch-fail(1-proj-3-tuple(v_626)) in
        {283}let v_629: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_625))) in
        {284}let v_630: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_625)) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then symmetricstatepack(1-proj-3-tuple(v_629),2-proj-3-tuple(v_629),hash(3-proj-3-tuple(v_629),v_628)) else fail-any) else fail-any)) in
        {285}let v_631: bitstring = catch-fail(symmetricstateunpack(v_630)) in
        {286}let v_632: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_631))) in
        {287}let v_633: aead = catch-fail(decrypt(1-proj-2-tuple(v_632),2-proj-2-tuple(v_632),3-proj-3-tuple(v_631),3-proj-3-tuple(v_626))) in
        {288}let v_634: bitstring = catch-fail(aeadunpack(v_633)) in
        {289}let v_635: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_631))) in
        {290}let v_636: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_632))) && success?(1-proj-3-tuple(v_631))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then cipherstatepack(1-proj-2-tuple(v_635),increment_nonce(2-proj-2-tuple(v_632))) else fail-any) else fail-any)) in
        {291}let v_637: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_626)) && (success?(3-proj-3-tuple(v_631)) && success?(1-proj-3-tuple(v_631)))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then (if not-caught-fail(v_633) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if not-caught-fail(v_636) then (v_636,3-proj-3-tuple(v_634),1-proj-3-tuple(v_634)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {292}let v_638: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_637),2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)))) in
        {293}let v_639: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_626)) && success?(symmetricstatepack(1-proj-3-tuple(v_637),2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_638),hash(3-proj-3-tuple(v_638),3-proj-3-tuple(v_626))) else fail-any) else fail-any)) in
        {294}let v_640: bitstring = catch-fail((if success?(3-proj-3-tuple(v_626)) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_639) then (v_639,2-proj-3-tuple(v_637),3-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_641: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_640),2-proj-7-tuple(v_625),3-proj-7-tuple(v_625),4-proj-7-tuple(v_625),v_628,6-proj-7-tuple(v_625),7-proj-7-tuple(v_625))) in
        {296}let (hs_642: handshakestate,re_643: key,plaintext_a_644: bitstring,valid_645: bool) = (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-7-tuple(v_625))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (if not-caught-fail(v_630) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (v_627 && 3-proj-3-tuple(v_640)) then (if not-caught-fail(v_641) then (v_641,getpublickey(3-proj-7-tuple(v_625)),2-proj-3-tuple(v_640),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {297}event RecvMsg(bob,charlie,stage_a,plaintext_a_644,valid_645);
        {298}insert statestore(bob,charlie,statepack_b(hs_642))
    ) | (
        {344}get statestore(=bob,=charlie,statepack_b(hs_646: handshakestate)) in
        {300}let v_647: bitstring = catch-fail(handshakestateunpack(hs_646)) in
        {301}let v_648: bitstring = catch-fail((empty,empty,empty)) in
        {302}let v_649: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {303}let v_650: keypair = catch-fail((if not-caught-fail(v_649) then keypairpack(v_649,key_e(bob,charlie)) else fail-any)) in
        {304}let v_651: bitstring = catch-fail(getpublickey(v_650)) in
        {305}let v_652: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_647))) in
        {306}let v_653: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_647)) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then symmetricstatepack(1-proj-3-tuple(v_652),2-proj-3-tuple(v_652),hash(3-proj-3-tuple(v_652),v_651)) else fail-any) else fail-any)) in
        {307}let v_654: bitstring = catch-fail(keypairunpack(v_650)) in
        {308}let v_655: bitstring = catch-fail(symmetricstateunpack(v_653)) in
        {309}let v_656: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_655),(if success?(5-proj-7-tuple(v_647)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),5-proj-7-tuple(v_647)) else fail-any) else fail-any))) in
        {310}let v_657: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_655),(if success?(5-proj-7-tuple(v_647)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),5-proj-7-tuple(v_647)) else fail-any) else fail-any))) in
        {311}let v_658: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_655),(if success?(5-proj-7-tuple(v_647)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),5-proj-7-tuple(v_647)) else fail-any) else fail-any))) in
        {312}let v_659: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_647)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),5-proj-7-tuple(v_647)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_655))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (if not-caught-fail(v_658) then (v_656,v_657,v_658) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {313}let v_660: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_647)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then dhexp(2-proj-2-tuple(v_654),5-proj-7-tuple(v_647)) else fail-any) else fail-any)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_659)) then cipherstatepack(2-proj-3-tuple(v_659),minnonce) else fail-any),1-proj-3-tuple(v_659),3-proj-3-tuple(v_655)) else fail-any) else fail-any) else fail-any)) in
        {314}let v_661: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_647))) in
        {315}let v_662: bitstring = catch-fail(symmetricstateunpack(v_660)) in
        {316}let v_663: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_662),(if (success?(5-proj-7-tuple(v_647)) && success?(2-proj-7-tuple(v_647))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_647)) else fail-any) else fail-any))) in
        {317}let v_664: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_662),(if (success?(5-proj-7-tuple(v_647)) && success?(2-proj-7-tuple(v_647))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_647)) else fail-any) else fail-any))) in
        {318}let v_665: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_662),(if (success?(5-proj-7-tuple(v_647)) && success?(2-proj-7-tuple(v_647))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_647)) else fail-any) else fail-any))) in
        {319}let v_666: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_647)) && success?(2-proj-7-tuple(v_647))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_647)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_662))) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (v_663,v_664,v_665) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {320}let v_667: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_647)) && success?(2-proj-7-tuple(v_647))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_647)) else fail-any) else fail-any)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_666)) then cipherstatepack(2-proj-3-tuple(v_666),minnonce) else fail-any),1-proj-3-tuple(v_666),3-proj-3-tuple(v_662)) else fail-any) else fail-any) else fail-any)) in
        {321}let v_668: bitstring = catch-fail(symmetricstateunpack(v_667)) in
        {322}let v_669: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {323}let v_670: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_669),2-proj-2-tuple(v_669),3-proj-3-tuple(v_668),msg_b(bob,charlie))) in
        {324}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {325}let v_672: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_669))) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then cipherstatepack(1-proj-2-tuple(v_671),increment_nonce(2-proj-2-tuple(v_669))) else fail-any) else fail-any)) in
        {326}let v_673: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_668)) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then (if not-caught-fail(v_670) then (if not-caught-fail(v_672) then (v_672,v_670) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {327}let v_674: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_673),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) in
        {328}let v_675: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_673)) && success?(symmetricstatepack(1-proj-2-tuple(v_673),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_674),hash(3-proj-3-tuple(v_674),2-proj-2-tuple(v_673))) else fail-any) else fail-any)) in
        {329}let v_676: bitstring = catch-fail((if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then (if not-caught-fail(v_675) then (v_675,2-proj-2-tuple(v_673)) else fail-any) else fail-any) else fail-any)) in
        {330}let v_677: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_676),2-proj-7-tuple(v_647),v_650,4-proj-7-tuple(v_647),5-proj-7-tuple(v_647),6-proj-7-tuple(v_647),7-proj-7-tuple(v_647))) in
        {331}let v_678: bitstring = catch-fail(concat3(v_651,2-proj-3-tuple(v_648),2-proj-2-tuple(v_676))) in
        {332}let v_679: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_676))) in
        {333}let v_680: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_679),zero)) in
        {334}let v_681: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_679),zero)) in
        {335}let v_682: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_679),zero)) in
        {336}let v_683: bitstring = catch-fail((if success?(2-proj-3-tuple(v_679)) then (if not-caught-fail(v_680) then (if not-caught-fail(v_681) then (if not-caught-fail(v_682) then (v_680,v_681,v_682) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {337}let v_684: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_683)) then cipherstatepack(1-proj-3-tuple(v_683),minnonce) else fail-any)) in
        {338}let v_685: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_683)) then cipherstatepack(2-proj-3-tuple(v_683),minnonce) else fail-any)) in
        {339}let v_686: bitstring = catch-fail((if success?(1-proj-2-tuple(v_676)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if not-caught-fail(v_684) then (if not-caught-fail(v_685) then (1-proj-2-tuple(v_676),v_684,v_685) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {340}let (hs_687: handshakestate,re_688: key,message_b_689: bitstring,cs1_690: cipherstate,cs2_691: cipherstate) = (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-7-tuple(v_647))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if not-caught-fail(v_650) then (if not-caught-fail(v_651) then (if not-caught-fail(v_653) then (if not-caught-fail(v_660) then (if not-caught-fail(v_667) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (v_677,5-proj-7-tuple(v_647),v_678,2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {341}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {342}insert statestore(bob,charlie,statepack_c(hs_687));
        {343}out(pub, message_b_689)
    ) | (
        {345}event LeakS(phase0,bob);
        {346}out(pub, key_s(bob))
    ) | (
        {347}phase 1;
        {348}event LeakS(phase1,bob);
        {349}out(pub, key_s(bob))
    )
) | (
    {350}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_772,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_772,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_772,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_772,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 157 rules in the queue.
400 rules inserted. The rule base contains 386 rules. 32 rules in the queue.
600 rules inserted. The rule base contains 568 rules. 37 rules in the queue.
800 rules inserted. The rule base contains 663 rules. 61 rules in the queue.
1000 rules inserted. The rule base contains 845 rules. 103 rules in the queue.
1200 rules inserted. The rule base contains 1025 rules. 145 rules in the queue.
1400 rules inserted. The rule base contains 1144 rules. 95 rules in the queue.
1600 rules inserted. The rule base contains 1136 rules. 14 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_772,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_772,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_772,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_772,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {178}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {178}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {178}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {178}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {36}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {299}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {278}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {298}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {344}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {341}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {343}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {39}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {80}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_772,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_772,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_772,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_772,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {36}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {299}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {278}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {298}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {344}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {341}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {343}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {39}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {80}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {36}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {299}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {278}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {298}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {344}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {341}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {343}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {39}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {80}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {36}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {38}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {299}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {278}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {298}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {344}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {341}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {343}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {39}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvEnd(true) may be executed at {82}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
