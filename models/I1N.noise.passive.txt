File "I1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1N.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1N.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "I1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "I1N.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "I1N.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 305, character 6:
Warning: identifier s rebound.
File "I1N.noise.passive.pv", line 306, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 306, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1N.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1N.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "I1N.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "I1N.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1N.noise.passive.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1N.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 337, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1N.noise.passive.pv", line 338, characters 6-7:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 347, characters 6-7:
Warning: identifier re rebound.
File "I1N.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 350, characters 48-53:
Warning: identifier valid1 rebound.
File "I1N.noise.passive.pv", line 351, characters 6-7:
Warning: identifier rs rebound.
File "I1N.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 362, characters 6-7:
Warning: identifier re rebound.
File "I1N.noise.passive.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 366, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 368, characters 7-8:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 534, characters 8-9:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 526, characters 8-9:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1N.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 519, characters 8-9:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 362, characters 6-7:
Warning: identifier re rebound.
File "I1N.noise.passive.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 366, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 368, characters 7-8:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 511, characters 8-9:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "I1N.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "I1N.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 305, character 6:
Warning: identifier s rebound.
File "I1N.noise.passive.pv", line 306, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 306, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1N.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1N.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 584, characters 8-9:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 337, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1N.noise.passive.pv", line 338, characters 6-7:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 577, characters 8-9:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 569, characters 8-9:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "I1N.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "I1N.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1N.noise.passive.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 347, characters 6-7:
Warning: identifier re rebound.
File "I1N.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 350, characters 48-53:
Warning: identifier valid1 rebound.
File "I1N.noise.passive.pv", line 351, characters 6-7:
Warning: identifier rs rebound.
File "I1N.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "I1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_468: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_468));
    (
        {4}let e_469: keypair = keypairpack(empty,empty) in
        {5}let rs_470: key = empty in
        {6}let re_471: key = empty in
        {7}let v_472: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_473: key = catch-fail(v_472) in
        {9}let v_474: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_475: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_472) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then symmetricstatepack(v_474,v_473,v_472) else fail-any) else fail-any) else fail-any))) in
        {11}let v_476: symmetricstate = catch-fail((if success?((if not-caught-fail(v_472) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then symmetricstatepack(v_474,v_473,v_472) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then symmetricstatepack(1-proj-3-tuple(v_475),2-proj-3-tuple(v_475),hash(3-proj-3-tuple(v_475),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_476) then handshakestatepack(v_476,s_468,e_469,rs_470,re_471,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {47}get statestore(=alice,=bob,statepack_a(hs_477: handshakestate)) in
        {14}let v_478: bitstring = catch-fail(handshakestateunpack(hs_477)) in
        {15}let v_479: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_480: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_481: keypair = catch-fail((if not-caught-fail(v_480) then keypairpack(v_480,key_e(alice,bob)) else fail-any)) in
        {18}let v_482: bitstring = catch-fail(getpublickey(v_481)) in
        {19}let v_483: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_478))) in
        {20}let v_484: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_478)) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack(1-proj-3-tuple(v_483),2-proj-3-tuple(v_483),hash(3-proj-3-tuple(v_483),v_482)) else fail-any) else fail-any)) in
        {21}let v_485: key = catch-fail(dhexp(key_s(alice),g)) in
        {22}let v_486: keypair = catch-fail((if not-caught-fail(v_485) then keypairpack(v_485,key_s(alice)) else fail-any)) in
        {23}let v_487: bitstring = catch-fail(symmetricstateunpack(v_484)) in
        {24}let v_488: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_487))) in
        {25}let v_489: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_488),2-proj-2-tuple(v_488),3-proj-3-tuple(v_487),getpublickey(v_486))) in
        {26}let v_490: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_487))) in
        {27}let v_491: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_488))) && success?(1-proj-3-tuple(v_487))) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-2-tuple(v_490))))) then cipherstatepack(1-proj-2-tuple(v_490),increment_nonce(2-proj-2-tuple(v_488))) else fail-any) else fail-any)) in
        {28}let v_492: bitstring = catch-fail((if (success?(getpublickey(v_486)) && (success?(3-proj-3-tuple(v_487)) && success?(1-proj-3-tuple(v_487)))) then (if (not-caught-fail(v_488) && success?(is-true(success?(1-proj-2-tuple(v_488))))) then (if not-caught-fail(v_489) then (if not-caught-fail(v_491) then (v_491,v_489) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_493: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_492),2-proj-3-tuple(v_487),3-proj-3-tuple(v_487)))) in
        {30}let v_494: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_492)) && success?(symmetricstatepack(1-proj-2-tuple(v_492),2-proj-3-tuple(v_487),3-proj-3-tuple(v_487)))) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-3-tuple(v_493))))) then symmetricstatepack(1-proj-3-tuple(v_493),2-proj-3-tuple(v_493),hash(3-proj-3-tuple(v_493),2-proj-2-tuple(v_492))) else fail-any) else fail-any)) in
        {31}let v_495: bitstring = catch-fail((if success?(getpublickey(v_486)) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then (if (not-caught-fail(v_492) && success?(is-true(success?(1-proj-2-tuple(v_492))))) then (if not-caught-fail(v_494) then (v_494,2-proj-2-tuple(v_492)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_496: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_495))) in
        {33}let v_497: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_496))) in
        {34}let v_498: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_497),2-proj-2-tuple(v_497),3-proj-3-tuple(v_496),msg_a(alice,bob))) in
        {35}let v_499: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_496))) in
        {36}let v_500: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_497))) && success?(1-proj-3-tuple(v_496))) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-2-tuple(v_499))))) then cipherstatepack(1-proj-2-tuple(v_499),increment_nonce(2-proj-2-tuple(v_497))) else fail-any) else fail-any)) in
        {37}let v_501: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_496)) && success?(1-proj-3-tuple(v_496))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then (if not-caught-fail(v_498) then (if not-caught-fail(v_500) then (v_500,v_498) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_502: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_501),2-proj-3-tuple(v_496),3-proj-3-tuple(v_496)))) in
        {39}let v_503: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_501)) && success?(symmetricstatepack(1-proj-2-tuple(v_501),2-proj-3-tuple(v_496),3-proj-3-tuple(v_496)))) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then symmetricstatepack(1-proj-3-tuple(v_502),2-proj-3-tuple(v_502),hash(3-proj-3-tuple(v_502),2-proj-2-tuple(v_501))) else fail-any) else fail-any)) in
        {40}let v_504: bitstring = catch-fail((if success?(1-proj-2-tuple(v_495)) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-3-tuple(v_496))))) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-2-tuple(v_501))))) then (if not-caught-fail(v_503) then (v_503,2-proj-2-tuple(v_501)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_505: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_504),v_486,v_481,4-proj-7-tuple(v_478),5-proj-7-tuple(v_478),6-proj-7-tuple(v_478),7-proj-7-tuple(v_478))) in
        {42}let v_506: bitstring = catch-fail(concat3(v_482,2-proj-2-tuple(v_495),2-proj-2-tuple(v_504))) in
        {43}let (hs_507: handshakestate,re_508: key,message_a: bitstring) = (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-7-tuple(v_478))))) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then (if not-caught-fail(v_481) then (if not-caught-fail(v_482) then (if not-caught-fail(v_484) then (if not-caught-fail(v_486) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-2-tuple(v_495))))) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-2-tuple(v_504))))) then (if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (v_505,5-proj-7-tuple(v_478),v_506) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {44}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {45}insert statestore(alice,bob,statepack_b(hs_507));
        {46}out(pub, message_a)
    ) | (
        {76}get statestore(=alice,=bob,statepack_b(hs_509: handshakestate)) in
        {48}in(pub, message_b: bitstring);
        {49}let v_510: bitstring = catch-fail(handshakestateunpack(hs_509)) in
        {50}let v_511: bitstring = catch-fail(deconcat3(message_b)) in
        {51}let v_512: bool = catch-fail(true) in
        {52}let v_513: key = catch-fail(1-proj-3-tuple(v_511)) in
        {53}let v_514: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_510))) in
        {54}let v_515: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_510)) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then symmetricstatepack(1-proj-3-tuple(v_514),2-proj-3-tuple(v_514),hash(3-proj-3-tuple(v_514),v_513)) else fail-any) else fail-any)) in
        {55}let v_516: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_510))) in
        {56}let v_517: bitstring = catch-fail(symmetricstateunpack(v_515)) in
        {57}let v_518: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_517),(if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any))) in
        {58}let v_519: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_517),(if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any))) in
        {59}let v_520: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_517),(if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any))) in
        {60}let v_521: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_517))) then (if not-caught-fail(v_518) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then (v_518,v_519,v_520) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_522: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any)) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-3-tuple(v_517))))) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_521)) then cipherstatepack(2-proj-3-tuple(v_521),minnonce) else fail-any),1-proj-3-tuple(v_521),3-proj-3-tuple(v_517)) else fail-any) else fail-any) else fail-any)) in
        {62}let v_523: bitstring = catch-fail(symmetricstateunpack(v_522)) in
        {63}let v_524: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_523))) in
        {64}let v_525: aead = catch-fail(decrypt(1-proj-2-tuple(v_524),2-proj-2-tuple(v_524),3-proj-3-tuple(v_523),3-proj-3-tuple(v_511))) in
        {65}let v_526: bitstring = catch-fail(aeadunpack(v_525)) in
        {66}let v_527: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_523))) in
        {67}let v_528: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_524))) && success?(1-proj-3-tuple(v_523))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then cipherstatepack(1-proj-2-tuple(v_527),increment_nonce(2-proj-2-tuple(v_524))) else fail-any) else fail-any)) in
        {68}let v_529: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_511)) && (success?(3-proj-3-tuple(v_523)) && success?(1-proj-3-tuple(v_523)))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-2-tuple(v_524))))) then (if not-caught-fail(v_525) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then (if not-caught-fail(v_528) then (v_528,3-proj-3-tuple(v_526),1-proj-3-tuple(v_526)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {69}let v_530: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_529),2-proj-3-tuple(v_523),3-proj-3-tuple(v_523)))) in
        {70}let v_531: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_511)) && success?(symmetricstatepack(1-proj-3-tuple(v_529),2-proj-3-tuple(v_523),3-proj-3-tuple(v_523)))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then symmetricstatepack(1-proj-3-tuple(v_530),2-proj-3-tuple(v_530),hash(3-proj-3-tuple(v_530),3-proj-3-tuple(v_511))) else fail-any) else fail-any)) in
        {71}let v_532: bitstring = catch-fail((if success?(3-proj-3-tuple(v_511)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then (if not-caught-fail(v_531) then (v_531,2-proj-3-tuple(v_529),3-proj-3-tuple(v_529)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_533: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_532),2-proj-7-tuple(v_510),3-proj-7-tuple(v_510),4-proj-7-tuple(v_510),v_513,6-proj-7-tuple(v_510),7-proj-7-tuple(v_510))) in
        {73}let (hs_534: handshakestate,re_535: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-7-tuple(v_510))))) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-3-tuple(v_511))))) then (if not-caught-fail(v_512) then (if not-caught-fail(v_513) then (if not-caught-fail(v_515) then (if not-caught-fail(v_522) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (if (v_512 && 3-proj-3-tuple(v_532)) then (if not-caught-fail(v_533) then (v_533,getpublickey(3-proj-7-tuple(v_510)),2-proj-3-tuple(v_532),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {74}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {75}insert statestore(alice,bob,statepack_c(hs_534))
    ) | (
        {101}get statestore(=alice,=bob,statepack_c(hs_536: handshakestate)) in
        {77}let v_537: bitstring = catch-fail(handshakestateunpack(hs_536)) in
        {78}let v_538: bitstring = catch-fail((empty,empty,empty)) in
        {79}let v_539: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_537))) in
        {80}let v_540: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_537))) in
        {81}let v_541: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_540),(if (success?(5-proj-7-tuple(v_537)) && success?(2-proj-7-tuple(v_537))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_537)) else fail-any) else fail-any))) in
        {82}let v_542: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_540),(if (success?(5-proj-7-tuple(v_537)) && success?(2-proj-7-tuple(v_537))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_537)) else fail-any) else fail-any))) in
        {83}let v_543: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_540),(if (success?(5-proj-7-tuple(v_537)) && success?(2-proj-7-tuple(v_537))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_537)) else fail-any) else fail-any))) in
        {84}let v_544: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_537)) && success?(2-proj-7-tuple(v_537))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_537)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_540))) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (v_541,v_542,v_543) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {85}let v_545: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_537)) && success?(2-proj-7-tuple(v_537))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_537)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_537))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_544)) then cipherstatepack(2-proj-3-tuple(v_544),minnonce) else fail-any),1-proj-3-tuple(v_544),3-proj-3-tuple(v_540)) else fail-any) else fail-any) else fail-any)) in
        {86}let v_546: bitstring = catch-fail(symmetricstateunpack(v_545)) in
        {87}let v_547: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_546))) in
        {88}let v_548: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_547),2-proj-2-tuple(v_547),3-proj-3-tuple(v_546),msg_c(alice,bob))) in
        {89}let v_549: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_546))) in
        {90}let v_550: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_547))) && success?(1-proj-3-tuple(v_546))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then cipherstatepack(1-proj-2-tuple(v_549),increment_nonce(2-proj-2-tuple(v_547))) else fail-any) else fail-any)) in
        {91}let v_551: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_546)) && success?(1-proj-3-tuple(v_546))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then (if not-caught-fail(v_548) then (if not-caught-fail(v_550) then (v_550,v_548) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_552: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_551),2-proj-3-tuple(v_546),3-proj-3-tuple(v_546)))) in
        {93}let v_553: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_551)) && success?(symmetricstatepack(1-proj-2-tuple(v_551),2-proj-3-tuple(v_546),3-proj-3-tuple(v_546)))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then symmetricstatepack(1-proj-3-tuple(v_552),2-proj-3-tuple(v_552),hash(3-proj-3-tuple(v_552),2-proj-2-tuple(v_551))) else fail-any) else fail-any)) in
        {94}let v_554: bitstring = catch-fail((if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then (if not-caught-fail(v_553) then (v_553,2-proj-2-tuple(v_551)) else fail-any) else fail-any) else fail-any)) in
        {95}let v_555: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_554),2-proj-7-tuple(v_537),3-proj-7-tuple(v_537),4-proj-7-tuple(v_537),5-proj-7-tuple(v_537),6-proj-7-tuple(v_537),7-proj-7-tuple(v_537))) in
        {96}let v_556: bitstring = catch-fail(concat3(1-proj-3-tuple(v_538),2-proj-3-tuple(v_538),2-proj-2-tuple(v_554))) in
        {97}let (hs_557: handshakestate,re_558: key,message_c: bitstring) = (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-7-tuple(v_537))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if not-caught-fail(v_545) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (v_555,5-proj-7-tuple(v_537),v_556) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {98}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {99}insert statestore(alice,bob,statepack_d(hs_557));
        {100}out(pub, message_c)
    ) | (
        {129}get statestore(=alice,=bob,statepack_d(hs_559: handshakestate)) in
        {102}in(pub, message_d: bitstring);
        {103}let v_560: bitstring = catch-fail(handshakestateunpack(hs_559)) in
        {104}let v_561: bitstring = catch-fail(deconcat3(message_d)) in
        {105}let v_562: bool = catch-fail(true) in
        {106}let v_563: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_560))) in
        {107}let v_564: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {108}let v_565: aead = catch-fail(decrypt(1-proj-2-tuple(v_564),2-proj-2-tuple(v_564),3-proj-3-tuple(v_563),3-proj-3-tuple(v_561))) in
        {109}let v_566: bitstring = catch-fail(aeadunpack(v_565)) in
        {110}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {111}let v_568: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_564))) && success?(1-proj-3-tuple(v_563))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then cipherstatepack(1-proj-2-tuple(v_567),increment_nonce(2-proj-2-tuple(v_564))) else fail-any) else fail-any)) in
        {112}let v_569: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_561)) && (success?(3-proj-3-tuple(v_563)) && success?(1-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then (if not-caught-fail(v_565) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if not-caught-fail(v_568) then (v_568,3-proj-3-tuple(v_566),1-proj-3-tuple(v_566)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {113}let v_570: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) in
        {114}let v_571: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_561)) && success?(symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_570),hash(3-proj-3-tuple(v_570),3-proj-3-tuple(v_561))) else fail-any) else fail-any)) in
        {115}let v_572: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_561)) && success?(1-proj-7-tuple(v_560))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,2-proj-3-tuple(v_569),3-proj-3-tuple(v_569)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_573: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_572),2-proj-7-tuple(v_560),3-proj-7-tuple(v_560),4-proj-7-tuple(v_560),5-proj-7-tuple(v_560),6-proj-7-tuple(v_560),7-proj-7-tuple(v_560))) in
        {117}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_572))) in
        {118}let v_575: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_574),zero)) in
        {119}let v_576: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_574),zero)) in
        {120}let v_577: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_574),zero)) in
        {121}let v_578: bitstring = catch-fail((if success?(2-proj-3-tuple(v_574)) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (v_575,v_576,v_577) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_579: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_578)) then cipherstatepack(1-proj-3-tuple(v_578),minnonce) else fail-any)) in
        {123}let v_580: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_578)) then cipherstatepack(2-proj-3-tuple(v_578),minnonce) else fail-any)) in
        {124}let v_581: bitstring = catch-fail((if success?(1-proj-3-tuple(v_572)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (1-proj-3-tuple(v_572),v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {125}let (hs_582: handshakestate,re_583: key,plaintext_d: bitstring,valid_584: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-7-tuple(v_560))))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if not-caught-fail(v_562) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if (v_562 && 3-proj-3-tuple(v_572)) then (if not-caught-fail(v_573) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (v_573,getpublickey(3-proj-7-tuple(v_560)),2-proj-3-tuple(v_572),true,2-proj-3-tuple(v_581),3-proj-3-tuple(v_581)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {126}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_584);
        {127}insert statestore(alice,bob,statepack_e(hs_582));
        {128}event RecvEnd(valid_584)
    ) | (
        {130}event LeakS(phase0,alice);
        {131}out(pub, key_s(alice))
    ) | (
        {132}phase 1;
        {133}event LeakS(phase1,alice);
        {134}out(pub, key_s(alice))
    )
) | (
    {135}let s_585: keypair = keypairpack(empty,empty) in
    {136}out(pub, getpublickey(s_585));
    (
        {137}let e_586: keypair = keypairpack(empty,empty) in
        {138}let rs_587: key = empty in
        {139}let re_588: key = empty in
        {140}let v_589: bitstring = catch-fail(hash(somename,empty)) in
        {141}let v_590: key = catch-fail(v_589) in
        {142}let v_591: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {143}let v_592: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any))) in
        {144}let v_593: symmetricstate = catch-fail((if success?((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_592),hash(3-proj-3-tuple(v_592),empty)) else fail-any) else fail-any)) in
        {145}let hs_594: handshakestate = (if not-caught-fail(v_593) then handshakestatepack(v_593,s_585,e_586,rs_587,re_588,empty,true) else fail-any) in
        {146}insert statestore(alice,charlie,statepack_a(hs_594))
    ) | (
        {180}get statestore(=alice,=charlie,statepack_a(hs_595: handshakestate)) in
        {147}let v_596: bitstring = catch-fail(handshakestateunpack(hs_595)) in
        {148}let v_597: bitstring = catch-fail((empty,empty,empty)) in
        {149}let v_598: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {150}let v_599: keypair = catch-fail((if not-caught-fail(v_598) then keypairpack(v_598,key_e(alice,charlie)) else fail-any)) in
        {151}let v_600: bitstring = catch-fail(getpublickey(v_599)) in
        {152}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_596))) in
        {153}let v_602: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_596)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack(1-proj-3-tuple(v_601),2-proj-3-tuple(v_601),hash(3-proj-3-tuple(v_601),v_600)) else fail-any) else fail-any)) in
        {154}let v_603: key = catch-fail(dhexp(key_s(alice),g)) in
        {155}let v_604: keypair = catch-fail((if not-caught-fail(v_603) then keypairpack(v_603,key_s(alice)) else fail-any)) in
        {156}let v_605: bitstring = catch-fail(symmetricstateunpack(v_602)) in
        {157}let v_606: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_605))) in
        {158}let v_607: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_606),2-proj-2-tuple(v_606),3-proj-3-tuple(v_605),getpublickey(v_604))) in
        {159}let v_608: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_605))) in
        {160}let v_609: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_606))) && success?(1-proj-3-tuple(v_605))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then cipherstatepack(1-proj-2-tuple(v_608),increment_nonce(2-proj-2-tuple(v_606))) else fail-any) else fail-any)) in
        {161}let v_610: bitstring = catch-fail((if (success?(getpublickey(v_604)) && (success?(3-proj-3-tuple(v_605)) && success?(1-proj-3-tuple(v_605)))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then (if not-caught-fail(v_607) then (if not-caught-fail(v_609) then (v_609,v_607) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {162}let v_611: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_610),2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)))) in
        {163}let v_612: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_610)) && success?(symmetricstatepack(1-proj-2-tuple(v_610),2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),2-proj-2-tuple(v_610))) else fail-any) else fail-any)) in
        {164}let v_613: bitstring = catch-fail((if success?(getpublickey(v_604)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then (if not-caught-fail(v_612) then (v_612,2-proj-2-tuple(v_610)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {165}let v_614: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_613))) in
        {166}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {167}let v_616: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_615),2-proj-2-tuple(v_615),3-proj-3-tuple(v_614),msg_a(alice,charlie))) in
        {168}let v_617: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {169}let v_618: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_615))) && success?(1-proj-3-tuple(v_614))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then cipherstatepack(1-proj-2-tuple(v_617),increment_nonce(2-proj-2-tuple(v_615))) else fail-any) else fail-any)) in
        {170}let v_619: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_614)) && success?(1-proj-3-tuple(v_614))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then (if not-caught-fail(v_616) then (if not-caught-fail(v_618) then (v_618,v_616) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {171}let v_620: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_619),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) in
        {172}let v_621: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_619)) && success?(symmetricstatepack(1-proj-2-tuple(v_619),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),2-proj-2-tuple(v_619))) else fail-any) else fail-any)) in
        {173}let v_622: bitstring = catch-fail((if success?(1-proj-2-tuple(v_613)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then (if not-caught-fail(v_621) then (v_621,2-proj-2-tuple(v_619)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {174}let v_623: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_622),v_604,v_599,4-proj-7-tuple(v_596),5-proj-7-tuple(v_596),6-proj-7-tuple(v_596),7-proj-7-tuple(v_596))) in
        {175}let v_624: bitstring = catch-fail(concat3(v_600,2-proj-2-tuple(v_613),2-proj-2-tuple(v_622))) in
        {176}let (hs_625: handshakestate,re_626: key,message_a_627: bitstring) = (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-7-tuple(v_596))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (if not-caught-fail(v_602) then (if not-caught-fail(v_604) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_623) then (if not-caught-fail(v_624) then (v_623,5-proj-7-tuple(v_596),v_624) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {177}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {178}insert statestore(alice,charlie,statepack_b(hs_625));
        {179}out(pub, message_a_627)
    ) | (
        {209}get statestore(=alice,=charlie,statepack_b(hs_628: handshakestate)) in
        {181}in(pub, message_b_629: bitstring);
        {182}let v_630: bitstring = catch-fail(handshakestateunpack(hs_628)) in
        {183}let v_631: bitstring = catch-fail(deconcat3(message_b_629)) in
        {184}let v_632: bool = catch-fail(true) in
        {185}let v_633: key = catch-fail(1-proj-3-tuple(v_631)) in
        {186}let v_634: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_630))) in
        {187}let v_635: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_630)) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then symmetricstatepack(1-proj-3-tuple(v_634),2-proj-3-tuple(v_634),hash(3-proj-3-tuple(v_634),v_633)) else fail-any) else fail-any)) in
        {188}let v_636: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_630))) in
        {189}let v_637: bitstring = catch-fail(symmetricstateunpack(v_635)) in
        {190}let v_638: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_637),(if success?(3-proj-7-tuple(v_630)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_633) else fail-any) else fail-any))) in
        {191}let v_639: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_637),(if success?(3-proj-7-tuple(v_630)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_633) else fail-any) else fail-any))) in
        {192}let v_640: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_637),(if success?(3-proj-7-tuple(v_630)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_633) else fail-any) else fail-any))) in
        {193}let v_641: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_630)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_633) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_637))) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then (v_638,v_639,v_640) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_642: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_630)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then dhexp(2-proj-2-tuple(v_636),v_633) else fail-any) else fail-any)) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_641)) then cipherstatepack(2-proj-3-tuple(v_641),minnonce) else fail-any),1-proj-3-tuple(v_641),3-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any)) in
        {195}let v_643: bitstring = catch-fail(symmetricstateunpack(v_642)) in
        {196}let v_644: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_643))) in
        {197}let v_645: aead = catch-fail(decrypt(1-proj-2-tuple(v_644),2-proj-2-tuple(v_644),3-proj-3-tuple(v_643),3-proj-3-tuple(v_631))) in
        {198}let v_646: bitstring = catch-fail(aeadunpack(v_645)) in
        {199}let v_647: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_643))) in
        {200}let v_648: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_644))) && success?(1-proj-3-tuple(v_643))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then cipherstatepack(1-proj-2-tuple(v_647),increment_nonce(2-proj-2-tuple(v_644))) else fail-any) else fail-any)) in
        {201}let v_649: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_631)) && (success?(3-proj-3-tuple(v_643)) && success?(1-proj-3-tuple(v_643)))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then (if not-caught-fail(v_645) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if not-caught-fail(v_648) then (v_648,3-proj-3-tuple(v_646),1-proj-3-tuple(v_646)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_650: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_649),2-proj-3-tuple(v_643),3-proj-3-tuple(v_643)))) in
        {203}let v_651: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_631)) && success?(symmetricstatepack(1-proj-3-tuple(v_649),2-proj-3-tuple(v_643),3-proj-3-tuple(v_643)))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then symmetricstatepack(1-proj-3-tuple(v_650),2-proj-3-tuple(v_650),hash(3-proj-3-tuple(v_650),3-proj-3-tuple(v_631))) else fail-any) else fail-any)) in
        {204}let v_652: bitstring = catch-fail((if success?(3-proj-3-tuple(v_631)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if not-caught-fail(v_651) then (v_651,2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {205}let v_653: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_652),2-proj-7-tuple(v_630),3-proj-7-tuple(v_630),4-proj-7-tuple(v_630),v_633,6-proj-7-tuple(v_630),7-proj-7-tuple(v_630))) in
        {206}let (hs_654: handshakestate,re_655: key,plaintext_b_656: bitstring,valid_657: bool) = (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-7-tuple(v_630))))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if not-caught-fail(v_632) then (if not-caught-fail(v_633) then (if not-caught-fail(v_635) then (if not-caught-fail(v_642) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if (v_632 && 3-proj-3-tuple(v_652)) then (if not-caught-fail(v_653) then (v_653,getpublickey(3-proj-7-tuple(v_630)),2-proj-3-tuple(v_652),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {207}event RecvMsg(alice,charlie,stage_b,plaintext_b_656,valid_657);
        {208}insert statestore(alice,charlie,statepack_c(hs_654))
    ) | (
        {234}get statestore(=alice,=charlie,statepack_c(hs_658: handshakestate)) in
        {210}let v_659: bitstring = catch-fail(handshakestateunpack(hs_658)) in
        {211}let v_660: bitstring = catch-fail((empty,empty,empty)) in
        {212}let v_661: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_659))) in
        {213}let v_662: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_659))) in
        {214}let v_663: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_662),(if (success?(5-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {215}let v_664: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_662),(if (success?(5-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {216}let v_665: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_662),(if (success?(5-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {217}let v_666: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_659)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_662))) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (v_663,v_664,v_665) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_667: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_659)) && success?(2-proj-7-tuple(v_659))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_659)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_659))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_666)) then cipherstatepack(2-proj-3-tuple(v_666),minnonce) else fail-any),1-proj-3-tuple(v_666),3-proj-3-tuple(v_662)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_668: bitstring = catch-fail(symmetricstateunpack(v_667)) in
        {220}let v_669: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {221}let v_670: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_669),2-proj-2-tuple(v_669),3-proj-3-tuple(v_668),msg_c(alice,charlie))) in
        {222}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {223}let v_672: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_669))) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then cipherstatepack(1-proj-2-tuple(v_671),increment_nonce(2-proj-2-tuple(v_669))) else fail-any) else fail-any)) in
        {224}let v_673: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_668)) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then (if not-caught-fail(v_670) then (if not-caught-fail(v_672) then (v_672,v_670) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_674: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_673),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) in
        {226}let v_675: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_673)) && success?(symmetricstatepack(1-proj-2-tuple(v_673),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_674),hash(3-proj-3-tuple(v_674),2-proj-2-tuple(v_673))) else fail-any) else fail-any)) in
        {227}let v_676: bitstring = catch-fail((if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then (if not-caught-fail(v_675) then (v_675,2-proj-2-tuple(v_673)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_677: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_676),2-proj-7-tuple(v_659),3-proj-7-tuple(v_659),4-proj-7-tuple(v_659),5-proj-7-tuple(v_659),6-proj-7-tuple(v_659),7-proj-7-tuple(v_659))) in
        {229}let v_678: bitstring = catch-fail(concat3(1-proj-3-tuple(v_660),2-proj-3-tuple(v_660),2-proj-2-tuple(v_676))) in
        {230}let (hs_679: handshakestate,re_680: key,message_c_681: bitstring) = (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-7-tuple(v_659))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if not-caught-fail(v_667) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (v_677,5-proj-7-tuple(v_659),v_678) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {231}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {232}insert statestore(alice,charlie,statepack_d(hs_679));
        {233}out(pub, message_c_681)
    ) | (
        {262}get statestore(=alice,=charlie,statepack_d(hs_682: handshakestate)) in
        {235}in(pub, message_d_683: bitstring);
        {236}let v_684: bitstring = catch-fail(handshakestateunpack(hs_682)) in
        {237}let v_685: bitstring = catch-fail(deconcat3(message_d_683)) in
        {238}let v_686: bool = catch-fail(true) in
        {239}let v_687: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_684))) in
        {240}let v_688: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_687))) in
        {241}let v_689: aead = catch-fail(decrypt(1-proj-2-tuple(v_688),2-proj-2-tuple(v_688),3-proj-3-tuple(v_687),3-proj-3-tuple(v_685))) in
        {242}let v_690: bitstring = catch-fail(aeadunpack(v_689)) in
        {243}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_687))) in
        {244}let v_692: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_688))) && success?(1-proj-3-tuple(v_687))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then cipherstatepack(1-proj-2-tuple(v_691),increment_nonce(2-proj-2-tuple(v_688))) else fail-any) else fail-any)) in
        {245}let v_693: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_685)) && (success?(3-proj-3-tuple(v_687)) && success?(1-proj-3-tuple(v_687)))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-2-tuple(v_688))))) then (if not-caught-fail(v_689) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_692) then (v_692,3-proj-3-tuple(v_690),1-proj-3-tuple(v_690)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_694: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_687),3-proj-3-tuple(v_687)))) in
        {247}let v_695: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_685)) && success?(symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_687),3-proj-3-tuple(v_687)))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then symmetricstatepack(1-proj-3-tuple(v_694),2-proj-3-tuple(v_694),hash(3-proj-3-tuple(v_694),3-proj-3-tuple(v_685))) else fail-any) else fail-any)) in
        {248}let v_696: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_685)) && success?(1-proj-7-tuple(v_684))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {249}let v_697: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_696),2-proj-7-tuple(v_684),3-proj-7-tuple(v_684),4-proj-7-tuple(v_684),5-proj-7-tuple(v_684),6-proj-7-tuple(v_684),7-proj-7-tuple(v_684))) in
        {250}let v_698: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_696))) in
        {251}let v_699: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_698),zero)) in
        {252}let v_700: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_698),zero)) in
        {253}let v_701: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_698),zero)) in
        {254}let v_702: bitstring = catch-fail((if success?(2-proj-3-tuple(v_698)) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then (if not-caught-fail(v_701) then (v_699,v_700,v_701) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_703: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_702)) then cipherstatepack(1-proj-3-tuple(v_702),minnonce) else fail-any)) in
        {256}let v_704: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_702)) then cipherstatepack(2-proj-3-tuple(v_702),minnonce) else fail-any)) in
        {257}let v_705: bitstring = catch-fail((if success?(1-proj-3-tuple(v_696)) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (1-proj-3-tuple(v_696),v_703,v_704) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {258}let (hs_706: handshakestate,re_707: key,plaintext_d_708: bitstring,valid_709: bool,cs1_710: cipherstate,cs2_711: cipherstate) = (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-7-tuple(v_684))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then (if not-caught-fail(v_686) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if (v_686 && 3-proj-3-tuple(v_696)) then (if not-caught-fail(v_697) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (v_697,getpublickey(3-proj-7-tuple(v_684)),2-proj-3-tuple(v_696),true,2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {259}event RecvMsg(alice,charlie,stage_d,plaintext_d_708,valid_709);
        {260}insert statestore(alice,charlie,statepack_e(hs_706));
        {261}event RecvEnd(valid_709)
    ) | (
        {263}event LeakS(phase0,alice);
        {264}out(pub, key_s(alice))
    ) | (
        {265}phase 1;
        {266}event LeakS(phase1,alice);
        {267}out(pub, key_s(alice))
    )
) | (
    {268}let s_712: keypair = keypairpack(empty,empty) in
    (
        {269}let e_713: keypair = keypairpack(empty,empty) in
        {270}let rs_714: key = empty in
        {271}let re_715: key = empty in
        {272}let v_716: bitstring = catch-fail(hash(somename,empty)) in
        {273}let v_717: key = catch-fail(v_716) in
        {274}let v_718: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {275}let v_719: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then symmetricstatepack(v_718,v_717,v_716) else fail-any) else fail-any) else fail-any))) in
        {276}let v_720: symmetricstate = catch-fail((if success?((if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then symmetricstatepack(v_718,v_717,v_716) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),hash(3-proj-3-tuple(v_719),empty)) else fail-any) else fail-any)) in
        {277}let hs_721: handshakestate = (if not-caught-fail(v_720) then handshakestatepack(v_720,s_712,e_713,rs_714,re_715,empty,false) else fail-any) in
        {278}insert statestore(bob,alice,statepack_a(hs_721))
    ) | (
        {312}get statestore(=bob,=alice,statepack_a(hs_722: handshakestate)) in
        {279}in(pub, message_a_723: bitstring);
        {280}let v_724: bitstring = catch-fail(handshakestateunpack(hs_722)) in
        {281}let v_725: bitstring = catch-fail(deconcat3(message_a_723)) in
        {282}let v_726: bool = catch-fail(true) in
        {283}let v_727: key = catch-fail(1-proj-3-tuple(v_725)) in
        {284}let v_728: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_724))) in
        {285}let v_729: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_724)) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_728),hash(3-proj-3-tuple(v_728),v_727)) else fail-any) else fail-any)) in
        {286}let v_730: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {287}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {288}let v_732: aead = catch-fail(decrypt(1-proj-2-tuple(v_731),2-proj-2-tuple(v_731),3-proj-3-tuple(v_730),2-proj-3-tuple(v_725))) in
        {289}let v_733: bitstring = catch-fail(aeadunpack(v_732)) in
        {290}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {291}let v_735: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_731))) && success?(1-proj-3-tuple(v_730))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then cipherstatepack(1-proj-2-tuple(v_734),increment_nonce(2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {292}let v_736: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_725)) && (success?(3-proj-3-tuple(v_730)) && success?(1-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,3-proj-3-tuple(v_733),1-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_737: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) in
        {294}let v_738: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_725)) && success?(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_737),hash(3-proj-3-tuple(v_737),2-proj-3-tuple(v_725))) else fail-any) else fail-any)) in
        {295}let v_739: bitstring = catch-fail((if success?(2-proj-3-tuple(v_725)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if not-caught-fail(v_738) then (v_738,2-proj-3-tuple(v_736),3-proj-3-tuple(v_736)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_740: key = catch-fail(2-proj-3-tuple(v_739)) in
        {297}let v_741: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_739))) in
        {298}let v_742: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_741))) in
        {299}let v_743: aead = catch-fail(decrypt(1-proj-2-tuple(v_742),2-proj-2-tuple(v_742),3-proj-3-tuple(v_741),3-proj-3-tuple(v_725))) in
        {300}let v_744: bitstring = catch-fail(aeadunpack(v_743)) in
        {301}let v_745: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_741))) in
        {302}let v_746: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_742))) && success?(1-proj-3-tuple(v_741))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then cipherstatepack(1-proj-2-tuple(v_745),increment_nonce(2-proj-2-tuple(v_742))) else fail-any) else fail-any)) in
        {303}let v_747: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_725)) && (success?(3-proj-3-tuple(v_741)) && success?(1-proj-3-tuple(v_741)))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then (if not-caught-fail(v_743) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if not-caught-fail(v_746) then (v_746,3-proj-3-tuple(v_744),1-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {304}let v_748: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_747),2-proj-3-tuple(v_741),3-proj-3-tuple(v_741)))) in
        {305}let v_749: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_725)) && success?(symmetricstatepack(1-proj-3-tuple(v_747),2-proj-3-tuple(v_741),3-proj-3-tuple(v_741)))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack(1-proj-3-tuple(v_748),2-proj-3-tuple(v_748),hash(3-proj-3-tuple(v_748),3-proj-3-tuple(v_725))) else fail-any) else fail-any)) in
        {306}let v_750: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_725)) && success?(1-proj-3-tuple(v_739))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if not-caught-fail(v_749) then (v_749,2-proj-3-tuple(v_747),3-proj-3-tuple(v_747)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {307}let v_751: key = catch-fail(dhexp(key_s(alice),g)) in
        {308}let v_752: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_750),2-proj-7-tuple(v_724),3-proj-7-tuple(v_724),v_740,v_727,6-proj-7-tuple(v_724),7-proj-7-tuple(v_724))) in
        {309}let (hs_753: handshakestate,re_754: key,plaintext_a: bitstring,valid_755: bool) = (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-7-tuple(v_724))))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if not-caught-fail(v_740) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if ((3-proj-3-tuple(v_739) && 3-proj-3-tuple(v_750)) && (v_740 = getpublickey((if not-caught-fail(v_751) then keypairpack(v_751,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_752) then (v_752,getpublickey(3-proj-7-tuple(v_724)),2-proj-3-tuple(v_750),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {310}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_755);
        {311}insert statestore(bob,alice,statepack_b(hs_753))
    ) | (
        {342}get statestore(=bob,=alice,statepack_b(hs_756: handshakestate)) in
        {313}let v_757: bitstring = catch-fail(handshakestateunpack(hs_756)) in
        {314}let v_758: bitstring = catch-fail((empty,empty,empty)) in
        {315}let v_759: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {316}let v_760: keypair = catch-fail((if not-caught-fail(v_759) then keypairpack(v_759,key_e(bob,alice)) else fail-any)) in
        {317}let v_761: bitstring = catch-fail(getpublickey(v_760)) in
        {318}let v_762: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_757))) in
        {319}let v_763: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_757)) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_762),hash(3-proj-3-tuple(v_762),v_761)) else fail-any) else fail-any)) in
        {320}let v_764: bitstring = catch-fail(keypairunpack(v_760)) in
        {321}let v_765: bitstring = catch-fail(symmetricstateunpack(v_763)) in
        {322}let v_766: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_765),(if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {323}let v_767: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_765),(if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {324}let v_768: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_765),(if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {325}let v_769: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_765))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (if not-caught-fail(v_768) then (v_766,v_767,v_768) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {326}let v_770: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any)) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_769)) then cipherstatepack(2-proj-3-tuple(v_769),minnonce) else fail-any),1-proj-3-tuple(v_769),3-proj-3-tuple(v_765)) else fail-any) else fail-any) else fail-any)) in
        {327}let v_771: bitstring = catch-fail(symmetricstateunpack(v_770)) in
        {328}let v_772: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {329}let v_773: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_772),2-proj-2-tuple(v_772),3-proj-3-tuple(v_771),msg_b(bob,alice))) in
        {330}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {331}let v_775: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_772))) && success?(1-proj-3-tuple(v_771))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then cipherstatepack(1-proj-2-tuple(v_774),increment_nonce(2-proj-2-tuple(v_772))) else fail-any) else fail-any)) in
        {332}let v_776: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_771)) && success?(1-proj-3-tuple(v_771))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_773) then (if not-caught-fail(v_775) then (v_775,v_773) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let v_777: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_776),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) in
        {334}let v_778: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_776)) && success?(symmetricstatepack(1-proj-2-tuple(v_776),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then symmetricstatepack(1-proj-3-tuple(v_777),2-proj-3-tuple(v_777),hash(3-proj-3-tuple(v_777),2-proj-2-tuple(v_776))) else fail-any) else fail-any)) in
        {335}let v_779: bitstring = catch-fail((if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,2-proj-2-tuple(v_776)) else fail-any) else fail-any) else fail-any)) in
        {336}let v_780: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_779),2-proj-7-tuple(v_757),v_760,4-proj-7-tuple(v_757),5-proj-7-tuple(v_757),6-proj-7-tuple(v_757),7-proj-7-tuple(v_757))) in
        {337}let v_781: bitstring = catch-fail(concat3(v_761,2-proj-3-tuple(v_758),2-proj-2-tuple(v_779))) in
        {338}let (hs_782: handshakestate,re_783: key,message_b_784: bitstring) = (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-7-tuple(v_757))))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (if not-caught-fail(v_763) then (if not-caught-fail(v_770) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (v_780,5-proj-7-tuple(v_757),v_781) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {339}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {340}insert statestore(bob,alice,statepack_c(hs_782));
        {341}out(pub, message_b_784)
    ) | (
        {368}get statestore(=bob,=alice,statepack_c(hs_785: handshakestate)) in
        {343}in(pub, message_c_786: bitstring);
        {344}let v_787: bitstring = catch-fail(handshakestateunpack(hs_785)) in
        {345}let v_788: bitstring = catch-fail(deconcat3(message_c_786)) in
        {346}let v_789: bool = catch-fail(true) in
        {347}let v_790: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_787))) in
        {348}let v_791: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_787))) in
        {349}let v_792: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_791),(if (success?(4-proj-7-tuple(v_787)) && success?(3-proj-7-tuple(v_787))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),4-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {350}let v_793: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_791),(if (success?(4-proj-7-tuple(v_787)) && success?(3-proj-7-tuple(v_787))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),4-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {351}let v_794: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_791),(if (success?(4-proj-7-tuple(v_787)) && success?(3-proj-7-tuple(v_787))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),4-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {352}let v_795: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_787)) && success?(3-proj-7-tuple(v_787))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),4-proj-7-tuple(v_787)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_791))) then (if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (if not-caught-fail(v_794) then (v_792,v_793,v_794) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {353}let v_796: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_787)) && success?(3-proj-7-tuple(v_787))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then dhexp(2-proj-2-tuple(v_790),4-proj-7-tuple(v_787)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_787))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_795)) then cipherstatepack(2-proj-3-tuple(v_795),minnonce) else fail-any),1-proj-3-tuple(v_795),3-proj-3-tuple(v_791)) else fail-any) else fail-any) else fail-any)) in
        {354}let v_797: bitstring = catch-fail(symmetricstateunpack(v_796)) in
        {355}let v_798: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_797))) in
        {356}let v_799: aead = catch-fail(decrypt(1-proj-2-tuple(v_798),2-proj-2-tuple(v_798),3-proj-3-tuple(v_797),3-proj-3-tuple(v_788))) in
        {357}let v_800: bitstring = catch-fail(aeadunpack(v_799)) in
        {358}let v_801: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_797))) in
        {359}let v_802: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_798))) && success?(1-proj-3-tuple(v_797))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then cipherstatepack(1-proj-2-tuple(v_801),increment_nonce(2-proj-2-tuple(v_798))) else fail-any) else fail-any)) in
        {360}let v_803: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_788)) && (success?(3-proj-3-tuple(v_797)) && success?(1-proj-3-tuple(v_797)))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then (if not-caught-fail(v_799) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then (if not-caught-fail(v_802) then (v_802,3-proj-3-tuple(v_800),1-proj-3-tuple(v_800)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let v_804: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_803),2-proj-3-tuple(v_797),3-proj-3-tuple(v_797)))) in
        {362}let v_805: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_788)) && success?(symmetricstatepack(1-proj-3-tuple(v_803),2-proj-3-tuple(v_797),3-proj-3-tuple(v_797)))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then symmetricstatepack(1-proj-3-tuple(v_804),2-proj-3-tuple(v_804),hash(3-proj-3-tuple(v_804),3-proj-3-tuple(v_788))) else fail-any) else fail-any)) in
        {363}let v_806: bitstring = catch-fail((if success?(3-proj-3-tuple(v_788)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if not-caught-fail(v_805) then (v_805,2-proj-3-tuple(v_803),3-proj-3-tuple(v_803)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {364}let v_807: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_806),2-proj-7-tuple(v_787),3-proj-7-tuple(v_787),4-proj-7-tuple(v_787),5-proj-7-tuple(v_787),6-proj-7-tuple(v_787),7-proj-7-tuple(v_787))) in
        {365}let (hs_808: handshakestate,re_809: key,plaintext_c: bitstring,valid_810: bool) = (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-7-tuple(v_787))))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if not-caught-fail(v_789) then (if not-caught-fail(v_796) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if (v_789 && 3-proj-3-tuple(v_806)) then (if not-caught-fail(v_807) then (v_807,getpublickey(3-proj-7-tuple(v_787)),2-proj-3-tuple(v_806),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {366}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_810);
        {367}insert statestore(bob,alice,statepack_d(hs_808))
    ) | (
        {394}get statestore(=bob,=alice,statepack_d(hs_811: handshakestate)) in
        {369}let v_812: bitstring = catch-fail(handshakestateunpack(hs_811)) in
        {370}let v_813: bitstring = catch-fail((empty,empty,empty)) in
        {371}let v_814: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_812))) in
        {372}let v_815: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_814))) in
        {373}let v_816: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_815),2-proj-2-tuple(v_815),3-proj-3-tuple(v_814),msg_d(bob,alice))) in
        {374}let v_817: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_814))) in
        {375}let v_818: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_815))) && success?(1-proj-3-tuple(v_814))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-2-tuple(v_817))))) then cipherstatepack(1-proj-2-tuple(v_817),increment_nonce(2-proj-2-tuple(v_815))) else fail-any) else fail-any)) in
        {376}let v_819: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_814)) && success?(1-proj-3-tuple(v_814))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-2-tuple(v_815))))) then (if not-caught-fail(v_816) then (if not-caught-fail(v_818) then (v_818,v_816) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_820: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_819),2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)))) in
        {378}let v_821: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_819)) && success?(symmetricstatepack(1-proj-2-tuple(v_819),2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then symmetricstatepack(1-proj-3-tuple(v_820),2-proj-3-tuple(v_820),hash(3-proj-3-tuple(v_820),2-proj-2-tuple(v_819))) else fail-any) else fail-any)) in
        {379}let v_822: bitstring = catch-fail((if success?(1-proj-7-tuple(v_812)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-2-tuple(v_819))))) then (if not-caught-fail(v_821) then (v_821,2-proj-2-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_823: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_822),2-proj-7-tuple(v_812),3-proj-7-tuple(v_812),4-proj-7-tuple(v_812),5-proj-7-tuple(v_812),6-proj-7-tuple(v_812),7-proj-7-tuple(v_812))) in
        {381}let v_824: bitstring = catch-fail(concat3(1-proj-3-tuple(v_813),2-proj-3-tuple(v_813),2-proj-2-tuple(v_822))) in
        {382}let v_825: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_822))) in
        {383}let v_826: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_825),zero)) in
        {384}let v_827: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_825),zero)) in
        {385}let v_828: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_825),zero)) in
        {386}let v_829: bitstring = catch-fail((if success?(2-proj-3-tuple(v_825)) then (if not-caught-fail(v_826) then (if not-caught-fail(v_827) then (if not-caught-fail(v_828) then (v_826,v_827,v_828) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_830: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_829)) then cipherstatepack(1-proj-3-tuple(v_829),minnonce) else fail-any)) in
        {388}let v_831: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_829)) then cipherstatepack(2-proj-3-tuple(v_829),minnonce) else fail-any)) in
        {389}let v_832: bitstring = catch-fail((if success?(1-proj-2-tuple(v_822)) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then (1-proj-2-tuple(v_822),v_830,v_831) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let (hs_833: handshakestate,re_834: key,message_d_835: bitstring,cs1_836: cipherstate,cs2_837: cipherstate) = (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-7-tuple(v_812))))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-2-tuple(v_822))))) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (v_823,5-proj-7-tuple(v_812),v_824,2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {391}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {392}insert statestore(bob,alice,statepack_e(hs_833));
        {393}out(pub, message_d_835)
    ) | (
        {395}event LeakS(phase0,bob);
        {396}out(pub, key_s(bob))
    ) | (
        {397}phase 1;
        {398}event LeakS(phase1,bob);
        {399}out(pub, key_s(bob))
    )
) | (
    {400}let s_838: keypair = keypairpack(empty,empty) in
    (
        {401}let e_839: keypair = keypairpack(empty,empty) in
        {402}let rs_840: key = empty in
        {403}let re_841: key = empty in
        {404}let v_842: bitstring = catch-fail(hash(somename,empty)) in
        {405}let v_843: key = catch-fail(v_842) in
        {406}let v_844: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {407}let v_845: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then symmetricstatepack(v_844,v_843,v_842) else fail-any) else fail-any) else fail-any))) in
        {408}let v_846: symmetricstate = catch-fail((if success?((if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then symmetricstatepack(v_844,v_843,v_842) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),empty)) else fail-any) else fail-any)) in
        {409}let hs_847: handshakestate = (if not-caught-fail(v_846) then handshakestatepack(v_846,s_838,e_839,rs_840,re_841,empty,false) else fail-any) in
        {410}insert statestore(bob,charlie,statepack_a(hs_847))
    ) | (
        {444}get statestore(=bob,=charlie,statepack_a(hs_848: handshakestate)) in
        {411}in(pub, message_a_849: bitstring);
        {412}let v_850: bitstring = catch-fail(handshakestateunpack(hs_848)) in
        {413}let v_851: bitstring = catch-fail(deconcat3(message_a_849)) in
        {414}let v_852: bool = catch-fail(true) in
        {415}let v_853: key = catch-fail(1-proj-3-tuple(v_851)) in
        {416}let v_854: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_850))) in
        {417}let v_855: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_850)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_854),hash(3-proj-3-tuple(v_854),v_853)) else fail-any) else fail-any)) in
        {418}let v_856: bitstring = catch-fail(symmetricstateunpack(v_855)) in
        {419}let v_857: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_856))) in
        {420}let v_858: aead = catch-fail(decrypt(1-proj-2-tuple(v_857),2-proj-2-tuple(v_857),3-proj-3-tuple(v_856),2-proj-3-tuple(v_851))) in
        {421}let v_859: bitstring = catch-fail(aeadunpack(v_858)) in
        {422}let v_860: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_856))) in
        {423}let v_861: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_857))) && success?(1-proj-3-tuple(v_856))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-2-tuple(v_860))))) then cipherstatepack(1-proj-2-tuple(v_860),increment_nonce(2-proj-2-tuple(v_857))) else fail-any) else fail-any)) in
        {424}let v_862: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_851)) && (success?(3-proj-3-tuple(v_856)) && success?(1-proj-3-tuple(v_856)))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then (if not-caught-fail(v_858) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if not-caught-fail(v_861) then (v_861,3-proj-3-tuple(v_859),1-proj-3-tuple(v_859)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {425}let v_863: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_862),2-proj-3-tuple(v_856),3-proj-3-tuple(v_856)))) in
        {426}let v_864: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_851)) && success?(symmetricstatepack(1-proj-3-tuple(v_862),2-proj-3-tuple(v_856),3-proj-3-tuple(v_856)))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),hash(3-proj-3-tuple(v_863),2-proj-3-tuple(v_851))) else fail-any) else fail-any)) in
        {427}let v_865: bitstring = catch-fail((if success?(2-proj-3-tuple(v_851)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if not-caught-fail(v_864) then (v_864,2-proj-3-tuple(v_862),3-proj-3-tuple(v_862)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {428}let v_866: key = catch-fail(2-proj-3-tuple(v_865)) in
        {429}let v_867: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_865))) in
        {430}let v_868: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_867))) in
        {431}let v_869: aead = catch-fail(decrypt(1-proj-2-tuple(v_868),2-proj-2-tuple(v_868),3-proj-3-tuple(v_867),3-proj-3-tuple(v_851))) in
        {432}let v_870: bitstring = catch-fail(aeadunpack(v_869)) in
        {433}let v_871: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_867))) in
        {434}let v_872: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_868))) && success?(1-proj-3-tuple(v_867))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then cipherstatepack(1-proj-2-tuple(v_871),increment_nonce(2-proj-2-tuple(v_868))) else fail-any) else fail-any)) in
        {435}let v_873: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_851)) && (success?(3-proj-3-tuple(v_867)) && success?(1-proj-3-tuple(v_867)))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-2-tuple(v_868))))) then (if not-caught-fail(v_869) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if not-caught-fail(v_872) then (v_872,3-proj-3-tuple(v_870),1-proj-3-tuple(v_870)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_874: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_873),2-proj-3-tuple(v_867),3-proj-3-tuple(v_867)))) in
        {437}let v_875: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_851)) && success?(symmetricstatepack(1-proj-3-tuple(v_873),2-proj-3-tuple(v_867),3-proj-3-tuple(v_867)))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack(1-proj-3-tuple(v_874),2-proj-3-tuple(v_874),hash(3-proj-3-tuple(v_874),3-proj-3-tuple(v_851))) else fail-any) else fail-any)) in
        {438}let v_876: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_851)) && success?(1-proj-3-tuple(v_865))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if not-caught-fail(v_875) then (v_875,2-proj-3-tuple(v_873),3-proj-3-tuple(v_873)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_877: key = catch-fail(dhexp(key_s(charlie),g)) in
        {440}let v_878: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_876),2-proj-7-tuple(v_850),3-proj-7-tuple(v_850),v_866,v_853,6-proj-7-tuple(v_850),7-proj-7-tuple(v_850))) in
        {441}let (hs_879: handshakestate,re_880: key,plaintext_a_881: bitstring,valid_882: bool) = (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-7-tuple(v_850))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if not-caught-fail(v_852) then (if not-caught-fail(v_853) then (if not-caught-fail(v_855) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_866) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then (if ((3-proj-3-tuple(v_865) && 3-proj-3-tuple(v_876)) && (v_866 = getpublickey((if not-caught-fail(v_877) then keypairpack(v_877,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_878) then (v_878,getpublickey(3-proj-7-tuple(v_850)),2-proj-3-tuple(v_876),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {442}event RecvMsg(bob,charlie,stage_a,plaintext_a_881,valid_882);
        {443}insert statestore(bob,charlie,statepack_b(hs_879))
    ) | (
        {474}get statestore(=bob,=charlie,statepack_b(hs_883: handshakestate)) in
        {445}let v_884: bitstring = catch-fail(handshakestateunpack(hs_883)) in
        {446}let v_885: bitstring = catch-fail((empty,empty,empty)) in
        {447}let v_886: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {448}let v_887: keypair = catch-fail((if not-caught-fail(v_886) then keypairpack(v_886,key_e(bob,charlie)) else fail-any)) in
        {449}let v_888: bitstring = catch-fail(getpublickey(v_887)) in
        {450}let v_889: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_884))) in
        {451}let v_890: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_884)) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then symmetricstatepack(1-proj-3-tuple(v_889),2-proj-3-tuple(v_889),hash(3-proj-3-tuple(v_889),v_888)) else fail-any) else fail-any)) in
        {452}let v_891: bitstring = catch-fail(keypairunpack(v_887)) in
        {453}let v_892: bitstring = catch-fail(symmetricstateunpack(v_890)) in
        {454}let v_893: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_892),(if success?(5-proj-7-tuple(v_884)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_884)) else fail-any) else fail-any))) in
        {455}let v_894: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_892),(if success?(5-proj-7-tuple(v_884)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_884)) else fail-any) else fail-any))) in
        {456}let v_895: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_892),(if success?(5-proj-7-tuple(v_884)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_884)) else fail-any) else fail-any))) in
        {457}let v_896: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_884)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_884)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_892))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_894) then (if not-caught-fail(v_895) then (v_893,v_894,v_895) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {458}let v_897: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_884)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_884)) else fail-any) else fail-any)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_896)) then cipherstatepack(2-proj-3-tuple(v_896),minnonce) else fail-any),1-proj-3-tuple(v_896),3-proj-3-tuple(v_892)) else fail-any) else fail-any) else fail-any)) in
        {459}let v_898: bitstring = catch-fail(symmetricstateunpack(v_897)) in
        {460}let v_899: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_898))) in
        {461}let v_900: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_899),2-proj-2-tuple(v_899),3-proj-3-tuple(v_898),msg_b(bob,charlie))) in
        {462}let v_901: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_898))) in
        {463}let v_902: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_899))) && success?(1-proj-3-tuple(v_898))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then cipherstatepack(1-proj-2-tuple(v_901),increment_nonce(2-proj-2-tuple(v_899))) else fail-any) else fail-any)) in
        {464}let v_903: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_898)) && success?(1-proj-3-tuple(v_898))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then (if not-caught-fail(v_900) then (if not-caught-fail(v_902) then (v_902,v_900) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {465}let v_904: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_903),2-proj-3-tuple(v_898),3-proj-3-tuple(v_898)))) in
        {466}let v_905: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_903)) && success?(symmetricstatepack(1-proj-2-tuple(v_903),2-proj-3-tuple(v_898),3-proj-3-tuple(v_898)))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then symmetricstatepack(1-proj-3-tuple(v_904),2-proj-3-tuple(v_904),hash(3-proj-3-tuple(v_904),2-proj-2-tuple(v_903))) else fail-any) else fail-any)) in
        {467}let v_906: bitstring = catch-fail((if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then (if not-caught-fail(v_905) then (v_905,2-proj-2-tuple(v_903)) else fail-any) else fail-any) else fail-any)) in
        {468}let v_907: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_906),2-proj-7-tuple(v_884),v_887,4-proj-7-tuple(v_884),5-proj-7-tuple(v_884),6-proj-7-tuple(v_884),7-proj-7-tuple(v_884))) in
        {469}let v_908: bitstring = catch-fail(concat3(v_888,2-proj-3-tuple(v_885),2-proj-2-tuple(v_906))) in
        {470}let (hs_909: handshakestate,re_910: key,message_b_911: bitstring) = (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-7-tuple(v_884))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if not-caught-fail(v_887) then (if not-caught-fail(v_888) then (if not-caught-fail(v_890) then (if not-caught-fail(v_897) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then (if not-caught-fail(v_907) then (if not-caught-fail(v_908) then (v_907,5-proj-7-tuple(v_884),v_908) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {471}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {472}insert statestore(bob,charlie,statepack_c(hs_909));
        {473}out(pub, message_b_911)
    ) | (
        {500}get statestore(=bob,=charlie,statepack_c(hs_912: handshakestate)) in
        {475}in(pub, message_c_913: bitstring);
        {476}let v_914: bitstring = catch-fail(handshakestateunpack(hs_912)) in
        {477}let v_915: bitstring = catch-fail(deconcat3(message_c_913)) in
        {478}let v_916: bool = catch-fail(true) in
        {479}let v_917: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_914))) in
        {480}let v_918: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_914))) in
        {481}let v_919: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_918),(if (success?(4-proj-7-tuple(v_914)) && success?(3-proj-7-tuple(v_914))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),4-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {482}let v_920: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_918),(if (success?(4-proj-7-tuple(v_914)) && success?(3-proj-7-tuple(v_914))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),4-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {483}let v_921: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_918),(if (success?(4-proj-7-tuple(v_914)) && success?(3-proj-7-tuple(v_914))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),4-proj-7-tuple(v_914)) else fail-any) else fail-any))) in
        {484}let v_922: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_914)) && success?(3-proj-7-tuple(v_914))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),4-proj-7-tuple(v_914)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_918))) then (if not-caught-fail(v_919) then (if not-caught-fail(v_920) then (if not-caught-fail(v_921) then (v_919,v_920,v_921) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_923: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_914)) && success?(3-proj-7-tuple(v_914))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then dhexp(2-proj-2-tuple(v_917),4-proj-7-tuple(v_914)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_914))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_922)) then cipherstatepack(2-proj-3-tuple(v_922),minnonce) else fail-any),1-proj-3-tuple(v_922),3-proj-3-tuple(v_918)) else fail-any) else fail-any) else fail-any)) in
        {486}let v_924: bitstring = catch-fail(symmetricstateunpack(v_923)) in
        {487}let v_925: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {488}let v_926: aead = catch-fail(decrypt(1-proj-2-tuple(v_925),2-proj-2-tuple(v_925),3-proj-3-tuple(v_924),3-proj-3-tuple(v_915))) in
        {489}let v_927: bitstring = catch-fail(aeadunpack(v_926)) in
        {490}let v_928: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {491}let v_929: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_925))) && success?(1-proj-3-tuple(v_924))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then cipherstatepack(1-proj-2-tuple(v_928),increment_nonce(2-proj-2-tuple(v_925))) else fail-any) else fail-any)) in
        {492}let v_930: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_915)) && (success?(3-proj-3-tuple(v_924)) && success?(1-proj-3-tuple(v_924)))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-2-tuple(v_925))))) then (if not-caught-fail(v_926) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if not-caught-fail(v_929) then (v_929,3-proj-3-tuple(v_927),1-proj-3-tuple(v_927)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {493}let v_931: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_930),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) in
        {494}let v_932: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_915)) && success?(symmetricstatepack(1-proj-3-tuple(v_930),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then symmetricstatepack(1-proj-3-tuple(v_931),2-proj-3-tuple(v_931),hash(3-proj-3-tuple(v_931),3-proj-3-tuple(v_915))) else fail-any) else fail-any)) in
        {495}let v_933: bitstring = catch-fail((if success?(3-proj-3-tuple(v_915)) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if not-caught-fail(v_932) then (v_932,2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {496}let v_934: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_933),2-proj-7-tuple(v_914),3-proj-7-tuple(v_914),4-proj-7-tuple(v_914),5-proj-7-tuple(v_914),6-proj-7-tuple(v_914),7-proj-7-tuple(v_914))) in
        {497}let (hs_935: handshakestate,re_936: key,plaintext_c_937: bitstring,valid_938: bool) = (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-7-tuple(v_914))))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if not-caught-fail(v_916) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if (v_916 && 3-proj-3-tuple(v_933)) then (if not-caught-fail(v_934) then (v_934,getpublickey(3-proj-7-tuple(v_914)),2-proj-3-tuple(v_933),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {498}event RecvMsg(bob,charlie,stage_c,plaintext_c_937,valid_938);
        {499}insert statestore(bob,charlie,statepack_d(hs_935))
    ) | (
        {526}get statestore(=bob,=charlie,statepack_d(hs_939: handshakestate)) in
        {501}let v_940: bitstring = catch-fail(handshakestateunpack(hs_939)) in
        {502}let v_941: bitstring = catch-fail((empty,empty,empty)) in
        {503}let v_942: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_940))) in
        {504}let v_943: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_942))) in
        {505}let v_944: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_943),2-proj-2-tuple(v_943),3-proj-3-tuple(v_942),msg_d(bob,charlie))) in
        {506}let v_945: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_942))) in
        {507}let v_946: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_943))) && success?(1-proj-3-tuple(v_942))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then cipherstatepack(1-proj-2-tuple(v_945),increment_nonce(2-proj-2-tuple(v_943))) else fail-any) else fail-any)) in
        {508}let v_947: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_942)) && success?(1-proj-3-tuple(v_942))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then (if not-caught-fail(v_944) then (if not-caught-fail(v_946) then (v_946,v_944) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_948: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_947),2-proj-3-tuple(v_942),3-proj-3-tuple(v_942)))) in
        {510}let v_949: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_947)) && success?(symmetricstatepack(1-proj-2-tuple(v_947),2-proj-3-tuple(v_942),3-proj-3-tuple(v_942)))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then symmetricstatepack(1-proj-3-tuple(v_948),2-proj-3-tuple(v_948),hash(3-proj-3-tuple(v_948),2-proj-2-tuple(v_947))) else fail-any) else fail-any)) in
        {511}let v_950: bitstring = catch-fail((if success?(1-proj-7-tuple(v_940)) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_949) then (v_949,2-proj-2-tuple(v_947)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_951: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_950),2-proj-7-tuple(v_940),3-proj-7-tuple(v_940),4-proj-7-tuple(v_940),5-proj-7-tuple(v_940),6-proj-7-tuple(v_940),7-proj-7-tuple(v_940))) in
        {513}let v_952: bitstring = catch-fail(concat3(1-proj-3-tuple(v_941),2-proj-3-tuple(v_941),2-proj-2-tuple(v_950))) in
        {514}let v_953: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_950))) in
        {515}let v_954: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_953),zero)) in
        {516}let v_955: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_953),zero)) in
        {517}let v_956: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_953),zero)) in
        {518}let v_957: bitstring = catch-fail((if success?(2-proj-3-tuple(v_953)) then (if not-caught-fail(v_954) then (if not-caught-fail(v_955) then (if not-caught-fail(v_956) then (v_954,v_955,v_956) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {519}let v_958: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_957)) then cipherstatepack(1-proj-3-tuple(v_957),minnonce) else fail-any)) in
        {520}let v_959: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_957)) then cipherstatepack(2-proj-3-tuple(v_957),minnonce) else fail-any)) in
        {521}let v_960: bitstring = catch-fail((if success?(1-proj-2-tuple(v_950)) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if not-caught-fail(v_958) then (if not-caught-fail(v_959) then (1-proj-2-tuple(v_950),v_958,v_959) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {522}let (hs_961: handshakestate,re_962: key,message_d_963: bitstring,cs1_964: cipherstate,cs2_965: cipherstate) = (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-7-tuple(v_940))))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-2-tuple(v_950))))) then (if not-caught-fail(v_951) then (if not-caught-fail(v_952) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (v_951,5-proj-7-tuple(v_940),v_952,2-proj-3-tuple(v_960),3-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {523}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {524}insert statestore(bob,charlie,statepack_e(hs_961));
        {525}out(pub, message_d_963)
    ) | (
        {527}event LeakS(phase0,bob);
        {528}out(pub, key_s(bob))
    ) | (
        {529}phase 1;
        {530}event LeakS(phase1,bob);
        {531}out(pub, key_s(bob))
    )
) | (
    {532}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 138 rules in the queue.
400 rules inserted. The rule base contains 385 rules. 66 rules in the queue.
600 rules inserted. The rule base contains 561 rules. 147 rules in the queue.
800 rules inserted. The rule base contains 724 rules. 133 rules in the queue.
1000 rules inserted. The rule base contains 876 rules. 122 rules in the queue.
1200 rules inserted. The rule base contains 1007 rules. 90 rules in the queue.
1400 rules inserted. The rule base contains 1123 rules. 108 rules in the queue.
1600 rules inserted. The rule base contains 1266 rules. 118 rules in the queue.
1800 rules inserted. The rule base contains 1367 rules. 106 rules in the queue.
2000 rules inserted. The rule base contains 1485 rules. 130 rules in the queue.
2200 rules inserted. The rule base contains 1610 rules. 146 rules in the queue.
2400 rules inserted. The rule base contains 1775 rules. 176 rules in the queue.
2600 rules inserted. The rule base contains 1895 rules. 151 rules in the queue.
2800 rules inserted. The rule base contains 1993 rules. 113 rules in the queue.
3000 rules inserted. The rule base contains 2115 rules. 103 rules in the queue.
3200 rules inserted. The rule base contains 2189 rules. 22 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {179}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {312}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {310}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {179}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {312}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {310}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {179}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {312}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {310}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {179}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {312}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {311}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {342}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {339}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {340}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {178}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {179}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {312}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {311}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {342}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {339}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {341}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {209}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {181}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {208}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {343}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {366}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {179}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {312}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {311}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {342}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {339}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {340}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {178}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {179}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {312}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {311}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {342}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {339}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {341}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {209}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {181}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {208}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {343}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {366}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {179}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {312}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {311}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {342}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {339}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {340}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {178}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {180}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {177}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {179}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {312}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {311}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {342}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {339}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {341}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {209}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {181}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {208}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {343}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {366}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
