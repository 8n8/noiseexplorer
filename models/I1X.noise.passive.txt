File "I1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "I1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "I1X.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "I1X.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 294, character 6:
Warning: identifier s rebound.
File "I1X.noise.passive.pv", line 295, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 295, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "I1X.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "I1X.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 310, character 6:
Warning: identifier s rebound.
File "I1X.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "I1X.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 351, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X.noise.passive.pv", line 352, characters 6-7:
Warning: identifier rs rebound.
File "I1X.noise.passive.pv", line 353, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 355, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 363, characters 6-7:
Warning: identifier re rebound.
File "I1X.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 366, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 367, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 367, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X.noise.passive.pv", line 368, characters 6-7:
Warning: identifier rs rebound.
File "I1X.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 370, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 372, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 380, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 383, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 391, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 393, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 401, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 403, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 391, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 393, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 363, characters 6-7:
Warning: identifier re rebound.
File "I1X.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 366, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 367, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 367, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X.noise.passive.pv", line 368, characters 6-7:
Warning: identifier rs rebound.
File "I1X.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 370, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 372, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 544, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "I1X.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "I1X.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 294, character 6:
Warning: identifier s rebound.
File "I1X.noise.passive.pv", line 295, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 295, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 632, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 401, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 403, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 624, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 617, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 380, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 383, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 609, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "I1X.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "I1X.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 310, character 6:
Warning: identifier s rebound.
File "I1X.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 602, characters 8-9:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "I1X.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 351, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X.noise.passive.pv", line 352, characters 6-7:
Warning: identifier rs rebound.
File "I1X.noise.passive.pv", line 353, characters 7-8:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 355, characters 7-8:
Warning: identifier hs rebound.
File "I1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let s_548: keypair = keypairpack(empty,empty) in
    {6}out(pub, getpublickey(s_548));
    (
        {7}let e_549: keypair = keypairpack(empty,empty) in
        {8}let rs_550: key = empty in
        {9}let re_551: key = empty in
        {10}let v_552: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_553: key = catch-fail(v_552) in
        {12}let v_554: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_555: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then symmetricstatepack(v_554,v_553,v_552) else fail-any) else fail-any) else fail-any))) in
        {14}let v_556: symmetricstate = catch-fail((if success?((if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then symmetricstatepack(v_554,v_553,v_552) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_555),hash(3-proj-3-tuple(v_555),empty)) else fail-any) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_556) then handshakestatepack(v_556,s_548,e_549,rs_550,re_551,empty,true) else fail-any) in
        {16}insert statestore(me,them,statepack_a(hs))
    ) | (
        {51}get statestore(=me,=them,statepack_a(hs_557: handshakestate)) in
        {17}let v_558: bitstring = catch-fail(handshakestateunpack(hs_557)) in
        {18}let v_559: bitstring = catch-fail((empty,empty,empty)) in
        {19}new key_e[me,them]: key;
        {20}let v_560: key = catch-fail(dhexp(key_e,g)) in
        {21}let v_561: keypair = catch-fail((if not-caught-fail(v_560) then keypairpack(v_560,key_e) else fail-any)) in
        {22}let v_562: bitstring = catch-fail(getpublickey(v_561)) in
        {23}let v_563: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_558))) in
        {24}let v_564: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_558)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then symmetricstatepack(1-proj-3-tuple(v_563),2-proj-3-tuple(v_563),hash(3-proj-3-tuple(v_563),v_562)) else fail-any) else fail-any)) in
        {25}let v_565: key = catch-fail(dhexp(key_s(me),g)) in
        {26}let v_566: keypair = catch-fail((if not-caught-fail(v_565) then keypairpack(v_565,key_s(me)) else fail-any)) in
        {27}let v_567: bitstring = catch-fail(symmetricstateunpack(v_564)) in
        {28}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {29}let v_569: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_568),2-proj-2-tuple(v_568),3-proj-3-tuple(v_567),getpublickey(v_566))) in
        {30}let v_570: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {31}let v_571: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_568))) && success?(1-proj-3-tuple(v_567))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then cipherstatepack(1-proj-2-tuple(v_570),increment_nonce(2-proj-2-tuple(v_568))) else fail-any) else fail-any)) in
        {32}let v_572: bitstring = catch-fail((if (success?(getpublickey(v_566)) && (success?(3-proj-3-tuple(v_567)) && success?(1-proj-3-tuple(v_567)))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then (if not-caught-fail(v_569) then (if not-caught-fail(v_571) then (v_571,v_569) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {33}let v_573: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_572),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) in
        {34}let v_574: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_572)) && success?(symmetricstatepack(1-proj-2-tuple(v_572),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),2-proj-2-tuple(v_572))) else fail-any) else fail-any)) in
        {35}let v_575: bitstring = catch-fail((if success?(getpublickey(v_566)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_574) then (v_574,2-proj-2-tuple(v_572)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {36}let v_576: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_575))) in
        {37}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {38}let v_578: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_577),2-proj-2-tuple(v_577),3-proj-3-tuple(v_576),msg_a(me,them))) in
        {39}let v_579: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {40}let v_580: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_577))) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then cipherstatepack(1-proj-2-tuple(v_579),increment_nonce(2-proj-2-tuple(v_577))) else fail-any) else fail-any)) in
        {41}let v_581: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_576)) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_580) then (v_580,v_578) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_582: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) in
        {43}let v_583: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_581)) && success?(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),2-proj-2-tuple(v_581))) else fail-any) else fail-any)) in
        {44}let v_584: bitstring = catch-fail((if success?(1-proj-2-tuple(v_575)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_583) then (v_583,2-proj-2-tuple(v_581)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {45}let v_585: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_584),v_566,v_561,4-proj-7-tuple(v_558),5-proj-7-tuple(v_558),6-proj-7-tuple(v_558),7-proj-7-tuple(v_558))) in
        {46}let v_586: bitstring = catch-fail(concat3(v_562,2-proj-2-tuple(v_575),2-proj-2-tuple(v_584))) in
        {47}let (hs_587: handshakestate,re_588: key,message_a: bitstring) = (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-7-tuple(v_558))))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_564) then (if not-caught-fail(v_566) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (v_585,5-proj-7-tuple(v_558),v_586) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {48}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {49}insert statestore(me,them,statepack_b(hs_587));
        {50}out(pub, message_a)
    ) | (
        {99}get statestore(=me,=them,statepack_b(hs_589: handshakestate)) in
        {52}in(pub, message_b: bitstring);
        {53}let v_590: bitstring = catch-fail(handshakestateunpack(hs_589)) in
        {54}let v_591: bitstring = catch-fail(deconcat3(message_b)) in
        {55}let v_592: bool = catch-fail(true) in
        {56}let v_593: key = catch-fail(1-proj-3-tuple(v_591)) in
        {57}let v_594: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_590))) in
        {58}let v_595: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_590)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),v_593)) else fail-any) else fail-any)) in
        {59}let v_596: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_590))) in
        {60}let v_597: bitstring = catch-fail(symmetricstateunpack(v_595)) in
        {61}let v_598: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_597),(if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any))) in
        {62}let v_599: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_597),(if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any))) in
        {63}let v_600: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_597),(if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any))) in
        {64}let v_601: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_597))) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (v_598,v_599,v_600) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_602: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_601)) then cipherstatepack(2-proj-3-tuple(v_601),minnonce) else fail-any),1-proj-3-tuple(v_601),3-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any)) in
        {66}let v_603: bitstring = catch-fail(symmetricstateunpack(v_602)) in
        {67}let v_604: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {68}let v_605: aead = catch-fail(decrypt(1-proj-2-tuple(v_604),2-proj-2-tuple(v_604),3-proj-3-tuple(v_603),2-proj-3-tuple(v_591))) in
        {69}let v_606: bitstring = catch-fail(aeadunpack(v_605)) in
        {70}let v_607: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {71}let v_608: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_604))) && success?(1-proj-3-tuple(v_603))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then cipherstatepack(1-proj-2-tuple(v_607),increment_nonce(2-proj-2-tuple(v_604))) else fail-any) else fail-any)) in
        {72}let v_609: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_591)) && (success?(3-proj-3-tuple(v_603)) && success?(1-proj-3-tuple(v_603)))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then (if not-caught-fail(v_605) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if not-caught-fail(v_608) then (v_608,3-proj-3-tuple(v_606),1-proj-3-tuple(v_606)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_610: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) in
        {74}let v_611: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_591)) && success?(symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_610),hash(3-proj-3-tuple(v_610),2-proj-3-tuple(v_591))) else fail-any) else fail-any)) in
        {75}let v_612: bitstring = catch-fail((if success?(2-proj-3-tuple(v_591)) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if not-caught-fail(v_611) then (v_611,2-proj-3-tuple(v_609),3-proj-3-tuple(v_609)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_613: key = catch-fail(2-proj-3-tuple(v_612)) in
        {77}let v_614: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_590))) in
        {78}let v_615: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_612))) in
        {79}let v_616: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_615),(if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_613) else fail-any) else fail-any))) in
        {80}let v_617: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_615),(if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_613) else fail-any) else fail-any))) in
        {81}let v_618: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_615),(if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_613) else fail-any) else fail-any))) in
        {82}let v_619: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_613) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_615))) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then (v_616,v_617,v_618) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_620: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),v_613) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_612))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_619)) then cipherstatepack(2-proj-3-tuple(v_619),minnonce) else fail-any),1-proj-3-tuple(v_619),3-proj-3-tuple(v_615)) else fail-any) else fail-any) else fail-any)) in
        {84}let v_621: bitstring = catch-fail(symmetricstateunpack(v_620)) in
        {85}let v_622: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {86}let v_623: aead = catch-fail(decrypt(1-proj-2-tuple(v_622),2-proj-2-tuple(v_622),3-proj-3-tuple(v_621),3-proj-3-tuple(v_591))) in
        {87}let v_624: bitstring = catch-fail(aeadunpack(v_623)) in
        {88}let v_625: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {89}let v_626: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_622))) && success?(1-proj-3-tuple(v_621))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then cipherstatepack(1-proj-2-tuple(v_625),increment_nonce(2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {90}let v_627: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_591)) && (success?(3-proj-3-tuple(v_621)) && success?(1-proj-3-tuple(v_621)))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_623) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if not-caught-fail(v_626) then (v_626,3-proj-3-tuple(v_624),1-proj-3-tuple(v_624)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_628: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) in
        {92}let v_629: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_591)) && success?(symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then symmetricstatepack(1-proj-3-tuple(v_628),2-proj-3-tuple(v_628),hash(3-proj-3-tuple(v_628),3-proj-3-tuple(v_591))) else fail-any) else fail-any)) in
        {93}let v_630: bitstring = catch-fail((if success?(3-proj-3-tuple(v_591)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if not-caught-fail(v_629) then (v_629,2-proj-3-tuple(v_627),3-proj-3-tuple(v_627)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {94}let v_631: key = catch-fail(dhexp(key_s(them),g)) in
        {95}let v_632: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_630),2-proj-7-tuple(v_590),3-proj-7-tuple(v_590),v_613,v_593,6-proj-7-tuple(v_590),7-proj-7-tuple(v_590))) in
        {96}let (hs_633: handshakestate,re_634: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-7-tuple(v_590))))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then (if not-caught-fail(v_595) then (if not-caught-fail(v_602) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if not-caught-fail(v_613) then (if not-caught-fail(v_620) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if ((3-proj-3-tuple(v_612) && 3-proj-3-tuple(v_630)) && (v_613 = getpublickey((if not-caught-fail(v_631) then keypairpack(v_631,key_s(them)) else fail-any)))) then (if not-caught-fail(v_632) then (v_632,getpublickey(3-proj-7-tuple(v_590)),2-proj-3-tuple(v_630),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {97}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {98}insert statestore(me,them,statepack_c(hs_633))
    ) | (
        {124}get statestore(=me,=them,statepack_c(hs_635: handshakestate)) in
        {100}let v_636: bitstring = catch-fail(handshakestateunpack(hs_635)) in
        {101}let v_637: bitstring = catch-fail((empty,empty,empty)) in
        {102}let v_638: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_636))) in
        {103}let v_639: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_636))) in
        {104}let v_640: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_639),(if (success?(5-proj-7-tuple(v_636)) && success?(2-proj-7-tuple(v_636))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),5-proj-7-tuple(v_636)) else fail-any) else fail-any))) in
        {105}let v_641: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_639),(if (success?(5-proj-7-tuple(v_636)) && success?(2-proj-7-tuple(v_636))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),5-proj-7-tuple(v_636)) else fail-any) else fail-any))) in
        {106}let v_642: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_639),(if (success?(5-proj-7-tuple(v_636)) && success?(2-proj-7-tuple(v_636))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),5-proj-7-tuple(v_636)) else fail-any) else fail-any))) in
        {107}let v_643: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_636)) && success?(2-proj-7-tuple(v_636))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),5-proj-7-tuple(v_636)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_639))) then (if not-caught-fail(v_640) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (v_640,v_641,v_642) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_644: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_636)) && success?(2-proj-7-tuple(v_636))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),5-proj-7-tuple(v_636)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_636))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_643)) then cipherstatepack(2-proj-3-tuple(v_643),minnonce) else fail-any),1-proj-3-tuple(v_643),3-proj-3-tuple(v_639)) else fail-any) else fail-any) else fail-any)) in
        {109}let v_645: bitstring = catch-fail(symmetricstateunpack(v_644)) in
        {110}let v_646: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_645))) in
        {111}let v_647: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_646),2-proj-2-tuple(v_646),3-proj-3-tuple(v_645),msg_c(me,them))) in
        {112}let v_648: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_645))) in
        {113}let v_649: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_646))) && success?(1-proj-3-tuple(v_645))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then cipherstatepack(1-proj-2-tuple(v_648),increment_nonce(2-proj-2-tuple(v_646))) else fail-any) else fail-any)) in
        {114}let v_650: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_645)) && success?(1-proj-3-tuple(v_645))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then (if not-caught-fail(v_647) then (if not-caught-fail(v_649) then (v_649,v_647) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_651: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_650),2-proj-3-tuple(v_645),3-proj-3-tuple(v_645)))) in
        {116}let v_652: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_650)) && success?(symmetricstatepack(1-proj-2-tuple(v_650),2-proj-3-tuple(v_645),3-proj-3-tuple(v_645)))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then symmetricstatepack(1-proj-3-tuple(v_651),2-proj-3-tuple(v_651),hash(3-proj-3-tuple(v_651),2-proj-2-tuple(v_650))) else fail-any) else fail-any)) in
        {117}let v_653: bitstring = catch-fail((if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_652) then (v_652,2-proj-2-tuple(v_650)) else fail-any) else fail-any) else fail-any)) in
        {118}let v_654: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_653),2-proj-7-tuple(v_636),3-proj-7-tuple(v_636),4-proj-7-tuple(v_636),5-proj-7-tuple(v_636),6-proj-7-tuple(v_636),7-proj-7-tuple(v_636))) in
        {119}let v_655: bitstring = catch-fail(concat3(1-proj-3-tuple(v_637),2-proj-3-tuple(v_637),2-proj-2-tuple(v_653))) in
        {120}let (hs_656: handshakestate,re_657: key,message_c: bitstring) = (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-7-tuple(v_636))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_644) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then (v_654,5-proj-7-tuple(v_636),v_655) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {121}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {122}insert statestore(me,them,statepack_d(hs_656));
        {123}out(pub, message_c)
    ) | (
        {143}get statestore(=me,=them,statepack_d(hs_658: handshakestate)) in
        {125}in(pub, message_d: bitstring);
        {126}let v_659: bitstring = catch-fail(handshakestateunpack(hs_658)) in
        {127}let v_660: bitstring = catch-fail(deconcat3(message_d)) in
        {128}let v_661: bool = catch-fail(true) in
        {129}let v_662: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_659))) in
        {130}let v_663: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_662))) in
        {131}let v_664: aead = catch-fail(decrypt(1-proj-2-tuple(v_663),2-proj-2-tuple(v_663),3-proj-3-tuple(v_662),3-proj-3-tuple(v_660))) in
        {132}let v_665: bitstring = catch-fail(aeadunpack(v_664)) in
        {133}let v_666: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_662))) in
        {134}let v_667: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_663))) && success?(1-proj-3-tuple(v_662))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then cipherstatepack(1-proj-2-tuple(v_666),increment_nonce(2-proj-2-tuple(v_663))) else fail-any) else fail-any)) in
        {135}let v_668: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_660)) && (success?(3-proj-3-tuple(v_662)) && success?(1-proj-3-tuple(v_662)))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then (if not-caught-fail(v_664) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if not-caught-fail(v_667) then (v_667,3-proj-3-tuple(v_665),1-proj-3-tuple(v_665)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {136}let v_669: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_668),2-proj-3-tuple(v_662),3-proj-3-tuple(v_662)))) in
        {137}let v_670: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_660)) && success?(symmetricstatepack(1-proj-3-tuple(v_668),2-proj-3-tuple(v_662),3-proj-3-tuple(v_662)))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then symmetricstatepack(1-proj-3-tuple(v_669),2-proj-3-tuple(v_669),hash(3-proj-3-tuple(v_669),3-proj-3-tuple(v_660))) else fail-any) else fail-any)) in
        {138}let v_671: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_660)) && success?(1-proj-7-tuple(v_659))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if not-caught-fail(v_670) then (v_670,2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_672: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_671),2-proj-7-tuple(v_659),3-proj-7-tuple(v_659),4-proj-7-tuple(v_659),5-proj-7-tuple(v_659),6-proj-7-tuple(v_659),7-proj-7-tuple(v_659))) in
        {140}let (hs_673: handshakestate,re_674: key,plaintext_d: bitstring,valid_675: bool) = (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-7-tuple(v_659))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if not-caught-fail(v_661) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if (v_661 && 3-proj-3-tuple(v_671)) then (if not-caught-fail(v_672) then (v_672,getpublickey(3-proj-7-tuple(v_659)),2-proj-3-tuple(v_671),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {141}event RecvMsg(me,them,stage_d,plaintext_d,valid_675);
        {142}insert statestore(me,them,statepack_e(hs_673))
    ) | (
        {169}get statestore(=me,=them,statepack_e(hs_676: handshakestate)) in
        {144}let v_677: bitstring = catch-fail(handshakestateunpack(hs_676)) in
        {145}let v_678: bitstring = catch-fail((empty,empty,empty)) in
        {146}let v_679: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_677))) in
        {147}let v_680: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_679))) in
        {148}let v_681: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_680),2-proj-2-tuple(v_680),3-proj-3-tuple(v_679),msg_e(me,them))) in
        {149}let v_682: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_679))) in
        {150}let v_683: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_680))) && success?(1-proj-3-tuple(v_679))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then cipherstatepack(1-proj-2-tuple(v_682),increment_nonce(2-proj-2-tuple(v_680))) else fail-any) else fail-any)) in
        {151}let v_684: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_679)) && success?(1-proj-3-tuple(v_679))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then (if not-caught-fail(v_681) then (if not-caught-fail(v_683) then (v_683,v_681) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {152}let v_685: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_684),2-proj-3-tuple(v_679),3-proj-3-tuple(v_679)))) in
        {153}let v_686: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_684)) && success?(symmetricstatepack(1-proj-2-tuple(v_684),2-proj-3-tuple(v_679),3-proj-3-tuple(v_679)))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then symmetricstatepack(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),hash(3-proj-3-tuple(v_685),2-proj-2-tuple(v_684))) else fail-any) else fail-any)) in
        {154}let v_687: bitstring = catch-fail((if success?(1-proj-7-tuple(v_677)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then (if not-caught-fail(v_686) then (v_686,2-proj-2-tuple(v_684)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {155}let v_688: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_687),2-proj-7-tuple(v_677),3-proj-7-tuple(v_677),4-proj-7-tuple(v_677),5-proj-7-tuple(v_677),6-proj-7-tuple(v_677),7-proj-7-tuple(v_677))) in
        {156}let v_689: bitstring = catch-fail(concat3(1-proj-3-tuple(v_678),2-proj-3-tuple(v_678),2-proj-2-tuple(v_687))) in
        {157}let v_690: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_687))) in
        {158}let v_691: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_690),zero)) in
        {159}let v_692: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_690),zero)) in
        {160}let v_693: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_690),zero)) in
        {161}let v_694: bitstring = catch-fail((if success?(2-proj-3-tuple(v_690)) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (if not-caught-fail(v_693) then (v_691,v_692,v_693) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {162}let v_695: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_694)) then cipherstatepack(1-proj-3-tuple(v_694),minnonce) else fail-any)) in
        {163}let v_696: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_694)) then cipherstatepack(2-proj-3-tuple(v_694),minnonce) else fail-any)) in
        {164}let v_697: bitstring = catch-fail((if success?(1-proj-2-tuple(v_687)) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (1-proj-2-tuple(v_687),v_695,v_696) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {165}let (hs_698: handshakestate,re_699: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-7-tuple(v_677))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (v_688,5-proj-7-tuple(v_677),v_689,2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {166}event SendMsg(me,them,stage_e,msg_e(me,them),true);
        {167}insert statestore(me,them,statepack_f(hs_698));
        {168}out(pub, message_e)
    ) | (
        {170}event LeakS(phase0,me);
        {171}out(pub, key_s(me))
    ) | (
        {172}phase 1;
        {173}event LeakS(phase1,me);
        {174}out(pub, key_s(me))
    )
) | (
    {175}let them_700: principal = charlie in
    {176}let me_701: principal = alice in
    {177}let s_702: keypair = keypairpack(empty,empty) in
    {178}out(pub, getpublickey(s_702));
    (
        {179}let e_703: keypair = keypairpack(empty,empty) in
        {180}let rs_704: key = empty in
        {181}let re_705: key = empty in
        {182}let v_706: bitstring = catch-fail(hash(somename,empty)) in
        {183}let v_707: key = catch-fail(v_706) in
        {184}let v_708: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {185}let v_709: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (if not-caught-fail(v_708) then symmetricstatepack(v_708,v_707,v_706) else fail-any) else fail-any) else fail-any))) in
        {186}let v_710: symmetricstate = catch-fail((if success?((if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (if not-caught-fail(v_708) then symmetricstatepack(v_708,v_707,v_706) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),empty)) else fail-any) else fail-any)) in
        {187}let hs_711: handshakestate = (if not-caught-fail(v_710) then handshakestatepack(v_710,s_702,e_703,rs_704,re_705,empty,true) else fail-any) in
        {188}insert statestore(me_701,them_700,statepack_a(hs_711))
    ) | (
        {223}get statestore(=me_701,=them_700,statepack_a(hs_712: handshakestate)) in
        {189}let v_713: bitstring = catch-fail(handshakestateunpack(hs_712)) in
        {190}let v_714: bitstring = catch-fail((empty,empty,empty)) in
        {191}new key_e_715[me_701,them_700]: key;
        {192}let v_716: key = catch-fail(dhexp(key_e_715,g)) in
        {193}let v_717: keypair = catch-fail((if not-caught-fail(v_716) then keypairpack(v_716,key_e_715) else fail-any)) in
        {194}let v_718: bitstring = catch-fail(getpublickey(v_717)) in
        {195}let v_719: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_713))) in
        {196}let v_720: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_713)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),hash(3-proj-3-tuple(v_719),v_718)) else fail-any) else fail-any)) in
        {197}let v_721: key = catch-fail(dhexp(key_s(me_701),g)) in
        {198}let v_722: keypair = catch-fail((if not-caught-fail(v_721) then keypairpack(v_721,key_s(me_701)) else fail-any)) in
        {199}let v_723: bitstring = catch-fail(symmetricstateunpack(v_720)) in
        {200}let v_724: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_723))) in
        {201}let v_725: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_724),2-proj-2-tuple(v_724),3-proj-3-tuple(v_723),getpublickey(v_722))) in
        {202}let v_726: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_723))) in
        {203}let v_727: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_724))) && success?(1-proj-3-tuple(v_723))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then cipherstatepack(1-proj-2-tuple(v_726),increment_nonce(2-proj-2-tuple(v_724))) else fail-any) else fail-any)) in
        {204}let v_728: bitstring = catch-fail((if (success?(getpublickey(v_722)) && (success?(3-proj-3-tuple(v_723)) && success?(1-proj-3-tuple(v_723)))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_727) then (v_727,v_725) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {205}let v_729: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_728),2-proj-3-tuple(v_723),3-proj-3-tuple(v_723)))) in
        {206}let v_730: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_728)) && success?(symmetricstatepack(1-proj-2-tuple(v_728),2-proj-3-tuple(v_723),3-proj-3-tuple(v_723)))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then symmetricstatepack(1-proj-3-tuple(v_729),2-proj-3-tuple(v_729),hash(3-proj-3-tuple(v_729),2-proj-2-tuple(v_728))) else fail-any) else fail-any)) in
        {207}let v_731: bitstring = catch-fail((if success?(getpublickey(v_722)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-2-tuple(v_728))))) then (if not-caught-fail(v_730) then (v_730,2-proj-2-tuple(v_728)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let v_732: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_731))) in
        {209}let v_733: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_732))) in
        {210}let v_734: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_733),2-proj-2-tuple(v_733),3-proj-3-tuple(v_732),msg_a(me_701,them_700))) in
        {211}let v_735: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_732))) in
        {212}let v_736: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_733))) && success?(1-proj-3-tuple(v_732))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then cipherstatepack(1-proj-2-tuple(v_735),increment_nonce(2-proj-2-tuple(v_733))) else fail-any) else fail-any)) in
        {213}let v_737: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_732)) && success?(1-proj-3-tuple(v_732))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then (if not-caught-fail(v_734) then (if not-caught-fail(v_736) then (v_736,v_734) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {214}let v_738: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_737),2-proj-3-tuple(v_732),3-proj-3-tuple(v_732)))) in
        {215}let v_739: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_737)) && success?(symmetricstatepack(1-proj-2-tuple(v_737),2-proj-3-tuple(v_732),3-proj-3-tuple(v_732)))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack(1-proj-3-tuple(v_738),2-proj-3-tuple(v_738),hash(3-proj-3-tuple(v_738),2-proj-2-tuple(v_737))) else fail-any) else fail-any)) in
        {216}let v_740: bitstring = catch-fail((if success?(1-proj-2-tuple(v_731)) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then (if not-caught-fail(v_739) then (v_739,2-proj-2-tuple(v_737)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {217}let v_741: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_740),v_722,v_717,4-proj-7-tuple(v_713),5-proj-7-tuple(v_713),6-proj-7-tuple(v_713),7-proj-7-tuple(v_713))) in
        {218}let v_742: bitstring = catch-fail(concat3(v_718,2-proj-2-tuple(v_731),2-proj-2-tuple(v_740))) in
        {219}let (hs_743: handshakestate,re_744: key,message_a_745: bitstring) = (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-7-tuple(v_713))))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (if not-caught-fail(v_720) then (if not-caught-fail(v_722) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then (if not-caught-fail(v_741) then (if not-caught-fail(v_742) then (v_741,5-proj-7-tuple(v_713),v_742) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {220}event SendMsg(me_701,them_700,stage_a,msg_a(me_701,them_700),true);
        {221}insert statestore(me_701,them_700,statepack_b(hs_743));
        {222}out(pub, message_a_745)
    ) | (
        {271}get statestore(=me_701,=them_700,statepack_b(hs_746: handshakestate)) in
        {224}in(pub, message_b_747: bitstring);
        {225}let v_748: bitstring = catch-fail(handshakestateunpack(hs_746)) in
        {226}let v_749: bitstring = catch-fail(deconcat3(message_b_747)) in
        {227}let v_750: bool = catch-fail(true) in
        {228}let v_751: key = catch-fail(1-proj-3-tuple(v_749)) in
        {229}let v_752: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_748))) in
        {230}let v_753: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_748)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then symmetricstatepack(1-proj-3-tuple(v_752),2-proj-3-tuple(v_752),hash(3-proj-3-tuple(v_752),v_751)) else fail-any) else fail-any)) in
        {231}let v_754: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_748))) in
        {232}let v_755: bitstring = catch-fail(symmetricstateunpack(v_753)) in
        {233}let v_756: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_755),(if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_751) else fail-any) else fail-any))) in
        {234}let v_757: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_755),(if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_751) else fail-any) else fail-any))) in
        {235}let v_758: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_755),(if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_751) else fail-any) else fail-any))) in
        {236}let v_759: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_751) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_755))) then (if not-caught-fail(v_756) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (v_756,v_757,v_758) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_760: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_751) else fail-any) else fail-any)) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_759)) then cipherstatepack(2-proj-3-tuple(v_759),minnonce) else fail-any),1-proj-3-tuple(v_759),3-proj-3-tuple(v_755)) else fail-any) else fail-any) else fail-any)) in
        {238}let v_761: bitstring = catch-fail(symmetricstateunpack(v_760)) in
        {239}let v_762: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {240}let v_763: aead = catch-fail(decrypt(1-proj-2-tuple(v_762),2-proj-2-tuple(v_762),3-proj-3-tuple(v_761),2-proj-3-tuple(v_749))) in
        {241}let v_764: bitstring = catch-fail(aeadunpack(v_763)) in
        {242}let v_765: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {243}let v_766: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_762))) && success?(1-proj-3-tuple(v_761))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-2-tuple(v_765))))) then cipherstatepack(1-proj-2-tuple(v_765),increment_nonce(2-proj-2-tuple(v_762))) else fail-any) else fail-any)) in
        {244}let v_767: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_749)) && (success?(3-proj-3-tuple(v_761)) && success?(1-proj-3-tuple(v_761)))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_763) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if not-caught-fail(v_766) then (v_766,3-proj-3-tuple(v_764),1-proj-3-tuple(v_764)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_768: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_767),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) in
        {246}let v_769: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_749)) && success?(symmetricstatepack(1-proj-3-tuple(v_767),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then symmetricstatepack(1-proj-3-tuple(v_768),2-proj-3-tuple(v_768),hash(3-proj-3-tuple(v_768),2-proj-3-tuple(v_749))) else fail-any) else fail-any)) in
        {247}let v_770: bitstring = catch-fail((if success?(2-proj-3-tuple(v_749)) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if not-caught-fail(v_769) then (v_769,2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let v_771: key = catch-fail(2-proj-3-tuple(v_770)) in
        {249}let v_772: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_748))) in
        {250}let v_773: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_770))) in
        {251}let v_774: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_773),(if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then dhexp(2-proj-2-tuple(v_772),v_771) else fail-any) else fail-any))) in
        {252}let v_775: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_773),(if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then dhexp(2-proj-2-tuple(v_772),v_771) else fail-any) else fail-any))) in
        {253}let v_776: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_773),(if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then dhexp(2-proj-2-tuple(v_772),v_771) else fail-any) else fail-any))) in
        {254}let v_777: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then dhexp(2-proj-2-tuple(v_772),v_771) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_773))) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (if not-caught-fail(v_776) then (v_774,v_775,v_776) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_778: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_748)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then dhexp(2-proj-2-tuple(v_772),v_771) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_770))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_777)) then cipherstatepack(2-proj-3-tuple(v_777),minnonce) else fail-any),1-proj-3-tuple(v_777),3-proj-3-tuple(v_773)) else fail-any) else fail-any) else fail-any)) in
        {256}let v_779: bitstring = catch-fail(symmetricstateunpack(v_778)) in
        {257}let v_780: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_779))) in
        {258}let v_781: aead = catch-fail(decrypt(1-proj-2-tuple(v_780),2-proj-2-tuple(v_780),3-proj-3-tuple(v_779),3-proj-3-tuple(v_749))) in
        {259}let v_782: bitstring = catch-fail(aeadunpack(v_781)) in
        {260}let v_783: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_779))) in
        {261}let v_784: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_780))) && success?(1-proj-3-tuple(v_779))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then cipherstatepack(1-proj-2-tuple(v_783),increment_nonce(2-proj-2-tuple(v_780))) else fail-any) else fail-any)) in
        {262}let v_785: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_749)) && (success?(3-proj-3-tuple(v_779)) && success?(1-proj-3-tuple(v_779)))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then (if not-caught-fail(v_781) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_784) then (v_784,3-proj-3-tuple(v_782),1-proj-3-tuple(v_782)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_786: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_785),2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)))) in
        {264}let v_787: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_749)) && success?(symmetricstatepack(1-proj-3-tuple(v_785),2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then symmetricstatepack(1-proj-3-tuple(v_786),2-proj-3-tuple(v_786),hash(3-proj-3-tuple(v_786),3-proj-3-tuple(v_749))) else fail-any) else fail-any)) in
        {265}let v_788: bitstring = catch-fail((if success?(3-proj-3-tuple(v_749)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if not-caught-fail(v_787) then (v_787,2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_789: key = catch-fail(dhexp(key_s(them_700),g)) in
        {267}let v_790: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_788),2-proj-7-tuple(v_748),3-proj-7-tuple(v_748),v_771,v_751,6-proj-7-tuple(v_748),7-proj-7-tuple(v_748))) in
        {268}let (hs_791: handshakestate,re_792: key,plaintext_b_793: bitstring,valid_794: bool) = (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-7-tuple(v_748))))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (if not-caught-fail(v_753) then (if not-caught-fail(v_760) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if not-caught-fail(v_771) then (if not-caught-fail(v_778) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if ((3-proj-3-tuple(v_770) && 3-proj-3-tuple(v_788)) && (v_771 = getpublickey((if not-caught-fail(v_789) then keypairpack(v_789,key_s(them_700)) else fail-any)))) then (if not-caught-fail(v_790) then (v_790,getpublickey(3-proj-7-tuple(v_748)),2-proj-3-tuple(v_788),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {269}event RecvMsg(me_701,them_700,stage_b,plaintext_b_793,valid_794);
        {270}insert statestore(me_701,them_700,statepack_c(hs_791))
    ) | (
        {296}get statestore(=me_701,=them_700,statepack_c(hs_795: handshakestate)) in
        {272}let v_796: bitstring = catch-fail(handshakestateunpack(hs_795)) in
        {273}let v_797: bitstring = catch-fail((empty,empty,empty)) in
        {274}let v_798: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_796))) in
        {275}let v_799: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_796))) in
        {276}let v_800: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_799),(if (success?(5-proj-7-tuple(v_796)) && success?(2-proj-7-tuple(v_796))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),5-proj-7-tuple(v_796)) else fail-any) else fail-any))) in
        {277}let v_801: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_799),(if (success?(5-proj-7-tuple(v_796)) && success?(2-proj-7-tuple(v_796))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),5-proj-7-tuple(v_796)) else fail-any) else fail-any))) in
        {278}let v_802: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_799),(if (success?(5-proj-7-tuple(v_796)) && success?(2-proj-7-tuple(v_796))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),5-proj-7-tuple(v_796)) else fail-any) else fail-any))) in
        {279}let v_803: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_796)) && success?(2-proj-7-tuple(v_796))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),5-proj-7-tuple(v_796)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_799))) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then (if not-caught-fail(v_802) then (v_800,v_801,v_802) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_804: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_796)) && success?(2-proj-7-tuple(v_796))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),5-proj-7-tuple(v_796)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_796))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_803)) then cipherstatepack(2-proj-3-tuple(v_803),minnonce) else fail-any),1-proj-3-tuple(v_803),3-proj-3-tuple(v_799)) else fail-any) else fail-any) else fail-any)) in
        {281}let v_805: bitstring = catch-fail(symmetricstateunpack(v_804)) in
        {282}let v_806: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {283}let v_807: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_806),2-proj-2-tuple(v_806),3-proj-3-tuple(v_805),msg_c(me_701,them_700))) in
        {284}let v_808: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {285}let v_809: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_806))) && success?(1-proj-3-tuple(v_805))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then cipherstatepack(1-proj-2-tuple(v_808),increment_nonce(2-proj-2-tuple(v_806))) else fail-any) else fail-any)) in
        {286}let v_810: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_805)) && success?(1-proj-3-tuple(v_805))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then (if not-caught-fail(v_807) then (if not-caught-fail(v_809) then (v_809,v_807) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {287}let v_811: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_810),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) in
        {288}let v_812: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_810)) && success?(symmetricstatepack(1-proj-2-tuple(v_810),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then symmetricstatepack(1-proj-3-tuple(v_811),2-proj-3-tuple(v_811),hash(3-proj-3-tuple(v_811),2-proj-2-tuple(v_810))) else fail-any) else fail-any)) in
        {289}let v_813: bitstring = catch-fail((if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_812) then (v_812,2-proj-2-tuple(v_810)) else fail-any) else fail-any) else fail-any)) in
        {290}let v_814: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_813),2-proj-7-tuple(v_796),3-proj-7-tuple(v_796),4-proj-7-tuple(v_796),5-proj-7-tuple(v_796),6-proj-7-tuple(v_796),7-proj-7-tuple(v_796))) in
        {291}let v_815: bitstring = catch-fail(concat3(1-proj-3-tuple(v_797),2-proj-3-tuple(v_797),2-proj-2-tuple(v_813))) in
        {292}let (hs_816: handshakestate,re_817: key,message_c_818: bitstring) = (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-7-tuple(v_796))))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then (if not-caught-fail(v_804) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_814,5-proj-7-tuple(v_796),v_815) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {293}event SendMsg(me_701,them_700,stage_c,msg_c(me_701,them_700),true);
        {294}insert statestore(me_701,them_700,statepack_d(hs_816));
        {295}out(pub, message_c_818)
    ) | (
        {315}get statestore(=me_701,=them_700,statepack_d(hs_819: handshakestate)) in
        {297}in(pub, message_d_820: bitstring);
        {298}let v_821: bitstring = catch-fail(handshakestateunpack(hs_819)) in
        {299}let v_822: bitstring = catch-fail(deconcat3(message_d_820)) in
        {300}let v_823: bool = catch-fail(true) in
        {301}let v_824: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_821))) in
        {302}let v_825: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_824))) in
        {303}let v_826: aead = catch-fail(decrypt(1-proj-2-tuple(v_825),2-proj-2-tuple(v_825),3-proj-3-tuple(v_824),3-proj-3-tuple(v_822))) in
        {304}let v_827: bitstring = catch-fail(aeadunpack(v_826)) in
        {305}let v_828: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_824))) in
        {306}let v_829: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_825))) && success?(1-proj-3-tuple(v_824))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-2-tuple(v_828))))) then cipherstatepack(1-proj-2-tuple(v_828),increment_nonce(2-proj-2-tuple(v_825))) else fail-any) else fail-any)) in
        {307}let v_830: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_822)) && (success?(3-proj-3-tuple(v_824)) && success?(1-proj-3-tuple(v_824)))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then (if not-caught-fail(v_826) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_829) then (v_829,3-proj-3-tuple(v_827),1-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {308}let v_831: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_830),2-proj-3-tuple(v_824),3-proj-3-tuple(v_824)))) in
        {309}let v_832: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_822)) && success?(symmetricstatepack(1-proj-3-tuple(v_830),2-proj-3-tuple(v_824),3-proj-3-tuple(v_824)))) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then symmetricstatepack(1-proj-3-tuple(v_831),2-proj-3-tuple(v_831),hash(3-proj-3-tuple(v_831),3-proj-3-tuple(v_822))) else fail-any) else fail-any)) in
        {310}let v_833: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_822)) && success?(1-proj-7-tuple(v_821))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if not-caught-fail(v_832) then (v_832,2-proj-3-tuple(v_830),3-proj-3-tuple(v_830)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {311}let v_834: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_833),2-proj-7-tuple(v_821),3-proj-7-tuple(v_821),4-proj-7-tuple(v_821),5-proj-7-tuple(v_821),6-proj-7-tuple(v_821),7-proj-7-tuple(v_821))) in
        {312}let (hs_835: handshakestate,re_836: key,plaintext_d_837: bitstring,valid_838: bool) = (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-7-tuple(v_821))))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if not-caught-fail(v_823) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if (v_823 && 3-proj-3-tuple(v_833)) then (if not-caught-fail(v_834) then (v_834,getpublickey(3-proj-7-tuple(v_821)),2-proj-3-tuple(v_833),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {313}event RecvMsg(me_701,them_700,stage_d,plaintext_d_837,valid_838);
        {314}insert statestore(me_701,them_700,statepack_e(hs_835))
    ) | (
        {341}get statestore(=me_701,=them_700,statepack_e(hs_839: handshakestate)) in
        {316}let v_840: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {317}let v_841: bitstring = catch-fail((empty,empty,empty)) in
        {318}let v_842: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_840))) in
        {319}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {320}let v_844: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_843),2-proj-2-tuple(v_843),3-proj-3-tuple(v_842),msg_e(me_701,them_700))) in
        {321}let v_845: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {322}let v_846: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_843))) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then cipherstatepack(1-proj-2-tuple(v_845),increment_nonce(2-proj-2-tuple(v_843))) else fail-any) else fail-any)) in
        {323}let v_847: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (v_846,v_844) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {324}let v_848: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) in
        {325}let v_849: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_847)) && success?(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_848),hash(3-proj-3-tuple(v_848),2-proj-2-tuple(v_847))) else fail-any) else fail-any)) in
        {326}let v_850: bitstring = catch-fail((if success?(1-proj-7-tuple(v_840)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if not-caught-fail(v_849) then (v_849,2-proj-2-tuple(v_847)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {327}let v_851: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_850),2-proj-7-tuple(v_840),3-proj-7-tuple(v_840),4-proj-7-tuple(v_840),5-proj-7-tuple(v_840),6-proj-7-tuple(v_840),7-proj-7-tuple(v_840))) in
        {328}let v_852: bitstring = catch-fail(concat3(1-proj-3-tuple(v_841),2-proj-3-tuple(v_841),2-proj-2-tuple(v_850))) in
        {329}let v_853: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_850))) in
        {330}let v_854: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_853),zero)) in
        {331}let v_855: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_853),zero)) in
        {332}let v_856: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_853),zero)) in
        {333}let v_857: bitstring = catch-fail((if success?(2-proj-3-tuple(v_853)) then (if not-caught-fail(v_854) then (if not-caught-fail(v_855) then (if not-caught-fail(v_856) then (v_854,v_855,v_856) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {334}let v_858: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_857)) then cipherstatepack(1-proj-3-tuple(v_857),minnonce) else fail-any)) in
        {335}let v_859: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_857)) then cipherstatepack(2-proj-3-tuple(v_857),minnonce) else fail-any)) in
        {336}let v_860: bitstring = catch-fail((if success?(1-proj-2-tuple(v_850)) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (1-proj-2-tuple(v_850),v_858,v_859) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {337}let (hs_861: handshakestate,re_862: key,message_e_863: bitstring,cs1_864: cipherstate,cs2_865: cipherstate) = (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-7-tuple(v_840))))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (v_851,5-proj-7-tuple(v_840),v_852,2-proj-3-tuple(v_860),3-proj-3-tuple(v_860)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {338}event SendMsg(me_701,them_700,stage_e,msg_e(me_701,them_700),true);
        {339}insert statestore(me_701,them_700,statepack_f(hs_861));
        {340}out(pub, message_e_863)
    ) | (
        {342}event LeakS(phase0,me_701);
        {343}out(pub, key_s(me_701))
    ) | (
        {344}phase 1;
        {345}event LeakS(phase1,me_701);
        {346}out(pub, key_s(me_701))
    )
) | (
    {347}let them_866: principal = alice in
    {348}let me_867: principal = bob in
    {349}let s_868: keypair = keypairpack(empty,empty) in
    {350}out(pub, getpublickey(s_868));
    (
        {351}let e_869: keypair = keypairpack(empty,empty) in
        {352}let rs_870: key = empty in
        {353}let re_871: key = empty in
        {354}let v_872: bitstring = catch-fail(hash(somename,empty)) in
        {355}let v_873: key = catch-fail(v_872) in
        {356}let v_874: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {357}let v_875: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then symmetricstatepack(v_874,v_873,v_872) else fail-any) else fail-any) else fail-any))) in
        {358}let v_876: symmetricstate = catch-fail((if success?((if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then symmetricstatepack(v_874,v_873,v_872) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then symmetricstatepack(1-proj-3-tuple(v_875),2-proj-3-tuple(v_875),hash(3-proj-3-tuple(v_875),empty)) else fail-any) else fail-any)) in
        {359}let hs_877: handshakestate = (if not-caught-fail(v_876) then handshakestatepack(v_876,s_868,e_869,rs_870,re_871,empty,false) else fail-any) in
        {360}insert statestore(me_867,them_866,statepack_a(hs_877))
    ) | (
        {394}get statestore(=me_867,=them_866,statepack_a(hs_878: handshakestate)) in
        {361}in(pub, message_a_879: bitstring);
        {362}let v_880: bitstring = catch-fail(handshakestateunpack(hs_878)) in
        {363}let v_881: bitstring = catch-fail(deconcat3(message_a_879)) in
        {364}let v_882: bool = catch-fail(true) in
        {365}let v_883: key = catch-fail(1-proj-3-tuple(v_881)) in
        {366}let v_884: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_880))) in
        {367}let v_885: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_880)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then symmetricstatepack(1-proj-3-tuple(v_884),2-proj-3-tuple(v_884),hash(3-proj-3-tuple(v_884),v_883)) else fail-any) else fail-any)) in
        {368}let v_886: bitstring = catch-fail(symmetricstateunpack(v_885)) in
        {369}let v_887: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_886))) in
        {370}let v_888: aead = catch-fail(decrypt(1-proj-2-tuple(v_887),2-proj-2-tuple(v_887),3-proj-3-tuple(v_886),2-proj-3-tuple(v_881))) in
        {371}let v_889: bitstring = catch-fail(aeadunpack(v_888)) in
        {372}let v_890: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_886))) in
        {373}let v_891: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_887))) && success?(1-proj-3-tuple(v_886))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-2-tuple(v_890))))) then cipherstatepack(1-proj-2-tuple(v_890),increment_nonce(2-proj-2-tuple(v_887))) else fail-any) else fail-any)) in
        {374}let v_892: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_881)) && (success?(3-proj-3-tuple(v_886)) && success?(1-proj-3-tuple(v_886)))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-2-tuple(v_887))))) then (if not-caught-fail(v_888) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if not-caught-fail(v_891) then (v_891,3-proj-3-tuple(v_889),1-proj-3-tuple(v_889)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_893: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_892),2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)))) in
        {376}let v_894: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_881)) && success?(symmetricstatepack(1-proj-3-tuple(v_892),2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then symmetricstatepack(1-proj-3-tuple(v_893),2-proj-3-tuple(v_893),hash(3-proj-3-tuple(v_893),2-proj-3-tuple(v_881))) else fail-any) else fail-any)) in
        {377}let v_895: bitstring = catch-fail((if success?(2-proj-3-tuple(v_881)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if not-caught-fail(v_894) then (v_894,2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {378}let v_896: key = catch-fail(2-proj-3-tuple(v_895)) in
        {379}let v_897: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_895))) in
        {380}let v_898: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_897))) in
        {381}let v_899: aead = catch-fail(decrypt(1-proj-2-tuple(v_898),2-proj-2-tuple(v_898),3-proj-3-tuple(v_897),3-proj-3-tuple(v_881))) in
        {382}let v_900: bitstring = catch-fail(aeadunpack(v_899)) in
        {383}let v_901: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_897))) in
        {384}let v_902: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_898))) && success?(1-proj-3-tuple(v_897))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then cipherstatepack(1-proj-2-tuple(v_901),increment_nonce(2-proj-2-tuple(v_898))) else fail-any) else fail-any)) in
        {385}let v_903: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_881)) && (success?(3-proj-3-tuple(v_897)) && success?(1-proj-3-tuple(v_897)))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then (if not-caught-fail(v_899) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if not-caught-fail(v_902) then (v_902,3-proj-3-tuple(v_900),1-proj-3-tuple(v_900)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {386}let v_904: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_903),2-proj-3-tuple(v_897),3-proj-3-tuple(v_897)))) in
        {387}let v_905: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_881)) && success?(symmetricstatepack(1-proj-3-tuple(v_903),2-proj-3-tuple(v_897),3-proj-3-tuple(v_897)))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then symmetricstatepack(1-proj-3-tuple(v_904),2-proj-3-tuple(v_904),hash(3-proj-3-tuple(v_904),3-proj-3-tuple(v_881))) else fail-any) else fail-any)) in
        {388}let v_906: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_881)) && success?(1-proj-3-tuple(v_895))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if not-caught-fail(v_905) then (v_905,2-proj-3-tuple(v_903),3-proj-3-tuple(v_903)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {389}let v_907: key = catch-fail(dhexp(key_s(them_866),g)) in
        {390}let v_908: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_906),2-proj-7-tuple(v_880),3-proj-7-tuple(v_880),v_896,v_883,6-proj-7-tuple(v_880),7-proj-7-tuple(v_880))) in
        {391}let (hs_909: handshakestate,re_910: key,plaintext_a: bitstring,valid_911: bool) = (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-7-tuple(v_880))))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if not-caught-fail(v_882) then (if not-caught-fail(v_883) then (if not-caught-fail(v_885) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if not-caught-fail(v_896) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then (if ((3-proj-3-tuple(v_895) && 3-proj-3-tuple(v_906)) && (v_896 = getpublickey((if not-caught-fail(v_907) then keypairpack(v_907,key_s(them_866)) else fail-any)))) then (if not-caught-fail(v_908) then (v_908,getpublickey(3-proj-7-tuple(v_880)),2-proj-3-tuple(v_906),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {392}event RecvMsg(me_867,them_866,stage_a,plaintext_a,valid_911);
        {393}insert statestore(me_867,them_866,statepack_b(hs_909))
    ) | (
        {443}get statestore(=me_867,=them_866,statepack_b(hs_912: handshakestate)) in
        {395}let v_913: bitstring = catch-fail(handshakestateunpack(hs_912)) in
        {396}let v_914: bitstring = catch-fail((empty,empty,empty)) in
        {397}new key_e_915[me_867,them_866]: key;
        {398}let v_916: key = catch-fail(dhexp(key_e_915,g)) in
        {399}let v_917: keypair = catch-fail((if not-caught-fail(v_916) then keypairpack(v_916,key_e_915) else fail-any)) in
        {400}let v_918: bitstring = catch-fail(getpublickey(v_917)) in
        {401}let v_919: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_913))) in
        {402}let v_920: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_913)) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_919),hash(3-proj-3-tuple(v_919),v_918)) else fail-any) else fail-any)) in
        {403}let v_921: bitstring = catch-fail(keypairunpack(v_917)) in
        {404}let v_922: bitstring = catch-fail(symmetricstateunpack(v_920)) in
        {405}let v_923: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_922),(if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_913)) else fail-any) else fail-any))) in
        {406}let v_924: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_922),(if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_913)) else fail-any) else fail-any))) in
        {407}let v_925: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_922),(if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_913)) else fail-any) else fail-any))) in
        {408}let v_926: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_913)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_922))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (if not-caught-fail(v_925) then (v_923,v_924,v_925) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {409}let v_927: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),5-proj-7-tuple(v_913)) else fail-any) else fail-any)) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_926)) then cipherstatepack(2-proj-3-tuple(v_926),minnonce) else fail-any),1-proj-3-tuple(v_926),3-proj-3-tuple(v_922)) else fail-any) else fail-any) else fail-any)) in
        {410}let v_928: key = catch-fail(dhexp(key_s(me_867),g)) in
        {411}let v_929: keypair = catch-fail((if not-caught-fail(v_928) then keypairpack(v_928,key_s(me_867)) else fail-any)) in
        {412}let v_930: bitstring = catch-fail(symmetricstateunpack(v_927)) in
        {413}let v_931: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_930))) in
        {414}let v_932: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_931),2-proj-2-tuple(v_931),3-proj-3-tuple(v_930),getpublickey(v_929))) in
        {415}let v_933: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_930))) in
        {416}let v_934: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_931))) && success?(1-proj-3-tuple(v_930))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-2-tuple(v_933))))) then cipherstatepack(1-proj-2-tuple(v_933),increment_nonce(2-proj-2-tuple(v_931))) else fail-any) else fail-any)) in
        {417}let v_935: bitstring = catch-fail((if (success?(getpublickey(v_929)) && (success?(3-proj-3-tuple(v_930)) && success?(1-proj-3-tuple(v_930)))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-2-tuple(v_931))))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_934) then (v_934,v_932) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_936: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_935),2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)))) in
        {419}let v_937: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_935)) && success?(symmetricstatepack(1-proj-2-tuple(v_935),2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_936),hash(3-proj-3-tuple(v_936),2-proj-2-tuple(v_935))) else fail-any) else fail-any)) in
        {420}let v_938: bitstring = catch-fail((if success?(getpublickey(v_929)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then (if not-caught-fail(v_937) then (v_937,2-proj-2-tuple(v_935)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let v_939: bitstring = catch-fail(keypairunpack(v_929)) in
        {422}let v_940: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_938))) in
        {423}let v_941: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_940),(if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),5-proj-7-tuple(v_913)) else fail-any) else fail-any))) in
        {424}let v_942: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_940),(if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),5-proj-7-tuple(v_913)) else fail-any) else fail-any))) in
        {425}let v_943: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_940),(if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),5-proj-7-tuple(v_913)) else fail-any) else fail-any))) in
        {426}let v_944: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),5-proj-7-tuple(v_913)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_940))) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then (if not-caught-fail(v_943) then (v_941,v_942,v_943) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let v_945: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_913)) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then dhexp(2-proj-2-tuple(v_939),5-proj-7-tuple(v_913)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_938))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-3-tuple(v_940))))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_944)) then cipherstatepack(2-proj-3-tuple(v_944),minnonce) else fail-any),1-proj-3-tuple(v_944),3-proj-3-tuple(v_940)) else fail-any) else fail-any) else fail-any)) in
        {428}let v_946: bitstring = catch-fail(symmetricstateunpack(v_945)) in
        {429}let v_947: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {430}let v_948: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_947),2-proj-2-tuple(v_947),3-proj-3-tuple(v_946),msg_b(me_867,them_866))) in
        {431}let v_949: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {432}let v_950: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_947))) && success?(1-proj-3-tuple(v_946))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-2-tuple(v_949))))) then cipherstatepack(1-proj-2-tuple(v_949),increment_nonce(2-proj-2-tuple(v_947))) else fail-any) else fail-any)) in
        {433}let v_951: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_946)) && success?(1-proj-3-tuple(v_946))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_948) then (if not-caught-fail(v_950) then (v_950,v_948) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {434}let v_952: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_951),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) in
        {435}let v_953: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_951)) && success?(symmetricstatepack(1-proj-2-tuple(v_951),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_952),hash(3-proj-3-tuple(v_952),2-proj-2-tuple(v_951))) else fail-any) else fail-any)) in
        {436}let v_954: bitstring = catch-fail((if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then (if not-caught-fail(v_953) then (v_953,2-proj-2-tuple(v_951)) else fail-any) else fail-any) else fail-any)) in
        {437}let v_955: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_954),v_929,v_917,4-proj-7-tuple(v_913),5-proj-7-tuple(v_913),6-proj-7-tuple(v_913),7-proj-7-tuple(v_913))) in
        {438}let v_956: bitstring = catch-fail(concat3(v_918,2-proj-2-tuple(v_938),2-proj-2-tuple(v_954))) in
        {439}let (hs_957: handshakestate,re_958: key,message_b_959: bitstring) = (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-7-tuple(v_913))))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (if not-caught-fail(v_920) then (if not-caught-fail(v_927) then (if not-caught-fail(v_929) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then (if not-caught-fail(v_945) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-2-tuple(v_954))))) then (if not-caught-fail(v_955) then (if not-caught-fail(v_956) then (v_955,5-proj-7-tuple(v_913),v_956) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {440}event SendMsg(me_867,them_866,stage_b,msg_b(me_867,them_866),true);
        {441}insert statestore(me_867,them_866,statepack_c(hs_957));
        {442}out(pub, message_b_959)
    ) | (
        {469}get statestore(=me_867,=them_866,statepack_c(hs_960: handshakestate)) in
        {444}in(pub, message_c_961: bitstring);
        {445}let v_962: bitstring = catch-fail(handshakestateunpack(hs_960)) in
        {446}let v_963: bitstring = catch-fail(deconcat3(message_c_961)) in
        {447}let v_964: bool = catch-fail(true) in
        {448}let v_965: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_962))) in
        {449}let v_966: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_962))) in
        {450}let v_967: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_966),(if (success?(4-proj-7-tuple(v_962)) && success?(3-proj-7-tuple(v_962))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then dhexp(2-proj-2-tuple(v_965),4-proj-7-tuple(v_962)) else fail-any) else fail-any))) in
        {451}let v_968: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_966),(if (success?(4-proj-7-tuple(v_962)) && success?(3-proj-7-tuple(v_962))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then dhexp(2-proj-2-tuple(v_965),4-proj-7-tuple(v_962)) else fail-any) else fail-any))) in
        {452}let v_969: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_966),(if (success?(4-proj-7-tuple(v_962)) && success?(3-proj-7-tuple(v_962))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then dhexp(2-proj-2-tuple(v_965),4-proj-7-tuple(v_962)) else fail-any) else fail-any))) in
        {453}let v_970: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_962)) && success?(3-proj-7-tuple(v_962))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then dhexp(2-proj-2-tuple(v_965),4-proj-7-tuple(v_962)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_966))) then (if not-caught-fail(v_967) then (if not-caught-fail(v_968) then (if not-caught-fail(v_969) then (v_967,v_968,v_969) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {454}let v_971: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_962)) && success?(3-proj-7-tuple(v_962))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then dhexp(2-proj-2-tuple(v_965),4-proj-7-tuple(v_962)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_962))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_970)) then cipherstatepack(2-proj-3-tuple(v_970),minnonce) else fail-any),1-proj-3-tuple(v_970),3-proj-3-tuple(v_966)) else fail-any) else fail-any) else fail-any)) in
        {455}let v_972: bitstring = catch-fail(symmetricstateunpack(v_971)) in
        {456}let v_973: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_972))) in
        {457}let v_974: aead = catch-fail(decrypt(1-proj-2-tuple(v_973),2-proj-2-tuple(v_973),3-proj-3-tuple(v_972),3-proj-3-tuple(v_963))) in
        {458}let v_975: bitstring = catch-fail(aeadunpack(v_974)) in
        {459}let v_976: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_972))) in
        {460}let v_977: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_973))) && success?(1-proj-3-tuple(v_972))) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-2-tuple(v_976))))) then cipherstatepack(1-proj-2-tuple(v_976),increment_nonce(2-proj-2-tuple(v_973))) else fail-any) else fail-any)) in
        {461}let v_978: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_963)) && (success?(3-proj-3-tuple(v_972)) && success?(1-proj-3-tuple(v_972)))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-2-tuple(v_973))))) then (if not-caught-fail(v_974) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if not-caught-fail(v_977) then (v_977,3-proj-3-tuple(v_975),1-proj-3-tuple(v_975)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {462}let v_979: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_978),2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)))) in
        {463}let v_980: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_963)) && success?(symmetricstatepack(1-proj-3-tuple(v_978),2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then symmetricstatepack(1-proj-3-tuple(v_979),2-proj-3-tuple(v_979),hash(3-proj-3-tuple(v_979),3-proj-3-tuple(v_963))) else fail-any) else fail-any)) in
        {464}let v_981: bitstring = catch-fail((if success?(3-proj-3-tuple(v_963)) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then (if not-caught-fail(v_980) then (v_980,2-proj-3-tuple(v_978),3-proj-3-tuple(v_978)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {465}let v_982: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_981),2-proj-7-tuple(v_962),3-proj-7-tuple(v_962),4-proj-7-tuple(v_962),5-proj-7-tuple(v_962),6-proj-7-tuple(v_962),7-proj-7-tuple(v_962))) in
        {466}let (hs_983: handshakestate,re_984: key,plaintext_c: bitstring,valid_985: bool) = (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-7-tuple(v_962))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if not-caught-fail(v_964) then (if not-caught-fail(v_971) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then (if (v_964 && 3-proj-3-tuple(v_981)) then (if not-caught-fail(v_982) then (v_982,getpublickey(3-proj-7-tuple(v_962)),2-proj-3-tuple(v_981),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {467}event RecvMsg(me_867,them_866,stage_c,plaintext_c,valid_985);
        {468}insert statestore(me_867,them_866,statepack_d(hs_983))
    ) | (
        {487}get statestore(=me_867,=them_866,statepack_d(hs_986: handshakestate)) in
        {470}let v_987: bitstring = catch-fail(handshakestateunpack(hs_986)) in
        {471}let v_988: bitstring = catch-fail((empty,empty,empty)) in
        {472}let v_989: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_987))) in
        {473}let v_990: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_989))) in
        {474}let v_991: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_990),2-proj-2-tuple(v_990),3-proj-3-tuple(v_989),msg_d(me_867,them_866))) in
        {475}let v_992: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_989))) in
        {476}let v_993: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_990))) && success?(1-proj-3-tuple(v_989))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then cipherstatepack(1-proj-2-tuple(v_992),increment_nonce(2-proj-2-tuple(v_990))) else fail-any) else fail-any)) in
        {477}let v_994: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_989)) && success?(1-proj-3-tuple(v_989))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then (if not-caught-fail(v_991) then (if not-caught-fail(v_993) then (v_993,v_991) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {478}let v_995: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_994),2-proj-3-tuple(v_989),3-proj-3-tuple(v_989)))) in
        {479}let v_996: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_994)) && success?(symmetricstatepack(1-proj-2-tuple(v_994),2-proj-3-tuple(v_989),3-proj-3-tuple(v_989)))) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then symmetricstatepack(1-proj-3-tuple(v_995),2-proj-3-tuple(v_995),hash(3-proj-3-tuple(v_995),2-proj-2-tuple(v_994))) else fail-any) else fail-any)) in
        {480}let v_997: bitstring = catch-fail((if success?(1-proj-7-tuple(v_987)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then (if not-caught-fail(v_996) then (v_996,2-proj-2-tuple(v_994)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {481}let v_998: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_997),2-proj-7-tuple(v_987),3-proj-7-tuple(v_987),4-proj-7-tuple(v_987),5-proj-7-tuple(v_987),6-proj-7-tuple(v_987),7-proj-7-tuple(v_987))) in
        {482}let v_999: bitstring = catch-fail(concat3(1-proj-3-tuple(v_988),2-proj-3-tuple(v_988),2-proj-2-tuple(v_997))) in
        {483}let (hs_1000: handshakestate,re_1001: key,message_d_1002: bitstring) = (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-7-tuple(v_987))))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then (if not-caught-fail(v_998) then (if not-caught-fail(v_999) then (v_998,5-proj-7-tuple(v_987),v_999) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {484}event SendMsg(me_867,them_866,stage_d,msg_d(me_867,them_866),true);
        {485}insert statestore(me_867,them_866,statepack_e(hs_1000));
        {486}out(pub, message_d_1002)
    ) | (
        {515}get statestore(=me_867,=them_866,statepack_e(hs_1003: handshakestate)) in
        {488}in(pub, message_e_1004: bitstring);
        {489}let v_1005: bitstring = catch-fail(handshakestateunpack(hs_1003)) in
        {490}let v_1006: bitstring = catch-fail(deconcat3(message_e_1004)) in
        {491}let v_1007: bool = catch-fail(true) in
        {492}let v_1008: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1005))) in
        {493}let v_1009: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1008))) in
        {494}let v_1010: aead = catch-fail(decrypt(1-proj-2-tuple(v_1009),2-proj-2-tuple(v_1009),3-proj-3-tuple(v_1008),3-proj-3-tuple(v_1006))) in
        {495}let v_1011: bitstring = catch-fail(aeadunpack(v_1010)) in
        {496}let v_1012: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1008))) in
        {497}let v_1013: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1009))) && success?(1-proj-3-tuple(v_1008))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then cipherstatepack(1-proj-2-tuple(v_1012),increment_nonce(2-proj-2-tuple(v_1009))) else fail-any) else fail-any)) in
        {498}let v_1014: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1006)) && (success?(3-proj-3-tuple(v_1008)) && success?(1-proj-3-tuple(v_1008)))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-2-tuple(v_1009))))) then (if not-caught-fail(v_1010) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if not-caught-fail(v_1013) then (v_1013,3-proj-3-tuple(v_1011),1-proj-3-tuple(v_1011)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {499}let v_1015: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1014),2-proj-3-tuple(v_1008),3-proj-3-tuple(v_1008)))) in
        {500}let v_1016: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1006)) && success?(symmetricstatepack(1-proj-3-tuple(v_1014),2-proj-3-tuple(v_1008),3-proj-3-tuple(v_1008)))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then symmetricstatepack(1-proj-3-tuple(v_1015),2-proj-3-tuple(v_1015),hash(3-proj-3-tuple(v_1015),3-proj-3-tuple(v_1006))) else fail-any) else fail-any)) in
        {501}let v_1017: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1006)) && success?(1-proj-7-tuple(v_1005))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then (if not-caught-fail(v_1016) then (v_1016,2-proj-3-tuple(v_1014),3-proj-3-tuple(v_1014)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {502}let v_1018: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1017),2-proj-7-tuple(v_1005),3-proj-7-tuple(v_1005),4-proj-7-tuple(v_1005),5-proj-7-tuple(v_1005),6-proj-7-tuple(v_1005),7-proj-7-tuple(v_1005))) in
        {503}let v_1019: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1017))) in
        {504}let v_1020: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1019),zero)) in
        {505}let v_1021: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1019),zero)) in
        {506}let v_1022: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1019),zero)) in
        {507}let v_1023: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1019)) then (if not-caught-fail(v_1020) then (if not-caught-fail(v_1021) then (if not-caught-fail(v_1022) then (v_1020,v_1021,v_1022) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {508}let v_1024: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1023)) then cipherstatepack(1-proj-3-tuple(v_1023),minnonce) else fail-any)) in
        {509}let v_1025: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1023)) then cipherstatepack(2-proj-3-tuple(v_1023),minnonce) else fail-any)) in
        {510}let v_1026: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1017)) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-3-tuple(v_1023))))) then (if not-caught-fail(v_1024) then (if not-caught-fail(v_1025) then (1-proj-3-tuple(v_1017),v_1024,v_1025) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {511}let (hs_1027: handshakestate,re_1028: key,plaintext_e: bitstring,valid_1029: bool,cs1_1030: cipherstate,cs2_1031: cipherstate) = (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-7-tuple(v_1005))))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then (if not-caught-fail(v_1007) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (if (v_1007 && 3-proj-3-tuple(v_1017)) then (if not-caught-fail(v_1018) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then (v_1018,getpublickey(3-proj-7-tuple(v_1005)),2-proj-3-tuple(v_1017),true,2-proj-3-tuple(v_1026),3-proj-3-tuple(v_1026)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {512}event RecvMsg(me_867,them_866,stage_e,plaintext_e,valid_1029);
        {513}insert statestore(me_867,them_866,statepack_f(hs_1027));
        {514}event RecvEnd(valid_1029)
    ) | (
        {516}event LeakS(phase0,me_867);
        {517}out(pub, key_s(me_867))
    ) | (
        {518}phase 1;
        {519}event LeakS(phase1,me_867);
        {520}out(pub, key_s(me_867))
    )
) | (
    {521}let them_1032: principal = charlie in
    {522}let me_1033: principal = bob in
    {523}let s_1034: keypair = keypairpack(empty,empty) in
    {524}out(pub, getpublickey(s_1034));
    (
        {525}let e_1035: keypair = keypairpack(empty,empty) in
        {526}let rs_1036: key = empty in
        {527}let re_1037: key = empty in
        {528}let v_1038: bitstring = catch-fail(hash(somename,empty)) in
        {529}let v_1039: key = catch-fail(v_1038) in
        {530}let v_1040: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {531}let v_1041: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1038) then (if not-caught-fail(v_1039) then (if not-caught-fail(v_1040) then symmetricstatepack(v_1040,v_1039,v_1038) else fail-any) else fail-any) else fail-any))) in
        {532}let v_1042: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1038) then (if not-caught-fail(v_1039) then (if not-caught-fail(v_1040) then symmetricstatepack(v_1040,v_1039,v_1038) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then symmetricstatepack(1-proj-3-tuple(v_1041),2-proj-3-tuple(v_1041),hash(3-proj-3-tuple(v_1041),empty)) else fail-any) else fail-any)) in
        {533}let hs_1043: handshakestate = (if not-caught-fail(v_1042) then handshakestatepack(v_1042,s_1034,e_1035,rs_1036,re_1037,empty,false) else fail-any) in
        {534}insert statestore(me_1033,them_1032,statepack_a(hs_1043))
    ) | (
        {568}get statestore(=me_1033,=them_1032,statepack_a(hs_1044: handshakestate)) in
        {535}in(pub, message_a_1045: bitstring);
        {536}let v_1046: bitstring = catch-fail(handshakestateunpack(hs_1044)) in
        {537}let v_1047: bitstring = catch-fail(deconcat3(message_a_1045)) in
        {538}let v_1048: bool = catch-fail(true) in
        {539}let v_1049: key = catch-fail(1-proj-3-tuple(v_1047)) in
        {540}let v_1050: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1046))) in
        {541}let v_1051: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1046)) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then symmetricstatepack(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1050),hash(3-proj-3-tuple(v_1050),v_1049)) else fail-any) else fail-any)) in
        {542}let v_1052: bitstring = catch-fail(symmetricstateunpack(v_1051)) in
        {543}let v_1053: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1052))) in
        {544}let v_1054: aead = catch-fail(decrypt(1-proj-2-tuple(v_1053),2-proj-2-tuple(v_1053),3-proj-3-tuple(v_1052),2-proj-3-tuple(v_1047))) in
        {545}let v_1055: bitstring = catch-fail(aeadunpack(v_1054)) in
        {546}let v_1056: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1052))) in
        {547}let v_1057: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1053))) && success?(1-proj-3-tuple(v_1052))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-2-tuple(v_1056))))) then cipherstatepack(1-proj-2-tuple(v_1056),increment_nonce(2-proj-2-tuple(v_1053))) else fail-any) else fail-any)) in
        {548}let v_1058: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1047)) && (success?(3-proj-3-tuple(v_1052)) && success?(1-proj-3-tuple(v_1052)))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then (if not-caught-fail(v_1054) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-3-tuple(v_1055))))) then (if not-caught-fail(v_1057) then (v_1057,3-proj-3-tuple(v_1055),1-proj-3-tuple(v_1055)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {549}let v_1059: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1058),2-proj-3-tuple(v_1052),3-proj-3-tuple(v_1052)))) in
        {550}let v_1060: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1047)) && success?(symmetricstatepack(1-proj-3-tuple(v_1058),2-proj-3-tuple(v_1052),3-proj-3-tuple(v_1052)))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then symmetricstatepack(1-proj-3-tuple(v_1059),2-proj-3-tuple(v_1059),hash(3-proj-3-tuple(v_1059),2-proj-3-tuple(v_1047))) else fail-any) else fail-any)) in
        {551}let v_1061: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1047)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if not-caught-fail(v_1060) then (v_1060,2-proj-3-tuple(v_1058),3-proj-3-tuple(v_1058)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {552}let v_1062: key = catch-fail(2-proj-3-tuple(v_1061)) in
        {553}let v_1063: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1061))) in
        {554}let v_1064: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1063))) in
        {555}let v_1065: aead = catch-fail(decrypt(1-proj-2-tuple(v_1064),2-proj-2-tuple(v_1064),3-proj-3-tuple(v_1063),3-proj-3-tuple(v_1047))) in
        {556}let v_1066: bitstring = catch-fail(aeadunpack(v_1065)) in
        {557}let v_1067: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1063))) in
        {558}let v_1068: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1064))) && success?(1-proj-3-tuple(v_1063))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then cipherstatepack(1-proj-2-tuple(v_1067),increment_nonce(2-proj-2-tuple(v_1064))) else fail-any) else fail-any)) in
        {559}let v_1069: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1047)) && (success?(3-proj-3-tuple(v_1063)) && success?(1-proj-3-tuple(v_1063)))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-2-tuple(v_1064))))) then (if not-caught-fail(v_1065) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then (if not-caught-fail(v_1068) then (v_1068,3-proj-3-tuple(v_1066),1-proj-3-tuple(v_1066)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {560}let v_1070: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1069),2-proj-3-tuple(v_1063),3-proj-3-tuple(v_1063)))) in
        {561}let v_1071: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1047)) && success?(symmetricstatepack(1-proj-3-tuple(v_1069),2-proj-3-tuple(v_1063),3-proj-3-tuple(v_1063)))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then symmetricstatepack(1-proj-3-tuple(v_1070),2-proj-3-tuple(v_1070),hash(3-proj-3-tuple(v_1070),3-proj-3-tuple(v_1047))) else fail-any) else fail-any)) in
        {562}let v_1072: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1047)) && success?(1-proj-3-tuple(v_1061))) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-3-tuple(v_1063))))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then (if not-caught-fail(v_1071) then (v_1071,2-proj-3-tuple(v_1069),3-proj-3-tuple(v_1069)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {563}let v_1073: key = catch-fail(dhexp(key_s(them_1032),g)) in
        {564}let v_1074: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1072),2-proj-7-tuple(v_1046),3-proj-7-tuple(v_1046),v_1062,v_1049,6-proj-7-tuple(v_1046),7-proj-7-tuple(v_1046))) in
        {565}let (hs_1075: handshakestate,re_1076: key,plaintext_a_1077: bitstring,valid_1078: bool) = (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-7-tuple(v_1046))))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then (if not-caught-fail(v_1048) then (if not-caught-fail(v_1049) then (if not-caught-fail(v_1051) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then (if not-caught-fail(v_1062) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then (if ((3-proj-3-tuple(v_1061) && 3-proj-3-tuple(v_1072)) && (v_1062 = getpublickey((if not-caught-fail(v_1073) then keypairpack(v_1073,key_s(them_1032)) else fail-any)))) then (if not-caught-fail(v_1074) then (v_1074,getpublickey(3-proj-7-tuple(v_1046)),2-proj-3-tuple(v_1072),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {566}event RecvMsg(me_1033,them_1032,stage_a,plaintext_a_1077,valid_1078);
        {567}insert statestore(me_1033,them_1032,statepack_b(hs_1075))
    ) | (
        {617}get statestore(=me_1033,=them_1032,statepack_b(hs_1079: handshakestate)) in
        {569}let v_1080: bitstring = catch-fail(handshakestateunpack(hs_1079)) in
        {570}let v_1081: bitstring = catch-fail((empty,empty,empty)) in
        {571}new key_e_1082[me_1033,them_1032]: key;
        {572}let v_1083: key = catch-fail(dhexp(key_e_1082,g)) in
        {573}let v_1084: keypair = catch-fail((if not-caught-fail(v_1083) then keypairpack(v_1083,key_e_1082) else fail-any)) in
        {574}let v_1085: bitstring = catch-fail(getpublickey(v_1084)) in
        {575}let v_1086: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1080))) in
        {576}let v_1087: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then symmetricstatepack(1-proj-3-tuple(v_1086),2-proj-3-tuple(v_1086),hash(3-proj-3-tuple(v_1086),v_1085)) else fail-any) else fail-any)) in
        {577}let v_1088: bitstring = catch-fail(keypairunpack(v_1084)) in
        {578}let v_1089: bitstring = catch-fail(symmetricstateunpack(v_1087)) in
        {579}let v_1090: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1089),(if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-2-tuple(v_1088))))) then dhexp(2-proj-2-tuple(v_1088),5-proj-7-tuple(v_1080)) else fail-any) else fail-any))) in
        {580}let v_1091: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1089),(if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-2-tuple(v_1088))))) then dhexp(2-proj-2-tuple(v_1088),5-proj-7-tuple(v_1080)) else fail-any) else fail-any))) in
        {581}let v_1092: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1089),(if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-2-tuple(v_1088))))) then dhexp(2-proj-2-tuple(v_1088),5-proj-7-tuple(v_1080)) else fail-any) else fail-any))) in
        {582}let v_1093: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-2-tuple(v_1088))))) then dhexp(2-proj-2-tuple(v_1088),5-proj-7-tuple(v_1080)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1089))) then (if not-caught-fail(v_1090) then (if not-caught-fail(v_1091) then (if not-caught-fail(v_1092) then (v_1090,v_1091,v_1092) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {583}let v_1094: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-2-tuple(v_1088))))) then dhexp(2-proj-2-tuple(v_1088),5-proj-7-tuple(v_1080)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-3-tuple(v_1089))))) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-3-tuple(v_1093))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1093)) then cipherstatepack(2-proj-3-tuple(v_1093),minnonce) else fail-any),1-proj-3-tuple(v_1093),3-proj-3-tuple(v_1089)) else fail-any) else fail-any) else fail-any)) in
        {584}let v_1095: key = catch-fail(dhexp(key_s(me_1033),g)) in
        {585}let v_1096: keypair = catch-fail((if not-caught-fail(v_1095) then keypairpack(v_1095,key_s(me_1033)) else fail-any)) in
        {586}let v_1097: bitstring = catch-fail(symmetricstateunpack(v_1094)) in
        {587}let v_1098: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1097))) in
        {588}let v_1099: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1098),2-proj-2-tuple(v_1098),3-proj-3-tuple(v_1097),getpublickey(v_1096))) in
        {589}let v_1100: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1097))) in
        {590}let v_1101: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1098))) && success?(1-proj-3-tuple(v_1097))) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-2-tuple(v_1100))))) then cipherstatepack(1-proj-2-tuple(v_1100),increment_nonce(2-proj-2-tuple(v_1098))) else fail-any) else fail-any)) in
        {591}let v_1102: bitstring = catch-fail((if (success?(getpublickey(v_1096)) && (success?(3-proj-3-tuple(v_1097)) && success?(1-proj-3-tuple(v_1097)))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then (if not-caught-fail(v_1099) then (if not-caught-fail(v_1101) then (v_1101,v_1099) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1103: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1102),2-proj-3-tuple(v_1097),3-proj-3-tuple(v_1097)))) in
        {593}let v_1104: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1102)) && success?(symmetricstatepack(1-proj-2-tuple(v_1102),2-proj-3-tuple(v_1097),3-proj-3-tuple(v_1097)))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then symmetricstatepack(1-proj-3-tuple(v_1103),2-proj-3-tuple(v_1103),hash(3-proj-3-tuple(v_1103),2-proj-2-tuple(v_1102))) else fail-any) else fail-any)) in
        {594}let v_1105: bitstring = catch-fail((if success?(getpublickey(v_1096)) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-3-tuple(v_1097))))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then (if not-caught-fail(v_1104) then (v_1104,2-proj-2-tuple(v_1102)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {595}let v_1106: bitstring = catch-fail(keypairunpack(v_1096)) in
        {596}let v_1107: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1105))) in
        {597}let v_1108: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1107),(if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then dhexp(2-proj-2-tuple(v_1106),5-proj-7-tuple(v_1080)) else fail-any) else fail-any))) in
        {598}let v_1109: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1107),(if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then dhexp(2-proj-2-tuple(v_1106),5-proj-7-tuple(v_1080)) else fail-any) else fail-any))) in
        {599}let v_1110: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1107),(if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then dhexp(2-proj-2-tuple(v_1106),5-proj-7-tuple(v_1080)) else fail-any) else fail-any))) in
        {600}let v_1111: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then dhexp(2-proj-2-tuple(v_1106),5-proj-7-tuple(v_1080)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1107))) then (if not-caught-fail(v_1108) then (if not-caught-fail(v_1109) then (if not-caught-fail(v_1110) then (v_1108,v_1109,v_1110) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {601}let v_1112: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1080)) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then dhexp(2-proj-2-tuple(v_1106),5-proj-7-tuple(v_1080)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1105))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1111)) then cipherstatepack(2-proj-3-tuple(v_1111),minnonce) else fail-any),1-proj-3-tuple(v_1111),3-proj-3-tuple(v_1107)) else fail-any) else fail-any) else fail-any)) in
        {602}let v_1113: bitstring = catch-fail(symmetricstateunpack(v_1112)) in
        {603}let v_1114: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1113))) in
        {604}let v_1115: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1114),2-proj-2-tuple(v_1114),3-proj-3-tuple(v_1113),msg_b(me_1033,them_1032))) in
        {605}let v_1116: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1113))) in
        {606}let v_1117: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1114))) && success?(1-proj-3-tuple(v_1113))) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-2-tuple(v_1116))))) then cipherstatepack(1-proj-2-tuple(v_1116),increment_nonce(2-proj-2-tuple(v_1114))) else fail-any) else fail-any)) in
        {607}let v_1118: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1113)) && success?(1-proj-3-tuple(v_1113))) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-2-tuple(v_1114))))) then (if not-caught-fail(v_1115) then (if not-caught-fail(v_1117) then (v_1117,v_1115) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1119: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1118),2-proj-3-tuple(v_1113),3-proj-3-tuple(v_1113)))) in
        {609}let v_1120: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1118)) && success?(symmetricstatepack(1-proj-2-tuple(v_1118),2-proj-3-tuple(v_1113),3-proj-3-tuple(v_1113)))) then (if (not-caught-fail(v_1119) && success?(is-true(success?(1-proj-3-tuple(v_1119))))) then symmetricstatepack(1-proj-3-tuple(v_1119),2-proj-3-tuple(v_1119),hash(3-proj-3-tuple(v_1119),2-proj-2-tuple(v_1118))) else fail-any) else fail-any)) in
        {610}let v_1121: bitstring = catch-fail((if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-3-tuple(v_1113))))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-2-tuple(v_1118))))) then (if not-caught-fail(v_1120) then (v_1120,2-proj-2-tuple(v_1118)) else fail-any) else fail-any) else fail-any)) in
        {611}let v_1122: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1121),v_1096,v_1084,4-proj-7-tuple(v_1080),5-proj-7-tuple(v_1080),6-proj-7-tuple(v_1080),7-proj-7-tuple(v_1080))) in
        {612}let v_1123: bitstring = catch-fail(concat3(v_1085,2-proj-2-tuple(v_1105),2-proj-2-tuple(v_1121))) in
        {613}let (hs_1124: handshakestate,re_1125: key,message_b_1126: bitstring) = (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-7-tuple(v_1080))))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-3-tuple(v_1081))))) then (if not-caught-fail(v_1084) then (if not-caught-fail(v_1085) then (if not-caught-fail(v_1087) then (if not-caught-fail(v_1094) then (if not-caught-fail(v_1096) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then (if not-caught-fail(v_1112) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-2-tuple(v_1121))))) then (if not-caught-fail(v_1122) then (if not-caught-fail(v_1123) then (v_1122,5-proj-7-tuple(v_1080),v_1123) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {614}event SendMsg(me_1033,them_1032,stage_b,msg_b(me_1033,them_1032),true);
        {615}insert statestore(me_1033,them_1032,statepack_c(hs_1124));
        {616}out(pub, message_b_1126)
    ) | (
        {643}get statestore(=me_1033,=them_1032,statepack_c(hs_1127: handshakestate)) in
        {618}in(pub, message_c_1128: bitstring);
        {619}let v_1129: bitstring = catch-fail(handshakestateunpack(hs_1127)) in
        {620}let v_1130: bitstring = catch-fail(deconcat3(message_c_1128)) in
        {621}let v_1131: bool = catch-fail(true) in
        {622}let v_1132: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1129))) in
        {623}let v_1133: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1129))) in
        {624}let v_1134: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1133),(if (success?(4-proj-7-tuple(v_1129)) && success?(3-proj-7-tuple(v_1129))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-2-tuple(v_1132))))) then dhexp(2-proj-2-tuple(v_1132),4-proj-7-tuple(v_1129)) else fail-any) else fail-any))) in
        {625}let v_1135: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1133),(if (success?(4-proj-7-tuple(v_1129)) && success?(3-proj-7-tuple(v_1129))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-2-tuple(v_1132))))) then dhexp(2-proj-2-tuple(v_1132),4-proj-7-tuple(v_1129)) else fail-any) else fail-any))) in
        {626}let v_1136: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1133),(if (success?(4-proj-7-tuple(v_1129)) && success?(3-proj-7-tuple(v_1129))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-2-tuple(v_1132))))) then dhexp(2-proj-2-tuple(v_1132),4-proj-7-tuple(v_1129)) else fail-any) else fail-any))) in
        {627}let v_1137: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1129)) && success?(3-proj-7-tuple(v_1129))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-2-tuple(v_1132))))) then dhexp(2-proj-2-tuple(v_1132),4-proj-7-tuple(v_1129)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1133))) then (if not-caught-fail(v_1134) then (if not-caught-fail(v_1135) then (if not-caught-fail(v_1136) then (v_1134,v_1135,v_1136) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {628}let v_1138: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1129)) && success?(3-proj-7-tuple(v_1129))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-2-tuple(v_1132))))) then dhexp(2-proj-2-tuple(v_1132),4-proj-7-tuple(v_1129)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1129))) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-3-tuple(v_1133))))) then (if (not-caught-fail(v_1137) && success?(is-true(success?(1-proj-3-tuple(v_1137))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1137)) then cipherstatepack(2-proj-3-tuple(v_1137),minnonce) else fail-any),1-proj-3-tuple(v_1137),3-proj-3-tuple(v_1133)) else fail-any) else fail-any) else fail-any)) in
        {629}let v_1139: bitstring = catch-fail(symmetricstateunpack(v_1138)) in
        {630}let v_1140: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1139))) in
        {631}let v_1141: aead = catch-fail(decrypt(1-proj-2-tuple(v_1140),2-proj-2-tuple(v_1140),3-proj-3-tuple(v_1139),3-proj-3-tuple(v_1130))) in
        {632}let v_1142: bitstring = catch-fail(aeadunpack(v_1141)) in
        {633}let v_1143: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1139))) in
        {634}let v_1144: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1140))) && success?(1-proj-3-tuple(v_1139))) then (if (not-caught-fail(v_1143) && success?(is-true(success?(1-proj-2-tuple(v_1143))))) then cipherstatepack(1-proj-2-tuple(v_1143),increment_nonce(2-proj-2-tuple(v_1140))) else fail-any) else fail-any)) in
        {635}let v_1145: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1130)) && (success?(3-proj-3-tuple(v_1139)) && success?(1-proj-3-tuple(v_1139)))) then (if (not-caught-fail(v_1140) && success?(is-true(success?(1-proj-2-tuple(v_1140))))) then (if not-caught-fail(v_1141) then (if (not-caught-fail(v_1142) && success?(is-true(success?(1-proj-3-tuple(v_1142))))) then (if not-caught-fail(v_1144) then (v_1144,3-proj-3-tuple(v_1142),1-proj-3-tuple(v_1142)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {636}let v_1146: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1145),2-proj-3-tuple(v_1139),3-proj-3-tuple(v_1139)))) in
        {637}let v_1147: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1130)) && success?(symmetricstatepack(1-proj-3-tuple(v_1145),2-proj-3-tuple(v_1139),3-proj-3-tuple(v_1139)))) then (if (not-caught-fail(v_1146) && success?(is-true(success?(1-proj-3-tuple(v_1146))))) then symmetricstatepack(1-proj-3-tuple(v_1146),2-proj-3-tuple(v_1146),hash(3-proj-3-tuple(v_1146),3-proj-3-tuple(v_1130))) else fail-any) else fail-any)) in
        {638}let v_1148: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1130)) then (if (not-caught-fail(v_1139) && success?(is-true(success?(1-proj-3-tuple(v_1139))))) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-3-tuple(v_1145))))) then (if not-caught-fail(v_1147) then (v_1147,2-proj-3-tuple(v_1145),3-proj-3-tuple(v_1145)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {639}let v_1149: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1148),2-proj-7-tuple(v_1129),3-proj-7-tuple(v_1129),4-proj-7-tuple(v_1129),5-proj-7-tuple(v_1129),6-proj-7-tuple(v_1129),7-proj-7-tuple(v_1129))) in
        {640}let (hs_1150: handshakestate,re_1151: key,plaintext_c_1152: bitstring,valid_1153: bool) = (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-7-tuple(v_1129))))) then (if (not-caught-fail(v_1130) && success?(is-true(success?(1-proj-3-tuple(v_1130))))) then (if not-caught-fail(v_1131) then (if not-caught-fail(v_1138) then (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-3-tuple(v_1148))))) then (if (v_1131 && 3-proj-3-tuple(v_1148)) then (if not-caught-fail(v_1149) then (v_1149,getpublickey(3-proj-7-tuple(v_1129)),2-proj-3-tuple(v_1148),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {641}event RecvMsg(me_1033,them_1032,stage_c,plaintext_c_1152,valid_1153);
        {642}insert statestore(me_1033,them_1032,statepack_d(hs_1150))
    ) | (
        {661}get statestore(=me_1033,=them_1032,statepack_d(hs_1154: handshakestate)) in
        {644}let v_1155: bitstring = catch-fail(handshakestateunpack(hs_1154)) in
        {645}let v_1156: bitstring = catch-fail((empty,empty,empty)) in
        {646}let v_1157: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1155))) in
        {647}let v_1158: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1157))) in
        {648}let v_1159: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1158),2-proj-2-tuple(v_1158),3-proj-3-tuple(v_1157),msg_d(me_1033,them_1032))) in
        {649}let v_1160: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1157))) in
        {650}let v_1161: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1158))) && success?(1-proj-3-tuple(v_1157))) then (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-2-tuple(v_1160))))) then cipherstatepack(1-proj-2-tuple(v_1160),increment_nonce(2-proj-2-tuple(v_1158))) else fail-any) else fail-any)) in
        {651}let v_1162: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1157)) && success?(1-proj-3-tuple(v_1157))) then (if (not-caught-fail(v_1158) && success?(is-true(success?(1-proj-2-tuple(v_1158))))) then (if not-caught-fail(v_1159) then (if not-caught-fail(v_1161) then (v_1161,v_1159) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {652}let v_1163: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1162),2-proj-3-tuple(v_1157),3-proj-3-tuple(v_1157)))) in
        {653}let v_1164: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1162)) && success?(symmetricstatepack(1-proj-2-tuple(v_1162),2-proj-3-tuple(v_1157),3-proj-3-tuple(v_1157)))) then (if (not-caught-fail(v_1163) && success?(is-true(success?(1-proj-3-tuple(v_1163))))) then symmetricstatepack(1-proj-3-tuple(v_1163),2-proj-3-tuple(v_1163),hash(3-proj-3-tuple(v_1163),2-proj-2-tuple(v_1162))) else fail-any) else fail-any)) in
        {654}let v_1165: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1155)) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-3-tuple(v_1157))))) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-2-tuple(v_1162))))) then (if not-caught-fail(v_1164) then (v_1164,2-proj-2-tuple(v_1162)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {655}let v_1166: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1165),2-proj-7-tuple(v_1155),3-proj-7-tuple(v_1155),4-proj-7-tuple(v_1155),5-proj-7-tuple(v_1155),6-proj-7-tuple(v_1155),7-proj-7-tuple(v_1155))) in
        {656}let v_1167: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1156),2-proj-3-tuple(v_1156),2-proj-2-tuple(v_1165))) in
        {657}let (hs_1168: handshakestate,re_1169: key,message_d_1170: bitstring) = (if (not-caught-fail(v_1155) && success?(is-true(success?(1-proj-7-tuple(v_1155))))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-2-tuple(v_1165))))) then (if not-caught-fail(v_1166) then (if not-caught-fail(v_1167) then (v_1166,5-proj-7-tuple(v_1155),v_1167) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {658}event SendMsg(me_1033,them_1032,stage_d,msg_d(me_1033,them_1032),true);
        {659}insert statestore(me_1033,them_1032,statepack_e(hs_1168));
        {660}out(pub, message_d_1170)
    ) | (
        {689}get statestore(=me_1033,=them_1032,statepack_e(hs_1171: handshakestate)) in
        {662}in(pub, message_e_1172: bitstring);
        {663}let v_1173: bitstring = catch-fail(handshakestateunpack(hs_1171)) in
        {664}let v_1174: bitstring = catch-fail(deconcat3(message_e_1172)) in
        {665}let v_1175: bool = catch-fail(true) in
        {666}let v_1176: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1173))) in
        {667}let v_1177: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1176))) in
        {668}let v_1178: aead = catch-fail(decrypt(1-proj-2-tuple(v_1177),2-proj-2-tuple(v_1177),3-proj-3-tuple(v_1176),3-proj-3-tuple(v_1174))) in
        {669}let v_1179: bitstring = catch-fail(aeadunpack(v_1178)) in
        {670}let v_1180: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1176))) in
        {671}let v_1181: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1177))) && success?(1-proj-3-tuple(v_1176))) then (if (not-caught-fail(v_1180) && success?(is-true(success?(1-proj-2-tuple(v_1180))))) then cipherstatepack(1-proj-2-tuple(v_1180),increment_nonce(2-proj-2-tuple(v_1177))) else fail-any) else fail-any)) in
        {672}let v_1182: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1174)) && (success?(3-proj-3-tuple(v_1176)) && success?(1-proj-3-tuple(v_1176)))) then (if (not-caught-fail(v_1177) && success?(is-true(success?(1-proj-2-tuple(v_1177))))) then (if not-caught-fail(v_1178) then (if (not-caught-fail(v_1179) && success?(is-true(success?(1-proj-3-tuple(v_1179))))) then (if not-caught-fail(v_1181) then (v_1181,3-proj-3-tuple(v_1179),1-proj-3-tuple(v_1179)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {673}let v_1183: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1182),2-proj-3-tuple(v_1176),3-proj-3-tuple(v_1176)))) in
        {674}let v_1184: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1174)) && success?(symmetricstatepack(1-proj-3-tuple(v_1182),2-proj-3-tuple(v_1176),3-proj-3-tuple(v_1176)))) then (if (not-caught-fail(v_1183) && success?(is-true(success?(1-proj-3-tuple(v_1183))))) then symmetricstatepack(1-proj-3-tuple(v_1183),2-proj-3-tuple(v_1183),hash(3-proj-3-tuple(v_1183),3-proj-3-tuple(v_1174))) else fail-any) else fail-any)) in
        {675}let v_1185: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1174)) && success?(1-proj-7-tuple(v_1173))) then (if (not-caught-fail(v_1176) && success?(is-true(success?(1-proj-3-tuple(v_1176))))) then (if (not-caught-fail(v_1182) && success?(is-true(success?(1-proj-3-tuple(v_1182))))) then (if not-caught-fail(v_1184) then (v_1184,2-proj-3-tuple(v_1182),3-proj-3-tuple(v_1182)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {676}let v_1186: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1185),2-proj-7-tuple(v_1173),3-proj-7-tuple(v_1173),4-proj-7-tuple(v_1173),5-proj-7-tuple(v_1173),6-proj-7-tuple(v_1173),7-proj-7-tuple(v_1173))) in
        {677}let v_1187: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1185))) in
        {678}let v_1188: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1187),zero)) in
        {679}let v_1189: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1187),zero)) in
        {680}let v_1190: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1187),zero)) in
        {681}let v_1191: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1187)) then (if not-caught-fail(v_1188) then (if not-caught-fail(v_1189) then (if not-caught-fail(v_1190) then (v_1188,v_1189,v_1190) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {682}let v_1192: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1191)) then cipherstatepack(1-proj-3-tuple(v_1191),minnonce) else fail-any)) in
        {683}let v_1193: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1191)) then cipherstatepack(2-proj-3-tuple(v_1191),minnonce) else fail-any)) in
        {684}let v_1194: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1185)) then (if (not-caught-fail(v_1187) && success?(is-true(success?(1-proj-3-tuple(v_1187))))) then (if (not-caught-fail(v_1191) && success?(is-true(success?(1-proj-3-tuple(v_1191))))) then (if not-caught-fail(v_1192) then (if not-caught-fail(v_1193) then (1-proj-3-tuple(v_1185),v_1192,v_1193) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {685}let (hs_1195: handshakestate,re_1196: key,plaintext_e_1197: bitstring,valid_1198: bool,cs1_1199: cipherstate,cs2_1200: cipherstate) = (if (not-caught-fail(v_1173) && success?(is-true(success?(1-proj-7-tuple(v_1173))))) then (if (not-caught-fail(v_1174) && success?(is-true(success?(1-proj-3-tuple(v_1174))))) then (if not-caught-fail(v_1175) then (if (not-caught-fail(v_1185) && success?(is-true(success?(1-proj-3-tuple(v_1185))))) then (if (v_1175 && 3-proj-3-tuple(v_1185)) then (if not-caught-fail(v_1186) then (if (not-caught-fail(v_1194) && success?(is-true(success?(1-proj-3-tuple(v_1194))))) then (v_1186,getpublickey(3-proj-7-tuple(v_1173)),2-proj-3-tuple(v_1185),true,2-proj-3-tuple(v_1194),3-proj-3-tuple(v_1194)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {686}event RecvMsg(me_1033,them_1032,stage_e,plaintext_e_1197,valid_1198);
        {687}insert statestore(me_1033,them_1032,statepack_f(hs_1195));
        {688}event RecvEnd(valid_1198)
    ) | (
        {690}event LeakS(phase0,me_1033);
        {691}out(pub, key_s(me_1033))
    ) | (
        {692}phase 1;
        {693}event LeakS(phase1,me_1033);
        {694}out(pub, key_s(me_1033))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1281,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1281,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1281,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1281,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1281,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1281,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1281,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1281,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1281,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1281,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 218 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 34 rules in the queue.
600 rules inserted. The rule base contains 579 rules. 232 rules in the queue.
800 rules inserted. The rule base contains 764 rules. 62 rules in the queue.
1000 rules inserted. The rule base contains 954 rules. 325 rules in the queue.
1200 rules inserted. The rule base contains 1122 rules. 294 rules in the queue.
1400 rules inserted. The rule base contains 1283 rules. 302 rules in the queue.
1600 rules inserted. The rule base contains 1446 rules. 372 rules in the queue.
1800 rules inserted. The rule base contains 1615 rules. 355 rules in the queue.
2000 rules inserted. The rule base contains 1771 rules. 337 rules in the queue.
2200 rules inserted. The rule base contains 1955 rules. 374 rules in the queue.
2400 rules inserted. The rule base contains 2100 rules. 349 rules in the queue.
2600 rules inserted. The rule base contains 2233 rules. 300 rules in the queue.
2800 rules inserted. The rule base contains 2388 rules. 290 rules in the queue.
3000 rules inserted. The rule base contains 2508 rules. 297 rules in the queue.
3200 rules inserted. The rule base contains 2622 rules. 305 rules in the queue.
3400 rules inserted. The rule base contains 2764 rules. 323 rules in the queue.
3600 rules inserted. The rule base contains 2855 rules. 320 rules in the queue.
3800 rules inserted. The rule base contains 2953 rules. 300 rules in the queue.
4000 rules inserted. The rule base contains 3061 rules. 285 rules in the queue.
4200 rules inserted. The rule base contains 3200 rules. 314 rules in the queue.
4400 rules inserted. The rule base contains 3288 rules. 283 rules in the queue.
4600 rules inserted. The rule base contains 3410 rules. 277 rules in the queue.
4800 rules inserted. The rule base contains 3565 rules. 284 rules in the queue.
5000 rules inserted. The rule base contains 3712 rules. 299 rules in the queue.
5200 rules inserted. The rule base contains 3793 rules. 253 rules in the queue.
5400 rules inserted. The rule base contains 3959 rules. 239 rules in the queue.
5600 rules inserted. The rule base contains 4056 rules. 254 rules in the queue.
5800 rules inserted. The rule base contains 4154 rules. 237 rules in the queue.
6000 rules inserted. The rule base contains 4293 rules. 248 rules in the queue.
6200 rules inserted. The rule base contains 4448 rules. 281 rules in the queue.
6400 rules inserted. The rule base contains 4618 rules. 318 rules in the queue.
6600 rules inserted. The rule base contains 4761 rules. 314 rules in the queue.
6800 rules inserted. The rule base contains 4878 rules. 314 rules in the queue.
7000 rules inserted. The rule base contains 5014 rules. 310 rules in the queue.
7200 rules inserted. The rule base contains 5123 rules. 269 rules in the queue.
7400 rules inserted. The rule base contains 5281 rules. 241 rules in the queue.
7600 rules inserted. The rule base contains 5410 rules. 256 rules in the queue.
7800 rules inserted. The rule base contains 5547 rules. 295 rules in the queue.
8000 rules inserted. The rule base contains 5678 rules. 272 rules in the queue.
8200 rules inserted. The rule base contains 5785 rules. 242 rules in the queue.
8400 rules inserted. The rule base contains 5884 rules. 189 rules in the queue.
8600 rules inserted. The rule base contains 5993 rules. 160 rules in the queue.
8800 rules inserted. The rule base contains 6099 rules. 162 rules in the queue.
9000 rules inserted. The rule base contains 6219 rules. 105 rules in the queue.
9200 rules inserted. The rule base contains 6284 rules. 33 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_338517746 = key_e_715[me_701 = alice,them_700 = charlie,!1 = @sid_338517730]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {360}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {188}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {223}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {220}.
So the message concat3(dhexp(key_e_338517746,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517746,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_338517746,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517746,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {222}.
mess(pub,concat3(dhexp(key_e_338517746,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517746,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_338517746,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517746,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {394}.
The message concat3(dhexp(key_e_338517746,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517746,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_338517746,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517746,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {361}.
We have dhexp(key_e_338517746,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {392}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1281,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1281,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1281,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1281,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_338517783 = key_e_715[me_701 = alice,them_700 = charlie,!1 = @sid_338517767]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {360}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {188}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {223}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {220}.
So the message concat3(dhexp(key_e_338517783,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517783,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_338517783,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517783,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {222}.
mess(pub,concat3(dhexp(key_e_338517783,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517783,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_338517783,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517783,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {394}.
The message concat3(dhexp(key_e_338517783,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517783,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_338517783,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517783,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {361}.
We have dhexp(key_e_338517783,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {392}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_338517814 = key_e_715[me_701 = alice,them_700 = charlie,!1 = @sid_338517798]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {360}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {188}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {223}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {220}.
So the message concat3(dhexp(key_e_338517814,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517814,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_338517814,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517814,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {222}.
mess(pub,concat3(dhexp(key_e_338517814,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517814,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_338517814,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517814,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {394}.
The message concat3(dhexp(key_e_338517814,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517814,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_338517814,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_338517814,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {361}.
We have dhexp(key_e_338517814,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {392}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_338517884 = key_e[me = alice,them = bob,!1 = @sid_338517870]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_338517884,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_338517884,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_338517884,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_338517884,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_338517884,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_338517884,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_338517884,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_338517884,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_338517884,g).
attacker(dhexp(key_338517884,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_338517884,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517884,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_338517954 = key_e[me = alice,them = bob,!1 = @sid_338517940]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_338517954,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_338517954,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_338517954,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_338517954,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_338517954,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_338517954,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_338517954,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_338517954,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_338517954,g).
attacker(dhexp(key_338517954,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_338517954,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338517954,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_338518025 = key_e[me = alice,them = bob,!1 = @sid_338518011]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_338518025,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_338518025,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_338518025,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_338518025,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_338518025,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_338518025,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_338518025,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_338518025,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_338518025,g).
attacker(dhexp(key_338518025,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_338518025,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518025,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_338518095 = key_e[me = alice,them = bob,!1 = @sid_338518081]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_338518095,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_338518095,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_338518095,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_338518095,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_338518095,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_338518095,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_338518095,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_338518095,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_338518095,g).
attacker(dhexp(key_338518095,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_338518095,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_338518095,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1281,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1281,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1281,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1281,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1281,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1281,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1281,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1281,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1281,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1281,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1281,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1281,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1281,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1281,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1281,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1281,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
