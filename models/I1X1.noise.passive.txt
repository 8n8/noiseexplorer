File "I1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "I1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "I1X1.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "I1X1.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 305, character 6:
Warning: identifier s rebound.
File "I1X1.noise.passive.pv", line 306, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 306, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X1.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "I1X1.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "I1X1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 320, character 6:
Warning: identifier s rebound.
File "I1X1.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X1.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "I1X1.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 361, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 361, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X1.noise.passive.pv", line 362, characters 6-7:
Warning: identifier rs rebound.
File "I1X1.noise.passive.pv", line 363, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 365, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 373, characters 6-7:
Warning: identifier re rebound.
File "I1X1.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 377, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X1.noise.passive.pv", line 378, characters 6-7:
Warning: identifier rs rebound.
File "I1X1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 389, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 390, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 393, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 401, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 403, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 413, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 584, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 577, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 401, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 403, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 569, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 373, characters 6-7:
Warning: identifier re rebound.
File "I1X1.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 377, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X1.noise.passive.pv", line 378, characters 6-7:
Warning: identifier rs rebound.
File "I1X1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "I1X1.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "I1X1.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 305, character 6:
Warning: identifier s rebound.
File "I1X1.noise.passive.pv", line 306, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 306, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X1.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 642, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 413, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 634, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 627, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 389, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 390, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 393, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 619, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "I1X1.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "I1X1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 320, character 6:
Warning: identifier s rebound.
File "I1X1.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X1.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 612, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "I1X1.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 361, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 361, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X1.noise.passive.pv", line 362, characters 6-7:
Warning: identifier rs rebound.
File "I1X1.noise.passive.pv", line 363, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 365, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_548: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_548));
    (
        {4}let e_549: keypair = keypairpack(empty,empty) in
        {5}let rs_550: key = empty in
        {6}let re_551: key = empty in
        {7}let v_552: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_553: key = catch-fail(v_552) in
        {9}let v_554: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_555: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then symmetricstatepack(v_554,v_553,v_552) else fail-any) else fail-any) else fail-any))) in
        {11}let v_556: symmetricstate = catch-fail((if success?((if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then symmetricstatepack(v_554,v_553,v_552) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_555),hash(3-proj-3-tuple(v_555),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_556) then handshakestatepack(v_556,s_548,e_549,rs_550,re_551,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {47}get statestore(=alice,=bob,statepack_a(hs_557: handshakestate)) in
        {14}let v_558: bitstring = catch-fail(handshakestateunpack(hs_557)) in
        {15}let v_559: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_560: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_561: keypair = catch-fail((if not-caught-fail(v_560) then keypairpack(v_560,key_e(alice,bob)) else fail-any)) in
        {18}let v_562: bitstring = catch-fail(getpublickey(v_561)) in
        {19}let v_563: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_558))) in
        {20}let v_564: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_558)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then symmetricstatepack(1-proj-3-tuple(v_563),2-proj-3-tuple(v_563),hash(3-proj-3-tuple(v_563),v_562)) else fail-any) else fail-any)) in
        {21}let v_565: key = catch-fail(dhexp(key_s(alice),g)) in
        {22}let v_566: keypair = catch-fail((if not-caught-fail(v_565) then keypairpack(v_565,key_s(alice)) else fail-any)) in
        {23}let v_567: bitstring = catch-fail(symmetricstateunpack(v_564)) in
        {24}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {25}let v_569: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_568),2-proj-2-tuple(v_568),3-proj-3-tuple(v_567),getpublickey(v_566))) in
        {26}let v_570: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {27}let v_571: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_568))) && success?(1-proj-3-tuple(v_567))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then cipherstatepack(1-proj-2-tuple(v_570),increment_nonce(2-proj-2-tuple(v_568))) else fail-any) else fail-any)) in
        {28}let v_572: bitstring = catch-fail((if (success?(getpublickey(v_566)) && (success?(3-proj-3-tuple(v_567)) && success?(1-proj-3-tuple(v_567)))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then (if not-caught-fail(v_569) then (if not-caught-fail(v_571) then (v_571,v_569) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_573: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_572),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) in
        {30}let v_574: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_572)) && success?(symmetricstatepack(1-proj-2-tuple(v_572),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),2-proj-2-tuple(v_572))) else fail-any) else fail-any)) in
        {31}let v_575: bitstring = catch-fail((if success?(getpublickey(v_566)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_574) then (v_574,2-proj-2-tuple(v_572)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_576: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_575))) in
        {33}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {34}let v_578: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_577),2-proj-2-tuple(v_577),3-proj-3-tuple(v_576),msg_a(alice,bob))) in
        {35}let v_579: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {36}let v_580: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_577))) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then cipherstatepack(1-proj-2-tuple(v_579),increment_nonce(2-proj-2-tuple(v_577))) else fail-any) else fail-any)) in
        {37}let v_581: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_576)) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_580) then (v_580,v_578) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_582: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) in
        {39}let v_583: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_581)) && success?(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),2-proj-2-tuple(v_581))) else fail-any) else fail-any)) in
        {40}let v_584: bitstring = catch-fail((if success?(1-proj-2-tuple(v_575)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_583) then (v_583,2-proj-2-tuple(v_581)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_585: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_584),v_566,v_561,4-proj-7-tuple(v_558),5-proj-7-tuple(v_558),6-proj-7-tuple(v_558),7-proj-7-tuple(v_558))) in
        {42}let v_586: bitstring = catch-fail(concat3(v_562,2-proj-2-tuple(v_575),2-proj-2-tuple(v_584))) in
        {43}let (hs_587: handshakestate,re_588: key,message_a: bitstring) = (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-7-tuple(v_558))))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_564) then (if not-caught-fail(v_566) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (v_585,5-proj-7-tuple(v_558),v_586) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {44}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {45}insert statestore(alice,bob,statepack_b(hs_587));
        {46}out(pub, message_a)
    ) | (
        {88}get statestore(=alice,=bob,statepack_b(hs_589: handshakestate)) in
        {48}in(pub, message_b: bitstring);
        {49}let v_590: bitstring = catch-fail(handshakestateunpack(hs_589)) in
        {50}let v_591: bitstring = catch-fail(deconcat3(message_b)) in
        {51}let v_592: bool = catch-fail(true) in
        {52}let v_593: key = catch-fail(1-proj-3-tuple(v_591)) in
        {53}let v_594: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_590))) in
        {54}let v_595: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_590)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),v_593)) else fail-any) else fail-any)) in
        {55}let v_596: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_590))) in
        {56}let v_597: bitstring = catch-fail(symmetricstateunpack(v_595)) in
        {57}let v_598: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_597),(if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any))) in
        {58}let v_599: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_597),(if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any))) in
        {59}let v_600: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_597),(if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any))) in
        {60}let v_601: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_597))) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (v_598,v_599,v_600) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_602: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_590)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then dhexp(2-proj-2-tuple(v_596),v_593) else fail-any) else fail-any)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_601)) then cipherstatepack(2-proj-3-tuple(v_601),minnonce) else fail-any),1-proj-3-tuple(v_601),3-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any)) in
        {62}let v_603: bitstring = catch-fail(symmetricstateunpack(v_602)) in
        {63}let v_604: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {64}let v_605: aead = catch-fail(decrypt(1-proj-2-tuple(v_604),2-proj-2-tuple(v_604),3-proj-3-tuple(v_603),2-proj-3-tuple(v_591))) in
        {65}let v_606: bitstring = catch-fail(aeadunpack(v_605)) in
        {66}let v_607: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {67}let v_608: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_604))) && success?(1-proj-3-tuple(v_603))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then cipherstatepack(1-proj-2-tuple(v_607),increment_nonce(2-proj-2-tuple(v_604))) else fail-any) else fail-any)) in
        {68}let v_609: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_591)) && (success?(3-proj-3-tuple(v_603)) && success?(1-proj-3-tuple(v_603)))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then (if not-caught-fail(v_605) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if not-caught-fail(v_608) then (v_608,3-proj-3-tuple(v_606),1-proj-3-tuple(v_606)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {69}let v_610: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) in
        {70}let v_611: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_591)) && success?(symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_610),hash(3-proj-3-tuple(v_610),2-proj-3-tuple(v_591))) else fail-any) else fail-any)) in
        {71}let v_612: bitstring = catch-fail((if success?(2-proj-3-tuple(v_591)) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if not-caught-fail(v_611) then (v_611,2-proj-3-tuple(v_609),3-proj-3-tuple(v_609)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_613: key = catch-fail(2-proj-3-tuple(v_612)) in
        {73}let v_614: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_612))) in
        {74}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {75}let v_616: aead = catch-fail(decrypt(1-proj-2-tuple(v_615),2-proj-2-tuple(v_615),3-proj-3-tuple(v_614),3-proj-3-tuple(v_591))) in
        {76}let v_617: bitstring = catch-fail(aeadunpack(v_616)) in
        {77}let v_618: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_614))) in
        {78}let v_619: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_615))) && success?(1-proj-3-tuple(v_614))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then cipherstatepack(1-proj-2-tuple(v_618),increment_nonce(2-proj-2-tuple(v_615))) else fail-any) else fail-any)) in
        {79}let v_620: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_591)) && (success?(3-proj-3-tuple(v_614)) && success?(1-proj-3-tuple(v_614)))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then (if not-caught-fail(v_616) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if not-caught-fail(v_619) then (v_619,3-proj-3-tuple(v_617),1-proj-3-tuple(v_617)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_621: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) in
        {81}let v_622: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_591)) && success?(symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_614),3-proj-3-tuple(v_614)))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then symmetricstatepack(1-proj-3-tuple(v_621),2-proj-3-tuple(v_621),hash(3-proj-3-tuple(v_621),3-proj-3-tuple(v_591))) else fail-any) else fail-any)) in
        {82}let v_623: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_591)) && success?(1-proj-3-tuple(v_612))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if not-caught-fail(v_622) then (v_622,2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_624: key = catch-fail(dhexp(key_s(bob),g)) in
        {84}let v_625: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_623),2-proj-7-tuple(v_590),3-proj-7-tuple(v_590),v_613,v_593,6-proj-7-tuple(v_590),7-proj-7-tuple(v_590))) in
        {85}let (hs_626: handshakestate,re_627: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-7-tuple(v_590))))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then (if not-caught-fail(v_595) then (if not-caught-fail(v_602) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if not-caught-fail(v_613) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if ((3-proj-3-tuple(v_612) && 3-proj-3-tuple(v_623)) && (v_613 = getpublickey((if not-caught-fail(v_624) then keypairpack(v_624,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_625) then (v_625,getpublickey(3-proj-7-tuple(v_590)),2-proj-3-tuple(v_623),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {86}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {87}insert statestore(alice,bob,statepack_c(hs_626))
    ) | (
        {120}get statestore(=alice,=bob,statepack_c(hs_628: handshakestate)) in
        {89}let v_629: bitstring = catch-fail(handshakestateunpack(hs_628)) in
        {90}let v_630: bitstring = catch-fail((empty,empty,empty)) in
        {91}let v_631: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_629))) in
        {92}let v_632: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_629))) in
        {93}let v_633: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_632),(if (success?(5-proj-7-tuple(v_629)) && success?(2-proj-7-tuple(v_629))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then dhexp(2-proj-2-tuple(v_631),5-proj-7-tuple(v_629)) else fail-any) else fail-any))) in
        {94}let v_634: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_632),(if (success?(5-proj-7-tuple(v_629)) && success?(2-proj-7-tuple(v_629))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then dhexp(2-proj-2-tuple(v_631),5-proj-7-tuple(v_629)) else fail-any) else fail-any))) in
        {95}let v_635: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_632),(if (success?(5-proj-7-tuple(v_629)) && success?(2-proj-7-tuple(v_629))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then dhexp(2-proj-2-tuple(v_631),5-proj-7-tuple(v_629)) else fail-any) else fail-any))) in
        {96}let v_636: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_629)) && success?(2-proj-7-tuple(v_629))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then dhexp(2-proj-2-tuple(v_631),5-proj-7-tuple(v_629)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_632))) then (if not-caught-fail(v_633) then (if not-caught-fail(v_634) then (if not-caught-fail(v_635) then (v_633,v_634,v_635) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_637: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_629)) && success?(2-proj-7-tuple(v_629))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then dhexp(2-proj-2-tuple(v_631),5-proj-7-tuple(v_629)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_629))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_636)) then cipherstatepack(2-proj-3-tuple(v_636),minnonce) else fail-any),1-proj-3-tuple(v_636),3-proj-3-tuple(v_632)) else fail-any) else fail-any) else fail-any)) in
        {98}let v_638: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_629))) in
        {99}let v_639: bitstring = catch-fail(symmetricstateunpack(v_637)) in
        {100}let v_640: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_639),(if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),4-proj-7-tuple(v_629)) else fail-any) else fail-any))) in
        {101}let v_641: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_639),(if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),4-proj-7-tuple(v_629)) else fail-any) else fail-any))) in
        {102}let v_642: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_639),(if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),4-proj-7-tuple(v_629)) else fail-any) else fail-any))) in
        {103}let v_643: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),4-proj-7-tuple(v_629)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_639))) then (if not-caught-fail(v_640) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (v_640,v_641,v_642) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_644: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then dhexp(2-proj-2-tuple(v_638),4-proj-7-tuple(v_629)) else fail-any) else fail-any)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_643)) then cipherstatepack(2-proj-3-tuple(v_643),minnonce) else fail-any),1-proj-3-tuple(v_643),3-proj-3-tuple(v_639)) else fail-any) else fail-any) else fail-any)) in
        {105}let v_645: bitstring = catch-fail(symmetricstateunpack(v_644)) in
        {106}let v_646: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_645))) in
        {107}let v_647: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_646),2-proj-2-tuple(v_646),3-proj-3-tuple(v_645),msg_c(alice,bob))) in
        {108}let v_648: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_645))) in
        {109}let v_649: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_646))) && success?(1-proj-3-tuple(v_645))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then cipherstatepack(1-proj-2-tuple(v_648),increment_nonce(2-proj-2-tuple(v_646))) else fail-any) else fail-any)) in
        {110}let v_650: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_645)) && success?(1-proj-3-tuple(v_645))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then (if not-caught-fail(v_647) then (if not-caught-fail(v_649) then (v_649,v_647) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {111}let v_651: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_650),2-proj-3-tuple(v_645),3-proj-3-tuple(v_645)))) in
        {112}let v_652: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_650)) && success?(symmetricstatepack(1-proj-2-tuple(v_650),2-proj-3-tuple(v_645),3-proj-3-tuple(v_645)))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then symmetricstatepack(1-proj-3-tuple(v_651),2-proj-3-tuple(v_651),hash(3-proj-3-tuple(v_651),2-proj-2-tuple(v_650))) else fail-any) else fail-any)) in
        {113}let v_653: bitstring = catch-fail((if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_652) then (v_652,2-proj-2-tuple(v_650)) else fail-any) else fail-any) else fail-any)) in
        {114}let v_654: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_653),2-proj-7-tuple(v_629),3-proj-7-tuple(v_629),4-proj-7-tuple(v_629),5-proj-7-tuple(v_629),6-proj-7-tuple(v_629),7-proj-7-tuple(v_629))) in
        {115}let v_655: bitstring = catch-fail(concat3(1-proj-3-tuple(v_630),2-proj-3-tuple(v_630),2-proj-2-tuple(v_653))) in
        {116}let (hs_656: handshakestate,re_657: key,message_c: bitstring) = (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-7-tuple(v_629))))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_644) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then (v_654,5-proj-7-tuple(v_629),v_655) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {117}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {118}insert statestore(alice,bob,statepack_d(hs_656));
        {119}out(pub, message_c)
    ) | (
        {139}get statestore(=alice,=bob,statepack_d(hs_658: handshakestate)) in
        {121}in(pub, message_d: bitstring);
        {122}let v_659: bitstring = catch-fail(handshakestateunpack(hs_658)) in
        {123}let v_660: bitstring = catch-fail(deconcat3(message_d)) in
        {124}let v_661: bool = catch-fail(true) in
        {125}let v_662: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_659))) in
        {126}let v_663: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_662))) in
        {127}let v_664: aead = catch-fail(decrypt(1-proj-2-tuple(v_663),2-proj-2-tuple(v_663),3-proj-3-tuple(v_662),3-proj-3-tuple(v_660))) in
        {128}let v_665: bitstring = catch-fail(aeadunpack(v_664)) in
        {129}let v_666: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_662))) in
        {130}let v_667: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_663))) && success?(1-proj-3-tuple(v_662))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then cipherstatepack(1-proj-2-tuple(v_666),increment_nonce(2-proj-2-tuple(v_663))) else fail-any) else fail-any)) in
        {131}let v_668: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_660)) && (success?(3-proj-3-tuple(v_662)) && success?(1-proj-3-tuple(v_662)))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then (if not-caught-fail(v_664) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if not-caught-fail(v_667) then (v_667,3-proj-3-tuple(v_665),1-proj-3-tuple(v_665)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_669: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_668),2-proj-3-tuple(v_662),3-proj-3-tuple(v_662)))) in
        {133}let v_670: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_660)) && success?(symmetricstatepack(1-proj-3-tuple(v_668),2-proj-3-tuple(v_662),3-proj-3-tuple(v_662)))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then symmetricstatepack(1-proj-3-tuple(v_669),2-proj-3-tuple(v_669),hash(3-proj-3-tuple(v_669),3-proj-3-tuple(v_660))) else fail-any) else fail-any)) in
        {134}let v_671: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_660)) && success?(1-proj-7-tuple(v_659))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if not-caught-fail(v_670) then (v_670,2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_672: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_671),2-proj-7-tuple(v_659),3-proj-7-tuple(v_659),4-proj-7-tuple(v_659),5-proj-7-tuple(v_659),6-proj-7-tuple(v_659),7-proj-7-tuple(v_659))) in
        {136}let (hs_673: handshakestate,re_674: key,plaintext_d: bitstring,valid_675: bool) = (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-7-tuple(v_659))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if not-caught-fail(v_661) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if (v_661 && 3-proj-3-tuple(v_671)) then (if not-caught-fail(v_672) then (v_672,getpublickey(3-proj-7-tuple(v_659)),2-proj-3-tuple(v_671),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {137}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_675);
        {138}insert statestore(alice,bob,statepack_e(hs_673))
    ) | (
        {165}get statestore(=alice,=bob,statepack_e(hs_676: handshakestate)) in
        {140}let v_677: bitstring = catch-fail(handshakestateunpack(hs_676)) in
        {141}let v_678: bitstring = catch-fail((empty,empty,empty)) in
        {142}let v_679: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_677))) in
        {143}let v_680: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_679))) in
        {144}let v_681: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_680),2-proj-2-tuple(v_680),3-proj-3-tuple(v_679),msg_e(alice,bob))) in
        {145}let v_682: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_679))) in
        {146}let v_683: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_680))) && success?(1-proj-3-tuple(v_679))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then cipherstatepack(1-proj-2-tuple(v_682),increment_nonce(2-proj-2-tuple(v_680))) else fail-any) else fail-any)) in
        {147}let v_684: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_679)) && success?(1-proj-3-tuple(v_679))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then (if not-caught-fail(v_681) then (if not-caught-fail(v_683) then (v_683,v_681) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {148}let v_685: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_684),2-proj-3-tuple(v_679),3-proj-3-tuple(v_679)))) in
        {149}let v_686: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_684)) && success?(symmetricstatepack(1-proj-2-tuple(v_684),2-proj-3-tuple(v_679),3-proj-3-tuple(v_679)))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then symmetricstatepack(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),hash(3-proj-3-tuple(v_685),2-proj-2-tuple(v_684))) else fail-any) else fail-any)) in
        {150}let v_687: bitstring = catch-fail((if success?(1-proj-7-tuple(v_677)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then (if not-caught-fail(v_686) then (v_686,2-proj-2-tuple(v_684)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {151}let v_688: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_687),2-proj-7-tuple(v_677),3-proj-7-tuple(v_677),4-proj-7-tuple(v_677),5-proj-7-tuple(v_677),6-proj-7-tuple(v_677),7-proj-7-tuple(v_677))) in
        {152}let v_689: bitstring = catch-fail(concat3(1-proj-3-tuple(v_678),2-proj-3-tuple(v_678),2-proj-2-tuple(v_687))) in
        {153}let v_690: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_687))) in
        {154}let v_691: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_690),zero)) in
        {155}let v_692: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_690),zero)) in
        {156}let v_693: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_690),zero)) in
        {157}let v_694: bitstring = catch-fail((if success?(2-proj-3-tuple(v_690)) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (if not-caught-fail(v_693) then (v_691,v_692,v_693) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {158}let v_695: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_694)) then cipherstatepack(1-proj-3-tuple(v_694),minnonce) else fail-any)) in
        {159}let v_696: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_694)) then cipherstatepack(2-proj-3-tuple(v_694),minnonce) else fail-any)) in
        {160}let v_697: bitstring = catch-fail((if success?(1-proj-2-tuple(v_687)) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (1-proj-2-tuple(v_687),v_695,v_696) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {161}let (hs_698: handshakestate,re_699: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-7-tuple(v_677))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (v_688,5-proj-7-tuple(v_677),v_689,2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {162}event SendMsg(alice,bob,stage_e,msg_e(alice,bob),true);
        {163}insert statestore(alice,bob,statepack_f(hs_698));
        {164}out(pub, message_e)
    ) | (
        {166}event LeakS(phase0,alice);
        {167}out(pub, key_s(alice))
    ) | (
        {168}phase 1;
        {169}event LeakS(phase1,alice);
        {170}out(pub, key_s(alice))
    )
) | (
    {171}let s_700: keypair = keypairpack(empty,empty) in
    {172}out(pub, getpublickey(s_700));
    (
        {173}let e_701: keypair = keypairpack(empty,empty) in
        {174}let rs_702: key = empty in
        {175}let re_703: key = empty in
        {176}let v_704: bitstring = catch-fail(hash(somename,empty)) in
        {177}let v_705: key = catch-fail(v_704) in
        {178}let v_706: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {179}let v_707: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (if not-caught-fail(v_706) then symmetricstatepack(v_706,v_705,v_704) else fail-any) else fail-any) else fail-any))) in
        {180}let v_708: symmetricstate = catch-fail((if success?((if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (if not-caught-fail(v_706) then symmetricstatepack(v_706,v_705,v_704) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then symmetricstatepack(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),hash(3-proj-3-tuple(v_707),empty)) else fail-any) else fail-any)) in
        {181}let hs_709: handshakestate = (if not-caught-fail(v_708) then handshakestatepack(v_708,s_700,e_701,rs_702,re_703,empty,true) else fail-any) in
        {182}insert statestore(alice,charlie,statepack_a(hs_709))
    ) | (
        {216}get statestore(=alice,=charlie,statepack_a(hs_710: handshakestate)) in
        {183}let v_711: bitstring = catch-fail(handshakestateunpack(hs_710)) in
        {184}let v_712: bitstring = catch-fail((empty,empty,empty)) in
        {185}let v_713: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {186}let v_714: keypair = catch-fail((if not-caught-fail(v_713) then keypairpack(v_713,key_e(alice,charlie)) else fail-any)) in
        {187}let v_715: bitstring = catch-fail(getpublickey(v_714)) in
        {188}let v_716: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_711))) in
        {189}let v_717: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_711)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then symmetricstatepack(1-proj-3-tuple(v_716),2-proj-3-tuple(v_716),hash(3-proj-3-tuple(v_716),v_715)) else fail-any) else fail-any)) in
        {190}let v_718: key = catch-fail(dhexp(key_s(alice),g)) in
        {191}let v_719: keypair = catch-fail((if not-caught-fail(v_718) then keypairpack(v_718,key_s(alice)) else fail-any)) in
        {192}let v_720: bitstring = catch-fail(symmetricstateunpack(v_717)) in
        {193}let v_721: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_720))) in
        {194}let v_722: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_721),2-proj-2-tuple(v_721),3-proj-3-tuple(v_720),getpublickey(v_719))) in
        {195}let v_723: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_720))) in
        {196}let v_724: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_721))) && success?(1-proj-3-tuple(v_720))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then cipherstatepack(1-proj-2-tuple(v_723),increment_nonce(2-proj-2-tuple(v_721))) else fail-any) else fail-any)) in
        {197}let v_725: bitstring = catch-fail((if (success?(getpublickey(v_719)) && (success?(3-proj-3-tuple(v_720)) && success?(1-proj-3-tuple(v_720)))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then (if not-caught-fail(v_722) then (if not-caught-fail(v_724) then (v_724,v_722) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {198}let v_726: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_725),2-proj-3-tuple(v_720),3-proj-3-tuple(v_720)))) in
        {199}let v_727: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_725)) && success?(symmetricstatepack(1-proj-2-tuple(v_725),2-proj-3-tuple(v_720),3-proj-3-tuple(v_720)))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then symmetricstatepack(1-proj-3-tuple(v_726),2-proj-3-tuple(v_726),hash(3-proj-3-tuple(v_726),2-proj-2-tuple(v_725))) else fail-any) else fail-any)) in
        {200}let v_728: bitstring = catch-fail((if success?(getpublickey(v_719)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-2-tuple(v_725))))) then (if not-caught-fail(v_727) then (v_727,2-proj-2-tuple(v_725)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {201}let v_729: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_728))) in
        {202}let v_730: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_729))) in
        {203}let v_731: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_730),2-proj-2-tuple(v_730),3-proj-3-tuple(v_729),msg_a(alice,charlie))) in
        {204}let v_732: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_729))) in
        {205}let v_733: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_730))) && success?(1-proj-3-tuple(v_729))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-2-tuple(v_732))))) then cipherstatepack(1-proj-2-tuple(v_732),increment_nonce(2-proj-2-tuple(v_730))) else fail-any) else fail-any)) in
        {206}let v_734: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_729)) && success?(1-proj-3-tuple(v_729))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then (if not-caught-fail(v_731) then (if not-caught-fail(v_733) then (v_733,v_731) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {207}let v_735: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_734),2-proj-3-tuple(v_729),3-proj-3-tuple(v_729)))) in
        {208}let v_736: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_734)) && success?(symmetricstatepack(1-proj-2-tuple(v_734),2-proj-3-tuple(v_729),3-proj-3-tuple(v_729)))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then symmetricstatepack(1-proj-3-tuple(v_735),2-proj-3-tuple(v_735),hash(3-proj-3-tuple(v_735),2-proj-2-tuple(v_734))) else fail-any) else fail-any)) in
        {209}let v_737: bitstring = catch-fail((if success?(1-proj-2-tuple(v_728)) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then (if not-caught-fail(v_736) then (v_736,2-proj-2-tuple(v_734)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {210}let v_738: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_737),v_719,v_714,4-proj-7-tuple(v_711),5-proj-7-tuple(v_711),6-proj-7-tuple(v_711),7-proj-7-tuple(v_711))) in
        {211}let v_739: bitstring = catch-fail(concat3(v_715,2-proj-2-tuple(v_728),2-proj-2-tuple(v_737))) in
        {212}let (hs_740: handshakestate,re_741: key,message_a_742: bitstring) = (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-7-tuple(v_711))))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if not-caught-fail(v_714) then (if not-caught-fail(v_715) then (if not-caught-fail(v_717) then (if not-caught-fail(v_719) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-2-tuple(v_728))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then (if not-caught-fail(v_738) then (if not-caught-fail(v_739) then (v_738,5-proj-7-tuple(v_711),v_739) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {213}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {214}insert statestore(alice,charlie,statepack_b(hs_740));
        {215}out(pub, message_a_742)
    ) | (
        {257}get statestore(=alice,=charlie,statepack_b(hs_743: handshakestate)) in
        {217}in(pub, message_b_744: bitstring);
        {218}let v_745: bitstring = catch-fail(handshakestateunpack(hs_743)) in
        {219}let v_746: bitstring = catch-fail(deconcat3(message_b_744)) in
        {220}let v_747: bool = catch-fail(true) in
        {221}let v_748: key = catch-fail(1-proj-3-tuple(v_746)) in
        {222}let v_749: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_745))) in
        {223}let v_750: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_745)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then symmetricstatepack(1-proj-3-tuple(v_749),2-proj-3-tuple(v_749),hash(3-proj-3-tuple(v_749),v_748)) else fail-any) else fail-any)) in
        {224}let v_751: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_745))) in
        {225}let v_752: bitstring = catch-fail(symmetricstateunpack(v_750)) in
        {226}let v_753: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_752),(if success?(3-proj-7-tuple(v_745)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),v_748) else fail-any) else fail-any))) in
        {227}let v_754: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_752),(if success?(3-proj-7-tuple(v_745)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),v_748) else fail-any) else fail-any))) in
        {228}let v_755: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_752),(if success?(3-proj-7-tuple(v_745)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),v_748) else fail-any) else fail-any))) in
        {229}let v_756: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_745)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),v_748) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_752))) then (if not-caught-fail(v_753) then (if not-caught-fail(v_754) then (if not-caught-fail(v_755) then (v_753,v_754,v_755) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_757: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_745)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),v_748) else fail-any) else fail-any)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_756)) then cipherstatepack(2-proj-3-tuple(v_756),minnonce) else fail-any),1-proj-3-tuple(v_756),3-proj-3-tuple(v_752)) else fail-any) else fail-any) else fail-any)) in
        {231}let v_758: bitstring = catch-fail(symmetricstateunpack(v_757)) in
        {232}let v_759: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_758))) in
        {233}let v_760: aead = catch-fail(decrypt(1-proj-2-tuple(v_759),2-proj-2-tuple(v_759),3-proj-3-tuple(v_758),2-proj-3-tuple(v_746))) in
        {234}let v_761: bitstring = catch-fail(aeadunpack(v_760)) in
        {235}let v_762: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_758))) in
        {236}let v_763: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_759))) && success?(1-proj-3-tuple(v_758))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then cipherstatepack(1-proj-2-tuple(v_762),increment_nonce(2-proj-2-tuple(v_759))) else fail-any) else fail-any)) in
        {237}let v_764: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_746)) && (success?(3-proj-3-tuple(v_758)) && success?(1-proj-3-tuple(v_758)))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then (if not-caught-fail(v_760) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if not-caught-fail(v_763) then (v_763,3-proj-3-tuple(v_761),1-proj-3-tuple(v_761)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let v_765: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_764),2-proj-3-tuple(v_758),3-proj-3-tuple(v_758)))) in
        {239}let v_766: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_746)) && success?(symmetricstatepack(1-proj-3-tuple(v_764),2-proj-3-tuple(v_758),3-proj-3-tuple(v_758)))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then symmetricstatepack(1-proj-3-tuple(v_765),2-proj-3-tuple(v_765),hash(3-proj-3-tuple(v_765),2-proj-3-tuple(v_746))) else fail-any) else fail-any)) in
        {240}let v_767: bitstring = catch-fail((if success?(2-proj-3-tuple(v_746)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if not-caught-fail(v_766) then (v_766,2-proj-3-tuple(v_764),3-proj-3-tuple(v_764)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {241}let v_768: key = catch-fail(2-proj-3-tuple(v_767)) in
        {242}let v_769: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_767))) in
        {243}let v_770: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_769))) in
        {244}let v_771: aead = catch-fail(decrypt(1-proj-2-tuple(v_770),2-proj-2-tuple(v_770),3-proj-3-tuple(v_769),3-proj-3-tuple(v_746))) in
        {245}let v_772: bitstring = catch-fail(aeadunpack(v_771)) in
        {246}let v_773: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_769))) in
        {247}let v_774: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_770))) && success?(1-proj-3-tuple(v_769))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-2-tuple(v_773))))) then cipherstatepack(1-proj-2-tuple(v_773),increment_nonce(2-proj-2-tuple(v_770))) else fail-any) else fail-any)) in
        {248}let v_775: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_746)) && (success?(3-proj-3-tuple(v_769)) && success?(1-proj-3-tuple(v_769)))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then (if not-caught-fail(v_771) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if not-caught-fail(v_774) then (v_774,3-proj-3-tuple(v_772),1-proj-3-tuple(v_772)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {249}let v_776: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_775),2-proj-3-tuple(v_769),3-proj-3-tuple(v_769)))) in
        {250}let v_777: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_746)) && success?(symmetricstatepack(1-proj-3-tuple(v_775),2-proj-3-tuple(v_769),3-proj-3-tuple(v_769)))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then symmetricstatepack(1-proj-3-tuple(v_776),2-proj-3-tuple(v_776),hash(3-proj-3-tuple(v_776),3-proj-3-tuple(v_746))) else fail-any) else fail-any)) in
        {251}let v_778: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_746)) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (if not-caught-fail(v_777) then (v_777,2-proj-3-tuple(v_775),3-proj-3-tuple(v_775)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {252}let v_779: key = catch-fail(dhexp(key_s(charlie),g)) in
        {253}let v_780: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_778),2-proj-7-tuple(v_745),3-proj-7-tuple(v_745),v_768,v_748,6-proj-7-tuple(v_745),7-proj-7-tuple(v_745))) in
        {254}let (hs_781: handshakestate,re_782: key,plaintext_b_783: bitstring,valid_784: bool) = (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-7-tuple(v_745))))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if not-caught-fail(v_747) then (if not-caught-fail(v_748) then (if not-caught-fail(v_750) then (if not-caught-fail(v_757) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if not-caught-fail(v_768) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if ((3-proj-3-tuple(v_767) && 3-proj-3-tuple(v_778)) && (v_768 = getpublickey((if not-caught-fail(v_779) then keypairpack(v_779,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_780) then (v_780,getpublickey(3-proj-7-tuple(v_745)),2-proj-3-tuple(v_778),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {255}event RecvMsg(alice,charlie,stage_b,plaintext_b_783,valid_784);
        {256}insert statestore(alice,charlie,statepack_c(hs_781))
    ) | (
        {289}get statestore(=alice,=charlie,statepack_c(hs_785: handshakestate)) in
        {258}let v_786: bitstring = catch-fail(handshakestateunpack(hs_785)) in
        {259}let v_787: bitstring = catch-fail((empty,empty,empty)) in
        {260}let v_788: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_786))) in
        {261}let v_789: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_786))) in
        {262}let v_790: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_789),(if (success?(5-proj-7-tuple(v_786)) && success?(2-proj-7-tuple(v_786))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_786)) else fail-any) else fail-any))) in
        {263}let v_791: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_789),(if (success?(5-proj-7-tuple(v_786)) && success?(2-proj-7-tuple(v_786))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_786)) else fail-any) else fail-any))) in
        {264}let v_792: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_789),(if (success?(5-proj-7-tuple(v_786)) && success?(2-proj-7-tuple(v_786))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_786)) else fail-any) else fail-any))) in
        {265}let v_793: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_786)) && success?(2-proj-7-tuple(v_786))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_786)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_789))) then (if not-caught-fail(v_790) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then (v_790,v_791,v_792) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_794: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_786)) && success?(2-proj-7-tuple(v_786))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_786)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_786))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_793)) then cipherstatepack(2-proj-3-tuple(v_793),minnonce) else fail-any),1-proj-3-tuple(v_793),3-proj-3-tuple(v_789)) else fail-any) else fail-any) else fail-any)) in
        {267}let v_795: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_786))) in
        {268}let v_796: bitstring = catch-fail(symmetricstateunpack(v_794)) in
        {269}let v_797: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_796),(if (success?(4-proj-7-tuple(v_786)) && success?(3-proj-7-tuple(v_786))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),4-proj-7-tuple(v_786)) else fail-any) else fail-any))) in
        {270}let v_798: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_796),(if (success?(4-proj-7-tuple(v_786)) && success?(3-proj-7-tuple(v_786))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),4-proj-7-tuple(v_786)) else fail-any) else fail-any))) in
        {271}let v_799: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_796),(if (success?(4-proj-7-tuple(v_786)) && success?(3-proj-7-tuple(v_786))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),4-proj-7-tuple(v_786)) else fail-any) else fail-any))) in
        {272}let v_800: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_786)) && success?(3-proj-7-tuple(v_786))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),4-proj-7-tuple(v_786)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_796))) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then (v_797,v_798,v_799) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let v_801: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_786)) && success?(3-proj-7-tuple(v_786))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),4-proj-7-tuple(v_786)) else fail-any) else fail-any)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_800)) then cipherstatepack(2-proj-3-tuple(v_800),minnonce) else fail-any),1-proj-3-tuple(v_800),3-proj-3-tuple(v_796)) else fail-any) else fail-any) else fail-any)) in
        {274}let v_802: bitstring = catch-fail(symmetricstateunpack(v_801)) in
        {275}let v_803: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {276}let v_804: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_803),2-proj-2-tuple(v_803),3-proj-3-tuple(v_802),msg_c(alice,charlie))) in
        {277}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {278}let v_806: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_803))) && success?(1-proj-3-tuple(v_802))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then cipherstatepack(1-proj-2-tuple(v_805),increment_nonce(2-proj-2-tuple(v_803))) else fail-any) else fail-any)) in
        {279}let v_807: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_802)) && success?(1-proj-3-tuple(v_802))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-2-tuple(v_803))))) then (if not-caught-fail(v_804) then (if not-caught-fail(v_806) then (v_806,v_804) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_808: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_807),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) in
        {281}let v_809: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_807)) && success?(symmetricstatepack(1-proj-2-tuple(v_807),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),hash(3-proj-3-tuple(v_808),2-proj-2-tuple(v_807))) else fail-any) else fail-any)) in
        {282}let v_810: bitstring = catch-fail((if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then (if not-caught-fail(v_809) then (v_809,2-proj-2-tuple(v_807)) else fail-any) else fail-any) else fail-any)) in
        {283}let v_811: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_810),2-proj-7-tuple(v_786),3-proj-7-tuple(v_786),4-proj-7-tuple(v_786),5-proj-7-tuple(v_786),6-proj-7-tuple(v_786),7-proj-7-tuple(v_786))) in
        {284}let v_812: bitstring = catch-fail(concat3(1-proj-3-tuple(v_787),2-proj-3-tuple(v_787),2-proj-2-tuple(v_810))) in
        {285}let (hs_813: handshakestate,re_814: key,message_c_815: bitstring) = (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-7-tuple(v_786))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_794) then (if not-caught-fail(v_801) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_811) then (if not-caught-fail(v_812) then (v_811,5-proj-7-tuple(v_786),v_812) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {286}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {287}insert statestore(alice,charlie,statepack_d(hs_813));
        {288}out(pub, message_c_815)
    ) | (
        {308}get statestore(=alice,=charlie,statepack_d(hs_816: handshakestate)) in
        {290}in(pub, message_d_817: bitstring);
        {291}let v_818: bitstring = catch-fail(handshakestateunpack(hs_816)) in
        {292}let v_819: bitstring = catch-fail(deconcat3(message_d_817)) in
        {293}let v_820: bool = catch-fail(true) in
        {294}let v_821: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_818))) in
        {295}let v_822: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {296}let v_823: aead = catch-fail(decrypt(1-proj-2-tuple(v_822),2-proj-2-tuple(v_822),3-proj-3-tuple(v_821),3-proj-3-tuple(v_819))) in
        {297}let v_824: bitstring = catch-fail(aeadunpack(v_823)) in
        {298}let v_825: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {299}let v_826: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_822))) && success?(1-proj-3-tuple(v_821))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then cipherstatepack(1-proj-2-tuple(v_825),increment_nonce(2-proj-2-tuple(v_822))) else fail-any) else fail-any)) in
        {300}let v_827: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_819)) && (success?(3-proj-3-tuple(v_821)) && success?(1-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-2-tuple(v_822))))) then (if not-caught-fail(v_823) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if not-caught-fail(v_826) then (v_826,3-proj-3-tuple(v_824),1-proj-3-tuple(v_824)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_828: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) in
        {302}let v_829: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_819)) && success?(symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_828),hash(3-proj-3-tuple(v_828),3-proj-3-tuple(v_819))) else fail-any) else fail-any)) in
        {303}let v_830: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_819)) && success?(1-proj-7-tuple(v_818))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_829) then (v_829,2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {304}let v_831: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_830),2-proj-7-tuple(v_818),3-proj-7-tuple(v_818),4-proj-7-tuple(v_818),5-proj-7-tuple(v_818),6-proj-7-tuple(v_818),7-proj-7-tuple(v_818))) in
        {305}let (hs_832: handshakestate,re_833: key,plaintext_d_834: bitstring,valid_835: bool) = (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-7-tuple(v_818))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if not-caught-fail(v_820) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if (v_820 && 3-proj-3-tuple(v_830)) then (if not-caught-fail(v_831) then (v_831,getpublickey(3-proj-7-tuple(v_818)),2-proj-3-tuple(v_830),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {306}event RecvMsg(alice,charlie,stage_d,plaintext_d_834,valid_835);
        {307}insert statestore(alice,charlie,statepack_e(hs_832))
    ) | (
        {334}get statestore(=alice,=charlie,statepack_e(hs_836: handshakestate)) in
        {309}let v_837: bitstring = catch-fail(handshakestateunpack(hs_836)) in
        {310}let v_838: bitstring = catch-fail((empty,empty,empty)) in
        {311}let v_839: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_837))) in
        {312}let v_840: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_839))) in
        {313}let v_841: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_840),2-proj-2-tuple(v_840),3-proj-3-tuple(v_839),msg_e(alice,charlie))) in
        {314}let v_842: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_839))) in
        {315}let v_843: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_840))) && success?(1-proj-3-tuple(v_839))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then cipherstatepack(1-proj-2-tuple(v_842),increment_nonce(2-proj-2-tuple(v_840))) else fail-any) else fail-any)) in
        {316}let v_844: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_839)) && success?(1-proj-3-tuple(v_839))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then (if not-caught-fail(v_841) then (if not-caught-fail(v_843) then (v_843,v_841) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {317}let v_845: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_844),2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)))) in
        {318}let v_846: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_844)) && success?(symmetricstatepack(1-proj-2-tuple(v_844),2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),2-proj-2-tuple(v_844))) else fail-any) else fail-any)) in
        {319}let v_847: bitstring = catch-fail((if success?(1-proj-7-tuple(v_837)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then (if not-caught-fail(v_846) then (v_846,2-proj-2-tuple(v_844)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {320}let v_848: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_847),2-proj-7-tuple(v_837),3-proj-7-tuple(v_837),4-proj-7-tuple(v_837),5-proj-7-tuple(v_837),6-proj-7-tuple(v_837),7-proj-7-tuple(v_837))) in
        {321}let v_849: bitstring = catch-fail(concat3(1-proj-3-tuple(v_838),2-proj-3-tuple(v_838),2-proj-2-tuple(v_847))) in
        {322}let v_850: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_847))) in
        {323}let v_851: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_850),zero)) in
        {324}let v_852: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_850),zero)) in
        {325}let v_853: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_850),zero)) in
        {326}let v_854: bitstring = catch-fail((if success?(2-proj-3-tuple(v_850)) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (if not-caught-fail(v_853) then (v_851,v_852,v_853) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {327}let v_855: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_854)) then cipherstatepack(1-proj-3-tuple(v_854),minnonce) else fail-any)) in
        {328}let v_856: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_854)) then cipherstatepack(2-proj-3-tuple(v_854),minnonce) else fail-any)) in
        {329}let v_857: bitstring = catch-fail((if success?(1-proj-2-tuple(v_847)) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if not-caught-fail(v_855) then (if not-caught-fail(v_856) then (1-proj-2-tuple(v_847),v_855,v_856) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {330}let (hs_858: handshakestate,re_859: key,message_e_860: bitstring,cs1_861: cipherstate,cs2_862: cipherstate) = (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-7-tuple(v_837))))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if not-caught-fail(v_848) then (if not-caught-fail(v_849) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (v_848,5-proj-7-tuple(v_837),v_849,2-proj-3-tuple(v_857),3-proj-3-tuple(v_857)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {331}event SendMsg(alice,charlie,stage_e,msg_e(alice,charlie),true);
        {332}insert statestore(alice,charlie,statepack_f(hs_858));
        {333}out(pub, message_e_860)
    ) | (
        {335}event LeakS(phase0,alice);
        {336}out(pub, key_s(alice))
    ) | (
        {337}phase 1;
        {338}event LeakS(phase1,alice);
        {339}out(pub, key_s(alice))
    )
) | (
    {340}let s_863: keypair = keypairpack(empty,empty) in
    {341}out(pub, getpublickey(s_863));
    (
        {342}let e_864: keypair = keypairpack(empty,empty) in
        {343}let rs_865: key = empty in
        {344}let re_866: key = empty in
        {345}let v_867: bitstring = catch-fail(hash(somename,empty)) in
        {346}let v_868: key = catch-fail(v_867) in
        {347}let v_869: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {348}let v_870: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (if not-caught-fail(v_869) then symmetricstatepack(v_869,v_868,v_867) else fail-any) else fail-any) else fail-any))) in
        {349}let v_871: symmetricstate = catch-fail((if success?((if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (if not-caught-fail(v_869) then symmetricstatepack(v_869,v_868,v_867) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_870),hash(3-proj-3-tuple(v_870),empty)) else fail-any) else fail-any)) in
        {350}let hs_872: handshakestate = (if not-caught-fail(v_871) then handshakestatepack(v_871,s_863,e_864,rs_865,re_866,empty,false) else fail-any) in
        {351}insert statestore(bob,alice,statepack_a(hs_872))
    ) | (
        {385}get statestore(=bob,=alice,statepack_a(hs_873: handshakestate)) in
        {352}in(pub, message_a_874: bitstring);
        {353}let v_875: bitstring = catch-fail(handshakestateunpack(hs_873)) in
        {354}let v_876: bitstring = catch-fail(deconcat3(message_a_874)) in
        {355}let v_877: bool = catch-fail(true) in
        {356}let v_878: key = catch-fail(1-proj-3-tuple(v_876)) in
        {357}let v_879: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_875))) in
        {358}let v_880: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_875)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then symmetricstatepack(1-proj-3-tuple(v_879),2-proj-3-tuple(v_879),hash(3-proj-3-tuple(v_879),v_878)) else fail-any) else fail-any)) in
        {359}let v_881: bitstring = catch-fail(symmetricstateunpack(v_880)) in
        {360}let v_882: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {361}let v_883: aead = catch-fail(decrypt(1-proj-2-tuple(v_882),2-proj-2-tuple(v_882),3-proj-3-tuple(v_881),2-proj-3-tuple(v_876))) in
        {362}let v_884: bitstring = catch-fail(aeadunpack(v_883)) in
        {363}let v_885: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {364}let v_886: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_882))) && success?(1-proj-3-tuple(v_881))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then cipherstatepack(1-proj-2-tuple(v_885),increment_nonce(2-proj-2-tuple(v_882))) else fail-any) else fail-any)) in
        {365}let v_887: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_876)) && (success?(3-proj-3-tuple(v_881)) && success?(1-proj-3-tuple(v_881)))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-2-tuple(v_882))))) then (if not-caught-fail(v_883) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then (if not-caught-fail(v_886) then (v_886,3-proj-3-tuple(v_884),1-proj-3-tuple(v_884)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {366}let v_888: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) in
        {367}let v_889: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_876)) && success?(symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then symmetricstatepack(1-proj-3-tuple(v_888),2-proj-3-tuple(v_888),hash(3-proj-3-tuple(v_888),2-proj-3-tuple(v_876))) else fail-any) else fail-any)) in
        {368}let v_890: bitstring = catch-fail((if success?(2-proj-3-tuple(v_876)) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if not-caught-fail(v_889) then (v_889,2-proj-3-tuple(v_887),3-proj-3-tuple(v_887)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_891: key = catch-fail(2-proj-3-tuple(v_890)) in
        {370}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_890))) in
        {371}let v_893: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {372}let v_894: aead = catch-fail(decrypt(1-proj-2-tuple(v_893),2-proj-2-tuple(v_893),3-proj-3-tuple(v_892),3-proj-3-tuple(v_876))) in
        {373}let v_895: bitstring = catch-fail(aeadunpack(v_894)) in
        {374}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {375}let v_897: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_893))) && success?(1-proj-3-tuple(v_892))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then cipherstatepack(1-proj-2-tuple(v_896),increment_nonce(2-proj-2-tuple(v_893))) else fail-any) else fail-any)) in
        {376}let v_898: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_876)) && (success?(3-proj-3-tuple(v_892)) && success?(1-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then (if not-caught-fail(v_894) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if not-caught-fail(v_897) then (v_897,3-proj-3-tuple(v_895),1-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_899: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) in
        {378}let v_900: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_876)) && success?(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_899),hash(3-proj-3-tuple(v_899),3-proj-3-tuple(v_876))) else fail-any) else fail-any)) in
        {379}let v_901: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_876)) && success?(1-proj-3-tuple(v_890))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if not-caught-fail(v_900) then (v_900,2-proj-3-tuple(v_898),3-proj-3-tuple(v_898)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_902: key = catch-fail(dhexp(key_s(alice),g)) in
        {381}let v_903: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_901),2-proj-7-tuple(v_875),3-proj-7-tuple(v_875),v_891,v_878,6-proj-7-tuple(v_875),7-proj-7-tuple(v_875))) in
        {382}let (hs_904: handshakestate,re_905: key,plaintext_a: bitstring,valid_906: bool) = (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-7-tuple(v_875))))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then (if not-caught-fail(v_877) then (if not-caught-fail(v_878) then (if not-caught-fail(v_880) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if not-caught-fail(v_891) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if ((3-proj-3-tuple(v_890) && 3-proj-3-tuple(v_901)) && (v_891 = getpublickey((if not-caught-fail(v_902) then keypairpack(v_902,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_903) then (v_903,getpublickey(3-proj-7-tuple(v_875)),2-proj-3-tuple(v_901),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {383}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_906);
        {384}insert statestore(bob,alice,statepack_b(hs_904))
    ) | (
        {426}get statestore(=bob,=alice,statepack_b(hs_907: handshakestate)) in
        {386}let v_908: bitstring = catch-fail(handshakestateunpack(hs_907)) in
        {387}let v_909: bitstring = catch-fail((empty,empty,empty)) in
        {388}let v_910: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {389}let v_911: keypair = catch-fail((if not-caught-fail(v_910) then keypairpack(v_910,key_e(bob,alice)) else fail-any)) in
        {390}let v_912: bitstring = catch-fail(getpublickey(v_911)) in
        {391}let v_913: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_908))) in
        {392}let v_914: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_908)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then symmetricstatepack(1-proj-3-tuple(v_913),2-proj-3-tuple(v_913),hash(3-proj-3-tuple(v_913),v_912)) else fail-any) else fail-any)) in
        {393}let v_915: bitstring = catch-fail(keypairunpack(v_911)) in
        {394}let v_916: bitstring = catch-fail(symmetricstateunpack(v_914)) in
        {395}let v_917: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_916),(if success?(5-proj-7-tuple(v_908)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_908)) else fail-any) else fail-any))) in
        {396}let v_918: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_916),(if success?(5-proj-7-tuple(v_908)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_908)) else fail-any) else fail-any))) in
        {397}let v_919: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_916),(if success?(5-proj-7-tuple(v_908)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_908)) else fail-any) else fail-any))) in
        {398}let v_920: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_908)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_908)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_916))) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (v_917,v_918,v_919) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_921: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_908)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_908)) else fail-any) else fail-any)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_920)) then cipherstatepack(2-proj-3-tuple(v_920),minnonce) else fail-any),1-proj-3-tuple(v_920),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any)) in
        {400}let v_922: key = catch-fail(dhexp(key_s(bob),g)) in
        {401}let v_923: keypair = catch-fail((if not-caught-fail(v_922) then keypairpack(v_922,key_s(bob)) else fail-any)) in
        {402}let v_924: bitstring = catch-fail(symmetricstateunpack(v_921)) in
        {403}let v_925: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {404}let v_926: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_925),2-proj-2-tuple(v_925),3-proj-3-tuple(v_924),getpublickey(v_923))) in
        {405}let v_927: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {406}let v_928: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_925))) && success?(1-proj-3-tuple(v_924))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then cipherstatepack(1-proj-2-tuple(v_927),increment_nonce(2-proj-2-tuple(v_925))) else fail-any) else fail-any)) in
        {407}let v_929: bitstring = catch-fail((if (success?(getpublickey(v_923)) && (success?(3-proj-3-tuple(v_924)) && success?(1-proj-3-tuple(v_924)))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-2-tuple(v_925))))) then (if not-caught-fail(v_926) then (if not-caught-fail(v_928) then (v_928,v_926) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {408}let v_930: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_929),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) in
        {409}let v_931: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_929)) && success?(symmetricstatepack(1-proj-2-tuple(v_929),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then symmetricstatepack(1-proj-3-tuple(v_930),2-proj-3-tuple(v_930),hash(3-proj-3-tuple(v_930),2-proj-2-tuple(v_929))) else fail-any) else fail-any)) in
        {410}let v_932: bitstring = catch-fail((if success?(getpublickey(v_923)) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_931) then (v_931,2-proj-2-tuple(v_929)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {411}let v_933: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_932))) in
        {412}let v_934: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_933))) in
        {413}let v_935: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_934),2-proj-2-tuple(v_934),3-proj-3-tuple(v_933),msg_b(bob,alice))) in
        {414}let v_936: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_933))) in
        {415}let v_937: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_934))) && success?(1-proj-3-tuple(v_933))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-2-tuple(v_936))))) then cipherstatepack(1-proj-2-tuple(v_936),increment_nonce(2-proj-2-tuple(v_934))) else fail-any) else fail-any)) in
        {416}let v_938: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_933)) && success?(1-proj-3-tuple(v_933))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then (if not-caught-fail(v_935) then (if not-caught-fail(v_937) then (v_937,v_935) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {417}let v_939: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_938),2-proj-3-tuple(v_933),3-proj-3-tuple(v_933)))) in
        {418}let v_940: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_938)) && success?(symmetricstatepack(1-proj-2-tuple(v_938),2-proj-3-tuple(v_933),3-proj-3-tuple(v_933)))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then symmetricstatepack(1-proj-3-tuple(v_939),2-proj-3-tuple(v_939),hash(3-proj-3-tuple(v_939),2-proj-2-tuple(v_938))) else fail-any) else fail-any)) in
        {419}let v_941: bitstring = catch-fail((if success?(1-proj-2-tuple(v_932)) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then (if not-caught-fail(v_940) then (v_940,2-proj-2-tuple(v_938)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {420}let v_942: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_941),v_923,v_911,4-proj-7-tuple(v_908),5-proj-7-tuple(v_908),6-proj-7-tuple(v_908),7-proj-7-tuple(v_908))) in
        {421}let v_943: bitstring = catch-fail(concat3(v_912,2-proj-2-tuple(v_932),2-proj-2-tuple(v_941))) in
        {422}let (hs_944: handshakestate,re_945: key,message_b_946: bitstring) = (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-7-tuple(v_908))))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if not-caught-fail(v_911) then (if not-caught-fail(v_912) then (if not-caught-fail(v_914) then (if not-caught-fail(v_921) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then (if not-caught-fail(v_942) then (if not-caught-fail(v_943) then (v_942,5-proj-7-tuple(v_908),v_943) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {423}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {424}insert statestore(bob,alice,statepack_c(hs_944));
        {425}out(pub, message_b_946)
    ) | (
        {459}get statestore(=bob,=alice,statepack_c(hs_947: handshakestate)) in
        {427}in(pub, message_c_948: bitstring);
        {428}let v_949: bitstring = catch-fail(handshakestateunpack(hs_947)) in
        {429}let v_950: bitstring = catch-fail(deconcat3(message_c_948)) in
        {430}let v_951: bool = catch-fail(true) in
        {431}let v_952: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_949))) in
        {432}let v_953: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_949))) in
        {433}let v_954: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_953),(if (success?(4-proj-7-tuple(v_949)) && success?(3-proj-7-tuple(v_949))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_949)) else fail-any) else fail-any))) in
        {434}let v_955: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_953),(if (success?(4-proj-7-tuple(v_949)) && success?(3-proj-7-tuple(v_949))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_949)) else fail-any) else fail-any))) in
        {435}let v_956: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_953),(if (success?(4-proj-7-tuple(v_949)) && success?(3-proj-7-tuple(v_949))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_949)) else fail-any) else fail-any))) in
        {436}let v_957: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_949)) && success?(3-proj-7-tuple(v_949))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_949)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_953))) then (if not-caught-fail(v_954) then (if not-caught-fail(v_955) then (if not-caught-fail(v_956) then (v_954,v_955,v_956) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {437}let v_958: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_949)) && success?(3-proj-7-tuple(v_949))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),4-proj-7-tuple(v_949)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_949))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_957)) then cipherstatepack(2-proj-3-tuple(v_957),minnonce) else fail-any),1-proj-3-tuple(v_957),3-proj-3-tuple(v_953)) else fail-any) else fail-any) else fail-any)) in
        {438}let v_959: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_949))) in
        {439}let v_960: bitstring = catch-fail(symmetricstateunpack(v_958)) in
        {440}let v_961: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_960),(if (success?(5-proj-7-tuple(v_949)) && success?(2-proj-7-tuple(v_949))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),5-proj-7-tuple(v_949)) else fail-any) else fail-any))) in
        {441}let v_962: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_960),(if (success?(5-proj-7-tuple(v_949)) && success?(2-proj-7-tuple(v_949))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),5-proj-7-tuple(v_949)) else fail-any) else fail-any))) in
        {442}let v_963: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_960),(if (success?(5-proj-7-tuple(v_949)) && success?(2-proj-7-tuple(v_949))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),5-proj-7-tuple(v_949)) else fail-any) else fail-any))) in
        {443}let v_964: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_949)) && success?(2-proj-7-tuple(v_949))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),5-proj-7-tuple(v_949)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_960))) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (v_961,v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {444}let v_965: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_949)) && success?(2-proj-7-tuple(v_949))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),5-proj-7-tuple(v_949)) else fail-any) else fail-any)) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_964)) then cipherstatepack(2-proj-3-tuple(v_964),minnonce) else fail-any),1-proj-3-tuple(v_964),3-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any)) in
        {445}let v_966: bitstring = catch-fail(symmetricstateunpack(v_965)) in
        {446}let v_967: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_966))) in
        {447}let v_968: aead = catch-fail(decrypt(1-proj-2-tuple(v_967),2-proj-2-tuple(v_967),3-proj-3-tuple(v_966),3-proj-3-tuple(v_950))) in
        {448}let v_969: bitstring = catch-fail(aeadunpack(v_968)) in
        {449}let v_970: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_966))) in
        {450}let v_971: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_967))) && success?(1-proj-3-tuple(v_966))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-2-tuple(v_970))))) then cipherstatepack(1-proj-2-tuple(v_970),increment_nonce(2-proj-2-tuple(v_967))) else fail-any) else fail-any)) in
        {451}let v_972: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_950)) && (success?(3-proj-3-tuple(v_966)) && success?(1-proj-3-tuple(v_966)))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then (if not-caught-fail(v_968) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (if not-caught-fail(v_971) then (v_971,3-proj-3-tuple(v_969),1-proj-3-tuple(v_969)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {452}let v_973: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)))) in
        {453}let v_974: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_950)) && success?(symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then symmetricstatepack(1-proj-3-tuple(v_973),2-proj-3-tuple(v_973),hash(3-proj-3-tuple(v_973),3-proj-3-tuple(v_950))) else fail-any) else fail-any)) in
        {454}let v_975: bitstring = catch-fail((if success?(3-proj-3-tuple(v_950)) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_974) then (v_974,2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {455}let v_976: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_975),2-proj-7-tuple(v_949),3-proj-7-tuple(v_949),4-proj-7-tuple(v_949),5-proj-7-tuple(v_949),6-proj-7-tuple(v_949),7-proj-7-tuple(v_949))) in
        {456}let (hs_977: handshakestate,re_978: key,plaintext_c: bitstring,valid_979: bool) = (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-7-tuple(v_949))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_951) then (if not-caught-fail(v_958) then (if not-caught-fail(v_965) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (v_951 && 3-proj-3-tuple(v_975)) then (if not-caught-fail(v_976) then (v_976,getpublickey(3-proj-7-tuple(v_949)),2-proj-3-tuple(v_975),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {457}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_979);
        {458}insert statestore(bob,alice,statepack_d(hs_977))
    ) | (
        {477}get statestore(=bob,=alice,statepack_d(hs_980: handshakestate)) in
        {460}let v_981: bitstring = catch-fail(handshakestateunpack(hs_980)) in
        {461}let v_982: bitstring = catch-fail((empty,empty,empty)) in
        {462}let v_983: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_981))) in
        {463}let v_984: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_983))) in
        {464}let v_985: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_984),2-proj-2-tuple(v_984),3-proj-3-tuple(v_983),msg_d(bob,alice))) in
        {465}let v_986: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_983))) in
        {466}let v_987: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_984))) && success?(1-proj-3-tuple(v_983))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-2-tuple(v_986))))) then cipherstatepack(1-proj-2-tuple(v_986),increment_nonce(2-proj-2-tuple(v_984))) else fail-any) else fail-any)) in
        {467}let v_988: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_983)) && success?(1-proj-3-tuple(v_983))) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then (if not-caught-fail(v_985) then (if not-caught-fail(v_987) then (v_987,v_985) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {468}let v_989: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_988),2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)))) in
        {469}let v_990: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_988)) && success?(symmetricstatepack(1-proj-2-tuple(v_988),2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then symmetricstatepack(1-proj-3-tuple(v_989),2-proj-3-tuple(v_989),hash(3-proj-3-tuple(v_989),2-proj-2-tuple(v_988))) else fail-any) else fail-any)) in
        {470}let v_991: bitstring = catch-fail((if success?(1-proj-7-tuple(v_981)) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then (if not-caught-fail(v_990) then (v_990,2-proj-2-tuple(v_988)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {471}let v_992: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_991),2-proj-7-tuple(v_981),3-proj-7-tuple(v_981),4-proj-7-tuple(v_981),5-proj-7-tuple(v_981),6-proj-7-tuple(v_981),7-proj-7-tuple(v_981))) in
        {472}let v_993: bitstring = catch-fail(concat3(1-proj-3-tuple(v_982),2-proj-3-tuple(v_982),2-proj-2-tuple(v_991))) in
        {473}let (hs_994: handshakestate,re_995: key,message_d_996: bitstring) = (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-7-tuple(v_981))))) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then (if not-caught-fail(v_992) then (if not-caught-fail(v_993) then (v_992,5-proj-7-tuple(v_981),v_993) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {474}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {475}insert statestore(bob,alice,statepack_e(hs_994));
        {476}out(pub, message_d_996)
    ) | (
        {505}get statestore(=bob,=alice,statepack_e(hs_997: handshakestate)) in
        {478}in(pub, message_e_998: bitstring);
        {479}let v_999: bitstring = catch-fail(handshakestateunpack(hs_997)) in
        {480}let v_1000: bitstring = catch-fail(deconcat3(message_e_998)) in
        {481}let v_1001: bool = catch-fail(true) in
        {482}let v_1002: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_999))) in
        {483}let v_1003: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1002))) in
        {484}let v_1004: aead = catch-fail(decrypt(1-proj-2-tuple(v_1003),2-proj-2-tuple(v_1003),3-proj-3-tuple(v_1002),3-proj-3-tuple(v_1000))) in
        {485}let v_1005: bitstring = catch-fail(aeadunpack(v_1004)) in
        {486}let v_1006: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1002))) in
        {487}let v_1007: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1003))) && success?(1-proj-3-tuple(v_1002))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then cipherstatepack(1-proj-2-tuple(v_1006),increment_nonce(2-proj-2-tuple(v_1003))) else fail-any) else fail-any)) in
        {488}let v_1008: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1000)) && (success?(3-proj-3-tuple(v_1002)) && success?(1-proj-3-tuple(v_1002)))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-2-tuple(v_1003))))) then (if not-caught-fail(v_1004) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if not-caught-fail(v_1007) then (v_1007,3-proj-3-tuple(v_1005),1-proj-3-tuple(v_1005)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {489}let v_1009: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1002),3-proj-3-tuple(v_1002)))) in
        {490}let v_1010: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1000)) && success?(symmetricstatepack(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1002),3-proj-3-tuple(v_1002)))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then symmetricstatepack(1-proj-3-tuple(v_1009),2-proj-3-tuple(v_1009),hash(3-proj-3-tuple(v_1009),3-proj-3-tuple(v_1000))) else fail-any) else fail-any)) in
        {491}let v_1011: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1000)) && success?(1-proj-7-tuple(v_999))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if not-caught-fail(v_1010) then (v_1010,2-proj-3-tuple(v_1008),3-proj-3-tuple(v_1008)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {492}let v_1012: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1011),2-proj-7-tuple(v_999),3-proj-7-tuple(v_999),4-proj-7-tuple(v_999),5-proj-7-tuple(v_999),6-proj-7-tuple(v_999),7-proj-7-tuple(v_999))) in
        {493}let v_1013: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1011))) in
        {494}let v_1014: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1013),zero)) in
        {495}let v_1015: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1013),zero)) in
        {496}let v_1016: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1013),zero)) in
        {497}let v_1017: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1013)) then (if not-caught-fail(v_1014) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then (v_1014,v_1015,v_1016) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_1018: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1017)) then cipherstatepack(1-proj-3-tuple(v_1017),minnonce) else fail-any)) in
        {499}let v_1019: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1017)) then cipherstatepack(2-proj-3-tuple(v_1017),minnonce) else fail-any)) in
        {500}let v_1020: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1011)) then (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-3-tuple(v_1013))))) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then (1-proj-3-tuple(v_1011),v_1018,v_1019) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let (hs_1021: handshakestate,re_1022: key,plaintext_e: bitstring,valid_1023: bool,cs1_1024: cipherstate,cs2_1025: cipherstate) = (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-7-tuple(v_999))))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then (if not-caught-fail(v_1001) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if (v_1001 && 3-proj-3-tuple(v_1011)) then (if not-caught-fail(v_1012) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (v_1012,getpublickey(3-proj-7-tuple(v_999)),2-proj-3-tuple(v_1011),true,2-proj-3-tuple(v_1020),3-proj-3-tuple(v_1020)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {502}event RecvMsg(bob,alice,stage_e,plaintext_e,valid_1023);
        {503}insert statestore(bob,alice,statepack_f(hs_1021));
        {504}event RecvEnd(valid_1023)
    ) | (
        {506}event LeakS(phase0,bob);
        {507}out(pub, key_s(bob))
    ) | (
        {508}phase 1;
        {509}event LeakS(phase1,bob);
        {510}out(pub, key_s(bob))
    )
) | (
    {511}let s_1026: keypair = keypairpack(empty,empty) in
    {512}out(pub, getpublickey(s_1026));
    (
        {513}let e_1027: keypair = keypairpack(empty,empty) in
        {514}let rs_1028: key = empty in
        {515}let re_1029: key = empty in
        {516}let v_1030: bitstring = catch-fail(hash(somename,empty)) in
        {517}let v_1031: key = catch-fail(v_1030) in
        {518}let v_1032: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {519}let v_1033: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1030) then (if not-caught-fail(v_1031) then (if not-caught-fail(v_1032) then symmetricstatepack(v_1032,v_1031,v_1030) else fail-any) else fail-any) else fail-any))) in
        {520}let v_1034: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1030) then (if not-caught-fail(v_1031) then (if not-caught-fail(v_1032) then symmetricstatepack(v_1032,v_1031,v_1030) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then symmetricstatepack(1-proj-3-tuple(v_1033),2-proj-3-tuple(v_1033),hash(3-proj-3-tuple(v_1033),empty)) else fail-any) else fail-any)) in
        {521}let hs_1035: handshakestate = (if not-caught-fail(v_1034) then handshakestatepack(v_1034,s_1026,e_1027,rs_1028,re_1029,empty,false) else fail-any) in
        {522}insert statestore(bob,charlie,statepack_a(hs_1035))
    ) | (
        {556}get statestore(=bob,=charlie,statepack_a(hs_1036: handshakestate)) in
        {523}in(pub, message_a_1037: bitstring);
        {524}let v_1038: bitstring = catch-fail(handshakestateunpack(hs_1036)) in
        {525}let v_1039: bitstring = catch-fail(deconcat3(message_a_1037)) in
        {526}let v_1040: bool = catch-fail(true) in
        {527}let v_1041: key = catch-fail(1-proj-3-tuple(v_1039)) in
        {528}let v_1042: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1038))) in
        {529}let v_1043: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1038)) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then symmetricstatepack(1-proj-3-tuple(v_1042),2-proj-3-tuple(v_1042),hash(3-proj-3-tuple(v_1042),v_1041)) else fail-any) else fail-any)) in
        {530}let v_1044: bitstring = catch-fail(symmetricstateunpack(v_1043)) in
        {531}let v_1045: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1044))) in
        {532}let v_1046: aead = catch-fail(decrypt(1-proj-2-tuple(v_1045),2-proj-2-tuple(v_1045),3-proj-3-tuple(v_1044),2-proj-3-tuple(v_1039))) in
        {533}let v_1047: bitstring = catch-fail(aeadunpack(v_1046)) in
        {534}let v_1048: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1044))) in
        {535}let v_1049: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1045))) && success?(1-proj-3-tuple(v_1044))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-2-tuple(v_1048))))) then cipherstatepack(1-proj-2-tuple(v_1048),increment_nonce(2-proj-2-tuple(v_1045))) else fail-any) else fail-any)) in
        {536}let v_1050: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1039)) && (success?(3-proj-3-tuple(v_1044)) && success?(1-proj-3-tuple(v_1044)))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then (if not-caught-fail(v_1046) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then (if not-caught-fail(v_1049) then (v_1049,3-proj-3-tuple(v_1047),1-proj-3-tuple(v_1047)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {537}let v_1051: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1044),3-proj-3-tuple(v_1044)))) in
        {538}let v_1052: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1039)) && success?(symmetricstatepack(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1044),3-proj-3-tuple(v_1044)))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then symmetricstatepack(1-proj-3-tuple(v_1051),2-proj-3-tuple(v_1051),hash(3-proj-3-tuple(v_1051),2-proj-3-tuple(v_1039))) else fail-any) else fail-any)) in
        {539}let v_1053: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1039)) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if not-caught-fail(v_1052) then (v_1052,2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {540}let v_1054: key = catch-fail(2-proj-3-tuple(v_1053)) in
        {541}let v_1055: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1053))) in
        {542}let v_1056: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1055))) in
        {543}let v_1057: aead = catch-fail(decrypt(1-proj-2-tuple(v_1056),2-proj-2-tuple(v_1056),3-proj-3-tuple(v_1055),3-proj-3-tuple(v_1039))) in
        {544}let v_1058: bitstring = catch-fail(aeadunpack(v_1057)) in
        {545}let v_1059: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1055))) in
        {546}let v_1060: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1056))) && success?(1-proj-3-tuple(v_1055))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then cipherstatepack(1-proj-2-tuple(v_1059),increment_nonce(2-proj-2-tuple(v_1056))) else fail-any) else fail-any)) in
        {547}let v_1061: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1039)) && (success?(3-proj-3-tuple(v_1055)) && success?(1-proj-3-tuple(v_1055)))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-2-tuple(v_1056))))) then (if not-caught-fail(v_1057) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if not-caught-fail(v_1060) then (v_1060,3-proj-3-tuple(v_1058),1-proj-3-tuple(v_1058)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {548}let v_1062: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1061),2-proj-3-tuple(v_1055),3-proj-3-tuple(v_1055)))) in
        {549}let v_1063: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1039)) && success?(symmetricstatepack(1-proj-3-tuple(v_1061),2-proj-3-tuple(v_1055),3-proj-3-tuple(v_1055)))) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-3-tuple(v_1062))))) then symmetricstatepack(1-proj-3-tuple(v_1062),2-proj-3-tuple(v_1062),hash(3-proj-3-tuple(v_1062),3-proj-3-tuple(v_1039))) else fail-any) else fail-any)) in
        {550}let v_1064: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1039)) && success?(1-proj-3-tuple(v_1053))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-3-tuple(v_1055))))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then (if not-caught-fail(v_1063) then (v_1063,2-proj-3-tuple(v_1061),3-proj-3-tuple(v_1061)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {551}let v_1065: key = catch-fail(dhexp(key_s(charlie),g)) in
        {552}let v_1066: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1064),2-proj-7-tuple(v_1038),3-proj-7-tuple(v_1038),v_1054,v_1041,6-proj-7-tuple(v_1038),7-proj-7-tuple(v_1038))) in
        {553}let (hs_1067: handshakestate,re_1068: key,plaintext_a_1069: bitstring,valid_1070: bool) = (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-7-tuple(v_1038))))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if not-caught-fail(v_1040) then (if not-caught-fail(v_1041) then (if not-caught-fail(v_1043) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if not-caught-fail(v_1054) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then (if ((3-proj-3-tuple(v_1053) && 3-proj-3-tuple(v_1064)) && (v_1054 = getpublickey((if not-caught-fail(v_1065) then keypairpack(v_1065,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1066) then (v_1066,getpublickey(3-proj-7-tuple(v_1038)),2-proj-3-tuple(v_1064),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {554}event RecvMsg(bob,charlie,stage_a,plaintext_a_1069,valid_1070);
        {555}insert statestore(bob,charlie,statepack_b(hs_1067))
    ) | (
        {597}get statestore(=bob,=charlie,statepack_b(hs_1071: handshakestate)) in
        {557}let v_1072: bitstring = catch-fail(handshakestateunpack(hs_1071)) in
        {558}let v_1073: bitstring = catch-fail((empty,empty,empty)) in
        {559}let v_1074: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {560}let v_1075: keypair = catch-fail((if not-caught-fail(v_1074) then keypairpack(v_1074,key_e(bob,charlie)) else fail-any)) in
        {561}let v_1076: bitstring = catch-fail(getpublickey(v_1075)) in
        {562}let v_1077: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1072))) in
        {563}let v_1078: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then symmetricstatepack(1-proj-3-tuple(v_1077),2-proj-3-tuple(v_1077),hash(3-proj-3-tuple(v_1077),v_1076)) else fail-any) else fail-any)) in
        {564}let v_1079: bitstring = catch-fail(keypairunpack(v_1075)) in
        {565}let v_1080: bitstring = catch-fail(symmetricstateunpack(v_1078)) in
        {566}let v_1081: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1080),(if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),5-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {567}let v_1082: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1080),(if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),5-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {568}let v_1083: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1080),(if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),5-proj-7-tuple(v_1072)) else fail-any) else fail-any))) in
        {569}let v_1084: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),5-proj-7-tuple(v_1072)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1080))) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1082) then (if not-caught-fail(v_1083) then (v_1081,v_1082,v_1083) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {570}let v_1085: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1072)) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),5-proj-7-tuple(v_1072)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1084)) then cipherstatepack(2-proj-3-tuple(v_1084),minnonce) else fail-any),1-proj-3-tuple(v_1084),3-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any)) in
        {571}let v_1086: key = catch-fail(dhexp(key_s(bob),g)) in
        {572}let v_1087: keypair = catch-fail((if not-caught-fail(v_1086) then keypairpack(v_1086,key_s(bob)) else fail-any)) in
        {573}let v_1088: bitstring = catch-fail(symmetricstateunpack(v_1085)) in
        {574}let v_1089: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1088))) in
        {575}let v_1090: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1089),2-proj-2-tuple(v_1089),3-proj-3-tuple(v_1088),getpublickey(v_1087))) in
        {576}let v_1091: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1088))) in
        {577}let v_1092: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1089))) && success?(1-proj-3-tuple(v_1088))) then (if (not-caught-fail(v_1091) && success?(is-true(success?(1-proj-2-tuple(v_1091))))) then cipherstatepack(1-proj-2-tuple(v_1091),increment_nonce(2-proj-2-tuple(v_1089))) else fail-any) else fail-any)) in
        {578}let v_1093: bitstring = catch-fail((if (success?(getpublickey(v_1087)) && (success?(3-proj-3-tuple(v_1088)) && success?(1-proj-3-tuple(v_1088)))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-2-tuple(v_1089))))) then (if not-caught-fail(v_1090) then (if not-caught-fail(v_1092) then (v_1092,v_1090) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {579}let v_1094: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1093),2-proj-3-tuple(v_1088),3-proj-3-tuple(v_1088)))) in
        {580}let v_1095: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1093)) && success?(symmetricstatepack(1-proj-2-tuple(v_1093),2-proj-3-tuple(v_1088),3-proj-3-tuple(v_1088)))) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then symmetricstatepack(1-proj-3-tuple(v_1094),2-proj-3-tuple(v_1094),hash(3-proj-3-tuple(v_1094),2-proj-2-tuple(v_1093))) else fail-any) else fail-any)) in
        {581}let v_1096: bitstring = catch-fail((if success?(getpublickey(v_1087)) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-3-tuple(v_1088))))) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then (if not-caught-fail(v_1095) then (v_1095,2-proj-2-tuple(v_1093)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {582}let v_1097: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1096))) in
        {583}let v_1098: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1097))) in
        {584}let v_1099: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1098),2-proj-2-tuple(v_1098),3-proj-3-tuple(v_1097),msg_b(bob,charlie))) in
        {585}let v_1100: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1097))) in
        {586}let v_1101: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1098))) && success?(1-proj-3-tuple(v_1097))) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-2-tuple(v_1100))))) then cipherstatepack(1-proj-2-tuple(v_1100),increment_nonce(2-proj-2-tuple(v_1098))) else fail-any) else fail-any)) in
        {587}let v_1102: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1097)) && success?(1-proj-3-tuple(v_1097))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then (if not-caught-fail(v_1099) then (if not-caught-fail(v_1101) then (v_1101,v_1099) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {588}let v_1103: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1102),2-proj-3-tuple(v_1097),3-proj-3-tuple(v_1097)))) in
        {589}let v_1104: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1102)) && success?(symmetricstatepack(1-proj-2-tuple(v_1102),2-proj-3-tuple(v_1097),3-proj-3-tuple(v_1097)))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then symmetricstatepack(1-proj-3-tuple(v_1103),2-proj-3-tuple(v_1103),hash(3-proj-3-tuple(v_1103),2-proj-2-tuple(v_1102))) else fail-any) else fail-any)) in
        {590}let v_1105: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1096)) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-3-tuple(v_1097))))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then (if not-caught-fail(v_1104) then (v_1104,2-proj-2-tuple(v_1102)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {591}let v_1106: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1105),v_1087,v_1075,4-proj-7-tuple(v_1072),5-proj-7-tuple(v_1072),6-proj-7-tuple(v_1072),7-proj-7-tuple(v_1072))) in
        {592}let v_1107: bitstring = catch-fail(concat3(v_1076,2-proj-2-tuple(v_1096),2-proj-2-tuple(v_1105))) in
        {593}let (hs_1108: handshakestate,re_1109: key,message_b_1110: bitstring) = (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-7-tuple(v_1072))))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-3-tuple(v_1073))))) then (if not-caught-fail(v_1075) then (if not-caught-fail(v_1076) then (if not-caught-fail(v_1078) then (if not-caught-fail(v_1085) then (if not-caught-fail(v_1087) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then (if not-caught-fail(v_1106) then (if not-caught-fail(v_1107) then (v_1106,5-proj-7-tuple(v_1072),v_1107) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {594}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {595}insert statestore(bob,charlie,statepack_c(hs_1108));
        {596}out(pub, message_b_1110)
    ) | (
        {630}get statestore(=bob,=charlie,statepack_c(hs_1111: handshakestate)) in
        {598}in(pub, message_c_1112: bitstring);
        {599}let v_1113: bitstring = catch-fail(handshakestateunpack(hs_1111)) in
        {600}let v_1114: bitstring = catch-fail(deconcat3(message_c_1112)) in
        {601}let v_1115: bool = catch-fail(true) in
        {602}let v_1116: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1113))) in
        {603}let v_1117: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1113))) in
        {604}let v_1118: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1117),(if (success?(4-proj-7-tuple(v_1113)) && success?(3-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-2-tuple(v_1116))))) then dhexp(2-proj-2-tuple(v_1116),4-proj-7-tuple(v_1113)) else fail-any) else fail-any))) in
        {605}let v_1119: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1117),(if (success?(4-proj-7-tuple(v_1113)) && success?(3-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-2-tuple(v_1116))))) then dhexp(2-proj-2-tuple(v_1116),4-proj-7-tuple(v_1113)) else fail-any) else fail-any))) in
        {606}let v_1120: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1117),(if (success?(4-proj-7-tuple(v_1113)) && success?(3-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-2-tuple(v_1116))))) then dhexp(2-proj-2-tuple(v_1116),4-proj-7-tuple(v_1113)) else fail-any) else fail-any))) in
        {607}let v_1121: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1113)) && success?(3-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-2-tuple(v_1116))))) then dhexp(2-proj-2-tuple(v_1116),4-proj-7-tuple(v_1113)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1117))) then (if not-caught-fail(v_1118) then (if not-caught-fail(v_1119) then (if not-caught-fail(v_1120) then (v_1118,v_1119,v_1120) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1122: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1113)) && success?(3-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-2-tuple(v_1116))))) then dhexp(2-proj-2-tuple(v_1116),4-proj-7-tuple(v_1113)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-3-tuple(v_1117))))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1121)) then cipherstatepack(2-proj-3-tuple(v_1121),minnonce) else fail-any),1-proj-3-tuple(v_1121),3-proj-3-tuple(v_1117)) else fail-any) else fail-any) else fail-any)) in
        {609}let v_1123: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1113))) in
        {610}let v_1124: bitstring = catch-fail(symmetricstateunpack(v_1122)) in
        {611}let v_1125: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1124),(if (success?(5-proj-7-tuple(v_1113)) && success?(2-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-2-tuple(v_1123))))) then dhexp(2-proj-2-tuple(v_1123),5-proj-7-tuple(v_1113)) else fail-any) else fail-any))) in
        {612}let v_1126: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1124),(if (success?(5-proj-7-tuple(v_1113)) && success?(2-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-2-tuple(v_1123))))) then dhexp(2-proj-2-tuple(v_1123),5-proj-7-tuple(v_1113)) else fail-any) else fail-any))) in
        {613}let v_1127: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1124),(if (success?(5-proj-7-tuple(v_1113)) && success?(2-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-2-tuple(v_1123))))) then dhexp(2-proj-2-tuple(v_1123),5-proj-7-tuple(v_1113)) else fail-any) else fail-any))) in
        {614}let v_1128: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1113)) && success?(2-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-2-tuple(v_1123))))) then dhexp(2-proj-2-tuple(v_1123),5-proj-7-tuple(v_1113)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1124))) then (if not-caught-fail(v_1125) then (if not-caught-fail(v_1126) then (if not-caught-fail(v_1127) then (v_1125,v_1126,v_1127) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {615}let v_1129: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_1113)) && success?(2-proj-7-tuple(v_1113))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-2-tuple(v_1123))))) then dhexp(2-proj-2-tuple(v_1123),5-proj-7-tuple(v_1113)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-3-tuple(v_1124))))) then (if (not-caught-fail(v_1128) && success?(is-true(success?(1-proj-3-tuple(v_1128))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1128)) then cipherstatepack(2-proj-3-tuple(v_1128),minnonce) else fail-any),1-proj-3-tuple(v_1128),3-proj-3-tuple(v_1124)) else fail-any) else fail-any) else fail-any)) in
        {616}let v_1130: bitstring = catch-fail(symmetricstateunpack(v_1129)) in
        {617}let v_1131: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1130))) in
        {618}let v_1132: aead = catch-fail(decrypt(1-proj-2-tuple(v_1131),2-proj-2-tuple(v_1131),3-proj-3-tuple(v_1130),3-proj-3-tuple(v_1114))) in
        {619}let v_1133: bitstring = catch-fail(aeadunpack(v_1132)) in
        {620}let v_1134: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1130))) in
        {621}let v_1135: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1131))) && success?(1-proj-3-tuple(v_1130))) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-2-tuple(v_1134))))) then cipherstatepack(1-proj-2-tuple(v_1134),increment_nonce(2-proj-2-tuple(v_1131))) else fail-any) else fail-any)) in
        {622}let v_1136: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1114)) && (success?(3-proj-3-tuple(v_1130)) && success?(1-proj-3-tuple(v_1130)))) then (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-2-tuple(v_1131))))) then (if not-caught-fail(v_1132) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-3-tuple(v_1133))))) then (if not-caught-fail(v_1135) then (v_1135,3-proj-3-tuple(v_1133),1-proj-3-tuple(v_1133)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {623}let v_1137: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1136),2-proj-3-tuple(v_1130),3-proj-3-tuple(v_1130)))) in
        {624}let v_1138: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1114)) && success?(symmetricstatepack(1-proj-3-tuple(v_1136),2-proj-3-tuple(v_1130),3-proj-3-tuple(v_1130)))) then (if (not-caught-fail(v_1137) && success?(is-true(success?(1-proj-3-tuple(v_1137))))) then symmetricstatepack(1-proj-3-tuple(v_1137),2-proj-3-tuple(v_1137),hash(3-proj-3-tuple(v_1137),3-proj-3-tuple(v_1114))) else fail-any) else fail-any)) in
        {625}let v_1139: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1114)) then (if (not-caught-fail(v_1130) && success?(is-true(success?(1-proj-3-tuple(v_1130))))) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-3-tuple(v_1136))))) then (if not-caught-fail(v_1138) then (v_1138,2-proj-3-tuple(v_1136),3-proj-3-tuple(v_1136)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1140: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1139),2-proj-7-tuple(v_1113),3-proj-7-tuple(v_1113),4-proj-7-tuple(v_1113),5-proj-7-tuple(v_1113),6-proj-7-tuple(v_1113),7-proj-7-tuple(v_1113))) in
        {627}let (hs_1141: handshakestate,re_1142: key,plaintext_c_1143: bitstring,valid_1144: bool) = (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-7-tuple(v_1113))))) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then (if not-caught-fail(v_1115) then (if not-caught-fail(v_1122) then (if not-caught-fail(v_1129) then (if (not-caught-fail(v_1139) && success?(is-true(success?(1-proj-3-tuple(v_1139))))) then (if (v_1115 && 3-proj-3-tuple(v_1139)) then (if not-caught-fail(v_1140) then (v_1140,getpublickey(3-proj-7-tuple(v_1113)),2-proj-3-tuple(v_1139),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {628}event RecvMsg(bob,charlie,stage_c,plaintext_c_1143,valid_1144);
        {629}insert statestore(bob,charlie,statepack_d(hs_1141))
    ) | (
        {648}get statestore(=bob,=charlie,statepack_d(hs_1145: handshakestate)) in
        {631}let v_1146: bitstring = catch-fail(handshakestateunpack(hs_1145)) in
        {632}let v_1147: bitstring = catch-fail((empty,empty,empty)) in
        {633}let v_1148: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1146))) in
        {634}let v_1149: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1148))) in
        {635}let v_1150: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1149),2-proj-2-tuple(v_1149),3-proj-3-tuple(v_1148),msg_d(bob,charlie))) in
        {636}let v_1151: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1148))) in
        {637}let v_1152: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1149))) && success?(1-proj-3-tuple(v_1148))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-2-tuple(v_1151))))) then cipherstatepack(1-proj-2-tuple(v_1151),increment_nonce(2-proj-2-tuple(v_1149))) else fail-any) else fail-any)) in
        {638}let v_1153: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1148)) && success?(1-proj-3-tuple(v_1148))) then (if (not-caught-fail(v_1149) && success?(is-true(success?(1-proj-2-tuple(v_1149))))) then (if not-caught-fail(v_1150) then (if not-caught-fail(v_1152) then (v_1152,v_1150) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {639}let v_1154: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1153),2-proj-3-tuple(v_1148),3-proj-3-tuple(v_1148)))) in
        {640}let v_1155: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1153)) && success?(symmetricstatepack(1-proj-2-tuple(v_1153),2-proj-3-tuple(v_1148),3-proj-3-tuple(v_1148)))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-3-tuple(v_1154))))) then symmetricstatepack(1-proj-3-tuple(v_1154),2-proj-3-tuple(v_1154),hash(3-proj-3-tuple(v_1154),2-proj-2-tuple(v_1153))) else fail-any) else fail-any)) in
        {641}let v_1156: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1146)) then (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-3-tuple(v_1148))))) then (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-2-tuple(v_1153))))) then (if not-caught-fail(v_1155) then (v_1155,2-proj-2-tuple(v_1153)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {642}let v_1157: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1156),2-proj-7-tuple(v_1146),3-proj-7-tuple(v_1146),4-proj-7-tuple(v_1146),5-proj-7-tuple(v_1146),6-proj-7-tuple(v_1146),7-proj-7-tuple(v_1146))) in
        {643}let v_1158: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1147),2-proj-3-tuple(v_1147),2-proj-2-tuple(v_1156))) in
        {644}let (hs_1159: handshakestate,re_1160: key,message_d_1161: bitstring) = (if (not-caught-fail(v_1146) && success?(is-true(success?(1-proj-7-tuple(v_1146))))) then (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-3-tuple(v_1147))))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-2-tuple(v_1156))))) then (if not-caught-fail(v_1157) then (if not-caught-fail(v_1158) then (v_1157,5-proj-7-tuple(v_1146),v_1158) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {645}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {646}insert statestore(bob,charlie,statepack_e(hs_1159));
        {647}out(pub, message_d_1161)
    ) | (
        {676}get statestore(=bob,=charlie,statepack_e(hs_1162: handshakestate)) in
        {649}in(pub, message_e_1163: bitstring);
        {650}let v_1164: bitstring = catch-fail(handshakestateunpack(hs_1162)) in
        {651}let v_1165: bitstring = catch-fail(deconcat3(message_e_1163)) in
        {652}let v_1166: bool = catch-fail(true) in
        {653}let v_1167: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1164))) in
        {654}let v_1168: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1167))) in
        {655}let v_1169: aead = catch-fail(decrypt(1-proj-2-tuple(v_1168),2-proj-2-tuple(v_1168),3-proj-3-tuple(v_1167),3-proj-3-tuple(v_1165))) in
        {656}let v_1170: bitstring = catch-fail(aeadunpack(v_1169)) in
        {657}let v_1171: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1167))) in
        {658}let v_1172: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1168))) && success?(1-proj-3-tuple(v_1167))) then (if (not-caught-fail(v_1171) && success?(is-true(success?(1-proj-2-tuple(v_1171))))) then cipherstatepack(1-proj-2-tuple(v_1171),increment_nonce(2-proj-2-tuple(v_1168))) else fail-any) else fail-any)) in
        {659}let v_1173: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1165)) && (success?(3-proj-3-tuple(v_1167)) && success?(1-proj-3-tuple(v_1167)))) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-2-tuple(v_1168))))) then (if not-caught-fail(v_1169) then (if (not-caught-fail(v_1170) && success?(is-true(success?(1-proj-3-tuple(v_1170))))) then (if not-caught-fail(v_1172) then (v_1172,3-proj-3-tuple(v_1170),1-proj-3-tuple(v_1170)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {660}let v_1174: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1173),2-proj-3-tuple(v_1167),3-proj-3-tuple(v_1167)))) in
        {661}let v_1175: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1165)) && success?(symmetricstatepack(1-proj-3-tuple(v_1173),2-proj-3-tuple(v_1167),3-proj-3-tuple(v_1167)))) then (if (not-caught-fail(v_1174) && success?(is-true(success?(1-proj-3-tuple(v_1174))))) then symmetricstatepack(1-proj-3-tuple(v_1174),2-proj-3-tuple(v_1174),hash(3-proj-3-tuple(v_1174),3-proj-3-tuple(v_1165))) else fail-any) else fail-any)) in
        {662}let v_1176: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1165)) && success?(1-proj-7-tuple(v_1164))) then (if (not-caught-fail(v_1167) && success?(is-true(success?(1-proj-3-tuple(v_1167))))) then (if (not-caught-fail(v_1173) && success?(is-true(success?(1-proj-3-tuple(v_1173))))) then (if not-caught-fail(v_1175) then (v_1175,2-proj-3-tuple(v_1173),3-proj-3-tuple(v_1173)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {663}let v_1177: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1176),2-proj-7-tuple(v_1164),3-proj-7-tuple(v_1164),4-proj-7-tuple(v_1164),5-proj-7-tuple(v_1164),6-proj-7-tuple(v_1164),7-proj-7-tuple(v_1164))) in
        {664}let v_1178: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1176))) in
        {665}let v_1179: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1178),zero)) in
        {666}let v_1180: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1178),zero)) in
        {667}let v_1181: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1178),zero)) in
        {668}let v_1182: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1178)) then (if not-caught-fail(v_1179) then (if not-caught-fail(v_1180) then (if not-caught-fail(v_1181) then (v_1179,v_1180,v_1181) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {669}let v_1183: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1182)) then cipherstatepack(1-proj-3-tuple(v_1182),minnonce) else fail-any)) in
        {670}let v_1184: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1182)) then cipherstatepack(2-proj-3-tuple(v_1182),minnonce) else fail-any)) in
        {671}let v_1185: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1176)) then (if (not-caught-fail(v_1178) && success?(is-true(success?(1-proj-3-tuple(v_1178))))) then (if (not-caught-fail(v_1182) && success?(is-true(success?(1-proj-3-tuple(v_1182))))) then (if not-caught-fail(v_1183) then (if not-caught-fail(v_1184) then (1-proj-3-tuple(v_1176),v_1183,v_1184) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {672}let (hs_1186: handshakestate,re_1187: key,plaintext_e_1188: bitstring,valid_1189: bool,cs1_1190: cipherstate,cs2_1191: cipherstate) = (if (not-caught-fail(v_1164) && success?(is-true(success?(1-proj-7-tuple(v_1164))))) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then (if not-caught-fail(v_1166) then (if (not-caught-fail(v_1176) && success?(is-true(success?(1-proj-3-tuple(v_1176))))) then (if (v_1166 && 3-proj-3-tuple(v_1176)) then (if not-caught-fail(v_1177) then (if (not-caught-fail(v_1185) && success?(is-true(success?(1-proj-3-tuple(v_1185))))) then (v_1177,getpublickey(3-proj-7-tuple(v_1164)),2-proj-3-tuple(v_1176),true,2-proj-3-tuple(v_1185),3-proj-3-tuple(v_1185)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {673}event RecvMsg(bob,charlie,stage_e,plaintext_e_1188,valid_1189);
        {674}insert statestore(bob,charlie,statepack_f(hs_1186));
        {675}event RecvEnd(valid_1189)
    ) | (
        {677}event LeakS(phase0,bob);
        {678}out(pub, key_s(bob))
    ) | (
        {679}phase 1;
        {680}event LeakS(phase1,bob);
        {681}out(pub, key_s(bob))
    )
) | (
    {682}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1272,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1272,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1272,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1272,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1272,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1272,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1272,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1272,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1272,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1272,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 170 rules in the queue.
400 rules inserted. The rule base contains 388 rules. 15 rules in the queue.
600 rules inserted. The rule base contains 552 rules. 417 rules in the queue.
800 rules inserted. The rule base contains 739 rules. 238 rules in the queue.
1000 rules inserted. The rule base contains 915 rules. 94 rules in the queue.
1200 rules inserted. The rule base contains 1084 rules. 210 rules in the queue.
1400 rules inserted. The rule base contains 1222 rules. 195 rules in the queue.
1600 rules inserted. The rule base contains 1358 rules. 197 rules in the queue.
1800 rules inserted. The rule base contains 1511 rules. 177 rules in the queue.
2000 rules inserted. The rule base contains 1659 rules. 182 rules in the queue.
2200 rules inserted. The rule base contains 1770 rules. 189 rules in the queue.
2400 rules inserted. The rule base contains 1886 rules. 209 rules in the queue.
2600 rules inserted. The rule base contains 1990 rules. 204 rules in the queue.
2800 rules inserted. The rule base contains 2098 rules. 190 rules in the queue.
3000 rules inserted. The rule base contains 2194 rules. 195 rules in the queue.
3200 rules inserted. The rule base contains 2294 rules. 166 rules in the queue.
3400 rules inserted. The rule base contains 2433 rules. 189 rules in the queue.
3600 rules inserted. The rule base contains 2560 rules. 199 rules in the queue.
3800 rules inserted. The rule base contains 2668 rules. 204 rules in the queue.
4000 rules inserted. The rule base contains 2803 rules. 203 rules in the queue.
4200 rules inserted. The rule base contains 2967 rules. 235 rules in the queue.
4400 rules inserted. The rule base contains 3125 rules. 254 rules in the queue.
4600 rules inserted. The rule base contains 3269 rules. 270 rules in the queue.
4800 rules inserted. The rule base contains 3397 rules. 270 rules in the queue.
5000 rules inserted. The rule base contains 3498 rules. 241 rules in the queue.
5200 rules inserted. The rule base contains 3618 rules. 231 rules in the queue.
5400 rules inserted. The rule base contains 3762 rules. 243 rules in the queue.
5600 rules inserted. The rule base contains 3901 rules. 256 rules in the queue.
5800 rules inserted. The rule base contains 4014 rules. 239 rules in the queue.
6000 rules inserted. The rule base contains 4111 rules. 235 rules in the queue.
6200 rules inserted. The rule base contains 4215 rules. 191 rules in the queue.
6400 rules inserted. The rule base contains 4331 rules. 152 rules in the queue.
6600 rules inserted. The rule base contains 4435 rules. 159 rules in the queue.
6800 rules inserted. The rule base contains 4534 rules. 123 rules in the queue.
7000 rules inserted. The rule base contains 4592 rules. 34 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {351}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {182}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {216}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {213}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {215}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {385}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {352}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {383}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1272,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1272,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1272,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1272,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {351}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {182}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {216}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {213}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {215}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {385}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {352}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {383}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {351}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {182}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {216}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {213}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {215}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {385}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {352}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {383}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1272,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1272,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1272,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1272,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1272,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1272,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1272,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1272,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1272,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1272,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1272,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1272,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1272,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1272,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1272,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1272,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
