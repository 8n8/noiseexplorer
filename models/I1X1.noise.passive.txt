File "I1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 270, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 271, character 36:
Warning: identifier h rebound.
File "I1X1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 310, character 6:
Warning: identifier e rebound.
File "I1X1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ne rebound.
File "I1X1.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 314, character 6:
Warning: identifier s rebound.
File "I1X1.noise.passive.pv", line 315, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 315, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X1.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 324, character 6:
Warning: identifier e rebound.
File "I1X1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ne rebound.
File "I1X1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "I1X1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X1.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 341, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier re rebound.
File "I1X1.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 354, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X1.noise.passive.pv", line 355, characters 6-7:
Warning: identifier rs rebound.
File "I1X1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier re rebound.
File "I1X1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 370, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 370, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X1.noise.passive.pv", line 371, characters 6-7:
Warning: identifier rs rebound.
File "I1X1.noise.passive.pv", line 372, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 374, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 382, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 383, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 384, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 386, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 341, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier re rebound.
File "I1X1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 370, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 370, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X1.noise.passive.pv", line 371, characters 6-7:
Warning: identifier rs rebound.
File "I1X1.noise.passive.pv", line 372, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 374, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 490, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 310, character 6:
Warning: identifier e rebound.
File "I1X1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ne rebound.
File "I1X1.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 314, character 6:
Warning: identifier s rebound.
File "I1X1.noise.passive.pv", line 315, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 315, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X1.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 548, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 382, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 383, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 384, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 386, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 540, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 324, character 6:
Warning: identifier e rebound.
File "I1X1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ne rebound.
File "I1X1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "I1X1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1X1.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1X1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1X1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 533, characters 8-9:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier re rebound.
File "I1X1.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 354, characters 48-53:
Warning: identifier valid1 rebound.
File "I1X1.noise.passive.pv", line 355, characters 6-7:
Warning: identifier rs rebound.
File "I1X1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "I1X1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1X1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1X1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_474: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_474));
    (
        {4}let e_475: keypair = keypairpack(empty,empty) in
        {5}let rs_476: key = empty in
        {6}let re_477: key = empty in
        {7}let v_478: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_479: key = catch-fail(v_478) in
        {9}let v_480: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_481: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any))) in
        {11}let v_482: symmetricstate = catch-fail((if success?((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then symmetricstatepack(1-proj-3-tuple(v_481),2-proj-3-tuple(v_481),hash(3-proj-3-tuple(v_481),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_482) then handshakestatepack(v_482,s_474,e_475,rs_476,re_477,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {47}get statestore(=alice,=bob,statepack_a(hs_483: handshakestate)) in
        {14}let v_484: bitstring = catch-fail(handshakestateunpack(hs_483)) in
        {15}let v_485: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_486: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_487: keypair = catch-fail((if not-caught-fail(v_486) then keypairpack(v_486,key_e(alice,bob)) else fail-any)) in
        {18}let v_488: bitstring = catch-fail(getpublickey(v_487)) in
        {19}let v_489: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_484))) in
        {20}let v_490: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_484)) then (if (not-caught-fail(v_489) && success?(is-true(success?(1-proj-3-tuple(v_489))))) then symmetricstatepack(1-proj-3-tuple(v_489),2-proj-3-tuple(v_489),hash(3-proj-3-tuple(v_489),v_488)) else fail-any) else fail-any)) in
        {21}let v_491: key = catch-fail(dhexp(key_s(alice),g)) in
        {22}let v_492: keypair = catch-fail((if not-caught-fail(v_491) then keypairpack(v_491,key_s(alice)) else fail-any)) in
        {23}let v_493: bitstring = catch-fail(symmetricstateunpack(v_490)) in
        {24}let v_494: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {25}let v_495: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_494),2-proj-2-tuple(v_494),3-proj-3-tuple(v_493),getpublickey(v_492))) in
        {26}let v_496: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {27}let v_497: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_494))) && success?(1-proj-3-tuple(v_493))) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-2-tuple(v_496))))) then cipherstatepack(1-proj-2-tuple(v_496),increment_nonce(2-proj-2-tuple(v_494))) else fail-any) else fail-any)) in
        {28}let v_498: bitstring = catch-fail((if (success?(getpublickey(v_492)) && (success?(3-proj-3-tuple(v_493)) && success?(1-proj-3-tuple(v_493)))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-2-tuple(v_494))))) then (if not-caught-fail(v_495) then (if not-caught-fail(v_497) then (v_497,v_495) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_499: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_498),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) in
        {30}let v_500: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_498)) && success?(symmetricstatepack(1-proj-2-tuple(v_498),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-3-tuple(v_499))))) then symmetricstatepack(1-proj-3-tuple(v_499),2-proj-3-tuple(v_499),hash(3-proj-3-tuple(v_499),2-proj-2-tuple(v_498))) else fail-any) else fail-any)) in
        {31}let v_501: bitstring = catch-fail((if success?(getpublickey(v_492)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-3-tuple(v_493))))) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-2-tuple(v_498))))) then (if not-caught-fail(v_500) then (v_500,2-proj-2-tuple(v_498)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_502: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_501))) in
        {33}let v_503: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_502))) in
        {34}let v_504: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_503),2-proj-2-tuple(v_503),3-proj-3-tuple(v_502),msg_a(alice,bob))) in
        {35}let v_505: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_502))) in
        {36}let v_506: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_503))) && success?(1-proj-3-tuple(v_502))) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then cipherstatepack(1-proj-2-tuple(v_505),increment_nonce(2-proj-2-tuple(v_503))) else fail-any) else fail-any)) in
        {37}let v_507: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_502)) && success?(1-proj-3-tuple(v_502))) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-2-tuple(v_503))))) then (if not-caught-fail(v_504) then (if not-caught-fail(v_506) then (v_506,v_504) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_508: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_507),2-proj-3-tuple(v_502),3-proj-3-tuple(v_502)))) in
        {39}let v_509: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_507)) && success?(symmetricstatepack(1-proj-2-tuple(v_507),2-proj-3-tuple(v_502),3-proj-3-tuple(v_502)))) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then symmetricstatepack(1-proj-3-tuple(v_508),2-proj-3-tuple(v_508),hash(3-proj-3-tuple(v_508),2-proj-2-tuple(v_507))) else fail-any) else fail-any)) in
        {40}let v_510: bitstring = catch-fail((if success?(1-proj-2-tuple(v_501)) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-2-tuple(v_507))))) then (if not-caught-fail(v_509) then (v_509,2-proj-2-tuple(v_507)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_511: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_510),v_492,v_487,4-proj-7-tuple(v_484),5-proj-7-tuple(v_484),6-proj-7-tuple(v_484),7-proj-7-tuple(v_484))) in
        {42}let v_512: bitstring = catch-fail(concat3(v_488,2-proj-2-tuple(v_501),2-proj-2-tuple(v_510))) in
        {43}let (hs_513: handshakestate,re_514: key,message_a: bitstring) = (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-7-tuple(v_484))))) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then (if not-caught-fail(v_487) then (if not-caught-fail(v_488) then (if not-caught-fail(v_490) then (if not-caught-fail(v_492) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-2-tuple(v_501))))) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-2-tuple(v_510))))) then (if not-caught-fail(v_511) then (if not-caught-fail(v_512) then (v_511,5-proj-7-tuple(v_484),v_512) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {44}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {45}insert statestore(alice,bob,statepack_b(hs_513));
        {46}out(pub, message_a)
    ) | (
        {88}get statestore(=alice,=bob,statepack_b(hs_515: handshakestate)) in
        {48}in(pub, message_b: bitstring);
        {49}let v_516: bitstring = catch-fail(handshakestateunpack(hs_515)) in
        {50}let v_517: bitstring = catch-fail(deconcat3(message_b)) in
        {51}let v_518: bool = catch-fail(true) in
        {52}let v_519: key = catch-fail(1-proj-3-tuple(v_517)) in
        {53}let v_520: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_516))) in
        {54}let v_521: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_516)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then symmetricstatepack(1-proj-3-tuple(v_520),2-proj-3-tuple(v_520),hash(3-proj-3-tuple(v_520),v_519)) else fail-any) else fail-any)) in
        {55}let v_522: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_516))) in
        {56}let v_523: bitstring = catch-fail(symmetricstateunpack(v_521)) in
        {57}let v_524: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_523),(if success?(3-proj-7-tuple(v_516)) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then dhexp(2-proj-2-tuple(v_522),v_519) else fail-any) else fail-any))) in
        {58}let v_525: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_523),(if success?(3-proj-7-tuple(v_516)) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then dhexp(2-proj-2-tuple(v_522),v_519) else fail-any) else fail-any))) in
        {59}let v_526: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_523),(if success?(3-proj-7-tuple(v_516)) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then dhexp(2-proj-2-tuple(v_522),v_519) else fail-any) else fail-any))) in
        {60}let v_527: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_516)) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then dhexp(2-proj-2-tuple(v_522),v_519) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_523))) then (if not-caught-fail(v_524) then (if not-caught-fail(v_525) then (if not-caught-fail(v_526) then (v_524,v_525,v_526) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_528: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_516)) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then dhexp(2-proj-2-tuple(v_522),v_519) else fail-any) else fail-any)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_527)) then cipherstatepack(2-proj-3-tuple(v_527),minnonce) else fail-any),1-proj-3-tuple(v_527),3-proj-3-tuple(v_523)) else fail-any) else fail-any) else fail-any)) in
        {62}let v_529: bitstring = catch-fail(symmetricstateunpack(v_528)) in
        {63}let v_530: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_529))) in
        {64}let v_531: aead = catch-fail(decrypt(1-proj-2-tuple(v_530),2-proj-2-tuple(v_530),3-proj-3-tuple(v_529),2-proj-3-tuple(v_517))) in
        {65}let v_532: bitstring = catch-fail(aeadunpack(v_531)) in
        {66}let v_533: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_529))) in
        {67}let v_534: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_530))) && success?(1-proj-3-tuple(v_529))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then cipherstatepack(1-proj-2-tuple(v_533),increment_nonce(2-proj-2-tuple(v_530))) else fail-any) else fail-any)) in
        {68}let v_535: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_517)) && (success?(3-proj-3-tuple(v_529)) && success?(1-proj-3-tuple(v_529)))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then (if not-caught-fail(v_531) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (if not-caught-fail(v_534) then (v_534,3-proj-3-tuple(v_532),1-proj-3-tuple(v_532)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {69}let v_536: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_535),2-proj-3-tuple(v_529),3-proj-3-tuple(v_529)))) in
        {70}let v_537: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_517)) && success?(symmetricstatepack(1-proj-3-tuple(v_535),2-proj-3-tuple(v_529),3-proj-3-tuple(v_529)))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then symmetricstatepack(1-proj-3-tuple(v_536),2-proj-3-tuple(v_536),hash(3-proj-3-tuple(v_536),2-proj-3-tuple(v_517))) else fail-any) else fail-any)) in
        {71}let v_538: bitstring = catch-fail((if success?(2-proj-3-tuple(v_517)) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if not-caught-fail(v_537) then (v_537,2-proj-3-tuple(v_535),3-proj-3-tuple(v_535)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_539: key = catch-fail(2-proj-3-tuple(v_538)) in
        {73}let v_540: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_538))) in
        {74}let v_541: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_540))) in
        {75}let v_542: aead = catch-fail(decrypt(1-proj-2-tuple(v_541),2-proj-2-tuple(v_541),3-proj-3-tuple(v_540),3-proj-3-tuple(v_517))) in
        {76}let v_543: bitstring = catch-fail(aeadunpack(v_542)) in
        {77}let v_544: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_540))) in
        {78}let v_545: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_541))) && success?(1-proj-3-tuple(v_540))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then cipherstatepack(1-proj-2-tuple(v_544),increment_nonce(2-proj-2-tuple(v_541))) else fail-any) else fail-any)) in
        {79}let v_546: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_517)) && (success?(3-proj-3-tuple(v_540)) && success?(1-proj-3-tuple(v_540)))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-2-tuple(v_541))))) then (if not-caught-fail(v_542) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_545) then (v_545,3-proj-3-tuple(v_543),1-proj-3-tuple(v_543)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_547: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_546),2-proj-3-tuple(v_540),3-proj-3-tuple(v_540)))) in
        {81}let v_548: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_517)) && success?(symmetricstatepack(1-proj-3-tuple(v_546),2-proj-3-tuple(v_540),3-proj-3-tuple(v_540)))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),3-proj-3-tuple(v_517))) else fail-any) else fail-any)) in
        {82}let v_549: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_517)) && success?(1-proj-3-tuple(v_538))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then (if not-caught-fail(v_548) then (v_548,2-proj-3-tuple(v_546),3-proj-3-tuple(v_546)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_550: key = catch-fail(dhexp(key_s(bob),g)) in
        {84}let v_551: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_549),2-proj-7-tuple(v_516),3-proj-7-tuple(v_516),v_539,v_519,6-proj-7-tuple(v_516),7-proj-7-tuple(v_516))) in
        {85}let (hs_552: handshakestate,re_553: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-7-tuple(v_516))))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-3-tuple(v_517))))) then (if not-caught-fail(v_518) then (if not-caught-fail(v_519) then (if not-caught-fail(v_521) then (if not-caught-fail(v_528) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if not-caught-fail(v_539) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if ((3-proj-3-tuple(v_538) && 3-proj-3-tuple(v_549)) && (v_539 = getpublickey((if not-caught-fail(v_550) then keypairpack(v_550,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_551) then (v_551,getpublickey(3-proj-7-tuple(v_516)),2-proj-3-tuple(v_549),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {86}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {87}insert statestore(alice,bob,statepack_c(hs_552))
    ) | (
        {128}get statestore(=alice,=bob,statepack_c(hs_554: handshakestate)) in
        {89}let v_555: bitstring = catch-fail(handshakestateunpack(hs_554)) in
        {90}let v_556: bitstring = catch-fail((empty,empty,empty)) in
        {91}let v_557: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_555))) in
        {92}let v_558: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_555))) in
        {93}let v_559: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_558),(if (success?(5-proj-7-tuple(v_555)) && success?(2-proj-7-tuple(v_555))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),5-proj-7-tuple(v_555)) else fail-any) else fail-any))) in
        {94}let v_560: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_558),(if (success?(5-proj-7-tuple(v_555)) && success?(2-proj-7-tuple(v_555))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),5-proj-7-tuple(v_555)) else fail-any) else fail-any))) in
        {95}let v_561: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_558),(if (success?(5-proj-7-tuple(v_555)) && success?(2-proj-7-tuple(v_555))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),5-proj-7-tuple(v_555)) else fail-any) else fail-any))) in
        {96}let v_562: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_555)) && success?(2-proj-7-tuple(v_555))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),5-proj-7-tuple(v_555)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_558))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (v_559,v_560,v_561) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_563: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_555)) && success?(2-proj-7-tuple(v_555))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),5-proj-7-tuple(v_555)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_555))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_562)) then cipherstatepack(2-proj-3-tuple(v_562),minnonce) else fail-any),1-proj-3-tuple(v_562),3-proj-3-tuple(v_558)) else fail-any) else fail-any) else fail-any)) in
        {98}let v_564: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_555))) in
        {99}let v_565: bitstring = catch-fail(symmetricstateunpack(v_563)) in
        {100}let v_566: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_565),(if (success?(4-proj-7-tuple(v_555)) && success?(3-proj-7-tuple(v_555))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_555)) else fail-any) else fail-any))) in
        {101}let v_567: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_565),(if (success?(4-proj-7-tuple(v_555)) && success?(3-proj-7-tuple(v_555))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_555)) else fail-any) else fail-any))) in
        {102}let v_568: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_565),(if (success?(4-proj-7-tuple(v_555)) && success?(3-proj-7-tuple(v_555))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_555)) else fail-any) else fail-any))) in
        {103}let v_569: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_555)) && success?(3-proj-7-tuple(v_555))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_555)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_565))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then (v_566,v_567,v_568) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_570: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_555)) && success?(3-proj-7-tuple(v_555))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_555)) else fail-any) else fail-any)) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_569)) then cipherstatepack(2-proj-3-tuple(v_569),minnonce) else fail-any),1-proj-3-tuple(v_569),3-proj-3-tuple(v_565)) else fail-any) else fail-any) else fail-any)) in
        {105}let v_571: bitstring = catch-fail(symmetricstateunpack(v_570)) in
        {106}let v_572: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {107}let v_573: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_572),2-proj-2-tuple(v_572),3-proj-3-tuple(v_571),msg_c(alice,bob))) in
        {108}let v_574: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {109}let v_575: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_572))) && success?(1-proj-3-tuple(v_571))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then cipherstatepack(1-proj-2-tuple(v_574),increment_nonce(2-proj-2-tuple(v_572))) else fail-any) else fail-any)) in
        {110}let v_576: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_571)) && success?(1-proj-3-tuple(v_571))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_573) then (if not-caught-fail(v_575) then (v_575,v_573) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {111}let v_577: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_576),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) in
        {112}let v_578: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_576)) && success?(symmetricstatepack(1-proj-2-tuple(v_576),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_577),hash(3-proj-3-tuple(v_577),2-proj-2-tuple(v_576))) else fail-any) else fail-any)) in
        {113}let v_579: bitstring = catch-fail((if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then (if not-caught-fail(v_578) then (v_578,2-proj-2-tuple(v_576)) else fail-any) else fail-any) else fail-any)) in
        {114}let v_580: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_579),2-proj-7-tuple(v_555),3-proj-7-tuple(v_555),4-proj-7-tuple(v_555),5-proj-7-tuple(v_555),6-proj-7-tuple(v_555),7-proj-7-tuple(v_555))) in
        {115}let v_581: bitstring = catch-fail(concat3(1-proj-3-tuple(v_556),2-proj-3-tuple(v_556),2-proj-2-tuple(v_579))) in
        {116}let v_582: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_579))) in
        {117}let v_583: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_582),zero)) in
        {118}let v_584: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_582),zero)) in
        {119}let v_585: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_582),zero)) in
        {120}let v_586: bitstring = catch-fail((if success?(2-proj-3-tuple(v_582)) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (v_583,v_584,v_585) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {121}let v_587: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_586)) then cipherstatepack(1-proj-3-tuple(v_586),minnonce) else fail-any)) in
        {122}let v_588: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_586)) then cipherstatepack(2-proj-3-tuple(v_586),minnonce) else fail-any)) in
        {123}let v_589: bitstring = catch-fail((if success?(1-proj-2-tuple(v_579)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (1-proj-2-tuple(v_579),v_587,v_588) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let (hs_590: handshakestate,re_591: key,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-7-tuple(v_555))))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then (if not-caught-fail(v_563) then (if not-caught-fail(v_570) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (v_580,5-proj-7-tuple(v_555),v_581,2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {125}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {126}insert statestore(alice,bob,statepack_d(hs_590));
        {127}out(pub, message_c)
    ) | (
        {129}event LeakS(phase0,alice);
        {130}out(pub, key_s(alice))
    ) | (
        {131}phase 1;
        {132}event LeakS(phase1,alice);
        {133}out(pub, key_s(alice))
    )
) | (
    {134}let s_592: keypair = keypairpack(empty,empty) in
    {135}out(pub, getpublickey(s_592));
    (
        {136}let e_593: keypair = keypairpack(empty,empty) in
        {137}let rs_594: key = empty in
        {138}let re_595: key = empty in
        {139}let v_596: bitstring = catch-fail(hash(somename,empty)) in
        {140}let v_597: key = catch-fail(v_596) in
        {141}let v_598: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {142}let v_599: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then symmetricstatepack(v_598,v_597,v_596) else fail-any) else fail-any) else fail-any))) in
        {143}let v_600: symmetricstate = catch-fail((if success?((if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then symmetricstatepack(v_598,v_597,v_596) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then symmetricstatepack(1-proj-3-tuple(v_599),2-proj-3-tuple(v_599),hash(3-proj-3-tuple(v_599),empty)) else fail-any) else fail-any)) in
        {144}let hs_601: handshakestate = (if not-caught-fail(v_600) then handshakestatepack(v_600,s_592,e_593,rs_594,re_595,empty,true) else fail-any) in
        {145}insert statestore(alice,charlie,statepack_a(hs_601))
    ) | (
        {179}get statestore(=alice,=charlie,statepack_a(hs_602: handshakestate)) in
        {146}let v_603: bitstring = catch-fail(handshakestateunpack(hs_602)) in
        {147}let v_604: bitstring = catch-fail((empty,empty,empty)) in
        {148}let v_605: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {149}let v_606: keypair = catch-fail((if not-caught-fail(v_605) then keypairpack(v_605,key_e(alice,charlie)) else fail-any)) in
        {150}let v_607: bitstring = catch-fail(getpublickey(v_606)) in
        {151}let v_608: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_603))) in
        {152}let v_609: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_603)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then symmetricstatepack(1-proj-3-tuple(v_608),2-proj-3-tuple(v_608),hash(3-proj-3-tuple(v_608),v_607)) else fail-any) else fail-any)) in
        {153}let v_610: key = catch-fail(dhexp(key_s(alice),g)) in
        {154}let v_611: keypair = catch-fail((if not-caught-fail(v_610) then keypairpack(v_610,key_s(alice)) else fail-any)) in
        {155}let v_612: bitstring = catch-fail(symmetricstateunpack(v_609)) in
        {156}let v_613: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_612))) in
        {157}let v_614: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_613),2-proj-2-tuple(v_613),3-proj-3-tuple(v_612),getpublickey(v_611))) in
        {158}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_612))) in
        {159}let v_616: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_613))) && success?(1-proj-3-tuple(v_612))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then cipherstatepack(1-proj-2-tuple(v_615),increment_nonce(2-proj-2-tuple(v_613))) else fail-any) else fail-any)) in
        {160}let v_617: bitstring = catch-fail((if (success?(getpublickey(v_611)) && (success?(3-proj-3-tuple(v_612)) && success?(1-proj-3-tuple(v_612)))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then (if not-caught-fail(v_614) then (if not-caught-fail(v_616) then (v_616,v_614) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {161}let v_618: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_617),2-proj-3-tuple(v_612),3-proj-3-tuple(v_612)))) in
        {162}let v_619: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_617)) && success?(symmetricstatepack(1-proj-2-tuple(v_617),2-proj-3-tuple(v_612),3-proj-3-tuple(v_612)))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),hash(3-proj-3-tuple(v_618),2-proj-2-tuple(v_617))) else fail-any) else fail-any)) in
        {163}let v_620: bitstring = catch-fail((if success?(getpublickey(v_611)) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then (if not-caught-fail(v_619) then (v_619,2-proj-2-tuple(v_617)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {164}let v_621: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_620))) in
        {165}let v_622: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {166}let v_623: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_622),2-proj-2-tuple(v_622),3-proj-3-tuple(v_621),msg_a(alice,charlie))) in
        {167}let v_624: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {168}let v_625: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_622))) && success?(1-proj-3-tuple(v_621))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then cipherstatepack(1-proj-2-tuple(v_624),increment_nonce(2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {169}let v_626: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_621)) && success?(1-proj-3-tuple(v_621))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_623) then (if not-caught-fail(v_625) then (v_625,v_623) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {170}let v_627: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_626),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) in
        {171}let v_628: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_626)) && success?(symmetricstatepack(1-proj-2-tuple(v_626),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),2-proj-2-tuple(v_626))) else fail-any) else fail-any)) in
        {172}let v_629: bitstring = catch-fail((if success?(1-proj-2-tuple(v_620)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then (if not-caught-fail(v_628) then (v_628,2-proj-2-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {173}let v_630: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_629),v_611,v_606,4-proj-7-tuple(v_603),5-proj-7-tuple(v_603),6-proj-7-tuple(v_603),7-proj-7-tuple(v_603))) in
        {174}let v_631: bitstring = catch-fail(concat3(v_607,2-proj-2-tuple(v_620),2-proj-2-tuple(v_629))) in
        {175}let (hs_632: handshakestate,re_633: key,message_a_634: bitstring) = (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-7-tuple(v_603))))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if not-caught-fail(v_606) then (if not-caught-fail(v_607) then (if not-caught-fail(v_609) then (if not-caught-fail(v_611) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then (v_630,5-proj-7-tuple(v_603),v_631) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {176}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {177}insert statestore(alice,charlie,statepack_b(hs_632));
        {178}out(pub, message_a_634)
    ) | (
        {220}get statestore(=alice,=charlie,statepack_b(hs_635: handshakestate)) in
        {180}in(pub, message_b_636: bitstring);
        {181}let v_637: bitstring = catch-fail(handshakestateunpack(hs_635)) in
        {182}let v_638: bitstring = catch-fail(deconcat3(message_b_636)) in
        {183}let v_639: bool = catch-fail(true) in
        {184}let v_640: key = catch-fail(1-proj-3-tuple(v_638)) in
        {185}let v_641: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_637))) in
        {186}let v_642: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_637)) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_641),hash(3-proj-3-tuple(v_641),v_640)) else fail-any) else fail-any)) in
        {187}let v_643: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_637))) in
        {188}let v_644: bitstring = catch-fail(symmetricstateunpack(v_642)) in
        {189}let v_645: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_644),(if success?(3-proj-7-tuple(v_637)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_640) else fail-any) else fail-any))) in
        {190}let v_646: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_644),(if success?(3-proj-7-tuple(v_637)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_640) else fail-any) else fail-any))) in
        {191}let v_647: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_644),(if success?(3-proj-7-tuple(v_637)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_640) else fail-any) else fail-any))) in
        {192}let v_648: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_637)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_640) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_644))) then (if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (if not-caught-fail(v_647) then (v_645,v_646,v_647) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {193}let v_649: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_637)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then dhexp(2-proj-2-tuple(v_643),v_640) else fail-any) else fail-any)) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_648)) then cipherstatepack(2-proj-3-tuple(v_648),minnonce) else fail-any),1-proj-3-tuple(v_648),3-proj-3-tuple(v_644)) else fail-any) else fail-any) else fail-any)) in
        {194}let v_650: bitstring = catch-fail(symmetricstateunpack(v_649)) in
        {195}let v_651: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_650))) in
        {196}let v_652: aead = catch-fail(decrypt(1-proj-2-tuple(v_651),2-proj-2-tuple(v_651),3-proj-3-tuple(v_650),2-proj-3-tuple(v_638))) in
        {197}let v_653: bitstring = catch-fail(aeadunpack(v_652)) in
        {198}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_650))) in
        {199}let v_655: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_651))) && success?(1-proj-3-tuple(v_650))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then cipherstatepack(1-proj-2-tuple(v_654),increment_nonce(2-proj-2-tuple(v_651))) else fail-any) else fail-any)) in
        {200}let v_656: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_638)) && (success?(3-proj-3-tuple(v_650)) && success?(1-proj-3-tuple(v_650)))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then (if not-caught-fail(v_652) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if not-caught-fail(v_655) then (v_655,3-proj-3-tuple(v_653),1-proj-3-tuple(v_653)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {201}let v_657: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_650),3-proj-3-tuple(v_650)))) in
        {202}let v_658: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_638)) && success?(symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_650),3-proj-3-tuple(v_650)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),2-proj-3-tuple(v_638))) else fail-any) else fail-any)) in
        {203}let v_659: bitstring = catch-fail((if success?(2-proj-3-tuple(v_638)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {204}let v_660: key = catch-fail(2-proj-3-tuple(v_659)) in
        {205}let v_661: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_659))) in
        {206}let v_662: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_661))) in
        {207}let v_663: aead = catch-fail(decrypt(1-proj-2-tuple(v_662),2-proj-2-tuple(v_662),3-proj-3-tuple(v_661),3-proj-3-tuple(v_638))) in
        {208}let v_664: bitstring = catch-fail(aeadunpack(v_663)) in
        {209}let v_665: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_661))) in
        {210}let v_666: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_662))) && success?(1-proj-3-tuple(v_661))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-2-tuple(v_665))))) then cipherstatepack(1-proj-2-tuple(v_665),increment_nonce(2-proj-2-tuple(v_662))) else fail-any) else fail-any)) in
        {211}let v_667: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_638)) && (success?(3-proj-3-tuple(v_661)) && success?(1-proj-3-tuple(v_661)))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then (if not-caught-fail(v_663) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then (if not-caught-fail(v_666) then (v_666,3-proj-3-tuple(v_664),1-proj-3-tuple(v_664)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_668: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)))) in
        {213}let v_669: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_638)) && success?(symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then symmetricstatepack(1-proj-3-tuple(v_668),2-proj-3-tuple(v_668),hash(3-proj-3-tuple(v_668),3-proj-3-tuple(v_638))) else fail-any) else fail-any)) in
        {214}let v_670: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_638)) && success?(1-proj-3-tuple(v_659))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if not-caught-fail(v_669) then (v_669,2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {215}let v_671: key = catch-fail(dhexp(key_s(charlie),g)) in
        {216}let v_672: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_670),2-proj-7-tuple(v_637),3-proj-7-tuple(v_637),v_660,v_640,6-proj-7-tuple(v_637),7-proj-7-tuple(v_637))) in
        {217}let (hs_673: handshakestate,re_674: key,plaintext_b_675: bitstring,valid_676: bool) = (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-7-tuple(v_637))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then (if not-caught-fail(v_642) then (if not-caught-fail(v_649) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if not-caught-fail(v_660) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if ((3-proj-3-tuple(v_659) && 3-proj-3-tuple(v_670)) && (v_660 = getpublickey((if not-caught-fail(v_671) then keypairpack(v_671,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_672) then (v_672,getpublickey(3-proj-7-tuple(v_637)),2-proj-3-tuple(v_670),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {218}event RecvMsg(alice,charlie,stage_b,plaintext_b_675,valid_676);
        {219}insert statestore(alice,charlie,statepack_c(hs_673))
    ) | (
        {260}get statestore(=alice,=charlie,statepack_c(hs_677: handshakestate)) in
        {221}let v_678: bitstring = catch-fail(handshakestateunpack(hs_677)) in
        {222}let v_679: bitstring = catch-fail((empty,empty,empty)) in
        {223}let v_680: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_678))) in
        {224}let v_681: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_678))) in
        {225}let v_682: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_681),(if (success?(5-proj-7-tuple(v_678)) && success?(2-proj-7-tuple(v_678))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),5-proj-7-tuple(v_678)) else fail-any) else fail-any))) in
        {226}let v_683: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_681),(if (success?(5-proj-7-tuple(v_678)) && success?(2-proj-7-tuple(v_678))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),5-proj-7-tuple(v_678)) else fail-any) else fail-any))) in
        {227}let v_684: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_681),(if (success?(5-proj-7-tuple(v_678)) && success?(2-proj-7-tuple(v_678))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),5-proj-7-tuple(v_678)) else fail-any) else fail-any))) in
        {228}let v_685: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_678)) && success?(2-proj-7-tuple(v_678))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),5-proj-7-tuple(v_678)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_681))) then (if not-caught-fail(v_682) then (if not-caught-fail(v_683) then (if not-caught-fail(v_684) then (v_682,v_683,v_684) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {229}let v_686: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_678)) && success?(2-proj-7-tuple(v_678))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),5-proj-7-tuple(v_678)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_678))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_685)) then cipherstatepack(2-proj-3-tuple(v_685),minnonce) else fail-any),1-proj-3-tuple(v_685),3-proj-3-tuple(v_681)) else fail-any) else fail-any) else fail-any)) in
        {230}let v_687: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_678))) in
        {231}let v_688: bitstring = catch-fail(symmetricstateunpack(v_686)) in
        {232}let v_689: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_688),(if (success?(4-proj-7-tuple(v_678)) && success?(3-proj-7-tuple(v_678))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_678)) else fail-any) else fail-any))) in
        {233}let v_690: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_688),(if (success?(4-proj-7-tuple(v_678)) && success?(3-proj-7-tuple(v_678))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_678)) else fail-any) else fail-any))) in
        {234}let v_691: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_688),(if (success?(4-proj-7-tuple(v_678)) && success?(3-proj-7-tuple(v_678))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_678)) else fail-any) else fail-any))) in
        {235}let v_692: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_678)) && success?(3-proj-7-tuple(v_678))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_678)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_688))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (v_689,v_690,v_691) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_693: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_678)) && success?(3-proj-7-tuple(v_678))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_678)) else fail-any) else fail-any)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_692)) then cipherstatepack(2-proj-3-tuple(v_692),minnonce) else fail-any),1-proj-3-tuple(v_692),3-proj-3-tuple(v_688)) else fail-any) else fail-any) else fail-any)) in
        {237}let v_694: bitstring = catch-fail(symmetricstateunpack(v_693)) in
        {238}let v_695: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {239}let v_696: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_695),2-proj-2-tuple(v_695),3-proj-3-tuple(v_694),msg_c(alice,charlie))) in
        {240}let v_697: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {241}let v_698: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_695))) && success?(1-proj-3-tuple(v_694))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then cipherstatepack(1-proj-2-tuple(v_697),increment_nonce(2-proj-2-tuple(v_695))) else fail-any) else fail-any)) in
        {242}let v_699: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_694)) && success?(1-proj-3-tuple(v_694))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_698) then (v_698,v_696) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_700: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_699),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) in
        {244}let v_701: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_699)) && success?(symmetricstatepack(1-proj-2-tuple(v_699),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_700),hash(3-proj-3-tuple(v_700),2-proj-2-tuple(v_699))) else fail-any) else fail-any)) in
        {245}let v_702: bitstring = catch-fail((if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then (if not-caught-fail(v_701) then (v_701,2-proj-2-tuple(v_699)) else fail-any) else fail-any) else fail-any)) in
        {246}let v_703: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_702),2-proj-7-tuple(v_678),3-proj-7-tuple(v_678),4-proj-7-tuple(v_678),5-proj-7-tuple(v_678),6-proj-7-tuple(v_678),7-proj-7-tuple(v_678))) in
        {247}let v_704: bitstring = catch-fail(concat3(1-proj-3-tuple(v_679),2-proj-3-tuple(v_679),2-proj-2-tuple(v_702))) in
        {248}let v_705: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_702))) in
        {249}let v_706: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_705),zero)) in
        {250}let v_707: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_705),zero)) in
        {251}let v_708: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_705),zero)) in
        {252}let v_709: bitstring = catch-fail((if success?(2-proj-3-tuple(v_705)) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (if not-caught-fail(v_708) then (v_706,v_707,v_708) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_710: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_709)) then cipherstatepack(1-proj-3-tuple(v_709),minnonce) else fail-any)) in
        {254}let v_711: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_709)) then cipherstatepack(2-proj-3-tuple(v_709),minnonce) else fail-any)) in
        {255}let v_712: bitstring = catch-fail((if success?(1-proj-2-tuple(v_702)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (1-proj-2-tuple(v_702),v_710,v_711) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let (hs_713: handshakestate,re_714: key,message_c_715: bitstring,cs1_716: cipherstate,cs2_717: cipherstate) = (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-7-tuple(v_678))))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if not-caught-fail(v_686) then (if not-caught-fail(v_693) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-2-tuple(v_702))))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (v_703,5-proj-7-tuple(v_678),v_704,2-proj-3-tuple(v_712),3-proj-3-tuple(v_712)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {257}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {258}insert statestore(alice,charlie,statepack_d(hs_713));
        {259}out(pub, message_c_715)
    ) | (
        {261}event LeakS(phase0,alice);
        {262}out(pub, key_s(alice))
    ) | (
        {263}phase 1;
        {264}event LeakS(phase1,alice);
        {265}out(pub, key_s(alice))
    )
) | (
    {266}let s_718: keypair = keypairpack(empty,empty) in
    {267}out(pub, getpublickey(s_718));
    (
        {268}let e_719: keypair = keypairpack(empty,empty) in
        {269}let rs_720: key = empty in
        {270}let re_721: key = empty in
        {271}let v_722: bitstring = catch-fail(hash(somename,empty)) in
        {272}let v_723: key = catch-fail(v_722) in
        {273}let v_724: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {274}let v_725: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then symmetricstatepack(v_724,v_723,v_722) else fail-any) else fail-any) else fail-any))) in
        {275}let v_726: symmetricstate = catch-fail((if success?((if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then symmetricstatepack(v_724,v_723,v_722) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then symmetricstatepack(1-proj-3-tuple(v_725),2-proj-3-tuple(v_725),hash(3-proj-3-tuple(v_725),empty)) else fail-any) else fail-any)) in
        {276}let hs_727: handshakestate = (if not-caught-fail(v_726) then handshakestatepack(v_726,s_718,e_719,rs_720,re_721,empty,false) else fail-any) in
        {277}insert statestore(bob,alice,statepack_a(hs_727))
    ) | (
        {311}get statestore(=bob,=alice,statepack_a(hs_728: handshakestate)) in
        {278}in(pub, message_a_729: bitstring);
        {279}let v_730: bitstring = catch-fail(handshakestateunpack(hs_728)) in
        {280}let v_731: bitstring = catch-fail(deconcat3(message_a_729)) in
        {281}let v_732: bool = catch-fail(true) in
        {282}let v_733: key = catch-fail(1-proj-3-tuple(v_731)) in
        {283}let v_734: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_730))) in
        {284}let v_735: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_730)) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),v_733)) else fail-any) else fail-any)) in
        {285}let v_736: bitstring = catch-fail(symmetricstateunpack(v_735)) in
        {286}let v_737: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_736))) in
        {287}let v_738: aead = catch-fail(decrypt(1-proj-2-tuple(v_737),2-proj-2-tuple(v_737),3-proj-3-tuple(v_736),2-proj-3-tuple(v_731))) in
        {288}let v_739: bitstring = catch-fail(aeadunpack(v_738)) in
        {289}let v_740: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_736))) in
        {290}let v_741: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_737))) && success?(1-proj-3-tuple(v_736))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then cipherstatepack(1-proj-2-tuple(v_740),increment_nonce(2-proj-2-tuple(v_737))) else fail-any) else fail-any)) in
        {291}let v_742: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_731)) && (success?(3-proj-3-tuple(v_736)) && success?(1-proj-3-tuple(v_736)))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then (if not-caught-fail(v_738) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if not-caught-fail(v_741) then (v_741,3-proj-3-tuple(v_739),1-proj-3-tuple(v_739)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {292}let v_743: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_742),2-proj-3-tuple(v_736),3-proj-3-tuple(v_736)))) in
        {293}let v_744: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_731)) && success?(symmetricstatepack(1-proj-3-tuple(v_742),2-proj-3-tuple(v_736),3-proj-3-tuple(v_736)))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then symmetricstatepack(1-proj-3-tuple(v_743),2-proj-3-tuple(v_743),hash(3-proj-3-tuple(v_743),2-proj-3-tuple(v_731))) else fail-any) else fail-any)) in
        {294}let v_745: bitstring = catch-fail((if success?(2-proj-3-tuple(v_731)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if not-caught-fail(v_744) then (v_744,2-proj-3-tuple(v_742),3-proj-3-tuple(v_742)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_746: key = catch-fail(2-proj-3-tuple(v_745)) in
        {296}let v_747: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_745))) in
        {297}let v_748: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_747))) in
        {298}let v_749: aead = catch-fail(decrypt(1-proj-2-tuple(v_748),2-proj-2-tuple(v_748),3-proj-3-tuple(v_747),3-proj-3-tuple(v_731))) in
        {299}let v_750: bitstring = catch-fail(aeadunpack(v_749)) in
        {300}let v_751: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_747))) in
        {301}let v_752: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_748))) && success?(1-proj-3-tuple(v_747))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then cipherstatepack(1-proj-2-tuple(v_751),increment_nonce(2-proj-2-tuple(v_748))) else fail-any) else fail-any)) in
        {302}let v_753: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_731)) && (success?(3-proj-3-tuple(v_747)) && success?(1-proj-3-tuple(v_747)))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then (if not-caught-fail(v_749) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if not-caught-fail(v_752) then (v_752,3-proj-3-tuple(v_750),1-proj-3-tuple(v_750)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_754: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_753),2-proj-3-tuple(v_747),3-proj-3-tuple(v_747)))) in
        {304}let v_755: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_731)) && success?(symmetricstatepack(1-proj-3-tuple(v_753),2-proj-3-tuple(v_747),3-proj-3-tuple(v_747)))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then symmetricstatepack(1-proj-3-tuple(v_754),2-proj-3-tuple(v_754),hash(3-proj-3-tuple(v_754),3-proj-3-tuple(v_731))) else fail-any) else fail-any)) in
        {305}let v_756: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_731)) && success?(1-proj-3-tuple(v_745))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if not-caught-fail(v_755) then (v_755,2-proj-3-tuple(v_753),3-proj-3-tuple(v_753)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_757: key = catch-fail(dhexp(key_s(alice),g)) in
        {307}let v_758: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_756),2-proj-7-tuple(v_730),3-proj-7-tuple(v_730),v_746,v_733,6-proj-7-tuple(v_730),7-proj-7-tuple(v_730))) in
        {308}let (hs_759: handshakestate,re_760: key,plaintext_a: bitstring,valid_761: bool) = (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-7-tuple(v_730))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_735) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (if not-caught-fail(v_746) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if ((3-proj-3-tuple(v_745) && 3-proj-3-tuple(v_756)) && (v_746 = getpublickey((if not-caught-fail(v_757) then keypairpack(v_757,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_758) then (v_758,getpublickey(3-proj-7-tuple(v_730)),2-proj-3-tuple(v_756),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {309}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_761);
        {310}insert statestore(bob,alice,statepack_b(hs_759))
    ) | (
        {352}get statestore(=bob,=alice,statepack_b(hs_762: handshakestate)) in
        {312}let v_763: bitstring = catch-fail(handshakestateunpack(hs_762)) in
        {313}let v_764: bitstring = catch-fail((empty,empty,empty)) in
        {314}let v_765: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {315}let v_766: keypair = catch-fail((if not-caught-fail(v_765) then keypairpack(v_765,key_e(bob,alice)) else fail-any)) in
        {316}let v_767: bitstring = catch-fail(getpublickey(v_766)) in
        {317}let v_768: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_763))) in
        {318}let v_769: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_763)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then symmetricstatepack(1-proj-3-tuple(v_768),2-proj-3-tuple(v_768),hash(3-proj-3-tuple(v_768),v_767)) else fail-any) else fail-any)) in
        {319}let v_770: bitstring = catch-fail(keypairunpack(v_766)) in
        {320}let v_771: bitstring = catch-fail(symmetricstateunpack(v_769)) in
        {321}let v_772: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_771),(if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any))) in
        {322}let v_773: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_771),(if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any))) in
        {323}let v_774: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_771),(if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any))) in
        {324}let v_775: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_771))) then (if not-caught-fail(v_772) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (v_772,v_773,v_774) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {325}let v_776: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_775)) then cipherstatepack(2-proj-3-tuple(v_775),minnonce) else fail-any),1-proj-3-tuple(v_775),3-proj-3-tuple(v_771)) else fail-any) else fail-any) else fail-any)) in
        {326}let v_777: key = catch-fail(dhexp(key_s(bob),g)) in
        {327}let v_778: keypair = catch-fail((if not-caught-fail(v_777) then keypairpack(v_777,key_s(bob)) else fail-any)) in
        {328}let v_779: bitstring = catch-fail(symmetricstateunpack(v_776)) in
        {329}let v_780: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_779))) in
        {330}let v_781: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_780),2-proj-2-tuple(v_780),3-proj-3-tuple(v_779),getpublickey(v_778))) in
        {331}let v_782: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_779))) in
        {332}let v_783: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_780))) && success?(1-proj-3-tuple(v_779))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then cipherstatepack(1-proj-2-tuple(v_782),increment_nonce(2-proj-2-tuple(v_780))) else fail-any) else fail-any)) in
        {333}let v_784: bitstring = catch-fail((if (success?(getpublickey(v_778)) && (success?(3-proj-3-tuple(v_779)) && success?(1-proj-3-tuple(v_779)))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then (if not-caught-fail(v_781) then (if not-caught-fail(v_783) then (v_783,v_781) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {334}let v_785: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_784),2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)))) in
        {335}let v_786: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_784)) && success?(symmetricstatepack(1-proj-2-tuple(v_784),2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then symmetricstatepack(1-proj-3-tuple(v_785),2-proj-3-tuple(v_785),hash(3-proj-3-tuple(v_785),2-proj-2-tuple(v_784))) else fail-any) else fail-any)) in
        {336}let v_787: bitstring = catch-fail((if success?(getpublickey(v_778)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then (if not-caught-fail(v_786) then (v_786,2-proj-2-tuple(v_784)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {337}let v_788: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_787))) in
        {338}let v_789: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_788))) in
        {339}let v_790: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_789),2-proj-2-tuple(v_789),3-proj-3-tuple(v_788),msg_b(bob,alice))) in
        {340}let v_791: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_788))) in
        {341}let v_792: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_789))) && success?(1-proj-3-tuple(v_788))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-2-tuple(v_791))))) then cipherstatepack(1-proj-2-tuple(v_791),increment_nonce(2-proj-2-tuple(v_789))) else fail-any) else fail-any)) in
        {342}let v_793: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_788)) && success?(1-proj-3-tuple(v_788))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then (if not-caught-fail(v_790) then (if not-caught-fail(v_792) then (v_792,v_790) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {343}let v_794: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_793),2-proj-3-tuple(v_788),3-proj-3-tuple(v_788)))) in
        {344}let v_795: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_793)) && success?(symmetricstatepack(1-proj-2-tuple(v_793),2-proj-3-tuple(v_788),3-proj-3-tuple(v_788)))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then symmetricstatepack(1-proj-3-tuple(v_794),2-proj-3-tuple(v_794),hash(3-proj-3-tuple(v_794),2-proj-2-tuple(v_793))) else fail-any) else fail-any)) in
        {345}let v_796: bitstring = catch-fail((if success?(1-proj-2-tuple(v_787)) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-2-tuple(v_793))))) then (if not-caught-fail(v_795) then (v_795,2-proj-2-tuple(v_793)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {346}let v_797: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_796),v_778,v_766,4-proj-7-tuple(v_763),5-proj-7-tuple(v_763),6-proj-7-tuple(v_763),7-proj-7-tuple(v_763))) in
        {347}let v_798: bitstring = catch-fail(concat3(v_767,2-proj-2-tuple(v_787),2-proj-2-tuple(v_796))) in
        {348}let (hs_799: handshakestate,re_800: key,message_b_801: bitstring) = (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-7-tuple(v_763))))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (if not-caught-fail(v_769) then (if not-caught-fail(v_776) then (if not-caught-fail(v_778) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (v_797,5-proj-7-tuple(v_763),v_798) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {349}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {350}insert statestore(bob,alice,statepack_c(hs_799));
        {351}out(pub, message_b_801)
    ) | (
        {394}get statestore(=bob,=alice,statepack_c(hs_802: handshakestate)) in
        {353}in(pub, message_c_803: bitstring);
        {354}let v_804: bitstring = catch-fail(handshakestateunpack(hs_802)) in
        {355}let v_805: bitstring = catch-fail(deconcat3(message_c_803)) in
        {356}let v_806: bool = catch-fail(true) in
        {357}let v_807: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_804))) in
        {358}let v_808: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_804))) in
        {359}let v_809: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_808),(if (success?(4-proj-7-tuple(v_804)) && success?(3-proj-7-tuple(v_804))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),4-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {360}let v_810: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_808),(if (success?(4-proj-7-tuple(v_804)) && success?(3-proj-7-tuple(v_804))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),4-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {361}let v_811: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_808),(if (success?(4-proj-7-tuple(v_804)) && success?(3-proj-7-tuple(v_804))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),4-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {362}let v_812: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_804)) && success?(3-proj-7-tuple(v_804))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),4-proj-7-tuple(v_804)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_808))) then (if not-caught-fail(v_809) then (if not-caught-fail(v_810) then (if not-caught-fail(v_811) then (v_809,v_810,v_811) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {363}let v_813: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_804)) && success?(3-proj-7-tuple(v_804))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then dhexp(2-proj-2-tuple(v_807),4-proj-7-tuple(v_804)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_804))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_812)) then cipherstatepack(2-proj-3-tuple(v_812),minnonce) else fail-any),1-proj-3-tuple(v_812),3-proj-3-tuple(v_808)) else fail-any) else fail-any) else fail-any)) in
        {364}let v_814: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_804))) in
        {365}let v_815: bitstring = catch-fail(symmetricstateunpack(v_813)) in
        {366}let v_816: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_815),(if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {367}let v_817: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_815),(if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {368}let v_818: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_815),(if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {369}let v_819: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_804)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_815))) then (if not-caught-fail(v_816) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (v_816,v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {370}let v_820: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_804)) else fail-any) else fail-any)) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_819)) then cipherstatepack(2-proj-3-tuple(v_819),minnonce) else fail-any),1-proj-3-tuple(v_819),3-proj-3-tuple(v_815)) else fail-any) else fail-any) else fail-any)) in
        {371}let v_821: bitstring = catch-fail(symmetricstateunpack(v_820)) in
        {372}let v_822: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {373}let v_823: aead = catch-fail(decrypt(1-proj-2-tuple(v_822),2-proj-2-tuple(v_822),3-proj-3-tuple(v_821),3-proj-3-tuple(v_805))) in
        {374}let v_824: bitstring = catch-fail(aeadunpack(v_823)) in
        {375}let v_825: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {376}let v_826: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_822))) && success?(1-proj-3-tuple(v_821))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then cipherstatepack(1-proj-2-tuple(v_825),increment_nonce(2-proj-2-tuple(v_822))) else fail-any) else fail-any)) in
        {377}let v_827: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_805)) && (success?(3-proj-3-tuple(v_821)) && success?(1-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-2-tuple(v_822))))) then (if not-caught-fail(v_823) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if not-caught-fail(v_826) then (v_826,3-proj-3-tuple(v_824),1-proj-3-tuple(v_824)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {378}let v_828: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) in
        {379}let v_829: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_805)) && success?(symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_828),hash(3-proj-3-tuple(v_828),3-proj-3-tuple(v_805))) else fail-any) else fail-any)) in
        {380}let v_830: bitstring = catch-fail((if success?(3-proj-3-tuple(v_805)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_829) then (v_829,2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_831: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_830),2-proj-7-tuple(v_804),3-proj-7-tuple(v_804),4-proj-7-tuple(v_804),5-proj-7-tuple(v_804),6-proj-7-tuple(v_804),7-proj-7-tuple(v_804))) in
        {382}let v_832: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_830))) in
        {383}let v_833: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_832),zero)) in
        {384}let v_834: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_832),zero)) in
        {385}let v_835: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_832),zero)) in
        {386}let v_836: bitstring = catch-fail((if success?(2-proj-3-tuple(v_832)) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then (v_833,v_834,v_835) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_837: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_836)) then cipherstatepack(1-proj-3-tuple(v_836),minnonce) else fail-any)) in
        {388}let v_838: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_836)) then cipherstatepack(2-proj-3-tuple(v_836),minnonce) else fail-any)) in
        {389}let v_839: bitstring = catch-fail((if success?(1-proj-3-tuple(v_830)) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (1-proj-3-tuple(v_830),v_837,v_838) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let (hs_840: handshakestate,re_841: key,plaintext_c: bitstring,valid_842: bool,cs1_843: cipherstate,cs2_844: cipherstate) = (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-7-tuple(v_804))))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if not-caught-fail(v_806) then (if not-caught-fail(v_813) then (if not-caught-fail(v_820) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if (v_806 && 3-proj-3-tuple(v_830)) then (if not-caught-fail(v_831) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (v_831,getpublickey(3-proj-7-tuple(v_804)),2-proj-3-tuple(v_830),true,2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {391}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_842);
        {392}insert statestore(bob,alice,statepack_d(hs_840));
        {393}event RecvEnd(valid_842)
    ) | (
        {395}event LeakS(phase0,bob);
        {396}out(pub, key_s(bob))
    ) | (
        {397}phase 1;
        {398}event LeakS(phase1,bob);
        {399}out(pub, key_s(bob))
    )
) | (
    {400}let s_845: keypair = keypairpack(empty,empty) in
    {401}out(pub, getpublickey(s_845));
    (
        {402}let e_846: keypair = keypairpack(empty,empty) in
        {403}let rs_847: key = empty in
        {404}let re_848: key = empty in
        {405}let v_849: bitstring = catch-fail(hash(somename,empty)) in
        {406}let v_850: key = catch-fail(v_849) in
        {407}let v_851: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {408}let v_852: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (if not-caught-fail(v_851) then symmetricstatepack(v_851,v_850,v_849) else fail-any) else fail-any) else fail-any))) in
        {409}let v_853: symmetricstate = catch-fail((if success?((if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (if not-caught-fail(v_851) then symmetricstatepack(v_851,v_850,v_849) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then symmetricstatepack(1-proj-3-tuple(v_852),2-proj-3-tuple(v_852),hash(3-proj-3-tuple(v_852),empty)) else fail-any) else fail-any)) in
        {410}let hs_854: handshakestate = (if not-caught-fail(v_853) then handshakestatepack(v_853,s_845,e_846,rs_847,re_848,empty,false) else fail-any) in
        {411}insert statestore(bob,charlie,statepack_a(hs_854))
    ) | (
        {445}get statestore(=bob,=charlie,statepack_a(hs_855: handshakestate)) in
        {412}in(pub, message_a_856: bitstring);
        {413}let v_857: bitstring = catch-fail(handshakestateunpack(hs_855)) in
        {414}let v_858: bitstring = catch-fail(deconcat3(message_a_856)) in
        {415}let v_859: bool = catch-fail(true) in
        {416}let v_860: key = catch-fail(1-proj-3-tuple(v_858)) in
        {417}let v_861: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_857))) in
        {418}let v_862: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_857)) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then symmetricstatepack(1-proj-3-tuple(v_861),2-proj-3-tuple(v_861),hash(3-proj-3-tuple(v_861),v_860)) else fail-any) else fail-any)) in
        {419}let v_863: bitstring = catch-fail(symmetricstateunpack(v_862)) in
        {420}let v_864: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {421}let v_865: aead = catch-fail(decrypt(1-proj-2-tuple(v_864),2-proj-2-tuple(v_864),3-proj-3-tuple(v_863),2-proj-3-tuple(v_858))) in
        {422}let v_866: bitstring = catch-fail(aeadunpack(v_865)) in
        {423}let v_867: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {424}let v_868: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_864))) && success?(1-proj-3-tuple(v_863))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then cipherstatepack(1-proj-2-tuple(v_867),increment_nonce(2-proj-2-tuple(v_864))) else fail-any) else fail-any)) in
        {425}let v_869: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_858)) && (success?(3-proj-3-tuple(v_863)) && success?(1-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-2-tuple(v_864))))) then (if not-caught-fail(v_865) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then (if not-caught-fail(v_868) then (v_868,3-proj-3-tuple(v_866),1-proj-3-tuple(v_866)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {426}let v_870: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) in
        {427}let v_871: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_858)) && success?(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_870),hash(3-proj-3-tuple(v_870),2-proj-3-tuple(v_858))) else fail-any) else fail-any)) in
        {428}let v_872: bitstring = catch-fail((if success?(2-proj-3-tuple(v_858)) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then (if not-caught-fail(v_871) then (v_871,2-proj-3-tuple(v_869),3-proj-3-tuple(v_869)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {429}let v_873: key = catch-fail(2-proj-3-tuple(v_872)) in
        {430}let v_874: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_872))) in
        {431}let v_875: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {432}let v_876: aead = catch-fail(decrypt(1-proj-2-tuple(v_875),2-proj-2-tuple(v_875),3-proj-3-tuple(v_874),3-proj-3-tuple(v_858))) in
        {433}let v_877: bitstring = catch-fail(aeadunpack(v_876)) in
        {434}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {435}let v_879: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_875))) && success?(1-proj-3-tuple(v_874))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then cipherstatepack(1-proj-2-tuple(v_878),increment_nonce(2-proj-2-tuple(v_875))) else fail-any) else fail-any)) in
        {436}let v_880: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_858)) && (success?(3-proj-3-tuple(v_874)) && success?(1-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-2-tuple(v_875))))) then (if not-caught-fail(v_876) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if not-caught-fail(v_879) then (v_879,3-proj-3-tuple(v_877),1-proj-3-tuple(v_877)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {437}let v_881: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) in
        {438}let v_882: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_858)) && success?(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack(1-proj-3-tuple(v_881),2-proj-3-tuple(v_881),hash(3-proj-3-tuple(v_881),3-proj-3-tuple(v_858))) else fail-any) else fail-any)) in
        {439}let v_883: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_858)) && success?(1-proj-3-tuple(v_872))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (v_882,2-proj-3-tuple(v_880),3-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {440}let v_884: key = catch-fail(dhexp(key_s(charlie),g)) in
        {441}let v_885: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_883),2-proj-7-tuple(v_857),3-proj-7-tuple(v_857),v_873,v_860,6-proj-7-tuple(v_857),7-proj-7-tuple(v_857))) in
        {442}let (hs_886: handshakestate,re_887: key,plaintext_a_888: bitstring,valid_889: bool) = (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-7-tuple(v_857))))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then (if not-caught-fail(v_862) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then (if not-caught-fail(v_873) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if ((3-proj-3-tuple(v_872) && 3-proj-3-tuple(v_883)) && (v_873 = getpublickey((if not-caught-fail(v_884) then keypairpack(v_884,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_885) then (v_885,getpublickey(3-proj-7-tuple(v_857)),2-proj-3-tuple(v_883),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {443}event RecvMsg(bob,charlie,stage_a,plaintext_a_888,valid_889);
        {444}insert statestore(bob,charlie,statepack_b(hs_886))
    ) | (
        {486}get statestore(=bob,=charlie,statepack_b(hs_890: handshakestate)) in
        {446}let v_891: bitstring = catch-fail(handshakestateunpack(hs_890)) in
        {447}let v_892: bitstring = catch-fail((empty,empty,empty)) in
        {448}let v_893: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {449}let v_894: keypair = catch-fail((if not-caught-fail(v_893) then keypairpack(v_893,key_e(bob,charlie)) else fail-any)) in
        {450}let v_895: bitstring = catch-fail(getpublickey(v_894)) in
        {451}let v_896: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_891))) in
        {452}let v_897: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_891)) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then symmetricstatepack(1-proj-3-tuple(v_896),2-proj-3-tuple(v_896),hash(3-proj-3-tuple(v_896),v_895)) else fail-any) else fail-any)) in
        {453}let v_898: bitstring = catch-fail(keypairunpack(v_894)) in
        {454}let v_899: bitstring = catch-fail(symmetricstateunpack(v_897)) in
        {455}let v_900: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_899),(if success?(5-proj-7-tuple(v_891)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_891)) else fail-any) else fail-any))) in
        {456}let v_901: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_899),(if success?(5-proj-7-tuple(v_891)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_891)) else fail-any) else fail-any))) in
        {457}let v_902: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_899),(if success?(5-proj-7-tuple(v_891)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_891)) else fail-any) else fail-any))) in
        {458}let v_903: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_891)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_891)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_899))) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (if not-caught-fail(v_902) then (v_900,v_901,v_902) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_904: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_891)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then dhexp(2-proj-2-tuple(v_898),5-proj-7-tuple(v_891)) else fail-any) else fail-any)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_903)) then cipherstatepack(2-proj-3-tuple(v_903),minnonce) else fail-any),1-proj-3-tuple(v_903),3-proj-3-tuple(v_899)) else fail-any) else fail-any) else fail-any)) in
        {460}let v_905: key = catch-fail(dhexp(key_s(bob),g)) in
        {461}let v_906: keypair = catch-fail((if not-caught-fail(v_905) then keypairpack(v_905,key_s(bob)) else fail-any)) in
        {462}let v_907: bitstring = catch-fail(symmetricstateunpack(v_904)) in
        {463}let v_908: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_907))) in
        {464}let v_909: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_908),2-proj-2-tuple(v_908),3-proj-3-tuple(v_907),getpublickey(v_906))) in
        {465}let v_910: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_907))) in
        {466}let v_911: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_908))) && success?(1-proj-3-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then cipherstatepack(1-proj-2-tuple(v_910),increment_nonce(2-proj-2-tuple(v_908))) else fail-any) else fail-any)) in
        {467}let v_912: bitstring = catch-fail((if (success?(getpublickey(v_906)) && (success?(3-proj-3-tuple(v_907)) && success?(1-proj-3-tuple(v_907)))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-2-tuple(v_908))))) then (if not-caught-fail(v_909) then (if not-caught-fail(v_911) then (v_911,v_909) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {468}let v_913: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_912),2-proj-3-tuple(v_907),3-proj-3-tuple(v_907)))) in
        {469}let v_914: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_912)) && success?(symmetricstatepack(1-proj-2-tuple(v_912),2-proj-3-tuple(v_907),3-proj-3-tuple(v_907)))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then symmetricstatepack(1-proj-3-tuple(v_913),2-proj-3-tuple(v_913),hash(3-proj-3-tuple(v_913),2-proj-2-tuple(v_912))) else fail-any) else fail-any)) in
        {470}let v_915: bitstring = catch-fail((if success?(getpublickey(v_906)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-2-tuple(v_912))))) then (if not-caught-fail(v_914) then (v_914,2-proj-2-tuple(v_912)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {471}let v_916: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_915))) in
        {472}let v_917: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_916))) in
        {473}let v_918: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_917),2-proj-2-tuple(v_917),3-proj-3-tuple(v_916),msg_b(bob,charlie))) in
        {474}let v_919: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_916))) in
        {475}let v_920: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_917))) && success?(1-proj-3-tuple(v_916))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-2-tuple(v_919))))) then cipherstatepack(1-proj-2-tuple(v_919),increment_nonce(2-proj-2-tuple(v_917))) else fail-any) else fail-any)) in
        {476}let v_921: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_916)) && success?(1-proj-3-tuple(v_916))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then (if not-caught-fail(v_918) then (if not-caught-fail(v_920) then (v_920,v_918) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {477}let v_922: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_921),2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)))) in
        {478}let v_923: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_921)) && success?(symmetricstatepack(1-proj-2-tuple(v_921),2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then symmetricstatepack(1-proj-3-tuple(v_922),2-proj-3-tuple(v_922),hash(3-proj-3-tuple(v_922),2-proj-2-tuple(v_921))) else fail-any) else fail-any)) in
        {479}let v_924: bitstring = catch-fail((if success?(1-proj-2-tuple(v_915)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then (if not-caught-fail(v_923) then (v_923,2-proj-2-tuple(v_921)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {480}let v_925: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_924),v_906,v_894,4-proj-7-tuple(v_891),5-proj-7-tuple(v_891),6-proj-7-tuple(v_891),7-proj-7-tuple(v_891))) in
        {481}let v_926: bitstring = catch-fail(concat3(v_895,2-proj-2-tuple(v_915),2-proj-2-tuple(v_924))) in
        {482}let (hs_927: handshakestate,re_928: key,message_b_929: bitstring) = (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-7-tuple(v_891))))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if not-caught-fail(v_894) then (if not-caught-fail(v_895) then (if not-caught-fail(v_897) then (if not-caught-fail(v_904) then (if not-caught-fail(v_906) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-2-tuple(v_924))))) then (if not-caught-fail(v_925) then (if not-caught-fail(v_926) then (v_925,5-proj-7-tuple(v_891),v_926) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {483}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {484}insert statestore(bob,charlie,statepack_c(hs_927));
        {485}out(pub, message_b_929)
    ) | (
        {528}get statestore(=bob,=charlie,statepack_c(hs_930: handshakestate)) in
        {487}in(pub, message_c_931: bitstring);
        {488}let v_932: bitstring = catch-fail(handshakestateunpack(hs_930)) in
        {489}let v_933: bitstring = catch-fail(deconcat3(message_c_931)) in
        {490}let v_934: bool = catch-fail(true) in
        {491}let v_935: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_932))) in
        {492}let v_936: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_932))) in
        {493}let v_937: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_936),(if (success?(4-proj-7-tuple(v_932)) && success?(3-proj-7-tuple(v_932))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then dhexp(2-proj-2-tuple(v_935),4-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {494}let v_938: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_936),(if (success?(4-proj-7-tuple(v_932)) && success?(3-proj-7-tuple(v_932))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then dhexp(2-proj-2-tuple(v_935),4-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {495}let v_939: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_936),(if (success?(4-proj-7-tuple(v_932)) && success?(3-proj-7-tuple(v_932))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then dhexp(2-proj-2-tuple(v_935),4-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {496}let v_940: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_932)) && success?(3-proj-7-tuple(v_932))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then dhexp(2-proj-2-tuple(v_935),4-proj-7-tuple(v_932)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_936))) then (if not-caught-fail(v_937) then (if not-caught-fail(v_938) then (if not-caught-fail(v_939) then (v_937,v_938,v_939) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {497}let v_941: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_932)) && success?(3-proj-7-tuple(v_932))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then dhexp(2-proj-2-tuple(v_935),4-proj-7-tuple(v_932)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_932))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-3-tuple(v_940))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_940)) then cipherstatepack(2-proj-3-tuple(v_940),minnonce) else fail-any),1-proj-3-tuple(v_940),3-proj-3-tuple(v_936)) else fail-any) else fail-any) else fail-any)) in
        {498}let v_942: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_932))) in
        {499}let v_943: bitstring = catch-fail(symmetricstateunpack(v_941)) in
        {500}let v_944: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_943),(if (success?(5-proj-7-tuple(v_932)) && success?(2-proj-7-tuple(v_932))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),5-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {501}let v_945: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_943),(if (success?(5-proj-7-tuple(v_932)) && success?(2-proj-7-tuple(v_932))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),5-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {502}let v_946: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_943),(if (success?(5-proj-7-tuple(v_932)) && success?(2-proj-7-tuple(v_932))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),5-proj-7-tuple(v_932)) else fail-any) else fail-any))) in
        {503}let v_947: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_932)) && success?(2-proj-7-tuple(v_932))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),5-proj-7-tuple(v_932)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_943))) then (if not-caught-fail(v_944) then (if not-caught-fail(v_945) then (if not-caught-fail(v_946) then (v_944,v_945,v_946) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {504}let v_948: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_932)) && success?(2-proj-7-tuple(v_932))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then dhexp(2-proj-2-tuple(v_942),5-proj-7-tuple(v_932)) else fail-any) else fail-any)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-3-tuple(v_947))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_947)) then cipherstatepack(2-proj-3-tuple(v_947),minnonce) else fail-any),1-proj-3-tuple(v_947),3-proj-3-tuple(v_943)) else fail-any) else fail-any) else fail-any)) in
        {505}let v_949: bitstring = catch-fail(symmetricstateunpack(v_948)) in
        {506}let v_950: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_949))) in
        {507}let v_951: aead = catch-fail(decrypt(1-proj-2-tuple(v_950),2-proj-2-tuple(v_950),3-proj-3-tuple(v_949),3-proj-3-tuple(v_933))) in
        {508}let v_952: bitstring = catch-fail(aeadunpack(v_951)) in
        {509}let v_953: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_949))) in
        {510}let v_954: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_950))) && success?(1-proj-3-tuple(v_949))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-2-tuple(v_953))))) then cipherstatepack(1-proj-2-tuple(v_953),increment_nonce(2-proj-2-tuple(v_950))) else fail-any) else fail-any)) in
        {511}let v_955: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_933)) && (success?(3-proj-3-tuple(v_949)) && success?(1-proj-3-tuple(v_949)))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-2-tuple(v_950))))) then (if not-caught-fail(v_951) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if not-caught-fail(v_954) then (v_954,3-proj-3-tuple(v_952),1-proj-3-tuple(v_952)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_956: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_949),3-proj-3-tuple(v_949)))) in
        {513}let v_957: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_933)) && success?(symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_949),3-proj-3-tuple(v_949)))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then symmetricstatepack(1-proj-3-tuple(v_956),2-proj-3-tuple(v_956),hash(3-proj-3-tuple(v_956),3-proj-3-tuple(v_933))) else fail-any) else fail-any)) in
        {514}let v_958: bitstring = catch-fail((if success?(3-proj-3-tuple(v_933)) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if not-caught-fail(v_957) then (v_957,2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {515}let v_959: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_958),2-proj-7-tuple(v_932),3-proj-7-tuple(v_932),4-proj-7-tuple(v_932),5-proj-7-tuple(v_932),6-proj-7-tuple(v_932),7-proj-7-tuple(v_932))) in
        {516}let v_960: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_958))) in
        {517}let v_961: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_960),zero)) in
        {518}let v_962: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_960),zero)) in
        {519}let v_963: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_960),zero)) in
        {520}let v_964: bitstring = catch-fail((if success?(2-proj-3-tuple(v_960)) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (v_961,v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {521}let v_965: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_964)) then cipherstatepack(1-proj-3-tuple(v_964),minnonce) else fail-any)) in
        {522}let v_966: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_964)) then cipherstatepack(2-proj-3-tuple(v_964),minnonce) else fail-any)) in
        {523}let v_967: bitstring = catch-fail((if success?(1-proj-3-tuple(v_958)) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if not-caught-fail(v_965) then (if not-caught-fail(v_966) then (1-proj-3-tuple(v_958),v_965,v_966) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {524}let (hs_968: handshakestate,re_969: key,plaintext_c_970: bitstring,valid_971: bool,cs1_972: cipherstate,cs2_973: cipherstate) = (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-7-tuple(v_932))))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if not-caught-fail(v_934) then (if not-caught-fail(v_941) then (if not-caught-fail(v_948) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if (v_934 && 3-proj-3-tuple(v_958)) then (if not-caught-fail(v_959) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then (v_959,getpublickey(3-proj-7-tuple(v_932)),2-proj-3-tuple(v_958),true,2-proj-3-tuple(v_967),3-proj-3-tuple(v_967)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {525}event RecvMsg(bob,charlie,stage_c,plaintext_c_970,valid_971);
        {526}insert statestore(bob,charlie,statepack_d(hs_968));
        {527}event RecvEnd(valid_971)
    ) | (
        {529}event LeakS(phase0,bob);
        {530}out(pub, key_s(bob))
    ) | (
        {531}phase 1;
        {532}event LeakS(phase1,bob);
        {533}out(pub, key_s(bob))
    )
) | (
    {534}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 181 rules in the queue.
400 rules inserted. The rule base contains 391 rules. 20 rules in the queue.
600 rules inserted. The rule base contains 556 rules. 405 rules in the queue.
800 rules inserted. The rule base contains 729 rules. 211 rules in the queue.
1000 rules inserted. The rule base contains 904 rules. 101 rules in the queue.
1200 rules inserted. The rule base contains 1028 rules. 91 rules in the queue.
1400 rules inserted. The rule base contains 1119 rules. 80 rules in the queue.
1600 rules inserted. The rule base contains 1260 rules. 90 rules in the queue.
1800 rules inserted. The rule base contains 1389 rules. 103 rules in the queue.
2000 rules inserted. The rule base contains 1493 rules. 96 rules in the queue.
2200 rules inserted. The rule base contains 1619 rules. 110 rules in the queue.
2400 rules inserted. The rule base contains 1736 rules. 137 rules in the queue.
2600 rules inserted. The rule base contains 1892 rules. 139 rules in the queue.
2800 rules inserted. The rule base contains 2028 rules. 125 rules in the queue.
3000 rules inserted. The rule base contains 2138 rules. 84 rules in the queue.
3200 rules inserted. The rule base contains 2158 rules. 16 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {145}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {179}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {176}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {178}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {311}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {278}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {309}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {145}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {179}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {176}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {178}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {311}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {278}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {309}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {145}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {179}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {176}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {178}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {311}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {278}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {309}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {311}.
The message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) that may be sent on channel pub by 3 may be received at input {278}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {310}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 4 may be read at get {352}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {349}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {350}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {45}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {311}.
The message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) that may be sent on channel pub by 10 may be received at input {278}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {310}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 11 may be read at get {352}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {349}.
So the message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) may be sent on channel pub at output {351}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))).

13. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {88}.
The message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {48}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {87}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {128}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {125}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on channel pub at output {127}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {394}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob))) that may be sent on channel pub by 14 may be received at input {353}.
So event RecvEnd(true) may be executed at {393}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
