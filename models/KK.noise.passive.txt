File "KK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 274, character 7 - line 274, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 275, character 7 - line 275, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 275, character 36 - line 275, character 36:
Warning: identifier h rebound.
File "KK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 305, character 6 - line 305, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 306, character 6 - line 306, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 311, character 6 - line 311, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 312, character 6 - line 312, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 318, character 6 - line 318, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 319, character 6 - line 319, character 7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 320, character 6 - line 320, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 322, character 6 - line 322, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 323, character 6 - line 323, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 324, character 7 - line 324, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 324, character 26 - line 324, character 36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 325, character 6 - line 325, character 7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 332, character 6 - line 332, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 334, character 6 - line 334, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 336, character 6 - line 336, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 337, character 6 - line 337, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 338, character 7 - line 338, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 338, character 26 - line 338, character 36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 339, character 6 - line 339, character 7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 346, character 7 - line 346, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 346, character 26 - line 346, character 36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 347, character 6 - line 347, character 7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 354, character 7 - line 354, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 354, character 26 - line 354, character 36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 355, character 6 - line 355, character 7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 364, character 6 - line 364, character 7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 365, character 6 - line 365, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 367, character 6 - line 367, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 368, character 6 - line 368, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 369, character 7 - line 369, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 371, character 7 - line 371, character 8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 379, character 6 - line 379, character 7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 380, character 6 - line 380, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 382, character 6 - line 382, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 383, character 6 - line 383, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 384, character 7 - line 384, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 386, character 7 - line 386, character 8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 394, character 7 - line 394, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 396, character 7 - line 396, character 8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 404, character 7 - line 404, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 406, character 7 - line 406, character 8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 555, character 8 - line 555, character 9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 404, character 7 - line 404, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 406, character 7 - line 406, character 8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 547, character 8 - line 547, character 9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 346, character 7 - line 346, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 346, character 26 - line 346, character 36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 347, character 6 - line 347, character 7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 540, character 8 - line 540, character 9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 379, character 6 - line 379, character 7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 380, character 6 - line 380, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 382, character 6 - line 382, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 383, character 6 - line 383, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 384, character 7 - line 384, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 386, character 7 - line 386, character 8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 532, character 8 - line 532, character 9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 318, character 6 - line 318, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 319, character 6 - line 319, character 7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 320, character 6 - line 320, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 322, character 6 - line 322, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 323, character 6 - line 323, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 324, character 7 - line 324, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 324, character 26 - line 324, character 36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 325, character 6 - line 325, character 7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 305, character 6 - line 305, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 306, character 6 - line 306, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 605, character 8 - line 605, character 9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 354, character 7 - line 354, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 354, character 26 - line 354, character 36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 355, character 6 - line 355, character 7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 598, character 8 - line 598, character 9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 394, character 7 - line 394, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 396, character 7 - line 396, character 8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 590, character 8 - line 590, character 9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 332, character 6 - line 332, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 334, character 6 - line 334, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 336, character 6 - line 336, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 337, character 6 - line 337, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 338, character 7 - line 338, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 338, character 26 - line 338, character 36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 339, character 6 - line 339, character 7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 583, character 8 - line 583, character 9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 364, character 6 - line 364, character 7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 365, character 6 - line 365, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 367, character 6 - line 367, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 368, character 6 - line 368, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 369, character 7 - line 369, character 8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 371, character 7 - line 371, character 8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 311, character 6 - line 311, character 7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 312, character 6 - line 312, character 7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let v_564: key = catch-fail(dhexp(key_s(alice),g)) in
    {3}let s_565: keypair = (if not-caught-fail(v_564) then keypairpack(v_564,key_s(alice)) else fail-any) in
    {4}out(pub, getpublickey(s_565));
    (
        {5}let e_566: keypair = keypairpack(empty,empty) in
        {6}let v_567: key = catch-fail(dhexp(key_s(bob),g)) in
        {7}let rs_568: key = getpublickey((if not-caught-fail(v_567) then keypairpack(v_567,key_s(bob)) else fail-any)) in
        {8}let re_569: key = empty in
        {9}let v_570: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_571: key = catch-fail(v_570) in
        {11}let v_572: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_573: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then symmetricstatepack(v_572,v_571,v_570) else fail-any) else fail-any) else fail-any))) in
        {13}let v_574: symmetricstate = catch-fail((if success?((if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then symmetricstatepack(v_572,v_571,v_570) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),empty)) else fail-any) else fail-any)) in
        {14}let v_575: bitstring = catch-fail(symmetricstateunpack(v_574)) in
        {15}let v_576: symmetricstate = catch-fail((if success?(getpublickey(s_565)) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then symmetricstatepack(1-proj-3-tuple(v_575),2-proj-3-tuple(v_575),hash(3-proj-3-tuple(v_575),getpublickey(s_565))) else fail-any) else fail-any)) in
        {16}let v_577: bitstring = catch-fail(symmetricstateunpack(v_576)) in
        {17}let v_578: symmetricstate = catch-fail((if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_577),hash(3-proj-3-tuple(v_577),rs_568)) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_574) then (if not-caught-fail(v_576) then (if not-caught-fail(v_578) then handshakestatepack(v_578,s_565,e_566,rs_568,re_569,empty,true) else fail-any) else fail-any) else fail-any) in
        {19}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {56}get statestore(=alice,=bob,statepack_a(hs_579: handshakestate)) in
        {20}let v_580: bitstring = catch-fail(handshakestateunpack(hs_579)) in
        {21}let v_581: bitstring = catch-fail((empty,empty,empty)) in
        {22}let v_582: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {23}let v_583: keypair = catch-fail((if not-caught-fail(v_582) then keypairpack(v_582,key_e(alice,bob)) else fail-any)) in
        {24}let v_584: bitstring = catch-fail(getpublickey(v_583)) in
        {25}let v_585: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_580))) in
        {26}let v_586: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_580)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack(1-proj-3-tuple(v_585),2-proj-3-tuple(v_585),hash(3-proj-3-tuple(v_585),v_584)) else fail-any) else fail-any)) in
        {27}let v_587: bitstring = catch-fail(keypairunpack(v_583)) in
        {28}let v_588: bitstring = catch-fail(symmetricstateunpack(v_586)) in
        {29}let v_589: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_588),(if success?(4-proj-7-tuple(v_580)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),4-proj-7-tuple(v_580)) else fail-any) else fail-any))) in
        {30}let v_590: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_588),(if success?(4-proj-7-tuple(v_580)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),4-proj-7-tuple(v_580)) else fail-any) else fail-any))) in
        {31}let v_591: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_588),(if success?(4-proj-7-tuple(v_580)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),4-proj-7-tuple(v_580)) else fail-any) else fail-any))) in
        {32}let v_592: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_580)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),4-proj-7-tuple(v_580)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_588))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then (v_589,v_590,v_591) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {33}let v_593: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_580)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),4-proj-7-tuple(v_580)) else fail-any) else fail-any)) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_592)) then cipherstatepack(2-proj-3-tuple(v_592),minnonce) else fail-any),1-proj-3-tuple(v_592),3-proj-3-tuple(v_588)) else fail-any) else fail-any) else fail-any)) in
        {34}let v_594: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_580))) in
        {35}let v_595: bitstring = catch-fail(symmetricstateunpack(v_593)) in
        {36}let v_596: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_595),(if (success?(4-proj-7-tuple(v_580)) && success?(2-proj-7-tuple(v_580))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then dhexp(2-proj-2-tuple(v_594),4-proj-7-tuple(v_580)) else fail-any) else fail-any))) in
        {37}let v_597: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_595),(if (success?(4-proj-7-tuple(v_580)) && success?(2-proj-7-tuple(v_580))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then dhexp(2-proj-2-tuple(v_594),4-proj-7-tuple(v_580)) else fail-any) else fail-any))) in
        {38}let v_598: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_595),(if (success?(4-proj-7-tuple(v_580)) && success?(2-proj-7-tuple(v_580))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then dhexp(2-proj-2-tuple(v_594),4-proj-7-tuple(v_580)) else fail-any) else fail-any))) in
        {39}let v_599: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_580)) && success?(2-proj-7-tuple(v_580))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then dhexp(2-proj-2-tuple(v_594),4-proj-7-tuple(v_580)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_595))) then (if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then (v_596,v_597,v_598) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_600: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_580)) && success?(2-proj-7-tuple(v_580))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then dhexp(2-proj-2-tuple(v_594),4-proj-7-tuple(v_580)) else fail-any) else fail-any)) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_599)) then cipherstatepack(2-proj-3-tuple(v_599),minnonce) else fail-any),1-proj-3-tuple(v_599),3-proj-3-tuple(v_595)) else fail-any) else fail-any) else fail-any)) in
        {41}let v_601: bitstring = catch-fail(symmetricstateunpack(v_600)) in
        {42}let v_602: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {43}let v_603: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_602),2-proj-2-tuple(v_602),3-proj-3-tuple(v_601),msg_a(alice,bob))) in
        {44}let v_604: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {45}let v_605: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_602))) && success?(1-proj-3-tuple(v_601))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then cipherstatepack(1-proj-2-tuple(v_604),increment_nonce(2-proj-2-tuple(v_602))) else fail-any) else fail-any)) in
        {46}let v_606: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_601)) && success?(1-proj-3-tuple(v_601))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then (if not-caught-fail(v_603) then (if not-caught-fail(v_605) then (v_605,v_603) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {47}let v_607: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_606),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) in
        {48}let v_608: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_606)) && success?(symmetricstatepack(1-proj-2-tuple(v_606),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_607),hash(3-proj-3-tuple(v_607),2-proj-2-tuple(v_606))) else fail-any) else fail-any)) in
        {49}let v_609: bitstring = catch-fail((if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then (if not-caught-fail(v_608) then (v_608,2-proj-2-tuple(v_606)) else fail-any) else fail-any) else fail-any)) in
        {50}let v_610: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_609),2-proj-7-tuple(v_580),v_583,4-proj-7-tuple(v_580),5-proj-7-tuple(v_580),6-proj-7-tuple(v_580),7-proj-7-tuple(v_580))) in
        {51}let v_611: bitstring = catch-fail(concat3(v_584,2-proj-3-tuple(v_581),2-proj-2-tuple(v_609))) in
        {52}let (hs_612: handshakestate,re_613: key,message_a: bitstring) = (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-7-tuple(v_580))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (if not-caught-fail(v_586) then (if not-caught-fail(v_593) then (if not-caught-fail(v_600) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (v_610,5-proj-7-tuple(v_580),v_611) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {53}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {54}insert statestore(alice,bob,statepack_b(hs_612));
        {55}out(pub, message_a)
    ) | (
        {92}get statestore(=alice,=bob,statepack_b(hs_614: handshakestate)) in
        {57}in(pub, message_b: bitstring);
        {58}let v_615: bitstring = catch-fail(handshakestateunpack(hs_614)) in
        {59}let v_616: bitstring = catch-fail(deconcat3(message_b)) in
        {60}let v_617: bool = catch-fail(true) in
        {61}let v_618: key = catch-fail(1-proj-3-tuple(v_616)) in
        {62}let v_619: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_615))) in
        {63}let v_620: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_615)) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then symmetricstatepack(1-proj-3-tuple(v_619),2-proj-3-tuple(v_619),hash(3-proj-3-tuple(v_619),v_618)) else fail-any) else fail-any)) in
        {64}let v_621: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_615))) in
        {65}let v_622: bitstring = catch-fail(symmetricstateunpack(v_620)) in
        {66}let v_623: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_622),(if success?(3-proj-7-tuple(v_615)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_618) else fail-any) else fail-any))) in
        {67}let v_624: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_622),(if success?(3-proj-7-tuple(v_615)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_618) else fail-any) else fail-any))) in
        {68}let v_625: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_622),(if success?(3-proj-7-tuple(v_615)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_618) else fail-any) else fail-any))) in
        {69}let v_626: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_615)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_618) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_622))) then (if not-caught-fail(v_623) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (v_623,v_624,v_625) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_627: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_615)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then dhexp(2-proj-2-tuple(v_621),v_618) else fail-any) else fail-any)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_626)) then cipherstatepack(2-proj-3-tuple(v_626),minnonce) else fail-any),1-proj-3-tuple(v_626),3-proj-3-tuple(v_622)) else fail-any) else fail-any) else fail-any)) in
        {71}let v_628: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_615))) in
        {72}let v_629: bitstring = catch-fail(symmetricstateunpack(v_627)) in
        {73}let v_630: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_629),(if success?(2-proj-7-tuple(v_615)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_618) else fail-any) else fail-any))) in
        {74}let v_631: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_629),(if success?(2-proj-7-tuple(v_615)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_618) else fail-any) else fail-any))) in
        {75}let v_632: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_629),(if success?(2-proj-7-tuple(v_615)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_618) else fail-any) else fail-any))) in
        {76}let v_633: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_615)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_618) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_629))) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (v_630,v_631,v_632) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {77}let v_634: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_615)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_618) else fail-any) else fail-any)) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_633)) then cipherstatepack(2-proj-3-tuple(v_633),minnonce) else fail-any),1-proj-3-tuple(v_633),3-proj-3-tuple(v_629)) else fail-any) else fail-any) else fail-any)) in
        {78}let v_635: bitstring = catch-fail(symmetricstateunpack(v_634)) in
        {79}let v_636: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {80}let v_637: aead = catch-fail(decrypt(1-proj-2-tuple(v_636),2-proj-2-tuple(v_636),3-proj-3-tuple(v_635),3-proj-3-tuple(v_616))) in
        {81}let v_638: bitstring = catch-fail(aeadunpack(v_637)) in
        {82}let v_639: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {83}let v_640: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_636))) && success?(1-proj-3-tuple(v_635))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then cipherstatepack(1-proj-2-tuple(v_639),increment_nonce(2-proj-2-tuple(v_636))) else fail-any) else fail-any)) in
        {84}let v_641: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_616)) && (success?(3-proj-3-tuple(v_635)) && success?(1-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then (if not-caught-fail(v_637) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_640) then (v_640,3-proj-3-tuple(v_638),1-proj-3-tuple(v_638)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {85}let v_642: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) in
        {86}let v_643: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_616)) && success?(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then symmetricstatepack(1-proj-3-tuple(v_642),2-proj-3-tuple(v_642),hash(3-proj-3-tuple(v_642),3-proj-3-tuple(v_616))) else fail-any) else fail-any)) in
        {87}let v_644: bitstring = catch-fail((if success?(3-proj-3-tuple(v_616)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if not-caught-fail(v_643) then (v_643,2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {88}let v_645: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_644),2-proj-7-tuple(v_615),3-proj-7-tuple(v_615),4-proj-7-tuple(v_615),v_618,6-proj-7-tuple(v_615),7-proj-7-tuple(v_615))) in
        {89}let (hs_646: handshakestate,re_647: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-7-tuple(v_615))))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then (if not-caught-fail(v_620) then (if not-caught-fail(v_627) then (if not-caught-fail(v_634) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if (v_617 && 3-proj-3-tuple(v_644)) then (if not-caught-fail(v_645) then (v_645,getpublickey(3-proj-7-tuple(v_615)),2-proj-3-tuple(v_644),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {90}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {91}insert statestore(alice,bob,statepack_c(hs_646))
    ) | (
        {110}get statestore(=alice,=bob,statepack_c(hs_648: handshakestate)) in
        {93}let v_649: bitstring = catch-fail(handshakestateunpack(hs_648)) in
        {94}let v_650: bitstring = catch-fail((empty,empty,empty)) in
        {95}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_649))) in
        {96}let v_652: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {97}let v_653: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_652),2-proj-2-tuple(v_652),3-proj-3-tuple(v_651),msg_c(alice,bob))) in
        {98}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {99}let v_655: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_652))) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then cipherstatepack(1-proj-2-tuple(v_654),increment_nonce(2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {100}let v_656: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_651)) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_653) then (if not-caught-fail(v_655) then (v_655,v_653) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {101}let v_657: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) in
        {102}let v_658: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_656)) && success?(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),2-proj-2-tuple(v_656))) else fail-any) else fail-any)) in
        {103}let v_659: bitstring = catch-fail((if success?(1-proj-7-tuple(v_649)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-2-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,2-proj-2-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_660: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_659),2-proj-7-tuple(v_649),3-proj-7-tuple(v_649),4-proj-7-tuple(v_649),5-proj-7-tuple(v_649),6-proj-7-tuple(v_649),7-proj-7-tuple(v_649))) in
        {105}let v_661: bitstring = catch-fail(concat3(1-proj-3-tuple(v_650),2-proj-3-tuple(v_650),2-proj-2-tuple(v_659))) in
        {106}let (hs_662: handshakestate,re_663: key,message_c: bitstring) = (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-7-tuple(v_649))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_660) then (if not-caught-fail(v_661) then (v_660,5-proj-7-tuple(v_649),v_661) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {107}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {108}insert statestore(alice,bob,statepack_d(hs_662));
        {109}out(pub, message_c)
    ) | (
        {138}get statestore(=alice,=bob,statepack_d(hs_664: handshakestate)) in
        {111}in(pub, message_d: bitstring);
        {112}let v_665: bitstring = catch-fail(handshakestateunpack(hs_664)) in
        {113}let v_666: bitstring = catch-fail(deconcat3(message_d)) in
        {114}let v_667: bool = catch-fail(true) in
        {115}let v_668: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_665))) in
        {116}let v_669: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {117}let v_670: aead = catch-fail(decrypt(1-proj-2-tuple(v_669),2-proj-2-tuple(v_669),3-proj-3-tuple(v_668),3-proj-3-tuple(v_666))) in
        {118}let v_671: bitstring = catch-fail(aeadunpack(v_670)) in
        {119}let v_672: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {120}let v_673: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_669))) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-2-tuple(v_672))))) then cipherstatepack(1-proj-2-tuple(v_672),increment_nonce(2-proj-2-tuple(v_669))) else fail-any) else fail-any)) in
        {121}let v_674: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_666)) && (success?(3-proj-3-tuple(v_668)) && success?(1-proj-3-tuple(v_668)))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then (if not-caught-fail(v_670) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if not-caught-fail(v_673) then (v_673,3-proj-3-tuple(v_671),1-proj-3-tuple(v_671)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_675: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) in
        {123}let v_676: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_666)) && success?(symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_675),hash(3-proj-3-tuple(v_675),3-proj-3-tuple(v_666))) else fail-any) else fail-any)) in
        {124}let v_677: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_666)) && success?(1-proj-7-tuple(v_665))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if not-caught-fail(v_676) then (v_676,2-proj-3-tuple(v_674),3-proj-3-tuple(v_674)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {125}let v_678: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_677),2-proj-7-tuple(v_665),3-proj-7-tuple(v_665),4-proj-7-tuple(v_665),5-proj-7-tuple(v_665),6-proj-7-tuple(v_665),7-proj-7-tuple(v_665))) in
        {126}let v_679: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_677))) in
        {127}let v_680: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_679),zero)) in
        {128}let v_681: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_679),zero)) in
        {129}let v_682: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_679),zero)) in
        {130}let v_683: bitstring = catch-fail((if success?(2-proj-3-tuple(v_679)) then (if not-caught-fail(v_680) then (if not-caught-fail(v_681) then (if not-caught-fail(v_682) then (v_680,v_681,v_682) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {131}let v_684: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_683)) then cipherstatepack(1-proj-3-tuple(v_683),minnonce) else fail-any)) in
        {132}let v_685: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_683)) then cipherstatepack(2-proj-3-tuple(v_683),minnonce) else fail-any)) in
        {133}let v_686: bitstring = catch-fail((if success?(1-proj-3-tuple(v_677)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if not-caught-fail(v_684) then (if not-caught-fail(v_685) then (1-proj-3-tuple(v_677),v_684,v_685) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {134}let (hs_687: handshakestate,re_688: key,plaintext_d: bitstring,valid_689: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-7-tuple(v_665))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if not-caught-fail(v_667) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if (v_667 && 3-proj-3-tuple(v_677)) then (if not-caught-fail(v_678) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (v_678,getpublickey(3-proj-7-tuple(v_665)),2-proj-3-tuple(v_677),true,2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {135}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_689);
        {136}insert statestore(alice,bob,statepack_e(hs_687));
        {137}event RecvEnd(valid_689)
    ) | (
        {139}event LeakS(phase0,alice);
        {140}out(pub, key_s(alice))
    ) | (
        {141}phase 1;
        {142}event LeakS(phase1,alice);
        {143}out(pub, key_s(alice))
    )
) | (
    {144}let v_690: key = catch-fail(dhexp(key_s(alice),g)) in
    {145}let s_691: keypair = (if not-caught-fail(v_690) then keypairpack(v_690,key_s(alice)) else fail-any) in
    {146}out(pub, getpublickey(s_691));
    (
        {147}let e_692: keypair = keypairpack(empty,empty) in
        {148}let v_693: key = catch-fail(dhexp(key_s(charlie),g)) in
        {149}let rs_694: key = getpublickey((if not-caught-fail(v_693) then keypairpack(v_693,key_s(charlie)) else fail-any)) in
        {150}let re_695: key = empty in
        {151}let v_696: bitstring = catch-fail(hash(somename,empty)) in
        {152}let v_697: key = catch-fail(v_696) in
        {153}let v_698: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {154}let v_699: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then symmetricstatepack(v_698,v_697,v_696) else fail-any) else fail-any) else fail-any))) in
        {155}let v_700: symmetricstate = catch-fail((if success?((if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then symmetricstatepack(v_698,v_697,v_696) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_699),hash(3-proj-3-tuple(v_699),empty)) else fail-any) else fail-any)) in
        {156}let v_701: bitstring = catch-fail(symmetricstateunpack(v_700)) in
        {157}let v_702: symmetricstate = catch-fail((if success?(getpublickey(s_691)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_701),hash(3-proj-3-tuple(v_701),getpublickey(s_691))) else fail-any) else fail-any)) in
        {158}let v_703: bitstring = catch-fail(symmetricstateunpack(v_702)) in
        {159}let v_704: symmetricstate = catch-fail((if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then symmetricstatepack(1-proj-3-tuple(v_703),2-proj-3-tuple(v_703),hash(3-proj-3-tuple(v_703),rs_694)) else fail-any)) in
        {160}let hs_705: handshakestate = (if not-caught-fail(v_700) then (if not-caught-fail(v_702) then (if not-caught-fail(v_704) then handshakestatepack(v_704,s_691,e_692,rs_694,re_695,empty,true) else fail-any) else fail-any) else fail-any) in
        {161}insert statestore(alice,charlie,statepack_a(hs_705))
    ) | (
        {198}get statestore(=alice,=charlie,statepack_a(hs_706: handshakestate)) in
        {162}let v_707: bitstring = catch-fail(handshakestateunpack(hs_706)) in
        {163}let v_708: bitstring = catch-fail((empty,empty,empty)) in
        {164}let v_709: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {165}let v_710: keypair = catch-fail((if not-caught-fail(v_709) then keypairpack(v_709,key_e(alice,charlie)) else fail-any)) in
        {166}let v_711: bitstring = catch-fail(getpublickey(v_710)) in
        {167}let v_712: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_707))) in
        {168}let v_713: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_707)) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_712),hash(3-proj-3-tuple(v_712),v_711)) else fail-any) else fail-any)) in
        {169}let v_714: bitstring = catch-fail(keypairunpack(v_710)) in
        {170}let v_715: bitstring = catch-fail(symmetricstateunpack(v_713)) in
        {171}let v_716: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_715),(if success?(4-proj-7-tuple(v_707)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),4-proj-7-tuple(v_707)) else fail-any) else fail-any))) in
        {172}let v_717: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_715),(if success?(4-proj-7-tuple(v_707)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),4-proj-7-tuple(v_707)) else fail-any) else fail-any))) in
        {173}let v_718: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_715),(if success?(4-proj-7-tuple(v_707)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),4-proj-7-tuple(v_707)) else fail-any) else fail-any))) in
        {174}let v_719: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_707)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),4-proj-7-tuple(v_707)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_715))) then (if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (v_716,v_717,v_718) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {175}let v_720: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_707)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then dhexp(2-proj-2-tuple(v_714),4-proj-7-tuple(v_707)) else fail-any) else fail-any)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_719)) then cipherstatepack(2-proj-3-tuple(v_719),minnonce) else fail-any),1-proj-3-tuple(v_719),3-proj-3-tuple(v_715)) else fail-any) else fail-any) else fail-any)) in
        {176}let v_721: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_707))) in
        {177}let v_722: bitstring = catch-fail(symmetricstateunpack(v_720)) in
        {178}let v_723: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_722),(if (success?(4-proj-7-tuple(v_707)) && success?(2-proj-7-tuple(v_707))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_707)) else fail-any) else fail-any))) in
        {179}let v_724: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_722),(if (success?(4-proj-7-tuple(v_707)) && success?(2-proj-7-tuple(v_707))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_707)) else fail-any) else fail-any))) in
        {180}let v_725: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_722),(if (success?(4-proj-7-tuple(v_707)) && success?(2-proj-7-tuple(v_707))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_707)) else fail-any) else fail-any))) in
        {181}let v_726: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_707)) && success?(2-proj-7-tuple(v_707))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_707)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_722))) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then (if not-caught-fail(v_725) then (v_723,v_724,v_725) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {182}let v_727: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_707)) && success?(2-proj-7-tuple(v_707))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_707)) else fail-any) else fail-any)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_726)) then cipherstatepack(2-proj-3-tuple(v_726),minnonce) else fail-any),1-proj-3-tuple(v_726),3-proj-3-tuple(v_722)) else fail-any) else fail-any) else fail-any)) in
        {183}let v_728: bitstring = catch-fail(symmetricstateunpack(v_727)) in
        {184}let v_729: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_728))) in
        {185}let v_730: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_729),2-proj-2-tuple(v_729),3-proj-3-tuple(v_728),msg_a(alice,charlie))) in
        {186}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_728))) in
        {187}let v_732: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_729))) && success?(1-proj-3-tuple(v_728))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then cipherstatepack(1-proj-2-tuple(v_731),increment_nonce(2-proj-2-tuple(v_729))) else fail-any) else fail-any)) in
        {188}let v_733: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_728)) && success?(1-proj-3-tuple(v_728))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-2-tuple(v_729))))) then (if not-caught-fail(v_730) then (if not-caught-fail(v_732) then (v_732,v_730) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_734: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_733),2-proj-3-tuple(v_728),3-proj-3-tuple(v_728)))) in
        {190}let v_735: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_733)) && success?(symmetricstatepack(1-proj-2-tuple(v_733),2-proj-3-tuple(v_728),3-proj-3-tuple(v_728)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),2-proj-2-tuple(v_733))) else fail-any) else fail-any)) in
        {191}let v_736: bitstring = catch-fail((if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,2-proj-2-tuple(v_733)) else fail-any) else fail-any) else fail-any)) in
        {192}let v_737: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_736),2-proj-7-tuple(v_707),v_710,4-proj-7-tuple(v_707),5-proj-7-tuple(v_707),6-proj-7-tuple(v_707),7-proj-7-tuple(v_707))) in
        {193}let v_738: bitstring = catch-fail(concat3(v_711,2-proj-3-tuple(v_708),2-proj-2-tuple(v_736))) in
        {194}let (hs_739: handshakestate,re_740: key,message_a_741: bitstring) = (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-7-tuple(v_707))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (if not-caught-fail(v_713) then (if not-caught-fail(v_720) then (if not-caught-fail(v_727) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then (if not-caught-fail(v_737) then (if not-caught-fail(v_738) then (v_737,5-proj-7-tuple(v_707),v_738) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {195}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {196}insert statestore(alice,charlie,statepack_b(hs_739));
        {197}out(pub, message_a_741)
    ) | (
        {234}get statestore(=alice,=charlie,statepack_b(hs_742: handshakestate)) in
        {199}in(pub, message_b_743: bitstring);
        {200}let v_744: bitstring = catch-fail(handshakestateunpack(hs_742)) in
        {201}let v_745: bitstring = catch-fail(deconcat3(message_b_743)) in
        {202}let v_746: bool = catch-fail(true) in
        {203}let v_747: key = catch-fail(1-proj-3-tuple(v_745)) in
        {204}let v_748: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_744))) in
        {205}let v_749: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_744)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack(1-proj-3-tuple(v_748),2-proj-3-tuple(v_748),hash(3-proj-3-tuple(v_748),v_747)) else fail-any) else fail-any)) in
        {206}let v_750: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_744))) in
        {207}let v_751: bitstring = catch-fail(symmetricstateunpack(v_749)) in
        {208}let v_752: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_751),(if success?(3-proj-7-tuple(v_744)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),v_747) else fail-any) else fail-any))) in
        {209}let v_753: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_751),(if success?(3-proj-7-tuple(v_744)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),v_747) else fail-any) else fail-any))) in
        {210}let v_754: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_751),(if success?(3-proj-7-tuple(v_744)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),v_747) else fail-any) else fail-any))) in
        {211}let v_755: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_744)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),v_747) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_751))) then (if not-caught-fail(v_752) then (if not-caught-fail(v_753) then (if not-caught-fail(v_754) then (v_752,v_753,v_754) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_756: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_744)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),v_747) else fail-any) else fail-any)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_755)) then cipherstatepack(2-proj-3-tuple(v_755),minnonce) else fail-any),1-proj-3-tuple(v_755),3-proj-3-tuple(v_751)) else fail-any) else fail-any) else fail-any)) in
        {213}let v_757: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_744))) in
        {214}let v_758: bitstring = catch-fail(symmetricstateunpack(v_756)) in
        {215}let v_759: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_758),(if success?(2-proj-7-tuple(v_744)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),v_747) else fail-any) else fail-any))) in
        {216}let v_760: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_758),(if success?(2-proj-7-tuple(v_744)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),v_747) else fail-any) else fail-any))) in
        {217}let v_761: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_758),(if success?(2-proj-7-tuple(v_744)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),v_747) else fail-any) else fail-any))) in
        {218}let v_762: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_744)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),v_747) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_758))) then (if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (v_759,v_760,v_761) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_763: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_744)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),v_747) else fail-any) else fail-any)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_762)) then cipherstatepack(2-proj-3-tuple(v_762),minnonce) else fail-any),1-proj-3-tuple(v_762),3-proj-3-tuple(v_758)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_764: bitstring = catch-fail(symmetricstateunpack(v_763)) in
        {221}let v_765: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_764))) in
        {222}let v_766: aead = catch-fail(decrypt(1-proj-2-tuple(v_765),2-proj-2-tuple(v_765),3-proj-3-tuple(v_764),3-proj-3-tuple(v_745))) in
        {223}let v_767: bitstring = catch-fail(aeadunpack(v_766)) in
        {224}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_764))) in
        {225}let v_769: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_765))) && success?(1-proj-3-tuple(v_764))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then cipherstatepack(1-proj-2-tuple(v_768),increment_nonce(2-proj-2-tuple(v_765))) else fail-any) else fail-any)) in
        {226}let v_770: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_745)) && (success?(3-proj-3-tuple(v_764)) && success?(1-proj-3-tuple(v_764)))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-2-tuple(v_765))))) then (if not-caught-fail(v_766) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if not-caught-fail(v_769) then (v_769,3-proj-3-tuple(v_767),1-proj-3-tuple(v_767)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {227}let v_771: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_770),2-proj-3-tuple(v_764),3-proj-3-tuple(v_764)))) in
        {228}let v_772: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_745)) && success?(symmetricstatepack(1-proj-3-tuple(v_770),2-proj-3-tuple(v_764),3-proj-3-tuple(v_764)))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_771),hash(3-proj-3-tuple(v_771),3-proj-3-tuple(v_745))) else fail-any) else fail-any)) in
        {229}let v_773: bitstring = catch-fail((if success?(3-proj-3-tuple(v_745)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if not-caught-fail(v_772) then (v_772,2-proj-3-tuple(v_770),3-proj-3-tuple(v_770)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_774: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_773),2-proj-7-tuple(v_744),3-proj-7-tuple(v_744),4-proj-7-tuple(v_744),v_747,6-proj-7-tuple(v_744),7-proj-7-tuple(v_744))) in
        {231}let (hs_775: handshakestate,re_776: key,plaintext_b_777: bitstring,valid_778: bool) = (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-7-tuple(v_744))))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (if not-caught-fail(v_749) then (if not-caught-fail(v_756) then (if not-caught-fail(v_763) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (v_746 && 3-proj-3-tuple(v_773)) then (if not-caught-fail(v_774) then (v_774,getpublickey(3-proj-7-tuple(v_744)),2-proj-3-tuple(v_773),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {232}event RecvMsg(alice,charlie,stage_b,plaintext_b_777,valid_778);
        {233}insert statestore(alice,charlie,statepack_c(hs_775))
    ) | (
        {252}get statestore(=alice,=charlie,statepack_c(hs_779: handshakestate)) in
        {235}let v_780: bitstring = catch-fail(handshakestateunpack(hs_779)) in
        {236}let v_781: bitstring = catch-fail((empty,empty,empty)) in
        {237}let v_782: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_780))) in
        {238}let v_783: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_782))) in
        {239}let v_784: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_783),2-proj-2-tuple(v_783),3-proj-3-tuple(v_782),msg_c(alice,charlie))) in
        {240}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_782))) in
        {241}let v_786: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_783))) && success?(1-proj-3-tuple(v_782))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then cipherstatepack(1-proj-2-tuple(v_785),increment_nonce(2-proj-2-tuple(v_783))) else fail-any) else fail-any)) in
        {242}let v_787: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(1-proj-3-tuple(v_782))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then (if not-caught-fail(v_784) then (if not-caught-fail(v_786) then (v_786,v_784) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_788: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_787),2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)))) in
        {244}let v_789: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_787)) && success?(symmetricstatepack(1-proj-2-tuple(v_787),2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then symmetricstatepack(1-proj-3-tuple(v_788),2-proj-3-tuple(v_788),hash(3-proj-3-tuple(v_788),2-proj-2-tuple(v_787))) else fail-any) else fail-any)) in
        {245}let v_790: bitstring = catch-fail((if success?(1-proj-7-tuple(v_780)) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then (if not-caught-fail(v_789) then (v_789,2-proj-2-tuple(v_787)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_791: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_790),2-proj-7-tuple(v_780),3-proj-7-tuple(v_780),4-proj-7-tuple(v_780),5-proj-7-tuple(v_780),6-proj-7-tuple(v_780),7-proj-7-tuple(v_780))) in
        {247}let v_792: bitstring = catch-fail(concat3(1-proj-3-tuple(v_781),2-proj-3-tuple(v_781),2-proj-2-tuple(v_790))) in
        {248}let (hs_793: handshakestate,re_794: key,message_c_795: bitstring) = (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-7-tuple(v_780))))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then (v_791,5-proj-7-tuple(v_780),v_792) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {249}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {250}insert statestore(alice,charlie,statepack_d(hs_793));
        {251}out(pub, message_c_795)
    ) | (
        {280}get statestore(=alice,=charlie,statepack_d(hs_796: handshakestate)) in
        {253}in(pub, message_d_797: bitstring);
        {254}let v_798: bitstring = catch-fail(handshakestateunpack(hs_796)) in
        {255}let v_799: bitstring = catch-fail(deconcat3(message_d_797)) in
        {256}let v_800: bool = catch-fail(true) in
        {257}let v_801: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_798))) in
        {258}let v_802: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {259}let v_803: aead = catch-fail(decrypt(1-proj-2-tuple(v_802),2-proj-2-tuple(v_802),3-proj-3-tuple(v_801),3-proj-3-tuple(v_799))) in
        {260}let v_804: bitstring = catch-fail(aeadunpack(v_803)) in
        {261}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {262}let v_806: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_802))) && success?(1-proj-3-tuple(v_801))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then cipherstatepack(1-proj-2-tuple(v_805),increment_nonce(2-proj-2-tuple(v_802))) else fail-any) else fail-any)) in
        {263}let v_807: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_799)) && (success?(3-proj-3-tuple(v_801)) && success?(1-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then (if not-caught-fail(v_803) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if not-caught-fail(v_806) then (v_806,3-proj-3-tuple(v_804),1-proj-3-tuple(v_804)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {264}let v_808: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) in
        {265}let v_809: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_799)) && success?(symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),hash(3-proj-3-tuple(v_808),3-proj-3-tuple(v_799))) else fail-any) else fail-any)) in
        {266}let v_810: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_799)) && success?(1-proj-7-tuple(v_798))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if not-caught-fail(v_809) then (v_809,2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_811: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_810),2-proj-7-tuple(v_798),3-proj-7-tuple(v_798),4-proj-7-tuple(v_798),5-proj-7-tuple(v_798),6-proj-7-tuple(v_798),7-proj-7-tuple(v_798))) in
        {268}let v_812: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_810))) in
        {269}let v_813: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_812),zero)) in
        {270}let v_814: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_812),zero)) in
        {271}let v_815: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_812),zero)) in
        {272}let v_816: bitstring = catch-fail((if success?(2-proj-3-tuple(v_812)) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_813,v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let v_817: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_816)) then cipherstatepack(1-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {274}let v_818: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_816)) then cipherstatepack(2-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {275}let v_819: bitstring = catch-fail((if success?(1-proj-3-tuple(v_810)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (1-proj-3-tuple(v_810),v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {276}let (hs_820: handshakestate,re_821: key,plaintext_d_822: bitstring,valid_823: bool,cs1_824: cipherstate,cs2_825: cipherstate) = (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-7-tuple(v_798))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then (if not-caught-fail(v_800) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if (v_800 && 3-proj-3-tuple(v_810)) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (v_811,getpublickey(3-proj-7-tuple(v_798)),2-proj-3-tuple(v_810),true,2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {277}event RecvMsg(alice,charlie,stage_d,plaintext_d_822,valid_823);
        {278}insert statestore(alice,charlie,statepack_e(hs_820));
        {279}event RecvEnd(valid_823)
    ) | (
        {281}event LeakS(phase0,alice);
        {282}out(pub, key_s(alice))
    ) | (
        {283}phase 1;
        {284}event LeakS(phase1,alice);
        {285}out(pub, key_s(alice))
    )
) | (
    {286}let v_826: key = catch-fail(dhexp(key_s(bob),g)) in
    {287}let s_827: keypair = (if not-caught-fail(v_826) then keypairpack(v_826,key_s(bob)) else fail-any) in
    {288}out(pub, getpublickey(s_827));
    (
        {289}let e_828: keypair = keypairpack(empty,empty) in
        {290}let v_829: key = catch-fail(dhexp(key_s(alice),g)) in
        {291}let rs_830: key = getpublickey((if not-caught-fail(v_829) then keypairpack(v_829,key_s(alice)) else fail-any)) in
        {292}let re_831: key = empty in
        {293}let v_832: bitstring = catch-fail(hash(somename,empty)) in
        {294}let v_833: key = catch-fail(v_832) in
        {295}let v_834: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {296}let v_835: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_832) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then symmetricstatepack(v_834,v_833,v_832) else fail-any) else fail-any) else fail-any))) in
        {297}let v_836: symmetricstate = catch-fail((if success?((if not-caught-fail(v_832) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then symmetricstatepack(v_834,v_833,v_832) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then symmetricstatepack(1-proj-3-tuple(v_835),2-proj-3-tuple(v_835),hash(3-proj-3-tuple(v_835),empty)) else fail-any) else fail-any)) in
        {298}let v_837: bitstring = catch-fail(symmetricstateunpack(v_836)) in
        {299}let v_838: symmetricstate = catch-fail((if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then symmetricstatepack(1-proj-3-tuple(v_837),2-proj-3-tuple(v_837),hash(3-proj-3-tuple(v_837),rs_830)) else fail-any)) in
        {300}let v_839: bitstring = catch-fail(symmetricstateunpack(v_838)) in
        {301}let v_840: symmetricstate = catch-fail((if success?(getpublickey(s_827)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then symmetricstatepack(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),hash(3-proj-3-tuple(v_839),getpublickey(s_827))) else fail-any) else fail-any)) in
        {302}let hs_841: handshakestate = (if not-caught-fail(v_836) then (if not-caught-fail(v_838) then (if not-caught-fail(v_840) then handshakestatepack(v_840,s_827,e_828,rs_830,re_831,empty,false) else fail-any) else fail-any) else fail-any) in
        {303}insert statestore(bob,alice,statepack_a(hs_841))
    ) | (
        {339}get statestore(=bob,=alice,statepack_a(hs_842: handshakestate)) in
        {304}in(pub, message_a_843: bitstring);
        {305}let v_844: bitstring = catch-fail(handshakestateunpack(hs_842)) in
        {306}let v_845: bitstring = catch-fail(deconcat3(message_a_843)) in
        {307}let v_846: bool = catch-fail(true) in
        {308}let v_847: key = catch-fail(1-proj-3-tuple(v_845)) in
        {309}let v_848: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_844))) in
        {310}let v_849: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_844)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_848),hash(3-proj-3-tuple(v_848),v_847)) else fail-any) else fail-any)) in
        {311}let v_850: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_844))) in
        {312}let v_851: bitstring = catch-fail(symmetricstateunpack(v_849)) in
        {313}let v_852: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_851),(if success?(2-proj-7-tuple(v_844)) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then dhexp(2-proj-2-tuple(v_850),v_847) else fail-any) else fail-any))) in
        {314}let v_853: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_851),(if success?(2-proj-7-tuple(v_844)) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then dhexp(2-proj-2-tuple(v_850),v_847) else fail-any) else fail-any))) in
        {315}let v_854: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_851),(if success?(2-proj-7-tuple(v_844)) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then dhexp(2-proj-2-tuple(v_850),v_847) else fail-any) else fail-any))) in
        {316}let v_855: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_844)) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then dhexp(2-proj-2-tuple(v_850),v_847) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_851))) then (if not-caught-fail(v_852) then (if not-caught-fail(v_853) then (if not-caught-fail(v_854) then (v_852,v_853,v_854) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {317}let v_856: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_844)) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then dhexp(2-proj-2-tuple(v_850),v_847) else fail-any) else fail-any)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_855)) then cipherstatepack(2-proj-3-tuple(v_855),minnonce) else fail-any),1-proj-3-tuple(v_855),3-proj-3-tuple(v_851)) else fail-any) else fail-any) else fail-any)) in
        {318}let v_857: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_844))) in
        {319}let v_858: bitstring = catch-fail(symmetricstateunpack(v_856)) in
        {320}let v_859: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_858),(if (success?(4-proj-7-tuple(v_844)) && success?(2-proj-7-tuple(v_844))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then dhexp(2-proj-2-tuple(v_857),4-proj-7-tuple(v_844)) else fail-any) else fail-any))) in
        {321}let v_860: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_858),(if (success?(4-proj-7-tuple(v_844)) && success?(2-proj-7-tuple(v_844))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then dhexp(2-proj-2-tuple(v_857),4-proj-7-tuple(v_844)) else fail-any) else fail-any))) in
        {322}let v_861: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_858),(if (success?(4-proj-7-tuple(v_844)) && success?(2-proj-7-tuple(v_844))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then dhexp(2-proj-2-tuple(v_857),4-proj-7-tuple(v_844)) else fail-any) else fail-any))) in
        {323}let v_862: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_844)) && success?(2-proj-7-tuple(v_844))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then dhexp(2-proj-2-tuple(v_857),4-proj-7-tuple(v_844)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_858))) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (v_859,v_860,v_861) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {324}let v_863: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_844)) && success?(2-proj-7-tuple(v_844))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then dhexp(2-proj-2-tuple(v_857),4-proj-7-tuple(v_844)) else fail-any) else fail-any)) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_862)) then cipherstatepack(2-proj-3-tuple(v_862),minnonce) else fail-any),1-proj-3-tuple(v_862),3-proj-3-tuple(v_858)) else fail-any) else fail-any) else fail-any)) in
        {325}let v_864: bitstring = catch-fail(symmetricstateunpack(v_863)) in
        {326}let v_865: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {327}let v_866: aead = catch-fail(decrypt(1-proj-2-tuple(v_865),2-proj-2-tuple(v_865),3-proj-3-tuple(v_864),3-proj-3-tuple(v_845))) in
        {328}let v_867: bitstring = catch-fail(aeadunpack(v_866)) in
        {329}let v_868: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {330}let v_869: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_865))) && success?(1-proj-3-tuple(v_864))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-2-tuple(v_868))))) then cipherstatepack(1-proj-2-tuple(v_868),increment_nonce(2-proj-2-tuple(v_865))) else fail-any) else fail-any)) in
        {331}let v_870: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_845)) && (success?(3-proj-3-tuple(v_864)) && success?(1-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then (if not-caught-fail(v_866) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if not-caught-fail(v_869) then (v_869,3-proj-3-tuple(v_867),1-proj-3-tuple(v_867)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {332}let v_871: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) in
        {333}let v_872: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_845)) && success?(symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then symmetricstatepack(1-proj-3-tuple(v_871),2-proj-3-tuple(v_871),hash(3-proj-3-tuple(v_871),3-proj-3-tuple(v_845))) else fail-any) else fail-any)) in
        {334}let v_873: bitstring = catch-fail((if success?(3-proj-3-tuple(v_845)) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if not-caught-fail(v_872) then (v_872,2-proj-3-tuple(v_870),3-proj-3-tuple(v_870)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {335}let v_874: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_873),2-proj-7-tuple(v_844),3-proj-7-tuple(v_844),4-proj-7-tuple(v_844),v_847,6-proj-7-tuple(v_844),7-proj-7-tuple(v_844))) in
        {336}let (hs_875: handshakestate,re_876: key,plaintext_a: bitstring,valid_877: bool) = (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-7-tuple(v_844))))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if not-caught-fail(v_846) then (if not-caught-fail(v_847) then (if not-caught-fail(v_849) then (if not-caught-fail(v_856) then (if not-caught-fail(v_863) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if (v_846 && 3-proj-3-tuple(v_873)) then (if not-caught-fail(v_874) then (v_874,getpublickey(3-proj-7-tuple(v_844)),2-proj-3-tuple(v_873),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {337}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_877);
        {338}insert statestore(bob,alice,statepack_b(hs_875))
    ) | (
        {376}get statestore(=bob,=alice,statepack_b(hs_878: handshakestate)) in
        {340}let v_879: bitstring = catch-fail(handshakestateunpack(hs_878)) in
        {341}let v_880: bitstring = catch-fail((empty,empty,empty)) in
        {342}let v_881: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {343}let v_882: keypair = catch-fail((if not-caught-fail(v_881) then keypairpack(v_881,key_e(bob,alice)) else fail-any)) in
        {344}let v_883: bitstring = catch-fail(getpublickey(v_882)) in
        {345}let v_884: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_879))) in
        {346}let v_885: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_879)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then symmetricstatepack(1-proj-3-tuple(v_884),2-proj-3-tuple(v_884),hash(3-proj-3-tuple(v_884),v_883)) else fail-any) else fail-any)) in
        {347}let v_886: bitstring = catch-fail(keypairunpack(v_882)) in
        {348}let v_887: bitstring = catch-fail(symmetricstateunpack(v_885)) in
        {349}let v_888: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_887),(if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any))) in
        {350}let v_889: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_887),(if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any))) in
        {351}let v_890: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_887),(if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any))) in
        {352}let v_891: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_887))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (if not-caught-fail(v_890) then (v_888,v_889,v_890) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {353}let v_892: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any)) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_891)) then cipherstatepack(2-proj-3-tuple(v_891),minnonce) else fail-any),1-proj-3-tuple(v_891),3-proj-3-tuple(v_887)) else fail-any) else fail-any) else fail-any)) in
        {354}let v_893: bitstring = catch-fail(keypairunpack(v_882)) in
        {355}let v_894: bitstring = catch-fail(symmetricstateunpack(v_892)) in
        {356}let v_895: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_894),(if success?(4-proj-7-tuple(v_879)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),4-proj-7-tuple(v_879)) else fail-any) else fail-any))) in
        {357}let v_896: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_894),(if success?(4-proj-7-tuple(v_879)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),4-proj-7-tuple(v_879)) else fail-any) else fail-any))) in
        {358}let v_897: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_894),(if success?(4-proj-7-tuple(v_879)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),4-proj-7-tuple(v_879)) else fail-any) else fail-any))) in
        {359}let v_898: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_879)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),4-proj-7-tuple(v_879)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_894))) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (v_895,v_896,v_897) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {360}let v_899: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_879)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),4-proj-7-tuple(v_879)) else fail-any) else fail-any)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_898)) then cipherstatepack(2-proj-3-tuple(v_898),minnonce) else fail-any),1-proj-3-tuple(v_898),3-proj-3-tuple(v_894)) else fail-any) else fail-any) else fail-any)) in
        {361}let v_900: bitstring = catch-fail(symmetricstateunpack(v_899)) in
        {362}let v_901: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {363}let v_902: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_901),2-proj-2-tuple(v_901),3-proj-3-tuple(v_900),msg_b(bob,alice))) in
        {364}let v_903: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {365}let v_904: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_901))) && success?(1-proj-3-tuple(v_900))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then cipherstatepack(1-proj-2-tuple(v_903),increment_nonce(2-proj-2-tuple(v_901))) else fail-any) else fail-any)) in
        {366}let v_905: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_900)) && success?(1-proj-3-tuple(v_900))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then (if not-caught-fail(v_902) then (if not-caught-fail(v_904) then (v_904,v_902) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {367}let v_906: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_905),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) in
        {368}let v_907: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_905)) && success?(symmetricstatepack(1-proj-2-tuple(v_905),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_906),hash(3-proj-3-tuple(v_906),2-proj-2-tuple(v_905))) else fail-any) else fail-any)) in
        {369}let v_908: bitstring = catch-fail((if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-2-tuple(v_905))))) then (if not-caught-fail(v_907) then (v_907,2-proj-2-tuple(v_905)) else fail-any) else fail-any) else fail-any)) in
        {370}let v_909: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_908),2-proj-7-tuple(v_879),v_882,4-proj-7-tuple(v_879),5-proj-7-tuple(v_879),6-proj-7-tuple(v_879),7-proj-7-tuple(v_879))) in
        {371}let v_910: bitstring = catch-fail(concat3(v_883,2-proj-3-tuple(v_880),2-proj-2-tuple(v_908))) in
        {372}let (hs_911: handshakestate,re_912: key,message_b_913: bitstring) = (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-7-tuple(v_879))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (if not-caught-fail(v_883) then (if not-caught-fail(v_885) then (if not-caught-fail(v_892) then (if not-caught-fail(v_899) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-2-tuple(v_908))))) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (v_909,5-proj-7-tuple(v_879),v_910) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {373}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {374}insert statestore(bob,alice,statepack_c(hs_911));
        {375}out(pub, message_b_913)
    ) | (
        {395}get statestore(=bob,=alice,statepack_c(hs_914: handshakestate)) in
        {377}in(pub, message_c_915: bitstring);
        {378}let v_916: bitstring = catch-fail(handshakestateunpack(hs_914)) in
        {379}let v_917: bitstring = catch-fail(deconcat3(message_c_915)) in
        {380}let v_918: bool = catch-fail(true) in
        {381}let v_919: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_916))) in
        {382}let v_920: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_919))) in
        {383}let v_921: aead = catch-fail(decrypt(1-proj-2-tuple(v_920),2-proj-2-tuple(v_920),3-proj-3-tuple(v_919),3-proj-3-tuple(v_917))) in
        {384}let v_922: bitstring = catch-fail(aeadunpack(v_921)) in
        {385}let v_923: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_919))) in
        {386}let v_924: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_920))) && success?(1-proj-3-tuple(v_919))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then cipherstatepack(1-proj-2-tuple(v_923),increment_nonce(2-proj-2-tuple(v_920))) else fail-any) else fail-any)) in
        {387}let v_925: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_917)) && (success?(3-proj-3-tuple(v_919)) && success?(1-proj-3-tuple(v_919)))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then (if not-caught-fail(v_921) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if not-caught-fail(v_924) then (v_924,3-proj-3-tuple(v_922),1-proj-3-tuple(v_922)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {388}let v_926: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_925),2-proj-3-tuple(v_919),3-proj-3-tuple(v_919)))) in
        {389}let v_927: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_917)) && success?(symmetricstatepack(1-proj-3-tuple(v_925),2-proj-3-tuple(v_919),3-proj-3-tuple(v_919)))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then symmetricstatepack(1-proj-3-tuple(v_926),2-proj-3-tuple(v_926),hash(3-proj-3-tuple(v_926),3-proj-3-tuple(v_917))) else fail-any) else fail-any)) in
        {390}let v_928: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_917)) && success?(1-proj-7-tuple(v_916))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if not-caught-fail(v_927) then (v_927,2-proj-3-tuple(v_925),3-proj-3-tuple(v_925)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {391}let v_929: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_928),2-proj-7-tuple(v_916),3-proj-7-tuple(v_916),4-proj-7-tuple(v_916),5-proj-7-tuple(v_916),6-proj-7-tuple(v_916),7-proj-7-tuple(v_916))) in
        {392}let (hs_930: handshakestate,re_931: key,plaintext_c: bitstring,valid_932: bool) = (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-7-tuple(v_916))))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if not-caught-fail(v_918) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if (v_918 && 3-proj-3-tuple(v_928)) then (if not-caught-fail(v_929) then (v_929,getpublickey(3-proj-7-tuple(v_916)),2-proj-3-tuple(v_928),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {393}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_932);
        {394}insert statestore(bob,alice,statepack_d(hs_930))
    ) | (
        {421}get statestore(=bob,=alice,statepack_d(hs_933: handshakestate)) in
        {396}let v_934: bitstring = catch-fail(handshakestateunpack(hs_933)) in
        {397}let v_935: bitstring = catch-fail((empty,empty,empty)) in
        {398}let v_936: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_934))) in
        {399}let v_937: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_936))) in
        {400}let v_938: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_937),2-proj-2-tuple(v_937),3-proj-3-tuple(v_936),msg_d(bob,alice))) in
        {401}let v_939: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_936))) in
        {402}let v_940: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_937))) && success?(1-proj-3-tuple(v_936))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then cipherstatepack(1-proj-2-tuple(v_939),increment_nonce(2-proj-2-tuple(v_937))) else fail-any) else fail-any)) in
        {403}let v_941: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_936)) && success?(1-proj-3-tuple(v_936))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then (if not-caught-fail(v_938) then (if not-caught-fail(v_940) then (v_940,v_938) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {404}let v_942: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_941),2-proj-3-tuple(v_936),3-proj-3-tuple(v_936)))) in
        {405}let v_943: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_941)) && success?(symmetricstatepack(1-proj-2-tuple(v_941),2-proj-3-tuple(v_936),3-proj-3-tuple(v_936)))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then symmetricstatepack(1-proj-3-tuple(v_942),2-proj-3-tuple(v_942),hash(3-proj-3-tuple(v_942),2-proj-2-tuple(v_941))) else fail-any) else fail-any)) in
        {406}let v_944: bitstring = catch-fail((if success?(1-proj-7-tuple(v_934)) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then (if not-caught-fail(v_943) then (v_943,2-proj-2-tuple(v_941)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_945: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_944),2-proj-7-tuple(v_934),3-proj-7-tuple(v_934),4-proj-7-tuple(v_934),5-proj-7-tuple(v_934),6-proj-7-tuple(v_934),7-proj-7-tuple(v_934))) in
        {408}let v_946: bitstring = catch-fail(concat3(1-proj-3-tuple(v_935),2-proj-3-tuple(v_935),2-proj-2-tuple(v_944))) in
        {409}let v_947: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_944))) in
        {410}let v_948: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_947),zero)) in
        {411}let v_949: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_947),zero)) in
        {412}let v_950: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_947),zero)) in
        {413}let v_951: bitstring = catch-fail((if success?(2-proj-3-tuple(v_947)) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then (if not-caught-fail(v_950) then (v_948,v_949,v_950) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {414}let v_952: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_951)) then cipherstatepack(1-proj-3-tuple(v_951),minnonce) else fail-any)) in
        {415}let v_953: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_951)) then cipherstatepack(2-proj-3-tuple(v_951),minnonce) else fail-any)) in
        {416}let v_954: bitstring = catch-fail((if success?(1-proj-2-tuple(v_944)) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-3-tuple(v_947))))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if not-caught-fail(v_952) then (if not-caught-fail(v_953) then (1-proj-2-tuple(v_944),v_952,v_953) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {417}let (hs_955: handshakestate,re_956: key,message_d_957: bitstring,cs1_958: cipherstate,cs2_959: cipherstate) = (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-7-tuple(v_934))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then (if not-caught-fail(v_945) then (if not-caught-fail(v_946) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (v_945,5-proj-7-tuple(v_934),v_946,2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {418}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {419}insert statestore(bob,alice,statepack_e(hs_955));
        {420}out(pub, message_d_957)
    ) | (
        {422}event LeakS(phase0,bob);
        {423}out(pub, key_s(bob))
    ) | (
        {424}phase 1;
        {425}event LeakS(phase1,bob);
        {426}out(pub, key_s(bob))
    )
) | (
    {427}let v_960: key = catch-fail(dhexp(key_s(bob),g)) in
    {428}let s_961: keypair = (if not-caught-fail(v_960) then keypairpack(v_960,key_s(bob)) else fail-any) in
    {429}out(pub, getpublickey(s_961));
    (
        {430}let e_962: keypair = keypairpack(empty,empty) in
        {431}let v_963: key = catch-fail(dhexp(key_s(charlie),g)) in
        {432}let rs_964: key = getpublickey((if not-caught-fail(v_963) then keypairpack(v_963,key_s(charlie)) else fail-any)) in
        {433}let re_965: key = empty in
        {434}let v_966: bitstring = catch-fail(hash(somename,empty)) in
        {435}let v_967: key = catch-fail(v_966) in
        {436}let v_968: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {437}let v_969: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_966) then (if not-caught-fail(v_967) then (if not-caught-fail(v_968) then symmetricstatepack(v_968,v_967,v_966) else fail-any) else fail-any) else fail-any))) in
        {438}let v_970: symmetricstate = catch-fail((if success?((if not-caught-fail(v_966) then (if not-caught-fail(v_967) then (if not-caught-fail(v_968) then symmetricstatepack(v_968,v_967,v_966) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then symmetricstatepack(1-proj-3-tuple(v_969),2-proj-3-tuple(v_969),hash(3-proj-3-tuple(v_969),empty)) else fail-any) else fail-any)) in
        {439}let v_971: bitstring = catch-fail(symmetricstateunpack(v_970)) in
        {440}let v_972: symmetricstate = catch-fail((if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then symmetricstatepack(1-proj-3-tuple(v_971),2-proj-3-tuple(v_971),hash(3-proj-3-tuple(v_971),rs_964)) else fail-any)) in
        {441}let v_973: bitstring = catch-fail(symmetricstateunpack(v_972)) in
        {442}let v_974: symmetricstate = catch-fail((if success?(getpublickey(s_961)) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then symmetricstatepack(1-proj-3-tuple(v_973),2-proj-3-tuple(v_973),hash(3-proj-3-tuple(v_973),getpublickey(s_961))) else fail-any) else fail-any)) in
        {443}let hs_975: handshakestate = (if not-caught-fail(v_970) then (if not-caught-fail(v_972) then (if not-caught-fail(v_974) then handshakestatepack(v_974,s_961,e_962,rs_964,re_965,empty,false) else fail-any) else fail-any) else fail-any) in
        {444}insert statestore(bob,charlie,statepack_a(hs_975))
    ) | (
        {480}get statestore(=bob,=charlie,statepack_a(hs_976: handshakestate)) in
        {445}in(pub, message_a_977: bitstring);
        {446}let v_978: bitstring = catch-fail(handshakestateunpack(hs_976)) in
        {447}let v_979: bitstring = catch-fail(deconcat3(message_a_977)) in
        {448}let v_980: bool = catch-fail(true) in
        {449}let v_981: key = catch-fail(1-proj-3-tuple(v_979)) in
        {450}let v_982: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_978))) in
        {451}let v_983: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_978)) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then symmetricstatepack(1-proj-3-tuple(v_982),2-proj-3-tuple(v_982),hash(3-proj-3-tuple(v_982),v_981)) else fail-any) else fail-any)) in
        {452}let v_984: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_978))) in
        {453}let v_985: bitstring = catch-fail(symmetricstateunpack(v_983)) in
        {454}let v_986: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_985),(if success?(2-proj-7-tuple(v_978)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),v_981) else fail-any) else fail-any))) in
        {455}let v_987: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_985),(if success?(2-proj-7-tuple(v_978)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),v_981) else fail-any) else fail-any))) in
        {456}let v_988: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_985),(if success?(2-proj-7-tuple(v_978)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),v_981) else fail-any) else fail-any))) in
        {457}let v_989: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_978)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),v_981) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_985))) then (if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (if not-caught-fail(v_988) then (v_986,v_987,v_988) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {458}let v_990: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_978)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),v_981) else fail-any) else fail-any)) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-3-tuple(v_985))))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_989)) then cipherstatepack(2-proj-3-tuple(v_989),minnonce) else fail-any),1-proj-3-tuple(v_989),3-proj-3-tuple(v_985)) else fail-any) else fail-any) else fail-any)) in
        {459}let v_991: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_978))) in
        {460}let v_992: bitstring = catch-fail(symmetricstateunpack(v_990)) in
        {461}let v_993: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_992),(if (success?(4-proj-7-tuple(v_978)) && success?(2-proj-7-tuple(v_978))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),4-proj-7-tuple(v_978)) else fail-any) else fail-any))) in
        {462}let v_994: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_992),(if (success?(4-proj-7-tuple(v_978)) && success?(2-proj-7-tuple(v_978))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),4-proj-7-tuple(v_978)) else fail-any) else fail-any))) in
        {463}let v_995: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_992),(if (success?(4-proj-7-tuple(v_978)) && success?(2-proj-7-tuple(v_978))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),4-proj-7-tuple(v_978)) else fail-any) else fail-any))) in
        {464}let v_996: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_978)) && success?(2-proj-7-tuple(v_978))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),4-proj-7-tuple(v_978)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_992))) then (if not-caught-fail(v_993) then (if not-caught-fail(v_994) then (if not-caught-fail(v_995) then (v_993,v_994,v_995) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {465}let v_997: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_978)) && success?(2-proj-7-tuple(v_978))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),4-proj-7-tuple(v_978)) else fail-any) else fail-any)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_996)) then cipherstatepack(2-proj-3-tuple(v_996),minnonce) else fail-any),1-proj-3-tuple(v_996),3-proj-3-tuple(v_992)) else fail-any) else fail-any) else fail-any)) in
        {466}let v_998: bitstring = catch-fail(symmetricstateunpack(v_997)) in
        {467}let v_999: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {468}let v_1000: aead = catch-fail(decrypt(1-proj-2-tuple(v_999),2-proj-2-tuple(v_999),3-proj-3-tuple(v_998),3-proj-3-tuple(v_979))) in
        {469}let v_1001: bitstring = catch-fail(aeadunpack(v_1000)) in
        {470}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {471}let v_1003: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_999))) && success?(1-proj-3-tuple(v_998))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then cipherstatepack(1-proj-2-tuple(v_1002),increment_nonce(2-proj-2-tuple(v_999))) else fail-any) else fail-any)) in
        {472}let v_1004: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_979)) && (success?(3-proj-3-tuple(v_998)) && success?(1-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if not-caught-fail(v_1003) then (v_1003,3-proj-3-tuple(v_1001),1-proj-3-tuple(v_1001)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {473}let v_1005: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) in
        {474}let v_1006: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_979)) && success?(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),hash(3-proj-3-tuple(v_1005),3-proj-3-tuple(v_979))) else fail-any) else fail-any)) in
        {475}let v_1007: bitstring = catch-fail((if success?(3-proj-3-tuple(v_979)) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,2-proj-3-tuple(v_1004),3-proj-3-tuple(v_1004)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_1008: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1007),2-proj-7-tuple(v_978),3-proj-7-tuple(v_978),4-proj-7-tuple(v_978),v_981,6-proj-7-tuple(v_978),7-proj-7-tuple(v_978))) in
        {477}let (hs_1009: handshakestate,re_1010: key,plaintext_a_1011: bitstring,valid_1012: bool) = (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-7-tuple(v_978))))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then (if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (if not-caught-fail(v_983) then (if not-caught-fail(v_990) then (if not-caught-fail(v_997) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if (v_980 && 3-proj-3-tuple(v_1007)) then (if not-caught-fail(v_1008) then (v_1008,getpublickey(3-proj-7-tuple(v_978)),2-proj-3-tuple(v_1007),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {478}event RecvMsg(bob,charlie,stage_a,plaintext_a_1011,valid_1012);
        {479}insert statestore(bob,charlie,statepack_b(hs_1009))
    ) | (
        {517}get statestore(=bob,=charlie,statepack_b(hs_1013: handshakestate)) in
        {481}let v_1014: bitstring = catch-fail(handshakestateunpack(hs_1013)) in
        {482}let v_1015: bitstring = catch-fail((empty,empty,empty)) in
        {483}let v_1016: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {484}let v_1017: keypair = catch-fail((if not-caught-fail(v_1016) then keypairpack(v_1016,key_e(bob,charlie)) else fail-any)) in
        {485}let v_1018: bitstring = catch-fail(getpublickey(v_1017)) in
        {486}let v_1019: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1014))) in
        {487}let v_1020: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then symmetricstatepack(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),hash(3-proj-3-tuple(v_1019),v_1018)) else fail-any) else fail-any)) in
        {488}let v_1021: bitstring = catch-fail(keypairunpack(v_1017)) in
        {489}let v_1022: bitstring = catch-fail(symmetricstateunpack(v_1020)) in
        {490}let v_1023: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1022),(if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any))) in
        {491}let v_1024: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1022),(if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any))) in
        {492}let v_1025: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1022),(if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any))) in
        {493}let v_1026: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1022))) then (if not-caught-fail(v_1023) then (if not-caught-fail(v_1024) then (if not-caught-fail(v_1025) then (v_1023,v_1024,v_1025) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {494}let v_1027: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1026)) then cipherstatepack(2-proj-3-tuple(v_1026),minnonce) else fail-any),1-proj-3-tuple(v_1026),3-proj-3-tuple(v_1022)) else fail-any) else fail-any) else fail-any)) in
        {495}let v_1028: bitstring = catch-fail(keypairunpack(v_1017)) in
        {496}let v_1029: bitstring = catch-fail(symmetricstateunpack(v_1027)) in
        {497}let v_1030: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1029),(if success?(4-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),4-proj-7-tuple(v_1014)) else fail-any) else fail-any))) in
        {498}let v_1031: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1029),(if success?(4-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),4-proj-7-tuple(v_1014)) else fail-any) else fail-any))) in
        {499}let v_1032: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1029),(if success?(4-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),4-proj-7-tuple(v_1014)) else fail-any) else fail-any))) in
        {500}let v_1033: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),4-proj-7-tuple(v_1014)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1029))) then (if not-caught-fail(v_1030) then (if not-caught-fail(v_1031) then (if not-caught-fail(v_1032) then (v_1030,v_1031,v_1032) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_1034: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then dhexp(2-proj-2-tuple(v_1028),4-proj-7-tuple(v_1014)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-3-tuple(v_1029))))) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1033)) then cipherstatepack(2-proj-3-tuple(v_1033),minnonce) else fail-any),1-proj-3-tuple(v_1033),3-proj-3-tuple(v_1029)) else fail-any) else fail-any) else fail-any)) in
        {502}let v_1035: bitstring = catch-fail(symmetricstateunpack(v_1034)) in
        {503}let v_1036: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1035))) in
        {504}let v_1037: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1036),2-proj-2-tuple(v_1036),3-proj-3-tuple(v_1035),msg_b(bob,charlie))) in
        {505}let v_1038: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1035))) in
        {506}let v_1039: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1036))) && success?(1-proj-3-tuple(v_1035))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-2-tuple(v_1038))))) then cipherstatepack(1-proj-2-tuple(v_1038),increment_nonce(2-proj-2-tuple(v_1036))) else fail-any) else fail-any)) in
        {507}let v_1040: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1035)) && success?(1-proj-3-tuple(v_1035))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-2-tuple(v_1036))))) then (if not-caught-fail(v_1037) then (if not-caught-fail(v_1039) then (v_1039,v_1037) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {508}let v_1041: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1040),2-proj-3-tuple(v_1035),3-proj-3-tuple(v_1035)))) in
        {509}let v_1042: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1040)) && success?(symmetricstatepack(1-proj-2-tuple(v_1040),2-proj-3-tuple(v_1035),3-proj-3-tuple(v_1035)))) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then symmetricstatepack(1-proj-3-tuple(v_1041),2-proj-3-tuple(v_1041),hash(3-proj-3-tuple(v_1041),2-proj-2-tuple(v_1040))) else fail-any) else fail-any)) in
        {510}let v_1043: bitstring = catch-fail((if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then (if not-caught-fail(v_1042) then (v_1042,2-proj-2-tuple(v_1040)) else fail-any) else fail-any) else fail-any)) in
        {511}let v_1044: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1043),2-proj-7-tuple(v_1014),v_1017,4-proj-7-tuple(v_1014),5-proj-7-tuple(v_1014),6-proj-7-tuple(v_1014),7-proj-7-tuple(v_1014))) in
        {512}let v_1045: bitstring = catch-fail(concat3(v_1018,2-proj-3-tuple(v_1015),2-proj-2-tuple(v_1043))) in
        {513}let (hs_1046: handshakestate,re_1047: key,message_b_1048: bitstring) = (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-7-tuple(v_1014))))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1020) then (if not-caught-fail(v_1027) then (if not-caught-fail(v_1034) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then (if not-caught-fail(v_1044) then (if not-caught-fail(v_1045) then (v_1044,5-proj-7-tuple(v_1014),v_1045) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {514}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {515}insert statestore(bob,charlie,statepack_c(hs_1046));
        {516}out(pub, message_b_1048)
    ) | (
        {536}get statestore(=bob,=charlie,statepack_c(hs_1049: handshakestate)) in
        {518}in(pub, message_c_1050: bitstring);
        {519}let v_1051: bitstring = catch-fail(handshakestateunpack(hs_1049)) in
        {520}let v_1052: bitstring = catch-fail(deconcat3(message_c_1050)) in
        {521}let v_1053: bool = catch-fail(true) in
        {522}let v_1054: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1051))) in
        {523}let v_1055: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1054))) in
        {524}let v_1056: aead = catch-fail(decrypt(1-proj-2-tuple(v_1055),2-proj-2-tuple(v_1055),3-proj-3-tuple(v_1054),3-proj-3-tuple(v_1052))) in
        {525}let v_1057: bitstring = catch-fail(aeadunpack(v_1056)) in
        {526}let v_1058: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1054))) in
        {527}let v_1059: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1055))) && success?(1-proj-3-tuple(v_1054))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then cipherstatepack(1-proj-2-tuple(v_1058),increment_nonce(2-proj-2-tuple(v_1055))) else fail-any) else fail-any)) in
        {528}let v_1060: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1052)) && (success?(3-proj-3-tuple(v_1054)) && success?(1-proj-3-tuple(v_1054)))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then (if not-caught-fail(v_1056) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then (if not-caught-fail(v_1059) then (v_1059,3-proj-3-tuple(v_1057),1-proj-3-tuple(v_1057)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1061: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1060),2-proj-3-tuple(v_1054),3-proj-3-tuple(v_1054)))) in
        {530}let v_1062: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1052)) && success?(symmetricstatepack(1-proj-3-tuple(v_1060),2-proj-3-tuple(v_1054),3-proj-3-tuple(v_1054)))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then symmetricstatepack(1-proj-3-tuple(v_1061),2-proj-3-tuple(v_1061),hash(3-proj-3-tuple(v_1061),3-proj-3-tuple(v_1052))) else fail-any) else fail-any)) in
        {531}let v_1063: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1052)) && success?(1-proj-7-tuple(v_1051))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then (if not-caught-fail(v_1062) then (v_1062,2-proj-3-tuple(v_1060),3-proj-3-tuple(v_1060)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1064: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1063),2-proj-7-tuple(v_1051),3-proj-7-tuple(v_1051),4-proj-7-tuple(v_1051),5-proj-7-tuple(v_1051),6-proj-7-tuple(v_1051),7-proj-7-tuple(v_1051))) in
        {533}let (hs_1065: handshakestate,re_1066: key,plaintext_c_1067: bitstring,valid_1068: bool) = (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-7-tuple(v_1051))))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if not-caught-fail(v_1053) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-3-tuple(v_1063))))) then (if (v_1053 && 3-proj-3-tuple(v_1063)) then (if not-caught-fail(v_1064) then (v_1064,getpublickey(3-proj-7-tuple(v_1051)),2-proj-3-tuple(v_1063),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {534}event RecvMsg(bob,charlie,stage_c,plaintext_c_1067,valid_1068);
        {535}insert statestore(bob,charlie,statepack_d(hs_1065))
    ) | (
        {562}get statestore(=bob,=charlie,statepack_d(hs_1069: handshakestate)) in
        {537}let v_1070: bitstring = catch-fail(handshakestateunpack(hs_1069)) in
        {538}let v_1071: bitstring = catch-fail((empty,empty,empty)) in
        {539}let v_1072: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1070))) in
        {540}let v_1073: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1072))) in
        {541}let v_1074: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1073),2-proj-2-tuple(v_1073),3-proj-3-tuple(v_1072),msg_d(bob,charlie))) in
        {542}let v_1075: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1072))) in
        {543}let v_1076: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1073))) && success?(1-proj-3-tuple(v_1072))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then cipherstatepack(1-proj-2-tuple(v_1075),increment_nonce(2-proj-2-tuple(v_1073))) else fail-any) else fail-any)) in
        {544}let v_1077: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1072)) && success?(1-proj-3-tuple(v_1072))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then (if not-caught-fail(v_1074) then (if not-caught-fail(v_1076) then (v_1076,v_1074) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {545}let v_1078: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1077),2-proj-3-tuple(v_1072),3-proj-3-tuple(v_1072)))) in
        {546}let v_1079: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1077)) && success?(symmetricstatepack(1-proj-2-tuple(v_1077),2-proj-3-tuple(v_1072),3-proj-3-tuple(v_1072)))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-3-tuple(v_1078))))) then symmetricstatepack(1-proj-3-tuple(v_1078),2-proj-3-tuple(v_1078),hash(3-proj-3-tuple(v_1078),2-proj-2-tuple(v_1077))) else fail-any) else fail-any)) in
        {547}let v_1080: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1070)) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-2-tuple(v_1077))))) then (if not-caught-fail(v_1079) then (v_1079,2-proj-2-tuple(v_1077)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {548}let v_1081: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1080),2-proj-7-tuple(v_1070),3-proj-7-tuple(v_1070),4-proj-7-tuple(v_1070),5-proj-7-tuple(v_1070),6-proj-7-tuple(v_1070),7-proj-7-tuple(v_1070))) in
        {549}let v_1082: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1071),2-proj-3-tuple(v_1071),2-proj-2-tuple(v_1080))) in
        {550}let v_1083: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1080))) in
        {551}let v_1084: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1083),zero)) in
        {552}let v_1085: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1083),zero)) in
        {553}let v_1086: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1083),zero)) in
        {554}let v_1087: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1083)) then (if not-caught-fail(v_1084) then (if not-caught-fail(v_1085) then (if not-caught-fail(v_1086) then (v_1084,v_1085,v_1086) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {555}let v_1088: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1087)) then cipherstatepack(1-proj-3-tuple(v_1087),minnonce) else fail-any)) in
        {556}let v_1089: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1087)) then cipherstatepack(2-proj-3-tuple(v_1087),minnonce) else fail-any)) in
        {557}let v_1090: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1080)) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-3-tuple(v_1087))))) then (if not-caught-fail(v_1088) then (if not-caught-fail(v_1089) then (1-proj-2-tuple(v_1080),v_1088,v_1089) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let (hs_1091: handshakestate,re_1092: key,message_d_1093: bitstring,cs1_1094: cipherstate,cs2_1095: cipherstate) = (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-7-tuple(v_1070))))) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-3-tuple(v_1071))))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-2-tuple(v_1080))))) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1082) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then (v_1081,5-proj-7-tuple(v_1070),v_1082,2-proj-3-tuple(v_1090),3-proj-3-tuple(v_1090)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {559}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {560}insert statestore(bob,charlie,statepack_e(hs_1091));
        {561}out(pub, message_d_1093)
    ) | (
        {563}event LeakS(phase0,bob);
        {564}out(pub, key_s(bob))
    ) | (
        {565}phase 1;
        {566}event LeakS(phase1,bob);
        {567}out(pub, key_s(bob))
    )
) | (
    {568}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1098,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1098,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1098,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1098,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1098,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1098,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1098,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1098,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 209 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 46 rules in the queue.
600 rules inserted. The rule base contains 580 rules. 240 rules in the queue.
800 rules inserted. The rule base contains 766 rules. 264 rules in the queue.
1000 rules inserted. The rule base contains 947 rules. 129 rules in the queue.
1200 rules inserted. The rule base contains 1146 rules. 308 rules in the queue.
1400 rules inserted. The rule base contains 1346 rules. 440 rules in the queue.
1600 rules inserted. The rule base contains 1532 rules. 422 rules in the queue.
1800 rules inserted. The rule base contains 1717 rules. 401 rules in the queue.
2000 rules inserted. The rule base contains 1906 rules. 430 rules in the queue.
2200 rules inserted. The rule base contains 2098 rules. 466 rules in the queue.
2400 rules inserted. The rule base contains 2244 rules. 435 rules in the queue.
2600 rules inserted. The rule base contains 2384 rules. 380 rules in the queue.
2800 rules inserted. The rule base contains 2561 rules. 417 rules in the queue.
3000 rules inserted. The rule base contains 2737 rules. 438 rules in the queue.
3200 rules inserted. The rule base contains 2877 rules. 442 rules in the queue.
3400 rules inserted. The rule base contains 3016 rules. 459 rules in the queue.
3600 rules inserted. The rule base contains 3173 rules. 461 rules in the queue.
3800 rules inserted. The rule base contains 3344 rules. 469 rules in the queue.
4000 rules inserted. The rule base contains 3449 rules. 461 rules in the queue.
4200 rules inserted. The rule base contains 3575 rules. 480 rules in the queue.
4400 rules inserted. The rule base contains 3732 rules. 476 rules in the queue.
4600 rules inserted. The rule base contains 3905 rules. 492 rules in the queue.
4800 rules inserted. The rule base contains 4024 rules. 506 rules in the queue.
5000 rules inserted. The rule base contains 4164 rules. 537 rules in the queue.
5200 rules inserted. The rule base contains 4301 rules. 567 rules in the queue.
5400 rules inserted. The rule base contains 4465 rules. 578 rules in the queue.
5600 rules inserted. The rule base contains 4629 rules. 586 rules in the queue.
5800 rules inserted. The rule base contains 4819 rules. 633 rules in the queue.
6000 rules inserted. The rule base contains 5012 rules. 671 rules in the queue.
6200 rules inserted. The rule base contains 4956 rules. 725 rules in the queue.
6400 rules inserted. The rule base contains 5147 rules. 780 rules in the queue.
6600 rules inserted. The rule base contains 5335 rules. 801 rules in the queue.
6800 rules inserted. The rule base contains 5520 rules. 803 rules in the queue.
7000 rules inserted. The rule base contains 5705 rules. 866 rules in the queue.
7200 rules inserted. The rule base contains 5892 rules. 912 rules in the queue.
7400 rules inserted. The rule base contains 6080 rules. 892 rules in the queue.
7600 rules inserted. The rule base contains 6268 rules. 872 rules in the queue.
7800 rules inserted. The rule base contains 6404 rules. 865 rules in the queue.
8000 rules inserted. The rule base contains 6550 rules. 861 rules in the queue.
8200 rules inserted. The rule base contains 6694 rules. 795 rules in the queue.
8400 rules inserted. The rule base contains 6826 rules. 724 rules in the queue.
8600 rules inserted. The rule base contains 6977 rules. 722 rules in the queue.
8800 rules inserted. The rule base contains 7154 rules. 743 rules in the queue.
9000 rules inserted. The rule base contains 7308 rules. 759 rules in the queue.
9200 rules inserted. The rule base contains 7439 rules. 722 rules in the queue.
9400 rules inserted. The rule base contains 7592 rules. 714 rules in the queue.
9600 rules inserted. The rule base contains 7767 rules. 737 rules in the queue.
9800 rules inserted. The rule base contains 7911 rules. 741 rules in the queue.
10000 rules inserted. The rule base contains 8073 rules. 753 rules in the queue.
10200 rules inserted. The rule base contains 8240 rules. 763 rules in the queue.
10400 rules inserted. The rule base contains 8419 rules. 793 rules in the queue.
10600 rules inserted. The rule base contains 8565 rules. 807 rules in the queue.
10800 rules inserted. The rule base contains 8745 rules. 837 rules in the queue.
11000 rules inserted. The rule base contains 8927 rules. 842 rules in the queue.
11200 rules inserted. The rule base contains 9072 rules. 851 rules in the queue.
11400 rules inserted. The rule base contains 9228 rules. 871 rules in the queue.
11600 rules inserted. The rule base contains 9403 rules. 865 rules in the queue.
11800 rules inserted. The rule base contains 9576 rules. 843 rules in the queue.
12000 rules inserted. The rule base contains 9705 rules. 802 rules in the queue.
12200 rules inserted. The rule base contains 9860 rules. 809 rules in the queue.
12400 rules inserted. The rule base contains 10019 rules. 803 rules in the queue.
12600 rules inserted. The rule base contains 10163 rules. 772 rules in the queue.
12800 rules inserted. The rule base contains 10280 rules. 728 rules in the queue.
13000 rules inserted. The rule base contains 10428 rules. 711 rules in the queue.
13200 rules inserted. The rule base contains 10582 rules. 701 rules in the queue.
13400 rules inserted. The rule base contains 10693 rules. 665 rules in the queue.
13600 rules inserted. The rule base contains 10837 rules. 650 rules in the queue.
13800 rules inserted. The rule base contains 11005 rules. 669 rules in the queue.
14000 rules inserted. The rule base contains 11104 rules. 643 rules in the queue.
14200 rules inserted. The rule base contains 11246 rules. 628 rules in the queue.
14400 rules inserted. The rule base contains 11407 rules. 619 rules in the queue.
14600 rules inserted. The rule base contains 11538 rules. 616 rules in the queue.
14800 rules inserted. The rule base contains 11708 rules. 636 rules in the queue.
15000 rules inserted. The rule base contains 11849 rules. 560 rules in the queue.
15200 rules inserted. The rule base contains 11949 rules. 530 rules in the queue.
15400 rules inserted. The rule base contains 12069 rules. 464 rules in the queue.
15600 rules inserted. The rule base contains 12153 rules. 362 rules in the queue.
15800 rules inserted. The rule base contains 12221 rules. 275 rules in the queue.
16000 rules inserted. The rule base contains 12303 rules. 196 rules in the queue.
16200 rules inserted. The rule base contains 12324 rules. 93 rules in the queue.
16400 rules inserted. The rule base contains 12320 rules. 18 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1098,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1098,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1098,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1098,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {288}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {425}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {426}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {288}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {425}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {426}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {288}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {425}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {426}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1098,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1098,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1098,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1098,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1098,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1098,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1098,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1098,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1098,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1098,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1098,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1098,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {54}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {303}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 3 may be read at get {339}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {304}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {376}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {373}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {375}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {92}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 7 may be received at input {57}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {91}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

9. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 8 may be read at get {110}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {107}.
So the entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {108}.
table(statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

10. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {303}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

12. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 11 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

13. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 10 may be read at get {339}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 12 may be received at input {304}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

14. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 13 may be read at get {376}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {373}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {374}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 15 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {54}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

17. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {303}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

18. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

19. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 18 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

20. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 17 may be read at get {339}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 19 may be received at input {304}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

21. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 20 may be read at get {376}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {373}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {375}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

22. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 16 may be read at get {92}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 21 may be received at input {57}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {91}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

23. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 22 may be read at get {110}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {107}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on channel pub at output {109}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))).

24. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 14 may be read at get {395}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))) that may be sent on channel pub by 23 may be received at input {377}.
So the entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {394}.
table(statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

25. The entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 24 may be read at get {421}.
The event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true) may be executed at {418}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))),msg_d(bob,alice))) may be sent on channel pub at output {420}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))),msg_d(bob,alice)))).

26. The entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 9 may be read at get {138}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))),msg_d(bob,alice))) that may be sent on channel pub by 25 may be received at input {111}.
So event RecvEnd(true) may be executed at {137}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
