File "KK.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "KK.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 294, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 309, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 315, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 315, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 316, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 341, characters 6-7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 348, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 356, characters 6-7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 360, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 361, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 363, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 371, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 373, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 383, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 531, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 383, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 523, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 516, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 356, characters 6-7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 360, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 361, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 363, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 508, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 294, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 581, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 371, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 373, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 566, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 309, character 6:
Warning: identifier e rebound.
File "KK.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ne rebound.
File "KK.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 315, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 315, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK.noise.passive.pv", line 316, characters 6-7:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 341, characters 6-7:
Warning: identifier re rebound.
File "KK.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 344, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 348, characters 7-8:
Warning: identifier hs rebound.
File "KK.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KK.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KK.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "KK.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let v_486: key = catch-fail(dhexp(key_s(me),g)) in
    {6}let s_487: keypair = (if not-caught-fail(v_486) then keypairpack(v_486,key_s(me)) else fail-any) in
    {7}out(pub, getpublickey(s_487));
    (
        {8}let e_488: keypair = keypairpack(empty,empty) in
        {9}let v_489: key = catch-fail(dhexp(key_s(them),g)) in
        {10}let rs_490: key = getpublickey((if not-caught-fail(v_489) then keypairpack(v_489,key_s(them)) else fail-any)) in
        {11}let re_491: key = empty in
        {12}let v_492: bitstring = catch-fail(hash(somename,empty)) in
        {13}let v_493: key = catch-fail(v_492) in
        {14}let v_494: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {15}let v_495: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_492) then (if not-caught-fail(v_493) then (if not-caught-fail(v_494) then symmetricstatepack(v_494,v_493,v_492) else fail-any) else fail-any) else fail-any))) in
        {16}let v_496: symmetricstate = catch-fail((if success?((if not-caught-fail(v_492) then (if not-caught-fail(v_493) then (if not-caught-fail(v_494) then symmetricstatepack(v_494,v_493,v_492) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-3-tuple(v_495))))) then symmetricstatepack(1-proj-3-tuple(v_495),2-proj-3-tuple(v_495),hash(3-proj-3-tuple(v_495),empty)) else fail-any) else fail-any)) in
        {17}let v_497: bitstring = catch-fail(symmetricstateunpack(v_496)) in
        {18}let v_498: symmetricstate = catch-fail((if success?(getpublickey(s_487)) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-3-tuple(v_497))))) then symmetricstatepack(1-proj-3-tuple(v_497),2-proj-3-tuple(v_497),hash(3-proj-3-tuple(v_497),getpublickey(s_487))) else fail-any) else fail-any)) in
        {19}let v_499: bitstring = catch-fail(symmetricstateunpack(v_498)) in
        {20}let v_500: symmetricstate = catch-fail((if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-3-tuple(v_499))))) then symmetricstatepack(1-proj-3-tuple(v_499),2-proj-3-tuple(v_499),hash(3-proj-3-tuple(v_499),rs_490)) else fail-any)) in
        {21}let hs: handshakestate = (if not-caught-fail(v_496) then (if not-caught-fail(v_498) then (if not-caught-fail(v_500) then handshakestatepack(v_500,s_487,e_488,rs_490,re_491,empty,true) else fail-any) else fail-any) else fail-any) in
        {22}insert statestore(me,them,statepack_a(hs))
    ) | (
        {60}get statestore(=me,=them,statepack_a(hs_501: handshakestate)) in
        {23}let v_502: bitstring = catch-fail(handshakestateunpack(hs_501)) in
        {24}let v_503: bitstring = catch-fail((empty,empty,empty)) in
        {25}new key_e[me,them]: key;
        {26}let v_504: key = catch-fail(dhexp(key_e,g)) in
        {27}let v_505: keypair = catch-fail((if not-caught-fail(v_504) then keypairpack(v_504,key_e) else fail-any)) in
        {28}let v_506: bitstring = catch-fail(getpublickey(v_505)) in
        {29}let v_507: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_502))) in
        {30}let v_508: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_502)) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then symmetricstatepack(1-proj-3-tuple(v_507),2-proj-3-tuple(v_507),hash(3-proj-3-tuple(v_507),v_506)) else fail-any) else fail-any)) in
        {31}let v_509: bitstring = catch-fail(keypairunpack(v_505)) in
        {32}let v_510: bitstring = catch-fail(symmetricstateunpack(v_508)) in
        {33}let v_511: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_510),(if success?(4-proj-7-tuple(v_502)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),4-proj-7-tuple(v_502)) else fail-any) else fail-any))) in
        {34}let v_512: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_510),(if success?(4-proj-7-tuple(v_502)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),4-proj-7-tuple(v_502)) else fail-any) else fail-any))) in
        {35}let v_513: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_510),(if success?(4-proj-7-tuple(v_502)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),4-proj-7-tuple(v_502)) else fail-any) else fail-any))) in
        {36}let v_514: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_502)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),4-proj-7-tuple(v_502)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_510))) then (if not-caught-fail(v_511) then (if not-caught-fail(v_512) then (if not-caught-fail(v_513) then (v_511,v_512,v_513) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {37}let v_515: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_502)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),4-proj-7-tuple(v_502)) else fail-any) else fail-any)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_514)) then cipherstatepack(2-proj-3-tuple(v_514),minnonce) else fail-any),1-proj-3-tuple(v_514),3-proj-3-tuple(v_510)) else fail-any) else fail-any) else fail-any)) in
        {38}let v_516: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_502))) in
        {39}let v_517: bitstring = catch-fail(symmetricstateunpack(v_515)) in
        {40}let v_518: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_517),(if (success?(4-proj-7-tuple(v_502)) && success?(2-proj-7-tuple(v_502))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),4-proj-7-tuple(v_502)) else fail-any) else fail-any))) in
        {41}let v_519: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_517),(if (success?(4-proj-7-tuple(v_502)) && success?(2-proj-7-tuple(v_502))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),4-proj-7-tuple(v_502)) else fail-any) else fail-any))) in
        {42}let v_520: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_517),(if (success?(4-proj-7-tuple(v_502)) && success?(2-proj-7-tuple(v_502))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),4-proj-7-tuple(v_502)) else fail-any) else fail-any))) in
        {43}let v_521: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_502)) && success?(2-proj-7-tuple(v_502))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),4-proj-7-tuple(v_502)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_517))) then (if not-caught-fail(v_518) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then (v_518,v_519,v_520) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {44}let v_522: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_502)) && success?(2-proj-7-tuple(v_502))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),4-proj-7-tuple(v_502)) else fail-any) else fail-any)) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-3-tuple(v_517))))) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_521)) then cipherstatepack(2-proj-3-tuple(v_521),minnonce) else fail-any),1-proj-3-tuple(v_521),3-proj-3-tuple(v_517)) else fail-any) else fail-any) else fail-any)) in
        {45}let v_523: bitstring = catch-fail(symmetricstateunpack(v_522)) in
        {46}let v_524: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_523))) in
        {47}let v_525: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_524),2-proj-2-tuple(v_524),3-proj-3-tuple(v_523),msg_a(me,them))) in
        {48}let v_526: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_523))) in
        {49}let v_527: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_524))) && success?(1-proj-3-tuple(v_523))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then cipherstatepack(1-proj-2-tuple(v_526),increment_nonce(2-proj-2-tuple(v_524))) else fail-any) else fail-any)) in
        {50}let v_528: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_523)) && success?(1-proj-3-tuple(v_523))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-2-tuple(v_524))))) then (if not-caught-fail(v_525) then (if not-caught-fail(v_527) then (v_527,v_525) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {51}let v_529: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_528),2-proj-3-tuple(v_523),3-proj-3-tuple(v_523)))) in
        {52}let v_530: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_528)) && success?(symmetricstatepack(1-proj-2-tuple(v_528),2-proj-3-tuple(v_523),3-proj-3-tuple(v_523)))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then symmetricstatepack(1-proj-3-tuple(v_529),2-proj-3-tuple(v_529),hash(3-proj-3-tuple(v_529),2-proj-2-tuple(v_528))) else fail-any) else fail-any)) in
        {53}let v_531: bitstring = catch-fail((if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-2-tuple(v_528))))) then (if not-caught-fail(v_530) then (v_530,2-proj-2-tuple(v_528)) else fail-any) else fail-any) else fail-any)) in
        {54}let v_532: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_531),2-proj-7-tuple(v_502),v_505,4-proj-7-tuple(v_502),5-proj-7-tuple(v_502),6-proj-7-tuple(v_502),7-proj-7-tuple(v_502))) in
        {55}let v_533: bitstring = catch-fail(concat3(v_506,2-proj-3-tuple(v_503),2-proj-2-tuple(v_531))) in
        {56}let (hs_534: handshakestate,re_535: key,message_a: bitstring) = (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-7-tuple(v_502))))) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-3-tuple(v_503))))) then (if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (if not-caught-fail(v_508) then (if not-caught-fail(v_515) then (if not-caught-fail(v_522) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then (if not-caught-fail(v_532) then (if not-caught-fail(v_533) then (v_532,5-proj-7-tuple(v_502),v_533) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {57}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {58}insert statestore(me,them,statepack_b(hs_534));
        {59}out(pub, message_a)
    ) | (
        {96}get statestore(=me,=them,statepack_b(hs_536: handshakestate)) in
        {61}in(pub, message_b: bitstring);
        {62}let v_537: bitstring = catch-fail(handshakestateunpack(hs_536)) in
        {63}let v_538: bitstring = catch-fail(deconcat3(message_b)) in
        {64}let v_539: bool = catch-fail(true) in
        {65}let v_540: key = catch-fail(1-proj-3-tuple(v_538)) in
        {66}let v_541: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_537))) in
        {67}let v_542: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_537)) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack(1-proj-3-tuple(v_541),2-proj-3-tuple(v_541),hash(3-proj-3-tuple(v_541),v_540)) else fail-any) else fail-any)) in
        {68}let v_543: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_537))) in
        {69}let v_544: bitstring = catch-fail(symmetricstateunpack(v_542)) in
        {70}let v_545: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_544),(if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any))) in
        {71}let v_546: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_544),(if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any))) in
        {72}let v_547: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_544),(if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any))) in
        {73}let v_548: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_544))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (v_545,v_546,v_547) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {74}let v_549: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_548)) then cipherstatepack(2-proj-3-tuple(v_548),minnonce) else fail-any),1-proj-3-tuple(v_548),3-proj-3-tuple(v_544)) else fail-any) else fail-any) else fail-any)) in
        {75}let v_550: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_537))) in
        {76}let v_551: bitstring = catch-fail(symmetricstateunpack(v_549)) in
        {77}let v_552: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_551),(if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any))) in
        {78}let v_553: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_551),(if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any))) in
        {79}let v_554: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_551),(if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any))) in
        {80}let v_555: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_551))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (v_552,v_553,v_554) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_556: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any)) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_555)) then cipherstatepack(2-proj-3-tuple(v_555),minnonce) else fail-any),1-proj-3-tuple(v_555),3-proj-3-tuple(v_551)) else fail-any) else fail-any) else fail-any)) in
        {82}let v_557: bitstring = catch-fail(symmetricstateunpack(v_556)) in
        {83}let v_558: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_557))) in
        {84}let v_559: aead = catch-fail(decrypt(1-proj-2-tuple(v_558),2-proj-2-tuple(v_558),3-proj-3-tuple(v_557),3-proj-3-tuple(v_538))) in
        {85}let v_560: bitstring = catch-fail(aeadunpack(v_559)) in
        {86}let v_561: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_557))) in
        {87}let v_562: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_558))) && success?(1-proj-3-tuple(v_557))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-2-tuple(v_561))))) then cipherstatepack(1-proj-2-tuple(v_561),increment_nonce(2-proj-2-tuple(v_558))) else fail-any) else fail-any)) in
        {88}let v_563: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_538)) && (success?(3-proj-3-tuple(v_557)) && success?(1-proj-3-tuple(v_557)))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then (if not-caught-fail(v_559) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then (if not-caught-fail(v_562) then (v_562,3-proj-3-tuple(v_560),1-proj-3-tuple(v_560)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_564: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_563),2-proj-3-tuple(v_557),3-proj-3-tuple(v_557)))) in
        {90}let v_565: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_538)) && success?(symmetricstatepack(1-proj-3-tuple(v_563),2-proj-3-tuple(v_557),3-proj-3-tuple(v_557)))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),3-proj-3-tuple(v_538))) else fail-any) else fail-any)) in
        {91}let v_566: bitstring = catch-fail((if success?(3-proj-3-tuple(v_538)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if not-caught-fail(v_565) then (v_565,2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_567: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_566),2-proj-7-tuple(v_537),3-proj-7-tuple(v_537),4-proj-7-tuple(v_537),v_540,6-proj-7-tuple(v_537),7-proj-7-tuple(v_537))) in
        {93}let (hs_568: handshakestate,re_569: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-7-tuple(v_537))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if not-caught-fail(v_539) then (if not-caught-fail(v_540) then (if not-caught-fail(v_542) then (if not-caught-fail(v_549) then (if not-caught-fail(v_556) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if (v_539 && 3-proj-3-tuple(v_566)) then (if not-caught-fail(v_567) then (v_567,getpublickey(3-proj-7-tuple(v_537)),2-proj-3-tuple(v_566),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {94}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {95}insert statestore(me,them,statepack_c(hs_568))
    ) | (
        {114}get statestore(=me,=them,statepack_c(hs_570: handshakestate)) in
        {97}let v_571: bitstring = catch-fail(handshakestateunpack(hs_570)) in
        {98}let v_572: bitstring = catch-fail((empty,empty,empty)) in
        {99}let v_573: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_571))) in
        {100}let v_574: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {101}let v_575: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_574),2-proj-2-tuple(v_574),3-proj-3-tuple(v_573),msg_c(me,them))) in
        {102}let v_576: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {103}let v_577: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_574))) && success?(1-proj-3-tuple(v_573))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then cipherstatepack(1-proj-2-tuple(v_576),increment_nonce(2-proj-2-tuple(v_574))) else fail-any) else fail-any)) in
        {104}let v_578: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_573)) && success?(1-proj-3-tuple(v_573))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then (if not-caught-fail(v_575) then (if not-caught-fail(v_577) then (v_577,v_575) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {105}let v_579: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_578),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) in
        {106}let v_580: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_578)) && success?(symmetricstatepack(1-proj-2-tuple(v_578),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then symmetricstatepack(1-proj-3-tuple(v_579),2-proj-3-tuple(v_579),hash(3-proj-3-tuple(v_579),2-proj-2-tuple(v_578))) else fail-any) else fail-any)) in
        {107}let v_581: bitstring = catch-fail((if success?(1-proj-7-tuple(v_571)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-2-tuple(v_578))))) then (if not-caught-fail(v_580) then (v_580,2-proj-2-tuple(v_578)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_582: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_581),2-proj-7-tuple(v_571),3-proj-7-tuple(v_571),4-proj-7-tuple(v_571),5-proj-7-tuple(v_571),6-proj-7-tuple(v_571),7-proj-7-tuple(v_571))) in
        {109}let v_583: bitstring = catch-fail(concat3(1-proj-3-tuple(v_572),2-proj-3-tuple(v_572),2-proj-2-tuple(v_581))) in
        {110}let (hs_584: handshakestate,re_585: key,message_c: bitstring) = (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-7-tuple(v_571))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (v_582,5-proj-7-tuple(v_571),v_583) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {111}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {112}insert statestore(me,them,statepack_d(hs_584));
        {113}out(pub, message_c)
    ) | (
        {142}get statestore(=me,=them,statepack_d(hs_586: handshakestate)) in
        {115}in(pub, message_d: bitstring);
        {116}let v_587: bitstring = catch-fail(handshakestateunpack(hs_586)) in
        {117}let v_588: bitstring = catch-fail(deconcat3(message_d)) in
        {118}let v_589: bool = catch-fail(true) in
        {119}let v_590: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_587))) in
        {120}let v_591: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_590))) in
        {121}let v_592: aead = catch-fail(decrypt(1-proj-2-tuple(v_591),2-proj-2-tuple(v_591),3-proj-3-tuple(v_590),3-proj-3-tuple(v_588))) in
        {122}let v_593: bitstring = catch-fail(aeadunpack(v_592)) in
        {123}let v_594: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_590))) in
        {124}let v_595: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_591))) && success?(1-proj-3-tuple(v_590))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then cipherstatepack(1-proj-2-tuple(v_594),increment_nonce(2-proj-2-tuple(v_591))) else fail-any) else fail-any)) in
        {125}let v_596: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_588)) && (success?(3-proj-3-tuple(v_590)) && success?(1-proj-3-tuple(v_590)))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then (if not-caught-fail(v_592) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if not-caught-fail(v_595) then (v_595,3-proj-3-tuple(v_593),1-proj-3-tuple(v_593)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_597: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_590),3-proj-3-tuple(v_590)))) in
        {127}let v_598: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_588)) && success?(symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_590),3-proj-3-tuple(v_590)))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_597),hash(3-proj-3-tuple(v_597),3-proj-3-tuple(v_588))) else fail-any) else fail-any)) in
        {128}let v_599: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_588)) && success?(1-proj-7-tuple(v_587))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if not-caught-fail(v_598) then (v_598,2-proj-3-tuple(v_596),3-proj-3-tuple(v_596)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {129}let v_600: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_599),2-proj-7-tuple(v_587),3-proj-7-tuple(v_587),4-proj-7-tuple(v_587),5-proj-7-tuple(v_587),6-proj-7-tuple(v_587),7-proj-7-tuple(v_587))) in
        {130}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_599))) in
        {131}let v_602: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_601),zero)) in
        {132}let v_603: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_601),zero)) in
        {133}let v_604: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_601),zero)) in
        {134}let v_605: bitstring = catch-fail((if success?(2-proj-3-tuple(v_601)) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (v_602,v_603,v_604) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_606: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_605)) then cipherstatepack(1-proj-3-tuple(v_605),minnonce) else fail-any)) in
        {136}let v_607: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_605)) then cipherstatepack(2-proj-3-tuple(v_605),minnonce) else fail-any)) in
        {137}let v_608: bitstring = catch-fail((if success?(1-proj-3-tuple(v_599)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if not-caught-fail(v_606) then (if not-caught-fail(v_607) then (1-proj-3-tuple(v_599),v_606,v_607) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let (hs_609: handshakestate,re_610: key,plaintext_d: bitstring,valid_611: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-7-tuple(v_587))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if not-caught-fail(v_589) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (v_589 && 3-proj-3-tuple(v_599)) then (if not-caught-fail(v_600) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (v_600,getpublickey(3-proj-7-tuple(v_587)),2-proj-3-tuple(v_599),true,2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {139}event RecvMsg(me,them,stage_d,plaintext_d,valid_611);
        {140}insert statestore(me,them,statepack_e(hs_609));
        {141}event RecvEnd(valid_611)
    ) | (
        {143}event LeakS(phase0,me);
        {144}out(pub, key_s(me))
    ) | (
        {145}phase 1;
        {146}event LeakS(phase1,me);
        {147}out(pub, key_s(me))
    )
) | (
    {148}let them_612: principal = charlie in
    {149}let me_613: principal = alice in
    {150}let v_614: key = catch-fail(dhexp(key_s(me_613),g)) in
    {151}let s_615: keypair = (if not-caught-fail(v_614) then keypairpack(v_614,key_s(me_613)) else fail-any) in
    {152}out(pub, getpublickey(s_615));
    (
        {153}let e_616: keypair = keypairpack(empty,empty) in
        {154}let v_617: key = catch-fail(dhexp(key_s(them_612),g)) in
        {155}let rs_618: key = getpublickey((if not-caught-fail(v_617) then keypairpack(v_617,key_s(them_612)) else fail-any)) in
        {156}let re_619: key = empty in
        {157}let v_620: bitstring = catch-fail(hash(somename,empty)) in
        {158}let v_621: key = catch-fail(v_620) in
        {159}let v_622: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {160}let v_623: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then symmetricstatepack(v_622,v_621,v_620) else fail-any) else fail-any) else fail-any))) in
        {161}let v_624: symmetricstate = catch-fail((if success?((if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then symmetricstatepack(v_622,v_621,v_620) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack(1-proj-3-tuple(v_623),2-proj-3-tuple(v_623),hash(3-proj-3-tuple(v_623),empty)) else fail-any) else fail-any)) in
        {162}let v_625: bitstring = catch-fail(symmetricstateunpack(v_624)) in
        {163}let v_626: symmetricstate = catch-fail((if success?(getpublickey(s_615)) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then symmetricstatepack(1-proj-3-tuple(v_625),2-proj-3-tuple(v_625),hash(3-proj-3-tuple(v_625),getpublickey(s_615))) else fail-any) else fail-any)) in
        {164}let v_627: bitstring = catch-fail(symmetricstateunpack(v_626)) in
        {165}let v_628: symmetricstate = catch-fail((if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),rs_618)) else fail-any)) in
        {166}let hs_629: handshakestate = (if not-caught-fail(v_624) then (if not-caught-fail(v_626) then (if not-caught-fail(v_628) then handshakestatepack(v_628,s_615,e_616,rs_618,re_619,empty,true) else fail-any) else fail-any) else fail-any) in
        {167}insert statestore(me_613,them_612,statepack_a(hs_629))
    ) | (
        {205}get statestore(=me_613,=them_612,statepack_a(hs_630: handshakestate)) in
        {168}let v_631: bitstring = catch-fail(handshakestateunpack(hs_630)) in
        {169}let v_632: bitstring = catch-fail((empty,empty,empty)) in
        {170}new key_e_633[me_613,them_612]: key;
        {171}let v_634: key = catch-fail(dhexp(key_e_633,g)) in
        {172}let v_635: keypair = catch-fail((if not-caught-fail(v_634) then keypairpack(v_634,key_e_633) else fail-any)) in
        {173}let v_636: bitstring = catch-fail(getpublickey(v_635)) in
        {174}let v_637: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_631))) in
        {175}let v_638: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_631)) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then symmetricstatepack(1-proj-3-tuple(v_637),2-proj-3-tuple(v_637),hash(3-proj-3-tuple(v_637),v_636)) else fail-any) else fail-any)) in
        {176}let v_639: bitstring = catch-fail(keypairunpack(v_635)) in
        {177}let v_640: bitstring = catch-fail(symmetricstateunpack(v_638)) in
        {178}let v_641: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_640),(if success?(4-proj-7-tuple(v_631)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),4-proj-7-tuple(v_631)) else fail-any) else fail-any))) in
        {179}let v_642: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_640),(if success?(4-proj-7-tuple(v_631)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),4-proj-7-tuple(v_631)) else fail-any) else fail-any))) in
        {180}let v_643: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_640),(if success?(4-proj-7-tuple(v_631)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),4-proj-7-tuple(v_631)) else fail-any) else fail-any))) in
        {181}let v_644: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_631)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),4-proj-7-tuple(v_631)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_640))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (if not-caught-fail(v_643) then (v_641,v_642,v_643) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {182}let v_645: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_631)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),4-proj-7-tuple(v_631)) else fail-any) else fail-any)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_644)) then cipherstatepack(2-proj-3-tuple(v_644),minnonce) else fail-any),1-proj-3-tuple(v_644),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any)) in
        {183}let v_646: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_631))) in
        {184}let v_647: bitstring = catch-fail(symmetricstateunpack(v_645)) in
        {185}let v_648: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_647),(if (success?(4-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),4-proj-7-tuple(v_631)) else fail-any) else fail-any))) in
        {186}let v_649: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_647),(if (success?(4-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),4-proj-7-tuple(v_631)) else fail-any) else fail-any))) in
        {187}let v_650: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_647),(if (success?(4-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),4-proj-7-tuple(v_631)) else fail-any) else fail-any))) in
        {188}let v_651: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),4-proj-7-tuple(v_631)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_647))) then (if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then (v_648,v_649,v_650) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_652: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_631)) && success?(2-proj-7-tuple(v_631))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),4-proj-7-tuple(v_631)) else fail-any) else fail-any)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_651)) then cipherstatepack(2-proj-3-tuple(v_651),minnonce) else fail-any),1-proj-3-tuple(v_651),3-proj-3-tuple(v_647)) else fail-any) else fail-any) else fail-any)) in
        {190}let v_653: bitstring = catch-fail(symmetricstateunpack(v_652)) in
        {191}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_653))) in
        {192}let v_655: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_654),2-proj-2-tuple(v_654),3-proj-3-tuple(v_653),msg_a(me_613,them_612))) in
        {193}let v_656: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_653))) in
        {194}let v_657: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_654))) && success?(1-proj-3-tuple(v_653))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-2-tuple(v_656))))) then cipherstatepack(1-proj-2-tuple(v_656),increment_nonce(2-proj-2-tuple(v_654))) else fail-any) else fail-any)) in
        {195}let v_658: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_653)) && success?(1-proj-3-tuple(v_653))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then (if not-caught-fail(v_655) then (if not-caught-fail(v_657) then (v_657,v_655) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {196}let v_659: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_658),2-proj-3-tuple(v_653),3-proj-3-tuple(v_653)))) in
        {197}let v_660: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_658)) && success?(symmetricstatepack(1-proj-2-tuple(v_658),2-proj-3-tuple(v_653),3-proj-3-tuple(v_653)))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then symmetricstatepack(1-proj-3-tuple(v_659),2-proj-3-tuple(v_659),hash(3-proj-3-tuple(v_659),2-proj-2-tuple(v_658))) else fail-any) else fail-any)) in
        {198}let v_661: bitstring = catch-fail((if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-2-tuple(v_658))))) then (if not-caught-fail(v_660) then (v_660,2-proj-2-tuple(v_658)) else fail-any) else fail-any) else fail-any)) in
        {199}let v_662: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_661),2-proj-7-tuple(v_631),v_635,4-proj-7-tuple(v_631),5-proj-7-tuple(v_631),6-proj-7-tuple(v_631),7-proj-7-tuple(v_631))) in
        {200}let v_663: bitstring = catch-fail(concat3(v_636,2-proj-3-tuple(v_632),2-proj-2-tuple(v_661))) in
        {201}let (hs_664: handshakestate,re_665: key,message_a_666: bitstring) = (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-7-tuple(v_631))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (if not-caught-fail(v_638) then (if not-caught-fail(v_645) then (if not-caught-fail(v_652) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then (if not-caught-fail(v_662) then (if not-caught-fail(v_663) then (v_662,5-proj-7-tuple(v_631),v_663) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {202}event SendMsg(me_613,them_612,stage_a,msg_a(me_613,them_612),true);
        {203}insert statestore(me_613,them_612,statepack_b(hs_664));
        {204}out(pub, message_a_666)
    ) | (
        {241}get statestore(=me_613,=them_612,statepack_b(hs_667: handshakestate)) in
        {206}in(pub, message_b_668: bitstring);
        {207}let v_669: bitstring = catch-fail(handshakestateunpack(hs_667)) in
        {208}let v_670: bitstring = catch-fail(deconcat3(message_b_668)) in
        {209}let v_671: bool = catch-fail(true) in
        {210}let v_672: key = catch-fail(1-proj-3-tuple(v_670)) in
        {211}let v_673: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_669))) in
        {212}let v_674: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_669)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then symmetricstatepack(1-proj-3-tuple(v_673),2-proj-3-tuple(v_673),hash(3-proj-3-tuple(v_673),v_672)) else fail-any) else fail-any)) in
        {213}let v_675: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_669))) in
        {214}let v_676: bitstring = catch-fail(symmetricstateunpack(v_674)) in
        {215}let v_677: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_676),(if success?(3-proj-7-tuple(v_669)) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then dhexp(2-proj-2-tuple(v_675),v_672) else fail-any) else fail-any))) in
        {216}let v_678: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_676),(if success?(3-proj-7-tuple(v_669)) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then dhexp(2-proj-2-tuple(v_675),v_672) else fail-any) else fail-any))) in
        {217}let v_679: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_676),(if success?(3-proj-7-tuple(v_669)) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then dhexp(2-proj-2-tuple(v_675),v_672) else fail-any) else fail-any))) in
        {218}let v_680: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_669)) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then dhexp(2-proj-2-tuple(v_675),v_672) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_676))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then (v_677,v_678,v_679) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_681: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_669)) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then dhexp(2-proj-2-tuple(v_675),v_672) else fail-any) else fail-any)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_680)) then cipherstatepack(2-proj-3-tuple(v_680),minnonce) else fail-any),1-proj-3-tuple(v_680),3-proj-3-tuple(v_676)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_682: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_669))) in
        {221}let v_683: bitstring = catch-fail(symmetricstateunpack(v_681)) in
        {222}let v_684: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_683),(if success?(2-proj-7-tuple(v_669)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_672) else fail-any) else fail-any))) in
        {223}let v_685: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_683),(if success?(2-proj-7-tuple(v_669)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_672) else fail-any) else fail-any))) in
        {224}let v_686: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_683),(if success?(2-proj-7-tuple(v_669)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_672) else fail-any) else fail-any))) in
        {225}let v_687: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_669)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_672) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_683))) then (if not-caught-fail(v_684) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (v_684,v_685,v_686) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let v_688: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_669)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_672) else fail-any) else fail-any)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_687)) then cipherstatepack(2-proj-3-tuple(v_687),minnonce) else fail-any),1-proj-3-tuple(v_687),3-proj-3-tuple(v_683)) else fail-any) else fail-any) else fail-any)) in
        {227}let v_689: bitstring = catch-fail(symmetricstateunpack(v_688)) in
        {228}let v_690: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_689))) in
        {229}let v_691: aead = catch-fail(decrypt(1-proj-2-tuple(v_690),2-proj-2-tuple(v_690),3-proj-3-tuple(v_689),3-proj-3-tuple(v_670))) in
        {230}let v_692: bitstring = catch-fail(aeadunpack(v_691)) in
        {231}let v_693: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_689))) in
        {232}let v_694: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_690))) && success?(1-proj-3-tuple(v_689))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then cipherstatepack(1-proj-2-tuple(v_693),increment_nonce(2-proj-2-tuple(v_690))) else fail-any) else fail-any)) in
        {233}let v_695: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_670)) && (success?(3-proj-3-tuple(v_689)) && success?(1-proj-3-tuple(v_689)))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-2-tuple(v_690))))) then (if not-caught-fail(v_691) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then (if not-caught-fail(v_694) then (v_694,3-proj-3-tuple(v_692),1-proj-3-tuple(v_692)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {234}let v_696: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_695),2-proj-3-tuple(v_689),3-proj-3-tuple(v_689)))) in
        {235}let v_697: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_670)) && success?(symmetricstatepack(1-proj-3-tuple(v_695),2-proj-3-tuple(v_689),3-proj-3-tuple(v_689)))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then symmetricstatepack(1-proj-3-tuple(v_696),2-proj-3-tuple(v_696),hash(3-proj-3-tuple(v_696),3-proj-3-tuple(v_670))) else fail-any) else fail-any)) in
        {236}let v_698: bitstring = catch-fail((if success?(3-proj-3-tuple(v_670)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if not-caught-fail(v_697) then (v_697,2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_699: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_698),2-proj-7-tuple(v_669),3-proj-7-tuple(v_669),4-proj-7-tuple(v_669),v_672,6-proj-7-tuple(v_669),7-proj-7-tuple(v_669))) in
        {238}let (hs_700: handshakestate,re_701: key,plaintext_b_702: bitstring,valid_703: bool) = (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-7-tuple(v_669))))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if not-caught-fail(v_671) then (if not-caught-fail(v_672) then (if not-caught-fail(v_674) then (if not-caught-fail(v_681) then (if not-caught-fail(v_688) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if (v_671 && 3-proj-3-tuple(v_698)) then (if not-caught-fail(v_699) then (v_699,getpublickey(3-proj-7-tuple(v_669)),2-proj-3-tuple(v_698),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {239}event RecvMsg(me_613,them_612,stage_b,plaintext_b_702,valid_703);
        {240}insert statestore(me_613,them_612,statepack_c(hs_700))
    ) | (
        {259}get statestore(=me_613,=them_612,statepack_c(hs_704: handshakestate)) in
        {242}let v_705: bitstring = catch-fail(handshakestateunpack(hs_704)) in
        {243}let v_706: bitstring = catch-fail((empty,empty,empty)) in
        {244}let v_707: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_705))) in
        {245}let v_708: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_707))) in
        {246}let v_709: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_708),2-proj-2-tuple(v_708),3-proj-3-tuple(v_707),msg_c(me_613,them_612))) in
        {247}let v_710: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_707))) in
        {248}let v_711: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_708))) && success?(1-proj-3-tuple(v_707))) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then cipherstatepack(1-proj-2-tuple(v_710),increment_nonce(2-proj-2-tuple(v_708))) else fail-any) else fail-any)) in
        {249}let v_712: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_707)) && success?(1-proj-3-tuple(v_707))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then (if not-caught-fail(v_709) then (if not-caught-fail(v_711) then (v_711,v_709) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_713: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_712),2-proj-3-tuple(v_707),3-proj-3-tuple(v_707)))) in
        {251}let v_714: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_712)) && success?(symmetricstatepack(1-proj-2-tuple(v_712),2-proj-3-tuple(v_707),3-proj-3-tuple(v_707)))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then symmetricstatepack(1-proj-3-tuple(v_713),2-proj-3-tuple(v_713),hash(3-proj-3-tuple(v_713),2-proj-2-tuple(v_712))) else fail-any) else fail-any)) in
        {252}let v_715: bitstring = catch-fail((if success?(1-proj-7-tuple(v_705)) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-2-tuple(v_712))))) then (if not-caught-fail(v_714) then (v_714,2-proj-2-tuple(v_712)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_716: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_715),2-proj-7-tuple(v_705),3-proj-7-tuple(v_705),4-proj-7-tuple(v_705),5-proj-7-tuple(v_705),6-proj-7-tuple(v_705),7-proj-7-tuple(v_705))) in
        {254}let v_717: bitstring = catch-fail(concat3(1-proj-3-tuple(v_706),2-proj-3-tuple(v_706),2-proj-2-tuple(v_715))) in
        {255}let (hs_718: handshakestate,re_719: key,message_c_720: bitstring) = (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-7-tuple(v_705))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then (if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (v_716,5-proj-7-tuple(v_705),v_717) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {256}event SendMsg(me_613,them_612,stage_c,msg_c(me_613,them_612),true);
        {257}insert statestore(me_613,them_612,statepack_d(hs_718));
        {258}out(pub, message_c_720)
    ) | (
        {287}get statestore(=me_613,=them_612,statepack_d(hs_721: handshakestate)) in
        {260}in(pub, message_d_722: bitstring);
        {261}let v_723: bitstring = catch-fail(handshakestateunpack(hs_721)) in
        {262}let v_724: bitstring = catch-fail(deconcat3(message_d_722)) in
        {263}let v_725: bool = catch-fail(true) in
        {264}let v_726: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_723))) in
        {265}let v_727: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {266}let v_728: aead = catch-fail(decrypt(1-proj-2-tuple(v_727),2-proj-2-tuple(v_727),3-proj-3-tuple(v_726),3-proj-3-tuple(v_724))) in
        {267}let v_729: bitstring = catch-fail(aeadunpack(v_728)) in
        {268}let v_730: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {269}let v_731: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_727))) && success?(1-proj-3-tuple(v_726))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then cipherstatepack(1-proj-2-tuple(v_730),increment_nonce(2-proj-2-tuple(v_727))) else fail-any) else fail-any)) in
        {270}let v_732: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_724)) && (success?(3-proj-3-tuple(v_726)) && success?(1-proj-3-tuple(v_726)))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-2-tuple(v_727))))) then (if not-caught-fail(v_728) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if not-caught-fail(v_731) then (v_731,3-proj-3-tuple(v_729),1-proj-3-tuple(v_729)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {271}let v_733: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) in
        {272}let v_734: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_724)) && success?(symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_733),hash(3-proj-3-tuple(v_733),3-proj-3-tuple(v_724))) else fail-any) else fail-any)) in
        {273}let v_735: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_724)) && success?(1-proj-7-tuple(v_723))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if not-caught-fail(v_734) then (v_734,2-proj-3-tuple(v_732),3-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {274}let v_736: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_735),2-proj-7-tuple(v_723),3-proj-7-tuple(v_723),4-proj-7-tuple(v_723),5-proj-7-tuple(v_723),6-proj-7-tuple(v_723),7-proj-7-tuple(v_723))) in
        {275}let v_737: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_735))) in
        {276}let v_738: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_737),zero)) in
        {277}let v_739: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_737),zero)) in
        {278}let v_740: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_737),zero)) in
        {279}let v_741: bitstring = catch-fail((if success?(2-proj-3-tuple(v_737)) then (if not-caught-fail(v_738) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (v_738,v_739,v_740) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_742: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_741)) then cipherstatepack(1-proj-3-tuple(v_741),minnonce) else fail-any)) in
        {281}let v_743: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_741)) then cipherstatepack(2-proj-3-tuple(v_741),minnonce) else fail-any)) in
        {282}let v_744: bitstring = catch-fail((if success?(1-proj-3-tuple(v_735)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_742) then (if not-caught-fail(v_743) then (1-proj-3-tuple(v_735),v_742,v_743) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let (hs_745: handshakestate,re_746: key,plaintext_d_747: bitstring,valid_748: bool,cs1_749: cipherstate,cs2_750: cipherstate) = (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-7-tuple(v_723))))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if not-caught-fail(v_725) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if (v_725 && 3-proj-3-tuple(v_735)) then (if not-caught-fail(v_736) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (v_736,getpublickey(3-proj-7-tuple(v_723)),2-proj-3-tuple(v_735),true,2-proj-3-tuple(v_744),3-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {284}event RecvMsg(me_613,them_612,stage_d,plaintext_d_747,valid_748);
        {285}insert statestore(me_613,them_612,statepack_e(hs_745));
        {286}event RecvEnd(valid_748)
    ) | (
        {288}event LeakS(phase0,me_613);
        {289}out(pub, key_s(me_613))
    ) | (
        {290}phase 1;
        {291}event LeakS(phase1,me_613);
        {292}out(pub, key_s(me_613))
    )
) | (
    {293}let them_751: principal = alice in
    {294}let me_752: principal = bob in
    {295}let v_753: key = catch-fail(dhexp(key_s(me_752),g)) in
    {296}let s_754: keypair = (if not-caught-fail(v_753) then keypairpack(v_753,key_s(me_752)) else fail-any) in
    {297}out(pub, getpublickey(s_754));
    (
        {298}let e_755: keypair = keypairpack(empty,empty) in
        {299}let v_756: key = catch-fail(dhexp(key_s(them_751),g)) in
        {300}let rs_757: key = getpublickey((if not-caught-fail(v_756) then keypairpack(v_756,key_s(them_751)) else fail-any)) in
        {301}let re_758: key = empty in
        {302}let v_759: bitstring = catch-fail(hash(somename,empty)) in
        {303}let v_760: key = catch-fail(v_759) in
        {304}let v_761: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {305}let v_762: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then symmetricstatepack(v_761,v_760,v_759) else fail-any) else fail-any) else fail-any))) in
        {306}let v_763: symmetricstate = catch-fail((if success?((if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then symmetricstatepack(v_761,v_760,v_759) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_762),hash(3-proj-3-tuple(v_762),empty)) else fail-any) else fail-any)) in
        {307}let v_764: bitstring = catch-fail(symmetricstateunpack(v_763)) in
        {308}let v_765: symmetricstate = catch-fail((if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then symmetricstatepack(1-proj-3-tuple(v_764),2-proj-3-tuple(v_764),hash(3-proj-3-tuple(v_764),rs_757)) else fail-any)) in
        {309}let v_766: bitstring = catch-fail(symmetricstateunpack(v_765)) in
        {310}let v_767: symmetricstate = catch-fail((if success?(getpublickey(s_754)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then symmetricstatepack(1-proj-3-tuple(v_766),2-proj-3-tuple(v_766),hash(3-proj-3-tuple(v_766),getpublickey(s_754))) else fail-any) else fail-any)) in
        {311}let hs_768: handshakestate = (if not-caught-fail(v_763) then (if not-caught-fail(v_765) then (if not-caught-fail(v_767) then handshakestatepack(v_767,s_754,e_755,rs_757,re_758,empty,false) else fail-any) else fail-any) else fail-any) in
        {312}insert statestore(me_752,them_751,statepack_a(hs_768))
    ) | (
        {348}get statestore(=me_752,=them_751,statepack_a(hs_769: handshakestate)) in
        {313}in(pub, message_a_770: bitstring);
        {314}let v_771: bitstring = catch-fail(handshakestateunpack(hs_769)) in
        {315}let v_772: bitstring = catch-fail(deconcat3(message_a_770)) in
        {316}let v_773: bool = catch-fail(true) in
        {317}let v_774: key = catch-fail(1-proj-3-tuple(v_772)) in
        {318}let v_775: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_771))) in
        {319}let v_776: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_771)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then symmetricstatepack(1-proj-3-tuple(v_775),2-proj-3-tuple(v_775),hash(3-proj-3-tuple(v_775),v_774)) else fail-any) else fail-any)) in
        {320}let v_777: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_771))) in
        {321}let v_778: bitstring = catch-fail(symmetricstateunpack(v_776)) in
        {322}let v_779: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_778),(if success?(2-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any))) in
        {323}let v_780: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_778),(if success?(2-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any))) in
        {324}let v_781: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_778),(if success?(2-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any))) in
        {325}let v_782: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_778))) then (if not-caught-fail(v_779) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (v_779,v_780,v_781) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {326}let v_783: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_782)) then cipherstatepack(2-proj-3-tuple(v_782),minnonce) else fail-any),1-proj-3-tuple(v_782),3-proj-3-tuple(v_778)) else fail-any) else fail-any) else fail-any)) in
        {327}let v_784: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_771))) in
        {328}let v_785: bitstring = catch-fail(symmetricstateunpack(v_783)) in
        {329}let v_786: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_785),(if (success?(4-proj-7-tuple(v_771)) && success?(2-proj-7-tuple(v_771))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),4-proj-7-tuple(v_771)) else fail-any) else fail-any))) in
        {330}let v_787: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_785),(if (success?(4-proj-7-tuple(v_771)) && success?(2-proj-7-tuple(v_771))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),4-proj-7-tuple(v_771)) else fail-any) else fail-any))) in
        {331}let v_788: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_785),(if (success?(4-proj-7-tuple(v_771)) && success?(2-proj-7-tuple(v_771))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),4-proj-7-tuple(v_771)) else fail-any) else fail-any))) in
        {332}let v_789: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_771)) && success?(2-proj-7-tuple(v_771))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),4-proj-7-tuple(v_771)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_785))) then (if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (if not-caught-fail(v_788) then (v_786,v_787,v_788) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let v_790: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_771)) && success?(2-proj-7-tuple(v_771))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),4-proj-7-tuple(v_771)) else fail-any) else fail-any)) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_789)) then cipherstatepack(2-proj-3-tuple(v_789),minnonce) else fail-any),1-proj-3-tuple(v_789),3-proj-3-tuple(v_785)) else fail-any) else fail-any) else fail-any)) in
        {334}let v_791: bitstring = catch-fail(symmetricstateunpack(v_790)) in
        {335}let v_792: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {336}let v_793: aead = catch-fail(decrypt(1-proj-2-tuple(v_792),2-proj-2-tuple(v_792),3-proj-3-tuple(v_791),3-proj-3-tuple(v_772))) in
        {337}let v_794: bitstring = catch-fail(aeadunpack(v_793)) in
        {338}let v_795: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {339}let v_796: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_792))) && success?(1-proj-3-tuple(v_791))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then cipherstatepack(1-proj-2-tuple(v_795),increment_nonce(2-proj-2-tuple(v_792))) else fail-any) else fail-any)) in
        {340}let v_797: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_772)) && (success?(3-proj-3-tuple(v_791)) && success?(1-proj-3-tuple(v_791)))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then (if not-caught-fail(v_793) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (if not-caught-fail(v_796) then (v_796,3-proj-3-tuple(v_794),1-proj-3-tuple(v_794)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {341}let v_798: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) in
        {342}let v_799: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_772)) && success?(symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then symmetricstatepack(1-proj-3-tuple(v_798),2-proj-3-tuple(v_798),hash(3-proj-3-tuple(v_798),3-proj-3-tuple(v_772))) else fail-any) else fail-any)) in
        {343}let v_800: bitstring = catch-fail((if success?(3-proj-3-tuple(v_772)) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then (if not-caught-fail(v_799) then (v_799,2-proj-3-tuple(v_797),3-proj-3-tuple(v_797)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {344}let v_801: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_800),2-proj-7-tuple(v_771),3-proj-7-tuple(v_771),4-proj-7-tuple(v_771),v_774,6-proj-7-tuple(v_771),7-proj-7-tuple(v_771))) in
        {345}let (hs_802: handshakestate,re_803: key,plaintext_a: bitstring,valid_804: bool) = (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-7-tuple(v_771))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (if not-caught-fail(v_776) then (if not-caught-fail(v_783) then (if not-caught-fail(v_790) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then (if (v_773 && 3-proj-3-tuple(v_800)) then (if not-caught-fail(v_801) then (v_801,getpublickey(3-proj-7-tuple(v_771)),2-proj-3-tuple(v_800),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {346}event RecvMsg(me_752,them_751,stage_a,plaintext_a,valid_804);
        {347}insert statestore(me_752,them_751,statepack_b(hs_802))
    ) | (
        {386}get statestore(=me_752,=them_751,statepack_b(hs_805: handshakestate)) in
        {349}let v_806: bitstring = catch-fail(handshakestateunpack(hs_805)) in
        {350}let v_807: bitstring = catch-fail((empty,empty,empty)) in
        {351}new key_e_808[me_752,them_751]: key;
        {352}let v_809: key = catch-fail(dhexp(key_e_808,g)) in
        {353}let v_810: keypair = catch-fail((if not-caught-fail(v_809) then keypairpack(v_809,key_e_808) else fail-any)) in
        {354}let v_811: bitstring = catch-fail(getpublickey(v_810)) in
        {355}let v_812: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_806))) in
        {356}let v_813: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_806)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then symmetricstatepack(1-proj-3-tuple(v_812),2-proj-3-tuple(v_812),hash(3-proj-3-tuple(v_812),v_811)) else fail-any) else fail-any)) in
        {357}let v_814: bitstring = catch-fail(keypairunpack(v_810)) in
        {358}let v_815: bitstring = catch-fail(symmetricstateunpack(v_813)) in
        {359}let v_816: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_815),(if success?(5-proj-7-tuple(v_806)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_806)) else fail-any) else fail-any))) in
        {360}let v_817: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_815),(if success?(5-proj-7-tuple(v_806)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_806)) else fail-any) else fail-any))) in
        {361}let v_818: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_815),(if success?(5-proj-7-tuple(v_806)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_806)) else fail-any) else fail-any))) in
        {362}let v_819: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_806)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_806)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_815))) then (if not-caught-fail(v_816) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (v_816,v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {363}let v_820: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_806)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then dhexp(2-proj-2-tuple(v_814),5-proj-7-tuple(v_806)) else fail-any) else fail-any)) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_819)) then cipherstatepack(2-proj-3-tuple(v_819),minnonce) else fail-any),1-proj-3-tuple(v_819),3-proj-3-tuple(v_815)) else fail-any) else fail-any) else fail-any)) in
        {364}let v_821: bitstring = catch-fail(keypairunpack(v_810)) in
        {365}let v_822: bitstring = catch-fail(symmetricstateunpack(v_820)) in
        {366}let v_823: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_822),(if success?(4-proj-7-tuple(v_806)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),4-proj-7-tuple(v_806)) else fail-any) else fail-any))) in
        {367}let v_824: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_822),(if success?(4-proj-7-tuple(v_806)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),4-proj-7-tuple(v_806)) else fail-any) else fail-any))) in
        {368}let v_825: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_822),(if success?(4-proj-7-tuple(v_806)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),4-proj-7-tuple(v_806)) else fail-any) else fail-any))) in
        {369}let v_826: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_806)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),4-proj-7-tuple(v_806)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_822))) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (if not-caught-fail(v_825) then (v_823,v_824,v_825) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {370}let v_827: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_806)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then dhexp(2-proj-2-tuple(v_821),4-proj-7-tuple(v_806)) else fail-any) else fail-any)) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_826)) then cipherstatepack(2-proj-3-tuple(v_826),minnonce) else fail-any),1-proj-3-tuple(v_826),3-proj-3-tuple(v_822)) else fail-any) else fail-any) else fail-any)) in
        {371}let v_828: bitstring = catch-fail(symmetricstateunpack(v_827)) in
        {372}let v_829: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_828))) in
        {373}let v_830: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_829),2-proj-2-tuple(v_829),3-proj-3-tuple(v_828),msg_b(me_752,them_751))) in
        {374}let v_831: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_828))) in
        {375}let v_832: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_829))) && success?(1-proj-3-tuple(v_828))) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-2-tuple(v_831))))) then cipherstatepack(1-proj-2-tuple(v_831),increment_nonce(2-proj-2-tuple(v_829))) else fail-any) else fail-any)) in
        {376}let v_833: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_828)) && success?(1-proj-3-tuple(v_828))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-2-tuple(v_829))))) then (if not-caught-fail(v_830) then (if not-caught-fail(v_832) then (v_832,v_830) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_834: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_833),2-proj-3-tuple(v_828),3-proj-3-tuple(v_828)))) in
        {378}let v_835: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_833)) && success?(symmetricstatepack(1-proj-2-tuple(v_833),2-proj-3-tuple(v_828),3-proj-3-tuple(v_828)))) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_834),hash(3-proj-3-tuple(v_834),2-proj-2-tuple(v_833))) else fail-any) else fail-any)) in
        {379}let v_836: bitstring = catch-fail((if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then (if not-caught-fail(v_835) then (v_835,2-proj-2-tuple(v_833)) else fail-any) else fail-any) else fail-any)) in
        {380}let v_837: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_836),2-proj-7-tuple(v_806),v_810,4-proj-7-tuple(v_806),5-proj-7-tuple(v_806),6-proj-7-tuple(v_806),7-proj-7-tuple(v_806))) in
        {381}let v_838: bitstring = catch-fail(concat3(v_811,2-proj-3-tuple(v_807),2-proj-2-tuple(v_836))) in
        {382}let (hs_839: handshakestate,re_840: key,message_b_841: bitstring) = (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-7-tuple(v_806))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if not-caught-fail(v_810) then (if not-caught-fail(v_811) then (if not-caught-fail(v_813) then (if not-caught-fail(v_820) then (if not-caught-fail(v_827) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (v_837,5-proj-7-tuple(v_806),v_838) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {383}event SendMsg(me_752,them_751,stage_b,msg_b(me_752,them_751),true);
        {384}insert statestore(me_752,them_751,statepack_c(hs_839));
        {385}out(pub, message_b_841)
    ) | (
        {405}get statestore(=me_752,=them_751,statepack_c(hs_842: handshakestate)) in
        {387}in(pub, message_c_843: bitstring);
        {388}let v_844: bitstring = catch-fail(handshakestateunpack(hs_842)) in
        {389}let v_845: bitstring = catch-fail(deconcat3(message_c_843)) in
        {390}let v_846: bool = catch-fail(true) in
        {391}let v_847: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_844))) in
        {392}let v_848: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_847))) in
        {393}let v_849: aead = catch-fail(decrypt(1-proj-2-tuple(v_848),2-proj-2-tuple(v_848),3-proj-3-tuple(v_847),3-proj-3-tuple(v_845))) in
        {394}let v_850: bitstring = catch-fail(aeadunpack(v_849)) in
        {395}let v_851: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_847))) in
        {396}let v_852: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_848))) && success?(1-proj-3-tuple(v_847))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then cipherstatepack(1-proj-2-tuple(v_851),increment_nonce(2-proj-2-tuple(v_848))) else fail-any) else fail-any)) in
        {397}let v_853: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_845)) && (success?(3-proj-3-tuple(v_847)) && success?(1-proj-3-tuple(v_847)))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then (if not-caught-fail(v_849) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if not-caught-fail(v_852) then (v_852,3-proj-3-tuple(v_850),1-proj-3-tuple(v_850)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {398}let v_854: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_853),2-proj-3-tuple(v_847),3-proj-3-tuple(v_847)))) in
        {399}let v_855: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_845)) && success?(symmetricstatepack(1-proj-3-tuple(v_853),2-proj-3-tuple(v_847),3-proj-3-tuple(v_847)))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_854),hash(3-proj-3-tuple(v_854),3-proj-3-tuple(v_845))) else fail-any) else fail-any)) in
        {400}let v_856: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_845)) && success?(1-proj-7-tuple(v_844))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then (if not-caught-fail(v_855) then (v_855,2-proj-3-tuple(v_853),3-proj-3-tuple(v_853)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {401}let v_857: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_856),2-proj-7-tuple(v_844),3-proj-7-tuple(v_844),4-proj-7-tuple(v_844),5-proj-7-tuple(v_844),6-proj-7-tuple(v_844),7-proj-7-tuple(v_844))) in
        {402}let (hs_858: handshakestate,re_859: key,plaintext_c: bitstring,valid_860: bool) = (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-7-tuple(v_844))))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if not-caught-fail(v_846) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (v_846 && 3-proj-3-tuple(v_856)) then (if not-caught-fail(v_857) then (v_857,getpublickey(3-proj-7-tuple(v_844)),2-proj-3-tuple(v_856),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {403}event RecvMsg(me_752,them_751,stage_c,plaintext_c,valid_860);
        {404}insert statestore(me_752,them_751,statepack_d(hs_858))
    ) | (
        {431}get statestore(=me_752,=them_751,statepack_d(hs_861: handshakestate)) in
        {406}let v_862: bitstring = catch-fail(handshakestateunpack(hs_861)) in
        {407}let v_863: bitstring = catch-fail((empty,empty,empty)) in
        {408}let v_864: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_862))) in
        {409}let v_865: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {410}let v_866: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_865),2-proj-2-tuple(v_865),3-proj-3-tuple(v_864),msg_d(me_752,them_751))) in
        {411}let v_867: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {412}let v_868: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_865))) && success?(1-proj-3-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then cipherstatepack(1-proj-2-tuple(v_867),increment_nonce(2-proj-2-tuple(v_865))) else fail-any) else fail-any)) in
        {413}let v_869: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_864)) && success?(1-proj-3-tuple(v_864))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then (if not-caught-fail(v_866) then (if not-caught-fail(v_868) then (v_868,v_866) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {414}let v_870: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_869),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) in
        {415}let v_871: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_869)) && success?(symmetricstatepack(1-proj-2-tuple(v_869),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_870),hash(3-proj-3-tuple(v_870),2-proj-2-tuple(v_869))) else fail-any) else fail-any)) in
        {416}let v_872: bitstring = catch-fail((if success?(1-proj-7-tuple(v_862)) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then (if not-caught-fail(v_871) then (v_871,2-proj-2-tuple(v_869)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {417}let v_873: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_872),2-proj-7-tuple(v_862),3-proj-7-tuple(v_862),4-proj-7-tuple(v_862),5-proj-7-tuple(v_862),6-proj-7-tuple(v_862),7-proj-7-tuple(v_862))) in
        {418}let v_874: bitstring = catch-fail(concat3(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),2-proj-2-tuple(v_872))) in
        {419}let v_875: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_872))) in
        {420}let v_876: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_875),zero)) in
        {421}let v_877: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_875),zero)) in
        {422}let v_878: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_875),zero)) in
        {423}let v_879: bitstring = catch-fail((if success?(2-proj-3-tuple(v_875)) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then (if not-caught-fail(v_878) then (v_876,v_877,v_878) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_880: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_879)) then cipherstatepack(1-proj-3-tuple(v_879),minnonce) else fail-any)) in
        {425}let v_881: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_879)) then cipherstatepack(2-proj-3-tuple(v_879),minnonce) else fail-any)) in
        {426}let v_882: bitstring = catch-fail((if success?(1-proj-2-tuple(v_872)) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if not-caught-fail(v_880) then (if not-caught-fail(v_881) then (1-proj-2-tuple(v_872),v_880,v_881) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let (hs_883: handshakestate,re_884: key,message_d_885: bitstring,cs1_886: cipherstate,cs2_887: cipherstate) = (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-7-tuple(v_862))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (v_873,5-proj-7-tuple(v_862),v_874,2-proj-3-tuple(v_882),3-proj-3-tuple(v_882)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {428}event SendMsg(me_752,them_751,stage_d,msg_d(me_752,them_751),true);
        {429}insert statestore(me_752,them_751,statepack_e(hs_883));
        {430}out(pub, message_d_885)
    ) | (
        {432}event LeakS(phase0,me_752);
        {433}out(pub, key_s(me_752))
    ) | (
        {434}phase 1;
        {435}event LeakS(phase1,me_752);
        {436}out(pub, key_s(me_752))
    )
) | (
    {437}let them_888: principal = charlie in
    {438}let me_889: principal = bob in
    {439}let v_890: key = catch-fail(dhexp(key_s(me_889),g)) in
    {440}let s_891: keypair = (if not-caught-fail(v_890) then keypairpack(v_890,key_s(me_889)) else fail-any) in
    {441}out(pub, getpublickey(s_891));
    (
        {442}let e_892: keypair = keypairpack(empty,empty) in
        {443}let v_893: key = catch-fail(dhexp(key_s(them_888),g)) in
        {444}let rs_894: key = getpublickey((if not-caught-fail(v_893) then keypairpack(v_893,key_s(them_888)) else fail-any)) in
        {445}let re_895: key = empty in
        {446}let v_896: bitstring = catch-fail(hash(somename,empty)) in
        {447}let v_897: key = catch-fail(v_896) in
        {448}let v_898: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {449}let v_899: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then symmetricstatepack(v_898,v_897,v_896) else fail-any) else fail-any) else fail-any))) in
        {450}let v_900: symmetricstate = catch-fail((if success?((if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then symmetricstatepack(v_898,v_897,v_896) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_899),hash(3-proj-3-tuple(v_899),empty)) else fail-any) else fail-any)) in
        {451}let v_901: bitstring = catch-fail(symmetricstateunpack(v_900)) in
        {452}let v_902: symmetricstate = catch-fail((if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_901),hash(3-proj-3-tuple(v_901),rs_894)) else fail-any)) in
        {453}let v_903: bitstring = catch-fail(symmetricstateunpack(v_902)) in
        {454}let v_904: symmetricstate = catch-fail((if success?(getpublickey(s_891)) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then symmetricstatepack(1-proj-3-tuple(v_903),2-proj-3-tuple(v_903),hash(3-proj-3-tuple(v_903),getpublickey(s_891))) else fail-any) else fail-any)) in
        {455}let hs_905: handshakestate = (if not-caught-fail(v_900) then (if not-caught-fail(v_902) then (if not-caught-fail(v_904) then handshakestatepack(v_904,s_891,e_892,rs_894,re_895,empty,false) else fail-any) else fail-any) else fail-any) in
        {456}insert statestore(me_889,them_888,statepack_a(hs_905))
    ) | (
        {492}get statestore(=me_889,=them_888,statepack_a(hs_906: handshakestate)) in
        {457}in(pub, message_a_907: bitstring);
        {458}let v_908: bitstring = catch-fail(handshakestateunpack(hs_906)) in
        {459}let v_909: bitstring = catch-fail(deconcat3(message_a_907)) in
        {460}let v_910: bool = catch-fail(true) in
        {461}let v_911: key = catch-fail(1-proj-3-tuple(v_909)) in
        {462}let v_912: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_908))) in
        {463}let v_913: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_908)) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then symmetricstatepack(1-proj-3-tuple(v_912),2-proj-3-tuple(v_912),hash(3-proj-3-tuple(v_912),v_911)) else fail-any) else fail-any)) in
        {464}let v_914: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_908))) in
        {465}let v_915: bitstring = catch-fail(symmetricstateunpack(v_913)) in
        {466}let v_916: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_915),(if success?(2-proj-7-tuple(v_908)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),v_911) else fail-any) else fail-any))) in
        {467}let v_917: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_915),(if success?(2-proj-7-tuple(v_908)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),v_911) else fail-any) else fail-any))) in
        {468}let v_918: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_915),(if success?(2-proj-7-tuple(v_908)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),v_911) else fail-any) else fail-any))) in
        {469}let v_919: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_908)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),v_911) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_915))) then (if not-caught-fail(v_916) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (v_916,v_917,v_918) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {470}let v_920: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_908)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),v_911) else fail-any) else fail-any)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_919)) then cipherstatepack(2-proj-3-tuple(v_919),minnonce) else fail-any),1-proj-3-tuple(v_919),3-proj-3-tuple(v_915)) else fail-any) else fail-any) else fail-any)) in
        {471}let v_921: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_908))) in
        {472}let v_922: bitstring = catch-fail(symmetricstateunpack(v_920)) in
        {473}let v_923: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_922),(if (success?(4-proj-7-tuple(v_908)) && success?(2-proj-7-tuple(v_908))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_908)) else fail-any) else fail-any))) in
        {474}let v_924: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_922),(if (success?(4-proj-7-tuple(v_908)) && success?(2-proj-7-tuple(v_908))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_908)) else fail-any) else fail-any))) in
        {475}let v_925: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_922),(if (success?(4-proj-7-tuple(v_908)) && success?(2-proj-7-tuple(v_908))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_908)) else fail-any) else fail-any))) in
        {476}let v_926: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_908)) && success?(2-proj-7-tuple(v_908))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_908)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_922))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (if not-caught-fail(v_925) then (v_923,v_924,v_925) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {477}let v_927: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_908)) && success?(2-proj-7-tuple(v_908))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_908)) else fail-any) else fail-any)) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_926)) then cipherstatepack(2-proj-3-tuple(v_926),minnonce) else fail-any),1-proj-3-tuple(v_926),3-proj-3-tuple(v_922)) else fail-any) else fail-any) else fail-any)) in
        {478}let v_928: bitstring = catch-fail(symmetricstateunpack(v_927)) in
        {479}let v_929: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_928))) in
        {480}let v_930: aead = catch-fail(decrypt(1-proj-2-tuple(v_929),2-proj-2-tuple(v_929),3-proj-3-tuple(v_928),3-proj-3-tuple(v_909))) in
        {481}let v_931: bitstring = catch-fail(aeadunpack(v_930)) in
        {482}let v_932: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_928))) in
        {483}let v_933: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_929))) && success?(1-proj-3-tuple(v_928))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then cipherstatepack(1-proj-2-tuple(v_932),increment_nonce(2-proj-2-tuple(v_929))) else fail-any) else fail-any)) in
        {484}let v_934: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_909)) && (success?(3-proj-3-tuple(v_928)) && success?(1-proj-3-tuple(v_928)))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_930) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if not-caught-fail(v_933) then (v_933,3-proj-3-tuple(v_931),1-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_935: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)))) in
        {486}let v_936: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_909)) && success?(symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_935),hash(3-proj-3-tuple(v_935),3-proj-3-tuple(v_909))) else fail-any) else fail-any)) in
        {487}let v_937: bitstring = catch-fail((if success?(3-proj-3-tuple(v_909)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if not-caught-fail(v_936) then (v_936,2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {488}let v_938: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_937),2-proj-7-tuple(v_908),3-proj-7-tuple(v_908),4-proj-7-tuple(v_908),v_911,6-proj-7-tuple(v_908),7-proj-7-tuple(v_908))) in
        {489}let (hs_939: handshakestate,re_940: key,plaintext_a_941: bitstring,valid_942: bool) = (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-7-tuple(v_908))))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if not-caught-fail(v_910) then (if not-caught-fail(v_911) then (if not-caught-fail(v_913) then (if not-caught-fail(v_920) then (if not-caught-fail(v_927) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if (v_910 && 3-proj-3-tuple(v_937)) then (if not-caught-fail(v_938) then (v_938,getpublickey(3-proj-7-tuple(v_908)),2-proj-3-tuple(v_937),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {490}event RecvMsg(me_889,them_888,stage_a,plaintext_a_941,valid_942);
        {491}insert statestore(me_889,them_888,statepack_b(hs_939))
    ) | (
        {530}get statestore(=me_889,=them_888,statepack_b(hs_943: handshakestate)) in
        {493}let v_944: bitstring = catch-fail(handshakestateunpack(hs_943)) in
        {494}let v_945: bitstring = catch-fail((empty,empty,empty)) in
        {495}new key_e_946[me_889,them_888]: key;
        {496}let v_947: key = catch-fail(dhexp(key_e_946,g)) in
        {497}let v_948: keypair = catch-fail((if not-caught-fail(v_947) then keypairpack(v_947,key_e_946) else fail-any)) in
        {498}let v_949: bitstring = catch-fail(getpublickey(v_948)) in
        {499}let v_950: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_944))) in
        {500}let v_951: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_944)) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then symmetricstatepack(1-proj-3-tuple(v_950),2-proj-3-tuple(v_950),hash(3-proj-3-tuple(v_950),v_949)) else fail-any) else fail-any)) in
        {501}let v_952: bitstring = catch-fail(keypairunpack(v_948)) in
        {502}let v_953: bitstring = catch-fail(symmetricstateunpack(v_951)) in
        {503}let v_954: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_953),(if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_944)) else fail-any) else fail-any))) in
        {504}let v_955: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_953),(if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_944)) else fail-any) else fail-any))) in
        {505}let v_956: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_953),(if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_944)) else fail-any) else fail-any))) in
        {506}let v_957: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_944)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_953))) then (if not-caught-fail(v_954) then (if not-caught-fail(v_955) then (if not-caught-fail(v_956) then (v_954,v_955,v_956) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {507}let v_958: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then dhexp(2-proj-2-tuple(v_952),5-proj-7-tuple(v_944)) else fail-any) else fail-any)) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_957)) then cipherstatepack(2-proj-3-tuple(v_957),minnonce) else fail-any),1-proj-3-tuple(v_957),3-proj-3-tuple(v_953)) else fail-any) else fail-any) else fail-any)) in
        {508}let v_959: bitstring = catch-fail(keypairunpack(v_948)) in
        {509}let v_960: bitstring = catch-fail(symmetricstateunpack(v_958)) in
        {510}let v_961: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_960),(if success?(4-proj-7-tuple(v_944)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),4-proj-7-tuple(v_944)) else fail-any) else fail-any))) in
        {511}let v_962: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_960),(if success?(4-proj-7-tuple(v_944)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),4-proj-7-tuple(v_944)) else fail-any) else fail-any))) in
        {512}let v_963: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_960),(if success?(4-proj-7-tuple(v_944)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),4-proj-7-tuple(v_944)) else fail-any) else fail-any))) in
        {513}let v_964: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_944)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),4-proj-7-tuple(v_944)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_960))) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (v_961,v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {514}let v_965: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_944)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then dhexp(2-proj-2-tuple(v_959),4-proj-7-tuple(v_944)) else fail-any) else fail-any)) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_964)) then cipherstatepack(2-proj-3-tuple(v_964),minnonce) else fail-any),1-proj-3-tuple(v_964),3-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any)) in
        {515}let v_966: bitstring = catch-fail(symmetricstateunpack(v_965)) in
        {516}let v_967: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_966))) in
        {517}let v_968: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_967),2-proj-2-tuple(v_967),3-proj-3-tuple(v_966),msg_b(me_889,them_888))) in
        {518}let v_969: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_966))) in
        {519}let v_970: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_967))) && success?(1-proj-3-tuple(v_966))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-2-tuple(v_969))))) then cipherstatepack(1-proj-2-tuple(v_969),increment_nonce(2-proj-2-tuple(v_967))) else fail-any) else fail-any)) in
        {520}let v_971: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_966)) && success?(1-proj-3-tuple(v_966))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then (if not-caught-fail(v_968) then (if not-caught-fail(v_970) then (v_970,v_968) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {521}let v_972: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_971),2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)))) in
        {522}let v_973: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_971)) && success?(symmetricstatepack(1-proj-2-tuple(v_971),2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_972),hash(3-proj-3-tuple(v_972),2-proj-2-tuple(v_971))) else fail-any) else fail-any)) in
        {523}let v_974: bitstring = catch-fail((if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-2-tuple(v_971))))) then (if not-caught-fail(v_973) then (v_973,2-proj-2-tuple(v_971)) else fail-any) else fail-any) else fail-any)) in
        {524}let v_975: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_974),2-proj-7-tuple(v_944),v_948,4-proj-7-tuple(v_944),5-proj-7-tuple(v_944),6-proj-7-tuple(v_944),7-proj-7-tuple(v_944))) in
        {525}let v_976: bitstring = catch-fail(concat3(v_949,2-proj-3-tuple(v_945),2-proj-2-tuple(v_974))) in
        {526}let (hs_977: handshakestate,re_978: key,message_b_979: bitstring) = (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-7-tuple(v_944))))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then (if not-caught-fail(v_951) then (if not-caught-fail(v_958) then (if not-caught-fail(v_965) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-2-tuple(v_974))))) then (if not-caught-fail(v_975) then (if not-caught-fail(v_976) then (v_975,5-proj-7-tuple(v_944),v_976) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {527}event SendMsg(me_889,them_888,stage_b,msg_b(me_889,them_888),true);
        {528}insert statestore(me_889,them_888,statepack_c(hs_977));
        {529}out(pub, message_b_979)
    ) | (
        {549}get statestore(=me_889,=them_888,statepack_c(hs_980: handshakestate)) in
        {531}in(pub, message_c_981: bitstring);
        {532}let v_982: bitstring = catch-fail(handshakestateunpack(hs_980)) in
        {533}let v_983: bitstring = catch-fail(deconcat3(message_c_981)) in
        {534}let v_984: bool = catch-fail(true) in
        {535}let v_985: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_982))) in
        {536}let v_986: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_985))) in
        {537}let v_987: aead = catch-fail(decrypt(1-proj-2-tuple(v_986),2-proj-2-tuple(v_986),3-proj-3-tuple(v_985),3-proj-3-tuple(v_983))) in
        {538}let v_988: bitstring = catch-fail(aeadunpack(v_987)) in
        {539}let v_989: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_985))) in
        {540}let v_990: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_986))) && success?(1-proj-3-tuple(v_985))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then cipherstatepack(1-proj-2-tuple(v_989),increment_nonce(2-proj-2-tuple(v_986))) else fail-any) else fail-any)) in
        {541}let v_991: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_983)) && (success?(3-proj-3-tuple(v_985)) && success?(1-proj-3-tuple(v_985)))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-2-tuple(v_986))))) then (if not-caught-fail(v_987) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (if not-caught-fail(v_990) then (v_990,3-proj-3-tuple(v_988),1-proj-3-tuple(v_988)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {542}let v_992: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_991),2-proj-3-tuple(v_985),3-proj-3-tuple(v_985)))) in
        {543}let v_993: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_983)) && success?(symmetricstatepack(1-proj-3-tuple(v_991),2-proj-3-tuple(v_985),3-proj-3-tuple(v_985)))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then symmetricstatepack(1-proj-3-tuple(v_992),2-proj-3-tuple(v_992),hash(3-proj-3-tuple(v_992),3-proj-3-tuple(v_983))) else fail-any) else fail-any)) in
        {544}let v_994: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_983)) && success?(1-proj-7-tuple(v_982))) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-3-tuple(v_985))))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-3-tuple(v_991))))) then (if not-caught-fail(v_993) then (v_993,2-proj-3-tuple(v_991),3-proj-3-tuple(v_991)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {545}let v_995: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_994),2-proj-7-tuple(v_982),3-proj-7-tuple(v_982),4-proj-7-tuple(v_982),5-proj-7-tuple(v_982),6-proj-7-tuple(v_982),7-proj-7-tuple(v_982))) in
        {546}let (hs_996: handshakestate,re_997: key,plaintext_c_998: bitstring,valid_999: bool) = (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-7-tuple(v_982))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if not-caught-fail(v_984) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then (if (v_984 && 3-proj-3-tuple(v_994)) then (if not-caught-fail(v_995) then (v_995,getpublickey(3-proj-7-tuple(v_982)),2-proj-3-tuple(v_994),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {547}event RecvMsg(me_889,them_888,stage_c,plaintext_c_998,valid_999);
        {548}insert statestore(me_889,them_888,statepack_d(hs_996))
    ) | (
        {575}get statestore(=me_889,=them_888,statepack_d(hs_1000: handshakestate)) in
        {550}let v_1001: bitstring = catch-fail(handshakestateunpack(hs_1000)) in
        {551}let v_1002: bitstring = catch-fail((empty,empty,empty)) in
        {552}let v_1003: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1001))) in
        {553}let v_1004: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1003))) in
        {554}let v_1005: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1004),2-proj-2-tuple(v_1004),3-proj-3-tuple(v_1003),msg_d(me_889,them_888))) in
        {555}let v_1006: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1003))) in
        {556}let v_1007: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1004))) && success?(1-proj-3-tuple(v_1003))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then cipherstatepack(1-proj-2-tuple(v_1006),increment_nonce(2-proj-2-tuple(v_1004))) else fail-any) else fail-any)) in
        {557}let v_1008: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1003)) && success?(1-proj-3-tuple(v_1003))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1007) then (v_1007,v_1005) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1009: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1008),2-proj-3-tuple(v_1003),3-proj-3-tuple(v_1003)))) in
        {559}let v_1010: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1008)) && success?(symmetricstatepack(1-proj-2-tuple(v_1008),2-proj-3-tuple(v_1003),3-proj-3-tuple(v_1003)))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then symmetricstatepack(1-proj-3-tuple(v_1009),2-proj-3-tuple(v_1009),hash(3-proj-3-tuple(v_1009),2-proj-2-tuple(v_1008))) else fail-any) else fail-any)) in
        {560}let v_1011: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1001)) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-2-tuple(v_1008))))) then (if not-caught-fail(v_1010) then (v_1010,2-proj-2-tuple(v_1008)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1012: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1011),2-proj-7-tuple(v_1001),3-proj-7-tuple(v_1001),4-proj-7-tuple(v_1001),5-proj-7-tuple(v_1001),6-proj-7-tuple(v_1001),7-proj-7-tuple(v_1001))) in
        {562}let v_1013: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_1002),2-proj-2-tuple(v_1011))) in
        {563}let v_1014: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1011))) in
        {564}let v_1015: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1014),zero)) in
        {565}let v_1016: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1014),zero)) in
        {566}let v_1017: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1014),zero)) in
        {567}let v_1018: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1014)) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then (if not-caught-fail(v_1017) then (v_1015,v_1016,v_1017) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1019: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1018)) then cipherstatepack(1-proj-3-tuple(v_1018),minnonce) else fail-any)) in
        {569}let v_1020: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1018)) then cipherstatepack(2-proj-3-tuple(v_1018),minnonce) else fail-any)) in
        {570}let v_1021: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1011)) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-3-tuple(v_1018))))) then (if not-caught-fail(v_1019) then (if not-caught-fail(v_1020) then (1-proj-2-tuple(v_1011),v_1019,v_1020) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {571}let (hs_1022: handshakestate,re_1023: key,message_d_1024: bitstring,cs1_1025: cipherstate,cs2_1026: cipherstate) = (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-7-tuple(v_1001))))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-2-tuple(v_1011))))) then (if not-caught-fail(v_1012) then (if not-caught-fail(v_1013) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then (v_1012,5-proj-7-tuple(v_1001),v_1013,2-proj-3-tuple(v_1021),3-proj-3-tuple(v_1021)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {572}event SendMsg(me_889,them_888,stage_d,msg_d(me_889,them_888),true);
        {573}insert statestore(me_889,them_888,statepack_e(hs_1022));
        {574}out(pub, message_d_1024)
    ) | (
        {576}event LeakS(phase0,me_889);
        {577}out(pub, key_s(me_889))
    ) | (
        {578}phase 1;
        {579}event LeakS(phase1,me_889);
        {580}out(pub, key_s(me_889))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1107,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1107,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1107,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1107,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1107,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1107,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1107,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1107,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 187 rules in the queue.
400 rules inserted. The rule base contains 398 rules. 46 rules in the queue.
600 rules inserted. The rule base contains 582 rules. 299 rules in the queue.
800 rules inserted. The rule base contains 766 rules. 245 rules in the queue.
1000 rules inserted. The rule base contains 948 rules. 133 rules in the queue.
1200 rules inserted. The rule base contains 1148 rules. 314 rules in the queue.
1400 rules inserted. The rule base contains 1348 rules. 417 rules in the queue.
1600 rules inserted. The rule base contains 1531 rules. 405 rules in the queue.
1800 rules inserted. The rule base contains 1716 rules. 402 rules in the queue.
2000 rules inserted. The rule base contains 1908 rules. 445 rules in the queue.
2200 rules inserted. The rule base contains 2100 rules. 480 rules in the queue.
2400 rules inserted. The rule base contains 2235 rules. 430 rules in the queue.
2600 rules inserted. The rule base contains 2384 rules. 391 rules in the queue.
2800 rules inserted. The rule base contains 2557 rules. 430 rules in the queue.
3000 rules inserted. The rule base contains 2730 rules. 427 rules in the queue.
3200 rules inserted. The rule base contains 2866 rules. 453 rules in the queue.
3400 rules inserted. The rule base contains 3014 rules. 461 rules in the queue.
3600 rules inserted. The rule base contains 3169 rules. 460 rules in the queue.
3800 rules inserted. The rule base contains 3298 rules. 453 rules in the queue.
4000 rules inserted. The rule base contains 3425 rules. 463 rules in the queue.
4200 rules inserted. The rule base contains 3561 rules. 475 rules in the queue.
4400 rules inserted. The rule base contains 3721 rules. 484 rules in the queue.
4600 rules inserted. The rule base contains 3869 rules. 487 rules in the queue.
4800 rules inserted. The rule base contains 4006 rules. 516 rules in the queue.
5000 rules inserted. The rule base contains 4151 rules. 554 rules in the queue.
5200 rules inserted. The rule base contains 4299 rules. 577 rules in the queue.
5400 rules inserted. The rule base contains 4463 rules. 584 rules in the queue.
5600 rules inserted. The rule base contains 4627 rules. 602 rules in the queue.
5800 rules inserted. The rule base contains 4820 rules. 642 rules in the queue.
6000 rules inserted. The rule base contains 5013 rules. 689 rules in the queue.
6200 rules inserted. The rule base contains 4956 rules. 744 rules in the queue.
6400 rules inserted. The rule base contains 5148 rules. 776 rules in the queue.
6600 rules inserted. The rule base contains 5333 rules. 789 rules in the queue.
6800 rules inserted. The rule base contains 5518 rules. 822 rules in the queue.
7000 rules inserted. The rule base contains 5703 rules. 878 rules in the queue.
7200 rules inserted. The rule base contains 5894 rules. 913 rules in the queue.
7400 rules inserted. The rule base contains 6080 rules. 893 rules in the queue.
7600 rules inserted. The rule base contains 6245 rules. 862 rules in the queue.
7800 rules inserted. The rule base contains 6382 rules. 847 rules in the queue.
8000 rules inserted. The rule base contains 6539 rules. 844 rules in the queue.
8200 rules inserted. The rule base contains 6690 rules. 783 rules in the queue.
8400 rules inserted. The rule base contains 6818 rules. 731 rules in the queue.
8600 rules inserted. The rule base contains 6975 rules. 726 rules in the queue.
8800 rules inserted. The rule base contains 7136 rules. 751 rules in the queue.
9000 rules inserted. The rule base contains 7272 rules. 730 rules in the queue.
9200 rules inserted. The rule base contains 7420 rules. 713 rules in the queue.
9400 rules inserted. The rule base contains 7587 rules. 724 rules in the queue.
9600 rules inserted. The rule base contains 7761 rules. 739 rules in the queue.
9800 rules inserted. The rule base contains 7907 rules. 745 rules in the queue.
10000 rules inserted. The rule base contains 8075 rules. 763 rules in the queue.
10200 rules inserted. The rule base contains 8241 rules. 783 rules in the queue.
10400 rules inserted. The rule base contains 8388 rules. 793 rules in the queue.
10600 rules inserted. The rule base contains 8561 rules. 829 rules in the queue.
10800 rules inserted. The rule base contains 8743 rules. 844 rules in the queue.
11000 rules inserted. The rule base contains 8929 rules. 850 rules in the queue.
11200 rules inserted. The rule base contains 9063 rules. 879 rules in the queue.
11400 rules inserted. The rule base contains 9221 rules. 898 rules in the queue.
11600 rules inserted. The rule base contains 9394 rules. 857 rules in the queue.
11800 rules inserted. The rule base contains 9568 rules. 806 rules in the queue.
12000 rules inserted. The rule base contains 9694 rules. 803 rules in the queue.
12200 rules inserted. The rule base contains 9850 rules. 815 rules in the queue.
12400 rules inserted. The rule base contains 10002 rules. 788 rules in the queue.
12600 rules inserted. The rule base contains 10131 rules. 740 rules in the queue.
12800 rules inserted. The rule base contains 10260 rules. 716 rules in the queue.
13000 rules inserted. The rule base contains 10424 rules. 711 rules in the queue.
13200 rules inserted. The rule base contains 10557 rules. 689 rules in the queue.
13400 rules inserted. The rule base contains 10680 rules. 663 rules in the queue.
13600 rules inserted. The rule base contains 10830 rules. 664 rules in the queue.
13800 rules inserted. The rule base contains 10987 rules. 663 rules in the queue.
14000 rules inserted. The rule base contains 11089 rules. 634 rules in the queue.
14200 rules inserted. The rule base contains 11233 rules. 630 rules in the queue.
14400 rules inserted. The rule base contains 11393 rules. 636 rules in the queue.
14600 rules inserted. The rule base contains 11529 rules. 641 rules in the queue.
14800 rules inserted. The rule base contains 11688 rules. 610 rules in the queue.
15000 rules inserted. The rule base contains 11808 rules. 545 rules in the queue.
15200 rules inserted. The rule base contains 11928 rules. 528 rules in the queue.
15400 rules inserted. The rule base contains 12029 rules. 424 rules in the queue.
15600 rules inserted. The rule base contains 12135 rules. 349 rules in the queue.
15800 rules inserted. The rule base contains 12184 rules. 247 rules in the queue.
16000 rules inserted. The rule base contains 12246 rules. 164 rules in the queue.
16200 rules inserted. The rule base contains 12288 rules. 66 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1107,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1107,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1107,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1107,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_762770979 = key_e[me = alice,them = bob,!1 = @sid_762770965]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {60}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {57}.
So the message concat3(dhexp(key_762770979,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob))) may be sent on channel pub at output {59}.
mess(pub,concat3(dhexp(key_762770979,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_762770979,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_762770979,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_762770979,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_762770979,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_762770979,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_762770979,g).
attacker(dhexp(key_762770979,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {297}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_762770979,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {435}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {436}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_762770979,g).
So the attacker may know dhexp(key_762770979,g) in phase 1.
attacker_p1(dhexp(key_762770979,g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_762770979,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_762770979,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_762770979,dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_762770979,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762770979,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762770979,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_762771074 = key_e[me = alice,them = bob,!1 = @sid_762771060]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {60}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {57}.
So the message concat3(dhexp(key_762771074,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob))) may be sent on channel pub at output {59}.
mess(pub,concat3(dhexp(key_762771074,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_762771074,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_762771074,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_762771074,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_762771074,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_762771074,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_762771074,g).
attacker(dhexp(key_762771074,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {297}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_762771074,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {435}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {436}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_762771074,g).
So the attacker may know dhexp(key_762771074,g) in phase 1.
attacker_p1(dhexp(key_762771074,g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_762771074,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_762771074,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_762771074,dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_762771074,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771074,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771074,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_762771168 = key_e[me = alice,them = bob,!1 = @sid_762771154]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {60}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {57}.
So the message concat3(dhexp(key_762771168,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob))) may be sent on channel pub at output {59}.
mess(pub,concat3(dhexp(key_762771168,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_762771168,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_762771168,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_762771168,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_762771168,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_762771168,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_762771168,g).
attacker(dhexp(key_762771168,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {297}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_762771168,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {435}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {436}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_762771168,g).
So the attacker may know dhexp(key_762771168,g) in phase 1.
attacker_p1(dhexp(key_762771168,g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_762771168,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_762771168,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_762771168,dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_762771168,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_762771168,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_762771168,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1107,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1107,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1107,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1107,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1107,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1107,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1107,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1107,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1107,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1107,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1107,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1107,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
