File "IK1.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 231, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 232, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 232, character 36:
Warning: identifier h rebound.
File "IK1.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 273, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 277, character 6:
Warning: identifier s rebound.
File "IK1.noise.passive.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 278, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IK1.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 279, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 303, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 303, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 323, characters 48-53:
Warning: identifier valid1 rebound.
File "IK1.noise.passive.pv", line 324, characters 6-7:
Warning: identifier rs rebound.
File "IK1.noise.passive.pv", line 325, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 327, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 335, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 511, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 513, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 503, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 504, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 303, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 303, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 496, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 335, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 488, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 273, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 277, character 6:
Warning: identifier s rebound.
File "IK1.noise.passive.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 278, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IK1.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 279, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 564, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 565, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 555, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 557, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 548, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 541, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 323, characters 48-53:
Warning: identifier valid1 rebound.
File "IK1.noise.passive.pv", line 324, characters 6-7:
Warning: identifier rs rebound.
File "IK1.noise.passive.pv", line 325, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 327, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_519: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_519));
    (
        {6}let e_520: keypair = keypairpack(empty,empty) in
        {7}let v_521: key = catch-fail(dhexp(key_s(bob),g)) in
        {8}let rs_522: key = getpublickey((if not-caught-fail(v_521) then keypairpack(v_521,key_s(bob)) else fail-any)) in
        {9}let re_523: key = empty in
        {10}let v_524: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_525: key = catch-fail(v_524) in
        {12}let v_526: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_527: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_524) then (if not-caught-fail(v_525) then (if not-caught-fail(v_526) then symmetricstatepack(v_526,v_525,v_524) else fail-any) else fail-any) else fail-any))) in
        {14}let v_528: symmetricstate = catch-fail((if success?((if not-caught-fail(v_524) then (if not-caught-fail(v_525) then (if not-caught-fail(v_526) then symmetricstatepack(v_526,v_525,v_524) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack(1-proj-3-tuple(v_527),2-proj-3-tuple(v_527),hash(3-proj-3-tuple(v_527),empty)) else fail-any) else fail-any)) in
        {15}let v_529: bitstring = catch-fail(symmetricstateunpack(v_528)) in
        {16}let v_530: symmetricstate = catch-fail((if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then symmetricstatepack(1-proj-3-tuple(v_529),2-proj-3-tuple(v_529),hash(3-proj-3-tuple(v_529),rs_522)) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_528) then (if not-caught-fail(v_530) then handshakestatepack(v_530,s_519,e_520,rs_522,re_523,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {52}get statestore(=alice,=bob,=sid,statepack_a(hs_531: handshakestate)) in
        {19}let v_532: bitstring = catch-fail(handshakestateunpack(hs_531)) in
        {20}let v_533: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_534: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {22}let v_535: keypair = catch-fail((if not-caught-fail(v_534) then keypairpack(v_534,key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_536: bitstring = catch-fail(getpublickey(v_535)) in
        {24}let v_537: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_532))) in
        {25}let v_538: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_532)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then symmetricstatepack(1-proj-3-tuple(v_537),2-proj-3-tuple(v_537),hash(3-proj-3-tuple(v_537),v_536)) else fail-any) else fail-any)) in
        {26}let v_539: key = catch-fail(dhexp(key_s(alice),g)) in
        {27}let v_540: keypair = catch-fail((if not-caught-fail(v_539) then keypairpack(v_539,key_s(alice)) else fail-any)) in
        {28}let v_541: bitstring = catch-fail(symmetricstateunpack(v_538)) in
        {29}let v_542: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_541))) in
        {30}let v_543: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_542),2-proj-2-tuple(v_542),3-proj-3-tuple(v_541),getpublickey(v_540))) in
        {31}let v_544: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_541))) in
        {32}let v_545: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_542))) && success?(1-proj-3-tuple(v_541))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then cipherstatepack(1-proj-2-tuple(v_544),increment_nonce(2-proj-2-tuple(v_542))) else fail-any) else fail-any)) in
        {33}let v_546: bitstring = catch-fail((if (success?(getpublickey(v_540)) && (success?(3-proj-3-tuple(v_541)) && success?(1-proj-3-tuple(v_541)))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then (if not-caught-fail(v_543) then (if not-caught-fail(v_545) then (v_545,v_543) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_547: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_546),2-proj-3-tuple(v_541),3-proj-3-tuple(v_541)))) in
        {35}let v_548: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_546)) && success?(symmetricstatepack(1-proj-2-tuple(v_546),2-proj-3-tuple(v_541),3-proj-3-tuple(v_541)))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),2-proj-2-tuple(v_546))) else fail-any) else fail-any)) in
        {36}let v_549: bitstring = catch-fail((if success?(getpublickey(v_540)) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then (if not-caught-fail(v_548) then (v_548,2-proj-2-tuple(v_546)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {37}let v_550: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_549))) in
        {38}let v_551: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_550))) in
        {39}let v_552: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_551),2-proj-2-tuple(v_551),3-proj-3-tuple(v_550),msg_a(alice,bob,sid))) in
        {40}let v_553: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_550))) in
        {41}let v_554: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_551))) && success?(1-proj-3-tuple(v_550))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then cipherstatepack(1-proj-2-tuple(v_553),increment_nonce(2-proj-2-tuple(v_551))) else fail-any) else fail-any)) in
        {42}let v_555: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_550)) && success?(1-proj-3-tuple(v_550))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_554) then (v_554,v_552) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {43}let v_556: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_555),2-proj-3-tuple(v_550),3-proj-3-tuple(v_550)))) in
        {44}let v_557: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_555)) && success?(symmetricstatepack(1-proj-2-tuple(v_555),2-proj-3-tuple(v_550),3-proj-3-tuple(v_550)))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_556),hash(3-proj-3-tuple(v_556),2-proj-2-tuple(v_555))) else fail-any) else fail-any)) in
        {45}let v_558: bitstring = catch-fail((if success?(1-proj-2-tuple(v_549)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then (if not-caught-fail(v_557) then (v_557,2-proj-2-tuple(v_555)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {46}let v_559: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_558),v_540,v_535,4-proj-7-tuple(v_532),5-proj-7-tuple(v_532),6-proj-7-tuple(v_532),7-proj-7-tuple(v_532))) in
        {47}let v_560: bitstring = catch-fail(concat3(v_536,2-proj-2-tuple(v_549),2-proj-2-tuple(v_558))) in
        {48}let (hs_561: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-7-tuple(v_532))))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then (if not-caught-fail(v_538) then (if not-caught-fail(v_540) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (v_559,v_560) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {49}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {50}insert statestore(alice,bob,sid,statepack_b(hs_561));
        {51}out(pub, message_a)
    ) | (
        {103}get statestore(=alice,=bob,=sid,statepack_b(hs_562: handshakestate)) in
        {53}in(pub, message_b: bitstring);
        {54}let v_563: bitstring = catch-fail(handshakestateunpack(hs_562)) in
        {55}let v_564: bitstring = catch-fail(deconcat3(message_b)) in
        {56}let v_565: bool = catch-fail(true) in
        {57}let v_566: key = catch-fail(1-proj-3-tuple(v_564)) in
        {58}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_563))) in
        {59}let v_568: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_563)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then symmetricstatepack(1-proj-3-tuple(v_567),2-proj-3-tuple(v_567),hash(3-proj-3-tuple(v_567),v_566)) else fail-any) else fail-any)) in
        {60}let v_569: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_563))) in
        {61}let v_570: bitstring = catch-fail(symmetricstateunpack(v_568)) in
        {62}let v_571: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {63}let v_572: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {64}let v_573: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {65}let v_574: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_570))) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (v_571,v_572,v_573) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {66}let v_575: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_574)) then cipherstatepack(2-proj-3-tuple(v_574),minnonce) else fail-any),1-proj-3-tuple(v_574),3-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any)) in
        {67}let v_576: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_563))) in
        {68}let v_577: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {69}let v_578: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_577),(if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any))) in
        {70}let v_579: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_577),(if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any))) in
        {71}let v_580: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_577),(if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any))) in
        {72}let v_581: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_577))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (v_578,v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_582: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_581)) then cipherstatepack(2-proj-3-tuple(v_581),minnonce) else fail-any),1-proj-3-tuple(v_581),3-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any)) in
        {74}let v_583: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_563))) in
        {75}let v_584: bitstring = catch-fail(symmetricstateunpack(v_582)) in
        {76}let v_585: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_584),(if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),4-proj-7-tuple(v_563)) else fail-any) else fail-any))) in
        {77}let v_586: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_584),(if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),4-proj-7-tuple(v_563)) else fail-any) else fail-any))) in
        {78}let v_587: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_584),(if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),4-proj-7-tuple(v_563)) else fail-any) else fail-any))) in
        {79}let v_588: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),4-proj-7-tuple(v_563)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_584))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (v_585,v_586,v_587) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_589: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),4-proj-7-tuple(v_563)) else fail-any) else fail-any)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_588)) then cipherstatepack(2-proj-3-tuple(v_588),minnonce) else fail-any),1-proj-3-tuple(v_588),3-proj-3-tuple(v_584)) else fail-any) else fail-any) else fail-any)) in
        {81}let v_590: bitstring = catch-fail(symmetricstateunpack(v_589)) in
        {82}let v_591: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_590))) in
        {83}let v_592: aead = catch-fail(decrypt(1-proj-2-tuple(v_591),2-proj-2-tuple(v_591),3-proj-3-tuple(v_590),3-proj-3-tuple(v_564))) in
        {84}let v_593: bitstring = catch-fail(aeadunpack(v_592)) in
        {85}let v_594: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_590))) in
        {86}let v_595: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_591))) && success?(1-proj-3-tuple(v_590))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then cipherstatepack(1-proj-2-tuple(v_594),increment_nonce(2-proj-2-tuple(v_591))) else fail-any) else fail-any)) in
        {87}let v_596: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && (success?(3-proj-3-tuple(v_590)) && success?(1-proj-3-tuple(v_590)))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then (if not-caught-fail(v_592) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if not-caught-fail(v_595) then (v_595,3-proj-3-tuple(v_593),1-proj-3-tuple(v_593)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {88}let v_597: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_590),3-proj-3-tuple(v_590)))) in
        {89}let v_598: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_590),3-proj-3-tuple(v_590)))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_597),hash(3-proj-3-tuple(v_597),3-proj-3-tuple(v_564))) else fail-any) else fail-any)) in
        {90}let v_599: bitstring = catch-fail((if success?(3-proj-3-tuple(v_564)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if not-caught-fail(v_598) then (v_598,2-proj-3-tuple(v_596),3-proj-3-tuple(v_596)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_600: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_599),2-proj-7-tuple(v_563),3-proj-7-tuple(v_563),4-proj-7-tuple(v_563),v_566,6-proj-7-tuple(v_563),7-proj-7-tuple(v_563))) in
        {92}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_599))) in
        {93}let v_602: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_601),zero)) in
        {94}let v_603: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_601),zero)) in
        {95}let v_604: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_601),zero)) in
        {96}let v_605: bitstring = catch-fail((if success?(2-proj-3-tuple(v_601)) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (v_602,v_603,v_604) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_606: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_605)) then cipherstatepack(1-proj-3-tuple(v_605),minnonce) else fail-any)) in
        {98}let v_607: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_605)) then cipherstatepack(2-proj-3-tuple(v_605),minnonce) else fail-any)) in
        {99}let v_608: bitstring = catch-fail((if success?(1-proj-3-tuple(v_599)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if not-caught-fail(v_606) then (if not-caught-fail(v_607) then (1-proj-3-tuple(v_599),v_606,v_607) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {100}let (hs_609: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-7-tuple(v_563))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then (if not-caught-fail(v_575) then (if not-caught-fail(v_582) then (if not-caught-fail(v_589) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (v_565 && 3-proj-3-tuple(v_599)) then (if not-caught-fail(v_600) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (v_600,2-proj-3-tuple(v_599),true,2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {101}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {102}insert statestore(alice,bob,sid,statepack_c(hs_609,cs1,cs2))
    ) | (
        {104}!
        {123}get statestore(=alice,=bob,=sid,statepack_c(hs_610: handshakestate,cs1_611: cipherstate,cs2_612: cipherstate)) in
        {105}let hs_613: handshakestate = handshakestatesetcs(hs_610,cs1_611) in
        {106}let v_614: bitstring = catch-fail(handshakestateunpack(hs_613)) in
        {107}let v_615: bitstring = catch-fail((empty,empty,empty)) in
        {108}let v_616: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_614))) in
        {109}let v_617: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_616))) in
        {110}let v_618: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_617),2-proj-2-tuple(v_617),3-proj-3-tuple(v_616),msg_c(alice,bob,sid))) in
        {111}let v_619: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_616))) in
        {112}let v_620: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_617))) && success?(1-proj-3-tuple(v_616))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then cipherstatepack(1-proj-2-tuple(v_619),increment_nonce(2-proj-2-tuple(v_617))) else fail-any) else fail-any)) in
        {113}let v_621: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_616)) && success?(1-proj-3-tuple(v_616))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then (if not-caught-fail(v_618) then (if not-caught-fail(v_620) then (v_620,v_618) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_622: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_621),2-proj-3-tuple(v_616),3-proj-3-tuple(v_616)))) in
        {115}let v_623: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_621)) && success?(symmetricstatepack(1-proj-2-tuple(v_621),2-proj-3-tuple(v_616),3-proj-3-tuple(v_616)))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then symmetricstatepack(1-proj-3-tuple(v_622),2-proj-3-tuple(v_622),hash(3-proj-3-tuple(v_622),2-proj-2-tuple(v_621))) else fail-any) else fail-any)) in
        {116}let v_624: bitstring = catch-fail((if success?(1-proj-7-tuple(v_614)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if not-caught-fail(v_623) then (v_623,2-proj-2-tuple(v_621)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let v_625: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_624),2-proj-7-tuple(v_614),3-proj-7-tuple(v_614),4-proj-7-tuple(v_614),5-proj-7-tuple(v_614),6-proj-7-tuple(v_614),7-proj-7-tuple(v_614))) in
        {118}let v_626: bitstring = catch-fail(concat3(1-proj-3-tuple(v_615),2-proj-3-tuple(v_615),2-proj-2-tuple(v_624))) in
        {119}let (hs_627: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-7-tuple(v_614))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (v_625,v_626) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {120}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {121}insert statestore(alice,bob,sid,statepack_d(hs_627,handshakestategetcs(hs_627),cs2_612));
        {122}out(pub, message_c)
    ) | (
        {124}!
        {144}get statestore(=alice,=bob,=sid,statepack_d(hs_628: handshakestate,cs1_629: cipherstate,cs2_630: cipherstate)) in
        {125}let hs_631: handshakestate = handshakestatesetcs(hs_628,cs2_630) in
        {126}in(pub, message_d: bitstring);
        {127}let v_632: bitstring = catch-fail(handshakestateunpack(hs_631)) in
        {128}let v_633: bitstring = catch-fail(deconcat3(message_d)) in
        {129}let v_634: bool = catch-fail(true) in
        {130}let v_635: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_632))) in
        {131}let v_636: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {132}let v_637: aead = catch-fail(decrypt(1-proj-2-tuple(v_636),2-proj-2-tuple(v_636),3-proj-3-tuple(v_635),3-proj-3-tuple(v_633))) in
        {133}let v_638: bitstring = catch-fail(aeadunpack(v_637)) in
        {134}let v_639: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {135}let v_640: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_636))) && success?(1-proj-3-tuple(v_635))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then cipherstatepack(1-proj-2-tuple(v_639),increment_nonce(2-proj-2-tuple(v_636))) else fail-any) else fail-any)) in
        {136}let v_641: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_633)) && (success?(3-proj-3-tuple(v_635)) && success?(1-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then (if not-caught-fail(v_637) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_640) then (v_640,3-proj-3-tuple(v_638),1-proj-3-tuple(v_638)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {137}let v_642: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) in
        {138}let v_643: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_633)) && success?(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then symmetricstatepack(1-proj-3-tuple(v_642),2-proj-3-tuple(v_642),hash(3-proj-3-tuple(v_642),3-proj-3-tuple(v_633))) else fail-any) else fail-any)) in
        {139}let v_644: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_633)) && success?(1-proj-7-tuple(v_632))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if not-caught-fail(v_643) then (v_643,2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {140}let v_645: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_644),2-proj-7-tuple(v_632),3-proj-7-tuple(v_632),4-proj-7-tuple(v_632),5-proj-7-tuple(v_632),6-proj-7-tuple(v_632),7-proj-7-tuple(v_632))) in
        {141}let (hs_646: handshakestate,plaintext_d: bitstring,valid_647: bool) = (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-7-tuple(v_632))))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if not-caught-fail(v_634) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if (v_634 && 3-proj-3-tuple(v_644)) then (if not-caught-fail(v_645) then (v_645,2-proj-3-tuple(v_644),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {142}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {143}event RecvEnd(valid_647)
    ) | (
        {145}event LeakS(phase0,alice);
        {146}out(pub, key_s(alice))
    ) | (
        {147}phase 1;
        {148}event LeakS(phase1,alice);
        {149}out(pub, key_s(alice))
    )
) | (
    {150}let s_648: keypair = keypairpack(empty,empty) in
    {151}out(pub, getpublickey(s_648));
    (
        {152}let e_649: keypair = keypairpack(empty,empty) in
        {153}let v_650: key = catch-fail(dhexp(key_s(charlie),g)) in
        {154}let rs_651: key = getpublickey((if not-caught-fail(v_650) then keypairpack(v_650,key_s(charlie)) else fail-any)) in
        {155}let re_652: key = empty in
        {156}let v_653: bitstring = catch-fail(hash(somename,empty)) in
        {157}let v_654: key = catch-fail(v_653) in
        {158}let v_655: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {159}let v_656: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then symmetricstatepack(v_655,v_654,v_653) else fail-any) else fail-any) else fail-any))) in
        {160}let v_657: symmetricstate = catch-fail((if success?((if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then symmetricstatepack(v_655,v_654,v_653) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_656),hash(3-proj-3-tuple(v_656),empty)) else fail-any) else fail-any)) in
        {161}let v_658: bitstring = catch-fail(symmetricstateunpack(v_657)) in
        {162}let v_659: symmetricstate = catch-fail((if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),hash(3-proj-3-tuple(v_658),rs_651)) else fail-any)) in
        {163}let hs_660: handshakestate = (if not-caught-fail(v_657) then (if not-caught-fail(v_659) then handshakestatepack(v_659,s_648,e_649,rs_651,re_652,empty,true) else fail-any) else fail-any) in
        {164}insert statestore(alice,charlie,sid,statepack_a(hs_660))
    ) | (
        {198}get statestore(=alice,=charlie,=sid,statepack_a(hs_661: handshakestate)) in
        {165}let v_662: bitstring = catch-fail(handshakestateunpack(hs_661)) in
        {166}let v_663: bitstring = catch-fail((empty,empty,empty)) in
        {167}let v_664: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {168}let v_665: keypair = catch-fail((if not-caught-fail(v_664) then keypairpack(v_664,key_e(alice,charlie,sid)) else fail-any)) in
        {169}let v_666: bitstring = catch-fail(getpublickey(v_665)) in
        {170}let v_667: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_662))) in
        {171}let v_668: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_662)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_667),hash(3-proj-3-tuple(v_667),v_666)) else fail-any) else fail-any)) in
        {172}let v_669: key = catch-fail(dhexp(key_s(alice),g)) in
        {173}let v_670: keypair = catch-fail((if not-caught-fail(v_669) then keypairpack(v_669,key_s(alice)) else fail-any)) in
        {174}let v_671: bitstring = catch-fail(symmetricstateunpack(v_668)) in
        {175}let v_672: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_671))) in
        {176}let v_673: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_672),2-proj-2-tuple(v_672),3-proj-3-tuple(v_671),getpublickey(v_670))) in
        {177}let v_674: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_671))) in
        {178}let v_675: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_672))) && success?(1-proj-3-tuple(v_671))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then cipherstatepack(1-proj-2-tuple(v_674),increment_nonce(2-proj-2-tuple(v_672))) else fail-any) else fail-any)) in
        {179}let v_676: bitstring = catch-fail((if (success?(getpublickey(v_670)) && (success?(3-proj-3-tuple(v_671)) && success?(1-proj-3-tuple(v_671)))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-2-tuple(v_672))))) then (if not-caught-fail(v_673) then (if not-caught-fail(v_675) then (v_675,v_673) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {180}let v_677: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_676),2-proj-3-tuple(v_671),3-proj-3-tuple(v_671)))) in
        {181}let v_678: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_676)) && success?(symmetricstatepack(1-proj-2-tuple(v_676),2-proj-3-tuple(v_671),3-proj-3-tuple(v_671)))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then symmetricstatepack(1-proj-3-tuple(v_677),2-proj-3-tuple(v_677),hash(3-proj-3-tuple(v_677),2-proj-2-tuple(v_676))) else fail-any) else fail-any)) in
        {182}let v_679: bitstring = catch-fail((if success?(getpublickey(v_670)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_678) then (v_678,2-proj-2-tuple(v_676)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {183}let v_680: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_679))) in
        {184}let v_681: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_680))) in
        {185}let v_682: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_681),2-proj-2-tuple(v_681),3-proj-3-tuple(v_680),msg_a(alice,charlie,sid))) in
        {186}let v_683: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_680))) in
        {187}let v_684: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_681))) && success?(1-proj-3-tuple(v_680))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then cipherstatepack(1-proj-2-tuple(v_683),increment_nonce(2-proj-2-tuple(v_681))) else fail-any) else fail-any)) in
        {188}let v_685: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_680)) && success?(1-proj-3-tuple(v_680))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then (if not-caught-fail(v_682) then (if not-caught-fail(v_684) then (v_684,v_682) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_686: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_685),2-proj-3-tuple(v_680),3-proj-3-tuple(v_680)))) in
        {190}let v_687: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_685)) && success?(symmetricstatepack(1-proj-2-tuple(v_685),2-proj-3-tuple(v_680),3-proj-3-tuple(v_680)))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then symmetricstatepack(1-proj-3-tuple(v_686),2-proj-3-tuple(v_686),hash(3-proj-3-tuple(v_686),2-proj-2-tuple(v_685))) else fail-any) else fail-any)) in
        {191}let v_688: bitstring = catch-fail((if success?(1-proj-2-tuple(v_679)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-2-tuple(v_685))))) then (if not-caught-fail(v_687) then (v_687,2-proj-2-tuple(v_685)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {192}let v_689: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_688),v_670,v_665,4-proj-7-tuple(v_662),5-proj-7-tuple(v_662),6-proj-7-tuple(v_662),7-proj-7-tuple(v_662))) in
        {193}let v_690: bitstring = catch-fail(concat3(v_666,2-proj-2-tuple(v_679),2-proj-2-tuple(v_688))) in
        {194}let (hs_691: handshakestate,message_a_692: bitstring) = (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-7-tuple(v_662))))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (if not-caught-fail(v_668) then (if not-caught-fail(v_670) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-2-tuple(v_688))))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (v_689,v_690) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {195}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {196}insert statestore(alice,charlie,sid,statepack_b(hs_691));
        {197}out(pub, message_a_692)
    ) | (
        {249}get statestore(=alice,=charlie,=sid,statepack_b(hs_693: handshakestate)) in
        {199}in(pub, message_b_694: bitstring);
        {200}let v_695: bitstring = catch-fail(handshakestateunpack(hs_693)) in
        {201}let v_696: bitstring = catch-fail(deconcat3(message_b_694)) in
        {202}let v_697: bool = catch-fail(true) in
        {203}let v_698: key = catch-fail(1-proj-3-tuple(v_696)) in
        {204}let v_699: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_695))) in
        {205}let v_700: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_695)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_699),hash(3-proj-3-tuple(v_699),v_698)) else fail-any) else fail-any)) in
        {206}let v_701: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_695))) in
        {207}let v_702: bitstring = catch-fail(symmetricstateunpack(v_700)) in
        {208}let v_703: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_702),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any))) in
        {209}let v_704: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_702),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any))) in
        {210}let v_705: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_702),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any))) in
        {211}let v_706: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_702))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (v_703,v_704,v_705) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_707: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any)) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_706)) then cipherstatepack(2-proj-3-tuple(v_706),minnonce) else fail-any),1-proj-3-tuple(v_706),3-proj-3-tuple(v_702)) else fail-any) else fail-any) else fail-any)) in
        {213}let v_708: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_695))) in
        {214}let v_709: bitstring = catch-fail(symmetricstateunpack(v_707)) in
        {215}let v_710: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_709),(if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any))) in
        {216}let v_711: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_709),(if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any))) in
        {217}let v_712: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_709),(if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any))) in
        {218}let v_713: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_709))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (if not-caught-fail(v_712) then (v_710,v_711,v_712) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_714: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any)) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_713)) then cipherstatepack(2-proj-3-tuple(v_713),minnonce) else fail-any),1-proj-3-tuple(v_713),3-proj-3-tuple(v_709)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_715: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_695))) in
        {221}let v_716: bitstring = catch-fail(symmetricstateunpack(v_714)) in
        {222}let v_717: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_716),(if (success?(4-proj-7-tuple(v_695)) && success?(3-proj-7-tuple(v_695))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),4-proj-7-tuple(v_695)) else fail-any) else fail-any))) in
        {223}let v_718: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_716),(if (success?(4-proj-7-tuple(v_695)) && success?(3-proj-7-tuple(v_695))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),4-proj-7-tuple(v_695)) else fail-any) else fail-any))) in
        {224}let v_719: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_716),(if (success?(4-proj-7-tuple(v_695)) && success?(3-proj-7-tuple(v_695))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),4-proj-7-tuple(v_695)) else fail-any) else fail-any))) in
        {225}let v_720: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_695)) && success?(3-proj-7-tuple(v_695))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),4-proj-7-tuple(v_695)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_716))) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (v_717,v_718,v_719) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let v_721: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_695)) && success?(3-proj-7-tuple(v_695))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),4-proj-7-tuple(v_695)) else fail-any) else fail-any)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_720)) then cipherstatepack(2-proj-3-tuple(v_720),minnonce) else fail-any),1-proj-3-tuple(v_720),3-proj-3-tuple(v_716)) else fail-any) else fail-any) else fail-any)) in
        {227}let v_722: bitstring = catch-fail(symmetricstateunpack(v_721)) in
        {228}let v_723: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_722))) in
        {229}let v_724: aead = catch-fail(decrypt(1-proj-2-tuple(v_723),2-proj-2-tuple(v_723),3-proj-3-tuple(v_722),3-proj-3-tuple(v_696))) in
        {230}let v_725: bitstring = catch-fail(aeadunpack(v_724)) in
        {231}let v_726: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_722))) in
        {232}let v_727: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_723))) && success?(1-proj-3-tuple(v_722))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then cipherstatepack(1-proj-2-tuple(v_726),increment_nonce(2-proj-2-tuple(v_723))) else fail-any) else fail-any)) in
        {233}let v_728: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_696)) && (success?(3-proj-3-tuple(v_722)) && success?(1-proj-3-tuple(v_722)))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then (if not-caught-fail(v_724) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if not-caught-fail(v_727) then (v_727,3-proj-3-tuple(v_725),1-proj-3-tuple(v_725)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {234}let v_729: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_722),3-proj-3-tuple(v_722)))) in
        {235}let v_730: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_696)) && success?(symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_722),3-proj-3-tuple(v_722)))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then symmetricstatepack(1-proj-3-tuple(v_729),2-proj-3-tuple(v_729),hash(3-proj-3-tuple(v_729),3-proj-3-tuple(v_696))) else fail-any) else fail-any)) in
        {236}let v_731: bitstring = catch-fail((if success?(3-proj-3-tuple(v_696)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then (if not-caught-fail(v_730) then (v_730,2-proj-3-tuple(v_728),3-proj-3-tuple(v_728)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_732: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_731),2-proj-7-tuple(v_695),3-proj-7-tuple(v_695),4-proj-7-tuple(v_695),v_698,6-proj-7-tuple(v_695),7-proj-7-tuple(v_695))) in
        {238}let v_733: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_731))) in
        {239}let v_734: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_733),zero)) in
        {240}let v_735: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_733),zero)) in
        {241}let v_736: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_733),zero)) in
        {242}let v_737: bitstring = catch-fail((if success?(2-proj-3-tuple(v_733)) then (if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (if not-caught-fail(v_736) then (v_734,v_735,v_736) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_738: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_737)) then cipherstatepack(1-proj-3-tuple(v_737),minnonce) else fail-any)) in
        {244}let v_739: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_737)) then cipherstatepack(2-proj-3-tuple(v_737),minnonce) else fail-any)) in
        {245}let v_740: bitstring = catch-fail((if success?(1-proj-3-tuple(v_731)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_738) then (if not-caught-fail(v_739) then (1-proj-3-tuple(v_731),v_738,v_739) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let (hs_741: handshakestate,plaintext_b_742: bitstring,valid_743: bool,cs1_744: cipherstate,cs2_745: cipherstate) = (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-7-tuple(v_695))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (if not-caught-fail(v_700) then (if not-caught-fail(v_707) then (if not-caught-fail(v_714) then (if not-caught-fail(v_721) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if (v_697 && 3-proj-3-tuple(v_731)) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (v_732,2-proj-3-tuple(v_731),true,2-proj-3-tuple(v_740),3-proj-3-tuple(v_740)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {247}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_742);
        {248}insert statestore(alice,charlie,sid,statepack_c(hs_741,cs1_744,cs2_745))
    ) | (
        {250}!
        {269}get statestore(=alice,=charlie,=sid,statepack_c(hs_746: handshakestate,cs1_747: cipherstate,cs2_748: cipherstate)) in
        {251}let hs_749: handshakestate = handshakestatesetcs(hs_746,cs1_747) in
        {252}let v_750: bitstring = catch-fail(handshakestateunpack(hs_749)) in
        {253}let v_751: bitstring = catch-fail((empty,empty,empty)) in
        {254}let v_752: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_750))) in
        {255}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {256}let v_754: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_753),2-proj-2-tuple(v_753),3-proj-3-tuple(v_752),msg_c(alice,charlie,sid))) in
        {257}let v_755: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {258}let v_756: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_753))) && success?(1-proj-3-tuple(v_752))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then cipherstatepack(1-proj-2-tuple(v_755),increment_nonce(2-proj-2-tuple(v_753))) else fail-any) else fail-any)) in
        {259}let v_757: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_752)) && success?(1-proj-3-tuple(v_752))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_756) then (v_756,v_754) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_758: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_757),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) in
        {261}let v_759: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_757)) && success?(symmetricstatepack(1-proj-2-tuple(v_757),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then symmetricstatepack(1-proj-3-tuple(v_758),2-proj-3-tuple(v_758),hash(3-proj-3-tuple(v_758),2-proj-2-tuple(v_757))) else fail-any) else fail-any)) in
        {262}let v_760: bitstring = catch-fail((if success?(1-proj-7-tuple(v_750)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then (if not-caught-fail(v_759) then (v_759,2-proj-2-tuple(v_757)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_761: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_760),2-proj-7-tuple(v_750),3-proj-7-tuple(v_750),4-proj-7-tuple(v_750),5-proj-7-tuple(v_750),6-proj-7-tuple(v_750),7-proj-7-tuple(v_750))) in
        {264}let v_762: bitstring = catch-fail(concat3(1-proj-3-tuple(v_751),2-proj-3-tuple(v_751),2-proj-2-tuple(v_760))) in
        {265}let (hs_763: handshakestate,message_c_764: bitstring) = (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-7-tuple(v_750))))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (v_761,v_762) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {266}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {267}insert statestore(alice,charlie,sid,statepack_d(hs_763,handshakestategetcs(hs_763),cs2_748));
        {268}out(pub, message_c_764)
    ) | (
        {270}!
        {290}get statestore(=alice,=charlie,=sid,statepack_d(hs_765: handshakestate,cs1_766: cipherstate,cs2_767: cipherstate)) in
        {271}let hs_768: handshakestate = handshakestatesetcs(hs_765,cs2_767) in
        {272}in(pub, message_d_769: bitstring);
        {273}let v_770: bitstring = catch-fail(handshakestateunpack(hs_768)) in
        {274}let v_771: bitstring = catch-fail(deconcat3(message_d_769)) in
        {275}let v_772: bool = catch-fail(true) in
        {276}let v_773: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_770))) in
        {277}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {278}let v_775: aead = catch-fail(decrypt(1-proj-2-tuple(v_774),2-proj-2-tuple(v_774),3-proj-3-tuple(v_773),3-proj-3-tuple(v_771))) in
        {279}let v_776: bitstring = catch-fail(aeadunpack(v_775)) in
        {280}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {281}let v_778: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_774))) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then cipherstatepack(1-proj-2-tuple(v_777),increment_nonce(2-proj-2-tuple(v_774))) else fail-any) else fail-any)) in
        {282}let v_779: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_771)) && (success?(3-proj-3-tuple(v_773)) && success?(1-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,3-proj-3-tuple(v_776),1-proj-3-tuple(v_776)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_780: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) in
        {284}let v_781: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_771)) && success?(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then symmetricstatepack(1-proj-3-tuple(v_780),2-proj-3-tuple(v_780),hash(3-proj-3-tuple(v_780),3-proj-3-tuple(v_771))) else fail-any) else fail-any)) in
        {285}let v_782: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_771)) && success?(1-proj-7-tuple(v_770))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_783: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_782),2-proj-7-tuple(v_770),3-proj-7-tuple(v_770),4-proj-7-tuple(v_770),5-proj-7-tuple(v_770),6-proj-7-tuple(v_770),7-proj-7-tuple(v_770))) in
        {287}let (hs_784: handshakestate,plaintext_d_785: bitstring,valid_786: bool) = (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-7-tuple(v_770))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if not-caught-fail(v_772) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (v_772 && 3-proj-3-tuple(v_782)) then (if not-caught-fail(v_783) then (v_783,2-proj-3-tuple(v_782),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {288}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_785);
        {289}event RecvEnd(valid_786)
    ) | (
        {291}event LeakS(phase0,alice);
        {292}out(pub, key_s(alice))
    ) | (
        {293}phase 1;
        {294}event LeakS(phase1,alice);
        {295}out(pub, key_s(alice))
    )
) | (
    {296}let v_787: key = catch-fail(dhexp(key_s(bob),g)) in
    {297}let s_788: keypair = (if not-caught-fail(v_787) then keypairpack(v_787,key_s(bob)) else fail-any) in
    {298}out(pub, getpublickey(s_788));
    (
        {299}let e_789: keypair = keypairpack(empty,empty) in
        {300}let rs_790: key = empty in
        {301}let re_791: key = empty in
        {302}let v_792: bitstring = catch-fail(hash(somename,empty)) in
        {303}let v_793: key = catch-fail(v_792) in
        {304}let v_794: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {305}let v_795: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (if not-caught-fail(v_794) then symmetricstatepack(v_794,v_793,v_792) else fail-any) else fail-any) else fail-any))) in
        {306}let v_796: symmetricstate = catch-fail((if success?((if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (if not-caught-fail(v_794) then symmetricstatepack(v_794,v_793,v_792) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_795),hash(3-proj-3-tuple(v_795),empty)) else fail-any) else fail-any)) in
        {307}let v_797: bitstring = catch-fail(symmetricstateunpack(v_796)) in
        {308}let v_798: symmetricstate = catch-fail((if success?(getpublickey(s_788)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_797),hash(3-proj-3-tuple(v_797),getpublickey(s_788))) else fail-any) else fail-any)) in
        {309}let hs_799: handshakestate = (if not-caught-fail(v_796) then (if not-caught-fail(v_798) then handshakestatepack(v_798,s_788,e_789,rs_790,re_791,empty,false) else fail-any) else fail-any) in
        {310}insert statestore(bob,alice,sid,statepack_a(hs_799))
    ) | (
        {344}get statestore(=bob,=alice,=sid,statepack_a(hs_800: handshakestate)) in
        {311}in(pub, message_a_801: bitstring);
        {312}let v_802: bitstring = catch-fail(handshakestateunpack(hs_800)) in
        {313}let v_803: bitstring = catch-fail(deconcat3(message_a_801)) in
        {314}let v_804: bool = catch-fail(true) in
        {315}let v_805: key = catch-fail(1-proj-3-tuple(v_803)) in
        {316}let v_806: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_802))) in
        {317}let v_807: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_802)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then symmetricstatepack(1-proj-3-tuple(v_806),2-proj-3-tuple(v_806),hash(3-proj-3-tuple(v_806),v_805)) else fail-any) else fail-any)) in
        {318}let v_808: bitstring = catch-fail(symmetricstateunpack(v_807)) in
        {319}let v_809: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {320}let v_810: aead = catch-fail(decrypt(1-proj-2-tuple(v_809),2-proj-2-tuple(v_809),3-proj-3-tuple(v_808),2-proj-3-tuple(v_803))) in
        {321}let v_811: bitstring = catch-fail(aeadunpack(v_810)) in
        {322}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {323}let v_813: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_809))) && success?(1-proj-3-tuple(v_808))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then cipherstatepack(1-proj-2-tuple(v_812),increment_nonce(2-proj-2-tuple(v_809))) else fail-any) else fail-any)) in
        {324}let v_814: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_803)) && (success?(3-proj-3-tuple(v_808)) && success?(1-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_810) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if not-caught-fail(v_813) then (v_813,3-proj-3-tuple(v_811),1-proj-3-tuple(v_811)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {325}let v_815: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) in
        {326}let v_816: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_803)) && success?(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_815),hash(3-proj-3-tuple(v_815),2-proj-3-tuple(v_803))) else fail-any) else fail-any)) in
        {327}let v_817: bitstring = catch-fail((if success?(2-proj-3-tuple(v_803)) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if not-caught-fail(v_816) then (v_816,2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {328}let v_818: key = catch-fail(2-proj-3-tuple(v_817)) in
        {329}let v_819: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_817))) in
        {330}let v_820: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_819))) in
        {331}let v_821: aead = catch-fail(decrypt(1-proj-2-tuple(v_820),2-proj-2-tuple(v_820),3-proj-3-tuple(v_819),3-proj-3-tuple(v_803))) in
        {332}let v_822: bitstring = catch-fail(aeadunpack(v_821)) in
        {333}let v_823: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_819))) in
        {334}let v_824: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_820))) && success?(1-proj-3-tuple(v_819))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then cipherstatepack(1-proj-2-tuple(v_823),increment_nonce(2-proj-2-tuple(v_820))) else fail-any) else fail-any)) in
        {335}let v_825: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_803)) && (success?(3-proj-3-tuple(v_819)) && success?(1-proj-3-tuple(v_819)))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-2-tuple(v_820))))) then (if not-caught-fail(v_821) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if not-caught-fail(v_824) then (v_824,3-proj-3-tuple(v_822),1-proj-3-tuple(v_822)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {336}let v_826: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_825),2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)))) in
        {337}let v_827: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_803)) && success?(symmetricstatepack(1-proj-3-tuple(v_825),2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_826),hash(3-proj-3-tuple(v_826),3-proj-3-tuple(v_803))) else fail-any) else fail-any)) in
        {338}let v_828: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_803)) && success?(1-proj-3-tuple(v_817))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (if not-caught-fail(v_827) then (v_827,2-proj-3-tuple(v_825),3-proj-3-tuple(v_825)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {339}let v_829: key = catch-fail(dhexp(key_s(alice),g)) in
        {340}let v_830: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_828),2-proj-7-tuple(v_802),3-proj-7-tuple(v_802),v_818,v_805,6-proj-7-tuple(v_802),7-proj-7-tuple(v_802))) in
        {341}let (hs_831: handshakestate,plaintext_a: bitstring,valid_832: bool) = (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-7-tuple(v_802))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (if not-caught-fail(v_807) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if not-caught-fail(v_818) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then (if ((3-proj-3-tuple(v_817) && 3-proj-3-tuple(v_828)) && (v_818 = getpublickey((if not-caught-fail(v_829) then keypairpack(v_829,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_830) then (v_830,2-proj-3-tuple(v_828),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {342}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {343}insert statestore(bob,alice,sid,statepack_b(hs_831))
    ) | (
        {396}get statestore(=bob,=alice,=sid,statepack_b(hs_833: handshakestate)) in
        {345}let v_834: bitstring = catch-fail(handshakestateunpack(hs_833)) in
        {346}let v_835: bitstring = catch-fail((empty,empty,empty)) in
        {347}let v_836: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {348}let v_837: keypair = catch-fail((if not-caught-fail(v_836) then keypairpack(v_836,key_e(bob,alice,sid)) else fail-any)) in
        {349}let v_838: bitstring = catch-fail(getpublickey(v_837)) in
        {350}let v_839: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_834))) in
        {351}let v_840: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_834)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then symmetricstatepack(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),hash(3-proj-3-tuple(v_839),v_838)) else fail-any) else fail-any)) in
        {352}let v_841: bitstring = catch-fail(keypairunpack(v_837)) in
        {353}let v_842: bitstring = catch-fail(symmetricstateunpack(v_840)) in
        {354}let v_843: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_842),(if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {355}let v_844: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_842),(if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {356}let v_845: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_842),(if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {357}let v_846: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_842))) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then (if not-caught-fail(v_845) then (v_843,v_844,v_845) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {358}let v_847: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_846)) then cipherstatepack(2-proj-3-tuple(v_846),minnonce) else fail-any),1-proj-3-tuple(v_846),3-proj-3-tuple(v_842)) else fail-any) else fail-any) else fail-any)) in
        {359}let v_848: bitstring = catch-fail(keypairunpack(v_837)) in
        {360}let v_849: bitstring = catch-fail(symmetricstateunpack(v_847)) in
        {361}let v_850: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_849),(if success?(4-proj-7-tuple(v_834)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then dhexp(2-proj-2-tuple(v_848),4-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {362}let v_851: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_849),(if success?(4-proj-7-tuple(v_834)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then dhexp(2-proj-2-tuple(v_848),4-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {363}let v_852: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_849),(if success?(4-proj-7-tuple(v_834)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then dhexp(2-proj-2-tuple(v_848),4-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {364}let v_853: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_834)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then dhexp(2-proj-2-tuple(v_848),4-proj-7-tuple(v_834)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_849))) then (if not-caught-fail(v_850) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (v_850,v_851,v_852) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {365}let v_854: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_834)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then dhexp(2-proj-2-tuple(v_848),4-proj-7-tuple(v_834)) else fail-any) else fail-any)) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_853)) then cipherstatepack(2-proj-3-tuple(v_853),minnonce) else fail-any),1-proj-3-tuple(v_853),3-proj-3-tuple(v_849)) else fail-any) else fail-any) else fail-any)) in
        {366}let v_855: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_834))) in
        {367}let v_856: bitstring = catch-fail(symmetricstateunpack(v_854)) in
        {368}let v_857: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_856),(if (success?(5-proj-7-tuple(v_834)) && success?(2-proj-7-tuple(v_834))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),5-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {369}let v_858: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_856),(if (success?(5-proj-7-tuple(v_834)) && success?(2-proj-7-tuple(v_834))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),5-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {370}let v_859: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_856),(if (success?(5-proj-7-tuple(v_834)) && success?(2-proj-7-tuple(v_834))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),5-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {371}let v_860: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_834)) && success?(2-proj-7-tuple(v_834))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),5-proj-7-tuple(v_834)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_856))) then (if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (v_857,v_858,v_859) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_861: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_834)) && success?(2-proj-7-tuple(v_834))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),5-proj-7-tuple(v_834)) else fail-any) else fail-any)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_860)) then cipherstatepack(2-proj-3-tuple(v_860),minnonce) else fail-any),1-proj-3-tuple(v_860),3-proj-3-tuple(v_856)) else fail-any) else fail-any) else fail-any)) in
        {373}let v_862: bitstring = catch-fail(symmetricstateunpack(v_861)) in
        {374}let v_863: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_862))) in
        {375}let v_864: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_863),2-proj-2-tuple(v_863),3-proj-3-tuple(v_862),msg_b(bob,alice,sid))) in
        {376}let v_865: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_862))) in
        {377}let v_866: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_863))) && success?(1-proj-3-tuple(v_862))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then cipherstatepack(1-proj-2-tuple(v_865),increment_nonce(2-proj-2-tuple(v_863))) else fail-any) else fail-any)) in
        {378}let v_867: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_862)) && success?(1-proj-3-tuple(v_862))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then (if not-caught-fail(v_864) then (if not-caught-fail(v_866) then (v_866,v_864) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {379}let v_868: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_867),2-proj-3-tuple(v_862),3-proj-3-tuple(v_862)))) in
        {380}let v_869: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_867)) && success?(symmetricstatepack(1-proj-2-tuple(v_867),2-proj-3-tuple(v_862),3-proj-3-tuple(v_862)))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then symmetricstatepack(1-proj-3-tuple(v_868),2-proj-3-tuple(v_868),hash(3-proj-3-tuple(v_868),2-proj-2-tuple(v_867))) else fail-any) else fail-any)) in
        {381}let v_870: bitstring = catch-fail((if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then (if not-caught-fail(v_869) then (v_869,2-proj-2-tuple(v_867)) else fail-any) else fail-any) else fail-any)) in
        {382}let v_871: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_870),2-proj-7-tuple(v_834),v_837,4-proj-7-tuple(v_834),5-proj-7-tuple(v_834),6-proj-7-tuple(v_834),7-proj-7-tuple(v_834))) in
        {383}let v_872: bitstring = catch-fail(concat3(v_838,2-proj-3-tuple(v_835),2-proj-2-tuple(v_870))) in
        {384}let v_873: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_870))) in
        {385}let v_874: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_873),zero)) in
        {386}let v_875: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_873),zero)) in
        {387}let v_876: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_873),zero)) in
        {388}let v_877: bitstring = catch-fail((if success?(2-proj-3-tuple(v_873)) then (if not-caught-fail(v_874) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (v_874,v_875,v_876) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {389}let v_878: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_877)) then cipherstatepack(1-proj-3-tuple(v_877),minnonce) else fail-any)) in
        {390}let v_879: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_877)) then cipherstatepack(2-proj-3-tuple(v_877),minnonce) else fail-any)) in
        {391}let v_880: bitstring = catch-fail((if success?(1-proj-2-tuple(v_870)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if not-caught-fail(v_878) then (if not-caught-fail(v_879) then (1-proj-2-tuple(v_870),v_878,v_879) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {392}let (hs_881: handshakestate,message_b_882: bitstring,cs1_883: cipherstate,cs2_884: cipherstate) = (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-7-tuple(v_834))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (if not-caught-fail(v_840) then (if not-caught-fail(v_847) then (if not-caught-fail(v_854) then (if not-caught-fail(v_861) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-2-tuple(v_870))))) then (if not-caught-fail(v_871) then (if not-caught-fail(v_872) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (v_871,v_872,2-proj-3-tuple(v_880),3-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {393}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {394}insert statestore(bob,alice,sid,statepack_c(hs_881,cs1_883,cs2_884));
        {395}out(pub, message_b_882)
    ) | (
        {397}!
        {417}get statestore(=bob,=alice,=sid,statepack_c(hs_885: handshakestate,cs1_886: cipherstate,cs2_887: cipherstate)) in
        {398}let hs_888: handshakestate = handshakestatesetcs(hs_885,cs1_886) in
        {399}in(pub, message_c_889: bitstring);
        {400}let v_890: bitstring = catch-fail(handshakestateunpack(hs_888)) in
        {401}let v_891: bitstring = catch-fail(deconcat3(message_c_889)) in
        {402}let v_892: bool = catch-fail(true) in
        {403}let v_893: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_890))) in
        {404}let v_894: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_893))) in
        {405}let v_895: aead = catch-fail(decrypt(1-proj-2-tuple(v_894),2-proj-2-tuple(v_894),3-proj-3-tuple(v_893),3-proj-3-tuple(v_891))) in
        {406}let v_896: bitstring = catch-fail(aeadunpack(v_895)) in
        {407}let v_897: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_893))) in
        {408}let v_898: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_894))) && success?(1-proj-3-tuple(v_893))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then cipherstatepack(1-proj-2-tuple(v_897),increment_nonce(2-proj-2-tuple(v_894))) else fail-any) else fail-any)) in
        {409}let v_899: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_891)) && (success?(3-proj-3-tuple(v_893)) && success?(1-proj-3-tuple(v_893)))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then (if not-caught-fail(v_895) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if not-caught-fail(v_898) then (v_898,3-proj-3-tuple(v_896),1-proj-3-tuple(v_896)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {410}let v_900: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_893),3-proj-3-tuple(v_893)))) in
        {411}let v_901: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_891)) && success?(symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_893),3-proj-3-tuple(v_893)))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then symmetricstatepack(1-proj-3-tuple(v_900),2-proj-3-tuple(v_900),hash(3-proj-3-tuple(v_900),3-proj-3-tuple(v_891))) else fail-any) else fail-any)) in
        {412}let v_902: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_891)) && success?(1-proj-7-tuple(v_890))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (if not-caught-fail(v_901) then (v_901,2-proj-3-tuple(v_899),3-proj-3-tuple(v_899)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {413}let v_903: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_902),2-proj-7-tuple(v_890),3-proj-7-tuple(v_890),4-proj-7-tuple(v_890),5-proj-7-tuple(v_890),6-proj-7-tuple(v_890),7-proj-7-tuple(v_890))) in
        {414}let (hs_904: handshakestate,plaintext_c: bitstring,valid_905: bool) = (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-7-tuple(v_890))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if not-caught-fail(v_892) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if (v_892 && 3-proj-3-tuple(v_902)) then (if not-caught-fail(v_903) then (v_903,2-proj-3-tuple(v_902),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {415}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {416}insert statestore(bob,alice,sid,statepack_d(hs_904,handshakestategetcs(hs_904),cs2_887))
    ) | (
        {418}!
        {436}get statestore(=bob,=alice,=sid,statepack_d(hs_906: handshakestate,cs1_907: cipherstate,cs2_908: cipherstate)) in
        {419}let hs_909: handshakestate = handshakestatesetcs(hs_906,cs2_908) in
        {420}let v_910: bitstring = catch-fail(handshakestateunpack(hs_909)) in
        {421}let v_911: bitstring = catch-fail((empty,empty,empty)) in
        {422}let v_912: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_910))) in
        {423}let v_913: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_912))) in
        {424}let v_914: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_913),2-proj-2-tuple(v_913),3-proj-3-tuple(v_912),msg_d(bob,alice,sid))) in
        {425}let v_915: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_912))) in
        {426}let v_916: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_913))) && success?(1-proj-3-tuple(v_912))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then cipherstatepack(1-proj-2-tuple(v_915),increment_nonce(2-proj-2-tuple(v_913))) else fail-any) else fail-any)) in
        {427}let v_917: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_912)) && success?(1-proj-3-tuple(v_912))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then (if not-caught-fail(v_914) then (if not-caught-fail(v_916) then (v_916,v_914) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {428}let v_918: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_917),2-proj-3-tuple(v_912),3-proj-3-tuple(v_912)))) in
        {429}let v_919: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_917)) && success?(symmetricstatepack(1-proj-2-tuple(v_917),2-proj-3-tuple(v_912),3-proj-3-tuple(v_912)))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then symmetricstatepack(1-proj-3-tuple(v_918),2-proj-3-tuple(v_918),hash(3-proj-3-tuple(v_918),2-proj-2-tuple(v_917))) else fail-any) else fail-any)) in
        {430}let v_920: bitstring = catch-fail((if success?(1-proj-7-tuple(v_910)) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then (if not-caught-fail(v_919) then (v_919,2-proj-2-tuple(v_917)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_921: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_920),2-proj-7-tuple(v_910),3-proj-7-tuple(v_910),4-proj-7-tuple(v_910),5-proj-7-tuple(v_910),6-proj-7-tuple(v_910),7-proj-7-tuple(v_910))) in
        {432}let v_922: bitstring = catch-fail(concat3(1-proj-3-tuple(v_911),2-proj-3-tuple(v_911),2-proj-2-tuple(v_920))) in
        {433}let (hs_923: handshakestate,message_d_924: bitstring) = (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-7-tuple(v_910))))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then (if not-caught-fail(v_921) then (if not-caught-fail(v_922) then (v_921,v_922) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {434}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {435}out(pub, message_d_924)
    ) | (
        {437}event LeakS(phase0,bob);
        {438}out(pub, key_s(bob))
    ) | (
        {439}phase 1;
        {440}event LeakS(phase1,bob);
        {441}out(pub, key_s(bob))
    )
) | (
    {442}let v_925: key = catch-fail(dhexp(key_s(bob),g)) in
    {443}let s_926: keypair = (if not-caught-fail(v_925) then keypairpack(v_925,key_s(bob)) else fail-any) in
    {444}out(pub, getpublickey(s_926));
    (
        {445}let e_927: keypair = keypairpack(empty,empty) in
        {446}let rs_928: key = empty in
        {447}let re_929: key = empty in
        {448}let v_930: bitstring = catch-fail(hash(somename,empty)) in
        {449}let v_931: key = catch-fail(v_930) in
        {450}let v_932: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {451}let v_933: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (if not-caught-fail(v_932) then symmetricstatepack(v_932,v_931,v_930) else fail-any) else fail-any) else fail-any))) in
        {452}let v_934: symmetricstate = catch-fail((if success?((if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (if not-caught-fail(v_932) then symmetricstatepack(v_932,v_931,v_930) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then symmetricstatepack(1-proj-3-tuple(v_933),2-proj-3-tuple(v_933),hash(3-proj-3-tuple(v_933),empty)) else fail-any) else fail-any)) in
        {453}let v_935: bitstring = catch-fail(symmetricstateunpack(v_934)) in
        {454}let v_936: symmetricstate = catch-fail((if success?(getpublickey(s_926)) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_935),hash(3-proj-3-tuple(v_935),getpublickey(s_926))) else fail-any) else fail-any)) in
        {455}let hs_937: handshakestate = (if not-caught-fail(v_934) then (if not-caught-fail(v_936) then handshakestatepack(v_936,s_926,e_927,rs_928,re_929,empty,false) else fail-any) else fail-any) in
        {456}insert statestore(bob,charlie,sid,statepack_a(hs_937))
    ) | (
        {490}get statestore(=bob,=charlie,=sid,statepack_a(hs_938: handshakestate)) in
        {457}in(pub, message_a_939: bitstring);
        {458}let v_940: bitstring = catch-fail(handshakestateunpack(hs_938)) in
        {459}let v_941: bitstring = catch-fail(deconcat3(message_a_939)) in
        {460}let v_942: bool = catch-fail(true) in
        {461}let v_943: key = catch-fail(1-proj-3-tuple(v_941)) in
        {462}let v_944: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_940))) in
        {463}let v_945: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_940)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then symmetricstatepack(1-proj-3-tuple(v_944),2-proj-3-tuple(v_944),hash(3-proj-3-tuple(v_944),v_943)) else fail-any) else fail-any)) in
        {464}let v_946: bitstring = catch-fail(symmetricstateunpack(v_945)) in
        {465}let v_947: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {466}let v_948: aead = catch-fail(decrypt(1-proj-2-tuple(v_947),2-proj-2-tuple(v_947),3-proj-3-tuple(v_946),2-proj-3-tuple(v_941))) in
        {467}let v_949: bitstring = catch-fail(aeadunpack(v_948)) in
        {468}let v_950: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {469}let v_951: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_947))) && success?(1-proj-3-tuple(v_946))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-2-tuple(v_950))))) then cipherstatepack(1-proj-2-tuple(v_950),increment_nonce(2-proj-2-tuple(v_947))) else fail-any) else fail-any)) in
        {470}let v_952: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_941)) && (success?(3-proj-3-tuple(v_946)) && success?(1-proj-3-tuple(v_946)))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_948) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if not-caught-fail(v_951) then (v_951,3-proj-3-tuple(v_949),1-proj-3-tuple(v_949)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {471}let v_953: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) in
        {472}let v_954: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_941)) && success?(symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then symmetricstatepack(1-proj-3-tuple(v_953),2-proj-3-tuple(v_953),hash(3-proj-3-tuple(v_953),2-proj-3-tuple(v_941))) else fail-any) else fail-any)) in
        {473}let v_955: bitstring = catch-fail((if success?(2-proj-3-tuple(v_941)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if not-caught-fail(v_954) then (v_954,2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {474}let v_956: key = catch-fail(2-proj-3-tuple(v_955)) in
        {475}let v_957: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_955))) in
        {476}let v_958: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_957))) in
        {477}let v_959: aead = catch-fail(decrypt(1-proj-2-tuple(v_958),2-proj-2-tuple(v_958),3-proj-3-tuple(v_957),3-proj-3-tuple(v_941))) in
        {478}let v_960: bitstring = catch-fail(aeadunpack(v_959)) in
        {479}let v_961: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_957))) in
        {480}let v_962: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_958))) && success?(1-proj-3-tuple(v_957))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then cipherstatepack(1-proj-2-tuple(v_961),increment_nonce(2-proj-2-tuple(v_958))) else fail-any) else fail-any)) in
        {481}let v_963: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_941)) && (success?(3-proj-3-tuple(v_957)) && success?(1-proj-3-tuple(v_957)))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then (if not-caught-fail(v_959) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if not-caught-fail(v_962) then (v_962,3-proj-3-tuple(v_960),1-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {482}let v_964: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_963),2-proj-3-tuple(v_957),3-proj-3-tuple(v_957)))) in
        {483}let v_965: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_941)) && success?(symmetricstatepack(1-proj-3-tuple(v_963),2-proj-3-tuple(v_957),3-proj-3-tuple(v_957)))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack(1-proj-3-tuple(v_964),2-proj-3-tuple(v_964),hash(3-proj-3-tuple(v_964),3-proj-3-tuple(v_941))) else fail-any) else fail-any)) in
        {484}let v_966: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_941)) && success?(1-proj-3-tuple(v_955))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if not-caught-fail(v_965) then (v_965,2-proj-3-tuple(v_963),3-proj-3-tuple(v_963)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_967: key = catch-fail(dhexp(key_s(charlie),g)) in
        {486}let v_968: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_966),2-proj-7-tuple(v_940),3-proj-7-tuple(v_940),v_956,v_943,6-proj-7-tuple(v_940),7-proj-7-tuple(v_940))) in
        {487}let (hs_969: handshakestate,plaintext_a_970: bitstring,valid_971: bool) = (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-7-tuple(v_940))))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then (if not-caught-fail(v_942) then (if not-caught-fail(v_943) then (if not-caught-fail(v_945) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if not-caught-fail(v_956) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if ((3-proj-3-tuple(v_955) && 3-proj-3-tuple(v_966)) && (v_956 = getpublickey((if not-caught-fail(v_967) then keypairpack(v_967,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_968) then (v_968,2-proj-3-tuple(v_966),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {488}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_970);
        {489}insert statestore(bob,charlie,sid,statepack_b(hs_969))
    ) | (
        {542}get statestore(=bob,=charlie,=sid,statepack_b(hs_972: handshakestate)) in
        {491}let v_973: bitstring = catch-fail(handshakestateunpack(hs_972)) in
        {492}let v_974: bitstring = catch-fail((empty,empty,empty)) in
        {493}let v_975: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {494}let v_976: keypair = catch-fail((if not-caught-fail(v_975) then keypairpack(v_975,key_e(bob,charlie,sid)) else fail-any)) in
        {495}let v_977: bitstring = catch-fail(getpublickey(v_976)) in
        {496}let v_978: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_973))) in
        {497}let v_979: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_973)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then symmetricstatepack(1-proj-3-tuple(v_978),2-proj-3-tuple(v_978),hash(3-proj-3-tuple(v_978),v_977)) else fail-any) else fail-any)) in
        {498}let v_980: bitstring = catch-fail(keypairunpack(v_976)) in
        {499}let v_981: bitstring = catch-fail(symmetricstateunpack(v_979)) in
        {500}let v_982: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_981),(if success?(5-proj-7-tuple(v_973)) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then dhexp(2-proj-2-tuple(v_980),5-proj-7-tuple(v_973)) else fail-any) else fail-any))) in
        {501}let v_983: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_981),(if success?(5-proj-7-tuple(v_973)) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then dhexp(2-proj-2-tuple(v_980),5-proj-7-tuple(v_973)) else fail-any) else fail-any))) in
        {502}let v_984: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_981),(if success?(5-proj-7-tuple(v_973)) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then dhexp(2-proj-2-tuple(v_980),5-proj-7-tuple(v_973)) else fail-any) else fail-any))) in
        {503}let v_985: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_973)) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then dhexp(2-proj-2-tuple(v_980),5-proj-7-tuple(v_973)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_981))) then (if not-caught-fail(v_982) then (if not-caught-fail(v_983) then (if not-caught-fail(v_984) then (v_982,v_983,v_984) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {504}let v_986: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_973)) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then dhexp(2-proj-2-tuple(v_980),5-proj-7-tuple(v_973)) else fail-any) else fail-any)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-3-tuple(v_985))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_985)) then cipherstatepack(2-proj-3-tuple(v_985),minnonce) else fail-any),1-proj-3-tuple(v_985),3-proj-3-tuple(v_981)) else fail-any) else fail-any) else fail-any)) in
        {505}let v_987: bitstring = catch-fail(keypairunpack(v_976)) in
        {506}let v_988: bitstring = catch-fail(symmetricstateunpack(v_986)) in
        {507}let v_989: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_988),(if success?(4-proj-7-tuple(v_973)) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-2-tuple(v_987))))) then dhexp(2-proj-2-tuple(v_987),4-proj-7-tuple(v_973)) else fail-any) else fail-any))) in
        {508}let v_990: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_988),(if success?(4-proj-7-tuple(v_973)) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-2-tuple(v_987))))) then dhexp(2-proj-2-tuple(v_987),4-proj-7-tuple(v_973)) else fail-any) else fail-any))) in
        {509}let v_991: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_988),(if success?(4-proj-7-tuple(v_973)) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-2-tuple(v_987))))) then dhexp(2-proj-2-tuple(v_987),4-proj-7-tuple(v_973)) else fail-any) else fail-any))) in
        {510}let v_992: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_973)) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-2-tuple(v_987))))) then dhexp(2-proj-2-tuple(v_987),4-proj-7-tuple(v_973)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_988))) then (if not-caught-fail(v_989) then (if not-caught-fail(v_990) then (if not-caught-fail(v_991) then (v_989,v_990,v_991) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {511}let v_993: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_973)) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-2-tuple(v_987))))) then dhexp(2-proj-2-tuple(v_987),4-proj-7-tuple(v_973)) else fail-any) else fail-any)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_992)) then cipherstatepack(2-proj-3-tuple(v_992),minnonce) else fail-any),1-proj-3-tuple(v_992),3-proj-3-tuple(v_988)) else fail-any) else fail-any) else fail-any)) in
        {512}let v_994: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_973))) in
        {513}let v_995: bitstring = catch-fail(symmetricstateunpack(v_993)) in
        {514}let v_996: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_995),(if (success?(5-proj-7-tuple(v_973)) && success?(2-proj-7-tuple(v_973))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),5-proj-7-tuple(v_973)) else fail-any) else fail-any))) in
        {515}let v_997: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_995),(if (success?(5-proj-7-tuple(v_973)) && success?(2-proj-7-tuple(v_973))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),5-proj-7-tuple(v_973)) else fail-any) else fail-any))) in
        {516}let v_998: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_995),(if (success?(5-proj-7-tuple(v_973)) && success?(2-proj-7-tuple(v_973))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),5-proj-7-tuple(v_973)) else fail-any) else fail-any))) in
        {517}let v_999: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_973)) && success?(2-proj-7-tuple(v_973))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),5-proj-7-tuple(v_973)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_995))) then (if not-caught-fail(v_996) then (if not-caught-fail(v_997) then (if not-caught-fail(v_998) then (v_996,v_997,v_998) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {518}let v_1000: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_973)) && success?(2-proj-7-tuple(v_973))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),5-proj-7-tuple(v_973)) else fail-any) else fail-any)) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_999)) then cipherstatepack(2-proj-3-tuple(v_999),minnonce) else fail-any),1-proj-3-tuple(v_999),3-proj-3-tuple(v_995)) else fail-any) else fail-any) else fail-any)) in
        {519}let v_1001: bitstring = catch-fail(symmetricstateunpack(v_1000)) in
        {520}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1001))) in
        {521}let v_1003: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1002),2-proj-2-tuple(v_1002),3-proj-3-tuple(v_1001),msg_b(bob,charlie,sid))) in
        {522}let v_1004: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1001))) in
        {523}let v_1005: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1002))) && success?(1-proj-3-tuple(v_1001))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then cipherstatepack(1-proj-2-tuple(v_1004),increment_nonce(2-proj-2-tuple(v_1002))) else fail-any) else fail-any)) in
        {524}let v_1006: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1001)) && success?(1-proj-3-tuple(v_1001))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then (if not-caught-fail(v_1003) then (if not-caught-fail(v_1005) then (v_1005,v_1003) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1007: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1006),2-proj-3-tuple(v_1001),3-proj-3-tuple(v_1001)))) in
        {526}let v_1008: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1006)) && success?(symmetricstatepack(1-proj-2-tuple(v_1006),2-proj-3-tuple(v_1001),3-proj-3-tuple(v_1001)))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then symmetricstatepack(1-proj-3-tuple(v_1007),2-proj-3-tuple(v_1007),hash(3-proj-3-tuple(v_1007),2-proj-2-tuple(v_1006))) else fail-any) else fail-any)) in
        {527}let v_1009: bitstring = catch-fail((if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then (if not-caught-fail(v_1008) then (v_1008,2-proj-2-tuple(v_1006)) else fail-any) else fail-any) else fail-any)) in
        {528}let v_1010: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1009),2-proj-7-tuple(v_973),v_976,4-proj-7-tuple(v_973),5-proj-7-tuple(v_973),6-proj-7-tuple(v_973),7-proj-7-tuple(v_973))) in
        {529}let v_1011: bitstring = catch-fail(concat3(v_977,2-proj-3-tuple(v_974),2-proj-2-tuple(v_1009))) in
        {530}let v_1012: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1009))) in
        {531}let v_1013: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1012),zero)) in
        {532}let v_1014: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1012),zero)) in
        {533}let v_1015: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1012),zero)) in
        {534}let v_1016: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1012)) then (if not-caught-fail(v_1013) then (if not-caught-fail(v_1014) then (if not-caught-fail(v_1015) then (v_1013,v_1014,v_1015) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1017: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1016)) then cipherstatepack(1-proj-3-tuple(v_1016),minnonce) else fail-any)) in
        {536}let v_1018: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1016)) then cipherstatepack(2-proj-3-tuple(v_1016),minnonce) else fail-any)) in
        {537}let v_1019: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1009)) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-3-tuple(v_1012))))) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-3-tuple(v_1016))))) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then (1-proj-2-tuple(v_1009),v_1017,v_1018) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {538}let (hs_1020: handshakestate,message_b_1021: bitstring,cs1_1022: cipherstate,cs2_1023: cipherstate) = (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-7-tuple(v_973))))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if not-caught-fail(v_976) then (if not-caught-fail(v_977) then (if not-caught-fail(v_979) then (if not-caught-fail(v_986) then (if not-caught-fail(v_993) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-2-tuple(v_1009))))) then (if not-caught-fail(v_1010) then (if not-caught-fail(v_1011) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (v_1010,v_1011,2-proj-3-tuple(v_1019),3-proj-3-tuple(v_1019)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {539}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {540}insert statestore(bob,charlie,sid,statepack_c(hs_1020,cs1_1022,cs2_1023));
        {541}out(pub, message_b_1021)
    ) | (
        {543}!
        {563}get statestore(=bob,=charlie,=sid,statepack_c(hs_1024: handshakestate,cs1_1025: cipherstate,cs2_1026: cipherstate)) in
        {544}let hs_1027: handshakestate = handshakestatesetcs(hs_1024,cs1_1025) in
        {545}in(pub, message_c_1028: bitstring);
        {546}let v_1029: bitstring = catch-fail(handshakestateunpack(hs_1027)) in
        {547}let v_1030: bitstring = catch-fail(deconcat3(message_c_1028)) in
        {548}let v_1031: bool = catch-fail(true) in
        {549}let v_1032: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1029))) in
        {550}let v_1033: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1032))) in
        {551}let v_1034: aead = catch-fail(decrypt(1-proj-2-tuple(v_1033),2-proj-2-tuple(v_1033),3-proj-3-tuple(v_1032),3-proj-3-tuple(v_1030))) in
        {552}let v_1035: bitstring = catch-fail(aeadunpack(v_1034)) in
        {553}let v_1036: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1032))) in
        {554}let v_1037: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1033))) && success?(1-proj-3-tuple(v_1032))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-2-tuple(v_1036))))) then cipherstatepack(1-proj-2-tuple(v_1036),increment_nonce(2-proj-2-tuple(v_1033))) else fail-any) else fail-any)) in
        {555}let v_1038: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1030)) && (success?(3-proj-3-tuple(v_1032)) && success?(1-proj-3-tuple(v_1032)))) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then (if not-caught-fail(v_1034) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then (if not-caught-fail(v_1037) then (v_1037,3-proj-3-tuple(v_1035),1-proj-3-tuple(v_1035)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {556}let v_1039: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1038),2-proj-3-tuple(v_1032),3-proj-3-tuple(v_1032)))) in
        {557}let v_1040: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1030)) && success?(symmetricstatepack(1-proj-3-tuple(v_1038),2-proj-3-tuple(v_1032),3-proj-3-tuple(v_1032)))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1039),hash(3-proj-3-tuple(v_1039),3-proj-3-tuple(v_1030))) else fail-any) else fail-any)) in
        {558}let v_1041: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1030)) && success?(1-proj-7-tuple(v_1029))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-3-tuple(v_1032))))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then (if not-caught-fail(v_1040) then (v_1040,2-proj-3-tuple(v_1038),3-proj-3-tuple(v_1038)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1042: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1041),2-proj-7-tuple(v_1029),3-proj-7-tuple(v_1029),4-proj-7-tuple(v_1029),5-proj-7-tuple(v_1029),6-proj-7-tuple(v_1029),7-proj-7-tuple(v_1029))) in
        {560}let (hs_1043: handshakestate,plaintext_c_1044: bitstring,valid_1045: bool) = (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-7-tuple(v_1029))))) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then (if not-caught-fail(v_1031) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if (v_1031 && 3-proj-3-tuple(v_1041)) then (if not-caught-fail(v_1042) then (v_1042,2-proj-3-tuple(v_1041),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {561}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1044);
        {562}insert statestore(bob,charlie,sid,statepack_d(hs_1043,handshakestategetcs(hs_1043),cs2_1026))
    ) | (
        {564}!
        {582}get statestore(=bob,=charlie,=sid,statepack_d(hs_1046: handshakestate,cs1_1047: cipherstate,cs2_1048: cipherstate)) in
        {565}let hs_1049: handshakestate = handshakestatesetcs(hs_1046,cs2_1048) in
        {566}let v_1050: bitstring = catch-fail(handshakestateunpack(hs_1049)) in
        {567}let v_1051: bitstring = catch-fail((empty,empty,empty)) in
        {568}let v_1052: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1050))) in
        {569}let v_1053: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1052))) in
        {570}let v_1054: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1053),2-proj-2-tuple(v_1053),3-proj-3-tuple(v_1052),msg_d(bob,charlie,sid))) in
        {571}let v_1055: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1052))) in
        {572}let v_1056: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1053))) && success?(1-proj-3-tuple(v_1052))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then cipherstatepack(1-proj-2-tuple(v_1055),increment_nonce(2-proj-2-tuple(v_1053))) else fail-any) else fail-any)) in
        {573}let v_1057: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1052)) && success?(1-proj-3-tuple(v_1052))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1056) then (v_1056,v_1054) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {574}let v_1058: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1057),2-proj-3-tuple(v_1052),3-proj-3-tuple(v_1052)))) in
        {575}let v_1059: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1057)) && success?(symmetricstatepack(1-proj-2-tuple(v_1057),2-proj-3-tuple(v_1052),3-proj-3-tuple(v_1052)))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then symmetricstatepack(1-proj-3-tuple(v_1058),2-proj-3-tuple(v_1058),hash(3-proj-3-tuple(v_1058),2-proj-2-tuple(v_1057))) else fail-any) else fail-any)) in
        {576}let v_1060: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1050)) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then (if not-caught-fail(v_1059) then (v_1059,2-proj-2-tuple(v_1057)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {577}let v_1061: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1060),2-proj-7-tuple(v_1050),3-proj-7-tuple(v_1050),4-proj-7-tuple(v_1050),5-proj-7-tuple(v_1050),6-proj-7-tuple(v_1050),7-proj-7-tuple(v_1050))) in
        {578}let v_1062: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1051),2-proj-3-tuple(v_1051),2-proj-2-tuple(v_1060))) in
        {579}let (hs_1063: handshakestate,message_d_1064: bitstring) = (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-7-tuple(v_1050))))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (v_1061,v_1062) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {580}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {581}out(pub, message_d_1064)
    ) | (
        {583}event LeakS(phase0,bob);
        {584}out(pub, key_s(bob))
    ) | (
        {585}phase 1;
        {586}event LeakS(phase1,bob);
        {587}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 149 rules in the queue.
400 rules inserted. The rule base contains 385 rules. 54 rules in the queue.
600 rules inserted. The rule base contains 566 rules. 96 rules in the queue.
800 rules inserted. The rule base contains 738 rules. 101 rules in the queue.
1000 rules inserted. The rule base contains 851 rules. 119 rules in the queue.
1200 rules inserted. The rule base contains 972 rules. 147 rules in the queue.
1400 rules inserted. The rule base contains 1094 rules. 171 rules in the queue.
1600 rules inserted. The rule base contains 1194 rules. 176 rules in the queue.
1800 rules inserted. The rule base contains 1318 rules. 176 rules in the queue.
2000 rules inserted. The rule base contains 1499 rules. 213 rules in the queue.
2200 rules inserted. The rule base contains 1683 rules. 232 rules in the queue.
2400 rules inserted. The rule base contains 1856 rules. 244 rules in the queue.
2600 rules inserted. The rule base contains 1998 rules. 259 rules in the queue.
2800 rules inserted. The rule base contains 2126 rules. 250 rules in the queue.
3000 rules inserted. The rule base contains 2242 rules. 237 rules in the queue.
3200 rules inserted. The rule base contains 2354 rules. 239 rules in the queue.
3400 rules inserted. The rule base contains 2513 rules. 236 rules in the queue.
3600 rules inserted. The rule base contains 2665 rules. 242 rules in the queue.
3800 rules inserted. The rule base contains 2822 rules. 247 rules in the queue.
4000 rules inserted. The rule base contains 2946 rules. 275 rules in the queue.
4200 rules inserted. The rule base contains 3057 rules. 253 rules in the queue.
4400 rules inserted. The rule base contains 3195 rules. 211 rules in the queue.
4600 rules inserted. The rule base contains 3342 rules. 166 rules in the queue.
4800 rules inserted. The rule base contains 3467 rules. 143 rules in the queue.
5000 rules inserted. The rule base contains 3585 rules. 131 rules in the queue.
5200 rules inserted. The rule base contains 3661 rules. 33 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288072]),msg_a(alice,bob,sid[!1 = @sid_23085288072]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23085288073]),msg_a(alice,bob,sid[!1 = @sid_23085288072])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288081]),msg_a(alice,bob,sid[!1 = @sid_23085288081]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23085288082]),msg_a(alice,bob,sid[!1 = @sid_23085288081])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288091]),msg_a(alice,bob,sid[!1 = @sid_23085288091]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23085288092]),msg_a(alice,bob,sid[!1 = @sid_23085288091])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288101]),msg_a(alice,bob,sid[!1 = @sid_23085288101]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23085288102]),msg_a(alice,bob,sid[!1 = @sid_23085288101])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288110]),msg_a(alice,bob,sid[!1 = @sid_23085288110]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_23085288111]),msg_a(alice,bob,sid[!1 = @sid_23085288110])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288119]),msg_a(alice,bob,sid[!1 = @sid_23085288119]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_23085288119]))
Abbreviations:
sid_23085288196 = sid[!1 = @sid_23085288171]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_23085288196,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_23085288196,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_23085288196,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_23085288196),msg_a(alice,bob,sid_23085288196)) may be executed at {49}.
So the message concat3(dhexp(key_e(alice,bob,sid_23085288196),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196))) may be sent on channel pub at output {51}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_23085288196),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_23085288196),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_23085288196),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_23085288196),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288196),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288196),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288196),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_23085288196),g).
attacker(dhexp(key_e(alice,bob,sid_23085288196),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {298}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_23085288196),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g)))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288196),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288196)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_23085288196).
attacker(msg_a(alice,bob,sid_23085288196)).

21. By 20, the attacker may know msg_a(alice,bob,sid_23085288196).
So the attacker may know msg_a(alice,bob,sid_23085288196) in phase 1.
attacker_p1(msg_a(alice,bob,sid_23085288196)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288199]),msg_a(alice,bob,sid[!1 = @sid_23085288199]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_23085288199]))
Abbreviations:
sid_23085288276 = sid[!1 = @sid_23085288251]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_23085288276,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_23085288276,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_23085288276,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_23085288276),msg_a(alice,bob,sid_23085288276)) may be executed at {49}.
So the message concat3(dhexp(key_e(alice,bob,sid_23085288276),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276))) may be sent on channel pub at output {51}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_23085288276),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_23085288276),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_23085288276),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_23085288276),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288276),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288276),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288276),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_23085288276),g).
attacker(dhexp(key_e(alice,bob,sid_23085288276),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {298}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_23085288276),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g)))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288276),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288276)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_23085288276).
attacker(msg_a(alice,bob,sid_23085288276)).

21. By 20, the attacker may know msg_a(alice,bob,sid_23085288276).
So the attacker may know msg_a(alice,bob,sid_23085288276) in phase 1.
attacker_p1(msg_a(alice,bob,sid_23085288276)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288279]),msg_a(alice,bob,sid[!1 = @sid_23085288279]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_23085288279]))
Abbreviations:
sid_23085288357 = sid[!1 = @sid_23085288332]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_23085288357,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_23085288357,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_23085288357,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_23085288357),msg_a(alice,bob,sid_23085288357)) may be executed at {49}.
So the message concat3(dhexp(key_e(alice,bob,sid_23085288357),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357))) may be sent on channel pub at output {51}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_23085288357),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_23085288357),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_23085288357),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_23085288357),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288357),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288357),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288357),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_23085288357),g).
attacker(dhexp(key_e(alice,bob,sid_23085288357),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {298}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_23085288357),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g)))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288357),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288357)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_23085288357).
attacker(msg_a(alice,bob,sid_23085288357)).

21. By 20, the attacker may know msg_a(alice,bob,sid_23085288357).
So the attacker may know msg_a(alice,bob,sid_23085288357) in phase 1.
attacker_p1(msg_a(alice,bob,sid_23085288357)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288360]),msg_a(alice,bob,sid[!1 = @sid_23085288360]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_23085288360]))
Abbreviations:
sid_23085288437 = sid[!1 = @sid_23085288412]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_23085288437,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_23085288437,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_23085288437,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_23085288437),msg_a(alice,bob,sid_23085288437)) may be executed at {49}.
So the message concat3(dhexp(key_e(alice,bob,sid_23085288437),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437))) may be sent on channel pub at output {51}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_23085288437),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_23085288437),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_23085288437),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_23085288437),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288437),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288437),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_23085288437),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_23085288437),g).
attacker(dhexp(key_e(alice,bob,sid_23085288437),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {298}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_23085288437),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g)))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288437),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288437)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_23085288437).
attacker(msg_a(alice,bob,sid_23085288437)).

21. By 20, the attacker may know msg_a(alice,bob,sid_23085288437).
So the attacker may know msg_a(alice,bob,sid_23085288437) in phase 1.
attacker_p1(msg_a(alice,bob,sid_23085288437)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288440]),msg_b(bob,alice,sid[!1 = @sid_23085288440]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288441]),msg_a(alice,bob,sid[!1 = @sid_23085288441]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23085288441]),msg_b(bob,alice,sid[!1 = @sid_23085288440])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288449]),msg_b(bob,alice,sid[!1 = @sid_23085288449]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288450]),msg_a(alice,bob,sid[!1 = @sid_23085288450]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23085288450]),msg_b(bob,alice,sid[!1 = @sid_23085288449])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288459]),msg_b(bob,alice,sid[!1 = @sid_23085288459]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288460]),msg_a(alice,bob,sid[!1 = @sid_23085288460]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23085288460]),msg_b(bob,alice,sid[!1 = @sid_23085288459])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288469]),msg_b(bob,alice,sid[!1 = @sid_23085288469]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288470]),msg_a(alice,bob,sid[!1 = @sid_23085288470]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23085288470]),msg_b(bob,alice,sid[!1 = @sid_23085288469])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288478]),msg_b(bob,alice,sid[!1 = @sid_23085288478]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288479]),msg_a(alice,bob,sid[!1 = @sid_23085288479]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_23085288479]),msg_b(bob,alice,sid[!1 = @sid_23085288478])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288500]),msg_c(alice,bob,sid[!1 = @sid_23085288500]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288501]),msg_b(bob,alice,sid[!1 = @sid_23085288501]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288500]),msg_a(alice,bob,sid[!1 = @sid_23085288500]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23085288501]),msg_c(alice,bob,sid[!1 = @sid_23085288500])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288509]),msg_c(alice,bob,sid[!1 = @sid_23085288509]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288510]),msg_b(bob,alice,sid[!1 = @sid_23085288510]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288509]),msg_a(alice,bob,sid[!1 = @sid_23085288509]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23085288510]),msg_c(alice,bob,sid[!1 = @sid_23085288509])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288519]),msg_c(alice,bob,sid[!1 = @sid_23085288519]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288520]),msg_b(bob,alice,sid[!1 = @sid_23085288520]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288519]),msg_a(alice,bob,sid[!1 = @sid_23085288519]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23085288520]),msg_c(alice,bob,sid[!1 = @sid_23085288519])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1167,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288529]),msg_c(alice,bob,sid[!1 = @sid_23085288529]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288530]),msg_b(bob,alice,sid[!1 = @sid_23085288530]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288529]),msg_a(alice,bob,sid[!1 = @sid_23085288529]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23085288530]),msg_c(alice,bob,sid[!1 = @sid_23085288529])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288538]),msg_c(alice,bob,sid[!1 = @sid_23085288538]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288539]),msg_b(bob,alice,sid[!1 = @sid_23085288539]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288538]),msg_a(alice,bob,sid[!1 = @sid_23085288538]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_23085288539]),msg_c(alice,bob,sid[!1 = @sid_23085288538])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23085288560]),msg_d(bob,alice,sid[!1 = @sid_23085288560]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288561]),msg_c(alice,bob,sid[!1 = @sid_23085288561]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288560]),msg_b(bob,alice,sid[!1 = @sid_23085288560]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288561]),msg_a(alice,bob,sid[!1 = @sid_23085288561]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23085288561]),msg_d(bob,alice,sid[!1 = @sid_23085288560])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23085288569]),msg_d(bob,alice,sid[!1 = @sid_23085288569]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288570]),msg_c(alice,bob,sid[!1 = @sid_23085288570]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288569]),msg_b(bob,alice,sid[!1 = @sid_23085288569]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288570]),msg_a(alice,bob,sid[!1 = @sid_23085288570]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23085288570]),msg_d(bob,alice,sid[!1 = @sid_23085288569])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23085288579]),msg_d(bob,alice,sid[!1 = @sid_23085288579]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288580]),msg_c(alice,bob,sid[!1 = @sid_23085288580]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288579]),msg_b(bob,alice,sid[!1 = @sid_23085288579]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288580]),msg_a(alice,bob,sid[!1 = @sid_23085288580]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23085288580]),msg_d(bob,alice,sid[!1 = @sid_23085288579])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1167,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23085288589]),msg_d(bob,alice,sid[!1 = @sid_23085288589]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288590]),msg_c(alice,bob,sid[!1 = @sid_23085288590]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288589]),msg_b(bob,alice,sid[!1 = @sid_23085288589]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288590]),msg_a(alice,bob,sid[!1 = @sid_23085288590]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23085288590]),msg_d(bob,alice,sid[!1 = @sid_23085288589])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23085288598]),msg_d(bob,alice,sid[!1 = @sid_23085288598]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288599]),msg_c(alice,bob,sid[!1 = @sid_23085288599]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288598]),msg_b(bob,alice,sid[!1 = @sid_23085288598]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288599]),msg_a(alice,bob,sid[!1 = @sid_23085288599]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_23085288599]),msg_d(bob,alice,sid[!1 = @sid_23085288598])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_23085288618]),msg_d(bob,alice,sid[!1 = @sid_23085288618]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_23085288619]),msg_c(alice,bob,sid[!1 = @sid_23085288619]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_23085288618]),msg_b(bob,alice,sid[!1 = @sid_23085288618]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_23085288619]),msg_a(alice,bob,sid[!1 = @sid_23085288619]))) -> end(RecvEnd(true))
Abbreviations:
sid_23085288863 = sid[!1 = @sid_23085288852]
sid_23085288864 = sid[!1 = @sid_23085288806]

1. The entry statestore(alice,bob,sid_23085288863,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_23085288863,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,sid_23085288863,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_23085288863),msg_a(alice,bob,sid_23085288863)) may be executed at {49}.
So the entry statestore(alice,bob,sid_23085288863,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {50}.
table(statestore(alice,bob,sid_23085288863,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,alice,sid_23085288864,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {310}.
table(statestore(bob,alice,sid_23085288864,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_23085288863,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {52}.
The event SendMsg(alice,bob,stagepack_a(sid_23085288863),msg_a(alice,bob,sid_23085288863)) may be executed at {49}.
So the message concat3(dhexp(key_e(alice,bob,sid_23085288863),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))) may be sent on channel pub at output {51}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_23085288863),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863)))).

5. The entry statestore(bob,alice,sid_23085288864,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {344}.
The message concat3(dhexp(key_e(alice,bob,sid_23085288863),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))) that may be sent on channel pub by 4 may be received at input {311}.
We have dhexp(key_e(alice,bob,sid_23085288863),g) <> caught-fail.
So the entry statestore(bob,alice,sid_23085288864,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false))) may be inserted in a table at insert {343}.
table(statestore(bob,alice,sid_23085288864,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false)))).

6. The entry statestore(bob,alice,sid_23085288864,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false))) that may be in a table by 5 may be read at get {396}.
The event SendMsg(bob,alice,stagepack_b(sid_23085288864),msg_b(bob,alice,sid_23085288864)) may be executed at {393}.
So the message concat3(dhexp(key_e(bob,alice,sid_23085288864),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))) may be sent on channel pub at output {395}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_23085288864),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864)))).

7. The entry statestore(alice,bob,sid_23085288863,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {103}.
The message concat3(dhexp(key_e(bob,alice,sid_23085288864),g),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))) that may be sent on channel pub by 6 may be received at input {53}.
We have dhexp(key_e(bob,alice,sid_23085288864),g) <> caught-fail.
So the entry statestore(alice,bob,sid_23085288863,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_23085288864),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce))) may be inserted in a table at insert {102}.
table(statestore(alice,bob,sid_23085288863,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_23085288864),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_23085288863,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_23085288864),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce))) that may be in a table by 7 may be read at get {123}.
The event SendMsg(alice,bob,stagepack_c(sid_23085288863),msg_c(alice,bob,sid_23085288863)) may be executed at {120}.
So the entry statestore(alice,bob,sid_23085288863,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_23085288864),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce))) may be inserted in a table at insert {121}.
table(statestore(alice,bob,sid_23085288863,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_23085288864),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_23085288864,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false))) that may be in a table by 5 may be read at get {396}.
The event SendMsg(bob,alice,stagepack_b(sid_23085288864),msg_b(bob,alice,sid_23085288864)) may be executed at {393}.
So the entry statestore(bob,alice,sid_23085288864,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_23085288864),g),key_e(bob,alice,sid_23085288864)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce))) may be inserted in a table at insert {394}.
table(statestore(bob,alice,sid_23085288864,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_23085288864),g),key_e(bob,alice,sid_23085288864)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_23085288863,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_23085288864),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce))) that may be in a table by 7 may be read at get {123}.
The event SendMsg(alice,bob,stagepack_c(sid_23085288863),msg_c(alice,bob,sid_23085288863)) may be executed at {120}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863))) may be sent on channel pub at output {122}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863)))).

11. The entry statestore(bob,alice,sid_23085288864,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_23085288864),g),key_e(bob,alice,sid_23085288864)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce))) that may be in a table by 9 may be read at get {417}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863))) that may be sent on channel pub by 10 may be received at input {399}.
So the entry statestore(bob,alice,sid_23085288864,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_23085288864),g),key_e(bob,alice,sid_23085288864)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce))) may be inserted in a table at insert {416}.
table(statestore(bob,alice,sid_23085288864,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_23085288864),g),key_e(bob,alice,sid_23085288864)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_23085288864,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_23085288864),g),key_e(bob,alice,sid_23085288864)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_23085288863),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce))) that may be in a table by 11 may be read at get {436}.
The event SendMsg(bob,alice,stagepack_d(sid_23085288864),msg_d(bob,alice,sid_23085288864)) may be executed at {434}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863))),msg_d(bob,alice,sid_23085288864))) may be sent on channel pub at output {435}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863))),msg_d(bob,alice,sid_23085288864)))).

13. The entry statestore(alice,bob,sid_23085288863,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_23085288863),g),key_e(alice,bob,sid_23085288863)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_23085288864),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce))) that may be in a table by 8 may be read at get {144}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_23085288863),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_23085288864),g))),dhexp(key_e(alice,bob,sid_23085288863),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_23085288863),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_23085288863))),dhexp(key_e(bob,alice,sid_23085288864),g)),msg_b(bob,alice,sid_23085288864))),msg_c(alice,bob,sid_23085288863))),msg_d(bob,alice,sid_23085288864))) that may be sent on channel pub by 12 may be received at input {126}.
So event RecvEnd(true) may be executed at {143}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
