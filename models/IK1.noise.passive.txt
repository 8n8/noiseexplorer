File "IK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "IK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 307, character 6:
Warning: identifier s rebound.
File "IK1.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IK1.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 317, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 324, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 324, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 353, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 353, characters 48-53:
Warning: identifier valid1 rebound.
File "IK1.noise.passive.pv", line 354, characters 6-7:
Warning: identifier rs rebound.
File "IK1.noise.passive.pv", line 355, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 357, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 365, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 368, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 370, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 373, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 383, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 393, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 540, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 393, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 532, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 525, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 365, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 368, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 370, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 373, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 517, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 307, character 6:
Warning: identifier s rebound.
File "IK1.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IK1.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 590, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 583, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 383, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 575, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 317, character 6:
Warning: identifier e rebound.
File "IK1.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ne rebound.
File "IK1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 324, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 324, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "IK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "IK1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 353, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 353, characters 48-53:
Warning: identifier valid1 rebound.
File "IK1.noise.passive.pv", line 354, characters 6-7:
Warning: identifier rs rebound.
File "IK1.noise.passive.pv", line 355, characters 7-8:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 357, characters 7-8:
Warning: identifier hs rebound.
File "IK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "IK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "IK1.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_492: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_492));
    (
        {4}let e_493: keypair = keypairpack(empty,empty) in
        {5}let v_494: key = catch-fail(dhexp(key_s(bob),g)) in
        {6}let rs_495: key = getpublickey((if not-caught-fail(v_494) then keypairpack(v_494,key_s(bob)) else fail-any)) in
        {7}let re_496: key = empty in
        {8}let v_497: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_498: key = catch-fail(v_497) in
        {10}let v_499: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_500: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_497) then (if not-caught-fail(v_498) then (if not-caught-fail(v_499) then symmetricstatepack(v_499,v_498,v_497) else fail-any) else fail-any) else fail-any))) in
        {12}let v_501: symmetricstate = catch-fail((if success?((if not-caught-fail(v_497) then (if not-caught-fail(v_498) then (if not-caught-fail(v_499) then symmetricstatepack(v_499,v_498,v_497) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then symmetricstatepack(1-proj-3-tuple(v_500),2-proj-3-tuple(v_500),hash(3-proj-3-tuple(v_500),empty)) else fail-any) else fail-any)) in
        {13}let v_502: bitstring = catch-fail(symmetricstateunpack(v_501)) in
        {14}let v_503: symmetricstate = catch-fail((if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then symmetricstatepack(1-proj-3-tuple(v_502),2-proj-3-tuple(v_502),hash(3-proj-3-tuple(v_502),rs_495)) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_501) then (if not-caught-fail(v_503) then handshakestatepack(v_503,s_492,e_493,rs_495,re_496,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {50}get statestore(=alice,=bob,statepack_a(hs_504: handshakestate)) in
        {17}let v_505: bitstring = catch-fail(handshakestateunpack(hs_504)) in
        {18}let v_506: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_507: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_508: keypair = catch-fail((if not-caught-fail(v_507) then keypairpack(v_507,key_e(alice,bob)) else fail-any)) in
        {21}let v_509: bitstring = catch-fail(getpublickey(v_508)) in
        {22}let v_510: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_505))) in
        {23}let v_511: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_505)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then symmetricstatepack(1-proj-3-tuple(v_510),2-proj-3-tuple(v_510),hash(3-proj-3-tuple(v_510),v_509)) else fail-any) else fail-any)) in
        {24}let v_512: key = catch-fail(dhexp(key_s(alice),g)) in
        {25}let v_513: keypair = catch-fail((if not-caught-fail(v_512) then keypairpack(v_512,key_s(alice)) else fail-any)) in
        {26}let v_514: bitstring = catch-fail(symmetricstateunpack(v_511)) in
        {27}let v_515: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_514))) in
        {28}let v_516: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_515),2-proj-2-tuple(v_515),3-proj-3-tuple(v_514),getpublickey(v_513))) in
        {29}let v_517: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_514))) in
        {30}let v_518: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_515))) && success?(1-proj-3-tuple(v_514))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then cipherstatepack(1-proj-2-tuple(v_517),increment_nonce(2-proj-2-tuple(v_515))) else fail-any) else fail-any)) in
        {31}let v_519: bitstring = catch-fail((if (success?(getpublickey(v_513)) && (success?(3-proj-3-tuple(v_514)) && success?(1-proj-3-tuple(v_514)))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-2-tuple(v_515))))) then (if not-caught-fail(v_516) then (if not-caught-fail(v_518) then (v_518,v_516) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_520: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_519),2-proj-3-tuple(v_514),3-proj-3-tuple(v_514)))) in
        {33}let v_521: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_519)) && success?(symmetricstatepack(1-proj-2-tuple(v_519),2-proj-3-tuple(v_514),3-proj-3-tuple(v_514)))) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then symmetricstatepack(1-proj-3-tuple(v_520),2-proj-3-tuple(v_520),hash(3-proj-3-tuple(v_520),2-proj-2-tuple(v_519))) else fail-any) else fail-any)) in
        {34}let v_522: bitstring = catch-fail((if success?(getpublickey(v_513)) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then (if not-caught-fail(v_521) then (v_521,2-proj-2-tuple(v_519)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {35}let v_523: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_522))) in
        {36}let v_524: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_523))) in
        {37}let v_525: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_524),2-proj-2-tuple(v_524),3-proj-3-tuple(v_523),msg_a(alice,bob))) in
        {38}let v_526: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_523))) in
        {39}let v_527: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_524))) && success?(1-proj-3-tuple(v_523))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then cipherstatepack(1-proj-2-tuple(v_526),increment_nonce(2-proj-2-tuple(v_524))) else fail-any) else fail-any)) in
        {40}let v_528: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_523)) && success?(1-proj-3-tuple(v_523))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-2-tuple(v_524))))) then (if not-caught-fail(v_525) then (if not-caught-fail(v_527) then (v_527,v_525) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_529: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_528),2-proj-3-tuple(v_523),3-proj-3-tuple(v_523)))) in
        {42}let v_530: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_528)) && success?(symmetricstatepack(1-proj-2-tuple(v_528),2-proj-3-tuple(v_523),3-proj-3-tuple(v_523)))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then symmetricstatepack(1-proj-3-tuple(v_529),2-proj-3-tuple(v_529),hash(3-proj-3-tuple(v_529),2-proj-2-tuple(v_528))) else fail-any) else fail-any)) in
        {43}let v_531: bitstring = catch-fail((if success?(1-proj-2-tuple(v_522)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-2-tuple(v_528))))) then (if not-caught-fail(v_530) then (v_530,2-proj-2-tuple(v_528)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {44}let v_532: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_531),v_513,v_508,4-proj-7-tuple(v_505),5-proj-7-tuple(v_505),6-proj-7-tuple(v_505),7-proj-7-tuple(v_505))) in
        {45}let v_533: bitstring = catch-fail(concat3(v_509,2-proj-2-tuple(v_522),2-proj-2-tuple(v_531))) in
        {46}let (hs_534: handshakestate,re_535: key,message_a: bitstring) = (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-7-tuple(v_505))))) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (if not-caught-fail(v_511) then (if not-caught-fail(v_513) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then (if not-caught-fail(v_532) then (if not-caught-fail(v_533) then (v_532,5-proj-7-tuple(v_505),v_533) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {47}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {48}insert statestore(alice,bob,statepack_b(hs_534));
        {49}out(pub, message_a)
    ) | (
        {93}get statestore(=alice,=bob,statepack_b(hs_536: handshakestate)) in
        {51}in(pub, message_b: bitstring);
        {52}let v_537: bitstring = catch-fail(handshakestateunpack(hs_536)) in
        {53}let v_538: bitstring = catch-fail(deconcat3(message_b)) in
        {54}let v_539: bool = catch-fail(true) in
        {55}let v_540: key = catch-fail(1-proj-3-tuple(v_538)) in
        {56}let v_541: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_537))) in
        {57}let v_542: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_537)) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack(1-proj-3-tuple(v_541),2-proj-3-tuple(v_541),hash(3-proj-3-tuple(v_541),v_540)) else fail-any) else fail-any)) in
        {58}let v_543: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_537))) in
        {59}let v_544: bitstring = catch-fail(symmetricstateunpack(v_542)) in
        {60}let v_545: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_544),(if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any))) in
        {61}let v_546: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_544),(if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any))) in
        {62}let v_547: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_544),(if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any))) in
        {63}let v_548: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_544))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (v_545,v_546,v_547) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {64}let v_549: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_548)) then cipherstatepack(2-proj-3-tuple(v_548),minnonce) else fail-any),1-proj-3-tuple(v_548),3-proj-3-tuple(v_544)) else fail-any) else fail-any) else fail-any)) in
        {65}let v_550: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_537))) in
        {66}let v_551: bitstring = catch-fail(symmetricstateunpack(v_549)) in
        {67}let v_552: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_551),(if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any))) in
        {68}let v_553: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_551),(if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any))) in
        {69}let v_554: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_551),(if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any))) in
        {70}let v_555: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_551))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (v_552,v_553,v_554) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_556: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_537)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_540) else fail-any) else fail-any)) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_555)) then cipherstatepack(2-proj-3-tuple(v_555),minnonce) else fail-any),1-proj-3-tuple(v_555),3-proj-3-tuple(v_551)) else fail-any) else fail-any) else fail-any)) in
        {72}let v_557: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_537))) in
        {73}let v_558: bitstring = catch-fail(symmetricstateunpack(v_556)) in
        {74}let v_559: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_558),(if (success?(4-proj-7-tuple(v_537)) && success?(3-proj-7-tuple(v_537))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_537)) else fail-any) else fail-any))) in
        {75}let v_560: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_558),(if (success?(4-proj-7-tuple(v_537)) && success?(3-proj-7-tuple(v_537))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_537)) else fail-any) else fail-any))) in
        {76}let v_561: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_558),(if (success?(4-proj-7-tuple(v_537)) && success?(3-proj-7-tuple(v_537))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_537)) else fail-any) else fail-any))) in
        {77}let v_562: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_537)) && success?(3-proj-7-tuple(v_537))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_537)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_558))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (v_559,v_560,v_561) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_563: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_537)) && success?(3-proj-7-tuple(v_537))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_537)) else fail-any) else fail-any)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_562)) then cipherstatepack(2-proj-3-tuple(v_562),minnonce) else fail-any),1-proj-3-tuple(v_562),3-proj-3-tuple(v_558)) else fail-any) else fail-any) else fail-any)) in
        {79}let v_564: bitstring = catch-fail(symmetricstateunpack(v_563)) in
        {80}let v_565: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {81}let v_566: aead = catch-fail(decrypt(1-proj-2-tuple(v_565),2-proj-2-tuple(v_565),3-proj-3-tuple(v_564),3-proj-3-tuple(v_538))) in
        {82}let v_567: bitstring = catch-fail(aeadunpack(v_566)) in
        {83}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {84}let v_569: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_565))) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then cipherstatepack(1-proj-2-tuple(v_568),increment_nonce(2-proj-2-tuple(v_565))) else fail-any) else fail-any)) in
        {85}let v_570: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_538)) && (success?(3-proj-3-tuple(v_564)) && success?(1-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-2-tuple(v_565))))) then (if not-caught-fail(v_566) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if not-caught-fail(v_569) then (v_569,3-proj-3-tuple(v_567),1-proj-3-tuple(v_567)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_571: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) in
        {87}let v_572: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_538)) && success?(symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack(1-proj-3-tuple(v_571),2-proj-3-tuple(v_571),hash(3-proj-3-tuple(v_571),3-proj-3-tuple(v_538))) else fail-any) else fail-any)) in
        {88}let v_573: bitstring = catch-fail((if success?(3-proj-3-tuple(v_538)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if not-caught-fail(v_572) then (v_572,2-proj-3-tuple(v_570),3-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_574: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_573),2-proj-7-tuple(v_537),3-proj-7-tuple(v_537),4-proj-7-tuple(v_537),v_540,6-proj-7-tuple(v_537),7-proj-7-tuple(v_537))) in
        {90}let (hs_575: handshakestate,re_576: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-7-tuple(v_537))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if not-caught-fail(v_539) then (if not-caught-fail(v_540) then (if not-caught-fail(v_542) then (if not-caught-fail(v_549) then (if not-caught-fail(v_556) then (if not-caught-fail(v_563) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if (v_539 && 3-proj-3-tuple(v_573)) then (if not-caught-fail(v_574) then (v_574,getpublickey(3-proj-7-tuple(v_537)),2-proj-3-tuple(v_573),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {91}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {92}insert statestore(alice,bob,statepack_c(hs_575))
    ) | (
        {111}get statestore(=alice,=bob,statepack_c(hs_577: handshakestate)) in
        {94}let v_578: bitstring = catch-fail(handshakestateunpack(hs_577)) in
        {95}let v_579: bitstring = catch-fail((empty,empty,empty)) in
        {96}let v_580: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_578))) in
        {97}let v_581: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_580))) in
        {98}let v_582: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_581),2-proj-2-tuple(v_581),3-proj-3-tuple(v_580),msg_c(alice,bob))) in
        {99}let v_583: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_580))) in
        {100}let v_584: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_581))) && success?(1-proj-3-tuple(v_580))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then cipherstatepack(1-proj-2-tuple(v_583),increment_nonce(2-proj-2-tuple(v_581))) else fail-any) else fail-any)) in
        {101}let v_585: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_580)) && success?(1-proj-3-tuple(v_580))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_584) then (v_584,v_582) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_586: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_585),2-proj-3-tuple(v_580),3-proj-3-tuple(v_580)))) in
        {103}let v_587: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_585)) && success?(symmetricstatepack(1-proj-2-tuple(v_585),2-proj-3-tuple(v_580),3-proj-3-tuple(v_580)))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then symmetricstatepack(1-proj-3-tuple(v_586),2-proj-3-tuple(v_586),hash(3-proj-3-tuple(v_586),2-proj-2-tuple(v_585))) else fail-any) else fail-any)) in
        {104}let v_588: bitstring = catch-fail((if success?(1-proj-7-tuple(v_578)) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then (if not-caught-fail(v_587) then (v_587,2-proj-2-tuple(v_585)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {105}let v_589: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_588),2-proj-7-tuple(v_578),3-proj-7-tuple(v_578),4-proj-7-tuple(v_578),5-proj-7-tuple(v_578),6-proj-7-tuple(v_578),7-proj-7-tuple(v_578))) in
        {106}let v_590: bitstring = catch-fail(concat3(1-proj-3-tuple(v_579),2-proj-3-tuple(v_579),2-proj-2-tuple(v_588))) in
        {107}let (hs_591: handshakestate,re_592: key,message_c: bitstring) = (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-7-tuple(v_578))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (v_589,5-proj-7-tuple(v_578),v_590) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {108}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {109}insert statestore(alice,bob,statepack_d(hs_591));
        {110}out(pub, message_c)
    ) | (
        {139}get statestore(=alice,=bob,statepack_d(hs_593: handshakestate)) in
        {112}in(pub, message_d: bitstring);
        {113}let v_594: bitstring = catch-fail(handshakestateunpack(hs_593)) in
        {114}let v_595: bitstring = catch-fail(deconcat3(message_d)) in
        {115}let v_596: bool = catch-fail(true) in
        {116}let v_597: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_594))) in
        {117}let v_598: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_597))) in
        {118}let v_599: aead = catch-fail(decrypt(1-proj-2-tuple(v_598),2-proj-2-tuple(v_598),3-proj-3-tuple(v_597),3-proj-3-tuple(v_595))) in
        {119}let v_600: bitstring = catch-fail(aeadunpack(v_599)) in
        {120}let v_601: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_597))) in
        {121}let v_602: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_598))) && success?(1-proj-3-tuple(v_597))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then cipherstatepack(1-proj-2-tuple(v_601),increment_nonce(2-proj-2-tuple(v_598))) else fail-any) else fail-any)) in
        {122}let v_603: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_595)) && (success?(3-proj-3-tuple(v_597)) && success?(1-proj-3-tuple(v_597)))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then (if not-caught-fail(v_599) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if not-caught-fail(v_602) then (v_602,3-proj-3-tuple(v_600),1-proj-3-tuple(v_600)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let v_604: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_603),2-proj-3-tuple(v_597),3-proj-3-tuple(v_597)))) in
        {124}let v_605: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_595)) && success?(symmetricstatepack(1-proj-3-tuple(v_603),2-proj-3-tuple(v_597),3-proj-3-tuple(v_597)))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then symmetricstatepack(1-proj-3-tuple(v_604),2-proj-3-tuple(v_604),hash(3-proj-3-tuple(v_604),3-proj-3-tuple(v_595))) else fail-any) else fail-any)) in
        {125}let v_606: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_595)) && success?(1-proj-7-tuple(v_594))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if not-caught-fail(v_605) then (v_605,2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_607: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_606),2-proj-7-tuple(v_594),3-proj-7-tuple(v_594),4-proj-7-tuple(v_594),5-proj-7-tuple(v_594),6-proj-7-tuple(v_594),7-proj-7-tuple(v_594))) in
        {127}let v_608: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_606))) in
        {128}let v_609: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_608),zero)) in
        {129}let v_610: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_608),zero)) in
        {130}let v_611: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_608),zero)) in
        {131}let v_612: bitstring = catch-fail((if success?(2-proj-3-tuple(v_608)) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (v_609,v_610,v_611) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_613: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_612)) then cipherstatepack(1-proj-3-tuple(v_612),minnonce) else fail-any)) in
        {133}let v_614: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_612)) then cipherstatepack(2-proj-3-tuple(v_612),minnonce) else fail-any)) in
        {134}let v_615: bitstring = catch-fail((if success?(1-proj-3-tuple(v_606)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (1-proj-3-tuple(v_606),v_613,v_614) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let (hs_616: handshakestate,re_617: key,plaintext_d: bitstring,valid_618: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-7-tuple(v_594))))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then (if not-caught-fail(v_596) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if (v_596 && 3-proj-3-tuple(v_606)) then (if not-caught-fail(v_607) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (v_607,getpublickey(3-proj-7-tuple(v_594)),2-proj-3-tuple(v_606),true,2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {136}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_618);
        {137}insert statestore(alice,bob,statepack_e(hs_616));
        {138}event RecvEnd(valid_618)
    ) | (
        {140}event LeakS(phase0,alice);
        {141}out(pub, key_s(alice))
    ) | (
        {142}phase 1;
        {143}event LeakS(phase1,alice);
        {144}out(pub, key_s(alice))
    )
) | (
    {145}let s_619: keypair = keypairpack(empty,empty) in
    {146}out(pub, getpublickey(s_619));
    (
        {147}let e_620: keypair = keypairpack(empty,empty) in
        {148}let v_621: key = catch-fail(dhexp(key_s(charlie),g)) in
        {149}let rs_622: key = getpublickey((if not-caught-fail(v_621) then keypairpack(v_621,key_s(charlie)) else fail-any)) in
        {150}let re_623: key = empty in
        {151}let v_624: bitstring = catch-fail(hash(somename,empty)) in
        {152}let v_625: key = catch-fail(v_624) in
        {153}let v_626: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {154}let v_627: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then symmetricstatepack(v_626,v_625,v_624) else fail-any) else fail-any) else fail-any))) in
        {155}let v_628: symmetricstate = catch-fail((if success?((if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then symmetricstatepack(v_626,v_625,v_624) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),empty)) else fail-any) else fail-any)) in
        {156}let v_629: bitstring = catch-fail(symmetricstateunpack(v_628)) in
        {157}let v_630: symmetricstate = catch-fail((if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then symmetricstatepack(1-proj-3-tuple(v_629),2-proj-3-tuple(v_629),hash(3-proj-3-tuple(v_629),rs_622)) else fail-any)) in
        {158}let hs_631: handshakestate = (if not-caught-fail(v_628) then (if not-caught-fail(v_630) then handshakestatepack(v_630,s_619,e_620,rs_622,re_623,empty,true) else fail-any) else fail-any) in
        {159}insert statestore(alice,charlie,statepack_a(hs_631))
    ) | (
        {193}get statestore(=alice,=charlie,statepack_a(hs_632: handshakestate)) in
        {160}let v_633: bitstring = catch-fail(handshakestateunpack(hs_632)) in
        {161}let v_634: bitstring = catch-fail((empty,empty,empty)) in
        {162}let v_635: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {163}let v_636: keypair = catch-fail((if not-caught-fail(v_635) then keypairpack(v_635,key_e(alice,charlie)) else fail-any)) in
        {164}let v_637: bitstring = catch-fail(getpublickey(v_636)) in
        {165}let v_638: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_633))) in
        {166}let v_639: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_633)) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_638),hash(3-proj-3-tuple(v_638),v_637)) else fail-any) else fail-any)) in
        {167}let v_640: key = catch-fail(dhexp(key_s(alice),g)) in
        {168}let v_641: keypair = catch-fail((if not-caught-fail(v_640) then keypairpack(v_640,key_s(alice)) else fail-any)) in
        {169}let v_642: bitstring = catch-fail(symmetricstateunpack(v_639)) in
        {170}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {171}let v_644: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_643),2-proj-2-tuple(v_643),3-proj-3-tuple(v_642),getpublickey(v_641))) in
        {172}let v_645: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {173}let v_646: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_643))) && success?(1-proj-3-tuple(v_642))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then cipherstatepack(1-proj-2-tuple(v_645),increment_nonce(2-proj-2-tuple(v_643))) else fail-any) else fail-any)) in
        {174}let v_647: bitstring = catch-fail((if (success?(getpublickey(v_641)) && (success?(3-proj-3-tuple(v_642)) && success?(1-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then (if not-caught-fail(v_644) then (if not-caught-fail(v_646) then (v_646,v_644) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {175}let v_648: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) in
        {176}let v_649: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_647)) && success?(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack(1-proj-3-tuple(v_648),2-proj-3-tuple(v_648),hash(3-proj-3-tuple(v_648),2-proj-2-tuple(v_647))) else fail-any) else fail-any)) in
        {177}let v_650: bitstring = catch-fail((if success?(getpublickey(v_641)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then (if not-caught-fail(v_649) then (v_649,2-proj-2-tuple(v_647)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {178}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_650))) in
        {179}let v_652: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {180}let v_653: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_652),2-proj-2-tuple(v_652),3-proj-3-tuple(v_651),msg_a(alice,charlie))) in
        {181}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {182}let v_655: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_652))) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then cipherstatepack(1-proj-2-tuple(v_654),increment_nonce(2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {183}let v_656: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_651)) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_653) then (if not-caught-fail(v_655) then (v_655,v_653) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {184}let v_657: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) in
        {185}let v_658: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_656)) && success?(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),2-proj-2-tuple(v_656))) else fail-any) else fail-any)) in
        {186}let v_659: bitstring = catch-fail((if success?(1-proj-2-tuple(v_650)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-2-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,2-proj-2-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {187}let v_660: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_659),v_641,v_636,4-proj-7-tuple(v_633),5-proj-7-tuple(v_633),6-proj-7-tuple(v_633),7-proj-7-tuple(v_633))) in
        {188}let v_661: bitstring = catch-fail(concat3(v_637,2-proj-2-tuple(v_650),2-proj-2-tuple(v_659))) in
        {189}let (hs_662: handshakestate,re_663: key,message_a_664: bitstring) = (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-7-tuple(v_633))))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if not-caught-fail(v_636) then (if not-caught-fail(v_637) then (if not-caught-fail(v_639) then (if not-caught-fail(v_641) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_660) then (if not-caught-fail(v_661) then (v_660,5-proj-7-tuple(v_633),v_661) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {190}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {191}insert statestore(alice,charlie,statepack_b(hs_662));
        {192}out(pub, message_a_664)
    ) | (
        {236}get statestore(=alice,=charlie,statepack_b(hs_665: handshakestate)) in
        {194}in(pub, message_b_666: bitstring);
        {195}let v_667: bitstring = catch-fail(handshakestateunpack(hs_665)) in
        {196}let v_668: bitstring = catch-fail(deconcat3(message_b_666)) in
        {197}let v_669: bool = catch-fail(true) in
        {198}let v_670: key = catch-fail(1-proj-3-tuple(v_668)) in
        {199}let v_671: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_667))) in
        {200}let v_672: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_667)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then symmetricstatepack(1-proj-3-tuple(v_671),2-proj-3-tuple(v_671),hash(3-proj-3-tuple(v_671),v_670)) else fail-any) else fail-any)) in
        {201}let v_673: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_667))) in
        {202}let v_674: bitstring = catch-fail(symmetricstateunpack(v_672)) in
        {203}let v_675: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_674),(if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any))) in
        {204}let v_676: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_674),(if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any))) in
        {205}let v_677: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_674),(if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any))) in
        {206}let v_678: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_674))) then (if not-caught-fail(v_675) then (if not-caught-fail(v_676) then (if not-caught-fail(v_677) then (v_675,v_676,v_677) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {207}let v_679: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any)) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_678)) then cipherstatepack(2-proj-3-tuple(v_678),minnonce) else fail-any),1-proj-3-tuple(v_678),3-proj-3-tuple(v_674)) else fail-any) else fail-any) else fail-any)) in
        {208}let v_680: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_667))) in
        {209}let v_681: bitstring = catch-fail(symmetricstateunpack(v_679)) in
        {210}let v_682: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_681),(if success?(2-proj-7-tuple(v_667)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),v_670) else fail-any) else fail-any))) in
        {211}let v_683: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_681),(if success?(2-proj-7-tuple(v_667)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),v_670) else fail-any) else fail-any))) in
        {212}let v_684: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_681),(if success?(2-proj-7-tuple(v_667)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),v_670) else fail-any) else fail-any))) in
        {213}let v_685: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_667)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),v_670) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_681))) then (if not-caught-fail(v_682) then (if not-caught-fail(v_683) then (if not-caught-fail(v_684) then (v_682,v_683,v_684) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {214}let v_686: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_667)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then dhexp(2-proj-2-tuple(v_680),v_670) else fail-any) else fail-any)) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_685)) then cipherstatepack(2-proj-3-tuple(v_685),minnonce) else fail-any),1-proj-3-tuple(v_685),3-proj-3-tuple(v_681)) else fail-any) else fail-any) else fail-any)) in
        {215}let v_687: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_667))) in
        {216}let v_688: bitstring = catch-fail(symmetricstateunpack(v_686)) in
        {217}let v_689: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_688),(if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_667)) else fail-any) else fail-any))) in
        {218}let v_690: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_688),(if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_667)) else fail-any) else fail-any))) in
        {219}let v_691: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_688),(if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_667)) else fail-any) else fail-any))) in
        {220}let v_692: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_667)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_688))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (v_689,v_690,v_691) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {221}let v_693: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),4-proj-7-tuple(v_667)) else fail-any) else fail-any)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_692)) then cipherstatepack(2-proj-3-tuple(v_692),minnonce) else fail-any),1-proj-3-tuple(v_692),3-proj-3-tuple(v_688)) else fail-any) else fail-any) else fail-any)) in
        {222}let v_694: bitstring = catch-fail(symmetricstateunpack(v_693)) in
        {223}let v_695: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {224}let v_696: aead = catch-fail(decrypt(1-proj-2-tuple(v_695),2-proj-2-tuple(v_695),3-proj-3-tuple(v_694),3-proj-3-tuple(v_668))) in
        {225}let v_697: bitstring = catch-fail(aeadunpack(v_696)) in
        {226}let v_698: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {227}let v_699: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_695))) && success?(1-proj-3-tuple(v_694))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then cipherstatepack(1-proj-2-tuple(v_698),increment_nonce(2-proj-2-tuple(v_695))) else fail-any) else fail-any)) in
        {228}let v_700: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_668)) && (success?(3-proj-3-tuple(v_694)) && success?(1-proj-3-tuple(v_694)))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then (if not-caught-fail(v_696) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if not-caught-fail(v_699) then (v_699,3-proj-3-tuple(v_697),1-proj-3-tuple(v_697)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {229}let v_701: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) in
        {230}let v_702: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_668)) && success?(symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_701),hash(3-proj-3-tuple(v_701),3-proj-3-tuple(v_668))) else fail-any) else fail-any)) in
        {231}let v_703: bitstring = catch-fail((if success?(3-proj-3-tuple(v_668)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if not-caught-fail(v_702) then (v_702,2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {232}let v_704: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_703),2-proj-7-tuple(v_667),3-proj-7-tuple(v_667),4-proj-7-tuple(v_667),v_670,6-proj-7-tuple(v_667),7-proj-7-tuple(v_667))) in
        {233}let (hs_705: handshakestate,re_706: key,plaintext_b_707: bitstring,valid_708: bool) = (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-7-tuple(v_667))))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (if not-caught-fail(v_672) then (if not-caught-fail(v_679) then (if not-caught-fail(v_686) then (if not-caught-fail(v_693) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if (v_669 && 3-proj-3-tuple(v_703)) then (if not-caught-fail(v_704) then (v_704,getpublickey(3-proj-7-tuple(v_667)),2-proj-3-tuple(v_703),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {234}event RecvMsg(alice,charlie,stage_b,plaintext_b_707,valid_708);
        {235}insert statestore(alice,charlie,statepack_c(hs_705))
    ) | (
        {254}get statestore(=alice,=charlie,statepack_c(hs_709: handshakestate)) in
        {237}let v_710: bitstring = catch-fail(handshakestateunpack(hs_709)) in
        {238}let v_711: bitstring = catch-fail((empty,empty,empty)) in
        {239}let v_712: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_710))) in
        {240}let v_713: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_712))) in
        {241}let v_714: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_713),2-proj-2-tuple(v_713),3-proj-3-tuple(v_712),msg_c(alice,charlie))) in
        {242}let v_715: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_712))) in
        {243}let v_716: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_713))) && success?(1-proj-3-tuple(v_712))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then cipherstatepack(1-proj-2-tuple(v_715),increment_nonce(2-proj-2-tuple(v_713))) else fail-any) else fail-any)) in
        {244}let v_717: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_712)) && success?(1-proj-3-tuple(v_712))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then (if not-caught-fail(v_714) then (if not-caught-fail(v_716) then (v_716,v_714) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_718: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_717),2-proj-3-tuple(v_712),3-proj-3-tuple(v_712)))) in
        {246}let v_719: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_717)) && success?(symmetricstatepack(1-proj-2-tuple(v_717),2-proj-3-tuple(v_712),3-proj-3-tuple(v_712)))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then symmetricstatepack(1-proj-3-tuple(v_718),2-proj-3-tuple(v_718),hash(3-proj-3-tuple(v_718),2-proj-2-tuple(v_717))) else fail-any) else fail-any)) in
        {247}let v_720: bitstring = catch-fail((if success?(1-proj-7-tuple(v_710)) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then (if not-caught-fail(v_719) then (v_719,2-proj-2-tuple(v_717)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let v_721: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_720),2-proj-7-tuple(v_710),3-proj-7-tuple(v_710),4-proj-7-tuple(v_710),5-proj-7-tuple(v_710),6-proj-7-tuple(v_710),7-proj-7-tuple(v_710))) in
        {249}let v_722: bitstring = catch-fail(concat3(1-proj-3-tuple(v_711),2-proj-3-tuple(v_711),2-proj-2-tuple(v_720))) in
        {250}let (hs_723: handshakestate,re_724: key,message_c_725: bitstring) = (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-7-tuple(v_710))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then (if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (v_721,5-proj-7-tuple(v_710),v_722) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {251}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {252}insert statestore(alice,charlie,statepack_d(hs_723));
        {253}out(pub, message_c_725)
    ) | (
        {282}get statestore(=alice,=charlie,statepack_d(hs_726: handshakestate)) in
        {255}in(pub, message_d_727: bitstring);
        {256}let v_728: bitstring = catch-fail(handshakestateunpack(hs_726)) in
        {257}let v_729: bitstring = catch-fail(deconcat3(message_d_727)) in
        {258}let v_730: bool = catch-fail(true) in
        {259}let v_731: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_728))) in
        {260}let v_732: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_731))) in
        {261}let v_733: aead = catch-fail(decrypt(1-proj-2-tuple(v_732),2-proj-2-tuple(v_732),3-proj-3-tuple(v_731),3-proj-3-tuple(v_729))) in
        {262}let v_734: bitstring = catch-fail(aeadunpack(v_733)) in
        {263}let v_735: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_731))) in
        {264}let v_736: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_732))) && success?(1-proj-3-tuple(v_731))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then cipherstatepack(1-proj-2-tuple(v_735),increment_nonce(2-proj-2-tuple(v_732))) else fail-any) else fail-any)) in
        {265}let v_737: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_729)) && (success?(3-proj-3-tuple(v_731)) && success?(1-proj-3-tuple(v_731)))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-2-tuple(v_732))))) then (if not-caught-fail(v_733) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then (if not-caught-fail(v_736) then (v_736,3-proj-3-tuple(v_734),1-proj-3-tuple(v_734)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_738: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_731),3-proj-3-tuple(v_731)))) in
        {267}let v_739: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_729)) && success?(symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_731),3-proj-3-tuple(v_731)))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack(1-proj-3-tuple(v_738),2-proj-3-tuple(v_738),hash(3-proj-3-tuple(v_738),3-proj-3-tuple(v_729))) else fail-any) else fail-any)) in
        {268}let v_740: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_729)) && success?(1-proj-7-tuple(v_728))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_739) then (v_739,2-proj-3-tuple(v_737),3-proj-3-tuple(v_737)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {269}let v_741: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_740),2-proj-7-tuple(v_728),3-proj-7-tuple(v_728),4-proj-7-tuple(v_728),5-proj-7-tuple(v_728),6-proj-7-tuple(v_728),7-proj-7-tuple(v_728))) in
        {270}let v_742: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_740))) in
        {271}let v_743: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_742),zero)) in
        {272}let v_744: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_742),zero)) in
        {273}let v_745: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_742),zero)) in
        {274}let v_746: bitstring = catch-fail((if success?(2-proj-3-tuple(v_742)) then (if not-caught-fail(v_743) then (if not-caught-fail(v_744) then (if not-caught-fail(v_745) then (v_743,v_744,v_745) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {275}let v_747: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_746)) then cipherstatepack(1-proj-3-tuple(v_746),minnonce) else fail-any)) in
        {276}let v_748: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_746)) then cipherstatepack(2-proj-3-tuple(v_746),minnonce) else fail-any)) in
        {277}let v_749: bitstring = catch-fail((if success?(1-proj-3-tuple(v_740)) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if not-caught-fail(v_747) then (if not-caught-fail(v_748) then (1-proj-3-tuple(v_740),v_747,v_748) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {278}let (hs_750: handshakestate,re_751: key,plaintext_d_752: bitstring,valid_753: bool,cs1_754: cipherstate,cs2_755: cipherstate) = (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-7-tuple(v_728))))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if not-caught-fail(v_730) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if (v_730 && 3-proj-3-tuple(v_740)) then (if not-caught-fail(v_741) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (v_741,getpublickey(3-proj-7-tuple(v_728)),2-proj-3-tuple(v_740),true,2-proj-3-tuple(v_749),3-proj-3-tuple(v_749)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {279}event RecvMsg(alice,charlie,stage_d,plaintext_d_752,valid_753);
        {280}insert statestore(alice,charlie,statepack_e(hs_750));
        {281}event RecvEnd(valid_753)
    ) | (
        {283}event LeakS(phase0,alice);
        {284}out(pub, key_s(alice))
    ) | (
        {285}phase 1;
        {286}event LeakS(phase1,alice);
        {287}out(pub, key_s(alice))
    )
) | (
    {288}let v_756: key = catch-fail(dhexp(key_s(bob),g)) in
    {289}let s_757: keypair = (if not-caught-fail(v_756) then keypairpack(v_756,key_s(bob)) else fail-any) in
    {290}out(pub, getpublickey(s_757));
    (
        {291}let e_758: keypair = keypairpack(empty,empty) in
        {292}let rs_759: key = empty in
        {293}let re_760: key = empty in
        {294}let v_761: bitstring = catch-fail(hash(somename,empty)) in
        {295}let v_762: key = catch-fail(v_761) in
        {296}let v_763: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {297}let v_764: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then symmetricstatepack(v_763,v_762,v_761) else fail-any) else fail-any) else fail-any))) in
        {298}let v_765: symmetricstate = catch-fail((if success?((if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then symmetricstatepack(v_763,v_762,v_761) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then symmetricstatepack(1-proj-3-tuple(v_764),2-proj-3-tuple(v_764),hash(3-proj-3-tuple(v_764),empty)) else fail-any) else fail-any)) in
        {299}let v_766: bitstring = catch-fail(symmetricstateunpack(v_765)) in
        {300}let v_767: symmetricstate = catch-fail((if success?(getpublickey(s_757)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then symmetricstatepack(1-proj-3-tuple(v_766),2-proj-3-tuple(v_766),hash(3-proj-3-tuple(v_766),getpublickey(s_757))) else fail-any) else fail-any)) in
        {301}let hs_768: handshakestate = (if not-caught-fail(v_765) then (if not-caught-fail(v_767) then handshakestatepack(v_767,s_757,e_758,rs_759,re_760,empty,false) else fail-any) else fail-any) in
        {302}insert statestore(bob,alice,statepack_a(hs_768))
    ) | (
        {336}get statestore(=bob,=alice,statepack_a(hs_769: handshakestate)) in
        {303}in(pub, message_a_770: bitstring);
        {304}let v_771: bitstring = catch-fail(handshakestateunpack(hs_769)) in
        {305}let v_772: bitstring = catch-fail(deconcat3(message_a_770)) in
        {306}let v_773: bool = catch-fail(true) in
        {307}let v_774: key = catch-fail(1-proj-3-tuple(v_772)) in
        {308}let v_775: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_771))) in
        {309}let v_776: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_771)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then symmetricstatepack(1-proj-3-tuple(v_775),2-proj-3-tuple(v_775),hash(3-proj-3-tuple(v_775),v_774)) else fail-any) else fail-any)) in
        {310}let v_777: bitstring = catch-fail(symmetricstateunpack(v_776)) in
        {311}let v_778: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_777))) in
        {312}let v_779: aead = catch-fail(decrypt(1-proj-2-tuple(v_778),2-proj-2-tuple(v_778),3-proj-3-tuple(v_777),2-proj-3-tuple(v_772))) in
        {313}let v_780: bitstring = catch-fail(aeadunpack(v_779)) in
        {314}let v_781: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_777))) in
        {315}let v_782: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_778))) && success?(1-proj-3-tuple(v_777))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-2-tuple(v_781))))) then cipherstatepack(1-proj-2-tuple(v_781),increment_nonce(2-proj-2-tuple(v_778))) else fail-any) else fail-any)) in
        {316}let v_783: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_772)) && (success?(3-proj-3-tuple(v_777)) && success?(1-proj-3-tuple(v_777)))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then (if not-caught-fail(v_779) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then (if not-caught-fail(v_782) then (v_782,3-proj-3-tuple(v_780),1-proj-3-tuple(v_780)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {317}let v_784: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_783),2-proj-3-tuple(v_777),3-proj-3-tuple(v_777)))) in
        {318}let v_785: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_772)) && success?(symmetricstatepack(1-proj-3-tuple(v_783),2-proj-3-tuple(v_777),3-proj-3-tuple(v_777)))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then symmetricstatepack(1-proj-3-tuple(v_784),2-proj-3-tuple(v_784),hash(3-proj-3-tuple(v_784),2-proj-3-tuple(v_772))) else fail-any) else fail-any)) in
        {319}let v_786: bitstring = catch-fail((if success?(2-proj-3-tuple(v_772)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then (if not-caught-fail(v_785) then (v_785,2-proj-3-tuple(v_783),3-proj-3-tuple(v_783)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {320}let v_787: key = catch-fail(2-proj-3-tuple(v_786)) in
        {321}let v_788: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_786))) in
        {322}let v_789: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_788))) in
        {323}let v_790: aead = catch-fail(decrypt(1-proj-2-tuple(v_789),2-proj-2-tuple(v_789),3-proj-3-tuple(v_788),3-proj-3-tuple(v_772))) in
        {324}let v_791: bitstring = catch-fail(aeadunpack(v_790)) in
        {325}let v_792: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_788))) in
        {326}let v_793: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_789))) && success?(1-proj-3-tuple(v_788))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then cipherstatepack(1-proj-2-tuple(v_792),increment_nonce(2-proj-2-tuple(v_789))) else fail-any) else fail-any)) in
        {327}let v_794: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_772)) && (success?(3-proj-3-tuple(v_788)) && success?(1-proj-3-tuple(v_788)))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then (if not-caught-fail(v_790) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if not-caught-fail(v_793) then (v_793,3-proj-3-tuple(v_791),1-proj-3-tuple(v_791)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {328}let v_795: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_794),2-proj-3-tuple(v_788),3-proj-3-tuple(v_788)))) in
        {329}let v_796: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_772)) && success?(symmetricstatepack(1-proj-3-tuple(v_794),2-proj-3-tuple(v_788),3-proj-3-tuple(v_788)))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_795),hash(3-proj-3-tuple(v_795),3-proj-3-tuple(v_772))) else fail-any) else fail-any)) in
        {330}let v_797: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_772)) && success?(1-proj-3-tuple(v_786))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (if not-caught-fail(v_796) then (v_796,2-proj-3-tuple(v_794),3-proj-3-tuple(v_794)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {331}let v_798: key = catch-fail(dhexp(key_s(alice),g)) in
        {332}let v_799: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_797),2-proj-7-tuple(v_771),3-proj-7-tuple(v_771),v_787,v_774,6-proj-7-tuple(v_771),7-proj-7-tuple(v_771))) in
        {333}let (hs_800: handshakestate,re_801: key,plaintext_a: bitstring,valid_802: bool) = (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-7-tuple(v_771))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (if not-caught-fail(v_776) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then (if not-caught-fail(v_787) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then (if ((3-proj-3-tuple(v_786) && 3-proj-3-tuple(v_797)) && (v_787 = getpublickey((if not-caught-fail(v_798) then keypairpack(v_798,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_799) then (v_799,getpublickey(3-proj-7-tuple(v_771)),2-proj-3-tuple(v_797),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {334}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_802);
        {335}insert statestore(bob,alice,statepack_b(hs_800))
    ) | (
        {380}get statestore(=bob,=alice,statepack_b(hs_803: handshakestate)) in
        {337}let v_804: bitstring = catch-fail(handshakestateunpack(hs_803)) in
        {338}let v_805: bitstring = catch-fail((empty,empty,empty)) in
        {339}let v_806: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {340}let v_807: keypair = catch-fail((if not-caught-fail(v_806) then keypairpack(v_806,key_e(bob,alice)) else fail-any)) in
        {341}let v_808: bitstring = catch-fail(getpublickey(v_807)) in
        {342}let v_809: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_804))) in
        {343}let v_810: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_804)) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_809),hash(3-proj-3-tuple(v_809),v_808)) else fail-any) else fail-any)) in
        {344}let v_811: bitstring = catch-fail(keypairunpack(v_807)) in
        {345}let v_812: bitstring = catch-fail(symmetricstateunpack(v_810)) in
        {346}let v_813: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_812),(if success?(5-proj-7-tuple(v_804)) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),5-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {347}let v_814: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_812),(if success?(5-proj-7-tuple(v_804)) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),5-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {348}let v_815: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_812),(if success?(5-proj-7-tuple(v_804)) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),5-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {349}let v_816: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_804)) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),5-proj-7-tuple(v_804)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_812))) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_813,v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {350}let v_817: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_804)) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then dhexp(2-proj-2-tuple(v_811),5-proj-7-tuple(v_804)) else fail-any) else fail-any)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_816)) then cipherstatepack(2-proj-3-tuple(v_816),minnonce) else fail-any),1-proj-3-tuple(v_816),3-proj-3-tuple(v_812)) else fail-any) else fail-any) else fail-any)) in
        {351}let v_818: bitstring = catch-fail(keypairunpack(v_807)) in
        {352}let v_819: bitstring = catch-fail(symmetricstateunpack(v_817)) in
        {353}let v_820: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_819),(if success?(4-proj-7-tuple(v_804)) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-2-tuple(v_818))))) then dhexp(2-proj-2-tuple(v_818),4-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {354}let v_821: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_819),(if success?(4-proj-7-tuple(v_804)) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-2-tuple(v_818))))) then dhexp(2-proj-2-tuple(v_818),4-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {355}let v_822: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_819),(if success?(4-proj-7-tuple(v_804)) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-2-tuple(v_818))))) then dhexp(2-proj-2-tuple(v_818),4-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {356}let v_823: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_804)) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-2-tuple(v_818))))) then dhexp(2-proj-2-tuple(v_818),4-proj-7-tuple(v_804)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_819))) then (if not-caught-fail(v_820) then (if not-caught-fail(v_821) then (if not-caught-fail(v_822) then (v_820,v_821,v_822) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {357}let v_824: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_804)) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-2-tuple(v_818))))) then dhexp(2-proj-2-tuple(v_818),4-proj-7-tuple(v_804)) else fail-any) else fail-any)) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_823)) then cipherstatepack(2-proj-3-tuple(v_823),minnonce) else fail-any),1-proj-3-tuple(v_823),3-proj-3-tuple(v_819)) else fail-any) else fail-any) else fail-any)) in
        {358}let v_825: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_804))) in
        {359}let v_826: bitstring = catch-fail(symmetricstateunpack(v_824)) in
        {360}let v_827: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_826),(if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then dhexp(2-proj-2-tuple(v_825),5-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {361}let v_828: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_826),(if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then dhexp(2-proj-2-tuple(v_825),5-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {362}let v_829: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_826),(if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then dhexp(2-proj-2-tuple(v_825),5-proj-7-tuple(v_804)) else fail-any) else fail-any))) in
        {363}let v_830: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then dhexp(2-proj-2-tuple(v_825),5-proj-7-tuple(v_804)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_826))) then (if not-caught-fail(v_827) then (if not-caught-fail(v_828) then (if not-caught-fail(v_829) then (v_827,v_828,v_829) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {364}let v_831: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_804)) && success?(2-proj-7-tuple(v_804))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then dhexp(2-proj-2-tuple(v_825),5-proj-7-tuple(v_804)) else fail-any) else fail-any)) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_830)) then cipherstatepack(2-proj-3-tuple(v_830),minnonce) else fail-any),1-proj-3-tuple(v_830),3-proj-3-tuple(v_826)) else fail-any) else fail-any) else fail-any)) in
        {365}let v_832: bitstring = catch-fail(symmetricstateunpack(v_831)) in
        {366}let v_833: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
        {367}let v_834: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_833),2-proj-2-tuple(v_833),3-proj-3-tuple(v_832),msg_b(bob,alice))) in
        {368}let v_835: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
        {369}let v_836: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_833))) && success?(1-proj-3-tuple(v_832))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then cipherstatepack(1-proj-2-tuple(v_835),increment_nonce(2-proj-2-tuple(v_833))) else fail-any) else fail-any)) in
        {370}let v_837: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_832)) && success?(1-proj-3-tuple(v_832))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then (if not-caught-fail(v_834) then (if not-caught-fail(v_836) then (v_836,v_834) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {371}let v_838: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_837),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) in
        {372}let v_839: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_837)) && success?(symmetricstatepack(1-proj-2-tuple(v_837),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_838),hash(3-proj-3-tuple(v_838),2-proj-2-tuple(v_837))) else fail-any) else fail-any)) in
        {373}let v_840: bitstring = catch-fail((if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-2-tuple(v_837))))) then (if not-caught-fail(v_839) then (v_839,2-proj-2-tuple(v_837)) else fail-any) else fail-any) else fail-any)) in
        {374}let v_841: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_840),2-proj-7-tuple(v_804),v_807,4-proj-7-tuple(v_804),5-proj-7-tuple(v_804),6-proj-7-tuple(v_804),7-proj-7-tuple(v_804))) in
        {375}let v_842: bitstring = catch-fail(concat3(v_808,2-proj-3-tuple(v_805),2-proj-2-tuple(v_840))) in
        {376}let (hs_843: handshakestate,re_844: key,message_b_845: bitstring) = (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-7-tuple(v_804))))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if not-caught-fail(v_807) then (if not-caught-fail(v_808) then (if not-caught-fail(v_810) then (if not-caught-fail(v_817) then (if not-caught-fail(v_824) then (if not-caught-fail(v_831) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then (if not-caught-fail(v_841) then (if not-caught-fail(v_842) then (v_841,5-proj-7-tuple(v_804),v_842) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {377}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {378}insert statestore(bob,alice,statepack_c(hs_843));
        {379}out(pub, message_b_845)
    ) | (
        {399}get statestore(=bob,=alice,statepack_c(hs_846: handshakestate)) in
        {381}in(pub, message_c_847: bitstring);
        {382}let v_848: bitstring = catch-fail(handshakestateunpack(hs_846)) in
        {383}let v_849: bitstring = catch-fail(deconcat3(message_c_847)) in
        {384}let v_850: bool = catch-fail(true) in
        {385}let v_851: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_848))) in
        {386}let v_852: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
        {387}let v_853: aead = catch-fail(decrypt(1-proj-2-tuple(v_852),2-proj-2-tuple(v_852),3-proj-3-tuple(v_851),3-proj-3-tuple(v_849))) in
        {388}let v_854: bitstring = catch-fail(aeadunpack(v_853)) in
        {389}let v_855: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
        {390}let v_856: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_852))) && success?(1-proj-3-tuple(v_851))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then cipherstatepack(1-proj-2-tuple(v_855),increment_nonce(2-proj-2-tuple(v_852))) else fail-any) else fail-any)) in
        {391}let v_857: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_849)) && (success?(3-proj-3-tuple(v_851)) && success?(1-proj-3-tuple(v_851)))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then (if not-caught-fail(v_853) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if not-caught-fail(v_856) then (v_856,3-proj-3-tuple(v_854),1-proj-3-tuple(v_854)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {392}let v_858: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_857),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) in
        {393}let v_859: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_849)) && success?(symmetricstatepack(1-proj-3-tuple(v_857),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_858),hash(3-proj-3-tuple(v_858),3-proj-3-tuple(v_849))) else fail-any) else fail-any)) in
        {394}let v_860: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_849)) && success?(1-proj-7-tuple(v_848))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if not-caught-fail(v_859) then (v_859,2-proj-3-tuple(v_857),3-proj-3-tuple(v_857)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {395}let v_861: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_860),2-proj-7-tuple(v_848),3-proj-7-tuple(v_848),4-proj-7-tuple(v_848),5-proj-7-tuple(v_848),6-proj-7-tuple(v_848),7-proj-7-tuple(v_848))) in
        {396}let (hs_862: handshakestate,re_863: key,plaintext_c: bitstring,valid_864: bool) = (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-7-tuple(v_848))))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then (if not-caught-fail(v_850) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if (v_850 && 3-proj-3-tuple(v_860)) then (if not-caught-fail(v_861) then (v_861,getpublickey(3-proj-7-tuple(v_848)),2-proj-3-tuple(v_860),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {397}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_864);
        {398}insert statestore(bob,alice,statepack_d(hs_862))
    ) | (
        {425}get statestore(=bob,=alice,statepack_d(hs_865: handshakestate)) in
        {400}let v_866: bitstring = catch-fail(handshakestateunpack(hs_865)) in
        {401}let v_867: bitstring = catch-fail((empty,empty,empty)) in
        {402}let v_868: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_866))) in
        {403}let v_869: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_868))) in
        {404}let v_870: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_869),2-proj-2-tuple(v_869),3-proj-3-tuple(v_868),msg_d(bob,alice))) in
        {405}let v_871: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_868))) in
        {406}let v_872: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_869))) && success?(1-proj-3-tuple(v_868))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then cipherstatepack(1-proj-2-tuple(v_871),increment_nonce(2-proj-2-tuple(v_869))) else fail-any) else fail-any)) in
        {407}let v_873: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_868)) && success?(1-proj-3-tuple(v_868))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then (if not-caught-fail(v_870) then (if not-caught-fail(v_872) then (v_872,v_870) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {408}let v_874: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_873),2-proj-3-tuple(v_868),3-proj-3-tuple(v_868)))) in
        {409}let v_875: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_873)) && success?(symmetricstatepack(1-proj-2-tuple(v_873),2-proj-3-tuple(v_868),3-proj-3-tuple(v_868)))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack(1-proj-3-tuple(v_874),2-proj-3-tuple(v_874),hash(3-proj-3-tuple(v_874),2-proj-2-tuple(v_873))) else fail-any) else fail-any)) in
        {410}let v_876: bitstring = catch-fail((if success?(1-proj-7-tuple(v_866)) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then (if not-caught-fail(v_875) then (v_875,2-proj-2-tuple(v_873)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {411}let v_877: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_876),2-proj-7-tuple(v_866),3-proj-7-tuple(v_866),4-proj-7-tuple(v_866),5-proj-7-tuple(v_866),6-proj-7-tuple(v_866),7-proj-7-tuple(v_866))) in
        {412}let v_878: bitstring = catch-fail(concat3(1-proj-3-tuple(v_867),2-proj-3-tuple(v_867),2-proj-2-tuple(v_876))) in
        {413}let v_879: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_876))) in
        {414}let v_880: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_879),zero)) in
        {415}let v_881: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_879),zero)) in
        {416}let v_882: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_879),zero)) in
        {417}let v_883: bitstring = catch-fail((if success?(2-proj-3-tuple(v_879)) then (if not-caught-fail(v_880) then (if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (v_880,v_881,v_882) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_884: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_883)) then cipherstatepack(1-proj-3-tuple(v_883),minnonce) else fail-any)) in
        {419}let v_885: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_883)) then cipherstatepack(2-proj-3-tuple(v_883),minnonce) else fail-any)) in
        {420}let v_886: bitstring = catch-fail((if success?(1-proj-2-tuple(v_876)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if not-caught-fail(v_884) then (if not-caught-fail(v_885) then (1-proj-2-tuple(v_876),v_884,v_885) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let (hs_887: handshakestate,re_888: key,message_d_889: bitstring,cs1_890: cipherstate,cs2_891: cipherstate) = (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-7-tuple(v_866))))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then (if not-caught-fail(v_877) then (if not-caught-fail(v_878) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (v_877,5-proj-7-tuple(v_866),v_878,2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {422}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {423}insert statestore(bob,alice,statepack_e(hs_887));
        {424}out(pub, message_d_889)
    ) | (
        {426}event LeakS(phase0,bob);
        {427}out(pub, key_s(bob))
    ) | (
        {428}phase 1;
        {429}event LeakS(phase1,bob);
        {430}out(pub, key_s(bob))
    )
) | (
    {431}let v_892: key = catch-fail(dhexp(key_s(bob),g)) in
    {432}let s_893: keypair = (if not-caught-fail(v_892) then keypairpack(v_892,key_s(bob)) else fail-any) in
    {433}out(pub, getpublickey(s_893));
    (
        {434}let e_894: keypair = keypairpack(empty,empty) in
        {435}let rs_895: key = empty in
        {436}let re_896: key = empty in
        {437}let v_897: bitstring = catch-fail(hash(somename,empty)) in
        {438}let v_898: key = catch-fail(v_897) in
        {439}let v_899: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {440}let v_900: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (if not-caught-fail(v_899) then symmetricstatepack(v_899,v_898,v_897) else fail-any) else fail-any) else fail-any))) in
        {441}let v_901: symmetricstate = catch-fail((if success?((if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (if not-caught-fail(v_899) then symmetricstatepack(v_899,v_898,v_897) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then symmetricstatepack(1-proj-3-tuple(v_900),2-proj-3-tuple(v_900),hash(3-proj-3-tuple(v_900),empty)) else fail-any) else fail-any)) in
        {442}let v_902: bitstring = catch-fail(symmetricstateunpack(v_901)) in
        {443}let v_903: symmetricstate = catch-fail((if success?(getpublickey(s_893)) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then symmetricstatepack(1-proj-3-tuple(v_902),2-proj-3-tuple(v_902),hash(3-proj-3-tuple(v_902),getpublickey(s_893))) else fail-any) else fail-any)) in
        {444}let hs_904: handshakestate = (if not-caught-fail(v_901) then (if not-caught-fail(v_903) then handshakestatepack(v_903,s_893,e_894,rs_895,re_896,empty,false) else fail-any) else fail-any) in
        {445}insert statestore(bob,charlie,statepack_a(hs_904))
    ) | (
        {479}get statestore(=bob,=charlie,statepack_a(hs_905: handshakestate)) in
        {446}in(pub, message_a_906: bitstring);
        {447}let v_907: bitstring = catch-fail(handshakestateunpack(hs_905)) in
        {448}let v_908: bitstring = catch-fail(deconcat3(message_a_906)) in
        {449}let v_909: bool = catch-fail(true) in
        {450}let v_910: key = catch-fail(1-proj-3-tuple(v_908)) in
        {451}let v_911: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
        {452}let v_912: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_907)) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then symmetricstatepack(1-proj-3-tuple(v_911),2-proj-3-tuple(v_911),hash(3-proj-3-tuple(v_911),v_910)) else fail-any) else fail-any)) in
        {453}let v_913: bitstring = catch-fail(symmetricstateunpack(v_912)) in
        {454}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {455}let v_915: aead = catch-fail(decrypt(1-proj-2-tuple(v_914),2-proj-2-tuple(v_914),3-proj-3-tuple(v_913),2-proj-3-tuple(v_908))) in
        {456}let v_916: bitstring = catch-fail(aeadunpack(v_915)) in
        {457}let v_917: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {458}let v_918: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_914))) && success?(1-proj-3-tuple(v_913))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then cipherstatepack(1-proj-2-tuple(v_917),increment_nonce(2-proj-2-tuple(v_914))) else fail-any) else fail-any)) in
        {459}let v_919: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_913)) && success?(1-proj-3-tuple(v_913)))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then (if not-caught-fail(v_915) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,3-proj-3-tuple(v_916),1-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_920: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) in
        {461}let v_921: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then symmetricstatepack(1-proj-3-tuple(v_920),2-proj-3-tuple(v_920),hash(3-proj-3-tuple(v_920),2-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {462}let v_922: bitstring = catch-fail((if success?(2-proj-3-tuple(v_908)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if not-caught-fail(v_921) then (v_921,2-proj-3-tuple(v_919),3-proj-3-tuple(v_919)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let v_923: key = catch-fail(2-proj-3-tuple(v_922)) in
        {464}let v_924: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_922))) in
        {465}let v_925: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {466}let v_926: aead = catch-fail(decrypt(1-proj-2-tuple(v_925),2-proj-2-tuple(v_925),3-proj-3-tuple(v_924),3-proj-3-tuple(v_908))) in
        {467}let v_927: bitstring = catch-fail(aeadunpack(v_926)) in
        {468}let v_928: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {469}let v_929: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_925))) && success?(1-proj-3-tuple(v_924))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then cipherstatepack(1-proj-2-tuple(v_928),increment_nonce(2-proj-2-tuple(v_925))) else fail-any) else fail-any)) in
        {470}let v_930: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_924)) && success?(1-proj-3-tuple(v_924)))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-2-tuple(v_925))))) then (if not-caught-fail(v_926) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if not-caught-fail(v_929) then (v_929,3-proj-3-tuple(v_927),1-proj-3-tuple(v_927)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {471}let v_931: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_930),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) in
        {472}let v_932: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_930),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then symmetricstatepack(1-proj-3-tuple(v_931),2-proj-3-tuple(v_931),hash(3-proj-3-tuple(v_931),3-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {473}let v_933: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(1-proj-3-tuple(v_922))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if not-caught-fail(v_932) then (v_932,2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {474}let v_934: key = catch-fail(dhexp(key_s(charlie),g)) in
        {475}let v_935: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_933),2-proj-7-tuple(v_907),3-proj-7-tuple(v_907),v_923,v_910,6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
        {476}let (hs_936: handshakestate,re_937: key,plaintext_a_938: bitstring,valid_939: bool) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if ((3-proj-3-tuple(v_922) && 3-proj-3-tuple(v_933)) && (v_923 = getpublickey((if not-caught-fail(v_934) then keypairpack(v_934,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_935) then (v_935,getpublickey(3-proj-7-tuple(v_907)),2-proj-3-tuple(v_933),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {477}event RecvMsg(bob,charlie,stage_a,plaintext_a_938,valid_939);
        {478}insert statestore(bob,charlie,statepack_b(hs_936))
    ) | (
        {523}get statestore(=bob,=charlie,statepack_b(hs_940: handshakestate)) in
        {480}let v_941: bitstring = catch-fail(handshakestateunpack(hs_940)) in
        {481}let v_942: bitstring = catch-fail((empty,empty,empty)) in
        {482}let v_943: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {483}let v_944: keypair = catch-fail((if not-caught-fail(v_943) then keypairpack(v_943,key_e(bob,charlie)) else fail-any)) in
        {484}let v_945: bitstring = catch-fail(getpublickey(v_944)) in
        {485}let v_946: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_941))) in
        {486}let v_947: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_941)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then symmetricstatepack(1-proj-3-tuple(v_946),2-proj-3-tuple(v_946),hash(3-proj-3-tuple(v_946),v_945)) else fail-any) else fail-any)) in
        {487}let v_948: bitstring = catch-fail(keypairunpack(v_944)) in
        {488}let v_949: bitstring = catch-fail(symmetricstateunpack(v_947)) in
        {489}let v_950: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_949),(if success?(5-proj-7-tuple(v_941)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_941)) else fail-any) else fail-any))) in
        {490}let v_951: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_949),(if success?(5-proj-7-tuple(v_941)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_941)) else fail-any) else fail-any))) in
        {491}let v_952: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_949),(if success?(5-proj-7-tuple(v_941)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_941)) else fail-any) else fail-any))) in
        {492}let v_953: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_941)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_941)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_949))) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then (if not-caught-fail(v_952) then (v_950,v_951,v_952) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {493}let v_954: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_941)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_941)) else fail-any) else fail-any)) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_953)) then cipherstatepack(2-proj-3-tuple(v_953),minnonce) else fail-any),1-proj-3-tuple(v_953),3-proj-3-tuple(v_949)) else fail-any) else fail-any) else fail-any)) in
        {494}let v_955: bitstring = catch-fail(keypairunpack(v_944)) in
        {495}let v_956: bitstring = catch-fail(symmetricstateunpack(v_954)) in
        {496}let v_957: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_956),(if success?(4-proj-7-tuple(v_941)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_941)) else fail-any) else fail-any))) in
        {497}let v_958: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_956),(if success?(4-proj-7-tuple(v_941)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_941)) else fail-any) else fail-any))) in
        {498}let v_959: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_956),(if success?(4-proj-7-tuple(v_941)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_941)) else fail-any) else fail-any))) in
        {499}let v_960: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_941)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_941)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_956))) then (if not-caught-fail(v_957) then (if not-caught-fail(v_958) then (if not-caught-fail(v_959) then (v_957,v_958,v_959) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {500}let v_961: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_941)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then dhexp(2-proj-2-tuple(v_955),4-proj-7-tuple(v_941)) else fail-any) else fail-any)) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_960)) then cipherstatepack(2-proj-3-tuple(v_960),minnonce) else fail-any),1-proj-3-tuple(v_960),3-proj-3-tuple(v_956)) else fail-any) else fail-any) else fail-any)) in
        {501}let v_962: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_941))) in
        {502}let v_963: bitstring = catch-fail(symmetricstateunpack(v_961)) in
        {503}let v_964: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_963),(if (success?(5-proj-7-tuple(v_941)) && success?(2-proj-7-tuple(v_941))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then dhexp(2-proj-2-tuple(v_962),5-proj-7-tuple(v_941)) else fail-any) else fail-any))) in
        {504}let v_965: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_963),(if (success?(5-proj-7-tuple(v_941)) && success?(2-proj-7-tuple(v_941))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then dhexp(2-proj-2-tuple(v_962),5-proj-7-tuple(v_941)) else fail-any) else fail-any))) in
        {505}let v_966: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_963),(if (success?(5-proj-7-tuple(v_941)) && success?(2-proj-7-tuple(v_941))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then dhexp(2-proj-2-tuple(v_962),5-proj-7-tuple(v_941)) else fail-any) else fail-any))) in
        {506}let v_967: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_941)) && success?(2-proj-7-tuple(v_941))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then dhexp(2-proj-2-tuple(v_962),5-proj-7-tuple(v_941)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_963))) then (if not-caught-fail(v_964) then (if not-caught-fail(v_965) then (if not-caught-fail(v_966) then (v_964,v_965,v_966) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {507}let v_968: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_941)) && success?(2-proj-7-tuple(v_941))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then dhexp(2-proj-2-tuple(v_962),5-proj-7-tuple(v_941)) else fail-any) else fail-any)) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_967)) then cipherstatepack(2-proj-3-tuple(v_967),minnonce) else fail-any),1-proj-3-tuple(v_967),3-proj-3-tuple(v_963)) else fail-any) else fail-any) else fail-any)) in
        {508}let v_969: bitstring = catch-fail(symmetricstateunpack(v_968)) in
        {509}let v_970: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_969))) in
        {510}let v_971: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_970),2-proj-2-tuple(v_970),3-proj-3-tuple(v_969),msg_b(bob,charlie))) in
        {511}let v_972: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_969))) in
        {512}let v_973: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_970))) && success?(1-proj-3-tuple(v_969))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-2-tuple(v_972))))) then cipherstatepack(1-proj-2-tuple(v_972),increment_nonce(2-proj-2-tuple(v_970))) else fail-any) else fail-any)) in
        {513}let v_974: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_969)) && success?(1-proj-3-tuple(v_969))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-2-tuple(v_970))))) then (if not-caught-fail(v_971) then (if not-caught-fail(v_973) then (v_973,v_971) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {514}let v_975: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_974),2-proj-3-tuple(v_969),3-proj-3-tuple(v_969)))) in
        {515}let v_976: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_974)) && success?(symmetricstatepack(1-proj-2-tuple(v_974),2-proj-3-tuple(v_969),3-proj-3-tuple(v_969)))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then symmetricstatepack(1-proj-3-tuple(v_975),2-proj-3-tuple(v_975),hash(3-proj-3-tuple(v_975),2-proj-2-tuple(v_974))) else fail-any) else fail-any)) in
        {516}let v_977: bitstring = catch-fail((if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-2-tuple(v_974))))) then (if not-caught-fail(v_976) then (v_976,2-proj-2-tuple(v_974)) else fail-any) else fail-any) else fail-any)) in
        {517}let v_978: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_977),2-proj-7-tuple(v_941),v_944,4-proj-7-tuple(v_941),5-proj-7-tuple(v_941),6-proj-7-tuple(v_941),7-proj-7-tuple(v_941))) in
        {518}let v_979: bitstring = catch-fail(concat3(v_945,2-proj-3-tuple(v_942),2-proj-2-tuple(v_977))) in
        {519}let (hs_980: handshakestate,re_981: key,message_b_982: bitstring) = (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-7-tuple(v_941))))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if not-caught-fail(v_944) then (if not-caught-fail(v_945) then (if not-caught-fail(v_947) then (if not-caught-fail(v_954) then (if not-caught-fail(v_961) then (if not-caught-fail(v_968) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-2-tuple(v_977))))) then (if not-caught-fail(v_978) then (if not-caught-fail(v_979) then (v_978,5-proj-7-tuple(v_941),v_979) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {520}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {521}insert statestore(bob,charlie,statepack_c(hs_980));
        {522}out(pub, message_b_982)
    ) | (
        {542}get statestore(=bob,=charlie,statepack_c(hs_983: handshakestate)) in
        {524}in(pub, message_c_984: bitstring);
        {525}let v_985: bitstring = catch-fail(handshakestateunpack(hs_983)) in
        {526}let v_986: bitstring = catch-fail(deconcat3(message_c_984)) in
        {527}let v_987: bool = catch-fail(true) in
        {528}let v_988: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_985))) in
        {529}let v_989: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_988))) in
        {530}let v_990: aead = catch-fail(decrypt(1-proj-2-tuple(v_989),2-proj-2-tuple(v_989),3-proj-3-tuple(v_988),3-proj-3-tuple(v_986))) in
        {531}let v_991: bitstring = catch-fail(aeadunpack(v_990)) in
        {532}let v_992: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_988))) in
        {533}let v_993: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_989))) && success?(1-proj-3-tuple(v_988))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then cipherstatepack(1-proj-2-tuple(v_992),increment_nonce(2-proj-2-tuple(v_989))) else fail-any) else fail-any)) in
        {534}let v_994: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_986)) && (success?(3-proj-3-tuple(v_988)) && success?(1-proj-3-tuple(v_988)))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then (if not-caught-fail(v_990) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-3-tuple(v_991))))) then (if not-caught-fail(v_993) then (v_993,3-proj-3-tuple(v_991),1-proj-3-tuple(v_991)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_995: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_994),2-proj-3-tuple(v_988),3-proj-3-tuple(v_988)))) in
        {536}let v_996: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_986)) && success?(symmetricstatepack(1-proj-3-tuple(v_994),2-proj-3-tuple(v_988),3-proj-3-tuple(v_988)))) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then symmetricstatepack(1-proj-3-tuple(v_995),2-proj-3-tuple(v_995),hash(3-proj-3-tuple(v_995),3-proj-3-tuple(v_986))) else fail-any) else fail-any)) in
        {537}let v_997: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_986)) && success?(1-proj-7-tuple(v_985))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then (if not-caught-fail(v_996) then (v_996,2-proj-3-tuple(v_994),3-proj-3-tuple(v_994)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {538}let v_998: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_997),2-proj-7-tuple(v_985),3-proj-7-tuple(v_985),4-proj-7-tuple(v_985),5-proj-7-tuple(v_985),6-proj-7-tuple(v_985),7-proj-7-tuple(v_985))) in
        {539}let (hs_999: handshakestate,re_1000: key,plaintext_c_1001: bitstring,valid_1002: bool) = (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-7-tuple(v_985))))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then (if not-caught-fail(v_987) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then (if (v_987 && 3-proj-3-tuple(v_997)) then (if not-caught-fail(v_998) then (v_998,getpublickey(3-proj-7-tuple(v_985)),2-proj-3-tuple(v_997),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {540}event RecvMsg(bob,charlie,stage_c,plaintext_c_1001,valid_1002);
        {541}insert statestore(bob,charlie,statepack_d(hs_999))
    ) | (
        {568}get statestore(=bob,=charlie,statepack_d(hs_1003: handshakestate)) in
        {543}let v_1004: bitstring = catch-fail(handshakestateunpack(hs_1003)) in
        {544}let v_1005: bitstring = catch-fail((empty,empty,empty)) in
        {545}let v_1006: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1004))) in
        {546}let v_1007: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1006))) in
        {547}let v_1008: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1007),2-proj-2-tuple(v_1007),3-proj-3-tuple(v_1006),msg_d(bob,charlie))) in
        {548}let v_1009: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1006))) in
        {549}let v_1010: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1007))) && success?(1-proj-3-tuple(v_1006))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-2-tuple(v_1009))))) then cipherstatepack(1-proj-2-tuple(v_1009),increment_nonce(2-proj-2-tuple(v_1007))) else fail-any) else fail-any)) in
        {550}let v_1011: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1006)) && success?(1-proj-3-tuple(v_1006))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-2-tuple(v_1007))))) then (if not-caught-fail(v_1008) then (if not-caught-fail(v_1010) then (v_1010,v_1008) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {551}let v_1012: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1011),2-proj-3-tuple(v_1006),3-proj-3-tuple(v_1006)))) in
        {552}let v_1013: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1011)) && success?(symmetricstatepack(1-proj-2-tuple(v_1011),2-proj-3-tuple(v_1006),3-proj-3-tuple(v_1006)))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-3-tuple(v_1012))))) then symmetricstatepack(1-proj-3-tuple(v_1012),2-proj-3-tuple(v_1012),hash(3-proj-3-tuple(v_1012),2-proj-2-tuple(v_1011))) else fail-any) else fail-any)) in
        {553}let v_1014: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1004)) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-2-tuple(v_1011))))) then (if not-caught-fail(v_1013) then (v_1013,2-proj-2-tuple(v_1011)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {554}let v_1015: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1014),2-proj-7-tuple(v_1004),3-proj-7-tuple(v_1004),4-proj-7-tuple(v_1004),5-proj-7-tuple(v_1004),6-proj-7-tuple(v_1004),7-proj-7-tuple(v_1004))) in
        {555}let v_1016: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),2-proj-2-tuple(v_1014))) in
        {556}let v_1017: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1014))) in
        {557}let v_1018: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1017),zero)) in
        {558}let v_1019: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1017),zero)) in
        {559}let v_1020: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1017),zero)) in
        {560}let v_1021: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1017)) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then (if not-caught-fail(v_1020) then (v_1018,v_1019,v_1020) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1022: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1021)) then cipherstatepack(1-proj-3-tuple(v_1021),minnonce) else fail-any)) in
        {562}let v_1023: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1021)) then cipherstatepack(2-proj-3-tuple(v_1021),minnonce) else fail-any)) in
        {563}let v_1024: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1014)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1023) then (1-proj-2-tuple(v_1014),v_1022,v_1023) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {564}let (hs_1025: handshakestate,re_1026: key,message_d_1027: bitstring,cs1_1028: cipherstate,cs2_1029: cipherstate) = (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-7-tuple(v_1004))))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-3-tuple(v_1024))))) then (v_1015,5-proj-7-tuple(v_1004),v_1016,2-proj-3-tuple(v_1024),3-proj-3-tuple(v_1024)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {565}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {566}insert statestore(bob,charlie,statepack_e(hs_1025));
        {567}out(pub, message_d_1027)
    ) | (
        {569}event LeakS(phase0,bob);
        {570}out(pub, key_s(bob))
    ) | (
        {571}phase 1;
        {572}event LeakS(phase1,bob);
        {573}out(pub, key_s(bob))
    )
) | (
    {574}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 195 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 16 rules in the queue.
600 rules inserted. The rule base contains 573 rules. 70 rules in the queue.
800 rules inserted. The rule base contains 750 rules. 100 rules in the queue.
1000 rules inserted. The rule base contains 870 rules. 96 rules in the queue.
1200 rules inserted. The rule base contains 981 rules. 116 rules in the queue.
1400 rules inserted. The rule base contains 1071 rules. 137 rules in the queue.
1600 rules inserted. The rule base contains 1223 rules. 154 rules in the queue.
1800 rules inserted. The rule base contains 1387 rules. 168 rules in the queue.
2000 rules inserted. The rule base contains 1562 rules. 216 rules in the queue.
2200 rules inserted. The rule base contains 1733 rules. 266 rules in the queue.
2400 rules inserted. The rule base contains 1899 rules. 270 rules in the queue.
2600 rules inserted. The rule base contains 2029 rules. 263 rules in the queue.
2800 rules inserted. The rule base contains 2160 rules. 252 rules in the queue.
3000 rules inserted. The rule base contains 2307 rules. 249 rules in the queue.
3200 rules inserted. The rule base contains 2441 rules. 260 rules in the queue.
3400 rules inserted. The rule base contains 2571 rules. 251 rules in the queue.
3600 rules inserted. The rule base contains 2704 rules. 262 rules in the queue.
3800 rules inserted. The rule base contains 2861 rules. 250 rules in the queue.
4000 rules inserted. The rule base contains 3009 rules. 243 rules in the queue.
4200 rules inserted. The rule base contains 3128 rules. 217 rules in the queue.
4400 rules inserted. The rule base contains 3246 rules. 189 rules in the queue.
4600 rules inserted. The rule base contains 3350 rules. 177 rules in the queue.
4800 rules inserted. The rule base contains 3475 rules. 154 rules in the queue.
5000 rules inserted. The rule base contains 3557 rules. 63 rules in the queue.
5200 rules inserted. The rule base contains 3562 rules. 4 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {290}.
mess(pub,dhexp(key_s(bob),g)).

10. By 1, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {290}.
mess(pub,dhexp(key_s(bob),g)).

10. By 1, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {290}.
mess(pub,dhexp(key_s(bob),g)).

10. By 1, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {290}.
mess(pub,dhexp(key_s(bob),g)).

10. By 1, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
