File "X1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "X1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "X1X.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "X1X.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "X1X.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "X1X.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 308, character 6:
Warning: identifier s rebound.
File "X1X.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 319, character 6:
Warning: identifier s rebound.
File "X1X.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 346, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 347, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 356, characters 6-7:
Warning: identifier re rebound.
File "X1X.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 359, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 361, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 369, characters 6-7:
Warning: identifier re rebound.
File "X1X.noise.passive.pv", line 370, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 372, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 373, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X.noise.passive.pv", line 374, characters 6-7:
Warning: identifier rs rebound.
File "X1X.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 386, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 386, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X.noise.passive.pv", line 387, characters 6-7:
Warning: identifier rs rebound.
File "X1X.noise.passive.pv", line 388, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 390, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 398, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 419, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 421, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 619, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 419, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 421, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 611, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 604, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 398, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 596, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 319, character 6:
Warning: identifier s rebound.
File "X1X.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 589, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 369, characters 6-7:
Warning: identifier re rebound.
File "X1X.noise.passive.pv", line 370, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 372, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 373, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X.noise.passive.pv", line 374, characters 6-7:
Warning: identifier rs rebound.
File "X1X.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 581, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "X1X.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "X1X.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 684, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 346, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 347, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 677, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 669, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 662, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 386, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 386, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X.noise.passive.pv", line 387, characters 6-7:
Warning: identifier rs rebound.
File "X1X.noise.passive.pv", line 388, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 390, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 654, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "X1X.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "X1X.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 308, character 6:
Warning: identifier s rebound.
File "X1X.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 647, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 356, characters 6-7:
Warning: identifier re rebound.
File "X1X.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 359, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 361, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let s_585: keypair = keypairpack(empty,empty) in
    {6}out(pub, getpublickey(s_585));
    (
        {7}let e_586: keypair = keypairpack(empty,empty) in
        {8}let rs_587: key = empty in
        {9}let re_588: key = empty in
        {10}let v_589: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_590: key = catch-fail(v_589) in
        {12}let v_591: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_592: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any))) in
        {14}let v_593: symmetricstate = catch-fail((if success?((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_592),hash(3-proj-3-tuple(v_592),empty)) else fail-any) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_593) then handshakestatepack(v_593,s_585,e_586,rs_587,re_588,empty,true) else fail-any) in
        {16}insert statestore(me,them,statepack_a(hs))
    ) | (
        {40}get statestore(=me,=them,statepack_a(hs_594: handshakestate)) in
        {17}let v_595: bitstring = catch-fail(handshakestateunpack(hs_594)) in
        {18}let v_596: bitstring = catch-fail((empty,empty,empty)) in
        {19}new key_e[me,them]: key;
        {20}let v_597: key = catch-fail(dhexp(key_e,g)) in
        {21}let v_598: keypair = catch-fail((if not-caught-fail(v_597) then keypairpack(v_597,key_e) else fail-any)) in
        {22}let v_599: bitstring = catch-fail(getpublickey(v_598)) in
        {23}let v_600: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_595))) in
        {24}let v_601: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_595)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_600),hash(3-proj-3-tuple(v_600),v_599)) else fail-any) else fail-any)) in
        {25}let v_602: bitstring = catch-fail(symmetricstateunpack(v_601)) in
        {26}let v_603: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_602))) in
        {27}let v_604: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_603),2-proj-2-tuple(v_603),3-proj-3-tuple(v_602),msg_a(me,them))) in
        {28}let v_605: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_602))) in
        {29}let v_606: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_603))) && success?(1-proj-3-tuple(v_602))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then cipherstatepack(1-proj-2-tuple(v_605),increment_nonce(2-proj-2-tuple(v_603))) else fail-any) else fail-any)) in
        {30}let v_607: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_602)) && success?(1-proj-3-tuple(v_602))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-2-tuple(v_603))))) then (if not-caught-fail(v_604) then (if not-caught-fail(v_606) then (v_606,v_604) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_608: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_607),2-proj-3-tuple(v_602),3-proj-3-tuple(v_602)))) in
        {32}let v_609: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_607)) && success?(symmetricstatepack(1-proj-2-tuple(v_607),2-proj-3-tuple(v_602),3-proj-3-tuple(v_602)))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then symmetricstatepack(1-proj-3-tuple(v_608),2-proj-3-tuple(v_608),hash(3-proj-3-tuple(v_608),2-proj-2-tuple(v_607))) else fail-any) else fail-any)) in
        {33}let v_610: bitstring = catch-fail((if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then (if not-caught-fail(v_609) then (v_609,2-proj-2-tuple(v_607)) else fail-any) else fail-any) else fail-any)) in
        {34}let v_611: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_610),2-proj-7-tuple(v_595),v_598,4-proj-7-tuple(v_595),5-proj-7-tuple(v_595),6-proj-7-tuple(v_595),7-proj-7-tuple(v_595))) in
        {35}let v_612: bitstring = catch-fail(concat3(v_599,2-proj-3-tuple(v_596),2-proj-2-tuple(v_610))) in
        {36}let (hs_613: handshakestate,re_614: key,message_a: bitstring) = (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-7-tuple(v_595))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (if not-caught-fail(v_601) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then (if not-caught-fail(v_611) then (if not-caught-fail(v_612) then (v_611,5-proj-7-tuple(v_595),v_612) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {37}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {38}insert statestore(me,them,statepack_b(hs_613));
        {39}out(pub, message_a)
    ) | (
        {88}get statestore(=me,=them,statepack_b(hs_615: handshakestate)) in
        {41}in(pub, message_b: bitstring);
        {42}let v_616: bitstring = catch-fail(handshakestateunpack(hs_615)) in
        {43}let v_617: bitstring = catch-fail(deconcat3(message_b)) in
        {44}let v_618: bool = catch-fail(true) in
        {45}let v_619: key = catch-fail(1-proj-3-tuple(v_617)) in
        {46}let v_620: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_616))) in
        {47}let v_621: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_616)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),v_619)) else fail-any) else fail-any)) in
        {48}let v_622: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_616))) in
        {49}let v_623: bitstring = catch-fail(symmetricstateunpack(v_621)) in
        {50}let v_624: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_623),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any))) in
        {51}let v_625: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_623),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any))) in
        {52}let v_626: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_623),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any))) in
        {53}let v_627: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_623))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (v_624,v_625,v_626) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {54}let v_628: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_627)) then cipherstatepack(2-proj-3-tuple(v_627),minnonce) else fail-any),1-proj-3-tuple(v_627),3-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any)) in
        {55}let v_629: bitstring = catch-fail(symmetricstateunpack(v_628)) in
        {56}let v_630: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_629))) in
        {57}let v_631: aead = catch-fail(decrypt(1-proj-2-tuple(v_630),2-proj-2-tuple(v_630),3-proj-3-tuple(v_629),2-proj-3-tuple(v_617))) in
        {58}let v_632: bitstring = catch-fail(aeadunpack(v_631)) in
        {59}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_629))) in
        {60}let v_634: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_630))) && success?(1-proj-3-tuple(v_629))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then cipherstatepack(1-proj-2-tuple(v_633),increment_nonce(2-proj-2-tuple(v_630))) else fail-any) else fail-any)) in
        {61}let v_635: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_617)) && (success?(3-proj-3-tuple(v_629)) && success?(1-proj-3-tuple(v_629)))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-2-tuple(v_630))))) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_634) then (v_634,3-proj-3-tuple(v_632),1-proj-3-tuple(v_632)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_636: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_629),3-proj-3-tuple(v_629)))) in
        {63}let v_637: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_617)) && success?(symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_629),3-proj-3-tuple(v_629)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then symmetricstatepack(1-proj-3-tuple(v_636),2-proj-3-tuple(v_636),hash(3-proj-3-tuple(v_636),2-proj-3-tuple(v_617))) else fail-any) else fail-any)) in
        {64}let v_638: bitstring = catch-fail((if success?(2-proj-3-tuple(v_617)) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_639: key = catch-fail(2-proj-3-tuple(v_638)) in
        {66}let v_640: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_616))) in
        {67}let v_641: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_638))) in
        {68}let v_642: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_641),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any))) in
        {69}let v_643: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_641),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any))) in
        {70}let v_644: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_641),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any))) in
        {71}let v_645: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_641))) then (if not-caught-fail(v_642) then (if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (v_642,v_643,v_644) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_646: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),v_639) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_638))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_645)) then cipherstatepack(2-proj-3-tuple(v_645),minnonce) else fail-any),1-proj-3-tuple(v_645),3-proj-3-tuple(v_641)) else fail-any) else fail-any) else fail-any)) in
        {73}let v_647: bitstring = catch-fail(symmetricstateunpack(v_646)) in
        {74}let v_648: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {75}let v_649: aead = catch-fail(decrypt(1-proj-2-tuple(v_648),2-proj-2-tuple(v_648),3-proj-3-tuple(v_647),3-proj-3-tuple(v_617))) in
        {76}let v_650: bitstring = catch-fail(aeadunpack(v_649)) in
        {77}let v_651: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {78}let v_652: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_648))) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then cipherstatepack(1-proj-2-tuple(v_651),increment_nonce(2-proj-2-tuple(v_648))) else fail-any) else fail-any)) in
        {79}let v_653: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && (success?(3-proj-3-tuple(v_647)) && success?(1-proj-3-tuple(v_647)))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_649) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if not-caught-fail(v_652) then (v_652,3-proj-3-tuple(v_650),1-proj-3-tuple(v_650)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_654: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) in
        {81}let v_655: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then symmetricstatepack(1-proj-3-tuple(v_654),2-proj-3-tuple(v_654),hash(3-proj-3-tuple(v_654),3-proj-3-tuple(v_617))) else fail-any) else fail-any)) in
        {82}let v_656: bitstring = catch-fail((if success?(3-proj-3-tuple(v_617)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if not-caught-fail(v_655) then (v_655,2-proj-3-tuple(v_653),3-proj-3-tuple(v_653)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_657: key = catch-fail(dhexp(key_s(them),g)) in
        {84}let v_658: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_656),2-proj-7-tuple(v_616),3-proj-7-tuple(v_616),v_639,v_619,6-proj-7-tuple(v_616),7-proj-7-tuple(v_616))) in
        {85}let (hs_659: handshakestate,re_660: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-7-tuple(v_616))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then (if not-caught-fail(v_628) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_639) then (if not-caught-fail(v_646) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if ((3-proj-3-tuple(v_638) && 3-proj-3-tuple(v_656)) && (v_639 = getpublickey((if not-caught-fail(v_657) then keypairpack(v_657,key_s(them)) else fail-any)))) then (if not-caught-fail(v_658) then (v_658,getpublickey(3-proj-7-tuple(v_616)),2-proj-3-tuple(v_656),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {86}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {87}insert statestore(me,them,statepack_c(hs_659))
    ) | (
        {117}get statestore(=me,=them,statepack_c(hs_661: handshakestate)) in
        {89}let v_662: bitstring = catch-fail(handshakestateunpack(hs_661)) in
        {90}let v_663: bitstring = catch-fail((empty,empty,empty)) in
        {91}let v_664: key = catch-fail(dhexp(key_s(me),g)) in
        {92}let v_665: keypair = catch-fail((if not-caught-fail(v_664) then keypairpack(v_664,key_s(me)) else fail-any)) in
        {93}let v_666: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_662))) in
        {94}let v_667: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_666))) in
        {95}let v_668: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_667),2-proj-2-tuple(v_667),3-proj-3-tuple(v_666),getpublickey(v_665))) in
        {96}let v_669: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_666))) in
        {97}let v_670: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_667))) && success?(1-proj-3-tuple(v_666))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then cipherstatepack(1-proj-2-tuple(v_669),increment_nonce(2-proj-2-tuple(v_667))) else fail-any) else fail-any)) in
        {98}let v_671: bitstring = catch-fail((if (success?(getpublickey(v_665)) && (success?(3-proj-3-tuple(v_666)) && success?(1-proj-3-tuple(v_666)))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_670) then (v_670,v_668) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_672: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_671),2-proj-3-tuple(v_666),3-proj-3-tuple(v_666)))) in
        {100}let v_673: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_671)) && success?(symmetricstatepack(1-proj-2-tuple(v_671),2-proj-3-tuple(v_666),3-proj-3-tuple(v_666)))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then symmetricstatepack(1-proj-3-tuple(v_672),2-proj-3-tuple(v_672),hash(3-proj-3-tuple(v_672),2-proj-2-tuple(v_671))) else fail-any) else fail-any)) in
        {101}let v_674: bitstring = catch-fail((if (success?(getpublickey(v_665)) && success?(1-proj-7-tuple(v_662))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then (if not-caught-fail(v_673) then (v_673,2-proj-2-tuple(v_671)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_675: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_674))) in
        {103}let v_676: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {104}let v_677: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_676),2-proj-2-tuple(v_676),3-proj-3-tuple(v_675),msg_c(me,them))) in
        {105}let v_678: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {106}let v_679: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_676))) && success?(1-proj-3-tuple(v_675))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then cipherstatepack(1-proj-2-tuple(v_678),increment_nonce(2-proj-2-tuple(v_676))) else fail-any) else fail-any)) in
        {107}let v_680: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_675)) && success?(1-proj-3-tuple(v_675))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_679) then (v_679,v_677) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_681: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_680),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) in
        {109}let v_682: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_680)) && success?(symmetricstatepack(1-proj-2-tuple(v_680),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_681),hash(3-proj-3-tuple(v_681),2-proj-2-tuple(v_680))) else fail-any) else fail-any)) in
        {110}let v_683: bitstring = catch-fail((if success?(1-proj-2-tuple(v_674)) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then (if not-caught-fail(v_682) then (v_682,2-proj-2-tuple(v_680)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {111}let v_684: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_683),v_665,3-proj-7-tuple(v_662),4-proj-7-tuple(v_662),5-proj-7-tuple(v_662),6-proj-7-tuple(v_662),7-proj-7-tuple(v_662))) in
        {112}let v_685: bitstring = catch-fail(concat3(1-proj-3-tuple(v_663),2-proj-2-tuple(v_674),2-proj-2-tuple(v_683))) in
        {113}let (hs_686: handshakestate,re_687: key,message_c: bitstring) = (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-7-tuple(v_662))))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if not-caught-fail(v_665) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then (if not-caught-fail(v_684) then (if not-caught-fail(v_685) then (v_684,5-proj-7-tuple(v_662),v_685) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {114}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {115}insert statestore(me,them,statepack_d(hs_686));
        {116}out(pub, message_c)
    ) | (
        {143}get statestore(=me,=them,statepack_d(hs_688: handshakestate)) in
        {118}in(pub, message_d: bitstring);
        {119}let v_689: bitstring = catch-fail(handshakestateunpack(hs_688)) in
        {120}let v_690: bitstring = catch-fail(deconcat3(message_d)) in
        {121}let v_691: bool = catch-fail(true) in
        {122}let v_692: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_689))) in
        {123}let v_693: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_689))) in
        {124}let v_694: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_693),(if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any))) in
        {125}let v_695: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_693),(if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any))) in
        {126}let v_696: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_693),(if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any))) in
        {127}let v_697: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_693))) then (if not-caught-fail(v_694) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (v_694,v_695,v_696) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {128}let v_698: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_689))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_697)) then cipherstatepack(2-proj-3-tuple(v_697),minnonce) else fail-any),1-proj-3-tuple(v_697),3-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any)) in
        {129}let v_699: bitstring = catch-fail(symmetricstateunpack(v_698)) in
        {130}let v_700: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_699))) in
        {131}let v_701: aead = catch-fail(decrypt(1-proj-2-tuple(v_700),2-proj-2-tuple(v_700),3-proj-3-tuple(v_699),3-proj-3-tuple(v_690))) in
        {132}let v_702: bitstring = catch-fail(aeadunpack(v_701)) in
        {133}let v_703: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_699))) in
        {134}let v_704: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_700))) && success?(1-proj-3-tuple(v_699))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then cipherstatepack(1-proj-2-tuple(v_703),increment_nonce(2-proj-2-tuple(v_700))) else fail-any) else fail-any)) in
        {135}let v_705: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_690)) && (success?(3-proj-3-tuple(v_699)) && success?(1-proj-3-tuple(v_699)))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then (if not-caught-fail(v_701) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if not-caught-fail(v_704) then (v_704,3-proj-3-tuple(v_702),1-proj-3-tuple(v_702)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {136}let v_706: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_705),2-proj-3-tuple(v_699),3-proj-3-tuple(v_699)))) in
        {137}let v_707: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_690)) && success?(symmetricstatepack(1-proj-3-tuple(v_705),2-proj-3-tuple(v_699),3-proj-3-tuple(v_699)))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_706),hash(3-proj-3-tuple(v_706),3-proj-3-tuple(v_690))) else fail-any) else fail-any)) in
        {138}let v_708: bitstring = catch-fail((if success?(3-proj-3-tuple(v_690)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if not-caught-fail(v_707) then (v_707,2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_709: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_708),2-proj-7-tuple(v_689),3-proj-7-tuple(v_689),4-proj-7-tuple(v_689),5-proj-7-tuple(v_689),6-proj-7-tuple(v_689),7-proj-7-tuple(v_689))) in
        {140}let (hs_710: handshakestate,re_711: key,plaintext_d: bitstring,valid_712: bool) = (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-7-tuple(v_689))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_698) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if (v_691 && 3-proj-3-tuple(v_708)) then (if not-caught-fail(v_709) then (v_709,getpublickey(3-proj-7-tuple(v_689)),2-proj-3-tuple(v_708),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {141}event RecvMsg(me,them,stage_d,plaintext_d,valid_712);
        {142}insert statestore(me,them,statepack_e(hs_710))
    ) | (
        {144}!
        {162}get statestore(=me,=them,statepack_e(hs_713: handshakestate)) in
        {145}let v_714: bitstring = catch-fail(handshakestateunpack(hs_713)) in
        {146}let v_715: bitstring = catch-fail((empty,empty,empty)) in
        {147}let v_716: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_714))) in
        {148}let v_717: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_716))) in
        {149}let v_718: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_717),2-proj-2-tuple(v_717),3-proj-3-tuple(v_716),msg_e(me,them))) in
        {150}let v_719: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_716))) in
        {151}let v_720: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_717))) && success?(1-proj-3-tuple(v_716))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then cipherstatepack(1-proj-2-tuple(v_719),increment_nonce(2-proj-2-tuple(v_717))) else fail-any) else fail-any)) in
        {152}let v_721: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_716)) && success?(1-proj-3-tuple(v_716))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then (if not-caught-fail(v_718) then (if not-caught-fail(v_720) then (v_720,v_718) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {153}let v_722: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_721),2-proj-3-tuple(v_716),3-proj-3-tuple(v_716)))) in
        {154}let v_723: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_721)) && success?(symmetricstatepack(1-proj-2-tuple(v_721),2-proj-3-tuple(v_716),3-proj-3-tuple(v_716)))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),hash(3-proj-3-tuple(v_722),2-proj-2-tuple(v_721))) else fail-any) else fail-any)) in
        {155}let v_724: bitstring = catch-fail((if success?(1-proj-7-tuple(v_714)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then (if not-caught-fail(v_723) then (v_723,2-proj-2-tuple(v_721)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_725: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_724),2-proj-7-tuple(v_714),3-proj-7-tuple(v_714),4-proj-7-tuple(v_714),5-proj-7-tuple(v_714),6-proj-7-tuple(v_714),7-proj-7-tuple(v_714))) in
        {157}let v_726: bitstring = catch-fail(concat3(1-proj-3-tuple(v_715),2-proj-3-tuple(v_715),2-proj-2-tuple(v_724))) in
        {158}let (hs_727: handshakestate,re_728: key,message_e: bitstring) = (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-7-tuple(v_714))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (v_725,5-proj-7-tuple(v_714),v_726) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {159}event SendMsg(me,them,stage_e,msg_e(me,them),true);
        {160}insert statestore(me,them,statepack_f(hs_727));
        {161}out(pub, message_e)
    ) | (
        {163}!
        {191}get statestore(=me,=them,statepack_f(hs_729: handshakestate)) in
        {164}in(pub, message_f: bitstring);
        {165}let v_730: bitstring = catch-fail(handshakestateunpack(hs_729)) in
        {166}let v_731: bitstring = catch-fail(deconcat3(message_f)) in
        {167}let v_732: bool = catch-fail(true) in
        {168}let v_733: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_730))) in
        {169}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {170}let v_735: aead = catch-fail(decrypt(1-proj-2-tuple(v_734),2-proj-2-tuple(v_734),3-proj-3-tuple(v_733),3-proj-3-tuple(v_731))) in
        {171}let v_736: bitstring = catch-fail(aeadunpack(v_735)) in
        {172}let v_737: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {173}let v_738: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_734))) && success?(1-proj-3-tuple(v_733))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then cipherstatepack(1-proj-2-tuple(v_737),increment_nonce(2-proj-2-tuple(v_734))) else fail-any) else fail-any)) in
        {174}let v_739: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_731)) && (success?(3-proj-3-tuple(v_733)) && success?(1-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then (if not-caught-fail(v_735) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if not-caught-fail(v_738) then (v_738,3-proj-3-tuple(v_736),1-proj-3-tuple(v_736)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {175}let v_740: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) in
        {176}let v_741: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_731)) && success?(symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then symmetricstatepack(1-proj-3-tuple(v_740),2-proj-3-tuple(v_740),hash(3-proj-3-tuple(v_740),3-proj-3-tuple(v_731))) else fail-any) else fail-any)) in
        {177}let v_742: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_731)) && success?(1-proj-7-tuple(v_730))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if not-caught-fail(v_741) then (v_741,2-proj-3-tuple(v_739),3-proj-3-tuple(v_739)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {178}let v_743: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_742),2-proj-7-tuple(v_730),3-proj-7-tuple(v_730),4-proj-7-tuple(v_730),5-proj-7-tuple(v_730),6-proj-7-tuple(v_730),7-proj-7-tuple(v_730))) in
        {179}let v_744: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_742))) in
        {180}let v_745: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_744),zero)) in
        {181}let v_746: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_744),zero)) in
        {182}let v_747: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_744),zero)) in
        {183}let v_748: bitstring = catch-fail((if success?(2-proj-3-tuple(v_744)) then (if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (v_745,v_746,v_747) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {184}let v_749: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_748)) then cipherstatepack(1-proj-3-tuple(v_748),minnonce) else fail-any)) in
        {185}let v_750: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_748)) then cipherstatepack(2-proj-3-tuple(v_748),minnonce) else fail-any)) in
        {186}let v_751: bitstring = catch-fail((if success?(1-proj-3-tuple(v_742)) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (1-proj-3-tuple(v_742),v_749,v_750) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {187}let (hs_752: handshakestate,re_753: key,plaintext_f: bitstring,valid_754: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-7-tuple(v_730))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if (v_732 && 3-proj-3-tuple(v_742)) then (if not-caught-fail(v_743) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (v_743,getpublickey(3-proj-7-tuple(v_730)),2-proj-3-tuple(v_742),true,2-proj-3-tuple(v_751),3-proj-3-tuple(v_751)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {188}event RecvMsg(me,them,stage_f,plaintext_f,valid_754);
        {189}insert statestore(me,them,statepack_g(hs_752));
        {190}event RecvEnd(valid_754)
    ) | (
        {192}event LeakS(phase0,me);
        {193}out(pub, key_s(me))
    ) | (
        {194}phase 1;
        {195}event LeakS(phase1,me);
        {196}out(pub, key_s(me))
    )
) | (
    {197}let them_755: principal = charlie in
    {198}let me_756: principal = alice in
    {199}let s_757: keypair = keypairpack(empty,empty) in
    {200}out(pub, getpublickey(s_757));
    (
        {201}let e_758: keypair = keypairpack(empty,empty) in
        {202}let rs_759: key = empty in
        {203}let re_760: key = empty in
        {204}let v_761: bitstring = catch-fail(hash(somename,empty)) in
        {205}let v_762: key = catch-fail(v_761) in
        {206}let v_763: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {207}let v_764: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then symmetricstatepack(v_763,v_762,v_761) else fail-any) else fail-any) else fail-any))) in
        {208}let v_765: symmetricstate = catch-fail((if success?((if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then symmetricstatepack(v_763,v_762,v_761) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then symmetricstatepack(1-proj-3-tuple(v_764),2-proj-3-tuple(v_764),hash(3-proj-3-tuple(v_764),empty)) else fail-any) else fail-any)) in
        {209}let hs_766: handshakestate = (if not-caught-fail(v_765) then handshakestatepack(v_765,s_757,e_758,rs_759,re_760,empty,true) else fail-any) in
        {210}insert statestore(me_756,them_755,statepack_a(hs_766))
    ) | (
        {234}get statestore(=me_756,=them_755,statepack_a(hs_767: handshakestate)) in
        {211}let v_768: bitstring = catch-fail(handshakestateunpack(hs_767)) in
        {212}let v_769: bitstring = catch-fail((empty,empty,empty)) in
        {213}new key_e_770[me_756,them_755]: key;
        {214}let v_771: key = catch-fail(dhexp(key_e_770,g)) in
        {215}let v_772: keypair = catch-fail((if not-caught-fail(v_771) then keypairpack(v_771,key_e_770) else fail-any)) in
        {216}let v_773: bitstring = catch-fail(getpublickey(v_772)) in
        {217}let v_774: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_768))) in
        {218}let v_775: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_768)) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_774),hash(3-proj-3-tuple(v_774),v_773)) else fail-any) else fail-any)) in
        {219}let v_776: bitstring = catch-fail(symmetricstateunpack(v_775)) in
        {220}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {221}let v_778: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_777),2-proj-2-tuple(v_777),3-proj-3-tuple(v_776),msg_a(me_756,them_755))) in
        {222}let v_779: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {223}let v_780: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_777))) && success?(1-proj-3-tuple(v_776))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then cipherstatepack(1-proj-2-tuple(v_779),increment_nonce(2-proj-2-tuple(v_777))) else fail-any) else fail-any)) in
        {224}let v_781: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_776)) && success?(1-proj-3-tuple(v_776))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then (if not-caught-fail(v_778) then (if not-caught-fail(v_780) then (v_780,v_778) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_782: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_781),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) in
        {226}let v_783: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_781)) && success?(symmetricstatepack(1-proj-2-tuple(v_781),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_782),hash(3-proj-3-tuple(v_782),2-proj-2-tuple(v_781))) else fail-any) else fail-any)) in
        {227}let v_784: bitstring = catch-fail((if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-2-tuple(v_781))))) then (if not-caught-fail(v_783) then (v_783,2-proj-2-tuple(v_781)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_785: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_784),2-proj-7-tuple(v_768),v_772,4-proj-7-tuple(v_768),5-proj-7-tuple(v_768),6-proj-7-tuple(v_768),7-proj-7-tuple(v_768))) in
        {229}let v_786: bitstring = catch-fail(concat3(v_773,2-proj-3-tuple(v_769),2-proj-2-tuple(v_784))) in
        {230}let (hs_787: handshakestate,re_788: key,message_a_789: bitstring) = (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-7-tuple(v_768))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then (if not-caught-fail(v_772) then (if not-caught-fail(v_773) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then (if not-caught-fail(v_785) then (if not-caught-fail(v_786) then (v_785,5-proj-7-tuple(v_768),v_786) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {231}event SendMsg(me_756,them_755,stage_a,msg_a(me_756,them_755),true);
        {232}insert statestore(me_756,them_755,statepack_b(hs_787));
        {233}out(pub, message_a_789)
    ) | (
        {282}get statestore(=me_756,=them_755,statepack_b(hs_790: handshakestate)) in
        {235}in(pub, message_b_791: bitstring);
        {236}let v_792: bitstring = catch-fail(handshakestateunpack(hs_790)) in
        {237}let v_793: bitstring = catch-fail(deconcat3(message_b_791)) in
        {238}let v_794: bool = catch-fail(true) in
        {239}let v_795: key = catch-fail(1-proj-3-tuple(v_793)) in
        {240}let v_796: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_792))) in
        {241}let v_797: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_792)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then symmetricstatepack(1-proj-3-tuple(v_796),2-proj-3-tuple(v_796),hash(3-proj-3-tuple(v_796),v_795)) else fail-any) else fail-any)) in
        {242}let v_798: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_792))) in
        {243}let v_799: bitstring = catch-fail(symmetricstateunpack(v_797)) in
        {244}let v_800: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_799),(if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_795) else fail-any) else fail-any))) in
        {245}let v_801: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_799),(if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_795) else fail-any) else fail-any))) in
        {246}let v_802: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_799),(if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_795) else fail-any) else fail-any))) in
        {247}let v_803: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_795) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_799))) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then (if not-caught-fail(v_802) then (v_800,v_801,v_802) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let v_804: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then dhexp(2-proj-2-tuple(v_798),v_795) else fail-any) else fail-any)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_803)) then cipherstatepack(2-proj-3-tuple(v_803),minnonce) else fail-any),1-proj-3-tuple(v_803),3-proj-3-tuple(v_799)) else fail-any) else fail-any) else fail-any)) in
        {249}let v_805: bitstring = catch-fail(symmetricstateunpack(v_804)) in
        {250}let v_806: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {251}let v_807: aead = catch-fail(decrypt(1-proj-2-tuple(v_806),2-proj-2-tuple(v_806),3-proj-3-tuple(v_805),2-proj-3-tuple(v_793))) in
        {252}let v_808: bitstring = catch-fail(aeadunpack(v_807)) in
        {253}let v_809: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {254}let v_810: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_806))) && success?(1-proj-3-tuple(v_805))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then cipherstatepack(1-proj-2-tuple(v_809),increment_nonce(2-proj-2-tuple(v_806))) else fail-any) else fail-any)) in
        {255}let v_811: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_793)) && (success?(3-proj-3-tuple(v_805)) && success?(1-proj-3-tuple(v_805)))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then (if not-caught-fail(v_807) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if not-caught-fail(v_810) then (v_810,3-proj-3-tuple(v_808),1-proj-3-tuple(v_808)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_812: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_811),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) in
        {257}let v_813: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_793)) && success?(symmetricstatepack(1-proj-3-tuple(v_811),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then symmetricstatepack(1-proj-3-tuple(v_812),2-proj-3-tuple(v_812),hash(3-proj-3-tuple(v_812),2-proj-3-tuple(v_793))) else fail-any) else fail-any)) in
        {258}let v_814: bitstring = catch-fail((if success?(2-proj-3-tuple(v_793)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if not-caught-fail(v_813) then (v_813,2-proj-3-tuple(v_811),3-proj-3-tuple(v_811)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {259}let v_815: key = catch-fail(2-proj-3-tuple(v_814)) in
        {260}let v_816: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_792))) in
        {261}let v_817: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_814))) in
        {262}let v_818: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_817),(if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then dhexp(2-proj-2-tuple(v_816),v_815) else fail-any) else fail-any))) in
        {263}let v_819: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_817),(if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then dhexp(2-proj-2-tuple(v_816),v_815) else fail-any) else fail-any))) in
        {264}let v_820: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_817),(if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then dhexp(2-proj-2-tuple(v_816),v_815) else fail-any) else fail-any))) in
        {265}let v_821: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then dhexp(2-proj-2-tuple(v_816),v_815) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_817))) then (if not-caught-fail(v_818) then (if not-caught-fail(v_819) then (if not-caught-fail(v_820) then (v_818,v_819,v_820) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_822: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then dhexp(2-proj-2-tuple(v_816),v_815) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_814))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_821)) then cipherstatepack(2-proj-3-tuple(v_821),minnonce) else fail-any),1-proj-3-tuple(v_821),3-proj-3-tuple(v_817)) else fail-any) else fail-any) else fail-any)) in
        {267}let v_823: bitstring = catch-fail(symmetricstateunpack(v_822)) in
        {268}let v_824: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_823))) in
        {269}let v_825: aead = catch-fail(decrypt(1-proj-2-tuple(v_824),2-proj-2-tuple(v_824),3-proj-3-tuple(v_823),3-proj-3-tuple(v_793))) in
        {270}let v_826: bitstring = catch-fail(aeadunpack(v_825)) in
        {271}let v_827: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_823))) in
        {272}let v_828: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_824))) && success?(1-proj-3-tuple(v_823))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-2-tuple(v_827))))) then cipherstatepack(1-proj-2-tuple(v_827),increment_nonce(2-proj-2-tuple(v_824))) else fail-any) else fail-any)) in
        {273}let v_829: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_793)) && (success?(3-proj-3-tuple(v_823)) && success?(1-proj-3-tuple(v_823)))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-2-tuple(v_824))))) then (if not-caught-fail(v_825) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if not-caught-fail(v_828) then (v_828,3-proj-3-tuple(v_826),1-proj-3-tuple(v_826)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {274}let v_830: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_829),2-proj-3-tuple(v_823),3-proj-3-tuple(v_823)))) in
        {275}let v_831: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_793)) && success?(symmetricstatepack(1-proj-3-tuple(v_829),2-proj-3-tuple(v_823),3-proj-3-tuple(v_823)))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then symmetricstatepack(1-proj-3-tuple(v_830),2-proj-3-tuple(v_830),hash(3-proj-3-tuple(v_830),3-proj-3-tuple(v_793))) else fail-any) else fail-any)) in
        {276}let v_832: bitstring = catch-fail((if success?(3-proj-3-tuple(v_793)) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if not-caught-fail(v_831) then (v_831,2-proj-3-tuple(v_829),3-proj-3-tuple(v_829)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_833: key = catch-fail(dhexp(key_s(them_755),g)) in
        {278}let v_834: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_832),2-proj-7-tuple(v_792),3-proj-7-tuple(v_792),v_815,v_795,6-proj-7-tuple(v_792),7-proj-7-tuple(v_792))) in
        {279}let (hs_835: handshakestate,re_836: key,plaintext_b_837: bitstring,valid_838: bool) = (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-7-tuple(v_792))))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (if not-caught-fail(v_797) then (if not-caught-fail(v_804) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if not-caught-fail(v_815) then (if not-caught-fail(v_822) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if ((3-proj-3-tuple(v_814) && 3-proj-3-tuple(v_832)) && (v_815 = getpublickey((if not-caught-fail(v_833) then keypairpack(v_833,key_s(them_755)) else fail-any)))) then (if not-caught-fail(v_834) then (v_834,getpublickey(3-proj-7-tuple(v_792)),2-proj-3-tuple(v_832),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {280}event RecvMsg(me_756,them_755,stage_b,plaintext_b_837,valid_838);
        {281}insert statestore(me_756,them_755,statepack_c(hs_835))
    ) | (
        {311}get statestore(=me_756,=them_755,statepack_c(hs_839: handshakestate)) in
        {283}let v_840: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {284}let v_841: bitstring = catch-fail((empty,empty,empty)) in
        {285}let v_842: key = catch-fail(dhexp(key_s(me_756),g)) in
        {286}let v_843: keypair = catch-fail((if not-caught-fail(v_842) then keypairpack(v_842,key_s(me_756)) else fail-any)) in
        {287}let v_844: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_840))) in
        {288}let v_845: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_844))) in
        {289}let v_846: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_845),2-proj-2-tuple(v_845),3-proj-3-tuple(v_844),getpublickey(v_843))) in
        {290}let v_847: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_844))) in
        {291}let v_848: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_845))) && success?(1-proj-3-tuple(v_844))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then cipherstatepack(1-proj-2-tuple(v_847),increment_nonce(2-proj-2-tuple(v_845))) else fail-any) else fail-any)) in
        {292}let v_849: bitstring = catch-fail((if (success?(getpublickey(v_843)) && (success?(3-proj-3-tuple(v_844)) && success?(1-proj-3-tuple(v_844)))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then (if not-caught-fail(v_846) then (if not-caught-fail(v_848) then (v_848,v_846) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_850: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_849),2-proj-3-tuple(v_844),3-proj-3-tuple(v_844)))) in
        {294}let v_851: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_849)) && success?(symmetricstatepack(1-proj-2-tuple(v_849),2-proj-3-tuple(v_844),3-proj-3-tuple(v_844)))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then symmetricstatepack(1-proj-3-tuple(v_850),2-proj-3-tuple(v_850),hash(3-proj-3-tuple(v_850),2-proj-2-tuple(v_849))) else fail-any) else fail-any)) in
        {295}let v_852: bitstring = catch-fail((if (success?(getpublickey(v_843)) && success?(1-proj-7-tuple(v_840))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-2-tuple(v_849))))) then (if not-caught-fail(v_851) then (v_851,2-proj-2-tuple(v_849)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_853: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_852))) in
        {297}let v_854: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_853))) in
        {298}let v_855: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_854),2-proj-2-tuple(v_854),3-proj-3-tuple(v_853),msg_c(me_756,them_755))) in
        {299}let v_856: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_853))) in
        {300}let v_857: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_854))) && success?(1-proj-3-tuple(v_853))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then cipherstatepack(1-proj-2-tuple(v_856),increment_nonce(2-proj-2-tuple(v_854))) else fail-any) else fail-any)) in
        {301}let v_858: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_853)) && success?(1-proj-3-tuple(v_853))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then (if not-caught-fail(v_855) then (if not-caught-fail(v_857) then (v_857,v_855) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {302}let v_859: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_858),2-proj-3-tuple(v_853),3-proj-3-tuple(v_853)))) in
        {303}let v_860: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_858)) && success?(symmetricstatepack(1-proj-2-tuple(v_858),2-proj-3-tuple(v_853),3-proj-3-tuple(v_853)))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then symmetricstatepack(1-proj-3-tuple(v_859),2-proj-3-tuple(v_859),hash(3-proj-3-tuple(v_859),2-proj-2-tuple(v_858))) else fail-any) else fail-any)) in
        {304}let v_861: bitstring = catch-fail((if success?(1-proj-2-tuple(v_852)) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then (if not-caught-fail(v_860) then (v_860,2-proj-2-tuple(v_858)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {305}let v_862: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_861),v_843,3-proj-7-tuple(v_840),4-proj-7-tuple(v_840),5-proj-7-tuple(v_840),6-proj-7-tuple(v_840),7-proj-7-tuple(v_840))) in
        {306}let v_863: bitstring = catch-fail(concat3(1-proj-3-tuple(v_841),2-proj-2-tuple(v_852),2-proj-2-tuple(v_861))) in
        {307}let (hs_864: handshakestate,re_865: key,message_c_866: bitstring) = (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-7-tuple(v_840))))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if not-caught-fail(v_843) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then (if not-caught-fail(v_862) then (if not-caught-fail(v_863) then (v_862,5-proj-7-tuple(v_840),v_863) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {308}event SendMsg(me_756,them_755,stage_c,msg_c(me_756,them_755),true);
        {309}insert statestore(me_756,them_755,statepack_d(hs_864));
        {310}out(pub, message_c_866)
    ) | (
        {337}get statestore(=me_756,=them_755,statepack_d(hs_867: handshakestate)) in
        {312}in(pub, message_d_868: bitstring);
        {313}let v_869: bitstring = catch-fail(handshakestateunpack(hs_867)) in
        {314}let v_870: bitstring = catch-fail(deconcat3(message_d_868)) in
        {315}let v_871: bool = catch-fail(true) in
        {316}let v_872: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_869))) in
        {317}let v_873: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_869))) in
        {318}let v_874: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_873),(if (success?(5-proj-7-tuple(v_869)) && success?(2-proj-7-tuple(v_869))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),5-proj-7-tuple(v_869)) else fail-any) else fail-any))) in
        {319}let v_875: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_873),(if (success?(5-proj-7-tuple(v_869)) && success?(2-proj-7-tuple(v_869))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),5-proj-7-tuple(v_869)) else fail-any) else fail-any))) in
        {320}let v_876: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_873),(if (success?(5-proj-7-tuple(v_869)) && success?(2-proj-7-tuple(v_869))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),5-proj-7-tuple(v_869)) else fail-any) else fail-any))) in
        {321}let v_877: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_869)) && success?(2-proj-7-tuple(v_869))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),5-proj-7-tuple(v_869)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_873))) then (if not-caught-fail(v_874) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (v_874,v_875,v_876) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {322}let v_878: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_869)) && success?(2-proj-7-tuple(v_869))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),5-proj-7-tuple(v_869)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_869))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_877)) then cipherstatepack(2-proj-3-tuple(v_877),minnonce) else fail-any),1-proj-3-tuple(v_877),3-proj-3-tuple(v_873)) else fail-any) else fail-any) else fail-any)) in
        {323}let v_879: bitstring = catch-fail(symmetricstateunpack(v_878)) in
        {324}let v_880: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_879))) in
        {325}let v_881: aead = catch-fail(decrypt(1-proj-2-tuple(v_880),2-proj-2-tuple(v_880),3-proj-3-tuple(v_879),3-proj-3-tuple(v_870))) in
        {326}let v_882: bitstring = catch-fail(aeadunpack(v_881)) in
        {327}let v_883: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_879))) in
        {328}let v_884: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_880))) && success?(1-proj-3-tuple(v_879))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-2-tuple(v_883))))) then cipherstatepack(1-proj-2-tuple(v_883),increment_nonce(2-proj-2-tuple(v_880))) else fail-any) else fail-any)) in
        {329}let v_885: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_870)) && (success?(3-proj-3-tuple(v_879)) && success?(1-proj-3-tuple(v_879)))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then (if not-caught-fail(v_881) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (if not-caught-fail(v_884) then (v_884,3-proj-3-tuple(v_882),1-proj-3-tuple(v_882)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {330}let v_886: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_885),2-proj-3-tuple(v_879),3-proj-3-tuple(v_879)))) in
        {331}let v_887: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_870)) && success?(symmetricstatepack(1-proj-3-tuple(v_885),2-proj-3-tuple(v_879),3-proj-3-tuple(v_879)))) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then symmetricstatepack(1-proj-3-tuple(v_886),2-proj-3-tuple(v_886),hash(3-proj-3-tuple(v_886),3-proj-3-tuple(v_870))) else fail-any) else fail-any)) in
        {332}let v_888: bitstring = catch-fail((if success?(3-proj-3-tuple(v_870)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if not-caught-fail(v_887) then (v_887,2-proj-3-tuple(v_885),3-proj-3-tuple(v_885)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let v_889: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_888),2-proj-7-tuple(v_869),3-proj-7-tuple(v_869),4-proj-7-tuple(v_869),5-proj-7-tuple(v_869),6-proj-7-tuple(v_869),7-proj-7-tuple(v_869))) in
        {334}let (hs_890: handshakestate,re_891: key,plaintext_d_892: bitstring,valid_893: bool) = (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-7-tuple(v_869))))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if not-caught-fail(v_871) then (if not-caught-fail(v_878) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then (if (v_871 && 3-proj-3-tuple(v_888)) then (if not-caught-fail(v_889) then (v_889,getpublickey(3-proj-7-tuple(v_869)),2-proj-3-tuple(v_888),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {335}event RecvMsg(me_756,them_755,stage_d,plaintext_d_892,valid_893);
        {336}insert statestore(me_756,them_755,statepack_e(hs_890))
    ) | (
        {338}!
        {356}get statestore(=me_756,=them_755,statepack_e(hs_894: handshakestate)) in
        {339}let v_895: bitstring = catch-fail(handshakestateunpack(hs_894)) in
        {340}let v_896: bitstring = catch-fail((empty,empty,empty)) in
        {341}let v_897: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_895))) in
        {342}let v_898: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_897))) in
        {343}let v_899: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_898),2-proj-2-tuple(v_898),3-proj-3-tuple(v_897),msg_e(me_756,them_755))) in
        {344}let v_900: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_897))) in
        {345}let v_901: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_898))) && success?(1-proj-3-tuple(v_897))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then cipherstatepack(1-proj-2-tuple(v_900),increment_nonce(2-proj-2-tuple(v_898))) else fail-any) else fail-any)) in
        {346}let v_902: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_897)) && success?(1-proj-3-tuple(v_897))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then (if not-caught-fail(v_899) then (if not-caught-fail(v_901) then (v_901,v_899) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {347}let v_903: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_902),2-proj-3-tuple(v_897),3-proj-3-tuple(v_897)))) in
        {348}let v_904: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_902)) && success?(symmetricstatepack(1-proj-2-tuple(v_902),2-proj-3-tuple(v_897),3-proj-3-tuple(v_897)))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then symmetricstatepack(1-proj-3-tuple(v_903),2-proj-3-tuple(v_903),hash(3-proj-3-tuple(v_903),2-proj-2-tuple(v_902))) else fail-any) else fail-any)) in
        {349}let v_905: bitstring = catch-fail((if success?(1-proj-7-tuple(v_895)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then (if not-caught-fail(v_904) then (v_904,2-proj-2-tuple(v_902)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {350}let v_906: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_905),2-proj-7-tuple(v_895),3-proj-7-tuple(v_895),4-proj-7-tuple(v_895),5-proj-7-tuple(v_895),6-proj-7-tuple(v_895),7-proj-7-tuple(v_895))) in
        {351}let v_907: bitstring = catch-fail(concat3(1-proj-3-tuple(v_896),2-proj-3-tuple(v_896),2-proj-2-tuple(v_905))) in
        {352}let (hs_908: handshakestate,re_909: key,message_e_910: bitstring) = (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-7-tuple(v_895))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-2-tuple(v_905))))) then (if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (v_906,5-proj-7-tuple(v_895),v_907) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {353}event SendMsg(me_756,them_755,stage_e,msg_e(me_756,them_755),true);
        {354}insert statestore(me_756,them_755,statepack_f(hs_908));
        {355}out(pub, message_e_910)
    ) | (
        {357}!
        {385}get statestore(=me_756,=them_755,statepack_f(hs_911: handshakestate)) in
        {358}in(pub, message_f_912: bitstring);
        {359}let v_913: bitstring = catch-fail(handshakestateunpack(hs_911)) in
        {360}let v_914: bitstring = catch-fail(deconcat3(message_f_912)) in
        {361}let v_915: bool = catch-fail(true) in
        {362}let v_916: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_913))) in
        {363}let v_917: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_916))) in
        {364}let v_918: aead = catch-fail(decrypt(1-proj-2-tuple(v_917),2-proj-2-tuple(v_917),3-proj-3-tuple(v_916),3-proj-3-tuple(v_914))) in
        {365}let v_919: bitstring = catch-fail(aeadunpack(v_918)) in
        {366}let v_920: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_916))) in
        {367}let v_921: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_917))) && success?(1-proj-3-tuple(v_916))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then cipherstatepack(1-proj-2-tuple(v_920),increment_nonce(2-proj-2-tuple(v_917))) else fail-any) else fail-any)) in
        {368}let v_922: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_914)) && (success?(3-proj-3-tuple(v_916)) && success?(1-proj-3-tuple(v_916)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then (if not-caught-fail(v_918) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if not-caught-fail(v_921) then (v_921,3-proj-3-tuple(v_919),1-proj-3-tuple(v_919)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_923: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_922),2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)))) in
        {370}let v_924: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_914)) && success?(symmetricstatepack(1-proj-3-tuple(v_922),2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then symmetricstatepack(1-proj-3-tuple(v_923),2-proj-3-tuple(v_923),hash(3-proj-3-tuple(v_923),3-proj-3-tuple(v_914))) else fail-any) else fail-any)) in
        {371}let v_925: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_914)) && success?(1-proj-7-tuple(v_913))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if not-caught-fail(v_924) then (v_924,2-proj-3-tuple(v_922),3-proj-3-tuple(v_922)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_926: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_925),2-proj-7-tuple(v_913),3-proj-7-tuple(v_913),4-proj-7-tuple(v_913),5-proj-7-tuple(v_913),6-proj-7-tuple(v_913),7-proj-7-tuple(v_913))) in
        {373}let v_927: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_925))) in
        {374}let v_928: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_927),zero)) in
        {375}let v_929: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_927),zero)) in
        {376}let v_930: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_927),zero)) in
        {377}let v_931: bitstring = catch-fail((if success?(2-proj-3-tuple(v_927)) then (if not-caught-fail(v_928) then (if not-caught-fail(v_929) then (if not-caught-fail(v_930) then (v_928,v_929,v_930) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {378}let v_932: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_931)) then cipherstatepack(1-proj-3-tuple(v_931),minnonce) else fail-any)) in
        {379}let v_933: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_931)) then cipherstatepack(2-proj-3-tuple(v_931),minnonce) else fail-any)) in
        {380}let v_934: bitstring = catch-fail((if success?(1-proj-3-tuple(v_925)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_933) then (1-proj-3-tuple(v_925),v_932,v_933) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let (hs_935: handshakestate,re_936: key,plaintext_f_937: bitstring,valid_938: bool,cs1_939: cipherstate,cs2_940: cipherstate) = (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-7-tuple(v_913))))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (if not-caught-fail(v_915) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if (v_915 && 3-proj-3-tuple(v_925)) then (if not-caught-fail(v_926) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (v_926,getpublickey(3-proj-7-tuple(v_913)),2-proj-3-tuple(v_925),true,2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {382}event RecvMsg(me_756,them_755,stage_f,plaintext_f_937,valid_938);
        {383}insert statestore(me_756,them_755,statepack_g(hs_935));
        {384}event RecvEnd(valid_938)
    ) | (
        {386}event LeakS(phase0,me_756);
        {387}out(pub, key_s(me_756))
    ) | (
        {388}phase 1;
        {389}event LeakS(phase1,me_756);
        {390}out(pub, key_s(me_756))
    )
) | (
    {391}let them_941: principal = alice in
    {392}let me_942: principal = bob in
    {393}let s_943: keypair = keypairpack(empty,empty) in
    {394}out(pub, getpublickey(s_943));
    (
        {395}let e_944: keypair = keypairpack(empty,empty) in
        {396}let rs_945: key = empty in
        {397}let re_946: key = empty in
        {398}let v_947: bitstring = catch-fail(hash(somename,empty)) in
        {399}let v_948: key = catch-fail(v_947) in
        {400}let v_949: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {401}let v_950: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then symmetricstatepack(v_949,v_948,v_947) else fail-any) else fail-any) else fail-any))) in
        {402}let v_951: symmetricstate = catch-fail((if success?((if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then symmetricstatepack(v_949,v_948,v_947) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then symmetricstatepack(1-proj-3-tuple(v_950),2-proj-3-tuple(v_950),hash(3-proj-3-tuple(v_950),empty)) else fail-any) else fail-any)) in
        {403}let hs_952: handshakestate = (if not-caught-fail(v_951) then handshakestatepack(v_951,s_943,e_944,rs_945,re_946,empty,false) else fail-any) in
        {404}insert statestore(me_942,them_941,statepack_a(hs_952))
    ) | (
        {426}get statestore(=me_942,=them_941,statepack_a(hs_953: handshakestate)) in
        {405}in(pub, message_a_954: bitstring);
        {406}let v_955: bitstring = catch-fail(handshakestateunpack(hs_953)) in
        {407}let v_956: bitstring = catch-fail(deconcat3(message_a_954)) in
        {408}let v_957: bool = catch-fail(true) in
        {409}let v_958: key = catch-fail(1-proj-3-tuple(v_956)) in
        {410}let v_959: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_955))) in
        {411}let v_960: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_955)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then symmetricstatepack(1-proj-3-tuple(v_959),2-proj-3-tuple(v_959),hash(3-proj-3-tuple(v_959),v_958)) else fail-any) else fail-any)) in
        {412}let v_961: bitstring = catch-fail(symmetricstateunpack(v_960)) in
        {413}let v_962: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_961))) in
        {414}let v_963: aead = catch-fail(decrypt(1-proj-2-tuple(v_962),2-proj-2-tuple(v_962),3-proj-3-tuple(v_961),3-proj-3-tuple(v_956))) in
        {415}let v_964: bitstring = catch-fail(aeadunpack(v_963)) in
        {416}let v_965: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_961))) in
        {417}let v_966: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_962))) && success?(1-proj-3-tuple(v_961))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then cipherstatepack(1-proj-2-tuple(v_965),increment_nonce(2-proj-2-tuple(v_962))) else fail-any) else fail-any)) in
        {418}let v_967: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_956)) && (success?(3-proj-3-tuple(v_961)) && success?(1-proj-3-tuple(v_961)))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then (if not-caught-fail(v_963) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if not-caught-fail(v_966) then (v_966,3-proj-3-tuple(v_964),1-proj-3-tuple(v_964)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {419}let v_968: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_967),2-proj-3-tuple(v_961),3-proj-3-tuple(v_961)))) in
        {420}let v_969: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_956)) && success?(symmetricstatepack(1-proj-3-tuple(v_967),2-proj-3-tuple(v_961),3-proj-3-tuple(v_961)))) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then symmetricstatepack(1-proj-3-tuple(v_968),2-proj-3-tuple(v_968),hash(3-proj-3-tuple(v_968),3-proj-3-tuple(v_956))) else fail-any) else fail-any)) in
        {421}let v_970: bitstring = catch-fail((if success?(3-proj-3-tuple(v_956)) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then (if not-caught-fail(v_969) then (v_969,2-proj-3-tuple(v_967),3-proj-3-tuple(v_967)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {422}let v_971: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_970),2-proj-7-tuple(v_955),3-proj-7-tuple(v_955),4-proj-7-tuple(v_955),v_958,6-proj-7-tuple(v_955),7-proj-7-tuple(v_955))) in
        {423}let (hs_972: handshakestate,re_973: key,plaintext_a: bitstring,valid_974: bool) = (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-7-tuple(v_955))))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then (if not-caught-fail(v_957) then (if not-caught-fail(v_958) then (if not-caught-fail(v_960) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then (if (v_957 && 3-proj-3-tuple(v_970)) then (if not-caught-fail(v_971) then (v_971,getpublickey(3-proj-7-tuple(v_955)),2-proj-3-tuple(v_970),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {424}event RecvMsg(me_942,them_941,stage_a,plaintext_a,valid_974);
        {425}insert statestore(me_942,them_941,statepack_b(hs_972))
    ) | (
        {475}get statestore(=me_942,=them_941,statepack_b(hs_975: handshakestate)) in
        {427}let v_976: bitstring = catch-fail(handshakestateunpack(hs_975)) in
        {428}let v_977: bitstring = catch-fail((empty,empty,empty)) in
        {429}new key_e_978[me_942,them_941]: key;
        {430}let v_979: key = catch-fail(dhexp(key_e_978,g)) in
        {431}let v_980: keypair = catch-fail((if not-caught-fail(v_979) then keypairpack(v_979,key_e_978) else fail-any)) in
        {432}let v_981: bitstring = catch-fail(getpublickey(v_980)) in
        {433}let v_982: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_976))) in
        {434}let v_983: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_976)) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then symmetricstatepack(1-proj-3-tuple(v_982),2-proj-3-tuple(v_982),hash(3-proj-3-tuple(v_982),v_981)) else fail-any) else fail-any)) in
        {435}let v_984: bitstring = catch-fail(keypairunpack(v_980)) in
        {436}let v_985: bitstring = catch-fail(symmetricstateunpack(v_983)) in
        {437}let v_986: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_985),(if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),5-proj-7-tuple(v_976)) else fail-any) else fail-any))) in
        {438}let v_987: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_985),(if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),5-proj-7-tuple(v_976)) else fail-any) else fail-any))) in
        {439}let v_988: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_985),(if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),5-proj-7-tuple(v_976)) else fail-any) else fail-any))) in
        {440}let v_989: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),5-proj-7-tuple(v_976)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_985))) then (if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (if not-caught-fail(v_988) then (v_986,v_987,v_988) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {441}let v_990: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then dhexp(2-proj-2-tuple(v_984),5-proj-7-tuple(v_976)) else fail-any) else fail-any)) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-3-tuple(v_985))))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_989)) then cipherstatepack(2-proj-3-tuple(v_989),minnonce) else fail-any),1-proj-3-tuple(v_989),3-proj-3-tuple(v_985)) else fail-any) else fail-any) else fail-any)) in
        {442}let v_991: key = catch-fail(dhexp(key_s(me_942),g)) in
        {443}let v_992: keypair = catch-fail((if not-caught-fail(v_991) then keypairpack(v_991,key_s(me_942)) else fail-any)) in
        {444}let v_993: bitstring = catch-fail(symmetricstateunpack(v_990)) in
        {445}let v_994: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_993))) in
        {446}let v_995: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_994),2-proj-2-tuple(v_994),3-proj-3-tuple(v_993),getpublickey(v_992))) in
        {447}let v_996: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_993))) in
        {448}let v_997: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_994))) && success?(1-proj-3-tuple(v_993))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then cipherstatepack(1-proj-2-tuple(v_996),increment_nonce(2-proj-2-tuple(v_994))) else fail-any) else fail-any)) in
        {449}let v_998: bitstring = catch-fail((if (success?(getpublickey(v_992)) && (success?(3-proj-3-tuple(v_993)) && success?(1-proj-3-tuple(v_993)))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then (if not-caught-fail(v_995) then (if not-caught-fail(v_997) then (v_997,v_995) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_999: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_998),2-proj-3-tuple(v_993),3-proj-3-tuple(v_993)))) in
        {451}let v_1000: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_998)) && success?(symmetricstatepack(1-proj-2-tuple(v_998),2-proj-3-tuple(v_993),3-proj-3-tuple(v_993)))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then symmetricstatepack(1-proj-3-tuple(v_999),2-proj-3-tuple(v_999),hash(3-proj-3-tuple(v_999),2-proj-2-tuple(v_998))) else fail-any) else fail-any)) in
        {452}let v_1001: bitstring = catch-fail((if success?(getpublickey(v_992)) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-2-tuple(v_998))))) then (if not-caught-fail(v_1000) then (v_1000,2-proj-2-tuple(v_998)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {453}let v_1002: bitstring = catch-fail(keypairunpack(v_992)) in
        {454}let v_1003: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1001))) in
        {455}let v_1004: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1003),(if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),5-proj-7-tuple(v_976)) else fail-any) else fail-any))) in
        {456}let v_1005: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1003),(if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),5-proj-7-tuple(v_976)) else fail-any) else fail-any))) in
        {457}let v_1006: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1003),(if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),5-proj-7-tuple(v_976)) else fail-any) else fail-any))) in
        {458}let v_1007: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),5-proj-7-tuple(v_976)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1003))) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1006) then (v_1004,v_1005,v_1006) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_1008: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_976)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),5-proj-7-tuple(v_976)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1001))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1007)) then cipherstatepack(2-proj-3-tuple(v_1007),minnonce) else fail-any),1-proj-3-tuple(v_1007),3-proj-3-tuple(v_1003)) else fail-any) else fail-any) else fail-any)) in
        {460}let v_1009: bitstring = catch-fail(symmetricstateunpack(v_1008)) in
        {461}let v_1010: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1009))) in
        {462}let v_1011: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1010),2-proj-2-tuple(v_1010),3-proj-3-tuple(v_1009),msg_b(me_942,them_941))) in
        {463}let v_1012: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1009))) in
        {464}let v_1013: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1010))) && success?(1-proj-3-tuple(v_1009))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then cipherstatepack(1-proj-2-tuple(v_1012),increment_nonce(2-proj-2-tuple(v_1010))) else fail-any) else fail-any)) in
        {465}let v_1014: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1009)) && success?(1-proj-3-tuple(v_1009))) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then (if not-caught-fail(v_1011) then (if not-caught-fail(v_1013) then (v_1013,v_1011) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {466}let v_1015: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1014),2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)))) in
        {467}let v_1016: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1014)) && success?(symmetricstatepack(1-proj-2-tuple(v_1014),2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then symmetricstatepack(1-proj-3-tuple(v_1015),2-proj-3-tuple(v_1015),hash(3-proj-3-tuple(v_1015),2-proj-2-tuple(v_1014))) else fail-any) else fail-any)) in
        {468}let v_1017: bitstring = catch-fail((if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then (if not-caught-fail(v_1016) then (v_1016,2-proj-2-tuple(v_1014)) else fail-any) else fail-any) else fail-any)) in
        {469}let v_1018: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1017),v_992,v_980,4-proj-7-tuple(v_976),5-proj-7-tuple(v_976),6-proj-7-tuple(v_976),7-proj-7-tuple(v_976))) in
        {470}let v_1019: bitstring = catch-fail(concat3(v_981,2-proj-2-tuple(v_1001),2-proj-2-tuple(v_1017))) in
        {471}let (hs_1020: handshakestate,re_1021: key,message_b_1022: bitstring) = (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-7-tuple(v_976))))) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (if not-caught-fail(v_983) then (if not-caught-fail(v_990) then (if not-caught-fail(v_992) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then (if not-caught-fail(v_1008) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-2-tuple(v_1017))))) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then (v_1018,5-proj-7-tuple(v_976),v_1019) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {472}event SendMsg(me_942,them_941,stage_b,msg_b(me_942,them_941),true);
        {473}insert statestore(me_942,them_941,statepack_c(hs_1020));
        {474}out(pub, message_b_1022)
    ) | (
        {506}get statestore(=me_942,=them_941,statepack_c(hs_1023: handshakestate)) in
        {476}in(pub, message_c_1024: bitstring);
        {477}let v_1025: bitstring = catch-fail(handshakestateunpack(hs_1023)) in
        {478}let v_1026: bitstring = catch-fail(deconcat3(message_c_1024)) in
        {479}let v_1027: bool = catch-fail(true) in
        {480}let v_1028: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1025))) in
        {481}let v_1029: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1028))) in
        {482}let v_1030: aead = catch-fail(decrypt(1-proj-2-tuple(v_1029),2-proj-2-tuple(v_1029),3-proj-3-tuple(v_1028),2-proj-3-tuple(v_1026))) in
        {483}let v_1031: bitstring = catch-fail(aeadunpack(v_1030)) in
        {484}let v_1032: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1028))) in
        {485}let v_1033: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1029))) && success?(1-proj-3-tuple(v_1028))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then cipherstatepack(1-proj-2-tuple(v_1032),increment_nonce(2-proj-2-tuple(v_1029))) else fail-any) else fail-any)) in
        {486}let v_1034: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1026)) && (success?(3-proj-3-tuple(v_1028)) && success?(1-proj-3-tuple(v_1028)))) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-2-tuple(v_1029))))) then (if not-caught-fail(v_1030) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then (if not-caught-fail(v_1033) then (v_1033,3-proj-3-tuple(v_1031),1-proj-3-tuple(v_1031)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {487}let v_1035: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1034),2-proj-3-tuple(v_1028),3-proj-3-tuple(v_1028)))) in
        {488}let v_1036: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1026)) && success?(symmetricstatepack(1-proj-3-tuple(v_1034),2-proj-3-tuple(v_1028),3-proj-3-tuple(v_1028)))) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then symmetricstatepack(1-proj-3-tuple(v_1035),2-proj-3-tuple(v_1035),hash(3-proj-3-tuple(v_1035),2-proj-3-tuple(v_1026))) else fail-any) else fail-any)) in
        {489}let v_1037: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1026)) && success?(1-proj-7-tuple(v_1025))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-3-tuple(v_1034))))) then (if not-caught-fail(v_1036) then (v_1036,2-proj-3-tuple(v_1034),3-proj-3-tuple(v_1034)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {490}let v_1038: key = catch-fail(2-proj-3-tuple(v_1037)) in
        {491}let v_1039: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1037))) in
        {492}let v_1040: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {493}let v_1041: aead = catch-fail(decrypt(1-proj-2-tuple(v_1040),2-proj-2-tuple(v_1040),3-proj-3-tuple(v_1039),3-proj-3-tuple(v_1026))) in
        {494}let v_1042: bitstring = catch-fail(aeadunpack(v_1041)) in
        {495}let v_1043: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {496}let v_1044: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1040))) && success?(1-proj-3-tuple(v_1039))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then cipherstatepack(1-proj-2-tuple(v_1043),increment_nonce(2-proj-2-tuple(v_1040))) else fail-any) else fail-any)) in
        {497}let v_1045: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1026)) && (success?(3-proj-3-tuple(v_1039)) && success?(1-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then (if not-caught-fail(v_1041) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then (if not-caught-fail(v_1044) then (v_1044,3-proj-3-tuple(v_1042),1-proj-3-tuple(v_1042)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_1046: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) in
        {499}let v_1047: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1026)) && success?(symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then symmetricstatepack(1-proj-3-tuple(v_1046),2-proj-3-tuple(v_1046),hash(3-proj-3-tuple(v_1046),3-proj-3-tuple(v_1026))) else fail-any) else fail-any)) in
        {500}let v_1048: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1026)) && success?(1-proj-3-tuple(v_1037))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then (if not-caught-fail(v_1047) then (v_1047,2-proj-3-tuple(v_1045),3-proj-3-tuple(v_1045)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_1049: key = catch-fail(dhexp(key_s(them_941),g)) in
        {502}let v_1050: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1048),2-proj-7-tuple(v_1025),3-proj-7-tuple(v_1025),v_1038,5-proj-7-tuple(v_1025),6-proj-7-tuple(v_1025),7-proj-7-tuple(v_1025))) in
        {503}let (hs_1051: handshakestate,re_1052: key,plaintext_c: bitstring,valid_1053: bool) = (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-7-tuple(v_1025))))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then (if not-caught-fail(v_1027) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then (if not-caught-fail(v_1038) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if ((3-proj-3-tuple(v_1037) && 3-proj-3-tuple(v_1048)) && (v_1038 = getpublickey((if not-caught-fail(v_1049) then keypairpack(v_1049,key_s(them_941)) else fail-any)))) then (if not-caught-fail(v_1050) then (v_1050,getpublickey(3-proj-7-tuple(v_1025)),2-proj-3-tuple(v_1048),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {504}event RecvMsg(me_942,them_941,stage_c,plaintext_c,valid_1053);
        {505}insert statestore(me_942,them_941,statepack_d(hs_1051))
    ) | (
        {531}get statestore(=me_942,=them_941,statepack_d(hs_1054: handshakestate)) in
        {507}let v_1055: bitstring = catch-fail(handshakestateunpack(hs_1054)) in
        {508}let v_1056: bitstring = catch-fail((empty,empty,empty)) in
        {509}let v_1057: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1055))) in
        {510}let v_1058: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1055))) in
        {511}let v_1059: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1058),(if (success?(4-proj-7-tuple(v_1055)) && success?(3-proj-7-tuple(v_1055))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),4-proj-7-tuple(v_1055)) else fail-any) else fail-any))) in
        {512}let v_1060: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1058),(if (success?(4-proj-7-tuple(v_1055)) && success?(3-proj-7-tuple(v_1055))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),4-proj-7-tuple(v_1055)) else fail-any) else fail-any))) in
        {513}let v_1061: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1058),(if (success?(4-proj-7-tuple(v_1055)) && success?(3-proj-7-tuple(v_1055))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),4-proj-7-tuple(v_1055)) else fail-any) else fail-any))) in
        {514}let v_1062: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1055)) && success?(3-proj-7-tuple(v_1055))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),4-proj-7-tuple(v_1055)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1058))) then (if not-caught-fail(v_1059) then (if not-caught-fail(v_1060) then (if not-caught-fail(v_1061) then (v_1059,v_1060,v_1061) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {515}let v_1063: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1055)) && success?(3-proj-7-tuple(v_1055))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),4-proj-7-tuple(v_1055)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1055))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-3-tuple(v_1062))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1062)) then cipherstatepack(2-proj-3-tuple(v_1062),minnonce) else fail-any),1-proj-3-tuple(v_1062),3-proj-3-tuple(v_1058)) else fail-any) else fail-any) else fail-any)) in
        {516}let v_1064: bitstring = catch-fail(symmetricstateunpack(v_1063)) in
        {517}let v_1065: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1064))) in
        {518}let v_1066: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1065),2-proj-2-tuple(v_1065),3-proj-3-tuple(v_1064),msg_d(me_942,them_941))) in
        {519}let v_1067: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1064))) in
        {520}let v_1068: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1065))) && success?(1-proj-3-tuple(v_1064))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then cipherstatepack(1-proj-2-tuple(v_1067),increment_nonce(2-proj-2-tuple(v_1065))) else fail-any) else fail-any)) in
        {521}let v_1069: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1064)) && success?(1-proj-3-tuple(v_1064))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-2-tuple(v_1065))))) then (if not-caught-fail(v_1066) then (if not-caught-fail(v_1068) then (v_1068,v_1066) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {522}let v_1070: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1069),2-proj-3-tuple(v_1064),3-proj-3-tuple(v_1064)))) in
        {523}let v_1071: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1069)) && success?(symmetricstatepack(1-proj-2-tuple(v_1069),2-proj-3-tuple(v_1064),3-proj-3-tuple(v_1064)))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then symmetricstatepack(1-proj-3-tuple(v_1070),2-proj-3-tuple(v_1070),hash(3-proj-3-tuple(v_1070),2-proj-2-tuple(v_1069))) else fail-any) else fail-any)) in
        {524}let v_1072: bitstring = catch-fail((if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then (if not-caught-fail(v_1071) then (v_1071,2-proj-2-tuple(v_1069)) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1073: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1072),2-proj-7-tuple(v_1055),3-proj-7-tuple(v_1055),4-proj-7-tuple(v_1055),5-proj-7-tuple(v_1055),6-proj-7-tuple(v_1055),7-proj-7-tuple(v_1055))) in
        {526}let v_1074: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1056),2-proj-2-tuple(v_1072))) in
        {527}let (hs_1075: handshakestate,re_1076: key,message_d_1077: bitstring) = (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-7-tuple(v_1055))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if not-caught-fail(v_1063) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-2-tuple(v_1072))))) then (if not-caught-fail(v_1073) then (if not-caught-fail(v_1074) then (v_1073,5-proj-7-tuple(v_1055),v_1074) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {528}event SendMsg(me_942,them_941,stage_d,msg_d(me_942,them_941),true);
        {529}insert statestore(me_942,them_941,statepack_e(hs_1075));
        {530}out(pub, message_d_1077)
    ) | (
        {532}!
        {551}get statestore(=me_942,=them_941,statepack_e(hs_1078: handshakestate)) in
        {533}in(pub, message_e_1079: bitstring);
        {534}let v_1080: bitstring = catch-fail(handshakestateunpack(hs_1078)) in
        {535}let v_1081: bitstring = catch-fail(deconcat3(message_e_1079)) in
        {536}let v_1082: bool = catch-fail(true) in
        {537}let v_1083: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1080))) in
        {538}let v_1084: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1083))) in
        {539}let v_1085: aead = catch-fail(decrypt(1-proj-2-tuple(v_1084),2-proj-2-tuple(v_1084),3-proj-3-tuple(v_1083),3-proj-3-tuple(v_1081))) in
        {540}let v_1086: bitstring = catch-fail(aeadunpack(v_1085)) in
        {541}let v_1087: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1083))) in
        {542}let v_1088: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1084))) && success?(1-proj-3-tuple(v_1083))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-2-tuple(v_1087))))) then cipherstatepack(1-proj-2-tuple(v_1087),increment_nonce(2-proj-2-tuple(v_1084))) else fail-any) else fail-any)) in
        {543}let v_1089: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1081)) && (success?(3-proj-3-tuple(v_1083)) && success?(1-proj-3-tuple(v_1083)))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-2-tuple(v_1084))))) then (if not-caught-fail(v_1085) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if not-caught-fail(v_1088) then (v_1088,3-proj-3-tuple(v_1086),1-proj-3-tuple(v_1086)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {544}let v_1090: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1089),2-proj-3-tuple(v_1083),3-proj-3-tuple(v_1083)))) in
        {545}let v_1091: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1081)) && success?(symmetricstatepack(1-proj-3-tuple(v_1089),2-proj-3-tuple(v_1083),3-proj-3-tuple(v_1083)))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then symmetricstatepack(1-proj-3-tuple(v_1090),2-proj-3-tuple(v_1090),hash(3-proj-3-tuple(v_1090),3-proj-3-tuple(v_1081))) else fail-any) else fail-any)) in
        {546}let v_1092: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1081)) && success?(1-proj-7-tuple(v_1080))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-3-tuple(v_1089))))) then (if not-caught-fail(v_1091) then (v_1091,2-proj-3-tuple(v_1089),3-proj-3-tuple(v_1089)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {547}let v_1093: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1092),2-proj-7-tuple(v_1080),3-proj-7-tuple(v_1080),4-proj-7-tuple(v_1080),5-proj-7-tuple(v_1080),6-proj-7-tuple(v_1080),7-proj-7-tuple(v_1080))) in
        {548}let (hs_1094: handshakestate,re_1095: key,plaintext_e: bitstring,valid_1096: bool) = (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-7-tuple(v_1080))))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-3-tuple(v_1081))))) then (if not-caught-fail(v_1082) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then (if (v_1082 && 3-proj-3-tuple(v_1092)) then (if not-caught-fail(v_1093) then (v_1093,getpublickey(3-proj-7-tuple(v_1080)),2-proj-3-tuple(v_1092),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {549}event RecvMsg(me_942,them_941,stage_e,plaintext_e,valid_1096);
        {550}insert statestore(me_942,them_941,statepack_f(hs_1094))
    ) | (
        {552}!
        {578}get statestore(=me_942,=them_941,statepack_f(hs_1097: handshakestate)) in
        {553}let v_1098: bitstring = catch-fail(handshakestateunpack(hs_1097)) in
        {554}let v_1099: bitstring = catch-fail((empty,empty,empty)) in
        {555}let v_1100: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1098))) in
        {556}let v_1101: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1100))) in
        {557}let v_1102: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1101),2-proj-2-tuple(v_1101),3-proj-3-tuple(v_1100),msg_f(me_942,them_941))) in
        {558}let v_1103: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1100))) in
        {559}let v_1104: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1101))) && success?(1-proj-3-tuple(v_1100))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-2-tuple(v_1103))))) then cipherstatepack(1-proj-2-tuple(v_1103),increment_nonce(2-proj-2-tuple(v_1101))) else fail-any) else fail-any)) in
        {560}let v_1105: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1100)) && success?(1-proj-3-tuple(v_1100))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then (if not-caught-fail(v_1102) then (if not-caught-fail(v_1104) then (v_1104,v_1102) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1106: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1105),2-proj-3-tuple(v_1100),3-proj-3-tuple(v_1100)))) in
        {562}let v_1107: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1105)) && success?(symmetricstatepack(1-proj-2-tuple(v_1105),2-proj-3-tuple(v_1100),3-proj-3-tuple(v_1100)))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then symmetricstatepack(1-proj-3-tuple(v_1106),2-proj-3-tuple(v_1106),hash(3-proj-3-tuple(v_1106),2-proj-2-tuple(v_1105))) else fail-any) else fail-any)) in
        {563}let v_1108: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1098)) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-3-tuple(v_1100))))) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then (if not-caught-fail(v_1107) then (v_1107,2-proj-2-tuple(v_1105)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {564}let v_1109: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1108),2-proj-7-tuple(v_1098),3-proj-7-tuple(v_1098),4-proj-7-tuple(v_1098),5-proj-7-tuple(v_1098),6-proj-7-tuple(v_1098),7-proj-7-tuple(v_1098))) in
        {565}let v_1110: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1099),2-proj-3-tuple(v_1099),2-proj-2-tuple(v_1108))) in
        {566}let v_1111: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1108))) in
        {567}let v_1112: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1111),zero)) in
        {568}let v_1113: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1111),zero)) in
        {569}let v_1114: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1111),zero)) in
        {570}let v_1115: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1111)) then (if not-caught-fail(v_1112) then (if not-caught-fail(v_1113) then (if not-caught-fail(v_1114) then (v_1112,v_1113,v_1114) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {571}let v_1116: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1115)) then cipherstatepack(1-proj-3-tuple(v_1115),minnonce) else fail-any)) in
        {572}let v_1117: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1115)) then cipherstatepack(2-proj-3-tuple(v_1115),minnonce) else fail-any)) in
        {573}let v_1118: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1108)) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then (if (not-caught-fail(v_1115) && success?(is-true(success?(1-proj-3-tuple(v_1115))))) then (if not-caught-fail(v_1116) then (if not-caught-fail(v_1117) then (1-proj-2-tuple(v_1108),v_1116,v_1117) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {574}let (hs_1119: handshakestate,re_1120: key,message_f_1121: bitstring,cs1_1122: cipherstate,cs2_1123: cipherstate) = (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-7-tuple(v_1098))))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-3-tuple(v_1099))))) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then (if not-caught-fail(v_1109) then (if not-caught-fail(v_1110) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-3-tuple(v_1118))))) then (v_1109,5-proj-7-tuple(v_1098),v_1110,2-proj-3-tuple(v_1118),3-proj-3-tuple(v_1118)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {575}event SendMsg(me_942,them_941,stage_f,msg_f(me_942,them_941),true);
        {576}insert statestore(me_942,them_941,statepack_g(hs_1119));
        {577}out(pub, message_f_1121)
    ) | (
        {579}event LeakS(phase0,me_942);
        {580}out(pub, key_s(me_942))
    ) | (
        {581}phase 1;
        {582}event LeakS(phase1,me_942);
        {583}out(pub, key_s(me_942))
    )
) | (
    {584}let them_1124: principal = charlie in
    {585}let me_1125: principal = bob in
    {586}let s_1126: keypair = keypairpack(empty,empty) in
    {587}out(pub, getpublickey(s_1126));
    (
        {588}let e_1127: keypair = keypairpack(empty,empty) in
        {589}let rs_1128: key = empty in
        {590}let re_1129: key = empty in
        {591}let v_1130: bitstring = catch-fail(hash(somename,empty)) in
        {592}let v_1131: key = catch-fail(v_1130) in
        {593}let v_1132: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {594}let v_1133: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1130) then (if not-caught-fail(v_1131) then (if not-caught-fail(v_1132) then symmetricstatepack(v_1132,v_1131,v_1130) else fail-any) else fail-any) else fail-any))) in
        {595}let v_1134: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1130) then (if not-caught-fail(v_1131) then (if not-caught-fail(v_1132) then symmetricstatepack(v_1132,v_1131,v_1130) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-3-tuple(v_1133))))) then symmetricstatepack(1-proj-3-tuple(v_1133),2-proj-3-tuple(v_1133),hash(3-proj-3-tuple(v_1133),empty)) else fail-any) else fail-any)) in
        {596}let hs_1135: handshakestate = (if not-caught-fail(v_1134) then handshakestatepack(v_1134,s_1126,e_1127,rs_1128,re_1129,empty,false) else fail-any) in
        {597}insert statestore(me_1125,them_1124,statepack_a(hs_1135))
    ) | (
        {619}get statestore(=me_1125,=them_1124,statepack_a(hs_1136: handshakestate)) in
        {598}in(pub, message_a_1137: bitstring);
        {599}let v_1138: bitstring = catch-fail(handshakestateunpack(hs_1136)) in
        {600}let v_1139: bitstring = catch-fail(deconcat3(message_a_1137)) in
        {601}let v_1140: bool = catch-fail(true) in
        {602}let v_1141: key = catch-fail(1-proj-3-tuple(v_1139)) in
        {603}let v_1142: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1138))) in
        {604}let v_1143: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1138)) then (if (not-caught-fail(v_1142) && success?(is-true(success?(1-proj-3-tuple(v_1142))))) then symmetricstatepack(1-proj-3-tuple(v_1142),2-proj-3-tuple(v_1142),hash(3-proj-3-tuple(v_1142),v_1141)) else fail-any) else fail-any)) in
        {605}let v_1144: bitstring = catch-fail(symmetricstateunpack(v_1143)) in
        {606}let v_1145: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1144))) in
        {607}let v_1146: aead = catch-fail(decrypt(1-proj-2-tuple(v_1145),2-proj-2-tuple(v_1145),3-proj-3-tuple(v_1144),3-proj-3-tuple(v_1139))) in
        {608}let v_1147: bitstring = catch-fail(aeadunpack(v_1146)) in
        {609}let v_1148: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1144))) in
        {610}let v_1149: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1145))) && success?(1-proj-3-tuple(v_1144))) then (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-2-tuple(v_1148))))) then cipherstatepack(1-proj-2-tuple(v_1148),increment_nonce(2-proj-2-tuple(v_1145))) else fail-any) else fail-any)) in
        {611}let v_1150: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1139)) && (success?(3-proj-3-tuple(v_1144)) && success?(1-proj-3-tuple(v_1144)))) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-2-tuple(v_1145))))) then (if not-caught-fail(v_1146) then (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-3-tuple(v_1147))))) then (if not-caught-fail(v_1149) then (v_1149,3-proj-3-tuple(v_1147),1-proj-3-tuple(v_1147)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {612}let v_1151: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1150),2-proj-3-tuple(v_1144),3-proj-3-tuple(v_1144)))) in
        {613}let v_1152: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1139)) && success?(symmetricstatepack(1-proj-3-tuple(v_1150),2-proj-3-tuple(v_1144),3-proj-3-tuple(v_1144)))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-3-tuple(v_1151))))) then symmetricstatepack(1-proj-3-tuple(v_1151),2-proj-3-tuple(v_1151),hash(3-proj-3-tuple(v_1151),3-proj-3-tuple(v_1139))) else fail-any) else fail-any)) in
        {614}let v_1153: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1139)) then (if (not-caught-fail(v_1144) && success?(is-true(success?(1-proj-3-tuple(v_1144))))) then (if (not-caught-fail(v_1150) && success?(is-true(success?(1-proj-3-tuple(v_1150))))) then (if not-caught-fail(v_1152) then (v_1152,2-proj-3-tuple(v_1150),3-proj-3-tuple(v_1150)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {615}let v_1154: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1153),2-proj-7-tuple(v_1138),3-proj-7-tuple(v_1138),4-proj-7-tuple(v_1138),v_1141,6-proj-7-tuple(v_1138),7-proj-7-tuple(v_1138))) in
        {616}let (hs_1155: handshakestate,re_1156: key,plaintext_a_1157: bitstring,valid_1158: bool) = (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-7-tuple(v_1138))))) then (if (not-caught-fail(v_1139) && success?(is-true(success?(1-proj-3-tuple(v_1139))))) then (if not-caught-fail(v_1140) then (if not-caught-fail(v_1141) then (if not-caught-fail(v_1143) then (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-3-tuple(v_1153))))) then (if (v_1140 && 3-proj-3-tuple(v_1153)) then (if not-caught-fail(v_1154) then (v_1154,getpublickey(3-proj-7-tuple(v_1138)),2-proj-3-tuple(v_1153),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {617}event RecvMsg(me_1125,them_1124,stage_a,plaintext_a_1157,valid_1158);
        {618}insert statestore(me_1125,them_1124,statepack_b(hs_1155))
    ) | (
        {668}get statestore(=me_1125,=them_1124,statepack_b(hs_1159: handshakestate)) in
        {620}let v_1160: bitstring = catch-fail(handshakestateunpack(hs_1159)) in
        {621}let v_1161: bitstring = catch-fail((empty,empty,empty)) in
        {622}new key_e_1162[me_1125,them_1124]: key;
        {623}let v_1163: key = catch-fail(dhexp(key_e_1162,g)) in
        {624}let v_1164: keypair = catch-fail((if not-caught-fail(v_1163) then keypairpack(v_1163,key_e_1162) else fail-any)) in
        {625}let v_1165: bitstring = catch-fail(getpublickey(v_1164)) in
        {626}let v_1166: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1160))) in
        {627}let v_1167: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1166) && success?(is-true(success?(1-proj-3-tuple(v_1166))))) then symmetricstatepack(1-proj-3-tuple(v_1166),2-proj-3-tuple(v_1166),hash(3-proj-3-tuple(v_1166),v_1165)) else fail-any) else fail-any)) in
        {628}let v_1168: bitstring = catch-fail(keypairunpack(v_1164)) in
        {629}let v_1169: bitstring = catch-fail(symmetricstateunpack(v_1167)) in
        {630}let v_1170: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1169),(if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-2-tuple(v_1168))))) then dhexp(2-proj-2-tuple(v_1168),5-proj-7-tuple(v_1160)) else fail-any) else fail-any))) in
        {631}let v_1171: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1169),(if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-2-tuple(v_1168))))) then dhexp(2-proj-2-tuple(v_1168),5-proj-7-tuple(v_1160)) else fail-any) else fail-any))) in
        {632}let v_1172: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1169),(if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-2-tuple(v_1168))))) then dhexp(2-proj-2-tuple(v_1168),5-proj-7-tuple(v_1160)) else fail-any) else fail-any))) in
        {633}let v_1173: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-2-tuple(v_1168))))) then dhexp(2-proj-2-tuple(v_1168),5-proj-7-tuple(v_1160)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1169))) then (if not-caught-fail(v_1170) then (if not-caught-fail(v_1171) then (if not-caught-fail(v_1172) then (v_1170,v_1171,v_1172) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {634}let v_1174: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-2-tuple(v_1168))))) then dhexp(2-proj-2-tuple(v_1168),5-proj-7-tuple(v_1160)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1169) && success?(is-true(success?(1-proj-3-tuple(v_1169))))) then (if (not-caught-fail(v_1173) && success?(is-true(success?(1-proj-3-tuple(v_1173))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1173)) then cipherstatepack(2-proj-3-tuple(v_1173),minnonce) else fail-any),1-proj-3-tuple(v_1173),3-proj-3-tuple(v_1169)) else fail-any) else fail-any) else fail-any)) in
        {635}let v_1175: key = catch-fail(dhexp(key_s(me_1125),g)) in
        {636}let v_1176: keypair = catch-fail((if not-caught-fail(v_1175) then keypairpack(v_1175,key_s(me_1125)) else fail-any)) in
        {637}let v_1177: bitstring = catch-fail(symmetricstateunpack(v_1174)) in
        {638}let v_1178: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1177))) in
        {639}let v_1179: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1178),2-proj-2-tuple(v_1178),3-proj-3-tuple(v_1177),getpublickey(v_1176))) in
        {640}let v_1180: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1177))) in
        {641}let v_1181: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1178))) && success?(1-proj-3-tuple(v_1177))) then (if (not-caught-fail(v_1180) && success?(is-true(success?(1-proj-2-tuple(v_1180))))) then cipherstatepack(1-proj-2-tuple(v_1180),increment_nonce(2-proj-2-tuple(v_1178))) else fail-any) else fail-any)) in
        {642}let v_1182: bitstring = catch-fail((if (success?(getpublickey(v_1176)) && (success?(3-proj-3-tuple(v_1177)) && success?(1-proj-3-tuple(v_1177)))) then (if (not-caught-fail(v_1178) && success?(is-true(success?(1-proj-2-tuple(v_1178))))) then (if not-caught-fail(v_1179) then (if not-caught-fail(v_1181) then (v_1181,v_1179) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {643}let v_1183: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1182),2-proj-3-tuple(v_1177),3-proj-3-tuple(v_1177)))) in
        {644}let v_1184: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1182)) && success?(symmetricstatepack(1-proj-2-tuple(v_1182),2-proj-3-tuple(v_1177),3-proj-3-tuple(v_1177)))) then (if (not-caught-fail(v_1183) && success?(is-true(success?(1-proj-3-tuple(v_1183))))) then symmetricstatepack(1-proj-3-tuple(v_1183),2-proj-3-tuple(v_1183),hash(3-proj-3-tuple(v_1183),2-proj-2-tuple(v_1182))) else fail-any) else fail-any)) in
        {645}let v_1185: bitstring = catch-fail((if success?(getpublickey(v_1176)) then (if (not-caught-fail(v_1177) && success?(is-true(success?(1-proj-3-tuple(v_1177))))) then (if (not-caught-fail(v_1182) && success?(is-true(success?(1-proj-2-tuple(v_1182))))) then (if not-caught-fail(v_1184) then (v_1184,2-proj-2-tuple(v_1182)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {646}let v_1186: bitstring = catch-fail(keypairunpack(v_1176)) in
        {647}let v_1187: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1185))) in
        {648}let v_1188: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1187),(if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1186) && success?(is-true(success?(1-proj-2-tuple(v_1186))))) then dhexp(2-proj-2-tuple(v_1186),5-proj-7-tuple(v_1160)) else fail-any) else fail-any))) in
        {649}let v_1189: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1187),(if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1186) && success?(is-true(success?(1-proj-2-tuple(v_1186))))) then dhexp(2-proj-2-tuple(v_1186),5-proj-7-tuple(v_1160)) else fail-any) else fail-any))) in
        {650}let v_1190: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1187),(if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1186) && success?(is-true(success?(1-proj-2-tuple(v_1186))))) then dhexp(2-proj-2-tuple(v_1186),5-proj-7-tuple(v_1160)) else fail-any) else fail-any))) in
        {651}let v_1191: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1186) && success?(is-true(success?(1-proj-2-tuple(v_1186))))) then dhexp(2-proj-2-tuple(v_1186),5-proj-7-tuple(v_1160)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1187))) then (if not-caught-fail(v_1188) then (if not-caught-fail(v_1189) then (if not-caught-fail(v_1190) then (v_1188,v_1189,v_1190) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {652}let v_1192: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1160)) then (if (not-caught-fail(v_1186) && success?(is-true(success?(1-proj-2-tuple(v_1186))))) then dhexp(2-proj-2-tuple(v_1186),5-proj-7-tuple(v_1160)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1185))) then (if (not-caught-fail(v_1187) && success?(is-true(success?(1-proj-3-tuple(v_1187))))) then (if (not-caught-fail(v_1191) && success?(is-true(success?(1-proj-3-tuple(v_1191))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1191)) then cipherstatepack(2-proj-3-tuple(v_1191),minnonce) else fail-any),1-proj-3-tuple(v_1191),3-proj-3-tuple(v_1187)) else fail-any) else fail-any) else fail-any)) in
        {653}let v_1193: bitstring = catch-fail(symmetricstateunpack(v_1192)) in
        {654}let v_1194: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1193))) in
        {655}let v_1195: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1194),2-proj-2-tuple(v_1194),3-proj-3-tuple(v_1193),msg_b(me_1125,them_1124))) in
        {656}let v_1196: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1193))) in
        {657}let v_1197: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1194))) && success?(1-proj-3-tuple(v_1193))) then (if (not-caught-fail(v_1196) && success?(is-true(success?(1-proj-2-tuple(v_1196))))) then cipherstatepack(1-proj-2-tuple(v_1196),increment_nonce(2-proj-2-tuple(v_1194))) else fail-any) else fail-any)) in
        {658}let v_1198: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1193)) && success?(1-proj-3-tuple(v_1193))) then (if (not-caught-fail(v_1194) && success?(is-true(success?(1-proj-2-tuple(v_1194))))) then (if not-caught-fail(v_1195) then (if not-caught-fail(v_1197) then (v_1197,v_1195) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {659}let v_1199: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1198),2-proj-3-tuple(v_1193),3-proj-3-tuple(v_1193)))) in
        {660}let v_1200: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1198)) && success?(symmetricstatepack(1-proj-2-tuple(v_1198),2-proj-3-tuple(v_1193),3-proj-3-tuple(v_1193)))) then (if (not-caught-fail(v_1199) && success?(is-true(success?(1-proj-3-tuple(v_1199))))) then symmetricstatepack(1-proj-3-tuple(v_1199),2-proj-3-tuple(v_1199),hash(3-proj-3-tuple(v_1199),2-proj-2-tuple(v_1198))) else fail-any) else fail-any)) in
        {661}let v_1201: bitstring = catch-fail((if (not-caught-fail(v_1193) && success?(is-true(success?(1-proj-3-tuple(v_1193))))) then (if (not-caught-fail(v_1198) && success?(is-true(success?(1-proj-2-tuple(v_1198))))) then (if not-caught-fail(v_1200) then (v_1200,2-proj-2-tuple(v_1198)) else fail-any) else fail-any) else fail-any)) in
        {662}let v_1202: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1201),v_1176,v_1164,4-proj-7-tuple(v_1160),5-proj-7-tuple(v_1160),6-proj-7-tuple(v_1160),7-proj-7-tuple(v_1160))) in
        {663}let v_1203: bitstring = catch-fail(concat3(v_1165,2-proj-2-tuple(v_1185),2-proj-2-tuple(v_1201))) in
        {664}let (hs_1204: handshakestate,re_1205: key,message_b_1206: bitstring) = (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-7-tuple(v_1160))))) then (if (not-caught-fail(v_1161) && success?(is-true(success?(1-proj-3-tuple(v_1161))))) then (if not-caught-fail(v_1164) then (if not-caught-fail(v_1165) then (if not-caught-fail(v_1167) then (if not-caught-fail(v_1174) then (if not-caught-fail(v_1176) then (if (not-caught-fail(v_1185) && success?(is-true(success?(1-proj-2-tuple(v_1185))))) then (if not-caught-fail(v_1192) then (if (not-caught-fail(v_1201) && success?(is-true(success?(1-proj-2-tuple(v_1201))))) then (if not-caught-fail(v_1202) then (if not-caught-fail(v_1203) then (v_1202,5-proj-7-tuple(v_1160),v_1203) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {665}event SendMsg(me_1125,them_1124,stage_b,msg_b(me_1125,them_1124),true);
        {666}insert statestore(me_1125,them_1124,statepack_c(hs_1204));
        {667}out(pub, message_b_1206)
    ) | (
        {699}get statestore(=me_1125,=them_1124,statepack_c(hs_1207: handshakestate)) in
        {669}in(pub, message_c_1208: bitstring);
        {670}let v_1209: bitstring = catch-fail(handshakestateunpack(hs_1207)) in
        {671}let v_1210: bitstring = catch-fail(deconcat3(message_c_1208)) in
        {672}let v_1211: bool = catch-fail(true) in
        {673}let v_1212: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1209))) in
        {674}let v_1213: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1212))) in
        {675}let v_1214: aead = catch-fail(decrypt(1-proj-2-tuple(v_1213),2-proj-2-tuple(v_1213),3-proj-3-tuple(v_1212),2-proj-3-tuple(v_1210))) in
        {676}let v_1215: bitstring = catch-fail(aeadunpack(v_1214)) in
        {677}let v_1216: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1212))) in
        {678}let v_1217: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1213))) && success?(1-proj-3-tuple(v_1212))) then (if (not-caught-fail(v_1216) && success?(is-true(success?(1-proj-2-tuple(v_1216))))) then cipherstatepack(1-proj-2-tuple(v_1216),increment_nonce(2-proj-2-tuple(v_1213))) else fail-any) else fail-any)) in
        {679}let v_1218: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1210)) && (success?(3-proj-3-tuple(v_1212)) && success?(1-proj-3-tuple(v_1212)))) then (if (not-caught-fail(v_1213) && success?(is-true(success?(1-proj-2-tuple(v_1213))))) then (if not-caught-fail(v_1214) then (if (not-caught-fail(v_1215) && success?(is-true(success?(1-proj-3-tuple(v_1215))))) then (if not-caught-fail(v_1217) then (v_1217,3-proj-3-tuple(v_1215),1-proj-3-tuple(v_1215)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {680}let v_1219: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1218),2-proj-3-tuple(v_1212),3-proj-3-tuple(v_1212)))) in
        {681}let v_1220: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1210)) && success?(symmetricstatepack(1-proj-3-tuple(v_1218),2-proj-3-tuple(v_1212),3-proj-3-tuple(v_1212)))) then (if (not-caught-fail(v_1219) && success?(is-true(success?(1-proj-3-tuple(v_1219))))) then symmetricstatepack(1-proj-3-tuple(v_1219),2-proj-3-tuple(v_1219),hash(3-proj-3-tuple(v_1219),2-proj-3-tuple(v_1210))) else fail-any) else fail-any)) in
        {682}let v_1221: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1210)) && success?(1-proj-7-tuple(v_1209))) then (if (not-caught-fail(v_1212) && success?(is-true(success?(1-proj-3-tuple(v_1212))))) then (if (not-caught-fail(v_1218) && success?(is-true(success?(1-proj-3-tuple(v_1218))))) then (if not-caught-fail(v_1220) then (v_1220,2-proj-3-tuple(v_1218),3-proj-3-tuple(v_1218)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {683}let v_1222: key = catch-fail(2-proj-3-tuple(v_1221)) in
        {684}let v_1223: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1221))) in
        {685}let v_1224: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1223))) in
        {686}let v_1225: aead = catch-fail(decrypt(1-proj-2-tuple(v_1224),2-proj-2-tuple(v_1224),3-proj-3-tuple(v_1223),3-proj-3-tuple(v_1210))) in
        {687}let v_1226: bitstring = catch-fail(aeadunpack(v_1225)) in
        {688}let v_1227: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1223))) in
        {689}let v_1228: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1224))) && success?(1-proj-3-tuple(v_1223))) then (if (not-caught-fail(v_1227) && success?(is-true(success?(1-proj-2-tuple(v_1227))))) then cipherstatepack(1-proj-2-tuple(v_1227),increment_nonce(2-proj-2-tuple(v_1224))) else fail-any) else fail-any)) in
        {690}let v_1229: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1210)) && (success?(3-proj-3-tuple(v_1223)) && success?(1-proj-3-tuple(v_1223)))) then (if (not-caught-fail(v_1224) && success?(is-true(success?(1-proj-2-tuple(v_1224))))) then (if not-caught-fail(v_1225) then (if (not-caught-fail(v_1226) && success?(is-true(success?(1-proj-3-tuple(v_1226))))) then (if not-caught-fail(v_1228) then (v_1228,3-proj-3-tuple(v_1226),1-proj-3-tuple(v_1226)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {691}let v_1230: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1229),2-proj-3-tuple(v_1223),3-proj-3-tuple(v_1223)))) in
        {692}let v_1231: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1210)) && success?(symmetricstatepack(1-proj-3-tuple(v_1229),2-proj-3-tuple(v_1223),3-proj-3-tuple(v_1223)))) then (if (not-caught-fail(v_1230) && success?(is-true(success?(1-proj-3-tuple(v_1230))))) then symmetricstatepack(1-proj-3-tuple(v_1230),2-proj-3-tuple(v_1230),hash(3-proj-3-tuple(v_1230),3-proj-3-tuple(v_1210))) else fail-any) else fail-any)) in
        {693}let v_1232: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1210)) && success?(1-proj-3-tuple(v_1221))) then (if (not-caught-fail(v_1223) && success?(is-true(success?(1-proj-3-tuple(v_1223))))) then (if (not-caught-fail(v_1229) && success?(is-true(success?(1-proj-3-tuple(v_1229))))) then (if not-caught-fail(v_1231) then (v_1231,2-proj-3-tuple(v_1229),3-proj-3-tuple(v_1229)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {694}let v_1233: key = catch-fail(dhexp(key_s(them_1124),g)) in
        {695}let v_1234: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1232),2-proj-7-tuple(v_1209),3-proj-7-tuple(v_1209),v_1222,5-proj-7-tuple(v_1209),6-proj-7-tuple(v_1209),7-proj-7-tuple(v_1209))) in
        {696}let (hs_1235: handshakestate,re_1236: key,plaintext_c_1237: bitstring,valid_1238: bool) = (if (not-caught-fail(v_1209) && success?(is-true(success?(1-proj-7-tuple(v_1209))))) then (if (not-caught-fail(v_1210) && success?(is-true(success?(1-proj-3-tuple(v_1210))))) then (if not-caught-fail(v_1211) then (if (not-caught-fail(v_1221) && success?(is-true(success?(1-proj-3-tuple(v_1221))))) then (if not-caught-fail(v_1222) then (if (not-caught-fail(v_1232) && success?(is-true(success?(1-proj-3-tuple(v_1232))))) then (if ((3-proj-3-tuple(v_1221) && 3-proj-3-tuple(v_1232)) && (v_1222 = getpublickey((if not-caught-fail(v_1233) then keypairpack(v_1233,key_s(them_1124)) else fail-any)))) then (if not-caught-fail(v_1234) then (v_1234,getpublickey(3-proj-7-tuple(v_1209)),2-proj-3-tuple(v_1232),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {697}event RecvMsg(me_1125,them_1124,stage_c,plaintext_c_1237,valid_1238);
        {698}insert statestore(me_1125,them_1124,statepack_d(hs_1235))
    ) | (
        {724}get statestore(=me_1125,=them_1124,statepack_d(hs_1239: handshakestate)) in
        {700}let v_1240: bitstring = catch-fail(handshakestateunpack(hs_1239)) in
        {701}let v_1241: bitstring = catch-fail((empty,empty,empty)) in
        {702}let v_1242: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1240))) in
        {703}let v_1243: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1240))) in
        {704}let v_1244: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1243),(if (success?(4-proj-7-tuple(v_1240)) && success?(3-proj-7-tuple(v_1240))) then (if (not-caught-fail(v_1242) && success?(is-true(success?(1-proj-2-tuple(v_1242))))) then dhexp(2-proj-2-tuple(v_1242),4-proj-7-tuple(v_1240)) else fail-any) else fail-any))) in
        {705}let v_1245: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1243),(if (success?(4-proj-7-tuple(v_1240)) && success?(3-proj-7-tuple(v_1240))) then (if (not-caught-fail(v_1242) && success?(is-true(success?(1-proj-2-tuple(v_1242))))) then dhexp(2-proj-2-tuple(v_1242),4-proj-7-tuple(v_1240)) else fail-any) else fail-any))) in
        {706}let v_1246: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1243),(if (success?(4-proj-7-tuple(v_1240)) && success?(3-proj-7-tuple(v_1240))) then (if (not-caught-fail(v_1242) && success?(is-true(success?(1-proj-2-tuple(v_1242))))) then dhexp(2-proj-2-tuple(v_1242),4-proj-7-tuple(v_1240)) else fail-any) else fail-any))) in
        {707}let v_1247: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1240)) && success?(3-proj-7-tuple(v_1240))) then (if (not-caught-fail(v_1242) && success?(is-true(success?(1-proj-2-tuple(v_1242))))) then dhexp(2-proj-2-tuple(v_1242),4-proj-7-tuple(v_1240)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1243))) then (if not-caught-fail(v_1244) then (if not-caught-fail(v_1245) then (if not-caught-fail(v_1246) then (v_1244,v_1245,v_1246) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {708}let v_1248: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1240)) && success?(3-proj-7-tuple(v_1240))) then (if (not-caught-fail(v_1242) && success?(is-true(success?(1-proj-2-tuple(v_1242))))) then dhexp(2-proj-2-tuple(v_1242),4-proj-7-tuple(v_1240)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1240))) then (if (not-caught-fail(v_1243) && success?(is-true(success?(1-proj-3-tuple(v_1243))))) then (if (not-caught-fail(v_1247) && success?(is-true(success?(1-proj-3-tuple(v_1247))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1247)) then cipherstatepack(2-proj-3-tuple(v_1247),minnonce) else fail-any),1-proj-3-tuple(v_1247),3-proj-3-tuple(v_1243)) else fail-any) else fail-any) else fail-any)) in
        {709}let v_1249: bitstring = catch-fail(symmetricstateunpack(v_1248)) in
        {710}let v_1250: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1249))) in
        {711}let v_1251: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1250),2-proj-2-tuple(v_1250),3-proj-3-tuple(v_1249),msg_d(me_1125,them_1124))) in
        {712}let v_1252: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1249))) in
        {713}let v_1253: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1250))) && success?(1-proj-3-tuple(v_1249))) then (if (not-caught-fail(v_1252) && success?(is-true(success?(1-proj-2-tuple(v_1252))))) then cipherstatepack(1-proj-2-tuple(v_1252),increment_nonce(2-proj-2-tuple(v_1250))) else fail-any) else fail-any)) in
        {714}let v_1254: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1249)) && success?(1-proj-3-tuple(v_1249))) then (if (not-caught-fail(v_1250) && success?(is-true(success?(1-proj-2-tuple(v_1250))))) then (if not-caught-fail(v_1251) then (if not-caught-fail(v_1253) then (v_1253,v_1251) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {715}let v_1255: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1254),2-proj-3-tuple(v_1249),3-proj-3-tuple(v_1249)))) in
        {716}let v_1256: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1254)) && success?(symmetricstatepack(1-proj-2-tuple(v_1254),2-proj-3-tuple(v_1249),3-proj-3-tuple(v_1249)))) then (if (not-caught-fail(v_1255) && success?(is-true(success?(1-proj-3-tuple(v_1255))))) then symmetricstatepack(1-proj-3-tuple(v_1255),2-proj-3-tuple(v_1255),hash(3-proj-3-tuple(v_1255),2-proj-2-tuple(v_1254))) else fail-any) else fail-any)) in
        {717}let v_1257: bitstring = catch-fail((if (not-caught-fail(v_1249) && success?(is-true(success?(1-proj-3-tuple(v_1249))))) then (if (not-caught-fail(v_1254) && success?(is-true(success?(1-proj-2-tuple(v_1254))))) then (if not-caught-fail(v_1256) then (v_1256,2-proj-2-tuple(v_1254)) else fail-any) else fail-any) else fail-any)) in
        {718}let v_1258: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1257),2-proj-7-tuple(v_1240),3-proj-7-tuple(v_1240),4-proj-7-tuple(v_1240),5-proj-7-tuple(v_1240),6-proj-7-tuple(v_1240),7-proj-7-tuple(v_1240))) in
        {719}let v_1259: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1241),2-proj-3-tuple(v_1241),2-proj-2-tuple(v_1257))) in
        {720}let (hs_1260: handshakestate,re_1261: key,message_d_1262: bitstring) = (if (not-caught-fail(v_1240) && success?(is-true(success?(1-proj-7-tuple(v_1240))))) then (if (not-caught-fail(v_1241) && success?(is-true(success?(1-proj-3-tuple(v_1241))))) then (if not-caught-fail(v_1248) then (if (not-caught-fail(v_1257) && success?(is-true(success?(1-proj-2-tuple(v_1257))))) then (if not-caught-fail(v_1258) then (if not-caught-fail(v_1259) then (v_1258,5-proj-7-tuple(v_1240),v_1259) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {721}event SendMsg(me_1125,them_1124,stage_d,msg_d(me_1125,them_1124),true);
        {722}insert statestore(me_1125,them_1124,statepack_e(hs_1260));
        {723}out(pub, message_d_1262)
    ) | (
        {725}!
        {744}get statestore(=me_1125,=them_1124,statepack_e(hs_1263: handshakestate)) in
        {726}in(pub, message_e_1264: bitstring);
        {727}let v_1265: bitstring = catch-fail(handshakestateunpack(hs_1263)) in
        {728}let v_1266: bitstring = catch-fail(deconcat3(message_e_1264)) in
        {729}let v_1267: bool = catch-fail(true) in
        {730}let v_1268: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1265))) in
        {731}let v_1269: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1268))) in
        {732}let v_1270: aead = catch-fail(decrypt(1-proj-2-tuple(v_1269),2-proj-2-tuple(v_1269),3-proj-3-tuple(v_1268),3-proj-3-tuple(v_1266))) in
        {733}let v_1271: bitstring = catch-fail(aeadunpack(v_1270)) in
        {734}let v_1272: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1268))) in
        {735}let v_1273: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1269))) && success?(1-proj-3-tuple(v_1268))) then (if (not-caught-fail(v_1272) && success?(is-true(success?(1-proj-2-tuple(v_1272))))) then cipherstatepack(1-proj-2-tuple(v_1272),increment_nonce(2-proj-2-tuple(v_1269))) else fail-any) else fail-any)) in
        {736}let v_1274: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1266)) && (success?(3-proj-3-tuple(v_1268)) && success?(1-proj-3-tuple(v_1268)))) then (if (not-caught-fail(v_1269) && success?(is-true(success?(1-proj-2-tuple(v_1269))))) then (if not-caught-fail(v_1270) then (if (not-caught-fail(v_1271) && success?(is-true(success?(1-proj-3-tuple(v_1271))))) then (if not-caught-fail(v_1273) then (v_1273,3-proj-3-tuple(v_1271),1-proj-3-tuple(v_1271)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {737}let v_1275: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1274),2-proj-3-tuple(v_1268),3-proj-3-tuple(v_1268)))) in
        {738}let v_1276: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1266)) && success?(symmetricstatepack(1-proj-3-tuple(v_1274),2-proj-3-tuple(v_1268),3-proj-3-tuple(v_1268)))) then (if (not-caught-fail(v_1275) && success?(is-true(success?(1-proj-3-tuple(v_1275))))) then symmetricstatepack(1-proj-3-tuple(v_1275),2-proj-3-tuple(v_1275),hash(3-proj-3-tuple(v_1275),3-proj-3-tuple(v_1266))) else fail-any) else fail-any)) in
        {739}let v_1277: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1266)) && success?(1-proj-7-tuple(v_1265))) then (if (not-caught-fail(v_1268) && success?(is-true(success?(1-proj-3-tuple(v_1268))))) then (if (not-caught-fail(v_1274) && success?(is-true(success?(1-proj-3-tuple(v_1274))))) then (if not-caught-fail(v_1276) then (v_1276,2-proj-3-tuple(v_1274),3-proj-3-tuple(v_1274)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {740}let v_1278: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1277),2-proj-7-tuple(v_1265),3-proj-7-tuple(v_1265),4-proj-7-tuple(v_1265),5-proj-7-tuple(v_1265),6-proj-7-tuple(v_1265),7-proj-7-tuple(v_1265))) in
        {741}let (hs_1279: handshakestate,re_1280: key,plaintext_e_1281: bitstring,valid_1282: bool) = (if (not-caught-fail(v_1265) && success?(is-true(success?(1-proj-7-tuple(v_1265))))) then (if (not-caught-fail(v_1266) && success?(is-true(success?(1-proj-3-tuple(v_1266))))) then (if not-caught-fail(v_1267) then (if (not-caught-fail(v_1277) && success?(is-true(success?(1-proj-3-tuple(v_1277))))) then (if (v_1267 && 3-proj-3-tuple(v_1277)) then (if not-caught-fail(v_1278) then (v_1278,getpublickey(3-proj-7-tuple(v_1265)),2-proj-3-tuple(v_1277),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {742}event RecvMsg(me_1125,them_1124,stage_e,plaintext_e_1281,valid_1282);
        {743}insert statestore(me_1125,them_1124,statepack_f(hs_1279))
    ) | (
        {745}!
        {771}get statestore(=me_1125,=them_1124,statepack_f(hs_1283: handshakestate)) in
        {746}let v_1284: bitstring = catch-fail(handshakestateunpack(hs_1283)) in
        {747}let v_1285: bitstring = catch-fail((empty,empty,empty)) in
        {748}let v_1286: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1284))) in
        {749}let v_1287: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1286))) in
        {750}let v_1288: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1287),2-proj-2-tuple(v_1287),3-proj-3-tuple(v_1286),msg_f(me_1125,them_1124))) in
        {751}let v_1289: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1286))) in
        {752}let v_1290: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1287))) && success?(1-proj-3-tuple(v_1286))) then (if (not-caught-fail(v_1289) && success?(is-true(success?(1-proj-2-tuple(v_1289))))) then cipherstatepack(1-proj-2-tuple(v_1289),increment_nonce(2-proj-2-tuple(v_1287))) else fail-any) else fail-any)) in
        {753}let v_1291: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1286)) && success?(1-proj-3-tuple(v_1286))) then (if (not-caught-fail(v_1287) && success?(is-true(success?(1-proj-2-tuple(v_1287))))) then (if not-caught-fail(v_1288) then (if not-caught-fail(v_1290) then (v_1290,v_1288) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {754}let v_1292: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1291),2-proj-3-tuple(v_1286),3-proj-3-tuple(v_1286)))) in
        {755}let v_1293: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1291)) && success?(symmetricstatepack(1-proj-2-tuple(v_1291),2-proj-3-tuple(v_1286),3-proj-3-tuple(v_1286)))) then (if (not-caught-fail(v_1292) && success?(is-true(success?(1-proj-3-tuple(v_1292))))) then symmetricstatepack(1-proj-3-tuple(v_1292),2-proj-3-tuple(v_1292),hash(3-proj-3-tuple(v_1292),2-proj-2-tuple(v_1291))) else fail-any) else fail-any)) in
        {756}let v_1294: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1284)) then (if (not-caught-fail(v_1286) && success?(is-true(success?(1-proj-3-tuple(v_1286))))) then (if (not-caught-fail(v_1291) && success?(is-true(success?(1-proj-2-tuple(v_1291))))) then (if not-caught-fail(v_1293) then (v_1293,2-proj-2-tuple(v_1291)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {757}let v_1295: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1294),2-proj-7-tuple(v_1284),3-proj-7-tuple(v_1284),4-proj-7-tuple(v_1284),5-proj-7-tuple(v_1284),6-proj-7-tuple(v_1284),7-proj-7-tuple(v_1284))) in
        {758}let v_1296: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1285),2-proj-3-tuple(v_1285),2-proj-2-tuple(v_1294))) in
        {759}let v_1297: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1294))) in
        {760}let v_1298: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1297),zero)) in
        {761}let v_1299: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1297),zero)) in
        {762}let v_1300: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1297),zero)) in
        {763}let v_1301: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1297)) then (if not-caught-fail(v_1298) then (if not-caught-fail(v_1299) then (if not-caught-fail(v_1300) then (v_1298,v_1299,v_1300) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {764}let v_1302: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1301)) then cipherstatepack(1-proj-3-tuple(v_1301),minnonce) else fail-any)) in
        {765}let v_1303: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1301)) then cipherstatepack(2-proj-3-tuple(v_1301),minnonce) else fail-any)) in
        {766}let v_1304: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1294)) then (if (not-caught-fail(v_1297) && success?(is-true(success?(1-proj-3-tuple(v_1297))))) then (if (not-caught-fail(v_1301) && success?(is-true(success?(1-proj-3-tuple(v_1301))))) then (if not-caught-fail(v_1302) then (if not-caught-fail(v_1303) then (1-proj-2-tuple(v_1294),v_1302,v_1303) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {767}let (hs_1305: handshakestate,re_1306: key,message_f_1307: bitstring,cs1_1308: cipherstate,cs2_1309: cipherstate) = (if (not-caught-fail(v_1284) && success?(is-true(success?(1-proj-7-tuple(v_1284))))) then (if (not-caught-fail(v_1285) && success?(is-true(success?(1-proj-3-tuple(v_1285))))) then (if (not-caught-fail(v_1294) && success?(is-true(success?(1-proj-2-tuple(v_1294))))) then (if not-caught-fail(v_1295) then (if not-caught-fail(v_1296) then (if (not-caught-fail(v_1304) && success?(is-true(success?(1-proj-3-tuple(v_1304))))) then (v_1295,5-proj-7-tuple(v_1284),v_1296,2-proj-3-tuple(v_1304),3-proj-3-tuple(v_1304)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {768}event SendMsg(me_1125,them_1124,stage_f,msg_f(me_1125,them_1124),true);
        {769}insert statestore(me_1125,them_1124,statepack_g(hs_1305));
        {770}out(pub, message_f_1307)
    ) | (
        {772}event LeakS(phase0,me_1125);
        {773}out(pub, key_s(me_1125))
    ) | (
        {774}phase 1;
        {775}event LeakS(phase1,me_1125);
        {776}out(pub, key_s(me_1125))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1390,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1390,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1390,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1390,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1390,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1390,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1390,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1390,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1390,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1390,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1390,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1390,stage_f,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_f(bob,alice)); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 226 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 46 rules in the queue.
600 rules inserted. The rule base contains 585 rules. 166 rules in the queue.
800 rules inserted. The rule base contains 745 rules. 132 rules in the queue.
1000 rules inserted. The rule base contains 943 rules. 390 rules in the queue.
1200 rules inserted. The rule base contains 1106 rules. 321 rules in the queue.
1400 rules inserted. The rule base contains 1282 rules. 201 rules in the queue.
1600 rules inserted. The rule base contains 1386 rules. 301 rules in the queue.
1800 rules inserted. The rule base contains 1566 rules. 436 rules in the queue.
2000 rules inserted. The rule base contains 1740 rules. 421 rules in the queue.
2200 rules inserted. The rule base contains 1910 rules. 430 rules in the queue.
2400 rules inserted. The rule base contains 2072 rules. 509 rules in the queue.
2600 rules inserted. The rule base contains 2221 rules. 575 rules in the queue.
2800 rules inserted. The rule base contains 2367 rules. 583 rules in the queue.
3000 rules inserted. The rule base contains 2543 rules. 570 rules in the queue.
3200 rules inserted. The rule base contains 2710 rules. 585 rules in the queue.
3400 rules inserted. The rule base contains 2861 rules. 621 rules in the queue.
3600 rules inserted. The rule base contains 3029 rules. 663 rules in the queue.
3800 rules inserted. The rule base contains 3150 rules. 688 rules in the queue.
4000 rules inserted. The rule base contains 3256 rules. 647 rules in the queue.
4200 rules inserted. The rule base contains 3369 rules. 602 rules in the queue.
4400 rules inserted. The rule base contains 3462 rules. 570 rules in the queue.
4600 rules inserted. The rule base contains 3615 rules. 566 rules in the queue.
4800 rules inserted. The rule base contains 3773 rules. 563 rules in the queue.
5000 rules inserted. The rule base contains 3914 rules. 576 rules in the queue.
5200 rules inserted. The rule base contains 4027 rules. 612 rules in the queue.
5400 rules inserted. The rule base contains 4162 rules. 656 rules in the queue.
5600 rules inserted. The rule base contains 4303 rules. 665 rules in the queue.
5800 rules inserted. The rule base contains 4407 rules. 644 rules in the queue.
6000 rules inserted. The rule base contains 4547 rules. 642 rules in the queue.
6200 rules inserted. The rule base contains 4665 rules. 633 rules in the queue.
6400 rules inserted. The rule base contains 4764 rules. 630 rules in the queue.
6600 rules inserted. The rule base contains 4890 rules. 626 rules in the queue.
6800 rules inserted. The rule base contains 4980 rules. 605 rules in the queue.
7000 rules inserted. The rule base contains 5073 rules. 596 rules in the queue.
7200 rules inserted. The rule base contains 5151 rules. 552 rules in the queue.
7400 rules inserted. The rule base contains 5233 rules. 524 rules in the queue.
7600 rules inserted. The rule base contains 5314 rules. 502 rules in the queue.
7800 rules inserted. The rule base contains 5408 rules. 489 rules in the queue.
8000 rules inserted. The rule base contains 5522 rules. 473 rules in the queue.
8200 rules inserted. The rule base contains 5624 rules. 461 rules in the queue.
8400 rules inserted. The rule base contains 5710 rules. 447 rules in the queue.
8600 rules inserted. The rule base contains 5825 rules. 455 rules in the queue.
8800 rules inserted. The rule base contains 5945 rules. 455 rules in the queue.
9000 rules inserted. The rule base contains 6059 rules. 436 rules in the queue.
9200 rules inserted. The rule base contains 6166 rules. 424 rules in the queue.
9400 rules inserted. The rule base contains 6283 rules. 361 rules in the queue.
9600 rules inserted. The rule base contains 6399 rules. 322 rules in the queue.
9800 rules inserted. The rule base contains 6546 rules. 338 rules in the queue.
10000 rules inserted. The rule base contains 6657 rules. 321 rules in the queue.
10200 rules inserted. The rule base contains 6769 rules. 285 rules in the queue.
10400 rules inserted. The rule base contains 6877 rules. 252 rules in the queue.
10600 rules inserted. The rule base contains 7023 rules. 275 rules in the queue.
10800 rules inserted. The rule base contains 7091 rules. 266 rules in the queue.
11000 rules inserted. The rule base contains 7215 rules. 271 rules in the queue.
11200 rules inserted. The rule base contains 7372 rules. 300 rules in the queue.
11400 rules inserted. The rule base contains 7519 rules. 334 rules in the queue.
11600 rules inserted. The rule base contains 7650 rules. 329 rules in the queue.
11800 rules inserted. The rule base contains 7784 rules. 345 rules in the queue.
12000 rules inserted. The rule base contains 7927 rules. 336 rules in the queue.
12200 rules inserted. The rule base contains 8079 rules. 326 rules in the queue.
12400 rules inserted. The rule base contains 8217 rules. 291 rules in the queue.
12600 rules inserted. The rule base contains 8365 rules. 272 rules in the queue.
12800 rules inserted. The rule base contains 8480 rules. 276 rules in the queue.
13000 rules inserted. The rule base contains 8603 rules. 299 rules in the queue.
13200 rules inserted. The rule base contains 8744 rules. 328 rules in the queue.
13400 rules inserted. The rule base contains 8864 rules. 300 rules in the queue.
13600 rules inserted. The rule base contains 8961 rules. 258 rules in the queue.
13800 rules inserted. The rule base contains 9053 rules. 201 rules in the queue.
14000 rules inserted. The rule base contains 9158 rules. 180 rules in the queue.
14200 rules inserted. The rule base contains 9265 rules. 176 rules in the queue.
14400 rules inserted. The rule base contains 9399 rules. 147 rules in the queue.
14600 rules inserted. The rule base contains 9504 rules. 81 rules in the queue.
14800 rules inserted. The rule base contains 9518 rules. 41 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_339598672 = key_e_770[me_756 = alice,them_755 = charlie,!1 = @sid_339598654]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {404}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {210}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {234}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {231}.
So the message concat3(dhexp(key_e_339598672,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_339598672,g)),msg_a(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(dhexp(key_e_339598672,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_339598672,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {426}.
The message concat3(dhexp(key_e_339598672,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_339598672,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {405}.
We have dhexp(key_e_339598672,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {424}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1390,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1390,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1390,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1390,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_339598710 = key_e_770[me_756 = alice,them_755 = charlie,!1 = @sid_339598692]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {404}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {210}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {234}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {231}.
So the message concat3(dhexp(key_e_339598710,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_339598710,g)),msg_a(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(dhexp(key_e_339598710,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_339598710,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {426}.
The message concat3(dhexp(key_e_339598710,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_339598710,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {405}.
We have dhexp(key_e_339598710,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {424}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_339598742 = key_e_770[me_756 = alice,them_755 = charlie,!1 = @sid_339598724]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {404}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {210}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {234}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {231}.
So the message concat3(dhexp(key_e_339598742,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_339598742,g)),msg_a(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(dhexp(key_e_339598742,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_339598742,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {426}.
The message concat3(dhexp(key_e_339598742,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_339598742,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {405}.
We have dhexp(key_e_339598742,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {424}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_339598792 = key_e[me = alice,them = bob,!1 = @sid_339598778]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_339598792,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_339598792,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_339598792,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_339598792,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_339598792,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_339598792,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_339598792,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_339598792,g).
attacker(dhexp(key_339598792,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_339598792,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598792,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_339598842 = key_e[me = alice,them = bob,!1 = @sid_339598828]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_339598842,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_339598842,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_339598842,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_339598842,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_339598842,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_339598842,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_339598842,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_339598842,g).
attacker(dhexp(key_339598842,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_339598842,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598842,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_339598893 = key_e[me = alice,them = bob,!1 = @sid_339598879]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_339598893,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_339598893,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_339598893,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_339598893,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_339598893,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_339598893,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_339598893,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_339598893,g).
attacker(dhexp(key_339598893,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_339598893,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598893,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_339598943 = key_e[me = alice,them = bob,!1 = @sid_339598929]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_339598943,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_339598943,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_339598943,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_339598943,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_339598943,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_339598943,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_339598943,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_339598943,g).
attacker(dhexp(key_339598943,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_339598943,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_339598943,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_339599010 = key_e_1162[me_1125 = bob,them_1124 = charlie,!1 = @sid_339598995]
key_339599011 = key_e[me = alice,them = bob,!1 = @sid_339598969]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_339599011,g),key_339599011),empty,empty,empty,true))) may be inserted in a table at insert {38}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_339599011,g),key_339599011),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {597}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_339599011,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_339599011,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {619}.
The message concat3(dhexp(key_339599011,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {598}.
We have dhexp(key_339599011,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_339599011,g),empty,false))) may be inserted in a table at insert {618}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_339599011,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_339599011,g),empty,false))) that may be in a table by 6 may be read at get {668}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {665}.
So the message concat3(dhexp(key_e_339599010,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599011,dhexp(key_e_339599010,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))),dhexp(key_e_339599010,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_339599011,dhexp(key_e_339599010,g))),dhexp(key_339599011,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))),dhexp(key_e_339599010,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599011,dhexp(key_e_339599010,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))),dhexp(key_e_339599010,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {667}.
mess(pub,concat3(dhexp(key_e_339599010,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599011,dhexp(key_e_339599010,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))),dhexp(key_e_339599010,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_339599011,dhexp(key_e_339599010,g))),dhexp(key_339599011,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))),dhexp(key_e_339599010,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599011,dhexp(key_e_339599010,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))),dhexp(key_e_339599010,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_339599011,g),key_339599011),empty,empty,empty,true))) that may be in a table by 2 may be read at get {88}.
The message concat3(dhexp(key_e_339599010,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599011,dhexp(key_e_339599010,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))),dhexp(key_e_339599010,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_339599011,dhexp(key_e_339599010,g))),dhexp(key_339599011,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))),dhexp(key_e_339599010,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599011,dhexp(key_e_339599010,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599011,g)),msg_a(alice,bob))),dhexp(key_e_339599010,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {41}.
We have dhexp(key_e_339599010,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {86}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1390,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1390,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1390,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1390,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_339599084 = key_e_1162[me_1125 = bob,them_1124 = charlie,!1 = @sid_339599069]
key_339599085 = key_e[me = alice,them = bob,!1 = @sid_339599043]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_339599085,g),key_339599085),empty,empty,empty,true))) may be inserted in a table at insert {38}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_339599085,g),key_339599085),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {597}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_339599085,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_339599085,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {619}.
The message concat3(dhexp(key_339599085,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {598}.
We have dhexp(key_339599085,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_339599085,g),empty,false))) may be inserted in a table at insert {618}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_339599085,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_339599085,g),empty,false))) that may be in a table by 6 may be read at get {668}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {665}.
So the message concat3(dhexp(key_e_339599084,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599085,dhexp(key_e_339599084,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))),dhexp(key_e_339599084,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_339599085,dhexp(key_e_339599084,g))),dhexp(key_339599085,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))),dhexp(key_e_339599084,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599085,dhexp(key_e_339599084,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))),dhexp(key_e_339599084,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {667}.
mess(pub,concat3(dhexp(key_e_339599084,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599085,dhexp(key_e_339599084,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))),dhexp(key_e_339599084,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_339599085,dhexp(key_e_339599084,g))),dhexp(key_339599085,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))),dhexp(key_e_339599084,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599085,dhexp(key_e_339599084,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))),dhexp(key_e_339599084,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_339599085,g),key_339599085),empty,empty,empty,true))) that may be in a table by 2 may be read at get {88}.
The message concat3(dhexp(key_e_339599084,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599085,dhexp(key_e_339599084,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))),dhexp(key_e_339599084,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_339599085,dhexp(key_e_339599084,g))),dhexp(key_339599085,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))),dhexp(key_e_339599084,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599085,dhexp(key_e_339599084,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599085,g)),msg_a(alice,bob))),dhexp(key_e_339599084,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {41}.
We have dhexp(key_e_339599084,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {86}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_339599152 = key_e_1162[me_1125 = bob,them_1124 = charlie,!1 = @sid_339599137]
key_339599153 = key_e[me = alice,them = bob,!1 = @sid_339599111]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_339599153,g),key_339599153),empty,empty,empty,true))) may be inserted in a table at insert {38}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_339599153,g),key_339599153),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {597}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_339599153,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_339599153,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {619}.
The message concat3(dhexp(key_339599153,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {598}.
We have dhexp(key_339599153,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_339599153,g),empty,false))) may be inserted in a table at insert {618}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_339599153,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_339599153,g),empty,false))) that may be in a table by 6 may be read at get {668}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {665}.
So the message concat3(dhexp(key_e_339599152,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599153,dhexp(key_e_339599152,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))),dhexp(key_e_339599152,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_339599153,dhexp(key_e_339599152,g))),dhexp(key_339599153,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))),dhexp(key_e_339599152,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599153,dhexp(key_e_339599152,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))),dhexp(key_e_339599152,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {667}.
mess(pub,concat3(dhexp(key_e_339599152,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599153,dhexp(key_e_339599152,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))),dhexp(key_e_339599152,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_339599153,dhexp(key_e_339599152,g))),dhexp(key_339599153,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))),dhexp(key_e_339599152,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599153,dhexp(key_e_339599152,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))),dhexp(key_e_339599152,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_339599153,g),key_339599153),empty,empty,empty,true))) that may be in a table by 2 may be read at get {88}.
The message concat3(dhexp(key_e_339599152,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599153,dhexp(key_e_339599152,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))),dhexp(key_e_339599152,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_339599153,dhexp(key_e_339599152,g))),dhexp(key_339599153,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))),dhexp(key_e_339599152,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_339599153,dhexp(key_e_339599152,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_339599153,g)),msg_a(alice,bob))),dhexp(key_e_339599152,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {41}.
We have dhexp(key_e_339599152,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {86}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1390,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1390,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1390,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1390,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1390,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1390,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1390,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1390,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1390,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1390,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1390,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1390,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1390,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1390,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1390,stage_f,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1390,stage_f,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_f(bob,alice))
RESULT not attacker_p1(msg_f(bob,alice)) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
