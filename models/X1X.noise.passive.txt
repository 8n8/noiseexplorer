File "X1X.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 270, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 271, character 36:
Warning: identifier h rebound.
File "X1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 310, character 6:
Warning: identifier e rebound.
File "X1X.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ne rebound.
File "X1X.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 322, character 6:
Warning: identifier e rebound.
File "X1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ne rebound.
File "X1X.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 327, character 6:
Warning: identifier s rebound.
File "X1X.noise.passive.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 328, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 338, character 6:
Warning: identifier s rebound.
File "X1X.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 339, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 349, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 349, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 350, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 359, characters 6-7:
Warning: identifier re rebound.
File "X1X.noise.passive.pv", line 360, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 372, characters 6-7:
Warning: identifier re rebound.
File "X1X.noise.passive.pv", line 373, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 376, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X.noise.passive.pv", line 377, characters 6-7:
Warning: identifier rs rebound.
File "X1X.noise.passive.pv", line 378, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 389, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X.noise.passive.pv", line 390, characters 6-7:
Warning: identifier rs rebound.
File "X1X.noise.passive.pv", line 391, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 393, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 401, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 402, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 404, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 550, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 401, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 402, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 404, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 542, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 338, character 6:
Warning: identifier s rebound.
File "X1X.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 339, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 535, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 372, characters 6-7:
Warning: identifier re rebound.
File "X1X.noise.passive.pv", line 373, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 376, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X.noise.passive.pv", line 377, characters 6-7:
Warning: identifier rs rebound.
File "X1X.noise.passive.pv", line 378, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 527, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 310, character 6:
Warning: identifier e rebound.
File "X1X.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ne rebound.
File "X1X.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 600, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 349, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 349, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 350, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 593, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 389, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X.noise.passive.pv", line 390, characters 6-7:
Warning: identifier rs rebound.
File "X1X.noise.passive.pv", line 391, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 393, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 585, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 322, character 6:
Warning: identifier e rebound.
File "X1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ne rebound.
File "X1X.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 327, character 6:
Warning: identifier s rebound.
File "X1X.noise.passive.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 328, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1X.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 578, characters 8-9:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 359, characters 6-7:
Warning: identifier re rebound.
File "X1X.noise.passive.pv", line 360, characters 6-7:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "X1X.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "X1X.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "X1X.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_511: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_511));
    (
        {4}let e_512: keypair = keypairpack(empty,empty) in
        {5}let rs_513: key = empty in
        {6}let re_514: key = empty in
        {7}let v_515: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_516: key = catch-fail(v_515) in
        {9}let v_517: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_518: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (if not-caught-fail(v_517) then symmetricstatepack(v_517,v_516,v_515) else fail-any) else fail-any) else fail-any))) in
        {11}let v_519: symmetricstate = catch-fail((if success?((if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (if not-caught-fail(v_517) then symmetricstatepack(v_517,v_516,v_515) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_518),hash(3-proj-3-tuple(v_518),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_519) then handshakestatepack(v_519,s_511,e_512,rs_513,re_514,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {36}get statestore(=alice,=bob,statepack_a(hs_520: handshakestate)) in
        {14}let v_521: bitstring = catch-fail(handshakestateunpack(hs_520)) in
        {15}let v_522: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_523: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_524: keypair = catch-fail((if not-caught-fail(v_523) then keypairpack(v_523,key_e(alice,bob)) else fail-any)) in
        {18}let v_525: bitstring = catch-fail(getpublickey(v_524)) in
        {19}let v_526: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_521))) in
        {20}let v_527: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_521)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then symmetricstatepack(1-proj-3-tuple(v_526),2-proj-3-tuple(v_526),hash(3-proj-3-tuple(v_526),v_525)) else fail-any) else fail-any)) in
        {21}let v_528: bitstring = catch-fail(symmetricstateunpack(v_527)) in
        {22}let v_529: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_528))) in
        {23}let v_530: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_529),2-proj-2-tuple(v_529),3-proj-3-tuple(v_528),msg_a(alice,bob))) in
        {24}let v_531: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_528))) in
        {25}let v_532: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_529))) && success?(1-proj-3-tuple(v_528))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then cipherstatepack(1-proj-2-tuple(v_531),increment_nonce(2-proj-2-tuple(v_529))) else fail-any) else fail-any)) in
        {26}let v_533: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_528)) && success?(1-proj-3-tuple(v_528))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-2-tuple(v_529))))) then (if not-caught-fail(v_530) then (if not-caught-fail(v_532) then (v_532,v_530) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {27}let v_534: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_533),2-proj-3-tuple(v_528),3-proj-3-tuple(v_528)))) in
        {28}let v_535: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_533)) && success?(symmetricstatepack(1-proj-2-tuple(v_533),2-proj-3-tuple(v_528),3-proj-3-tuple(v_528)))) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-3-tuple(v_534))))) then symmetricstatepack(1-proj-3-tuple(v_534),2-proj-3-tuple(v_534),hash(3-proj-3-tuple(v_534),2-proj-2-tuple(v_533))) else fail-any) else fail-any)) in
        {29}let v_536: bitstring = catch-fail((if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then (if not-caught-fail(v_535) then (v_535,2-proj-2-tuple(v_533)) else fail-any) else fail-any) else fail-any)) in
        {30}let v_537: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_536),2-proj-7-tuple(v_521),v_524,4-proj-7-tuple(v_521),5-proj-7-tuple(v_521),6-proj-7-tuple(v_521),7-proj-7-tuple(v_521))) in
        {31}let v_538: bitstring = catch-fail(concat3(v_525,2-proj-3-tuple(v_522),2-proj-2-tuple(v_536))) in
        {32}let (hs_539: handshakestate,re_540: key,message_a: bitstring) = (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-7-tuple(v_521))))) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then (if not-caught-fail(v_524) then (if not-caught-fail(v_525) then (if not-caught-fail(v_527) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then (if not-caught-fail(v_537) then (if not-caught-fail(v_538) then (v_537,5-proj-7-tuple(v_521),v_538) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {33}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {34}insert statestore(alice,bob,statepack_b(hs_539));
        {35}out(pub, message_a)
    ) | (
        {84}get statestore(=alice,=bob,statepack_b(hs_541: handshakestate)) in
        {37}in(pub, message_b: bitstring);
        {38}let v_542: bitstring = catch-fail(handshakestateunpack(hs_541)) in
        {39}let v_543: bitstring = catch-fail(deconcat3(message_b)) in
        {40}let v_544: bool = catch-fail(true) in
        {41}let v_545: key = catch-fail(1-proj-3-tuple(v_543)) in
        {42}let v_546: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_542))) in
        {43}let v_547: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_542)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then symmetricstatepack(1-proj-3-tuple(v_546),2-proj-3-tuple(v_546),hash(3-proj-3-tuple(v_546),v_545)) else fail-any) else fail-any)) in
        {44}let v_548: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_542))) in
        {45}let v_549: bitstring = catch-fail(symmetricstateunpack(v_547)) in
        {46}let v_550: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_549),(if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then dhexp(2-proj-2-tuple(v_548),v_545) else fail-any) else fail-any))) in
        {47}let v_551: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_549),(if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then dhexp(2-proj-2-tuple(v_548),v_545) else fail-any) else fail-any))) in
        {48}let v_552: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_549),(if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then dhexp(2-proj-2-tuple(v_548),v_545) else fail-any) else fail-any))) in
        {49}let v_553: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then dhexp(2-proj-2-tuple(v_548),v_545) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_549))) then (if not-caught-fail(v_550) then (if not-caught-fail(v_551) then (if not-caught-fail(v_552) then (v_550,v_551,v_552) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_554: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then dhexp(2-proj-2-tuple(v_548),v_545) else fail-any) else fail-any)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-3-tuple(v_553))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_553)) then cipherstatepack(2-proj-3-tuple(v_553),minnonce) else fail-any),1-proj-3-tuple(v_553),3-proj-3-tuple(v_549)) else fail-any) else fail-any) else fail-any)) in
        {51}let v_555: bitstring = catch-fail(symmetricstateunpack(v_554)) in
        {52}let v_556: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_555))) in
        {53}let v_557: aead = catch-fail(decrypt(1-proj-2-tuple(v_556),2-proj-2-tuple(v_556),3-proj-3-tuple(v_555),2-proj-3-tuple(v_543))) in
        {54}let v_558: bitstring = catch-fail(aeadunpack(v_557)) in
        {55}let v_559: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_555))) in
        {56}let v_560: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_556))) && success?(1-proj-3-tuple(v_555))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then cipherstatepack(1-proj-2-tuple(v_559),increment_nonce(2-proj-2-tuple(v_556))) else fail-any) else fail-any)) in
        {57}let v_561: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_543)) && (success?(3-proj-3-tuple(v_555)) && success?(1-proj-3-tuple(v_555)))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then (if not-caught-fail(v_557) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if not-caught-fail(v_560) then (v_560,3-proj-3-tuple(v_558),1-proj-3-tuple(v_558)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {58}let v_562: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_561),2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)))) in
        {59}let v_563: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_543)) && success?(symmetricstatepack(1-proj-3-tuple(v_561),2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack(1-proj-3-tuple(v_562),2-proj-3-tuple(v_562),hash(3-proj-3-tuple(v_562),2-proj-3-tuple(v_543))) else fail-any) else fail-any)) in
        {60}let v_564: bitstring = catch-fail((if success?(2-proj-3-tuple(v_543)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if not-caught-fail(v_563) then (v_563,2-proj-3-tuple(v_561),3-proj-3-tuple(v_561)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_565: key = catch-fail(2-proj-3-tuple(v_564)) in
        {62}let v_566: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_542))) in
        {63}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_564))) in
        {64}let v_568: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_567),(if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_565) else fail-any) else fail-any))) in
        {65}let v_569: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_567),(if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_565) else fail-any) else fail-any))) in
        {66}let v_570: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_567),(if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_565) else fail-any) else fail-any))) in
        {67}let v_571: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_565) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_567))) then (if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (v_568,v_569,v_570) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_572: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_542)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_565) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_571)) then cipherstatepack(2-proj-3-tuple(v_571),minnonce) else fail-any),1-proj-3-tuple(v_571),3-proj-3-tuple(v_567)) else fail-any) else fail-any) else fail-any)) in
        {69}let v_573: bitstring = catch-fail(symmetricstateunpack(v_572)) in
        {70}let v_574: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {71}let v_575: aead = catch-fail(decrypt(1-proj-2-tuple(v_574),2-proj-2-tuple(v_574),3-proj-3-tuple(v_573),3-proj-3-tuple(v_543))) in
        {72}let v_576: bitstring = catch-fail(aeadunpack(v_575)) in
        {73}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {74}let v_578: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_574))) && success?(1-proj-3-tuple(v_573))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then cipherstatepack(1-proj-2-tuple(v_577),increment_nonce(2-proj-2-tuple(v_574))) else fail-any) else fail-any)) in
        {75}let v_579: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_543)) && (success?(3-proj-3-tuple(v_573)) && success?(1-proj-3-tuple(v_573)))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then (if not-caught-fail(v_575) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if not-caught-fail(v_578) then (v_578,3-proj-3-tuple(v_576),1-proj-3-tuple(v_576)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_580: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_579),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) in
        {77}let v_581: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_543)) && success?(symmetricstatepack(1-proj-3-tuple(v_579),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then symmetricstatepack(1-proj-3-tuple(v_580),2-proj-3-tuple(v_580),hash(3-proj-3-tuple(v_580),3-proj-3-tuple(v_543))) else fail-any) else fail-any)) in
        {78}let v_582: bitstring = catch-fail((if success?(3-proj-3-tuple(v_543)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_581) then (v_581,2-proj-3-tuple(v_579),3-proj-3-tuple(v_579)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_583: key = catch-fail(dhexp(key_s(bob),g)) in
        {80}let v_584: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_582),2-proj-7-tuple(v_542),3-proj-7-tuple(v_542),v_565,v_545,6-proj-7-tuple(v_542),7-proj-7-tuple(v_542))) in
        {81}let (hs_585: handshakestate,re_586: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-7-tuple(v_542))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_544) then (if not-caught-fail(v_545) then (if not-caught-fail(v_547) then (if not-caught-fail(v_554) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_572) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if ((3-proj-3-tuple(v_564) && 3-proj-3-tuple(v_582)) && (v_565 = getpublickey((if not-caught-fail(v_583) then keypairpack(v_583,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_584) then (v_584,getpublickey(3-proj-7-tuple(v_542)),2-proj-3-tuple(v_582),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {82}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {83}insert statestore(alice,bob,statepack_c(hs_585))
    ) | (
        {113}get statestore(=alice,=bob,statepack_c(hs_587: handshakestate)) in
        {85}let v_588: bitstring = catch-fail(handshakestateunpack(hs_587)) in
        {86}let v_589: bitstring = catch-fail((empty,empty,empty)) in
        {87}let v_590: key = catch-fail(dhexp(key_s(alice),g)) in
        {88}let v_591: keypair = catch-fail((if not-caught-fail(v_590) then keypairpack(v_590,key_s(alice)) else fail-any)) in
        {89}let v_592: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_588))) in
        {90}let v_593: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
        {91}let v_594: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_593),2-proj-2-tuple(v_593),3-proj-3-tuple(v_592),getpublickey(v_591))) in
        {92}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
        {93}let v_596: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_593))) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then cipherstatepack(1-proj-2-tuple(v_595),increment_nonce(2-proj-2-tuple(v_593))) else fail-any) else fail-any)) in
        {94}let v_597: bitstring = catch-fail((if (success?(getpublickey(v_591)) && (success?(3-proj-3-tuple(v_592)) && success?(1-proj-3-tuple(v_592)))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then (if not-caught-fail(v_594) then (if not-caught-fail(v_596) then (v_596,v_594) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_598: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) in
        {96}let v_599: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_597)) && success?(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack(1-proj-3-tuple(v_598),2-proj-3-tuple(v_598),hash(3-proj-3-tuple(v_598),2-proj-2-tuple(v_597))) else fail-any) else fail-any)) in
        {97}let v_600: bitstring = catch-fail((if (success?(getpublickey(v_591)) && success?(1-proj-7-tuple(v_588))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,2-proj-2-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_600))) in
        {99}let v_602: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {100}let v_603: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_602),2-proj-2-tuple(v_602),3-proj-3-tuple(v_601),msg_c(alice,bob))) in
        {101}let v_604: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {102}let v_605: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_602))) && success?(1-proj-3-tuple(v_601))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then cipherstatepack(1-proj-2-tuple(v_604),increment_nonce(2-proj-2-tuple(v_602))) else fail-any) else fail-any)) in
        {103}let v_606: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_601)) && success?(1-proj-3-tuple(v_601))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then (if not-caught-fail(v_603) then (if not-caught-fail(v_605) then (v_605,v_603) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_607: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_606),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) in
        {105}let v_608: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_606)) && success?(symmetricstatepack(1-proj-2-tuple(v_606),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_607),hash(3-proj-3-tuple(v_607),2-proj-2-tuple(v_606))) else fail-any) else fail-any)) in
        {106}let v_609: bitstring = catch-fail((if success?(1-proj-2-tuple(v_600)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then (if not-caught-fail(v_608) then (v_608,2-proj-2-tuple(v_606)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_610: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_609),v_591,3-proj-7-tuple(v_588),4-proj-7-tuple(v_588),5-proj-7-tuple(v_588),6-proj-7-tuple(v_588),7-proj-7-tuple(v_588))) in
        {108}let v_611: bitstring = catch-fail(concat3(1-proj-3-tuple(v_589),2-proj-2-tuple(v_600),2-proj-2-tuple(v_609))) in
        {109}let (hs_612: handshakestate,re_613: key,message_c: bitstring) = (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-7-tuple(v_588))))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if not-caught-fail(v_591) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (v_610,5-proj-7-tuple(v_588),v_611) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {110}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {111}insert statestore(alice,bob,statepack_d(hs_612));
        {112}out(pub, message_c)
    ) | (
        {148}get statestore(=alice,=bob,statepack_d(hs_614: handshakestate)) in
        {114}in(pub, message_d: bitstring);
        {115}let v_615: bitstring = catch-fail(handshakestateunpack(hs_614)) in
        {116}let v_616: bitstring = catch-fail(deconcat3(message_d)) in
        {117}let v_617: bool = catch-fail(true) in
        {118}let v_618: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_615))) in
        {119}let v_619: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_615))) in
        {120}let v_620: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_619),(if (success?(5-proj-7-tuple(v_615)) && success?(2-proj-7-tuple(v_615))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),5-proj-7-tuple(v_615)) else fail-any) else fail-any))) in
        {121}let v_621: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_619),(if (success?(5-proj-7-tuple(v_615)) && success?(2-proj-7-tuple(v_615))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),5-proj-7-tuple(v_615)) else fail-any) else fail-any))) in
        {122}let v_622: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_619),(if (success?(5-proj-7-tuple(v_615)) && success?(2-proj-7-tuple(v_615))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),5-proj-7-tuple(v_615)) else fail-any) else fail-any))) in
        {123}let v_623: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_615)) && success?(2-proj-7-tuple(v_615))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),5-proj-7-tuple(v_615)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_619))) then (if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (v_620,v_621,v_622) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_624: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_615)) && success?(2-proj-7-tuple(v_615))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),5-proj-7-tuple(v_615)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_615))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_623)) then cipherstatepack(2-proj-3-tuple(v_623),minnonce) else fail-any),1-proj-3-tuple(v_623),3-proj-3-tuple(v_619)) else fail-any) else fail-any) else fail-any)) in
        {125}let v_625: bitstring = catch-fail(symmetricstateunpack(v_624)) in
        {126}let v_626: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_625))) in
        {127}let v_627: aead = catch-fail(decrypt(1-proj-2-tuple(v_626),2-proj-2-tuple(v_626),3-proj-3-tuple(v_625),3-proj-3-tuple(v_616))) in
        {128}let v_628: bitstring = catch-fail(aeadunpack(v_627)) in
        {129}let v_629: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_625))) in
        {130}let v_630: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_626))) && success?(1-proj-3-tuple(v_625))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then cipherstatepack(1-proj-2-tuple(v_629),increment_nonce(2-proj-2-tuple(v_626))) else fail-any) else fail-any)) in
        {131}let v_631: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_616)) && (success?(3-proj-3-tuple(v_625)) && success?(1-proj-3-tuple(v_625)))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then (if not-caught-fail(v_627) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then (if not-caught-fail(v_630) then (v_630,3-proj-3-tuple(v_628),1-proj-3-tuple(v_628)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_632: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_631),2-proj-3-tuple(v_625),3-proj-3-tuple(v_625)))) in
        {133}let v_633: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_616)) && success?(symmetricstatepack(1-proj-3-tuple(v_631),2-proj-3-tuple(v_625),3-proj-3-tuple(v_625)))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then symmetricstatepack(1-proj-3-tuple(v_632),2-proj-3-tuple(v_632),hash(3-proj-3-tuple(v_632),3-proj-3-tuple(v_616))) else fail-any) else fail-any)) in
        {134}let v_634: bitstring = catch-fail((if success?(3-proj-3-tuple(v_616)) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if not-caught-fail(v_633) then (v_633,2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_635: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_634),2-proj-7-tuple(v_615),3-proj-7-tuple(v_615),4-proj-7-tuple(v_615),5-proj-7-tuple(v_615),6-proj-7-tuple(v_615),7-proj-7-tuple(v_615))) in
        {136}let v_636: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_634))) in
        {137}let v_637: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_636),zero)) in
        {138}let v_638: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_636),zero)) in
        {139}let v_639: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_636),zero)) in
        {140}let v_640: bitstring = catch-fail((if success?(2-proj-3-tuple(v_636)) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (v_637,v_638,v_639) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {141}let v_641: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_640)) then cipherstatepack(1-proj-3-tuple(v_640),minnonce) else fail-any)) in
        {142}let v_642: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_640)) then cipherstatepack(2-proj-3-tuple(v_640),minnonce) else fail-any)) in
        {143}let v_643: bitstring = catch-fail((if success?(1-proj-3-tuple(v_634)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (1-proj-3-tuple(v_634),v_641,v_642) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {144}let (hs_644: handshakestate,re_645: key,plaintext_d: bitstring,valid_646: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-7-tuple(v_615))))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if not-caught-fail(v_617) then (if not-caught-fail(v_624) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (v_617 && 3-proj-3-tuple(v_634)) then (if not-caught-fail(v_635) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (v_635,getpublickey(3-proj-7-tuple(v_615)),2-proj-3-tuple(v_634),true,2-proj-3-tuple(v_643),3-proj-3-tuple(v_643)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {145}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_646);
        {146}insert statestore(alice,bob,statepack_e(hs_644));
        {147}event RecvEnd(valid_646)
    ) | (
        {149}event LeakS(phase0,alice);
        {150}out(pub, key_s(alice))
    ) | (
        {151}phase 1;
        {152}event LeakS(phase1,alice);
        {153}out(pub, key_s(alice))
    )
) | (
    {154}let s_647: keypair = keypairpack(empty,empty) in
    {155}out(pub, getpublickey(s_647));
    (
        {156}let e_648: keypair = keypairpack(empty,empty) in
        {157}let rs_649: key = empty in
        {158}let re_650: key = empty in
        {159}let v_651: bitstring = catch-fail(hash(somename,empty)) in
        {160}let v_652: key = catch-fail(v_651) in
        {161}let v_653: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {162}let v_654: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then symmetricstatepack(v_653,v_652,v_651) else fail-any) else fail-any) else fail-any))) in
        {163}let v_655: symmetricstate = catch-fail((if success?((if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then symmetricstatepack(v_653,v_652,v_651) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then symmetricstatepack(1-proj-3-tuple(v_654),2-proj-3-tuple(v_654),hash(3-proj-3-tuple(v_654),empty)) else fail-any) else fail-any)) in
        {164}let hs_656: handshakestate = (if not-caught-fail(v_655) then handshakestatepack(v_655,s_647,e_648,rs_649,re_650,empty,true) else fail-any) in
        {165}insert statestore(alice,charlie,statepack_a(hs_656))
    ) | (
        {188}get statestore(=alice,=charlie,statepack_a(hs_657: handshakestate)) in
        {166}let v_658: bitstring = catch-fail(handshakestateunpack(hs_657)) in
        {167}let v_659: bitstring = catch-fail((empty,empty,empty)) in
        {168}let v_660: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {169}let v_661: keypair = catch-fail((if not-caught-fail(v_660) then keypairpack(v_660,key_e(alice,charlie)) else fail-any)) in
        {170}let v_662: bitstring = catch-fail(getpublickey(v_661)) in
        {171}let v_663: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_658))) in
        {172}let v_664: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_658)) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then symmetricstatepack(1-proj-3-tuple(v_663),2-proj-3-tuple(v_663),hash(3-proj-3-tuple(v_663),v_662)) else fail-any) else fail-any)) in
        {173}let v_665: bitstring = catch-fail(symmetricstateunpack(v_664)) in
        {174}let v_666: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_665))) in
        {175}let v_667: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_666),2-proj-2-tuple(v_666),3-proj-3-tuple(v_665),msg_a(alice,charlie))) in
        {176}let v_668: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_665))) in
        {177}let v_669: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_666))) && success?(1-proj-3-tuple(v_665))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then cipherstatepack(1-proj-2-tuple(v_668),increment_nonce(2-proj-2-tuple(v_666))) else fail-any) else fail-any)) in
        {178}let v_670: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_665)) && success?(1-proj-3-tuple(v_665))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then (if not-caught-fail(v_667) then (if not-caught-fail(v_669) then (v_669,v_667) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {179}let v_671: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_670),2-proj-3-tuple(v_665),3-proj-3-tuple(v_665)))) in
        {180}let v_672: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_670)) && success?(symmetricstatepack(1-proj-2-tuple(v_670),2-proj-3-tuple(v_665),3-proj-3-tuple(v_665)))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then symmetricstatepack(1-proj-3-tuple(v_671),2-proj-3-tuple(v_671),hash(3-proj-3-tuple(v_671),2-proj-2-tuple(v_670))) else fail-any) else fail-any)) in
        {181}let v_673: bitstring = catch-fail((if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-2-tuple(v_670))))) then (if not-caught-fail(v_672) then (v_672,2-proj-2-tuple(v_670)) else fail-any) else fail-any) else fail-any)) in
        {182}let v_674: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_673),2-proj-7-tuple(v_658),v_661,4-proj-7-tuple(v_658),5-proj-7-tuple(v_658),6-proj-7-tuple(v_658),7-proj-7-tuple(v_658))) in
        {183}let v_675: bitstring = catch-fail(concat3(v_662,2-proj-3-tuple(v_659),2-proj-2-tuple(v_673))) in
        {184}let (hs_676: handshakestate,re_677: key,message_a_678: bitstring) = (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-7-tuple(v_658))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if not-caught-fail(v_661) then (if not-caught-fail(v_662) then (if not-caught-fail(v_664) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then (if not-caught-fail(v_674) then (if not-caught-fail(v_675) then (v_674,5-proj-7-tuple(v_658),v_675) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {185}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {186}insert statestore(alice,charlie,statepack_b(hs_676));
        {187}out(pub, message_a_678)
    ) | (
        {236}get statestore(=alice,=charlie,statepack_b(hs_679: handshakestate)) in
        {189}in(pub, message_b_680: bitstring);
        {190}let v_681: bitstring = catch-fail(handshakestateunpack(hs_679)) in
        {191}let v_682: bitstring = catch-fail(deconcat3(message_b_680)) in
        {192}let v_683: bool = catch-fail(true) in
        {193}let v_684: key = catch-fail(1-proj-3-tuple(v_682)) in
        {194}let v_685: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_681))) in
        {195}let v_686: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_681)) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then symmetricstatepack(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),hash(3-proj-3-tuple(v_685),v_684)) else fail-any) else fail-any)) in
        {196}let v_687: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_681))) in
        {197}let v_688: bitstring = catch-fail(symmetricstateunpack(v_686)) in
        {198}let v_689: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_688),(if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),v_684) else fail-any) else fail-any))) in
        {199}let v_690: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_688),(if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),v_684) else fail-any) else fail-any))) in
        {200}let v_691: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_688),(if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),v_684) else fail-any) else fail-any))) in
        {201}let v_692: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),v_684) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_688))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (v_689,v_690,v_691) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_693: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),v_684) else fail-any) else fail-any)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_692)) then cipherstatepack(2-proj-3-tuple(v_692),minnonce) else fail-any),1-proj-3-tuple(v_692),3-proj-3-tuple(v_688)) else fail-any) else fail-any) else fail-any)) in
        {203}let v_694: bitstring = catch-fail(symmetricstateunpack(v_693)) in
        {204}let v_695: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {205}let v_696: aead = catch-fail(decrypt(1-proj-2-tuple(v_695),2-proj-2-tuple(v_695),3-proj-3-tuple(v_694),2-proj-3-tuple(v_682))) in
        {206}let v_697: bitstring = catch-fail(aeadunpack(v_696)) in
        {207}let v_698: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {208}let v_699: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_695))) && success?(1-proj-3-tuple(v_694))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then cipherstatepack(1-proj-2-tuple(v_698),increment_nonce(2-proj-2-tuple(v_695))) else fail-any) else fail-any)) in
        {209}let v_700: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_682)) && (success?(3-proj-3-tuple(v_694)) && success?(1-proj-3-tuple(v_694)))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then (if not-caught-fail(v_696) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if not-caught-fail(v_699) then (v_699,3-proj-3-tuple(v_697),1-proj-3-tuple(v_697)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {210}let v_701: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) in
        {211}let v_702: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_682)) && success?(symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_701),hash(3-proj-3-tuple(v_701),2-proj-3-tuple(v_682))) else fail-any) else fail-any)) in
        {212}let v_703: bitstring = catch-fail((if success?(2-proj-3-tuple(v_682)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if not-caught-fail(v_702) then (v_702,2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {213}let v_704: key = catch-fail(2-proj-3-tuple(v_703)) in
        {214}let v_705: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_681))) in
        {215}let v_706: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_703))) in
        {216}let v_707: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_706),(if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then dhexp(2-proj-2-tuple(v_705),v_704) else fail-any) else fail-any))) in
        {217}let v_708: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_706),(if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then dhexp(2-proj-2-tuple(v_705),v_704) else fail-any) else fail-any))) in
        {218}let v_709: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_706),(if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then dhexp(2-proj-2-tuple(v_705),v_704) else fail-any) else fail-any))) in
        {219}let v_710: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then dhexp(2-proj-2-tuple(v_705),v_704) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_706))) then (if not-caught-fail(v_707) then (if not-caught-fail(v_708) then (if not-caught-fail(v_709) then (v_707,v_708,v_709) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {220}let v_711: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_681)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then dhexp(2-proj-2-tuple(v_705),v_704) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_703))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_710)) then cipherstatepack(2-proj-3-tuple(v_710),minnonce) else fail-any),1-proj-3-tuple(v_710),3-proj-3-tuple(v_706)) else fail-any) else fail-any) else fail-any)) in
        {221}let v_712: bitstring = catch-fail(symmetricstateunpack(v_711)) in
        {222}let v_713: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_712))) in
        {223}let v_714: aead = catch-fail(decrypt(1-proj-2-tuple(v_713),2-proj-2-tuple(v_713),3-proj-3-tuple(v_712),3-proj-3-tuple(v_682))) in
        {224}let v_715: bitstring = catch-fail(aeadunpack(v_714)) in
        {225}let v_716: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_712))) in
        {226}let v_717: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_713))) && success?(1-proj-3-tuple(v_712))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then cipherstatepack(1-proj-2-tuple(v_716),increment_nonce(2-proj-2-tuple(v_713))) else fail-any) else fail-any)) in
        {227}let v_718: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_682)) && (success?(3-proj-3-tuple(v_712)) && success?(1-proj-3-tuple(v_712)))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then (if not-caught-fail(v_714) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if not-caught-fail(v_717) then (v_717,3-proj-3-tuple(v_715),1-proj-3-tuple(v_715)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_719: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_718),2-proj-3-tuple(v_712),3-proj-3-tuple(v_712)))) in
        {229}let v_720: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_682)) && success?(symmetricstatepack(1-proj-3-tuple(v_718),2-proj-3-tuple(v_712),3-proj-3-tuple(v_712)))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),hash(3-proj-3-tuple(v_719),3-proj-3-tuple(v_682))) else fail-any) else fail-any)) in
        {230}let v_721: bitstring = catch-fail((if success?(3-proj-3-tuple(v_682)) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if not-caught-fail(v_720) then (v_720,2-proj-3-tuple(v_718),3-proj-3-tuple(v_718)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {231}let v_722: key = catch-fail(dhexp(key_s(charlie),g)) in
        {232}let v_723: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_721),2-proj-7-tuple(v_681),3-proj-7-tuple(v_681),v_704,v_684,6-proj-7-tuple(v_681),7-proj-7-tuple(v_681))) in
        {233}let (hs_724: handshakestate,re_725: key,plaintext_b_726: bitstring,valid_727: bool) = (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-7-tuple(v_681))))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then (if not-caught-fail(v_683) then (if not-caught-fail(v_684) then (if not-caught-fail(v_686) then (if not-caught-fail(v_693) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if not-caught-fail(v_704) then (if not-caught-fail(v_711) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if ((3-proj-3-tuple(v_703) && 3-proj-3-tuple(v_721)) && (v_704 = getpublickey((if not-caught-fail(v_722) then keypairpack(v_722,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_723) then (v_723,getpublickey(3-proj-7-tuple(v_681)),2-proj-3-tuple(v_721),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {234}event RecvMsg(alice,charlie,stage_b,plaintext_b_726,valid_727);
        {235}insert statestore(alice,charlie,statepack_c(hs_724))
    ) | (
        {265}get statestore(=alice,=charlie,statepack_c(hs_728: handshakestate)) in
        {237}let v_729: bitstring = catch-fail(handshakestateunpack(hs_728)) in
        {238}let v_730: bitstring = catch-fail((empty,empty,empty)) in
        {239}let v_731: key = catch-fail(dhexp(key_s(alice),g)) in
        {240}let v_732: keypair = catch-fail((if not-caught-fail(v_731) then keypairpack(v_731,key_s(alice)) else fail-any)) in
        {241}let v_733: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_729))) in
        {242}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {243}let v_735: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_734),2-proj-2-tuple(v_734),3-proj-3-tuple(v_733),getpublickey(v_732))) in
        {244}let v_736: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {245}let v_737: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_734))) && success?(1-proj-3-tuple(v_733))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then cipherstatepack(1-proj-2-tuple(v_736),increment_nonce(2-proj-2-tuple(v_734))) else fail-any) else fail-any)) in
        {246}let v_738: bitstring = catch-fail((if (success?(getpublickey(v_732)) && (success?(3-proj-3-tuple(v_733)) && success?(1-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then (if not-caught-fail(v_735) then (if not-caught-fail(v_737) then (v_737,v_735) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_739: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_738),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) in
        {248}let v_740: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_738)) && success?(symmetricstatepack(1-proj-2-tuple(v_738),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_739),hash(3-proj-3-tuple(v_739),2-proj-2-tuple(v_738))) else fail-any) else fail-any)) in
        {249}let v_741: bitstring = catch-fail((if (success?(getpublickey(v_732)) && success?(1-proj-7-tuple(v_729))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then (if not-caught-fail(v_740) then (v_740,2-proj-2-tuple(v_738)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_742: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_741))) in
        {251}let v_743: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_742))) in
        {252}let v_744: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_743),2-proj-2-tuple(v_743),3-proj-3-tuple(v_742),msg_c(alice,charlie))) in
        {253}let v_745: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_742))) in
        {254}let v_746: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_743))) && success?(1-proj-3-tuple(v_742))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then cipherstatepack(1-proj-2-tuple(v_745),increment_nonce(2-proj-2-tuple(v_743))) else fail-any) else fail-any)) in
        {255}let v_747: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_742)) && success?(1-proj-3-tuple(v_742))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then (if not-caught-fail(v_744) then (if not-caught-fail(v_746) then (v_746,v_744) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_748: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_747),2-proj-3-tuple(v_742),3-proj-3-tuple(v_742)))) in
        {257}let v_749: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_747)) && success?(symmetricstatepack(1-proj-2-tuple(v_747),2-proj-3-tuple(v_742),3-proj-3-tuple(v_742)))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack(1-proj-3-tuple(v_748),2-proj-3-tuple(v_748),hash(3-proj-3-tuple(v_748),2-proj-2-tuple(v_747))) else fail-any) else fail-any)) in
        {258}let v_750: bitstring = catch-fail((if success?(1-proj-2-tuple(v_741)) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then (if not-caught-fail(v_749) then (v_749,2-proj-2-tuple(v_747)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {259}let v_751: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_750),v_732,3-proj-7-tuple(v_729),4-proj-7-tuple(v_729),5-proj-7-tuple(v_729),6-proj-7-tuple(v_729),7-proj-7-tuple(v_729))) in
        {260}let v_752: bitstring = catch-fail(concat3(1-proj-3-tuple(v_730),2-proj-2-tuple(v_741),2-proj-2-tuple(v_750))) in
        {261}let (hs_753: handshakestate,re_754: key,message_c_755: bitstring) = (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-7-tuple(v_729))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then (v_751,5-proj-7-tuple(v_729),v_752) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {262}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {263}insert statestore(alice,charlie,statepack_d(hs_753));
        {264}out(pub, message_c_755)
    ) | (
        {300}get statestore(=alice,=charlie,statepack_d(hs_756: handshakestate)) in
        {266}in(pub, message_d_757: bitstring);
        {267}let v_758: bitstring = catch-fail(handshakestateunpack(hs_756)) in
        {268}let v_759: bitstring = catch-fail(deconcat3(message_d_757)) in
        {269}let v_760: bool = catch-fail(true) in
        {270}let v_761: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_758))) in
        {271}let v_762: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_758))) in
        {272}let v_763: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_762),(if (success?(5-proj-7-tuple(v_758)) && success?(2-proj-7-tuple(v_758))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_758)) else fail-any) else fail-any))) in
        {273}let v_764: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_762),(if (success?(5-proj-7-tuple(v_758)) && success?(2-proj-7-tuple(v_758))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_758)) else fail-any) else fail-any))) in
        {274}let v_765: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_762),(if (success?(5-proj-7-tuple(v_758)) && success?(2-proj-7-tuple(v_758))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_758)) else fail-any) else fail-any))) in
        {275}let v_766: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_758)) && success?(2-proj-7-tuple(v_758))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_758)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_762))) then (if not-caught-fail(v_763) then (if not-caught-fail(v_764) then (if not-caught-fail(v_765) then (v_763,v_764,v_765) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {276}let v_767: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_758)) && success?(2-proj-7-tuple(v_758))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_758)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_758))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_766)) then cipherstatepack(2-proj-3-tuple(v_766),minnonce) else fail-any),1-proj-3-tuple(v_766),3-proj-3-tuple(v_762)) else fail-any) else fail-any) else fail-any)) in
        {277}let v_768: bitstring = catch-fail(symmetricstateunpack(v_767)) in
        {278}let v_769: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_768))) in
        {279}let v_770: aead = catch-fail(decrypt(1-proj-2-tuple(v_769),2-proj-2-tuple(v_769),3-proj-3-tuple(v_768),3-proj-3-tuple(v_759))) in
        {280}let v_771: bitstring = catch-fail(aeadunpack(v_770)) in
        {281}let v_772: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_768))) in
        {282}let v_773: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_769))) && success?(1-proj-3-tuple(v_768))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then cipherstatepack(1-proj-2-tuple(v_772),increment_nonce(2-proj-2-tuple(v_769))) else fail-any) else fail-any)) in
        {283}let v_774: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_759)) && (success?(3-proj-3-tuple(v_768)) && success?(1-proj-3-tuple(v_768)))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then (if not-caught-fail(v_770) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if not-caught-fail(v_773) then (v_773,3-proj-3-tuple(v_771),1-proj-3-tuple(v_771)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {284}let v_775: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_768),3-proj-3-tuple(v_768)))) in
        {285}let v_776: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_759)) && success?(symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_768),3-proj-3-tuple(v_768)))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then symmetricstatepack(1-proj-3-tuple(v_775),2-proj-3-tuple(v_775),hash(3-proj-3-tuple(v_775),3-proj-3-tuple(v_759))) else fail-any) else fail-any)) in
        {286}let v_777: bitstring = catch-fail((if success?(3-proj-3-tuple(v_759)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if not-caught-fail(v_776) then (v_776,2-proj-3-tuple(v_774),3-proj-3-tuple(v_774)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {287}let v_778: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_777),2-proj-7-tuple(v_758),3-proj-7-tuple(v_758),4-proj-7-tuple(v_758),5-proj-7-tuple(v_758),6-proj-7-tuple(v_758),7-proj-7-tuple(v_758))) in
        {288}let v_779: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_777))) in
        {289}let v_780: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_779),zero)) in
        {290}let v_781: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_779),zero)) in
        {291}let v_782: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_779),zero)) in
        {292}let v_783: bitstring = catch-fail((if success?(2-proj-3-tuple(v_779)) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (if not-caught-fail(v_782) then (v_780,v_781,v_782) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_784: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_783)) then cipherstatepack(1-proj-3-tuple(v_783),minnonce) else fail-any)) in
        {294}let v_785: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_783)) then cipherstatepack(2-proj-3-tuple(v_783),minnonce) else fail-any)) in
        {295}let v_786: bitstring = catch-fail((if success?(1-proj-3-tuple(v_777)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then (if not-caught-fail(v_784) then (if not-caught-fail(v_785) then (1-proj-3-tuple(v_777),v_784,v_785) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let (hs_787: handshakestate,re_788: key,plaintext_d_789: bitstring,valid_790: bool,cs1_791: cipherstate,cs2_792: cipherstate) = (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-7-tuple(v_758))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_767) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then (if (v_760 && 3-proj-3-tuple(v_777)) then (if not-caught-fail(v_778) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then (v_778,getpublickey(3-proj-7-tuple(v_758)),2-proj-3-tuple(v_777),true,2-proj-3-tuple(v_786),3-proj-3-tuple(v_786)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {297}event RecvMsg(alice,charlie,stage_d,plaintext_d_789,valid_790);
        {298}insert statestore(alice,charlie,statepack_e(hs_787));
        {299}event RecvEnd(valid_790)
    ) | (
        {301}event LeakS(phase0,alice);
        {302}out(pub, key_s(alice))
    ) | (
        {303}phase 1;
        {304}event LeakS(phase1,alice);
        {305}out(pub, key_s(alice))
    )
) | (
    {306}let s_793: keypair = keypairpack(empty,empty) in
    {307}out(pub, getpublickey(s_793));
    (
        {308}let e_794: keypair = keypairpack(empty,empty) in
        {309}let rs_795: key = empty in
        {310}let re_796: key = empty in
        {311}let v_797: bitstring = catch-fail(hash(somename,empty)) in
        {312}let v_798: key = catch-fail(v_797) in
        {313}let v_799: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {314}let v_800: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then symmetricstatepack(v_799,v_798,v_797) else fail-any) else fail-any) else fail-any))) in
        {315}let v_801: symmetricstate = catch-fail((if success?((if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then symmetricstatepack(v_799,v_798,v_797) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then symmetricstatepack(1-proj-3-tuple(v_800),2-proj-3-tuple(v_800),hash(3-proj-3-tuple(v_800),empty)) else fail-any) else fail-any)) in
        {316}let hs_802: handshakestate = (if not-caught-fail(v_801) then handshakestatepack(v_801,s_793,e_794,rs_795,re_796,empty,false) else fail-any) in
        {317}insert statestore(bob,alice,statepack_a(hs_802))
    ) | (
        {339}get statestore(=bob,=alice,statepack_a(hs_803: handshakestate)) in
        {318}in(pub, message_a_804: bitstring);
        {319}let v_805: bitstring = catch-fail(handshakestateunpack(hs_803)) in
        {320}let v_806: bitstring = catch-fail(deconcat3(message_a_804)) in
        {321}let v_807: bool = catch-fail(true) in
        {322}let v_808: key = catch-fail(1-proj-3-tuple(v_806)) in
        {323}let v_809: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_805))) in
        {324}let v_810: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_805)) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_809),hash(3-proj-3-tuple(v_809),v_808)) else fail-any) else fail-any)) in
        {325}let v_811: bitstring = catch-fail(symmetricstateunpack(v_810)) in
        {326}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_811))) in
        {327}let v_813: aead = catch-fail(decrypt(1-proj-2-tuple(v_812),2-proj-2-tuple(v_812),3-proj-3-tuple(v_811),3-proj-3-tuple(v_806))) in
        {328}let v_814: bitstring = catch-fail(aeadunpack(v_813)) in
        {329}let v_815: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_811))) in
        {330}let v_816: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_812))) && success?(1-proj-3-tuple(v_811))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-2-tuple(v_815))))) then cipherstatepack(1-proj-2-tuple(v_815),increment_nonce(2-proj-2-tuple(v_812))) else fail-any) else fail-any)) in
        {331}let v_817: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_806)) && (success?(3-proj-3-tuple(v_811)) && success?(1-proj-3-tuple(v_811)))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then (if not-caught-fail(v_813) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if not-caught-fail(v_816) then (v_816,3-proj-3-tuple(v_814),1-proj-3-tuple(v_814)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {332}let v_818: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_817),2-proj-3-tuple(v_811),3-proj-3-tuple(v_811)))) in
        {333}let v_819: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_806)) && success?(symmetricstatepack(1-proj-3-tuple(v_817),2-proj-3-tuple(v_811),3-proj-3-tuple(v_811)))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_818),hash(3-proj-3-tuple(v_818),3-proj-3-tuple(v_806))) else fail-any) else fail-any)) in
        {334}let v_820: bitstring = catch-fail((if success?(3-proj-3-tuple(v_806)) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if not-caught-fail(v_819) then (v_819,2-proj-3-tuple(v_817),3-proj-3-tuple(v_817)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {335}let v_821: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_820),2-proj-7-tuple(v_805),3-proj-7-tuple(v_805),4-proj-7-tuple(v_805),v_808,6-proj-7-tuple(v_805),7-proj-7-tuple(v_805))) in
        {336}let (hs_822: handshakestate,re_823: key,plaintext_a: bitstring,valid_824: bool) = (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-7-tuple(v_805))))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if not-caught-fail(v_807) then (if not-caught-fail(v_808) then (if not-caught-fail(v_810) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (v_807 && 3-proj-3-tuple(v_820)) then (if not-caught-fail(v_821) then (v_821,getpublickey(3-proj-7-tuple(v_805)),2-proj-3-tuple(v_820),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {337}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_824);
        {338}insert statestore(bob,alice,statepack_b(hs_822))
    ) | (
        {387}get statestore(=bob,=alice,statepack_b(hs_825: handshakestate)) in
        {340}let v_826: bitstring = catch-fail(handshakestateunpack(hs_825)) in
        {341}let v_827: bitstring = catch-fail((empty,empty,empty)) in
        {342}let v_828: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {343}let v_829: keypair = catch-fail((if not-caught-fail(v_828) then keypairpack(v_828,key_e(bob,alice)) else fail-any)) in
        {344}let v_830: bitstring = catch-fail(getpublickey(v_829)) in
        {345}let v_831: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_826))) in
        {346}let v_832: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_826)) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then symmetricstatepack(1-proj-3-tuple(v_831),2-proj-3-tuple(v_831),hash(3-proj-3-tuple(v_831),v_830)) else fail-any) else fail-any)) in
        {347}let v_833: bitstring = catch-fail(keypairunpack(v_829)) in
        {348}let v_834: bitstring = catch-fail(symmetricstateunpack(v_832)) in
        {349}let v_835: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_834),(if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then dhexp(2-proj-2-tuple(v_833),5-proj-7-tuple(v_826)) else fail-any) else fail-any))) in
        {350}let v_836: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_834),(if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then dhexp(2-proj-2-tuple(v_833),5-proj-7-tuple(v_826)) else fail-any) else fail-any))) in
        {351}let v_837: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_834),(if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then dhexp(2-proj-2-tuple(v_833),5-proj-7-tuple(v_826)) else fail-any) else fail-any))) in
        {352}let v_838: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then dhexp(2-proj-2-tuple(v_833),5-proj-7-tuple(v_826)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_834))) then (if not-caught-fail(v_835) then (if not-caught-fail(v_836) then (if not-caught-fail(v_837) then (v_835,v_836,v_837) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {353}let v_839: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then dhexp(2-proj-2-tuple(v_833),5-proj-7-tuple(v_826)) else fail-any) else fail-any)) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_838)) then cipherstatepack(2-proj-3-tuple(v_838),minnonce) else fail-any),1-proj-3-tuple(v_838),3-proj-3-tuple(v_834)) else fail-any) else fail-any) else fail-any)) in
        {354}let v_840: key = catch-fail(dhexp(key_s(bob),g)) in
        {355}let v_841: keypair = catch-fail((if not-caught-fail(v_840) then keypairpack(v_840,key_s(bob)) else fail-any)) in
        {356}let v_842: bitstring = catch-fail(symmetricstateunpack(v_839)) in
        {357}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {358}let v_844: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_843),2-proj-2-tuple(v_843),3-proj-3-tuple(v_842),getpublickey(v_841))) in
        {359}let v_845: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {360}let v_846: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_843))) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then cipherstatepack(1-proj-2-tuple(v_845),increment_nonce(2-proj-2-tuple(v_843))) else fail-any) else fail-any)) in
        {361}let v_847: bitstring = catch-fail((if (success?(getpublickey(v_841)) && (success?(3-proj-3-tuple(v_842)) && success?(1-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (v_846,v_844) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {362}let v_848: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) in
        {363}let v_849: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_847)) && success?(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_848),hash(3-proj-3-tuple(v_848),2-proj-2-tuple(v_847))) else fail-any) else fail-any)) in
        {364}let v_850: bitstring = catch-fail((if success?(getpublickey(v_841)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if not-caught-fail(v_849) then (v_849,2-proj-2-tuple(v_847)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {365}let v_851: bitstring = catch-fail(keypairunpack(v_841)) in
        {366}let v_852: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_850))) in
        {367}let v_853: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_852),(if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_826)) else fail-any) else fail-any))) in
        {368}let v_854: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_852),(if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_826)) else fail-any) else fail-any))) in
        {369}let v_855: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_852),(if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_826)) else fail-any) else fail-any))) in
        {370}let v_856: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_826)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_852))) then (if not-caught-fail(v_853) then (if not-caught-fail(v_854) then (if not-caught-fail(v_855) then (v_853,v_854,v_855) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {371}let v_857: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_826)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_826)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_850))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_856)) then cipherstatepack(2-proj-3-tuple(v_856),minnonce) else fail-any),1-proj-3-tuple(v_856),3-proj-3-tuple(v_852)) else fail-any) else fail-any) else fail-any)) in
        {372}let v_858: bitstring = catch-fail(symmetricstateunpack(v_857)) in
        {373}let v_859: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_858))) in
        {374}let v_860: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_859),2-proj-2-tuple(v_859),3-proj-3-tuple(v_858),msg_b(bob,alice))) in
        {375}let v_861: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_858))) in
        {376}let v_862: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_859))) && success?(1-proj-3-tuple(v_858))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then cipherstatepack(1-proj-2-tuple(v_861),increment_nonce(2-proj-2-tuple(v_859))) else fail-any) else fail-any)) in
        {377}let v_863: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_858)) && success?(1-proj-3-tuple(v_858))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-2-tuple(v_859))))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_862) then (v_862,v_860) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {378}let v_864: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_863),2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)))) in
        {379}let v_865: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_863)) && success?(symmetricstatepack(1-proj-2-tuple(v_863),2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then symmetricstatepack(1-proj-3-tuple(v_864),2-proj-3-tuple(v_864),hash(3-proj-3-tuple(v_864),2-proj-2-tuple(v_863))) else fail-any) else fail-any)) in
        {380}let v_866: bitstring = catch-fail((if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then (if not-caught-fail(v_865) then (v_865,2-proj-2-tuple(v_863)) else fail-any) else fail-any) else fail-any)) in
        {381}let v_867: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_866),v_841,v_829,4-proj-7-tuple(v_826),5-proj-7-tuple(v_826),6-proj-7-tuple(v_826),7-proj-7-tuple(v_826))) in
        {382}let v_868: bitstring = catch-fail(concat3(v_830,2-proj-2-tuple(v_850),2-proj-2-tuple(v_866))) in
        {383}let (hs_869: handshakestate,re_870: key,message_b_871: bitstring) = (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-7-tuple(v_826))))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if not-caught-fail(v_832) then (if not-caught-fail(v_839) then (if not-caught-fail(v_841) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_857) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then (if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (v_867,5-proj-7-tuple(v_826),v_868) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {384}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {385}insert statestore(bob,alice,statepack_c(hs_869));
        {386}out(pub, message_b_871)
    ) | (
        {418}get statestore(=bob,=alice,statepack_c(hs_872: handshakestate)) in
        {388}in(pub, message_c_873: bitstring);
        {389}let v_874: bitstring = catch-fail(handshakestateunpack(hs_872)) in
        {390}let v_875: bitstring = catch-fail(deconcat3(message_c_873)) in
        {391}let v_876: bool = catch-fail(true) in
        {392}let v_877: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_874))) in
        {393}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_877))) in
        {394}let v_879: aead = catch-fail(decrypt(1-proj-2-tuple(v_878),2-proj-2-tuple(v_878),3-proj-3-tuple(v_877),2-proj-3-tuple(v_875))) in
        {395}let v_880: bitstring = catch-fail(aeadunpack(v_879)) in
        {396}let v_881: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_877))) in
        {397}let v_882: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_878))) && success?(1-proj-3-tuple(v_877))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-2-tuple(v_881))))) then cipherstatepack(1-proj-2-tuple(v_881),increment_nonce(2-proj-2-tuple(v_878))) else fail-any) else fail-any)) in
        {398}let v_883: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_875)) && (success?(3-proj-3-tuple(v_877)) && success?(1-proj-3-tuple(v_877)))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then (if not-caught-fail(v_879) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (v_882,3-proj-3-tuple(v_880),1-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_884: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_877),3-proj-3-tuple(v_877)))) in
        {400}let v_885: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_875)) && success?(symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_877),3-proj-3-tuple(v_877)))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then symmetricstatepack(1-proj-3-tuple(v_884),2-proj-3-tuple(v_884),hash(3-proj-3-tuple(v_884),2-proj-3-tuple(v_875))) else fail-any) else fail-any)) in
        {401}let v_886: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_875)) && success?(1-proj-7-tuple(v_874))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if not-caught-fail(v_885) then (v_885,2-proj-3-tuple(v_883),3-proj-3-tuple(v_883)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {402}let v_887: key = catch-fail(2-proj-3-tuple(v_886)) in
        {403}let v_888: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_886))) in
        {404}let v_889: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_888))) in
        {405}let v_890: aead = catch-fail(decrypt(1-proj-2-tuple(v_889),2-proj-2-tuple(v_889),3-proj-3-tuple(v_888),3-proj-3-tuple(v_875))) in
        {406}let v_891: bitstring = catch-fail(aeadunpack(v_890)) in
        {407}let v_892: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_888))) in
        {408}let v_893: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_889))) && success?(1-proj-3-tuple(v_888))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then cipherstatepack(1-proj-2-tuple(v_892),increment_nonce(2-proj-2-tuple(v_889))) else fail-any) else fail-any)) in
        {409}let v_894: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_875)) && (success?(3-proj-3-tuple(v_888)) && success?(1-proj-3-tuple(v_888)))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then (if not-caught-fail(v_890) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if not-caught-fail(v_893) then (v_893,3-proj-3-tuple(v_891),1-proj-3-tuple(v_891)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {410}let v_895: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_894),2-proj-3-tuple(v_888),3-proj-3-tuple(v_888)))) in
        {411}let v_896: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_875)) && success?(symmetricstatepack(1-proj-3-tuple(v_894),2-proj-3-tuple(v_888),3-proj-3-tuple(v_888)))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then symmetricstatepack(1-proj-3-tuple(v_895),2-proj-3-tuple(v_895),hash(3-proj-3-tuple(v_895),3-proj-3-tuple(v_875))) else fail-any) else fail-any)) in
        {412}let v_897: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_875)) && success?(1-proj-3-tuple(v_886))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if not-caught-fail(v_896) then (v_896,2-proj-3-tuple(v_894),3-proj-3-tuple(v_894)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {413}let v_898: key = catch-fail(dhexp(key_s(alice),g)) in
        {414}let v_899: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_897),2-proj-7-tuple(v_874),3-proj-7-tuple(v_874),v_887,5-proj-7-tuple(v_874),6-proj-7-tuple(v_874),7-proj-7-tuple(v_874))) in
        {415}let (hs_900: handshakestate,re_901: key,plaintext_c: bitstring,valid_902: bool) = (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-7-tuple(v_874))))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if not-caught-fail(v_876) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if not-caught-fail(v_887) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if ((3-proj-3-tuple(v_886) && 3-proj-3-tuple(v_897)) && (v_887 = getpublickey((if not-caught-fail(v_898) then keypairpack(v_898,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_899) then (v_899,getpublickey(3-proj-7-tuple(v_874)),2-proj-3-tuple(v_897),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {416}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_902);
        {417}insert statestore(bob,alice,statepack_d(hs_900))
    ) | (
        {451}get statestore(=bob,=alice,statepack_d(hs_903: handshakestate)) in
        {419}let v_904: bitstring = catch-fail(handshakestateunpack(hs_903)) in
        {420}let v_905: bitstring = catch-fail((empty,empty,empty)) in
        {421}let v_906: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_904))) in
        {422}let v_907: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_904))) in
        {423}let v_908: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_907),(if (success?(4-proj-7-tuple(v_904)) && success?(3-proj-7-tuple(v_904))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),4-proj-7-tuple(v_904)) else fail-any) else fail-any))) in
        {424}let v_909: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_907),(if (success?(4-proj-7-tuple(v_904)) && success?(3-proj-7-tuple(v_904))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),4-proj-7-tuple(v_904)) else fail-any) else fail-any))) in
        {425}let v_910: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_907),(if (success?(4-proj-7-tuple(v_904)) && success?(3-proj-7-tuple(v_904))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),4-proj-7-tuple(v_904)) else fail-any) else fail-any))) in
        {426}let v_911: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_904)) && success?(3-proj-7-tuple(v_904))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),4-proj-7-tuple(v_904)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_907))) then (if not-caught-fail(v_908) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (v_908,v_909,v_910) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let v_912: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_904)) && success?(3-proj-7-tuple(v_904))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),4-proj-7-tuple(v_904)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_904))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_911)) then cipherstatepack(2-proj-3-tuple(v_911),minnonce) else fail-any),1-proj-3-tuple(v_911),3-proj-3-tuple(v_907)) else fail-any) else fail-any) else fail-any)) in
        {428}let v_913: bitstring = catch-fail(symmetricstateunpack(v_912)) in
        {429}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {430}let v_915: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_914),2-proj-2-tuple(v_914),3-proj-3-tuple(v_913),msg_d(bob,alice))) in
        {431}let v_916: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {432}let v_917: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_914))) && success?(1-proj-3-tuple(v_913))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then cipherstatepack(1-proj-2-tuple(v_916),increment_nonce(2-proj-2-tuple(v_914))) else fail-any) else fail-any)) in
        {433}let v_918: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_913)) && success?(1-proj-3-tuple(v_913))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then (if not-caught-fail(v_915) then (if not-caught-fail(v_917) then (v_917,v_915) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {434}let v_919: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_918),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) in
        {435}let v_920: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_918)) && success?(symmetricstatepack(1-proj-2-tuple(v_918),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_919),hash(3-proj-3-tuple(v_919),2-proj-2-tuple(v_918))) else fail-any) else fail-any)) in
        {436}let v_921: bitstring = catch-fail((if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-2-tuple(v_918))))) then (if not-caught-fail(v_920) then (v_920,2-proj-2-tuple(v_918)) else fail-any) else fail-any) else fail-any)) in
        {437}let v_922: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_921),2-proj-7-tuple(v_904),3-proj-7-tuple(v_904),4-proj-7-tuple(v_904),5-proj-7-tuple(v_904),6-proj-7-tuple(v_904),7-proj-7-tuple(v_904))) in
        {438}let v_923: bitstring = catch-fail(concat3(1-proj-3-tuple(v_905),2-proj-3-tuple(v_905),2-proj-2-tuple(v_921))) in
        {439}let v_924: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_921))) in
        {440}let v_925: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_924),zero)) in
        {441}let v_926: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_924),zero)) in
        {442}let v_927: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_924),zero)) in
        {443}let v_928: bitstring = catch-fail((if success?(2-proj-3-tuple(v_924)) then (if not-caught-fail(v_925) then (if not-caught-fail(v_926) then (if not-caught-fail(v_927) then (v_925,v_926,v_927) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {444}let v_929: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_928)) then cipherstatepack(1-proj-3-tuple(v_928),minnonce) else fail-any)) in
        {445}let v_930: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_928)) then cipherstatepack(2-proj-3-tuple(v_928),minnonce) else fail-any)) in
        {446}let v_931: bitstring = catch-fail((if success?(1-proj-2-tuple(v_921)) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if not-caught-fail(v_929) then (if not-caught-fail(v_930) then (1-proj-2-tuple(v_921),v_929,v_930) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {447}let (hs_932: handshakestate,re_933: key,message_d_934: bitstring,cs1_935: cipherstate,cs2_936: cipherstate) = (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-7-tuple(v_904))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then (if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (v_922,5-proj-7-tuple(v_904),v_923,2-proj-3-tuple(v_931),3-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {448}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {449}insert statestore(bob,alice,statepack_e(hs_932));
        {450}out(pub, message_d_934)
    ) | (
        {452}event LeakS(phase0,bob);
        {453}out(pub, key_s(bob))
    ) | (
        {454}phase 1;
        {455}event LeakS(phase1,bob);
        {456}out(pub, key_s(bob))
    )
) | (
    {457}let s_937: keypair = keypairpack(empty,empty) in
    {458}out(pub, getpublickey(s_937));
    (
        {459}let e_938: keypair = keypairpack(empty,empty) in
        {460}let rs_939: key = empty in
        {461}let re_940: key = empty in
        {462}let v_941: bitstring = catch-fail(hash(somename,empty)) in
        {463}let v_942: key = catch-fail(v_941) in
        {464}let v_943: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {465}let v_944: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_941) then (if not-caught-fail(v_942) then (if not-caught-fail(v_943) then symmetricstatepack(v_943,v_942,v_941) else fail-any) else fail-any) else fail-any))) in
        {466}let v_945: symmetricstate = catch-fail((if success?((if not-caught-fail(v_941) then (if not-caught-fail(v_942) then (if not-caught-fail(v_943) then symmetricstatepack(v_943,v_942,v_941) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then symmetricstatepack(1-proj-3-tuple(v_944),2-proj-3-tuple(v_944),hash(3-proj-3-tuple(v_944),empty)) else fail-any) else fail-any)) in
        {467}let hs_946: handshakestate = (if not-caught-fail(v_945) then handshakestatepack(v_945,s_937,e_938,rs_939,re_940,empty,false) else fail-any) in
        {468}insert statestore(bob,charlie,statepack_a(hs_946))
    ) | (
        {490}get statestore(=bob,=charlie,statepack_a(hs_947: handshakestate)) in
        {469}in(pub, message_a_948: bitstring);
        {470}let v_949: bitstring = catch-fail(handshakestateunpack(hs_947)) in
        {471}let v_950: bitstring = catch-fail(deconcat3(message_a_948)) in
        {472}let v_951: bool = catch-fail(true) in
        {473}let v_952: key = catch-fail(1-proj-3-tuple(v_950)) in
        {474}let v_953: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_949))) in
        {475}let v_954: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_949)) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then symmetricstatepack(1-proj-3-tuple(v_953),2-proj-3-tuple(v_953),hash(3-proj-3-tuple(v_953),v_952)) else fail-any) else fail-any)) in
        {476}let v_955: bitstring = catch-fail(symmetricstateunpack(v_954)) in
        {477}let v_956: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {478}let v_957: aead = catch-fail(decrypt(1-proj-2-tuple(v_956),2-proj-2-tuple(v_956),3-proj-3-tuple(v_955),3-proj-3-tuple(v_950))) in
        {479}let v_958: bitstring = catch-fail(aeadunpack(v_957)) in
        {480}let v_959: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {481}let v_960: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_956))) && success?(1-proj-3-tuple(v_955))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then cipherstatepack(1-proj-2-tuple(v_959),increment_nonce(2-proj-2-tuple(v_956))) else fail-any) else fail-any)) in
        {482}let v_961: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_950)) && (success?(3-proj-3-tuple(v_955)) && success?(1-proj-3-tuple(v_955)))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then (if not-caught-fail(v_957) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if not-caught-fail(v_960) then (v_960,3-proj-3-tuple(v_958),1-proj-3-tuple(v_958)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_962: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) in
        {484}let v_963: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_950)) && success?(symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then symmetricstatepack(1-proj-3-tuple(v_962),2-proj-3-tuple(v_962),hash(3-proj-3-tuple(v_962),3-proj-3-tuple(v_950))) else fail-any) else fail-any)) in
        {485}let v_964: bitstring = catch-fail((if success?(3-proj-3-tuple(v_950)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_963) then (v_963,2-proj-3-tuple(v_961),3-proj-3-tuple(v_961)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {486}let v_965: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_964),2-proj-7-tuple(v_949),3-proj-7-tuple(v_949),4-proj-7-tuple(v_949),v_952,6-proj-7-tuple(v_949),7-proj-7-tuple(v_949))) in
        {487}let (hs_966: handshakestate,re_967: key,plaintext_a_968: bitstring,valid_969: bool) = (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-7-tuple(v_949))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_951) then (if not-caught-fail(v_952) then (if not-caught-fail(v_954) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if (v_951 && 3-proj-3-tuple(v_964)) then (if not-caught-fail(v_965) then (v_965,getpublickey(3-proj-7-tuple(v_949)),2-proj-3-tuple(v_964),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {488}event RecvMsg(bob,charlie,stage_a,plaintext_a_968,valid_969);
        {489}insert statestore(bob,charlie,statepack_b(hs_966))
    ) | (
        {538}get statestore(=bob,=charlie,statepack_b(hs_970: handshakestate)) in
        {491}let v_971: bitstring = catch-fail(handshakestateunpack(hs_970)) in
        {492}let v_972: bitstring = catch-fail((empty,empty,empty)) in
        {493}let v_973: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {494}let v_974: keypair = catch-fail((if not-caught-fail(v_973) then keypairpack(v_973,key_e(bob,charlie)) else fail-any)) in
        {495}let v_975: bitstring = catch-fail(getpublickey(v_974)) in
        {496}let v_976: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_971))) in
        {497}let v_977: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_971)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then symmetricstatepack(1-proj-3-tuple(v_976),2-proj-3-tuple(v_976),hash(3-proj-3-tuple(v_976),v_975)) else fail-any) else fail-any)) in
        {498}let v_978: bitstring = catch-fail(keypairunpack(v_974)) in
        {499}let v_979: bitstring = catch-fail(symmetricstateunpack(v_977)) in
        {500}let v_980: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {501}let v_981: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {502}let v_982: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {503}let v_983: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_979))) then (if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (if not-caught-fail(v_982) then (v_980,v_981,v_982) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {504}let v_984: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_983)) then cipherstatepack(2-proj-3-tuple(v_983),minnonce) else fail-any),1-proj-3-tuple(v_983),3-proj-3-tuple(v_979)) else fail-any) else fail-any) else fail-any)) in
        {505}let v_985: key = catch-fail(dhexp(key_s(bob),g)) in
        {506}let v_986: keypair = catch-fail((if not-caught-fail(v_985) then keypairpack(v_985,key_s(bob)) else fail-any)) in
        {507}let v_987: bitstring = catch-fail(symmetricstateunpack(v_984)) in
        {508}let v_988: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_987))) in
        {509}let v_989: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_988),2-proj-2-tuple(v_988),3-proj-3-tuple(v_987),getpublickey(v_986))) in
        {510}let v_990: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_987))) in
        {511}let v_991: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_988))) && success?(1-proj-3-tuple(v_987))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then cipherstatepack(1-proj-2-tuple(v_990),increment_nonce(2-proj-2-tuple(v_988))) else fail-any) else fail-any)) in
        {512}let v_992: bitstring = catch-fail((if (success?(getpublickey(v_986)) && (success?(3-proj-3-tuple(v_987)) && success?(1-proj-3-tuple(v_987)))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then (if not-caught-fail(v_989) then (if not-caught-fail(v_991) then (v_991,v_989) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {513}let v_993: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_992),2-proj-3-tuple(v_987),3-proj-3-tuple(v_987)))) in
        {514}let v_994: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_992)) && success?(symmetricstatepack(1-proj-2-tuple(v_992),2-proj-3-tuple(v_987),3-proj-3-tuple(v_987)))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then symmetricstatepack(1-proj-3-tuple(v_993),2-proj-3-tuple(v_993),hash(3-proj-3-tuple(v_993),2-proj-2-tuple(v_992))) else fail-any) else fail-any)) in
        {515}let v_995: bitstring = catch-fail((if success?(getpublickey(v_986)) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-3-tuple(v_987))))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then (if not-caught-fail(v_994) then (v_994,2-proj-2-tuple(v_992)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {516}let v_996: bitstring = catch-fail(keypairunpack(v_986)) in
        {517}let v_997: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_995))) in
        {518}let v_998: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_997),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then dhexp(2-proj-2-tuple(v_996),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {519}let v_999: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_997),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then dhexp(2-proj-2-tuple(v_996),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {520}let v_1000: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_997),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then dhexp(2-proj-2-tuple(v_996),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {521}let v_1001: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then dhexp(2-proj-2-tuple(v_996),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_997))) then (if not-caught-fail(v_998) then (if not-caught-fail(v_999) then (if not-caught-fail(v_1000) then (v_998,v_999,v_1000) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {522}let v_1002: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then dhexp(2-proj-2-tuple(v_996),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_995))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1001)) then cipherstatepack(2-proj-3-tuple(v_1001),minnonce) else fail-any),1-proj-3-tuple(v_1001),3-proj-3-tuple(v_997)) else fail-any) else fail-any) else fail-any)) in
        {523}let v_1003: bitstring = catch-fail(symmetricstateunpack(v_1002)) in
        {524}let v_1004: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1003))) in
        {525}let v_1005: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1004),2-proj-2-tuple(v_1004),3-proj-3-tuple(v_1003),msg_b(bob,charlie))) in
        {526}let v_1006: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1003))) in
        {527}let v_1007: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1004))) && success?(1-proj-3-tuple(v_1003))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then cipherstatepack(1-proj-2-tuple(v_1006),increment_nonce(2-proj-2-tuple(v_1004))) else fail-any) else fail-any)) in
        {528}let v_1008: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1003)) && success?(1-proj-3-tuple(v_1003))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1007) then (v_1007,v_1005) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1009: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1008),2-proj-3-tuple(v_1003),3-proj-3-tuple(v_1003)))) in
        {530}let v_1010: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1008)) && success?(symmetricstatepack(1-proj-2-tuple(v_1008),2-proj-3-tuple(v_1003),3-proj-3-tuple(v_1003)))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then symmetricstatepack(1-proj-3-tuple(v_1009),2-proj-3-tuple(v_1009),hash(3-proj-3-tuple(v_1009),2-proj-2-tuple(v_1008))) else fail-any) else fail-any)) in
        {531}let v_1011: bitstring = catch-fail((if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-2-tuple(v_1008))))) then (if not-caught-fail(v_1010) then (v_1010,2-proj-2-tuple(v_1008)) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1012: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1011),v_986,v_974,4-proj-7-tuple(v_971),5-proj-7-tuple(v_971),6-proj-7-tuple(v_971),7-proj-7-tuple(v_971))) in
        {533}let v_1013: bitstring = catch-fail(concat3(v_975,2-proj-2-tuple(v_995),2-proj-2-tuple(v_1011))) in
        {534}let (hs_1014: handshakestate,re_1015: key,message_b_1016: bitstring) = (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-7-tuple(v_971))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_974) then (if not-caught-fail(v_975) then (if not-caught-fail(v_977) then (if not-caught-fail(v_984) then (if not-caught-fail(v_986) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-2-tuple(v_995))))) then (if not-caught-fail(v_1002) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-2-tuple(v_1011))))) then (if not-caught-fail(v_1012) then (if not-caught-fail(v_1013) then (v_1012,5-proj-7-tuple(v_971),v_1013) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {535}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {536}insert statestore(bob,charlie,statepack_c(hs_1014));
        {537}out(pub, message_b_1016)
    ) | (
        {569}get statestore(=bob,=charlie,statepack_c(hs_1017: handshakestate)) in
        {539}in(pub, message_c_1018: bitstring);
        {540}let v_1019: bitstring = catch-fail(handshakestateunpack(hs_1017)) in
        {541}let v_1020: bitstring = catch-fail(deconcat3(message_c_1018)) in
        {542}let v_1021: bool = catch-fail(true) in
        {543}let v_1022: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1019))) in
        {544}let v_1023: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1022))) in
        {545}let v_1024: aead = catch-fail(decrypt(1-proj-2-tuple(v_1023),2-proj-2-tuple(v_1023),3-proj-3-tuple(v_1022),2-proj-3-tuple(v_1020))) in
        {546}let v_1025: bitstring = catch-fail(aeadunpack(v_1024)) in
        {547}let v_1026: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1022))) in
        {548}let v_1027: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1023))) && success?(1-proj-3-tuple(v_1022))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-2-tuple(v_1026))))) then cipherstatepack(1-proj-2-tuple(v_1026),increment_nonce(2-proj-2-tuple(v_1023))) else fail-any) else fail-any)) in
        {549}let v_1028: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1020)) && (success?(3-proj-3-tuple(v_1022)) && success?(1-proj-3-tuple(v_1022)))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then (if not-caught-fail(v_1024) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then (if not-caught-fail(v_1027) then (v_1027,3-proj-3-tuple(v_1025),1-proj-3-tuple(v_1025)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {550}let v_1029: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1022),3-proj-3-tuple(v_1022)))) in
        {551}let v_1030: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1020)) && success?(symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1022),3-proj-3-tuple(v_1022)))) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-3-tuple(v_1029))))) then symmetricstatepack(1-proj-3-tuple(v_1029),2-proj-3-tuple(v_1029),hash(3-proj-3-tuple(v_1029),2-proj-3-tuple(v_1020))) else fail-any) else fail-any)) in
        {552}let v_1031: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1020)) && success?(1-proj-7-tuple(v_1019))) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if not-caught-fail(v_1030) then (v_1030,2-proj-3-tuple(v_1028),3-proj-3-tuple(v_1028)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1032: key = catch-fail(2-proj-3-tuple(v_1031)) in
        {554}let v_1033: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1031))) in
        {555}let v_1034: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1033))) in
        {556}let v_1035: aead = catch-fail(decrypt(1-proj-2-tuple(v_1034),2-proj-2-tuple(v_1034),3-proj-3-tuple(v_1033),3-proj-3-tuple(v_1020))) in
        {557}let v_1036: bitstring = catch-fail(aeadunpack(v_1035)) in
        {558}let v_1037: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1033))) in
        {559}let v_1038: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1034))) && success?(1-proj-3-tuple(v_1033))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-2-tuple(v_1037))))) then cipherstatepack(1-proj-2-tuple(v_1037),increment_nonce(2-proj-2-tuple(v_1034))) else fail-any) else fail-any)) in
        {560}let v_1039: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1020)) && (success?(3-proj-3-tuple(v_1033)) && success?(1-proj-3-tuple(v_1033)))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-2-tuple(v_1034))))) then (if not-caught-fail(v_1035) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if not-caught-fail(v_1038) then (v_1038,3-proj-3-tuple(v_1036),1-proj-3-tuple(v_1036)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1040: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1033),3-proj-3-tuple(v_1033)))) in
        {562}let v_1041: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1020)) && success?(symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1033),3-proj-3-tuple(v_1033)))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then symmetricstatepack(1-proj-3-tuple(v_1040),2-proj-3-tuple(v_1040),hash(3-proj-3-tuple(v_1040),3-proj-3-tuple(v_1020))) else fail-any) else fail-any)) in
        {563}let v_1042: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1020)) && success?(1-proj-3-tuple(v_1031))) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if not-caught-fail(v_1041) then (v_1041,2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {564}let v_1043: key = catch-fail(dhexp(key_s(charlie),g)) in
        {565}let v_1044: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1042),2-proj-7-tuple(v_1019),3-proj-7-tuple(v_1019),v_1032,5-proj-7-tuple(v_1019),6-proj-7-tuple(v_1019),7-proj-7-tuple(v_1019))) in
        {566}let (hs_1045: handshakestate,re_1046: key,plaintext_c_1047: bitstring,valid_1048: bool) = (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-7-tuple(v_1019))))) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if not-caught-fail(v_1021) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then (if not-caught-fail(v_1032) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then (if ((3-proj-3-tuple(v_1031) && 3-proj-3-tuple(v_1042)) && (v_1032 = getpublickey((if not-caught-fail(v_1043) then keypairpack(v_1043,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1044) then (v_1044,getpublickey(3-proj-7-tuple(v_1019)),2-proj-3-tuple(v_1042),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {567}event RecvMsg(bob,charlie,stage_c,plaintext_c_1047,valid_1048);
        {568}insert statestore(bob,charlie,statepack_d(hs_1045))
    ) | (
        {602}get statestore(=bob,=charlie,statepack_d(hs_1049: handshakestate)) in
        {570}let v_1050: bitstring = catch-fail(handshakestateunpack(hs_1049)) in
        {571}let v_1051: bitstring = catch-fail((empty,empty,empty)) in
        {572}let v_1052: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1050))) in
        {573}let v_1053: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1050))) in
        {574}let v_1054: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1053),(if (success?(4-proj-7-tuple(v_1050)) && success?(3-proj-7-tuple(v_1050))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),4-proj-7-tuple(v_1050)) else fail-any) else fail-any))) in
        {575}let v_1055: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1053),(if (success?(4-proj-7-tuple(v_1050)) && success?(3-proj-7-tuple(v_1050))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),4-proj-7-tuple(v_1050)) else fail-any) else fail-any))) in
        {576}let v_1056: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1053),(if (success?(4-proj-7-tuple(v_1050)) && success?(3-proj-7-tuple(v_1050))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),4-proj-7-tuple(v_1050)) else fail-any) else fail-any))) in
        {577}let v_1057: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1050)) && success?(3-proj-7-tuple(v_1050))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),4-proj-7-tuple(v_1050)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1053))) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1055) then (if not-caught-fail(v_1056) then (v_1054,v_1055,v_1056) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {578}let v_1058: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1050)) && success?(3-proj-7-tuple(v_1050))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then dhexp(2-proj-2-tuple(v_1052),4-proj-7-tuple(v_1050)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1050))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1057)) then cipherstatepack(2-proj-3-tuple(v_1057),minnonce) else fail-any),1-proj-3-tuple(v_1057),3-proj-3-tuple(v_1053)) else fail-any) else fail-any) else fail-any)) in
        {579}let v_1059: bitstring = catch-fail(symmetricstateunpack(v_1058)) in
        {580}let v_1060: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1059))) in
        {581}let v_1061: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1060),2-proj-2-tuple(v_1060),3-proj-3-tuple(v_1059),msg_d(bob,charlie))) in
        {582}let v_1062: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1059))) in
        {583}let v_1063: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1060))) && success?(1-proj-3-tuple(v_1059))) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-2-tuple(v_1062))))) then cipherstatepack(1-proj-2-tuple(v_1062),increment_nonce(2-proj-2-tuple(v_1060))) else fail-any) else fail-any)) in
        {584}let v_1064: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1059)) && success?(1-proj-3-tuple(v_1059))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1063) then (v_1063,v_1061) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {585}let v_1065: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1064),2-proj-3-tuple(v_1059),3-proj-3-tuple(v_1059)))) in
        {586}let v_1066: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1064)) && success?(symmetricstatepack(1-proj-2-tuple(v_1064),2-proj-3-tuple(v_1059),3-proj-3-tuple(v_1059)))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then symmetricstatepack(1-proj-3-tuple(v_1065),2-proj-3-tuple(v_1065),hash(3-proj-3-tuple(v_1065),2-proj-2-tuple(v_1064))) else fail-any) else fail-any)) in
        {587}let v_1067: bitstring = catch-fail((if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-2-tuple(v_1064))))) then (if not-caught-fail(v_1066) then (v_1066,2-proj-2-tuple(v_1064)) else fail-any) else fail-any) else fail-any)) in
        {588}let v_1068: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1067),2-proj-7-tuple(v_1050),3-proj-7-tuple(v_1050),4-proj-7-tuple(v_1050),5-proj-7-tuple(v_1050),6-proj-7-tuple(v_1050),7-proj-7-tuple(v_1050))) in
        {589}let v_1069: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1051),2-proj-3-tuple(v_1051),2-proj-2-tuple(v_1067))) in
        {590}let v_1070: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1067))) in
        {591}let v_1071: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1070),zero)) in
        {592}let v_1072: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1070),zero)) in
        {593}let v_1073: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1070),zero)) in
        {594}let v_1074: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1070)) then (if not-caught-fail(v_1071) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1073) then (v_1071,v_1072,v_1073) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {595}let v_1075: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1074)) then cipherstatepack(1-proj-3-tuple(v_1074),minnonce) else fail-any)) in
        {596}let v_1076: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1074)) then cipherstatepack(2-proj-3-tuple(v_1074),minnonce) else fail-any)) in
        {597}let v_1077: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1067)) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then (if not-caught-fail(v_1075) then (if not-caught-fail(v_1076) then (1-proj-2-tuple(v_1067),v_1075,v_1076) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {598}let (hs_1078: handshakestate,re_1079: key,message_d_1080: bitstring,cs1_1081: cipherstate,cs2_1082: cipherstate) = (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-7-tuple(v_1050))))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then (if not-caught-fail(v_1058) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then (if not-caught-fail(v_1068) then (if not-caught-fail(v_1069) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (v_1068,5-proj-7-tuple(v_1050),v_1069,2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {599}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {600}insert statestore(bob,charlie,statepack_e(hs_1078));
        {601}out(pub, message_d_1080)
    ) | (
        {603}event LeakS(phase0,bob);
        {604}out(pub, key_s(bob))
    ) | (
        {605}phase 1;
        {606}event LeakS(phase1,bob);
        {607}out(pub, key_s(bob))
    )
) | (
    {608}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 233 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 53 rules in the queue.
600 rules inserted. The rule base contains 584 rules. 175 rules in the queue.
800 rules inserted. The rule base contains 741 rules. 117 rules in the queue.
1000 rules inserted. The rule base contains 939 rules. 421 rules in the queue.
1200 rules inserted. The rule base contains 1107 rules. 383 rules in the queue.
1400 rules inserted. The rule base contains 1286 rules. 262 rules in the queue.
1600 rules inserted. The rule base contains 1402 rules. 266 rules in the queue.
1800 rules inserted. The rule base contains 1576 rules. 326 rules in the queue.
2000 rules inserted. The rule base contains 1740 rules. 330 rules in the queue.
2200 rules inserted. The rule base contains 1900 rules. 341 rules in the queue.
2400 rules inserted. The rule base contains 2046 rules. 316 rules in the queue.
2600 rules inserted. The rule base contains 2172 rules. 339 rules in the queue.
2800 rules inserted. The rule base contains 2341 rules. 389 rules in the queue.
3000 rules inserted. The rule base contains 2472 rules. 426 rules in the queue.
3200 rules inserted. The rule base contains 2596 rules. 462 rules in the queue.
3400 rules inserted. The rule base contains 2643 rules. 415 rules in the queue.
3600 rules inserted. The rule base contains 2720 rules. 378 rules in the queue.
3800 rules inserted. The rule base contains 2863 rules. 370 rules in the queue.
4000 rules inserted. The rule base contains 3016 rules. 384 rules in the queue.
4200 rules inserted. The rule base contains 3163 rules. 440 rules in the queue.
4400 rules inserted. The rule base contains 3305 rules. 460 rules in the queue.
4600 rules inserted. The rule base contains 3420 rules. 433 rules in the queue.
4800 rules inserted. The rule base contains 3554 rules. 415 rules in the queue.
5000 rules inserted. The rule base contains 3689 rules. 407 rules in the queue.
5200 rules inserted. The rule base contains 3806 rules. 391 rules in the queue.
5400 rules inserted. The rule base contains 3916 rules. 384 rules in the queue.
5600 rules inserted. The rule base contains 3936 rules. 287 rules in the queue.
5800 rules inserted. The rule base contains 4045 rules. 274 rules in the queue.
6000 rules inserted. The rule base contains 4175 rules. 272 rules in the queue.
6200 rules inserted. The rule base contains 4290 rules. 288 rules in the queue.
6400 rules inserted. The rule base contains 4379 rules. 269 rules in the queue.
6600 rules inserted. The rule base contains 4518 rules. 252 rules in the queue.
6800 rules inserted. The rule base contains 4659 rules. 227 rules in the queue.
7000 rules inserted. The rule base contains 4779 rules. 215 rules in the queue.
7200 rules inserted. The rule base contains 4914 rules. 198 rules in the queue.
7400 rules inserted. The rule base contains 5047 rules. 177 rules in the queue.
7600 rules inserted. The rule base contains 5161 rules. 166 rules in the queue.
7800 rules inserted. The rule base contains 5230 rules. 159 rules in the queue.
8000 rules inserted. The rule base contains 5363 rules. 169 rules in the queue.
8200 rules inserted. The rule base contains 5490 rules. 180 rules in the queue.
8400 rules inserted. The rule base contains 5627 rules. 169 rules in the queue.
8600 rules inserted. The rule base contains 5780 rules. 99 rules in the queue.
8800 rules inserted. The rule base contains 5826 rules. 39 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {165}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {188}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {185}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {187}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {339}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {318}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {337}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {165}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {188}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {185}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {187}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {339}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {318}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {337}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {165}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {188}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {185}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {187}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {339}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {318}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {337}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

15. By 14, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

15. By 14, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

15. By 14, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

15. By 14, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {468}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {490}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {469}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {489}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {538}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {535}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {537}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {84}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {82}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {468}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {490}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {469}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {489}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {538}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {535}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {537}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {84}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {82}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {468}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {490}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {469}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {489}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {538}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {535}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {537}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {84}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {82}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {339}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {318}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {387}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {384}.
So the message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) may be sent on channel pub at output {386}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {84}.
The message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,alice),g) <> caught-fail.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {83}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

9. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 8 may be read at get {113}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {110}.
So the entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {111}.
table(statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

10. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

12. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 11 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

13. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 10 may be read at get {339}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 12 may be received at input {318}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

14. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 13 may be read at get {387}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {384}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {385}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 15 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

17. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

18. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

19. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 18 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

20. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 17 may be read at get {339}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 19 may be received at input {318}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

21. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 20 may be read at get {387}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {384}.
So the message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) may be sent on channel pub at output {386}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))).

22. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 16 may be read at get {84}.
The message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) that may be sent on channel pub by 21 may be received at input {37}.
We have dhexp(key_e(bob,alice),g) <> caught-fail.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {83}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

23. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 22 may be read at get {113}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {110}.
So the message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) may be sent on channel pub at output {112}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))).

24. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 14 may be read at get {418}.
The message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) that may be sent on channel pub by 23 may be received at input {388}.
So the entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {417}.
table(statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

25. The entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 24 may be read at get {451}.
The event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true) may be executed at {448}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))),msg_d(bob,alice))) may be sent on channel pub at output {450}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))),msg_d(bob,alice)))).

26. The entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 9 may be read at get {148}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))),msg_d(bob,alice))) that may be sent on channel pub by 25 may be received at input {114}.
So event RecvEnd(true) may be executed at {147}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
