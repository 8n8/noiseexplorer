File "Xpsk1.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 227, characters 7-8:
Warning: identifier cs rebound.
File "Xpsk1.noise.passive.pv", line 227, character 36:
Warning: identifier h rebound.
File "Xpsk1.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "Xpsk1.noise.passive.pv", line 237, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "Xpsk1.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 257, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 268, character 6:
Warning: identifier e rebound.
File "Xpsk1.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ne rebound.
File "Xpsk1.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 273, character 6:
Warning: identifier s rebound.
File "Xpsk1.noise.passive.pv", line 274, characters 7-8:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 274, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "Xpsk1.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 277, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "Xpsk1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "Xpsk1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier re rebound.
File "Xpsk1.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 291, characters 48-53:
Warning: identifier valid1 rebound.
File "Xpsk1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier rs rebound.
File "Xpsk1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 295, characters 7-8:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 297, characters 7-8:
Warning: identifier hs rebound.
File "Xpsk1.noise.passive.pv", line 369, characters 8-9:
Warning: identifier hs rebound.
File "Xpsk1.noise.passive.pv", line 268, character 6:
Warning: identifier e rebound.
File "Xpsk1.noise.passive.pv", line 269, characters 6-7:
Warning: identifier ne rebound.
File "Xpsk1.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 273, character 6:
Warning: identifier s rebound.
File "Xpsk1.noise.passive.pv", line 274, characters 7-8:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 274, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "Xpsk1.noise.passive.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 277, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "Xpsk1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "Xpsk1.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "Xpsk1.noise.passive.pv", line 237, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 227, characters 7-8:
Warning: identifier cs rebound.
File "Xpsk1.noise.passive.pv", line 227, character 36:
Warning: identifier h rebound.
File "Xpsk1.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "Xpsk1.noise.passive.pv", line 237, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 257, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 401, characters 8-9:
Warning: identifier hs rebound.
File "Xpsk1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier re rebound.
File "Xpsk1.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 291, characters 48-53:
Warning: identifier valid1 rebound.
File "Xpsk1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier rs rebound.
File "Xpsk1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 295, characters 7-8:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 297, characters 7-8:
Warning: identifier hs rebound.
File "Xpsk1.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "Xpsk1.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "Xpsk1.noise.passive.pv", line 227, characters 7-8:
Warning: identifier cs rebound.
File "Xpsk1.noise.passive.pv", line 227, character 36:
Warning: identifier h rebound.
File "Xpsk1.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "Xpsk1.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "Xpsk1.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Completing equations...
Completed equations:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_420: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_420));
    (
        {6}let e_421: keypair = keypairpack(empty,empty) in
        {7}let v_422: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {8}let rs_423: key = getpublickey((if not-caught-fail(v_422) then keypairpack(validkey(v_422),key_s(bob)) else fail-any)) in
        {9}let re_424: key = empty in
        {10}let v_425: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_426: key = catch-fail(v_425) in
        {12}let v_427: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_428: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_425) then (if not-caught-fail(v_426) then (if not-caught-fail(v_427) then symmetricstatepack(v_427,v_426,v_425) else fail-any) else fail-any) else fail-any))) in
        {14}let v_429: symmetricstate = catch-fail((if success?((if not-caught-fail(v_425) then (if not-caught-fail(v_426) then (if not-caught-fail(v_427) then symmetricstatepack(v_427,v_426,v_425) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_428) && success?(is-true(success?(1-proj-3-tuple(v_428))))) then symmetricstatepack(1-proj-3-tuple(v_428),2-proj-3-tuple(v_428),hash(3-proj-3-tuple(v_428),empty)) else fail-any) else fail-any)) in
        {15}let v_430: bitstring = catch-fail(symmetricstateunpack(v_429)) in
        {16}let v_431: symmetricstate = catch-fail((if (not-caught-fail(v_430) && success?(is-true(success?(1-proj-3-tuple(v_430))))) then symmetricstatepack(1-proj-3-tuple(v_430),2-proj-3-tuple(v_430),hash(3-proj-3-tuple(v_430),rs_423)) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_429) then (if not-caught-fail(v_431) then handshakestatepack(v_431,s_420,e_421,rs_423,re_424,key_psk(alice,bob),true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {87}get statestore(=alice,=bob,=sid,statepack_a(hs_432: handshakestate)) in
        {19}let v_433: bitstring = catch-fail(handshakestateunpack(hs_432)) in
        {20}let v_434: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_435: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {22}let v_436: keypair = catch-fail((if not-caught-fail(v_435) then keypairpack(validkey(v_435),key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_437: bitstring = catch-fail(getpublickey(v_436)) in
        {24}let v_438: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_433))) in
        {25}let v_439: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_433)) then (if (not-caught-fail(v_438) && success?(is-true(success?(1-proj-3-tuple(v_438))))) then symmetricstatepack(1-proj-3-tuple(v_438),2-proj-3-tuple(v_438),hash(3-proj-3-tuple(v_438),v_437)) else fail-any) else fail-any)) in
        {26}let v_440: bitstring = catch-fail(symmetricstateunpack(v_439)) in
        {27}let v_441: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_440),getpublickey(v_436))) in
        {28}let v_442: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_440),getpublickey(v_436))) in
        {29}let v_443: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_440),getpublickey(v_436))) in
        {30}let v_444: bitstring = catch-fail((if (success?(getpublickey(v_436)) && success?(2-proj-3-tuple(v_440))) then (if not-caught-fail(v_441) then (if not-caught-fail(v_442) then (if not-caught-fail(v_443) then (v_441,v_442,v_443) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_445: symmetricstate = catch-fail((if success?(getpublickey(v_436)) then (if (not-caught-fail(v_440) && success?(is-true(success?(1-proj-3-tuple(v_440))))) then (if (not-caught-fail(v_444) && success?(is-true(success?(1-proj-3-tuple(v_444))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_444)) then cipherstatepack(2-proj-3-tuple(v_444),minnonce) else fail-any),1-proj-3-tuple(v_444),3-proj-3-tuple(v_440)) else fail-any) else fail-any) else fail-any)) in
        {32}let v_446: bitstring = catch-fail(keypairunpack(v_436)) in
        {33}let v_447: bitstring = catch-fail(symmetricstateunpack(v_445)) in
        {34}let v_448: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_447),(if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_433)) else fail-any) else fail-any))) in
        {35}let v_449: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_447),(if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_433)) else fail-any) else fail-any))) in
        {36}let v_450: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_447),(if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_433)) else fail-any) else fail-any))) in
        {37}let v_451: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_433)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_447))) then (if not-caught-fail(v_448) then (if not-caught-fail(v_449) then (if not-caught-fail(v_450) then (v_448,v_449,v_450) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_452: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then dhexp(2-proj-2-tuple(v_446),4-proj-7-tuple(v_433)) else fail-any) else fail-any)) then (if (not-caught-fail(v_447) && success?(is-true(success?(1-proj-3-tuple(v_447))))) then (if (not-caught-fail(v_451) && success?(is-true(success?(1-proj-3-tuple(v_451))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_451)) then cipherstatepack(2-proj-3-tuple(v_451),minnonce) else fail-any),1-proj-3-tuple(v_451),3-proj-3-tuple(v_447)) else fail-any) else fail-any) else fail-any)) in
        {39}let v_453: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {40}let v_454: keypair = catch-fail((if not-caught-fail(v_453) then keypairpack(validkey(v_453),key_s(alice)) else fail-any)) in
        {41}let v_455: bitstring = catch-fail(symmetricstateunpack(v_452)) in
        {42}let v_456: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_455))) in
        {43}let v_457: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_456),2-proj-2-tuple(v_456),3-proj-3-tuple(v_455),getpublickey(v_454))) in
        {44}let v_458: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_455))) in
        {45}let v_459: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_456))) && success?(1-proj-3-tuple(v_455))) then (if (not-caught-fail(v_458) && success?(is-true(success?(1-proj-2-tuple(v_458))))) then cipherstatepack(1-proj-2-tuple(v_458),increment_nonce(2-proj-2-tuple(v_456))) else fail-any) else fail-any)) in
        {46}let v_460: bitstring = catch-fail((if (success?(getpublickey(v_454)) && (success?(3-proj-3-tuple(v_455)) && success?(1-proj-3-tuple(v_455)))) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then (if not-caught-fail(v_457) then (if not-caught-fail(v_459) then (v_459,v_457) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {47}let v_461: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_460),2-proj-3-tuple(v_455),3-proj-3-tuple(v_455)))) in
        {48}let v_462: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_460)) && success?(symmetricstatepack(1-proj-2-tuple(v_460),2-proj-3-tuple(v_455),3-proj-3-tuple(v_455)))) then (if (not-caught-fail(v_461) && success?(is-true(success?(1-proj-3-tuple(v_461))))) then symmetricstatepack(1-proj-3-tuple(v_461),2-proj-3-tuple(v_461),hash(3-proj-3-tuple(v_461),2-proj-2-tuple(v_460))) else fail-any) else fail-any)) in
        {49}let v_463: bitstring = catch-fail((if success?(getpublickey(v_454)) then (if (not-caught-fail(v_455) && success?(is-true(success?(1-proj-3-tuple(v_455))))) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-2-tuple(v_460))))) then (if not-caught-fail(v_462) then (v_462,2-proj-2-tuple(v_460)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_464: bitstring = catch-fail(keypairunpack(v_454)) in
        {51}let v_465: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_463))) in
        {52}let v_466: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_465),(if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-2-tuple(v_464))))) then dhexp(2-proj-2-tuple(v_464),4-proj-7-tuple(v_433)) else fail-any) else fail-any))) in
        {53}let v_467: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_465),(if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-2-tuple(v_464))))) then dhexp(2-proj-2-tuple(v_464),4-proj-7-tuple(v_433)) else fail-any) else fail-any))) in
        {54}let v_468: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_465),(if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-2-tuple(v_464))))) then dhexp(2-proj-2-tuple(v_464),4-proj-7-tuple(v_433)) else fail-any) else fail-any))) in
        {55}let v_469: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-2-tuple(v_464))))) then dhexp(2-proj-2-tuple(v_464),4-proj-7-tuple(v_433)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_465))) then (if not-caught-fail(v_466) then (if not-caught-fail(v_467) then (if not-caught-fail(v_468) then (v_466,v_467,v_468) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {56}let v_470: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_433)) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-2-tuple(v_464))))) then dhexp(2-proj-2-tuple(v_464),4-proj-7-tuple(v_433)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_463))) then (if (not-caught-fail(v_465) && success?(is-true(success?(1-proj-3-tuple(v_465))))) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-3-tuple(v_469))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_469)) then cipherstatepack(2-proj-3-tuple(v_469),minnonce) else fail-any),1-proj-3-tuple(v_469),3-proj-3-tuple(v_465)) else fail-any) else fail-any) else fail-any)) in
        {57}let v_471: bitstring = catch-fail(symmetricstateunpack(v_470)) in
        {58}let v_472: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_471),6-proj-7-tuple(v_433))) in
        {59}let v_473: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_471),6-proj-7-tuple(v_433))) in
        {60}let v_474: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_471),6-proj-7-tuple(v_433))) in
        {61}let v_475: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_433)) && success?(2-proj-3-tuple(v_471))) then (if not-caught-fail(v_472) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then (v_472,v_473,v_474) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_476: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_471),1-proj-3-tuple(v_475),3-proj-3-tuple(v_471)))) in
        {63}let v_477: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_475)) && success?(symmetricstatepack(1-proj-3-tuple(v_471),1-proj-3-tuple(v_475),3-proj-3-tuple(v_471)))) then (if (not-caught-fail(v_476) && success?(is-true(success?(1-proj-3-tuple(v_476))))) then symmetricstatepack(1-proj-3-tuple(v_476),2-proj-3-tuple(v_476),hash(3-proj-3-tuple(v_476),2-proj-3-tuple(v_475))) else fail-any) else fail-any))) in
        {64}let v_478: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_433)) then (if (not-caught-fail(v_471) && success?(is-true(success?(1-proj-3-tuple(v_471))))) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-3-tuple(v_477))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_475)) then cipherstatepack(3-proj-3-tuple(v_475),minnonce) else fail-any),1-proj-3-tuple(v_475),3-proj-3-tuple(v_477)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_479: bitstring = catch-fail(symmetricstateunpack(v_478)) in
        {66}let v_480: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_479))) in
        {67}let v_481: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_480),2-proj-2-tuple(v_480),3-proj-3-tuple(v_479),msg_a(alice,bob,sid))) in
        {68}let v_482: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_479))) in
        {69}let v_483: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_480))) && success?(1-proj-3-tuple(v_479))) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-2-tuple(v_482))))) then cipherstatepack(1-proj-2-tuple(v_482),increment_nonce(2-proj-2-tuple(v_480))) else fail-any) else fail-any)) in
        {70}let v_484: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_479)) && success?(1-proj-3-tuple(v_479))) then (if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-2-tuple(v_480))))) then (if not-caught-fail(v_481) then (if not-caught-fail(v_483) then (v_483,v_481) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_485: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_484),2-proj-3-tuple(v_479),3-proj-3-tuple(v_479)))) in
        {72}let v_486: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_484)) && success?(symmetricstatepack(1-proj-2-tuple(v_484),2-proj-3-tuple(v_479),3-proj-3-tuple(v_479)))) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then symmetricstatepack(1-proj-3-tuple(v_485),2-proj-3-tuple(v_485),hash(3-proj-3-tuple(v_485),2-proj-2-tuple(v_484))) else fail-any) else fail-any)) in
        {73}let v_487: bitstring = catch-fail((if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-2-tuple(v_484))))) then (if not-caught-fail(v_486) then (v_486,2-proj-2-tuple(v_484)) else fail-any) else fail-any) else fail-any)) in
        {74}let v_488: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_487),v_454,v_436,4-proj-7-tuple(v_433),5-proj-7-tuple(v_433),6-proj-7-tuple(v_433),7-proj-7-tuple(v_433))) in
        {75}let v_489: bitstring = catch-fail(concat3(v_437,2-proj-2-tuple(v_463),2-proj-2-tuple(v_487))) in
        {76}let v_490: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_487))) in
        {77}let v_491: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_490),zero)) in
        {78}let v_492: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_490),zero)) in
        {79}let v_493: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_490),zero)) in
        {80}let v_494: bitstring = catch-fail((if success?(2-proj-3-tuple(v_490)) then (if not-caught-fail(v_491) then (if not-caught-fail(v_492) then (if not-caught-fail(v_493) then (v_491,v_492,v_493) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_495: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_494)) then cipherstatepack(1-proj-3-tuple(v_494),minnonce) else fail-any)) in
        {82}let v_496: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_494)) then cipherstatepack(2-proj-3-tuple(v_494),minnonce) else fail-any)) in
        {83}let v_497: bitstring = catch-fail((if success?(1-proj-2-tuple(v_487)) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-3-tuple(v_490))))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-3-tuple(v_494))))) then (if not-caught-fail(v_495) then (if not-caught-fail(v_496) then (1-proj-2-tuple(v_487),v_495,v_496) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let (hs_498: handshakestate,message_a: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_433) && success?(is-true(success?(1-proj-7-tuple(v_433))))) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-3-tuple(v_434))))) then (if not-caught-fail(v_436) then (if not-caught-fail(v_437) then (if not-caught-fail(v_439) then (if not-caught-fail(v_445) then (if not-caught-fail(v_452) then (if not-caught-fail(v_454) then (if (not-caught-fail(v_463) && success?(is-true(success?(1-proj-2-tuple(v_463))))) then (if not-caught-fail(v_470) then (if not-caught-fail(v_478) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-2-tuple(v_487))))) then (if not-caught-fail(v_488) then (if not-caught-fail(v_489) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-3-tuple(v_497))))) then (v_488,v_489,2-proj-3-tuple(v_497),3-proj-3-tuple(v_497)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {85}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {86}out(pub, message_a)
    ) | (
        {88}event LeakPsk(phase0,alice,bob);
        {89}out(pub, key_psk(alice,bob))
    ) | (
        {90}phase 1;
        {91}event LeakPsk(phase1,alice,bob);
        {92}out(pub, key_psk(alice,bob))
    ) | (
        {93}event LeakS(phase0,alice);
        {94}out(pub, key_s(alice))
    ) | (
        {95}phase 1;
        {96}event LeakS(phase1,alice);
        {97}out(pub, key_s(alice))
    )
) | (
    {98}let s_499: keypair = keypairpack(empty,empty) in
    {99}out(pub, getpublickey(s_499));
    (
        {100}let e_500: keypair = keypairpack(empty,empty) in
        {101}let v_501: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {102}let rs_502: key = getpublickey((if not-caught-fail(v_501) then keypairpack(validkey(v_501),key_s(charlie)) else fail-any)) in
        {103}let re_503: key = empty in
        {104}let v_504: bitstring = catch-fail(hash(somename,empty)) in
        {105}let v_505: key = catch-fail(v_504) in
        {106}let v_506: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {107}let v_507: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_504) then (if not-caught-fail(v_505) then (if not-caught-fail(v_506) then symmetricstatepack(v_506,v_505,v_504) else fail-any) else fail-any) else fail-any))) in
        {108}let v_508: symmetricstate = catch-fail((if success?((if not-caught-fail(v_504) then (if not-caught-fail(v_505) then (if not-caught-fail(v_506) then symmetricstatepack(v_506,v_505,v_504) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then symmetricstatepack(1-proj-3-tuple(v_507),2-proj-3-tuple(v_507),hash(3-proj-3-tuple(v_507),empty)) else fail-any) else fail-any)) in
        {109}let v_509: bitstring = catch-fail(symmetricstateunpack(v_508)) in
        {110}let v_510: symmetricstate = catch-fail((if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-3-tuple(v_509))))) then symmetricstatepack(1-proj-3-tuple(v_509),2-proj-3-tuple(v_509),hash(3-proj-3-tuple(v_509),rs_502)) else fail-any)) in
        {111}let hs_511: handshakestate = (if not-caught-fail(v_508) then (if not-caught-fail(v_510) then handshakestatepack(v_510,s_499,e_500,rs_502,re_503,key_psk(alice,charlie),true) else fail-any) else fail-any) in
        {112}insert statestore(alice,charlie,sid,statepack_a(hs_511))
    ) | (
        {181}get statestore(=alice,=charlie,=sid,statepack_a(hs_512: handshakestate)) in
        {113}let v_513: bitstring = catch-fail(handshakestateunpack(hs_512)) in
        {114}let v_514: bitstring = catch-fail((empty,empty,empty)) in
        {115}let v_515: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {116}let v_516: keypair = catch-fail((if not-caught-fail(v_515) then keypairpack(validkey(v_515),key_e(alice,charlie,sid)) else fail-any)) in
        {117}let v_517: bitstring = catch-fail(getpublickey(v_516)) in
        {118}let v_518: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_513))) in
        {119}let v_519: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_513)) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_518),hash(3-proj-3-tuple(v_518),v_517)) else fail-any) else fail-any)) in
        {120}let v_520: bitstring = catch-fail(symmetricstateunpack(v_519)) in
        {121}let v_521: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_520),getpublickey(v_516))) in
        {122}let v_522: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_520),getpublickey(v_516))) in
        {123}let v_523: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_520),getpublickey(v_516))) in
        {124}let v_524: bitstring = catch-fail((if (success?(getpublickey(v_516)) && success?(2-proj-3-tuple(v_520))) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (v_521,v_522,v_523) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {125}let v_525: symmetricstate = catch-fail((if success?(getpublickey(v_516)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_524)) then cipherstatepack(2-proj-3-tuple(v_524),minnonce) else fail-any),1-proj-3-tuple(v_524),3-proj-3-tuple(v_520)) else fail-any) else fail-any) else fail-any)) in
        {126}let v_526: bitstring = catch-fail(keypairunpack(v_516)) in
        {127}let v_527: bitstring = catch-fail(symmetricstateunpack(v_525)) in
        {128}let v_528: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_527),(if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_513)) else fail-any) else fail-any))) in
        {129}let v_529: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_527),(if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_513)) else fail-any) else fail-any))) in
        {130}let v_530: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_527),(if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_513)) else fail-any) else fail-any))) in
        {131}let v_531: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_513)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_527))) then (if not-caught-fail(v_528) then (if not-caught-fail(v_529) then (if not-caught-fail(v_530) then (v_528,v_529,v_530) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_532: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_513)) else fail-any) else fail-any)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_531)) then cipherstatepack(2-proj-3-tuple(v_531),minnonce) else fail-any),1-proj-3-tuple(v_531),3-proj-3-tuple(v_527)) else fail-any) else fail-any) else fail-any)) in
        {133}let v_533: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {134}let v_534: keypair = catch-fail((if not-caught-fail(v_533) then keypairpack(validkey(v_533),key_s(alice)) else fail-any)) in
        {135}let v_535: bitstring = catch-fail(symmetricstateunpack(v_532)) in
        {136}let v_536: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_535))) in
        {137}let v_537: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_536),2-proj-2-tuple(v_536),3-proj-3-tuple(v_535),getpublickey(v_534))) in
        {138}let v_538: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_535))) in
        {139}let v_539: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_536))) && success?(1-proj-3-tuple(v_535))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then cipherstatepack(1-proj-2-tuple(v_538),increment_nonce(2-proj-2-tuple(v_536))) else fail-any) else fail-any)) in
        {140}let v_540: bitstring = catch-fail((if (success?(getpublickey(v_534)) && (success?(3-proj-3-tuple(v_535)) && success?(1-proj-3-tuple(v_535)))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then (if not-caught-fail(v_537) then (if not-caught-fail(v_539) then (v_539,v_537) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {141}let v_541: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_540),2-proj-3-tuple(v_535),3-proj-3-tuple(v_535)))) in
        {142}let v_542: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_540)) && success?(symmetricstatepack(1-proj-2-tuple(v_540),2-proj-3-tuple(v_535),3-proj-3-tuple(v_535)))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack(1-proj-3-tuple(v_541),2-proj-3-tuple(v_541),hash(3-proj-3-tuple(v_541),2-proj-2-tuple(v_540))) else fail-any) else fail-any)) in
        {143}let v_543: bitstring = catch-fail((if success?(getpublickey(v_534)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then (if not-caught-fail(v_542) then (v_542,2-proj-2-tuple(v_540)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {144}let v_544: bitstring = catch-fail(keypairunpack(v_534)) in
        {145}let v_545: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_543))) in
        {146}let v_546: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_545),(if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_513)) else fail-any) else fail-any))) in
        {147}let v_547: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_545),(if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_513)) else fail-any) else fail-any))) in
        {148}let v_548: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_545),(if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_513)) else fail-any) else fail-any))) in
        {149}let v_549: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_513)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_545))) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (if not-caught-fail(v_548) then (v_546,v_547,v_548) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {150}let v_550: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_513)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then dhexp(2-proj-2-tuple(v_544),4-proj-7-tuple(v_513)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_543))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_549)) then cipherstatepack(2-proj-3-tuple(v_549),minnonce) else fail-any),1-proj-3-tuple(v_549),3-proj-3-tuple(v_545)) else fail-any) else fail-any) else fail-any)) in
        {151}let v_551: bitstring = catch-fail(symmetricstateunpack(v_550)) in
        {152}let v_552: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_551),6-proj-7-tuple(v_513))) in
        {153}let v_553: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_551),6-proj-7-tuple(v_513))) in
        {154}let v_554: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_551),6-proj-7-tuple(v_513))) in
        {155}let v_555: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_513)) && success?(2-proj-3-tuple(v_551))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (v_552,v_553,v_554) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_556: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_551),1-proj-3-tuple(v_555),3-proj-3-tuple(v_551)))) in
        {157}let v_557: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_555)) && success?(symmetricstatepack(1-proj-3-tuple(v_551),1-proj-3-tuple(v_555),3-proj-3-tuple(v_551)))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_556),hash(3-proj-3-tuple(v_556),2-proj-3-tuple(v_555))) else fail-any) else fail-any))) in
        {158}let v_558: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_513)) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_555)) then cipherstatepack(3-proj-3-tuple(v_555),minnonce) else fail-any),1-proj-3-tuple(v_555),3-proj-3-tuple(v_557)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {159}let v_559: bitstring = catch-fail(symmetricstateunpack(v_558)) in
        {160}let v_560: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_559))) in
        {161}let v_561: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_560),2-proj-2-tuple(v_560),3-proj-3-tuple(v_559),msg_a(alice,charlie,sid))) in
        {162}let v_562: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_559))) in
        {163}let v_563: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_560))) && success?(1-proj-3-tuple(v_559))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-2-tuple(v_562))))) then cipherstatepack(1-proj-2-tuple(v_562),increment_nonce(2-proj-2-tuple(v_560))) else fail-any) else fail-any)) in
        {164}let v_564: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_559)) && success?(1-proj-3-tuple(v_559))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then (if not-caught-fail(v_561) then (if not-caught-fail(v_563) then (v_563,v_561) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {165}let v_565: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_564),2-proj-3-tuple(v_559),3-proj-3-tuple(v_559)))) in
        {166}let v_566: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_564)) && success?(symmetricstatepack(1-proj-2-tuple(v_564),2-proj-3-tuple(v_559),3-proj-3-tuple(v_559)))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then symmetricstatepack(1-proj-3-tuple(v_565),2-proj-3-tuple(v_565),hash(3-proj-3-tuple(v_565),2-proj-2-tuple(v_564))) else fail-any) else fail-any)) in
        {167}let v_567: bitstring = catch-fail((if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then (if not-caught-fail(v_566) then (v_566,2-proj-2-tuple(v_564)) else fail-any) else fail-any) else fail-any)) in
        {168}let v_568: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_567),v_534,v_516,4-proj-7-tuple(v_513),5-proj-7-tuple(v_513),6-proj-7-tuple(v_513),7-proj-7-tuple(v_513))) in
        {169}let v_569: bitstring = catch-fail(concat3(v_517,2-proj-2-tuple(v_543),2-proj-2-tuple(v_567))) in
        {170}let v_570: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_567))) in
        {171}let v_571: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_570),zero)) in
        {172}let v_572: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_570),zero)) in
        {173}let v_573: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_570),zero)) in
        {174}let v_574: bitstring = catch-fail((if success?(2-proj-3-tuple(v_570)) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (v_571,v_572,v_573) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {175}let v_575: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_574)) then cipherstatepack(1-proj-3-tuple(v_574),minnonce) else fail-any)) in
        {176}let v_576: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_574)) then cipherstatepack(2-proj-3-tuple(v_574),minnonce) else fail-any)) in
        {177}let v_577: bitstring = catch-fail((if success?(1-proj-2-tuple(v_567)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (1-proj-2-tuple(v_567),v_575,v_576) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {178}let (hs_578: handshakestate,message_a_579: bitstring,cs1_580: cipherstate,cs2_581: cipherstate) = (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-7-tuple(v_513))))) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then (if not-caught-fail(v_516) then (if not-caught-fail(v_517) then (if not-caught-fail(v_519) then (if not-caught-fail(v_525) then (if not-caught-fail(v_532) then (if not-caught-fail(v_534) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then (if not-caught-fail(v_550) then (if not-caught-fail(v_558) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then (if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (v_568,v_569,2-proj-3-tuple(v_577),3-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {179}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {180}out(pub, message_a_579)
    ) | (
        {182}event LeakPsk(phase0,alice,charlie);
        {183}out(pub, key_psk(alice,charlie))
    ) | (
        {184}phase 1;
        {185}event LeakPsk(phase1,alice,charlie);
        {186}out(pub, key_psk(alice,charlie))
    ) | (
        {187}event LeakS(phase0,alice);
        {188}out(pub, key_s(alice))
    ) | (
        {189}phase 1;
        {190}event LeakS(phase1,alice);
        {191}out(pub, key_s(alice))
    )
) | (
    {192}let v_582: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {193}let s_583: keypair = (if not-caught-fail(v_582) then keypairpack(validkey(v_582),key_s(bob)) else fail-any) in
    {194}out(pub, getpublickey(s_583));
    (
        {195}let e_584: keypair = keypairpack(empty,empty) in
        {196}let rs_585: key = empty in
        {197}let re_586: key = empty in
        {198}let v_587: bitstring = catch-fail(hash(somename,empty)) in
        {199}let v_588: key = catch-fail(v_587) in
        {200}let v_589: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {201}let v_590: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then symmetricstatepack(v_589,v_588,v_587) else fail-any) else fail-any) else fail-any))) in
        {202}let v_591: symmetricstate = catch-fail((if success?((if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then symmetricstatepack(v_589,v_588,v_587) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then symmetricstatepack(1-proj-3-tuple(v_590),2-proj-3-tuple(v_590),hash(3-proj-3-tuple(v_590),empty)) else fail-any) else fail-any)) in
        {203}let v_592: bitstring = catch-fail(symmetricstateunpack(v_591)) in
        {204}let v_593: symmetricstate = catch-fail((if success?(getpublickey(s_583)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_592),hash(3-proj-3-tuple(v_592),getpublickey(s_583))) else fail-any) else fail-any)) in
        {205}let hs_594: handshakestate = (if not-caught-fail(v_591) then (if not-caught-fail(v_593) then handshakestatepack(v_593,s_583,e_584,rs_585,re_586,key_psk(alice,bob),false) else fail-any) else fail-any) in
        {206}insert statestore(bob,alice,sid,statepack_a(hs_594))
    ) | (
        {276}get statestore(=bob,=alice,=sid,statepack_a(hs_595: handshakestate)) in
        {207}in(pub, message_a_596: bitstring);
        {208}let v_597: bitstring = catch-fail(handshakestateunpack(hs_595)) in
        {209}let v_598: bitstring = catch-fail(deconcat3(message_a_596)) in
        {210}let v_599: bool = catch-fail(true) in
        {211}let v_600: key = catch-fail(1-proj-3-tuple(v_598)) in
        {212}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_597))) in
        {213}let v_602: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_597)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack(1-proj-3-tuple(v_601),2-proj-3-tuple(v_601),hash(3-proj-3-tuple(v_601),v_600)) else fail-any) else fail-any)) in
        {214}let v_603: bitstring = catch-fail(symmetricstateunpack(v_602)) in
        {215}let v_604: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_603),v_600)) in
        {216}let v_605: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_603),v_600)) in
        {217}let v_606: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_603),v_600)) in
        {218}let v_607: bitstring = catch-fail((if success?(2-proj-3-tuple(v_603)) then (if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then (v_604,v_605,v_606) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_608: symmetricstate = catch-fail((if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_607)) then cipherstatepack(2-proj-3-tuple(v_607),minnonce) else fail-any),1-proj-3-tuple(v_607),3-proj-3-tuple(v_603)) else fail-any) else fail-any)) in
        {220}let v_609: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_597))) in
        {221}let v_610: bitstring = catch-fail(symmetricstateunpack(v_608)) in
        {222}let v_611: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_610),(if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then dhexp(2-proj-2-tuple(v_609),v_600) else fail-any) else fail-any))) in
        {223}let v_612: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_610),(if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then dhexp(2-proj-2-tuple(v_609),v_600) else fail-any) else fail-any))) in
        {224}let v_613: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_610),(if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then dhexp(2-proj-2-tuple(v_609),v_600) else fail-any) else fail-any))) in
        {225}let v_614: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then dhexp(2-proj-2-tuple(v_609),v_600) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_610))) then (if not-caught-fail(v_611) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (v_611,v_612,v_613) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let v_615: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then dhexp(2-proj-2-tuple(v_609),v_600) else fail-any) else fail-any)) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_614)) then cipherstatepack(2-proj-3-tuple(v_614),minnonce) else fail-any),1-proj-3-tuple(v_614),3-proj-3-tuple(v_610)) else fail-any) else fail-any) else fail-any)) in
        {227}let v_616: bitstring = catch-fail(symmetricstateunpack(v_615)) in
        {228}let v_617: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_616))) in
        {229}let v_618: aead = catch-fail(decrypt(1-proj-2-tuple(v_617),2-proj-2-tuple(v_617),3-proj-3-tuple(v_616),2-proj-3-tuple(v_598))) in
        {230}let v_619: bitstring = catch-fail(aeadunpack(v_618)) in
        {231}let v_620: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_616))) in
        {232}let v_621: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_617))) && success?(1-proj-3-tuple(v_616))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then cipherstatepack(1-proj-2-tuple(v_620),increment_nonce(2-proj-2-tuple(v_617))) else fail-any) else fail-any)) in
        {233}let v_622: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_598)) && (success?(3-proj-3-tuple(v_616)) && success?(1-proj-3-tuple(v_616)))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then (if not-caught-fail(v_618) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then (if not-caught-fail(v_621) then (v_621,3-proj-3-tuple(v_619),1-proj-3-tuple(v_619)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {234}let v_623: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_622),2-proj-3-tuple(v_616),3-proj-3-tuple(v_616)))) in
        {235}let v_624: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_598)) && success?(symmetricstatepack(1-proj-3-tuple(v_622),2-proj-3-tuple(v_616),3-proj-3-tuple(v_616)))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack(1-proj-3-tuple(v_623),2-proj-3-tuple(v_623),hash(3-proj-3-tuple(v_623),2-proj-3-tuple(v_598))) else fail-any) else fail-any)) in
        {236}let v_625: bitstring = catch-fail((if success?(2-proj-3-tuple(v_598)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if not-caught-fail(v_624) then (v_624,2-proj-3-tuple(v_622),3-proj-3-tuple(v_622)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_626: key = catch-fail(2-proj-3-tuple(v_625)) in
        {238}let v_627: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_597))) in
        {239}let v_628: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_625))) in
        {240}let v_629: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_628),(if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then dhexp(2-proj-2-tuple(v_627),v_626) else fail-any) else fail-any))) in
        {241}let v_630: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_628),(if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then dhexp(2-proj-2-tuple(v_627),v_626) else fail-any) else fail-any))) in
        {242}let v_631: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_628),(if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then dhexp(2-proj-2-tuple(v_627),v_626) else fail-any) else fail-any))) in
        {243}let v_632: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then dhexp(2-proj-2-tuple(v_627),v_626) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_628))) then (if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then (v_629,v_630,v_631) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_633: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_597)) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then dhexp(2-proj-2-tuple(v_627),v_626) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_625))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_632)) then cipherstatepack(2-proj-3-tuple(v_632),minnonce) else fail-any),1-proj-3-tuple(v_632),3-proj-3-tuple(v_628)) else fail-any) else fail-any) else fail-any)) in
        {245}let v_634: bitstring = catch-fail(symmetricstateunpack(v_633)) in
        {246}let v_635: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_634),6-proj-7-tuple(v_597))) in
        {247}let v_636: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_634),6-proj-7-tuple(v_597))) in
        {248}let v_637: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_634),6-proj-7-tuple(v_597))) in
        {249}let v_638: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_597)) && success?(2-proj-3-tuple(v_634))) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (if not-caught-fail(v_637) then (v_635,v_636,v_637) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_639: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_634),1-proj-3-tuple(v_638),3-proj-3-tuple(v_634)))) in
        {251}let v_640: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_638)) && success?(symmetricstatepack(1-proj-3-tuple(v_634),1-proj-3-tuple(v_638),3-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then symmetricstatepack(1-proj-3-tuple(v_639),2-proj-3-tuple(v_639),hash(3-proj-3-tuple(v_639),2-proj-3-tuple(v_638))) else fail-any) else fail-any))) in
        {252}let v_641: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_597)) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_638)) then cipherstatepack(3-proj-3-tuple(v_638),minnonce) else fail-any),1-proj-3-tuple(v_638),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_642: bitstring = catch-fail(symmetricstateunpack(v_641)) in
        {254}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {255}let v_644: aead = catch-fail(decrypt(1-proj-2-tuple(v_643),2-proj-2-tuple(v_643),3-proj-3-tuple(v_642),3-proj-3-tuple(v_598))) in
        {256}let v_645: bitstring = catch-fail(aeadunpack(v_644)) in
        {257}let v_646: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {258}let v_647: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_643))) && success?(1-proj-3-tuple(v_642))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then cipherstatepack(1-proj-2-tuple(v_646),increment_nonce(2-proj-2-tuple(v_643))) else fail-any) else fail-any)) in
        {259}let v_648: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_598)) && (success?(3-proj-3-tuple(v_642)) && success?(1-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then (if not-caught-fail(v_644) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then (if not-caught-fail(v_647) then (v_647,3-proj-3-tuple(v_645),1-proj-3-tuple(v_645)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_649: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_648),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) in
        {261}let v_650: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_598)) && success?(symmetricstatepack(1-proj-3-tuple(v_648),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then symmetricstatepack(1-proj-3-tuple(v_649),2-proj-3-tuple(v_649),hash(3-proj-3-tuple(v_649),3-proj-3-tuple(v_598))) else fail-any) else fail-any)) in
        {262}let v_651: bitstring = catch-fail((if success?(3-proj-3-tuple(v_598)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if not-caught-fail(v_650) then (v_650,2-proj-3-tuple(v_648),3-proj-3-tuple(v_648)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_652: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {264}let v_653: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_651),2-proj-7-tuple(v_597),3-proj-7-tuple(v_597),v_626,v_600,6-proj-7-tuple(v_597),7-proj-7-tuple(v_597))) in
        {265}let v_654: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_651))) in
        {266}let v_655: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_654),zero)) in
        {267}let v_656: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_654),zero)) in
        {268}let v_657: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_654),zero)) in
        {269}let v_658: bitstring = catch-fail((if success?(2-proj-3-tuple(v_654)) then (if not-caught-fail(v_655) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (v_655,v_656,v_657) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_659: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_658)) then cipherstatepack(1-proj-3-tuple(v_658),minnonce) else fail-any)) in
        {271}let v_660: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_658)) then cipherstatepack(2-proj-3-tuple(v_658),minnonce) else fail-any)) in
        {272}let v_661: bitstring = catch-fail((if success?(1-proj-3-tuple(v_651)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if not-caught-fail(v_659) then (if not-caught-fail(v_660) then (1-proj-3-tuple(v_651),v_659,v_660) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let (hs_662: handshakestate,plaintext_a: bitstring,valid: bool,cs1_663: cipherstate,cs2_664: cipherstate) = (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-7-tuple(v_597))))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (if not-caught-fail(v_602) then (if not-caught-fail(v_608) then (if not-caught-fail(v_615) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_633) then (if not-caught-fail(v_641) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if ((3-proj-3-tuple(v_625) && 3-proj-3-tuple(v_651)) && (v_626 = getpublickey((if not-caught-fail(v_652) then keypairpack(validkey(v_652),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_653) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (v_653,2-proj-3-tuple(v_651),true,2-proj-3-tuple(v_661),3-proj-3-tuple(v_661)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {274}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {275}event RecvEnd(valid)
    ) | (
        {277}event LeakPsk(phase0,alice,bob);
        {278}out(pub, key_psk(alice,bob))
    ) | (
        {279}phase 1;
        {280}event LeakPsk(phase1,alice,bob);
        {281}out(pub, key_psk(alice,bob))
    ) | (
        {282}event LeakS(phase0,bob);
        {283}out(pub, key_s(bob))
    ) | (
        {284}phase 1;
        {285}event LeakS(phase1,bob);
        {286}out(pub, key_s(bob))
    )
) | (
    {287}let v_665: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {288}let s_666: keypair = (if not-caught-fail(v_665) then keypairpack(validkey(v_665),key_s(bob)) else fail-any) in
    {289}out(pub, getpublickey(s_666));
    (
        {290}let e_667: keypair = keypairpack(empty,empty) in
        {291}let rs_668: key = empty in
        {292}let re_669: key = empty in
        {293}let v_670: bitstring = catch-fail(hash(somename,empty)) in
        {294}let v_671: key = catch-fail(v_670) in
        {295}let v_672: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {296}let v_673: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_670) then (if not-caught-fail(v_671) then (if not-caught-fail(v_672) then symmetricstatepack(v_672,v_671,v_670) else fail-any) else fail-any) else fail-any))) in
        {297}let v_674: symmetricstate = catch-fail((if success?((if not-caught-fail(v_670) then (if not-caught-fail(v_671) then (if not-caught-fail(v_672) then symmetricstatepack(v_672,v_671,v_670) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then symmetricstatepack(1-proj-3-tuple(v_673),2-proj-3-tuple(v_673),hash(3-proj-3-tuple(v_673),empty)) else fail-any) else fail-any)) in
        {298}let v_675: bitstring = catch-fail(symmetricstateunpack(v_674)) in
        {299}let v_676: symmetricstate = catch-fail((if success?(getpublickey(s_666)) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_675),hash(3-proj-3-tuple(v_675),getpublickey(s_666))) else fail-any) else fail-any)) in
        {300}let hs_677: handshakestate = (if not-caught-fail(v_674) then (if not-caught-fail(v_676) then handshakestatepack(v_676,s_666,e_667,rs_668,re_669,key_psk(charlie,bob),false) else fail-any) else fail-any) in
        {301}insert statestore(bob,charlie,sid,statepack_a(hs_677))
    ) | (
        {371}get statestore(=bob,=charlie,=sid,statepack_a(hs_678: handshakestate)) in
        {302}in(pub, message_a_679: bitstring);
        {303}let v_680: bitstring = catch-fail(handshakestateunpack(hs_678)) in
        {304}let v_681: bitstring = catch-fail(deconcat3(message_a_679)) in
        {305}let v_682: bool = catch-fail(true) in
        {306}let v_683: key = catch-fail(1-proj-3-tuple(v_681)) in
        {307}let v_684: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_680))) in
        {308}let v_685: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_680)) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_684),hash(3-proj-3-tuple(v_684),v_683)) else fail-any) else fail-any)) in
        {309}let v_686: bitstring = catch-fail(symmetricstateunpack(v_685)) in
        {310}let v_687: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_686),v_683)) in
        {311}let v_688: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_686),v_683)) in
        {312}let v_689: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_686),v_683)) in
        {313}let v_690: bitstring = catch-fail((if success?(2-proj-3-tuple(v_686)) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (v_687,v_688,v_689) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {314}let v_691: symmetricstate = catch-fail((if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_690)) then cipherstatepack(2-proj-3-tuple(v_690),minnonce) else fail-any),1-proj-3-tuple(v_690),3-proj-3-tuple(v_686)) else fail-any) else fail-any)) in
        {315}let v_692: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_680))) in
        {316}let v_693: bitstring = catch-fail(symmetricstateunpack(v_691)) in
        {317}let v_694: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_693),(if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),v_683) else fail-any) else fail-any))) in
        {318}let v_695: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_693),(if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),v_683) else fail-any) else fail-any))) in
        {319}let v_696: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_693),(if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),v_683) else fail-any) else fail-any))) in
        {320}let v_697: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),v_683) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_693))) then (if not-caught-fail(v_694) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (v_694,v_695,v_696) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {321}let v_698: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),v_683) else fail-any) else fail-any)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_697)) then cipherstatepack(2-proj-3-tuple(v_697),minnonce) else fail-any),1-proj-3-tuple(v_697),3-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any)) in
        {322}let v_699: bitstring = catch-fail(symmetricstateunpack(v_698)) in
        {323}let v_700: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_699))) in
        {324}let v_701: aead = catch-fail(decrypt(1-proj-2-tuple(v_700),2-proj-2-tuple(v_700),3-proj-3-tuple(v_699),2-proj-3-tuple(v_681))) in
        {325}let v_702: bitstring = catch-fail(aeadunpack(v_701)) in
        {326}let v_703: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_699))) in
        {327}let v_704: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_700))) && success?(1-proj-3-tuple(v_699))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then cipherstatepack(1-proj-2-tuple(v_703),increment_nonce(2-proj-2-tuple(v_700))) else fail-any) else fail-any)) in
        {328}let v_705: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_681)) && (success?(3-proj-3-tuple(v_699)) && success?(1-proj-3-tuple(v_699)))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then (if not-caught-fail(v_701) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if not-caught-fail(v_704) then (v_704,3-proj-3-tuple(v_702),1-proj-3-tuple(v_702)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {329}let v_706: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_705),2-proj-3-tuple(v_699),3-proj-3-tuple(v_699)))) in
        {330}let v_707: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_681)) && success?(symmetricstatepack(1-proj-3-tuple(v_705),2-proj-3-tuple(v_699),3-proj-3-tuple(v_699)))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_706),hash(3-proj-3-tuple(v_706),2-proj-3-tuple(v_681))) else fail-any) else fail-any)) in
        {331}let v_708: bitstring = catch-fail((if success?(2-proj-3-tuple(v_681)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if not-caught-fail(v_707) then (v_707,2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {332}let v_709: key = catch-fail(2-proj-3-tuple(v_708)) in
        {333}let v_710: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_680))) in
        {334}let v_711: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_708))) in
        {335}let v_712: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_711),(if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),v_709) else fail-any) else fail-any))) in
        {336}let v_713: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_711),(if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),v_709) else fail-any) else fail-any))) in
        {337}let v_714: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_711),(if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),v_709) else fail-any) else fail-any))) in
        {338}let v_715: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),v_709) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_711))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_713) then (if not-caught-fail(v_714) then (v_712,v_713,v_714) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {339}let v_716: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_680)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then dhexp(2-proj-2-tuple(v_710),v_709) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_708))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_715)) then cipherstatepack(2-proj-3-tuple(v_715),minnonce) else fail-any),1-proj-3-tuple(v_715),3-proj-3-tuple(v_711)) else fail-any) else fail-any) else fail-any)) in
        {340}let v_717: bitstring = catch-fail(symmetricstateunpack(v_716)) in
        {341}let v_718: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_717),6-proj-7-tuple(v_680))) in
        {342}let v_719: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_717),6-proj-7-tuple(v_680))) in
        {343}let v_720: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_717),6-proj-7-tuple(v_680))) in
        {344}let v_721: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_680)) && success?(2-proj-3-tuple(v_717))) then (if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (v_718,v_719,v_720) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_722: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_717),1-proj-3-tuple(v_721),3-proj-3-tuple(v_717)))) in
        {346}let v_723: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_721)) && success?(symmetricstatepack(1-proj-3-tuple(v_717),1-proj-3-tuple(v_721),3-proj-3-tuple(v_717)))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),hash(3-proj-3-tuple(v_722),2-proj-3-tuple(v_721))) else fail-any) else fail-any))) in
        {347}let v_724: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_680)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_721)) then cipherstatepack(3-proj-3-tuple(v_721),minnonce) else fail-any),1-proj-3-tuple(v_721),3-proj-3-tuple(v_723)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_725: bitstring = catch-fail(symmetricstateunpack(v_724)) in
        {349}let v_726: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_725))) in
        {350}let v_727: aead = catch-fail(decrypt(1-proj-2-tuple(v_726),2-proj-2-tuple(v_726),3-proj-3-tuple(v_725),3-proj-3-tuple(v_681))) in
        {351}let v_728: bitstring = catch-fail(aeadunpack(v_727)) in
        {352}let v_729: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_725))) in
        {353}let v_730: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_726))) && success?(1-proj-3-tuple(v_725))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-2-tuple(v_729))))) then cipherstatepack(1-proj-2-tuple(v_729),increment_nonce(2-proj-2-tuple(v_726))) else fail-any) else fail-any)) in
        {354}let v_731: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_681)) && (success?(3-proj-3-tuple(v_725)) && success?(1-proj-3-tuple(v_725)))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then (if not-caught-fail(v_727) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then (if not-caught-fail(v_730) then (v_730,3-proj-3-tuple(v_728),1-proj-3-tuple(v_728)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_732: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_731),2-proj-3-tuple(v_725),3-proj-3-tuple(v_725)))) in
        {356}let v_733: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_681)) && success?(symmetricstatepack(1-proj-3-tuple(v_731),2-proj-3-tuple(v_725),3-proj-3-tuple(v_725)))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_732),hash(3-proj-3-tuple(v_732),3-proj-3-tuple(v_681))) else fail-any) else fail-any)) in
        {357}let v_734: bitstring = catch-fail((if success?(3-proj-3-tuple(v_681)) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if not-caught-fail(v_733) then (v_733,2-proj-3-tuple(v_731),3-proj-3-tuple(v_731)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {358}let v_735: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {359}let v_736: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_734),2-proj-7-tuple(v_680),3-proj-7-tuple(v_680),v_709,v_683,6-proj-7-tuple(v_680),7-proj-7-tuple(v_680))) in
        {360}let v_737: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_734))) in
        {361}let v_738: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_737),zero)) in
        {362}let v_739: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_737),zero)) in
        {363}let v_740: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_737),zero)) in
        {364}let v_741: bitstring = catch-fail((if success?(2-proj-3-tuple(v_737)) then (if not-caught-fail(v_738) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (v_738,v_739,v_740) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {365}let v_742: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_741)) then cipherstatepack(1-proj-3-tuple(v_741),minnonce) else fail-any)) in
        {366}let v_743: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_741)) then cipherstatepack(2-proj-3-tuple(v_741),minnonce) else fail-any)) in
        {367}let v_744: bitstring = catch-fail((if success?(1-proj-3-tuple(v_734)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_742) then (if not-caught-fail(v_743) then (1-proj-3-tuple(v_734),v_742,v_743) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {368}let (hs_745: handshakestate,plaintext_a_746: bitstring,valid_747: bool,cs1_748: cipherstate,cs2_749: cipherstate) = (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-7-tuple(v_680))))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if not-caught-fail(v_682) then (if not-caught-fail(v_683) then (if not-caught-fail(v_685) then (if not-caught-fail(v_691) then (if not-caught-fail(v_698) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_709) then (if not-caught-fail(v_716) then (if not-caught-fail(v_724) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then (if ((3-proj-3-tuple(v_708) && 3-proj-3-tuple(v_734)) && (v_709 = getpublickey((if not-caught-fail(v_735) then keypairpack(validkey(v_735),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_736) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (v_736,2-proj-3-tuple(v_734),true,2-proj-3-tuple(v_744),3-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {369}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_746);
        {370}event RecvEnd(valid_747)
    ) | (
        {372}event LeakPsk(phase0,charlie,bob);
        {373}out(pub, key_psk(charlie,bob))
    ) | (
        {374}phase 1;
        {375}event LeakPsk(phase1,charlie,bob);
        {376}out(pub, key_psk(charlie,bob))
    ) | (
        {377}event LeakS(phase0,bob);
        {378}out(pub, key_s(bob))
    ) | (
        {379}phase 1;
        {380}event LeakS(phase1,bob);
        {381}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_867,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_867,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 81 rules in the queue.
400 rules inserted. The rule base contains 361 rules. 53 rules in the queue.
600 rules inserted. The rule base contains 523 rules. 70 rules in the queue.
800 rules inserted. The rule base contains 662 rules. 101 rules in the queue.
1000 rules inserted. The rule base contains 763 rules. 116 rules in the queue.
1200 rules inserted. The rule base contains 915 rules. 118 rules in the queue.
1400 rules inserted. The rule base contains 1066 rules. 170 rules in the queue.
1600 rules inserted. The rule base contains 1139 rules. 139 rules in the queue.
1800 rules inserted. The rule base contains 1183 rules. 140 rules in the queue.
2000 rules inserted. The rule base contains 1276 rules. 99 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826784736]),msg_a(alice,bob,sid[!1 = @sid_826784736]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_826784737]),msg_a(alice,bob,sid[!1 = @sid_826784736])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_867,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826784745]),msg_a(alice,bob,sid[!1 = @sid_826784745]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_826784746]),msg_a(alice,bob,sid[!1 = @sid_826784745])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_867,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_867,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826784755]),msg_a(alice,bob,sid[!1 = @sid_826784755]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_826784756]),msg_a(alice,bob,sid[!1 = @sid_826784755])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_867,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826784765]),msg_a(alice,bob,sid[!1 = @sid_826784765]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_826784766]),msg_a(alice,bob,sid[!1 = @sid_826784765])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826784774]),msg_a(alice,bob,sid[!1 = @sid_826784774]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_826784775]),msg_a(alice,bob,sid[!1 = @sid_826784774])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826784782]),msg_a(alice,bob,sid[!1 = @sid_826784782]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_826784782]))
Abbreviations:
sid_826784995 = sid[!1 = @sid_826784971]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_826784995,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_826784995,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_826784995,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {87}.
The event SendMsg(alice,bob,stagepack_a(sid_826784995),msg_a(alice,bob,sid_826784995)) may be executed at {85}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995))) may be sent on channel pub at output {86}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995)).
attacker(encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995))).

6. By 5, the attacker may know encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995)).
So the attacker may know encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995)) in phase 1.
attacker_p1(encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995))).

7. The event LeakPsk(phase0,alice,bob) may be executed at {88}.
So the message key_psk(alice,bob) may be sent on channel pub at output {89}.
mess(pub,key_psk(alice,bob)).

8. By 1, the attacker may have the channel pub.
By 7, the message key_psk(alice,bob) may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) by listening on this channel.
attacker(key_psk(alice,bob)).

9. By 8, the attacker may know key_psk(alice,bob).
So the attacker may know key_psk(alice,bob) in phase 1.
attacker_p1(key_psk(alice,bob)).

10. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))).

11. By 10, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))).

12. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))).

13. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {194}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

14. By 1, the attacker may have the channel pub.
By 13, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

15. Using the function empty the attacker may obtain empty.
attacker(empty).

16. Using the function somename the attacker may obtain somename.
attacker(somename).

17. By 16, the attacker may know somename.
By 15, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

18. By 17, the attacker may know hash(somename,empty).
By 15, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty).
By 14, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 12, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 12, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))).

24. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

25. The event LeakS(phase1,bob) may be executed at {285}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {286}.
mess_p1(pub,key_s(bob)).

26. By 24, the attacker may have the channel pub in phase 1.
By 25, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 23, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))).

28. By 17, the attacker may know hash(somename,empty).
By 12, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))) in phase 1.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

33. By 26, the attacker may know key_s(bob) in phase 1.
By 32, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

34. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g)))).

35. By 34, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))) in phase 1.
By 33, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

36. By 35, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))).

37. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))).
By 10, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))))).

38. By 37, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g))))).

39. By 38, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 36, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)))).

40. By 35, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash3 the attacker may obtain hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))).

41. By 40, the attacker may know hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 39, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995))).

42. By 41, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826784995),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826784995)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_826784995) in phase 1.
attacker_p1(msg_a(alice,bob,sid_826784995)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826784997]),msg_a(alice,bob,sid[!1 = @sid_826784997]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_826784997]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826784999]),msg_a(alice,bob,sid[!1 = @sid_826784999]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_826784999]))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826785001]),msg_a(alice,bob,sid[!1 = @sid_826785001]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_826785001]))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826785004]),msg_a(alice,bob,sid[!1 = @sid_826785004]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_826785004]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826785020]),msg_a(alice,bob,sid[!1 = @sid_826785020]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_826785020]))
Abbreviations:
sid_826785236 = sid[!1 = @sid_826785212]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_826785236,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_826785236,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_826785236,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {87}.
The event SendMsg(alice,bob,stagepack_a(sid_826785236),msg_a(alice,bob,sid_826785236)) may be executed at {85}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236))) may be sent on channel pub at output {86}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236)).
attacker(encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236))).

6. By 5, the attacker may know encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236)).
So the attacker may know encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236)) in phase 1.
attacker_p1(encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236))).

7. The event LeakPsk(phase0,alice,bob) may be executed at {88}.
So the message key_psk(alice,bob) may be sent on channel pub at output {89}.
mess(pub,key_psk(alice,bob)).

8. By 1, the attacker may have the channel pub.
By 7, the message key_psk(alice,bob) may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) by listening on this channel.
attacker(key_psk(alice,bob)).

9. By 8, the attacker may know key_psk(alice,bob).
So the attacker may know key_psk(alice,bob) in phase 1.
attacker_p1(key_psk(alice,bob)).

10. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))).

11. By 10, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))).

12. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))).

13. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {194}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

14. By 1, the attacker may have the channel pub.
By 13, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

15. Using the function empty the attacker may obtain empty.
attacker(empty).

16. Using the function somename the attacker may obtain somename.
attacker(somename).

17. By 16, the attacker may know somename.
By 15, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

18. By 17, the attacker may know hash(somename,empty).
By 15, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty).
By 14, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 12, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 12, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))).

24. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

25. The event LeakS(phase1,bob) may be executed at {285}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {286}.
mess_p1(pub,key_s(bob)).

26. By 24, the attacker may have the channel pub in phase 1.
By 25, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 23, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))).

28. By 17, the attacker may know hash(somename,empty).
By 12, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))) in phase 1.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

33. By 26, the attacker may know key_s(bob) in phase 1.
By 32, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

34. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g)))).

35. By 34, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))) in phase 1.
By 33, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

36. By 35, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))).

37. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))).
By 10, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))))).

38. By 37, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g))))).

39. By 38, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 36, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)))).

40. By 35, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash3 the attacker may obtain hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))).

41. By 40, the attacker may know hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 39, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236))).

42. By 41, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785236),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785236)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_826785236) in phase 1.
attacker_p1(msg_a(alice,bob,sid_826785236)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826785238]),msg_a(alice,bob,sid[!1 = @sid_826785238]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_826785238]))
Abbreviations:
sid_826785451 = sid[!1 = @sid_826785427]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_826785451,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_826785451,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_826785451,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {87}.
The event SendMsg(alice,bob,stagepack_a(sid_826785451),msg_a(alice,bob,sid_826785451)) may be executed at {85}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451))) may be sent on channel pub at output {86}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451)).
attacker(encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451))).

6. By 5, the attacker may know encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451)).
So the attacker may know encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451)) in phase 1.
attacker_p1(encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451))).

7. The event LeakPsk(phase0,alice,bob) may be executed at {88}.
So the message key_psk(alice,bob) may be sent on channel pub at output {89}.
mess(pub,key_psk(alice,bob)).

8. By 1, the attacker may have the channel pub.
By 7, the message key_psk(alice,bob) may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) by listening on this channel.
attacker(key_psk(alice,bob)).

9. By 8, the attacker may know key_psk(alice,bob).
So the attacker may know key_psk(alice,bob) in phase 1.
attacker_p1(key_psk(alice,bob)).

10. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))).

11. By 10, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))).

12. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))).

13. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {194}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

14. By 1, the attacker may have the channel pub.
By 13, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

15. Using the function empty the attacker may obtain empty.
attacker(empty).

16. Using the function somename the attacker may obtain somename.
attacker(somename).

17. By 16, the attacker may know somename.
By 15, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

18. By 17, the attacker may know hash(somename,empty).
By 15, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty).
By 14, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))).
By 12, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 12, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))).

24. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

25. The event LeakS(phase1,bob) may be executed at {285}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {286}.
mess_p1(pub,key_s(bob)).

26. By 24, the attacker may have the channel pub in phase 1.
By 25, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 23, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))).

28. By 17, the attacker may know hash(somename,empty).
By 12, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))).
attacker(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))).
So the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))) in phase 1.
By 11, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

33. By 26, the attacker may know key_s(bob) in phase 1.
By 32, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

34. By 29, the attacker may know hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g)))).

35. By 34, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))) in phase 1.
By 33, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

36. By 35, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))).

37. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))).
By 10, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))))).

38. By 37, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g))))).

39. By 38, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))) in phase 1.
By 36, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)))).

40. By 35, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 9, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash3 the attacker may obtain hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))).

41. By 40, the attacker may know hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 39, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451))).

42. By 41, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785451),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785451)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_826785451) in phase 1.
attacker_p1(msg_a(alice,bob,sid_826785451)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_826785452]),msg_a(alice,bob,sid[!1 = @sid_826785452]))) -> end(RecvEnd(true))
Abbreviations:
sid_826785479 = sid[!1 = @sid_826785456]
sid_826785480 = sid[!1 = @sid_826785472]

1. The entry statestore(bob,alice,sid_826785480,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {206}.
table(statestore(bob,alice,sid_826785480,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,bob,sid_826785479,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_826785479,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_826785479,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {87}.
The event SendMsg(alice,bob,stagepack_a(sid_826785479),msg_a(alice,bob,sid_826785479)) may be executed at {85}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785479),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785479))) may be sent on channel pub at output {86}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785479),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785479)))).

4. The entry statestore(bob,alice,sid_826785480,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {276}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_826785479),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),validkey(dhexp_real(key_s(alice),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),validkey(dhexp_real(key_s(alice),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_826785479),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),key_psk(alice,bob))),msg_a(alice,bob,sid_826785479))) that may be sent on channel pub by 3 may be received at input {207}.
So event RecvEnd(true) may be executed at {275}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
