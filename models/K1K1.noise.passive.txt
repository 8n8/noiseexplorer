File "K1K1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1K1.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "K1K1.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "K1K1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 294, character 6:
Warning: identifier e rebound.
File "K1K1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "K1K1.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 298, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 299, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 307, character 6:
Warning: identifier e rebound.
File "K1K1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier ne rebound.
File "K1K1.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "K1K1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 361, characters 6-7:
Warning: identifier re rebound.
File "K1K1.noise.passive.pv", line 362, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 366, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 368, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 397, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 399, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 573, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 566, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 558, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1K1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 551, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 361, characters 6-7:
Warning: identifier re rebound.
File "K1K1.noise.passive.pv", line 362, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 366, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 368, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1K1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1K1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 543, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 294, character 6:
Warning: identifier e rebound.
File "K1K1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "K1K1.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 298, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 299, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 631, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 397, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 399, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 623, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 616, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1K1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 608, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 307, character 6:
Warning: identifier e rebound.
File "K1K1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier ne rebound.
File "K1K1.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1K1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1K1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 601, characters 8-9:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "K1K1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "K1K1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1K1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "K1K1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let v_507: key = catch-fail(dhexp(key_s(me),g)) in
    {6}let s_508: keypair = (if not-caught-fail(v_507) then keypairpack(v_507,key_s(me)) else fail-any) in
    {7}out(pub, getpublickey(s_508));
    (
        {8}let e_509: keypair = keypairpack(empty,empty) in
        {9}let v_510: key = catch-fail(dhexp(key_s(them),g)) in
        {10}let rs_511: key = getpublickey((if not-caught-fail(v_510) then keypairpack(v_510,key_s(them)) else fail-any)) in
        {11}let re_512: key = empty in
        {12}let v_513: bitstring = catch-fail(hash(somename,empty)) in
        {13}let v_514: key = catch-fail(v_513) in
        {14}let v_515: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {15}let v_516: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_513) then (if not-caught-fail(v_514) then (if not-caught-fail(v_515) then symmetricstatepack(v_515,v_514,v_513) else fail-any) else fail-any) else fail-any))) in
        {16}let v_517: symmetricstate = catch-fail((if success?((if not-caught-fail(v_513) then (if not-caught-fail(v_514) then (if not-caught-fail(v_515) then symmetricstatepack(v_515,v_514,v_513) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then symmetricstatepack(1-proj-3-tuple(v_516),2-proj-3-tuple(v_516),hash(3-proj-3-tuple(v_516),empty)) else fail-any) else fail-any)) in
        {17}let v_518: bitstring = catch-fail(symmetricstateunpack(v_517)) in
        {18}let v_519: symmetricstate = catch-fail((if success?(getpublickey(s_508)) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_518),hash(3-proj-3-tuple(v_518),getpublickey(s_508))) else fail-any) else fail-any)) in
        {19}let v_520: bitstring = catch-fail(symmetricstateunpack(v_519)) in
        {20}let v_521: symmetricstate = catch-fail((if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then symmetricstatepack(1-proj-3-tuple(v_520),2-proj-3-tuple(v_520),hash(3-proj-3-tuple(v_520),rs_511)) else fail-any)) in
        {21}let hs: handshakestate = (if not-caught-fail(v_517) then (if not-caught-fail(v_519) then (if not-caught-fail(v_521) then handshakestatepack(v_521,s_508,e_509,rs_511,re_512,empty,true) else fail-any) else fail-any) else fail-any) in
        {22}insert statestore(me,them,statepack_a(hs))
    ) | (
        {46}get statestore(=me,=them,statepack_a(hs_522: handshakestate)) in
        {23}let v_523: bitstring = catch-fail(handshakestateunpack(hs_522)) in
        {24}let v_524: bitstring = catch-fail((empty,empty,empty)) in
        {25}new key_e[me,them]: key;
        {26}let v_525: key = catch-fail(dhexp(key_e,g)) in
        {27}let v_526: keypair = catch-fail((if not-caught-fail(v_525) then keypairpack(v_525,key_e) else fail-any)) in
        {28}let v_527: bitstring = catch-fail(getpublickey(v_526)) in
        {29}let v_528: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_523))) in
        {30}let v_529: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_523)) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then symmetricstatepack(1-proj-3-tuple(v_528),2-proj-3-tuple(v_528),hash(3-proj-3-tuple(v_528),v_527)) else fail-any) else fail-any)) in
        {31}let v_530: bitstring = catch-fail(symmetricstateunpack(v_529)) in
        {32}let v_531: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {33}let v_532: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_531),2-proj-2-tuple(v_531),3-proj-3-tuple(v_530),msg_a(me,them))) in
        {34}let v_533: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {35}let v_534: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_531))) && success?(1-proj-3-tuple(v_530))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then cipherstatepack(1-proj-2-tuple(v_533),increment_nonce(2-proj-2-tuple(v_531))) else fail-any) else fail-any)) in
        {36}let v_535: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_530)) && success?(1-proj-3-tuple(v_530))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then (if not-caught-fail(v_532) then (if not-caught-fail(v_534) then (v_534,v_532) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {37}let v_536: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_535),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) in
        {38}let v_537: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_535)) && success?(symmetricstatepack(1-proj-2-tuple(v_535),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then symmetricstatepack(1-proj-3-tuple(v_536),2-proj-3-tuple(v_536),hash(3-proj-3-tuple(v_536),2-proj-2-tuple(v_535))) else fail-any) else fail-any)) in
        {39}let v_538: bitstring = catch-fail((if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then (if not-caught-fail(v_537) then (v_537,2-proj-2-tuple(v_535)) else fail-any) else fail-any) else fail-any)) in
        {40}let v_539: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_538),2-proj-7-tuple(v_523),v_526,4-proj-7-tuple(v_523),5-proj-7-tuple(v_523),6-proj-7-tuple(v_523),7-proj-7-tuple(v_523))) in
        {41}let v_540: bitstring = catch-fail(concat3(v_527,2-proj-3-tuple(v_524),2-proj-2-tuple(v_538))) in
        {42}let (hs_541: handshakestate,re_542: key,message_a: bitstring) = (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-7-tuple(v_523))))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then (if not-caught-fail(v_526) then (if not-caught-fail(v_527) then (if not-caught-fail(v_529) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then (if not-caught-fail(v_539) then (if not-caught-fail(v_540) then (v_539,5-proj-7-tuple(v_523),v_540) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {43}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {44}insert statestore(me,them,statepack_b(hs_541));
        {45}out(pub, message_a)
    ) | (
        {82}get statestore(=me,=them,statepack_b(hs_543: handshakestate)) in
        {47}in(pub, message_b: bitstring);
        {48}let v_544: bitstring = catch-fail(handshakestateunpack(hs_543)) in
        {49}let v_545: bitstring = catch-fail(deconcat3(message_b)) in
        {50}let v_546: bool = catch-fail(true) in
        {51}let v_547: key = catch-fail(1-proj-3-tuple(v_545)) in
        {52}let v_548: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_544))) in
        {53}let v_549: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_544)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then symmetricstatepack(1-proj-3-tuple(v_548),2-proj-3-tuple(v_548),hash(3-proj-3-tuple(v_548),v_547)) else fail-any) else fail-any)) in
        {54}let v_550: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_544))) in
        {55}let v_551: bitstring = catch-fail(symmetricstateunpack(v_549)) in
        {56}let v_552: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_551),(if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any))) in
        {57}let v_553: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_551),(if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any))) in
        {58}let v_554: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_551),(if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any))) in
        {59}let v_555: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_551))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (v_552,v_553,v_554) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_556: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any)) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_555)) then cipherstatepack(2-proj-3-tuple(v_555),minnonce) else fail-any),1-proj-3-tuple(v_555),3-proj-3-tuple(v_551)) else fail-any) else fail-any) else fail-any)) in
        {61}let v_557: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_544))) in
        {62}let v_558: bitstring = catch-fail(symmetricstateunpack(v_556)) in
        {63}let v_559: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_558),(if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_544)) else fail-any) else fail-any))) in
        {64}let v_560: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_558),(if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_544)) else fail-any) else fail-any))) in
        {65}let v_561: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_558),(if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_544)) else fail-any) else fail-any))) in
        {66}let v_562: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_544)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_558))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (v_559,v_560,v_561) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {67}let v_563: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_544)) else fail-any) else fail-any)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_562)) then cipherstatepack(2-proj-3-tuple(v_562),minnonce) else fail-any),1-proj-3-tuple(v_562),3-proj-3-tuple(v_558)) else fail-any) else fail-any) else fail-any)) in
        {68}let v_564: bitstring = catch-fail(symmetricstateunpack(v_563)) in
        {69}let v_565: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {70}let v_566: aead = catch-fail(decrypt(1-proj-2-tuple(v_565),2-proj-2-tuple(v_565),3-proj-3-tuple(v_564),3-proj-3-tuple(v_545))) in
        {71}let v_567: bitstring = catch-fail(aeadunpack(v_566)) in
        {72}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {73}let v_569: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_565))) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then cipherstatepack(1-proj-2-tuple(v_568),increment_nonce(2-proj-2-tuple(v_565))) else fail-any) else fail-any)) in
        {74}let v_570: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_545)) && (success?(3-proj-3-tuple(v_564)) && success?(1-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-2-tuple(v_565))))) then (if not-caught-fail(v_566) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if not-caught-fail(v_569) then (v_569,3-proj-3-tuple(v_567),1-proj-3-tuple(v_567)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {75}let v_571: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) in
        {76}let v_572: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_545)) && success?(symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack(1-proj-3-tuple(v_571),2-proj-3-tuple(v_571),hash(3-proj-3-tuple(v_571),3-proj-3-tuple(v_545))) else fail-any) else fail-any)) in
        {77}let v_573: bitstring = catch-fail((if success?(3-proj-3-tuple(v_545)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if not-caught-fail(v_572) then (v_572,2-proj-3-tuple(v_570),3-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_574: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_573),2-proj-7-tuple(v_544),3-proj-7-tuple(v_544),4-proj-7-tuple(v_544),v_547,6-proj-7-tuple(v_544),7-proj-7-tuple(v_544))) in
        {79}let (hs_575: handshakestate,re_576: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-7-tuple(v_544))))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (if not-caught-fail(v_549) then (if not-caught-fail(v_556) then (if not-caught-fail(v_563) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if (v_546 && 3-proj-3-tuple(v_573)) then (if not-caught-fail(v_574) then (v_574,getpublickey(3-proj-7-tuple(v_544)),2-proj-3-tuple(v_573),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {80}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {81}insert statestore(me,them,statepack_c(hs_575))
    ) | (
        {107}get statestore(=me,=them,statepack_c(hs_577: handshakestate)) in
        {83}let v_578: bitstring = catch-fail(handshakestateunpack(hs_577)) in
        {84}let v_579: bitstring = catch-fail((empty,empty,empty)) in
        {85}let v_580: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_578))) in
        {86}let v_581: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_578))) in
        {87}let v_582: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_581),(if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any))) in
        {88}let v_583: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_581),(if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any))) in
        {89}let v_584: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_581),(if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any))) in
        {90}let v_585: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_581))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (v_582,v_583,v_584) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_586: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_578))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_585)) then cipherstatepack(2-proj-3-tuple(v_585),minnonce) else fail-any),1-proj-3-tuple(v_585),3-proj-3-tuple(v_581)) else fail-any) else fail-any) else fail-any)) in
        {92}let v_587: bitstring = catch-fail(symmetricstateunpack(v_586)) in
        {93}let v_588: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {94}let v_589: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_588),2-proj-2-tuple(v_588),3-proj-3-tuple(v_587),msg_c(me,them))) in
        {95}let v_590: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {96}let v_591: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_588))) && success?(1-proj-3-tuple(v_587))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then cipherstatepack(1-proj-2-tuple(v_590),increment_nonce(2-proj-2-tuple(v_588))) else fail-any) else fail-any)) in
        {97}let v_592: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_587)) && success?(1-proj-3-tuple(v_587))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_591) then (v_591,v_589) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_593: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_592),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) in
        {99}let v_594: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_592)) && success?(symmetricstatepack(1-proj-2-tuple(v_592),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_593),hash(3-proj-3-tuple(v_593),2-proj-2-tuple(v_592))) else fail-any) else fail-any)) in
        {100}let v_595: bitstring = catch-fail((if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then (if not-caught-fail(v_594) then (v_594,2-proj-2-tuple(v_592)) else fail-any) else fail-any) else fail-any)) in
        {101}let v_596: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_595),2-proj-7-tuple(v_578),3-proj-7-tuple(v_578),4-proj-7-tuple(v_578),5-proj-7-tuple(v_578),6-proj-7-tuple(v_578),7-proj-7-tuple(v_578))) in
        {102}let v_597: bitstring = catch-fail(concat3(1-proj-3-tuple(v_579),2-proj-3-tuple(v_579),2-proj-2-tuple(v_595))) in
        {103}let (hs_598: handshakestate,re_599: key,message_c: bitstring) = (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-7-tuple(v_578))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_586) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (v_596,5-proj-7-tuple(v_578),v_597) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {104}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {105}insert statestore(me,them,statepack_d(hs_598));
        {106}out(pub, message_c)
    ) | (
        {126}get statestore(=me,=them,statepack_d(hs_600: handshakestate)) in
        {108}in(pub, message_d: bitstring);
        {109}let v_601: bitstring = catch-fail(handshakestateunpack(hs_600)) in
        {110}let v_602: bitstring = catch-fail(deconcat3(message_d)) in
        {111}let v_603: bool = catch-fail(true) in
        {112}let v_604: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_601))) in
        {113}let v_605: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {114}let v_606: aead = catch-fail(decrypt(1-proj-2-tuple(v_605),2-proj-2-tuple(v_605),3-proj-3-tuple(v_604),3-proj-3-tuple(v_602))) in
        {115}let v_607: bitstring = catch-fail(aeadunpack(v_606)) in
        {116}let v_608: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {117}let v_609: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_605))) && success?(1-proj-3-tuple(v_604))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then cipherstatepack(1-proj-2-tuple(v_608),increment_nonce(2-proj-2-tuple(v_605))) else fail-any) else fail-any)) in
        {118}let v_610: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_602)) && (success?(3-proj-3-tuple(v_604)) && success?(1-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then (if not-caught-fail(v_606) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if not-caught-fail(v_609) then (v_609,3-proj-3-tuple(v_607),1-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let v_611: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) in
        {120}let v_612: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_602)) && success?(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),3-proj-3-tuple(v_602))) else fail-any) else fail-any)) in
        {121}let v_613: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_602)) && success?(1-proj-7-tuple(v_601))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if not-caught-fail(v_612) then (v_612,2-proj-3-tuple(v_610),3-proj-3-tuple(v_610)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_614: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_613),2-proj-7-tuple(v_601),3-proj-7-tuple(v_601),4-proj-7-tuple(v_601),5-proj-7-tuple(v_601),6-proj-7-tuple(v_601),7-proj-7-tuple(v_601))) in
        {123}let (hs_615: handshakestate,re_616: key,plaintext_d: bitstring,valid_617: bool) = (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-7-tuple(v_601))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if not-caught-fail(v_603) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if (v_603 && 3-proj-3-tuple(v_613)) then (if not-caught-fail(v_614) then (v_614,getpublickey(3-proj-7-tuple(v_601)),2-proj-3-tuple(v_613),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {124}event RecvMsg(me,them,stage_d,plaintext_d,valid_617);
        {125}insert statestore(me,them,statepack_e(hs_615))
    ) | (
        {152}get statestore(=me,=them,statepack_e(hs_618: handshakestate)) in
        {127}let v_619: bitstring = catch-fail(handshakestateunpack(hs_618)) in
        {128}let v_620: bitstring = catch-fail((empty,empty,empty)) in
        {129}let v_621: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_619))) in
        {130}let v_622: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {131}let v_623: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_622),2-proj-2-tuple(v_622),3-proj-3-tuple(v_621),msg_e(me,them))) in
        {132}let v_624: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {133}let v_625: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_622))) && success?(1-proj-3-tuple(v_621))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then cipherstatepack(1-proj-2-tuple(v_624),increment_nonce(2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {134}let v_626: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_621)) && success?(1-proj-3-tuple(v_621))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_623) then (if not-caught-fail(v_625) then (v_625,v_623) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_627: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_626),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) in
        {136}let v_628: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_626)) && success?(symmetricstatepack(1-proj-2-tuple(v_626),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),2-proj-2-tuple(v_626))) else fail-any) else fail-any)) in
        {137}let v_629: bitstring = catch-fail((if success?(1-proj-7-tuple(v_619)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then (if not-caught-fail(v_628) then (v_628,2-proj-2-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_630: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_629),2-proj-7-tuple(v_619),3-proj-7-tuple(v_619),4-proj-7-tuple(v_619),5-proj-7-tuple(v_619),6-proj-7-tuple(v_619),7-proj-7-tuple(v_619))) in
        {139}let v_631: bitstring = catch-fail(concat3(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),2-proj-2-tuple(v_629))) in
        {140}let v_632: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_629))) in
        {141}let v_633: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_632),zero)) in
        {142}let v_634: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_632),zero)) in
        {143}let v_635: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_632),zero)) in
        {144}let v_636: bitstring = catch-fail((if success?(2-proj-3-tuple(v_632)) then (if not-caught-fail(v_633) then (if not-caught-fail(v_634) then (if not-caught-fail(v_635) then (v_633,v_634,v_635) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {145}let v_637: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_636)) then cipherstatepack(1-proj-3-tuple(v_636),minnonce) else fail-any)) in
        {146}let v_638: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_636)) then cipherstatepack(2-proj-3-tuple(v_636),minnonce) else fail-any)) in
        {147}let v_639: bitstring = catch-fail((if success?(1-proj-2-tuple(v_629)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (1-proj-2-tuple(v_629),v_637,v_638) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {148}let (hs_640: handshakestate,re_641: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-7-tuple(v_619))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (v_630,5-proj-7-tuple(v_619),v_631,2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {149}event SendMsg(me,them,stage_e,msg_e(me,them),true);
        {150}insert statestore(me,them,statepack_f(hs_640));
        {151}out(pub, message_e)
    ) | (
        {153}event LeakS(phase0,me);
        {154}out(pub, key_s(me))
    ) | (
        {155}phase 1;
        {156}event LeakS(phase1,me);
        {157}out(pub, key_s(me))
    )
) | (
    {158}let them_642: principal = charlie in
    {159}let me_643: principal = alice in
    {160}let v_644: key = catch-fail(dhexp(key_s(me_643),g)) in
    {161}let s_645: keypair = (if not-caught-fail(v_644) then keypairpack(v_644,key_s(me_643)) else fail-any) in
    {162}out(pub, getpublickey(s_645));
    (
        {163}let e_646: keypair = keypairpack(empty,empty) in
        {164}let v_647: key = catch-fail(dhexp(key_s(them_642),g)) in
        {165}let rs_648: key = getpublickey((if not-caught-fail(v_647) then keypairpack(v_647,key_s(them_642)) else fail-any)) in
        {166}let re_649: key = empty in
        {167}let v_650: bitstring = catch-fail(hash(somename,empty)) in
        {168}let v_651: key = catch-fail(v_650) in
        {169}let v_652: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {170}let v_653: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_650) then (if not-caught-fail(v_651) then (if not-caught-fail(v_652) then symmetricstatepack(v_652,v_651,v_650) else fail-any) else fail-any) else fail-any))) in
        {171}let v_654: symmetricstate = catch-fail((if success?((if not-caught-fail(v_650) then (if not-caught-fail(v_651) then (if not-caught-fail(v_652) then symmetricstatepack(v_652,v_651,v_650) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_653),hash(3-proj-3-tuple(v_653),empty)) else fail-any) else fail-any)) in
        {172}let v_655: bitstring = catch-fail(symmetricstateunpack(v_654)) in
        {173}let v_656: symmetricstate = catch-fail((if success?(getpublickey(s_645)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_655),hash(3-proj-3-tuple(v_655),getpublickey(s_645))) else fail-any) else fail-any)) in
        {174}let v_657: bitstring = catch-fail(symmetricstateunpack(v_656)) in
        {175}let v_658: symmetricstate = catch-fail((if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),rs_648)) else fail-any)) in
        {176}let hs_659: handshakestate = (if not-caught-fail(v_654) then (if not-caught-fail(v_656) then (if not-caught-fail(v_658) then handshakestatepack(v_658,s_645,e_646,rs_648,re_649,empty,true) else fail-any) else fail-any) else fail-any) in
        {177}insert statestore(me_643,them_642,statepack_a(hs_659))
    ) | (
        {201}get statestore(=me_643,=them_642,statepack_a(hs_660: handshakestate)) in
        {178}let v_661: bitstring = catch-fail(handshakestateunpack(hs_660)) in
        {179}let v_662: bitstring = catch-fail((empty,empty,empty)) in
        {180}new key_e_663[me_643,them_642]: key;
        {181}let v_664: key = catch-fail(dhexp(key_e_663,g)) in
        {182}let v_665: keypair = catch-fail((if not-caught-fail(v_664) then keypairpack(v_664,key_e_663) else fail-any)) in
        {183}let v_666: bitstring = catch-fail(getpublickey(v_665)) in
        {184}let v_667: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_661))) in
        {185}let v_668: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_661)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then symmetricstatepack(1-proj-3-tuple(v_667),2-proj-3-tuple(v_667),hash(3-proj-3-tuple(v_667),v_666)) else fail-any) else fail-any)) in
        {186}let v_669: bitstring = catch-fail(symmetricstateunpack(v_668)) in
        {187}let v_670: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {188}let v_671: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_670),2-proj-2-tuple(v_670),3-proj-3-tuple(v_669),msg_a(me_643,them_642))) in
        {189}let v_672: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {190}let v_673: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_670))) && success?(1-proj-3-tuple(v_669))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-2-tuple(v_672))))) then cipherstatepack(1-proj-2-tuple(v_672),increment_nonce(2-proj-2-tuple(v_670))) else fail-any) else fail-any)) in
        {191}let v_674: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_669)) && success?(1-proj-3-tuple(v_669))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-2-tuple(v_670))))) then (if not-caught-fail(v_671) then (if not-caught-fail(v_673) then (v_673,v_671) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {192}let v_675: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_674),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) in
        {193}let v_676: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_674)) && success?(symmetricstatepack(1-proj-2-tuple(v_674),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_675),hash(3-proj-3-tuple(v_675),2-proj-2-tuple(v_674))) else fail-any) else fail-any)) in
        {194}let v_677: bitstring = catch-fail((if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then (if not-caught-fail(v_676) then (v_676,2-proj-2-tuple(v_674)) else fail-any) else fail-any) else fail-any)) in
        {195}let v_678: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_677),2-proj-7-tuple(v_661),v_665,4-proj-7-tuple(v_661),5-proj-7-tuple(v_661),6-proj-7-tuple(v_661),7-proj-7-tuple(v_661))) in
        {196}let v_679: bitstring = catch-fail(concat3(v_666,2-proj-3-tuple(v_662),2-proj-2-tuple(v_677))) in
        {197}let (hs_680: handshakestate,re_681: key,message_a_682: bitstring) = (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-7-tuple(v_661))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (if not-caught-fail(v_668) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-2-tuple(v_677))))) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then (v_678,5-proj-7-tuple(v_661),v_679) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {198}event SendMsg(me_643,them_642,stage_a,msg_a(me_643,them_642),true);
        {199}insert statestore(me_643,them_642,statepack_b(hs_680));
        {200}out(pub, message_a_682)
    ) | (
        {237}get statestore(=me_643,=them_642,statepack_b(hs_683: handshakestate)) in
        {202}in(pub, message_b_684: bitstring);
        {203}let v_685: bitstring = catch-fail(handshakestateunpack(hs_683)) in
        {204}let v_686: bitstring = catch-fail(deconcat3(message_b_684)) in
        {205}let v_687: bool = catch-fail(true) in
        {206}let v_688: key = catch-fail(1-proj-3-tuple(v_686)) in
        {207}let v_689: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_685))) in
        {208}let v_690: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_685)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then symmetricstatepack(1-proj-3-tuple(v_689),2-proj-3-tuple(v_689),hash(3-proj-3-tuple(v_689),v_688)) else fail-any) else fail-any)) in
        {209}let v_691: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_685))) in
        {210}let v_692: bitstring = catch-fail(symmetricstateunpack(v_690)) in
        {211}let v_693: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_692),(if success?(3-proj-7-tuple(v_685)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then dhexp(2-proj-2-tuple(v_691),v_688) else fail-any) else fail-any))) in
        {212}let v_694: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_692),(if success?(3-proj-7-tuple(v_685)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then dhexp(2-proj-2-tuple(v_691),v_688) else fail-any) else fail-any))) in
        {213}let v_695: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_692),(if success?(3-proj-7-tuple(v_685)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then dhexp(2-proj-2-tuple(v_691),v_688) else fail-any) else fail-any))) in
        {214}let v_696: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_685)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then dhexp(2-proj-2-tuple(v_691),v_688) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_692))) then (if not-caught-fail(v_693) then (if not-caught-fail(v_694) then (if not-caught-fail(v_695) then (v_693,v_694,v_695) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {215}let v_697: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_685)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then dhexp(2-proj-2-tuple(v_691),v_688) else fail-any) else fail-any)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_696)) then cipherstatepack(2-proj-3-tuple(v_696),minnonce) else fail-any),1-proj-3-tuple(v_696),3-proj-3-tuple(v_692)) else fail-any) else fail-any) else fail-any)) in
        {216}let v_698: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_685))) in
        {217}let v_699: bitstring = catch-fail(symmetricstateunpack(v_697)) in
        {218}let v_700: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_699),(if (success?(4-proj-7-tuple(v_685)) && success?(3-proj-7-tuple(v_685))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then dhexp(2-proj-2-tuple(v_698),4-proj-7-tuple(v_685)) else fail-any) else fail-any))) in
        {219}let v_701: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_699),(if (success?(4-proj-7-tuple(v_685)) && success?(3-proj-7-tuple(v_685))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then dhexp(2-proj-2-tuple(v_698),4-proj-7-tuple(v_685)) else fail-any) else fail-any))) in
        {220}let v_702: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_699),(if (success?(4-proj-7-tuple(v_685)) && success?(3-proj-7-tuple(v_685))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then dhexp(2-proj-2-tuple(v_698),4-proj-7-tuple(v_685)) else fail-any) else fail-any))) in
        {221}let v_703: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_685)) && success?(3-proj-7-tuple(v_685))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then dhexp(2-proj-2-tuple(v_698),4-proj-7-tuple(v_685)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_699))) then (if not-caught-fail(v_700) then (if not-caught-fail(v_701) then (if not-caught-fail(v_702) then (v_700,v_701,v_702) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {222}let v_704: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_685)) && success?(3-proj-7-tuple(v_685))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then dhexp(2-proj-2-tuple(v_698),4-proj-7-tuple(v_685)) else fail-any) else fail-any)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_703)) then cipherstatepack(2-proj-3-tuple(v_703),minnonce) else fail-any),1-proj-3-tuple(v_703),3-proj-3-tuple(v_699)) else fail-any) else fail-any) else fail-any)) in
        {223}let v_705: bitstring = catch-fail(symmetricstateunpack(v_704)) in
        {224}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_705))) in
        {225}let v_707: aead = catch-fail(decrypt(1-proj-2-tuple(v_706),2-proj-2-tuple(v_706),3-proj-3-tuple(v_705),3-proj-3-tuple(v_686))) in
        {226}let v_708: bitstring = catch-fail(aeadunpack(v_707)) in
        {227}let v_709: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_705))) in
        {228}let v_710: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_706))) && success?(1-proj-3-tuple(v_705))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-2-tuple(v_709))))) then cipherstatepack(1-proj-2-tuple(v_709),increment_nonce(2-proj-2-tuple(v_706))) else fail-any) else fail-any)) in
        {229}let v_711: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_686)) && (success?(3-proj-3-tuple(v_705)) && success?(1-proj-3-tuple(v_705)))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then (if not-caught-fail(v_707) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_710) then (v_710,3-proj-3-tuple(v_708),1-proj-3-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_712: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_711),2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)))) in
        {231}let v_713: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_686)) && success?(symmetricstatepack(1-proj-3-tuple(v_711),2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_712),hash(3-proj-3-tuple(v_712),3-proj-3-tuple(v_686))) else fail-any) else fail-any)) in
        {232}let v_714: bitstring = catch-fail((if success?(3-proj-3-tuple(v_686)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if not-caught-fail(v_713) then (v_713,2-proj-3-tuple(v_711),3-proj-3-tuple(v_711)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_715: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_714),2-proj-7-tuple(v_685),3-proj-7-tuple(v_685),4-proj-7-tuple(v_685),v_688,6-proj-7-tuple(v_685),7-proj-7-tuple(v_685))) in
        {234}let (hs_716: handshakestate,re_717: key,plaintext_b_718: bitstring,valid_719: bool) = (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-7-tuple(v_685))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then (if not-caught-fail(v_690) then (if not-caught-fail(v_697) then (if not-caught-fail(v_704) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if (v_687 && 3-proj-3-tuple(v_714)) then (if not-caught-fail(v_715) then (v_715,getpublickey(3-proj-7-tuple(v_685)),2-proj-3-tuple(v_714),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {235}event RecvMsg(me_643,them_642,stage_b,plaintext_b_718,valid_719);
        {236}insert statestore(me_643,them_642,statepack_c(hs_716))
    ) | (
        {262}get statestore(=me_643,=them_642,statepack_c(hs_720: handshakestate)) in
        {238}let v_721: bitstring = catch-fail(handshakestateunpack(hs_720)) in
        {239}let v_722: bitstring = catch-fail((empty,empty,empty)) in
        {240}let v_723: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_721))) in
        {241}let v_724: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_721))) in
        {242}let v_725: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_724),(if (success?(5-proj-7-tuple(v_721)) && success?(2-proj-7-tuple(v_721))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_721)) else fail-any) else fail-any))) in
        {243}let v_726: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_724),(if (success?(5-proj-7-tuple(v_721)) && success?(2-proj-7-tuple(v_721))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_721)) else fail-any) else fail-any))) in
        {244}let v_727: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_724),(if (success?(5-proj-7-tuple(v_721)) && success?(2-proj-7-tuple(v_721))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_721)) else fail-any) else fail-any))) in
        {245}let v_728: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_721)) && success?(2-proj-7-tuple(v_721))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_721)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_724))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (v_725,v_726,v_727) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_729: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_721)) && success?(2-proj-7-tuple(v_721))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_721)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_721))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_728)) then cipherstatepack(2-proj-3-tuple(v_728),minnonce) else fail-any),1-proj-3-tuple(v_728),3-proj-3-tuple(v_724)) else fail-any) else fail-any) else fail-any)) in
        {247}let v_730: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {248}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {249}let v_732: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_731),2-proj-2-tuple(v_731),3-proj-3-tuple(v_730),msg_c(me_643,them_642))) in
        {250}let v_733: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {251}let v_734: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_731))) && success?(1-proj-3-tuple(v_730))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then cipherstatepack(1-proj-2-tuple(v_733),increment_nonce(2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {252}let v_735: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_730)) && success?(1-proj-3-tuple(v_730))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_732) then (if not-caught-fail(v_734) then (v_734,v_732) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_736: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_735),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) in
        {254}let v_737: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_735)) && success?(symmetricstatepack(1-proj-2-tuple(v_735),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_736),hash(3-proj-3-tuple(v_736),2-proj-2-tuple(v_735))) else fail-any) else fail-any)) in
        {255}let v_738: bitstring = catch-fail((if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then (if not-caught-fail(v_737) then (v_737,2-proj-2-tuple(v_735)) else fail-any) else fail-any) else fail-any)) in
        {256}let v_739: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_738),2-proj-7-tuple(v_721),3-proj-7-tuple(v_721),4-proj-7-tuple(v_721),5-proj-7-tuple(v_721),6-proj-7-tuple(v_721),7-proj-7-tuple(v_721))) in
        {257}let v_740: bitstring = catch-fail(concat3(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),2-proj-2-tuple(v_738))) in
        {258}let (hs_741: handshakestate,re_742: key,message_c_743: bitstring) = (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-7-tuple(v_721))))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (v_739,5-proj-7-tuple(v_721),v_740) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {259}event SendMsg(me_643,them_642,stage_c,msg_c(me_643,them_642),true);
        {260}insert statestore(me_643,them_642,statepack_d(hs_741));
        {261}out(pub, message_c_743)
    ) | (
        {281}get statestore(=me_643,=them_642,statepack_d(hs_744: handshakestate)) in
        {263}in(pub, message_d_745: bitstring);
        {264}let v_746: bitstring = catch-fail(handshakestateunpack(hs_744)) in
        {265}let v_747: bitstring = catch-fail(deconcat3(message_d_745)) in
        {266}let v_748: bool = catch-fail(true) in
        {267}let v_749: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_746))) in
        {268}let v_750: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_749))) in
        {269}let v_751: aead = catch-fail(decrypt(1-proj-2-tuple(v_750),2-proj-2-tuple(v_750),3-proj-3-tuple(v_749),3-proj-3-tuple(v_747))) in
        {270}let v_752: bitstring = catch-fail(aeadunpack(v_751)) in
        {271}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_749))) in
        {272}let v_754: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_750))) && success?(1-proj-3-tuple(v_749))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then cipherstatepack(1-proj-2-tuple(v_753),increment_nonce(2-proj-2-tuple(v_750))) else fail-any) else fail-any)) in
        {273}let v_755: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_747)) && (success?(3-proj-3-tuple(v_749)) && success?(1-proj-3-tuple(v_749)))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then (if not-caught-fail(v_751) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if not-caught-fail(v_754) then (v_754,3-proj-3-tuple(v_752),1-proj-3-tuple(v_752)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {274}let v_756: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_749),3-proj-3-tuple(v_749)))) in
        {275}let v_757: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_747)) && success?(symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_749),3-proj-3-tuple(v_749)))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_756),hash(3-proj-3-tuple(v_756),3-proj-3-tuple(v_747))) else fail-any) else fail-any)) in
        {276}let v_758: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_747)) && success?(1-proj-7-tuple(v_746))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if not-caught-fail(v_757) then (v_757,2-proj-3-tuple(v_755),3-proj-3-tuple(v_755)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_759: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_758),2-proj-7-tuple(v_746),3-proj-7-tuple(v_746),4-proj-7-tuple(v_746),5-proj-7-tuple(v_746),6-proj-7-tuple(v_746),7-proj-7-tuple(v_746))) in
        {278}let (hs_760: handshakestate,re_761: key,plaintext_d_762: bitstring,valid_763: bool) = (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-7-tuple(v_746))))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if not-caught-fail(v_748) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if (v_748 && 3-proj-3-tuple(v_758)) then (if not-caught-fail(v_759) then (v_759,getpublickey(3-proj-7-tuple(v_746)),2-proj-3-tuple(v_758),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {279}event RecvMsg(me_643,them_642,stage_d,plaintext_d_762,valid_763);
        {280}insert statestore(me_643,them_642,statepack_e(hs_760))
    ) | (
        {307}get statestore(=me_643,=them_642,statepack_e(hs_764: handshakestate)) in
        {282}let v_765: bitstring = catch-fail(handshakestateunpack(hs_764)) in
        {283}let v_766: bitstring = catch-fail((empty,empty,empty)) in
        {284}let v_767: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_765))) in
        {285}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {286}let v_769: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_768),2-proj-2-tuple(v_768),3-proj-3-tuple(v_767),msg_e(me_643,them_642))) in
        {287}let v_770: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {288}let v_771: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_768))) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then cipherstatepack(1-proj-2-tuple(v_770),increment_nonce(2-proj-2-tuple(v_768))) else fail-any) else fail-any)) in
        {289}let v_772: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_767)) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_771) then (v_771,v_769) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {290}let v_773: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_772),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) in
        {291}let v_774: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_772)) && success?(symmetricstatepack(1-proj-2-tuple(v_772),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then symmetricstatepack(1-proj-3-tuple(v_773),2-proj-3-tuple(v_773),hash(3-proj-3-tuple(v_773),2-proj-2-tuple(v_772))) else fail-any) else fail-any)) in
        {292}let v_775: bitstring = catch-fail((if success?(1-proj-7-tuple(v_765)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_774) then (v_774,2-proj-2-tuple(v_772)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_776: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_775),2-proj-7-tuple(v_765),3-proj-7-tuple(v_765),4-proj-7-tuple(v_765),5-proj-7-tuple(v_765),6-proj-7-tuple(v_765),7-proj-7-tuple(v_765))) in
        {294}let v_777: bitstring = catch-fail(concat3(1-proj-3-tuple(v_766),2-proj-3-tuple(v_766),2-proj-2-tuple(v_775))) in
        {295}let v_778: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_775))) in
        {296}let v_779: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_778),zero)) in
        {297}let v_780: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_778),zero)) in
        {298}let v_781: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_778),zero)) in
        {299}let v_782: bitstring = catch-fail((if success?(2-proj-3-tuple(v_778)) then (if not-caught-fail(v_779) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (v_779,v_780,v_781) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_783: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_782)) then cipherstatepack(1-proj-3-tuple(v_782),minnonce) else fail-any)) in
        {301}let v_784: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_782)) then cipherstatepack(2-proj-3-tuple(v_782),minnonce) else fail-any)) in
        {302}let v_785: bitstring = catch-fail((if success?(1-proj-2-tuple(v_775)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_783) then (if not-caught-fail(v_784) then (1-proj-2-tuple(v_775),v_783,v_784) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let (hs_786: handshakestate,re_787: key,message_e_788: bitstring,cs1_789: cipherstate,cs2_790: cipherstate) = (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-7-tuple(v_765))))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then (if not-caught-fail(v_776) then (if not-caught-fail(v_777) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (v_776,5-proj-7-tuple(v_765),v_777,2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {304}event SendMsg(me_643,them_642,stage_e,msg_e(me_643,them_642),true);
        {305}insert statestore(me_643,them_642,statepack_f(hs_786));
        {306}out(pub, message_e_788)
    ) | (
        {308}event LeakS(phase0,me_643);
        {309}out(pub, key_s(me_643))
    ) | (
        {310}phase 1;
        {311}event LeakS(phase1,me_643);
        {312}out(pub, key_s(me_643))
    )
) | (
    {313}let them_791: principal = alice in
    {314}let me_792: principal = bob in
    {315}let v_793: key = catch-fail(dhexp(key_s(me_792),g)) in
    {316}let s_794: keypair = (if not-caught-fail(v_793) then keypairpack(v_793,key_s(me_792)) else fail-any) in
    {317}out(pub, getpublickey(s_794));
    (
        {318}let e_795: keypair = keypairpack(empty,empty) in
        {319}let v_796: key = catch-fail(dhexp(key_s(them_791),g)) in
        {320}let rs_797: key = getpublickey((if not-caught-fail(v_796) then keypairpack(v_796,key_s(them_791)) else fail-any)) in
        {321}let re_798: key = empty in
        {322}let v_799: bitstring = catch-fail(hash(somename,empty)) in
        {323}let v_800: key = catch-fail(v_799) in
        {324}let v_801: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {325}let v_802: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_799) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then symmetricstatepack(v_801,v_800,v_799) else fail-any) else fail-any) else fail-any))) in
        {326}let v_803: symmetricstate = catch-fail((if success?((if not-caught-fail(v_799) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then symmetricstatepack(v_801,v_800,v_799) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then symmetricstatepack(1-proj-3-tuple(v_802),2-proj-3-tuple(v_802),hash(3-proj-3-tuple(v_802),empty)) else fail-any) else fail-any)) in
        {327}let v_804: bitstring = catch-fail(symmetricstateunpack(v_803)) in
        {328}let v_805: symmetricstate = catch-fail((if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then symmetricstatepack(1-proj-3-tuple(v_804),2-proj-3-tuple(v_804),hash(3-proj-3-tuple(v_804),rs_797)) else fail-any)) in
        {329}let v_806: bitstring = catch-fail(symmetricstateunpack(v_805)) in
        {330}let v_807: symmetricstate = catch-fail((if success?(getpublickey(s_794)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then symmetricstatepack(1-proj-3-tuple(v_806),2-proj-3-tuple(v_806),hash(3-proj-3-tuple(v_806),getpublickey(s_794))) else fail-any) else fail-any)) in
        {331}let hs_808: handshakestate = (if not-caught-fail(v_803) then (if not-caught-fail(v_805) then (if not-caught-fail(v_807) then handshakestatepack(v_807,s_794,e_795,rs_797,re_798,empty,false) else fail-any) else fail-any) else fail-any) in
        {332}insert statestore(me_792,them_791,statepack_a(hs_808))
    ) | (
        {354}get statestore(=me_792,=them_791,statepack_a(hs_809: handshakestate)) in
        {333}in(pub, message_a_810: bitstring);
        {334}let v_811: bitstring = catch-fail(handshakestateunpack(hs_809)) in
        {335}let v_812: bitstring = catch-fail(deconcat3(message_a_810)) in
        {336}let v_813: bool = catch-fail(true) in
        {337}let v_814: key = catch-fail(1-proj-3-tuple(v_812)) in
        {338}let v_815: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_811))) in
        {339}let v_816: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_811)) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_815),hash(3-proj-3-tuple(v_815),v_814)) else fail-any) else fail-any)) in
        {340}let v_817: bitstring = catch-fail(symmetricstateunpack(v_816)) in
        {341}let v_818: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_817))) in
        {342}let v_819: aead = catch-fail(decrypt(1-proj-2-tuple(v_818),2-proj-2-tuple(v_818),3-proj-3-tuple(v_817),3-proj-3-tuple(v_812))) in
        {343}let v_820: bitstring = catch-fail(aeadunpack(v_819)) in
        {344}let v_821: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_817))) in
        {345}let v_822: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_818))) && success?(1-proj-3-tuple(v_817))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then cipherstatepack(1-proj-2-tuple(v_821),increment_nonce(2-proj-2-tuple(v_818))) else fail-any) else fail-any)) in
        {346}let v_823: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_812)) && (success?(3-proj-3-tuple(v_817)) && success?(1-proj-3-tuple(v_817)))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-2-tuple(v_818))))) then (if not-caught-fail(v_819) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if not-caught-fail(v_822) then (v_822,3-proj-3-tuple(v_820),1-proj-3-tuple(v_820)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {347}let v_824: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_823),2-proj-3-tuple(v_817),3-proj-3-tuple(v_817)))) in
        {348}let v_825: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_812)) && success?(symmetricstatepack(1-proj-3-tuple(v_823),2-proj-3-tuple(v_817),3-proj-3-tuple(v_817)))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then symmetricstatepack(1-proj-3-tuple(v_824),2-proj-3-tuple(v_824),hash(3-proj-3-tuple(v_824),3-proj-3-tuple(v_812))) else fail-any) else fail-any)) in
        {349}let v_826: bitstring = catch-fail((if success?(3-proj-3-tuple(v_812)) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_825) then (v_825,2-proj-3-tuple(v_823),3-proj-3-tuple(v_823)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {350}let v_827: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_826),2-proj-7-tuple(v_811),3-proj-7-tuple(v_811),4-proj-7-tuple(v_811),v_814,6-proj-7-tuple(v_811),7-proj-7-tuple(v_811))) in
        {351}let (hs_828: handshakestate,re_829: key,plaintext_a: bitstring,valid_830: bool) = (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-7-tuple(v_811))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if not-caught-fail(v_816) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if (v_813 && 3-proj-3-tuple(v_826)) then (if not-caught-fail(v_827) then (v_827,getpublickey(3-proj-7-tuple(v_811)),2-proj-3-tuple(v_826),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {352}event RecvMsg(me_792,them_791,stage_a,plaintext_a,valid_830);
        {353}insert statestore(me_792,them_791,statepack_b(hs_828))
    ) | (
        {392}get statestore(=me_792,=them_791,statepack_b(hs_831: handshakestate)) in
        {355}let v_832: bitstring = catch-fail(handshakestateunpack(hs_831)) in
        {356}let v_833: bitstring = catch-fail((empty,empty,empty)) in
        {357}new key_e_834[me_792,them_791]: key;
        {358}let v_835: key = catch-fail(dhexp(key_e_834,g)) in
        {359}let v_836: keypair = catch-fail((if not-caught-fail(v_835) then keypairpack(v_835,key_e_834) else fail-any)) in
        {360}let v_837: bitstring = catch-fail(getpublickey(v_836)) in
        {361}let v_838: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_832))) in
        {362}let v_839: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_832)) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_838),hash(3-proj-3-tuple(v_838),v_837)) else fail-any) else fail-any)) in
        {363}let v_840: bitstring = catch-fail(keypairunpack(v_836)) in
        {364}let v_841: bitstring = catch-fail(symmetricstateunpack(v_839)) in
        {365}let v_842: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_841),(if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then dhexp(2-proj-2-tuple(v_840),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {366}let v_843: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_841),(if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then dhexp(2-proj-2-tuple(v_840),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {367}let v_844: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_841),(if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then dhexp(2-proj-2-tuple(v_840),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {368}let v_845: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then dhexp(2-proj-2-tuple(v_840),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_841))) then (if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then (v_842,v_843,v_844) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_846: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_832)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then dhexp(2-proj-2-tuple(v_840),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_845)) then cipherstatepack(2-proj-3-tuple(v_845),minnonce) else fail-any),1-proj-3-tuple(v_845),3-proj-3-tuple(v_841)) else fail-any) else fail-any) else fail-any)) in
        {370}let v_847: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_832))) in
        {371}let v_848: bitstring = catch-fail(symmetricstateunpack(v_846)) in
        {372}let v_849: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_848),(if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {373}let v_850: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_848),(if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {374}let v_851: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_848),(if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {375}let v_852: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_848))) then (if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (if not-caught-fail(v_851) then (v_849,v_850,v_851) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {376}let v_853: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_852)) then cipherstatepack(2-proj-3-tuple(v_852),minnonce) else fail-any),1-proj-3-tuple(v_852),3-proj-3-tuple(v_848)) else fail-any) else fail-any) else fail-any)) in
        {377}let v_854: bitstring = catch-fail(symmetricstateunpack(v_853)) in
        {378}let v_855: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_854))) in
        {379}let v_856: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_855),2-proj-2-tuple(v_855),3-proj-3-tuple(v_854),msg_b(me_792,them_791))) in
        {380}let v_857: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_854))) in
        {381}let v_858: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_855))) && success?(1-proj-3-tuple(v_854))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then cipherstatepack(1-proj-2-tuple(v_857),increment_nonce(2-proj-2-tuple(v_855))) else fail-any) else fail-any)) in
        {382}let v_859: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_854)) && success?(1-proj-3-tuple(v_854))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then (if not-caught-fail(v_856) then (if not-caught-fail(v_858) then (v_858,v_856) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {383}let v_860: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_859),2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)))) in
        {384}let v_861: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_859)) && success?(symmetricstatepack(1-proj-2-tuple(v_859),2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then symmetricstatepack(1-proj-3-tuple(v_860),2-proj-3-tuple(v_860),hash(3-proj-3-tuple(v_860),2-proj-2-tuple(v_859))) else fail-any) else fail-any)) in
        {385}let v_862: bitstring = catch-fail((if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-2-tuple(v_859))))) then (if not-caught-fail(v_861) then (v_861,2-proj-2-tuple(v_859)) else fail-any) else fail-any) else fail-any)) in
        {386}let v_863: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_862),2-proj-7-tuple(v_832),v_836,4-proj-7-tuple(v_832),5-proj-7-tuple(v_832),6-proj-7-tuple(v_832),7-proj-7-tuple(v_832))) in
        {387}let v_864: bitstring = catch-fail(concat3(v_837,2-proj-3-tuple(v_833),2-proj-2-tuple(v_862))) in
        {388}let (hs_865: handshakestate,re_866: key,message_b_867: bitstring) = (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-7-tuple(v_832))))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if not-caught-fail(v_836) then (if not-caught-fail(v_837) then (if not-caught-fail(v_839) then (if not-caught-fail(v_846) then (if not-caught-fail(v_853) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-2-tuple(v_862))))) then (if not-caught-fail(v_863) then (if not-caught-fail(v_864) then (v_863,5-proj-7-tuple(v_832),v_864) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {389}event SendMsg(me_792,them_791,stage_b,msg_b(me_792,them_791),true);
        {390}insert statestore(me_792,them_791,statepack_c(hs_865));
        {391}out(pub, message_b_867)
    ) | (
        {418}get statestore(=me_792,=them_791,statepack_c(hs_868: handshakestate)) in
        {393}in(pub, message_c_869: bitstring);
        {394}let v_870: bitstring = catch-fail(handshakestateunpack(hs_868)) in
        {395}let v_871: bitstring = catch-fail(deconcat3(message_c_869)) in
        {396}let v_872: bool = catch-fail(true) in
        {397}let v_873: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_870))) in
        {398}let v_874: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_870))) in
        {399}let v_875: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_874),(if (success?(4-proj-7-tuple(v_870)) && success?(3-proj-7-tuple(v_870))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),4-proj-7-tuple(v_870)) else fail-any) else fail-any))) in
        {400}let v_876: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_874),(if (success?(4-proj-7-tuple(v_870)) && success?(3-proj-7-tuple(v_870))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),4-proj-7-tuple(v_870)) else fail-any) else fail-any))) in
        {401}let v_877: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_874),(if (success?(4-proj-7-tuple(v_870)) && success?(3-proj-7-tuple(v_870))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),4-proj-7-tuple(v_870)) else fail-any) else fail-any))) in
        {402}let v_878: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_870)) && success?(3-proj-7-tuple(v_870))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),4-proj-7-tuple(v_870)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_874))) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then (v_875,v_876,v_877) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {403}let v_879: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_870)) && success?(3-proj-7-tuple(v_870))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),4-proj-7-tuple(v_870)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_870))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_878)) then cipherstatepack(2-proj-3-tuple(v_878),minnonce) else fail-any),1-proj-3-tuple(v_878),3-proj-3-tuple(v_874)) else fail-any) else fail-any) else fail-any)) in
        {404}let v_880: bitstring = catch-fail(symmetricstateunpack(v_879)) in
        {405}let v_881: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_880))) in
        {406}let v_882: aead = catch-fail(decrypt(1-proj-2-tuple(v_881),2-proj-2-tuple(v_881),3-proj-3-tuple(v_880),3-proj-3-tuple(v_871))) in
        {407}let v_883: bitstring = catch-fail(aeadunpack(v_882)) in
        {408}let v_884: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_880))) in
        {409}let v_885: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_881))) && success?(1-proj-3-tuple(v_880))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then cipherstatepack(1-proj-2-tuple(v_884),increment_nonce(2-proj-2-tuple(v_881))) else fail-any) else fail-any)) in
        {410}let v_886: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_871)) && (success?(3-proj-3-tuple(v_880)) && success?(1-proj-3-tuple(v_880)))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-2-tuple(v_881))))) then (if not-caught-fail(v_882) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if not-caught-fail(v_885) then (v_885,3-proj-3-tuple(v_883),1-proj-3-tuple(v_883)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {411}let v_887: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_886),2-proj-3-tuple(v_880),3-proj-3-tuple(v_880)))) in
        {412}let v_888: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_871)) && success?(symmetricstatepack(1-proj-3-tuple(v_886),2-proj-3-tuple(v_880),3-proj-3-tuple(v_880)))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_887),hash(3-proj-3-tuple(v_887),3-proj-3-tuple(v_871))) else fail-any) else fail-any)) in
        {413}let v_889: bitstring = catch-fail((if success?(3-proj-3-tuple(v_871)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if not-caught-fail(v_888) then (v_888,2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {414}let v_890: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_889),2-proj-7-tuple(v_870),3-proj-7-tuple(v_870),4-proj-7-tuple(v_870),5-proj-7-tuple(v_870),6-proj-7-tuple(v_870),7-proj-7-tuple(v_870))) in
        {415}let (hs_891: handshakestate,re_892: key,plaintext_c: bitstring,valid_893: bool) = (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-7-tuple(v_870))))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if not-caught-fail(v_872) then (if not-caught-fail(v_879) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if (v_872 && 3-proj-3-tuple(v_889)) then (if not-caught-fail(v_890) then (v_890,getpublickey(3-proj-7-tuple(v_870)),2-proj-3-tuple(v_889),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {416}event RecvMsg(me_792,them_791,stage_c,plaintext_c,valid_893);
        {417}insert statestore(me_792,them_791,statepack_d(hs_891))
    ) | (
        {436}get statestore(=me_792,=them_791,statepack_d(hs_894: handshakestate)) in
        {419}let v_895: bitstring = catch-fail(handshakestateunpack(hs_894)) in
        {420}let v_896: bitstring = catch-fail((empty,empty,empty)) in
        {421}let v_897: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_895))) in
        {422}let v_898: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_897))) in
        {423}let v_899: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_898),2-proj-2-tuple(v_898),3-proj-3-tuple(v_897),msg_d(me_792,them_791))) in
        {424}let v_900: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_897))) in
        {425}let v_901: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_898))) && success?(1-proj-3-tuple(v_897))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then cipherstatepack(1-proj-2-tuple(v_900),increment_nonce(2-proj-2-tuple(v_898))) else fail-any) else fail-any)) in
        {426}let v_902: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_897)) && success?(1-proj-3-tuple(v_897))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then (if not-caught-fail(v_899) then (if not-caught-fail(v_901) then (v_901,v_899) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let v_903: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_902),2-proj-3-tuple(v_897),3-proj-3-tuple(v_897)))) in
        {428}let v_904: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_902)) && success?(symmetricstatepack(1-proj-2-tuple(v_902),2-proj-3-tuple(v_897),3-proj-3-tuple(v_897)))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then symmetricstatepack(1-proj-3-tuple(v_903),2-proj-3-tuple(v_903),hash(3-proj-3-tuple(v_903),2-proj-2-tuple(v_902))) else fail-any) else fail-any)) in
        {429}let v_905: bitstring = catch-fail((if success?(1-proj-7-tuple(v_895)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then (if not-caught-fail(v_904) then (v_904,2-proj-2-tuple(v_902)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {430}let v_906: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_905),2-proj-7-tuple(v_895),3-proj-7-tuple(v_895),4-proj-7-tuple(v_895),5-proj-7-tuple(v_895),6-proj-7-tuple(v_895),7-proj-7-tuple(v_895))) in
        {431}let v_907: bitstring = catch-fail(concat3(1-proj-3-tuple(v_896),2-proj-3-tuple(v_896),2-proj-2-tuple(v_905))) in
        {432}let (hs_908: handshakestate,re_909: key,message_d_910: bitstring) = (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-7-tuple(v_895))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-2-tuple(v_905))))) then (if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (v_906,5-proj-7-tuple(v_895),v_907) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {433}event SendMsg(me_792,them_791,stage_d,msg_d(me_792,them_791),true);
        {434}insert statestore(me_792,them_791,statepack_e(hs_908));
        {435}out(pub, message_d_910)
    ) | (
        {464}get statestore(=me_792,=them_791,statepack_e(hs_911: handshakestate)) in
        {437}in(pub, message_e_912: bitstring);
        {438}let v_913: bitstring = catch-fail(handshakestateunpack(hs_911)) in
        {439}let v_914: bitstring = catch-fail(deconcat3(message_e_912)) in
        {440}let v_915: bool = catch-fail(true) in
        {441}let v_916: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_913))) in
        {442}let v_917: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_916))) in
        {443}let v_918: aead = catch-fail(decrypt(1-proj-2-tuple(v_917),2-proj-2-tuple(v_917),3-proj-3-tuple(v_916),3-proj-3-tuple(v_914))) in
        {444}let v_919: bitstring = catch-fail(aeadunpack(v_918)) in
        {445}let v_920: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_916))) in
        {446}let v_921: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_917))) && success?(1-proj-3-tuple(v_916))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then cipherstatepack(1-proj-2-tuple(v_920),increment_nonce(2-proj-2-tuple(v_917))) else fail-any) else fail-any)) in
        {447}let v_922: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_914)) && (success?(3-proj-3-tuple(v_916)) && success?(1-proj-3-tuple(v_916)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then (if not-caught-fail(v_918) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if not-caught-fail(v_921) then (v_921,3-proj-3-tuple(v_919),1-proj-3-tuple(v_919)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {448}let v_923: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_922),2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)))) in
        {449}let v_924: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_914)) && success?(symmetricstatepack(1-proj-3-tuple(v_922),2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then symmetricstatepack(1-proj-3-tuple(v_923),2-proj-3-tuple(v_923),hash(3-proj-3-tuple(v_923),3-proj-3-tuple(v_914))) else fail-any) else fail-any)) in
        {450}let v_925: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_914)) && success?(1-proj-7-tuple(v_913))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if not-caught-fail(v_924) then (v_924,2-proj-3-tuple(v_922),3-proj-3-tuple(v_922)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {451}let v_926: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_925),2-proj-7-tuple(v_913),3-proj-7-tuple(v_913),4-proj-7-tuple(v_913),5-proj-7-tuple(v_913),6-proj-7-tuple(v_913),7-proj-7-tuple(v_913))) in
        {452}let v_927: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_925))) in
        {453}let v_928: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_927),zero)) in
        {454}let v_929: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_927),zero)) in
        {455}let v_930: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_927),zero)) in
        {456}let v_931: bitstring = catch-fail((if success?(2-proj-3-tuple(v_927)) then (if not-caught-fail(v_928) then (if not-caught-fail(v_929) then (if not-caught-fail(v_930) then (v_928,v_929,v_930) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {457}let v_932: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_931)) then cipherstatepack(1-proj-3-tuple(v_931),minnonce) else fail-any)) in
        {458}let v_933: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_931)) then cipherstatepack(2-proj-3-tuple(v_931),minnonce) else fail-any)) in
        {459}let v_934: bitstring = catch-fail((if success?(1-proj-3-tuple(v_925)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_933) then (1-proj-3-tuple(v_925),v_932,v_933) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let (hs_935: handshakestate,re_936: key,plaintext_e: bitstring,valid_937: bool,cs1_938: cipherstate,cs2_939: cipherstate) = (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-7-tuple(v_913))))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (if not-caught-fail(v_915) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if (v_915 && 3-proj-3-tuple(v_925)) then (if not-caught-fail(v_926) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (v_926,getpublickey(3-proj-7-tuple(v_913)),2-proj-3-tuple(v_925),true,2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {461}event RecvMsg(me_792,them_791,stage_e,plaintext_e,valid_937);
        {462}insert statestore(me_792,them_791,statepack_f(hs_935));
        {463}event RecvEnd(valid_937)
    ) | (
        {465}event LeakS(phase0,me_792);
        {466}out(pub, key_s(me_792))
    ) | (
        {467}phase 1;
        {468}event LeakS(phase1,me_792);
        {469}out(pub, key_s(me_792))
    )
) | (
    {470}let them_940: principal = charlie in
    {471}let me_941: principal = bob in
    {472}let v_942: key = catch-fail(dhexp(key_s(me_941),g)) in
    {473}let s_943: keypair = (if not-caught-fail(v_942) then keypairpack(v_942,key_s(me_941)) else fail-any) in
    {474}out(pub, getpublickey(s_943));
    (
        {475}let e_944: keypair = keypairpack(empty,empty) in
        {476}let v_945: key = catch-fail(dhexp(key_s(them_940),g)) in
        {477}let rs_946: key = getpublickey((if not-caught-fail(v_945) then keypairpack(v_945,key_s(them_940)) else fail-any)) in
        {478}let re_947: key = empty in
        {479}let v_948: bitstring = catch-fail(hash(somename,empty)) in
        {480}let v_949: key = catch-fail(v_948) in
        {481}let v_950: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {482}let v_951: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_948) then (if not-caught-fail(v_949) then (if not-caught-fail(v_950) then symmetricstatepack(v_950,v_949,v_948) else fail-any) else fail-any) else fail-any))) in
        {483}let v_952: symmetricstate = catch-fail((if success?((if not-caught-fail(v_948) then (if not-caught-fail(v_949) then (if not-caught-fail(v_950) then symmetricstatepack(v_950,v_949,v_948) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then symmetricstatepack(1-proj-3-tuple(v_951),2-proj-3-tuple(v_951),hash(3-proj-3-tuple(v_951),empty)) else fail-any) else fail-any)) in
        {484}let v_953: bitstring = catch-fail(symmetricstateunpack(v_952)) in
        {485}let v_954: symmetricstate = catch-fail((if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then symmetricstatepack(1-proj-3-tuple(v_953),2-proj-3-tuple(v_953),hash(3-proj-3-tuple(v_953),rs_946)) else fail-any)) in
        {486}let v_955: bitstring = catch-fail(symmetricstateunpack(v_954)) in
        {487}let v_956: symmetricstate = catch-fail((if success?(getpublickey(s_943)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_955),hash(3-proj-3-tuple(v_955),getpublickey(s_943))) else fail-any) else fail-any)) in
        {488}let hs_957: handshakestate = (if not-caught-fail(v_952) then (if not-caught-fail(v_954) then (if not-caught-fail(v_956) then handshakestatepack(v_956,s_943,e_944,rs_946,re_947,empty,false) else fail-any) else fail-any) else fail-any) in
        {489}insert statestore(me_941,them_940,statepack_a(hs_957))
    ) | (
        {511}get statestore(=me_941,=them_940,statepack_a(hs_958: handshakestate)) in
        {490}in(pub, message_a_959: bitstring);
        {491}let v_960: bitstring = catch-fail(handshakestateunpack(hs_958)) in
        {492}let v_961: bitstring = catch-fail(deconcat3(message_a_959)) in
        {493}let v_962: bool = catch-fail(true) in
        {494}let v_963: key = catch-fail(1-proj-3-tuple(v_961)) in
        {495}let v_964: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_960))) in
        {496}let v_965: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_960)) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack(1-proj-3-tuple(v_964),2-proj-3-tuple(v_964),hash(3-proj-3-tuple(v_964),v_963)) else fail-any) else fail-any)) in
        {497}let v_966: bitstring = catch-fail(symmetricstateunpack(v_965)) in
        {498}let v_967: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_966))) in
        {499}let v_968: aead = catch-fail(decrypt(1-proj-2-tuple(v_967),2-proj-2-tuple(v_967),3-proj-3-tuple(v_966),3-proj-3-tuple(v_961))) in
        {500}let v_969: bitstring = catch-fail(aeadunpack(v_968)) in
        {501}let v_970: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_966))) in
        {502}let v_971: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_967))) && success?(1-proj-3-tuple(v_966))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-2-tuple(v_970))))) then cipherstatepack(1-proj-2-tuple(v_970),increment_nonce(2-proj-2-tuple(v_967))) else fail-any) else fail-any)) in
        {503}let v_972: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_961)) && (success?(3-proj-3-tuple(v_966)) && success?(1-proj-3-tuple(v_966)))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then (if not-caught-fail(v_968) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (if not-caught-fail(v_971) then (v_971,3-proj-3-tuple(v_969),1-proj-3-tuple(v_969)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {504}let v_973: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)))) in
        {505}let v_974: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_961)) && success?(symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then symmetricstatepack(1-proj-3-tuple(v_973),2-proj-3-tuple(v_973),hash(3-proj-3-tuple(v_973),3-proj-3-tuple(v_961))) else fail-any) else fail-any)) in
        {506}let v_975: bitstring = catch-fail((if success?(3-proj-3-tuple(v_961)) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_974) then (v_974,2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {507}let v_976: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_975),2-proj-7-tuple(v_960),3-proj-7-tuple(v_960),4-proj-7-tuple(v_960),v_963,6-proj-7-tuple(v_960),7-proj-7-tuple(v_960))) in
        {508}let (hs_977: handshakestate,re_978: key,plaintext_a_979: bitstring,valid_980: bool) = (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-7-tuple(v_960))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (if not-caught-fail(v_965) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (v_962 && 3-proj-3-tuple(v_975)) then (if not-caught-fail(v_976) then (v_976,getpublickey(3-proj-7-tuple(v_960)),2-proj-3-tuple(v_975),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {509}event RecvMsg(me_941,them_940,stage_a,plaintext_a_979,valid_980);
        {510}insert statestore(me_941,them_940,statepack_b(hs_977))
    ) | (
        {549}get statestore(=me_941,=them_940,statepack_b(hs_981: handshakestate)) in
        {512}let v_982: bitstring = catch-fail(handshakestateunpack(hs_981)) in
        {513}let v_983: bitstring = catch-fail((empty,empty,empty)) in
        {514}new key_e_984[me_941,them_940]: key;
        {515}let v_985: key = catch-fail(dhexp(key_e_984,g)) in
        {516}let v_986: keypair = catch-fail((if not-caught-fail(v_985) then keypairpack(v_985,key_e_984) else fail-any)) in
        {517}let v_987: bitstring = catch-fail(getpublickey(v_986)) in
        {518}let v_988: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_982))) in
        {519}let v_989: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_982)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then symmetricstatepack(1-proj-3-tuple(v_988),2-proj-3-tuple(v_988),hash(3-proj-3-tuple(v_988),v_987)) else fail-any) else fail-any)) in
        {520}let v_990: bitstring = catch-fail(keypairunpack(v_986)) in
        {521}let v_991: bitstring = catch-fail(symmetricstateunpack(v_989)) in
        {522}let v_992: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_991),(if success?(5-proj-7-tuple(v_982)) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then dhexp(2-proj-2-tuple(v_990),5-proj-7-tuple(v_982)) else fail-any) else fail-any))) in
        {523}let v_993: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_991),(if success?(5-proj-7-tuple(v_982)) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then dhexp(2-proj-2-tuple(v_990),5-proj-7-tuple(v_982)) else fail-any) else fail-any))) in
        {524}let v_994: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_991),(if success?(5-proj-7-tuple(v_982)) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then dhexp(2-proj-2-tuple(v_990),5-proj-7-tuple(v_982)) else fail-any) else fail-any))) in
        {525}let v_995: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_982)) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then dhexp(2-proj-2-tuple(v_990),5-proj-7-tuple(v_982)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_991))) then (if not-caught-fail(v_992) then (if not-caught-fail(v_993) then (if not-caught-fail(v_994) then (v_992,v_993,v_994) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {526}let v_996: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_982)) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then dhexp(2-proj-2-tuple(v_990),5-proj-7-tuple(v_982)) else fail-any) else fail-any)) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-3-tuple(v_991))))) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_995)) then cipherstatepack(2-proj-3-tuple(v_995),minnonce) else fail-any),1-proj-3-tuple(v_995),3-proj-3-tuple(v_991)) else fail-any) else fail-any) else fail-any)) in
        {527}let v_997: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_982))) in
        {528}let v_998: bitstring = catch-fail(symmetricstateunpack(v_996)) in
        {529}let v_999: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_998),(if (success?(5-proj-7-tuple(v_982)) && success?(2-proj-7-tuple(v_982))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then dhexp(2-proj-2-tuple(v_997),5-proj-7-tuple(v_982)) else fail-any) else fail-any))) in
        {530}let v_1000: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_998),(if (success?(5-proj-7-tuple(v_982)) && success?(2-proj-7-tuple(v_982))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then dhexp(2-proj-2-tuple(v_997),5-proj-7-tuple(v_982)) else fail-any) else fail-any))) in
        {531}let v_1001: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_998),(if (success?(5-proj-7-tuple(v_982)) && success?(2-proj-7-tuple(v_982))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then dhexp(2-proj-2-tuple(v_997),5-proj-7-tuple(v_982)) else fail-any) else fail-any))) in
        {532}let v_1002: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_982)) && success?(2-proj-7-tuple(v_982))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then dhexp(2-proj-2-tuple(v_997),5-proj-7-tuple(v_982)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_998))) then (if not-caught-fail(v_999) then (if not-caught-fail(v_1000) then (if not-caught-fail(v_1001) then (v_999,v_1000,v_1001) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {533}let v_1003: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_982)) && success?(2-proj-7-tuple(v_982))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then dhexp(2-proj-2-tuple(v_997),5-proj-7-tuple(v_982)) else fail-any) else fail-any)) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1002)) then cipherstatepack(2-proj-3-tuple(v_1002),minnonce) else fail-any),1-proj-3-tuple(v_1002),3-proj-3-tuple(v_998)) else fail-any) else fail-any) else fail-any)) in
        {534}let v_1004: bitstring = catch-fail(symmetricstateunpack(v_1003)) in
        {535}let v_1005: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1004))) in
        {536}let v_1006: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1005),2-proj-2-tuple(v_1005),3-proj-3-tuple(v_1004),msg_b(me_941,them_940))) in
        {537}let v_1007: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1004))) in
        {538}let v_1008: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1005))) && success?(1-proj-3-tuple(v_1004))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-2-tuple(v_1007))))) then cipherstatepack(1-proj-2-tuple(v_1007),increment_nonce(2-proj-2-tuple(v_1005))) else fail-any) else fail-any)) in
        {539}let v_1009: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1004)) && success?(1-proj-3-tuple(v_1004))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-2-tuple(v_1005))))) then (if not-caught-fail(v_1006) then (if not-caught-fail(v_1008) then (v_1008,v_1006) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {540}let v_1010: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1009),2-proj-3-tuple(v_1004),3-proj-3-tuple(v_1004)))) in
        {541}let v_1011: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1009)) && success?(symmetricstatepack(1-proj-2-tuple(v_1009),2-proj-3-tuple(v_1004),3-proj-3-tuple(v_1004)))) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then symmetricstatepack(1-proj-3-tuple(v_1010),2-proj-3-tuple(v_1010),hash(3-proj-3-tuple(v_1010),2-proj-2-tuple(v_1009))) else fail-any) else fail-any)) in
        {542}let v_1012: bitstring = catch-fail((if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-2-tuple(v_1009))))) then (if not-caught-fail(v_1011) then (v_1011,2-proj-2-tuple(v_1009)) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1013: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1012),2-proj-7-tuple(v_982),v_986,4-proj-7-tuple(v_982),5-proj-7-tuple(v_982),6-proj-7-tuple(v_982),7-proj-7-tuple(v_982))) in
        {544}let v_1014: bitstring = catch-fail(concat3(v_987,2-proj-3-tuple(v_983),2-proj-2-tuple(v_1012))) in
        {545}let (hs_1015: handshakestate,re_1016: key,message_b_1017: bitstring) = (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-7-tuple(v_982))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (if not-caught-fail(v_989) then (if not-caught-fail(v_996) then (if not-caught-fail(v_1003) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then (if not-caught-fail(v_1013) then (if not-caught-fail(v_1014) then (v_1013,5-proj-7-tuple(v_982),v_1014) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {546}event SendMsg(me_941,them_940,stage_b,msg_b(me_941,them_940),true);
        {547}insert statestore(me_941,them_940,statepack_c(hs_1015));
        {548}out(pub, message_b_1017)
    ) | (
        {575}get statestore(=me_941,=them_940,statepack_c(hs_1018: handshakestate)) in
        {550}in(pub, message_c_1019: bitstring);
        {551}let v_1020: bitstring = catch-fail(handshakestateunpack(hs_1018)) in
        {552}let v_1021: bitstring = catch-fail(deconcat3(message_c_1019)) in
        {553}let v_1022: bool = catch-fail(true) in
        {554}let v_1023: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1020))) in
        {555}let v_1024: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1020))) in
        {556}let v_1025: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1024),(if (success?(4-proj-7-tuple(v_1020)) && success?(3-proj-7-tuple(v_1020))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then dhexp(2-proj-2-tuple(v_1023),4-proj-7-tuple(v_1020)) else fail-any) else fail-any))) in
        {557}let v_1026: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1024),(if (success?(4-proj-7-tuple(v_1020)) && success?(3-proj-7-tuple(v_1020))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then dhexp(2-proj-2-tuple(v_1023),4-proj-7-tuple(v_1020)) else fail-any) else fail-any))) in
        {558}let v_1027: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1024),(if (success?(4-proj-7-tuple(v_1020)) && success?(3-proj-7-tuple(v_1020))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then dhexp(2-proj-2-tuple(v_1023),4-proj-7-tuple(v_1020)) else fail-any) else fail-any))) in
        {559}let v_1028: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1020)) && success?(3-proj-7-tuple(v_1020))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then dhexp(2-proj-2-tuple(v_1023),4-proj-7-tuple(v_1020)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1024))) then (if not-caught-fail(v_1025) then (if not-caught-fail(v_1026) then (if not-caught-fail(v_1027) then (v_1025,v_1026,v_1027) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {560}let v_1029: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1020)) && success?(3-proj-7-tuple(v_1020))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then dhexp(2-proj-2-tuple(v_1023),4-proj-7-tuple(v_1020)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1020))) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-3-tuple(v_1024))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1028)) then cipherstatepack(2-proj-3-tuple(v_1028),minnonce) else fail-any),1-proj-3-tuple(v_1028),3-proj-3-tuple(v_1024)) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1030: bitstring = catch-fail(symmetricstateunpack(v_1029)) in
        {562}let v_1031: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1030))) in
        {563}let v_1032: aead = catch-fail(decrypt(1-proj-2-tuple(v_1031),2-proj-2-tuple(v_1031),3-proj-3-tuple(v_1030),3-proj-3-tuple(v_1021))) in
        {564}let v_1033: bitstring = catch-fail(aeadunpack(v_1032)) in
        {565}let v_1034: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1030))) in
        {566}let v_1035: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1031))) && success?(1-proj-3-tuple(v_1030))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-2-tuple(v_1034))))) then cipherstatepack(1-proj-2-tuple(v_1034),increment_nonce(2-proj-2-tuple(v_1031))) else fail-any) else fail-any)) in
        {567}let v_1036: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1021)) && (success?(3-proj-3-tuple(v_1030)) && success?(1-proj-3-tuple(v_1030)))) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then (if not-caught-fail(v_1032) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if not-caught-fail(v_1035) then (v_1035,3-proj-3-tuple(v_1033),1-proj-3-tuple(v_1033)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1037: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1036),2-proj-3-tuple(v_1030),3-proj-3-tuple(v_1030)))) in
        {569}let v_1038: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1021)) && success?(symmetricstatepack(1-proj-3-tuple(v_1036),2-proj-3-tuple(v_1030),3-proj-3-tuple(v_1030)))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then symmetricstatepack(1-proj-3-tuple(v_1037),2-proj-3-tuple(v_1037),hash(3-proj-3-tuple(v_1037),3-proj-3-tuple(v_1021))) else fail-any) else fail-any)) in
        {570}let v_1039: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1021)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if not-caught-fail(v_1038) then (v_1038,2-proj-3-tuple(v_1036),3-proj-3-tuple(v_1036)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {571}let v_1040: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1039),2-proj-7-tuple(v_1020),3-proj-7-tuple(v_1020),4-proj-7-tuple(v_1020),5-proj-7-tuple(v_1020),6-proj-7-tuple(v_1020),7-proj-7-tuple(v_1020))) in
        {572}let (hs_1041: handshakestate,re_1042: key,plaintext_c_1043: bitstring,valid_1044: bool) = (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-7-tuple(v_1020))))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1029) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (v_1022 && 3-proj-3-tuple(v_1039)) then (if not-caught-fail(v_1040) then (v_1040,getpublickey(3-proj-7-tuple(v_1020)),2-proj-3-tuple(v_1039),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {573}event RecvMsg(me_941,them_940,stage_c,plaintext_c_1043,valid_1044);
        {574}insert statestore(me_941,them_940,statepack_d(hs_1041))
    ) | (
        {593}get statestore(=me_941,=them_940,statepack_d(hs_1045: handshakestate)) in
        {576}let v_1046: bitstring = catch-fail(handshakestateunpack(hs_1045)) in
        {577}let v_1047: bitstring = catch-fail((empty,empty,empty)) in
        {578}let v_1048: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1046))) in
        {579}let v_1049: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1048))) in
        {580}let v_1050: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1049),2-proj-2-tuple(v_1049),3-proj-3-tuple(v_1048),msg_d(me_941,them_940))) in
        {581}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1048))) in
        {582}let v_1052: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1049))) && success?(1-proj-3-tuple(v_1048))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then cipherstatepack(1-proj-2-tuple(v_1051),increment_nonce(2-proj-2-tuple(v_1049))) else fail-any) else fail-any)) in
        {583}let v_1053: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1048)) && success?(1-proj-3-tuple(v_1048))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-2-tuple(v_1049))))) then (if not-caught-fail(v_1050) then (if not-caught-fail(v_1052) then (v_1052,v_1050) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {584}let v_1054: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1053),2-proj-3-tuple(v_1048),3-proj-3-tuple(v_1048)))) in
        {585}let v_1055: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1053)) && success?(symmetricstatepack(1-proj-2-tuple(v_1053),2-proj-3-tuple(v_1048),3-proj-3-tuple(v_1048)))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then symmetricstatepack(1-proj-3-tuple(v_1054),2-proj-3-tuple(v_1054),hash(3-proj-3-tuple(v_1054),2-proj-2-tuple(v_1053))) else fail-any) else fail-any)) in
        {586}let v_1056: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1046)) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then (if not-caught-fail(v_1055) then (v_1055,2-proj-2-tuple(v_1053)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {587}let v_1057: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1056),2-proj-7-tuple(v_1046),3-proj-7-tuple(v_1046),4-proj-7-tuple(v_1046),5-proj-7-tuple(v_1046),6-proj-7-tuple(v_1046),7-proj-7-tuple(v_1046))) in
        {588}let v_1058: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1047),2-proj-3-tuple(v_1047),2-proj-2-tuple(v_1056))) in
        {589}let (hs_1059: handshakestate,re_1060: key,message_d_1061: bitstring) = (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-7-tuple(v_1046))))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-2-tuple(v_1056))))) then (if not-caught-fail(v_1057) then (if not-caught-fail(v_1058) then (v_1057,5-proj-7-tuple(v_1046),v_1058) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {590}event SendMsg(me_941,them_940,stage_d,msg_d(me_941,them_940),true);
        {591}insert statestore(me_941,them_940,statepack_e(hs_1059));
        {592}out(pub, message_d_1061)
    ) | (
        {621}get statestore(=me_941,=them_940,statepack_e(hs_1062: handshakestate)) in
        {594}in(pub, message_e_1063: bitstring);
        {595}let v_1064: bitstring = catch-fail(handshakestateunpack(hs_1062)) in
        {596}let v_1065: bitstring = catch-fail(deconcat3(message_e_1063)) in
        {597}let v_1066: bool = catch-fail(true) in
        {598}let v_1067: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1064))) in
        {599}let v_1068: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1067))) in
        {600}let v_1069: aead = catch-fail(decrypt(1-proj-2-tuple(v_1068),2-proj-2-tuple(v_1068),3-proj-3-tuple(v_1067),3-proj-3-tuple(v_1065))) in
        {601}let v_1070: bitstring = catch-fail(aeadunpack(v_1069)) in
        {602}let v_1071: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1067))) in
        {603}let v_1072: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1068))) && success?(1-proj-3-tuple(v_1067))) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then cipherstatepack(1-proj-2-tuple(v_1071),increment_nonce(2-proj-2-tuple(v_1068))) else fail-any) else fail-any)) in
        {604}let v_1073: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1065)) && (success?(3-proj-3-tuple(v_1067)) && success?(1-proj-3-tuple(v_1067)))) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-2-tuple(v_1068))))) then (if not-caught-fail(v_1069) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then (if not-caught-fail(v_1072) then (v_1072,3-proj-3-tuple(v_1070),1-proj-3-tuple(v_1070)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1074: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1073),2-proj-3-tuple(v_1067),3-proj-3-tuple(v_1067)))) in
        {606}let v_1075: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1065)) && success?(symmetricstatepack(1-proj-3-tuple(v_1073),2-proj-3-tuple(v_1067),3-proj-3-tuple(v_1067)))) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then symmetricstatepack(1-proj-3-tuple(v_1074),2-proj-3-tuple(v_1074),hash(3-proj-3-tuple(v_1074),3-proj-3-tuple(v_1065))) else fail-any) else fail-any)) in
        {607}let v_1076: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1065)) && success?(1-proj-7-tuple(v_1064))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-3-tuple(v_1067))))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-3-tuple(v_1073))))) then (if not-caught-fail(v_1075) then (v_1075,2-proj-3-tuple(v_1073),3-proj-3-tuple(v_1073)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1077: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1076),2-proj-7-tuple(v_1064),3-proj-7-tuple(v_1064),4-proj-7-tuple(v_1064),5-proj-7-tuple(v_1064),6-proj-7-tuple(v_1064),7-proj-7-tuple(v_1064))) in
        {609}let v_1078: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1076))) in
        {610}let v_1079: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1078),zero)) in
        {611}let v_1080: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1078),zero)) in
        {612}let v_1081: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1078),zero)) in
        {613}let v_1082: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1078)) then (if not-caught-fail(v_1079) then (if not-caught-fail(v_1080) then (if not-caught-fail(v_1081) then (v_1079,v_1080,v_1081) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {614}let v_1083: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1082)) then cipherstatepack(1-proj-3-tuple(v_1082),minnonce) else fail-any)) in
        {615}let v_1084: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1082)) then cipherstatepack(2-proj-3-tuple(v_1082),minnonce) else fail-any)) in
        {616}let v_1085: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1076)) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-3-tuple(v_1078))))) then (if (not-caught-fail(v_1082) && success?(is-true(success?(1-proj-3-tuple(v_1082))))) then (if not-caught-fail(v_1083) then (if not-caught-fail(v_1084) then (1-proj-3-tuple(v_1076),v_1083,v_1084) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {617}let (hs_1086: handshakestate,re_1087: key,plaintext_e_1088: bitstring,valid_1089: bool,cs1_1090: cipherstate,cs2_1091: cipherstate) = (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-7-tuple(v_1064))))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then (if not-caught-fail(v_1066) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then (if (v_1066 && 3-proj-3-tuple(v_1076)) then (if not-caught-fail(v_1077) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-3-tuple(v_1085))))) then (v_1077,getpublickey(3-proj-7-tuple(v_1064)),2-proj-3-tuple(v_1076),true,2-proj-3-tuple(v_1085),3-proj-3-tuple(v_1085)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {618}event RecvMsg(me_941,them_940,stage_e,plaintext_e_1088,valid_1089);
        {619}insert statestore(me_941,them_940,statepack_f(hs_1086));
        {620}event RecvEnd(valid_1089)
    ) | (
        {622}event LeakS(phase0,me_941);
        {623}out(pub, key_s(me_941))
    ) | (
        {624}phase 1;
        {625}event LeakS(phase1,me_941);
        {626}out(pub, key_s(me_941))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1172,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1172,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 171 rules in the queue.
400 rules inserted. The rule base contains 391 rules. 13 rules in the queue.
600 rules inserted. The rule base contains 583 rules. 141 rules in the queue.
800 rules inserted. The rule base contains 765 rules. 143 rules in the queue.
1000 rules inserted. The rule base contains 935 rules. 184 rules in the queue.
1200 rules inserted. The rule base contains 1102 rules. 200 rules in the queue.
1400 rules inserted. The rule base contains 1242 rules. 155 rules in the queue.
1600 rules inserted. The rule base contains 1374 rules. 159 rules in the queue.
1800 rules inserted. The rule base contains 1518 rules. 197 rules in the queue.
2000 rules inserted. The rule base contains 1655 rules. 226 rules in the queue.
2200 rules inserted. The rule base contains 1775 rules. 242 rules in the queue.
2400 rules inserted. The rule base contains 1926 rules. 253 rules in the queue.
2600 rules inserted. The rule base contains 2061 rules. 235 rules in the queue.
2800 rules inserted. The rule base contains 2190 rules. 218 rules in the queue.
3000 rules inserted. The rule base contains 2339 rules. 250 rules in the queue.
3200 rules inserted. The rule base contains 2507 rules. 279 rules in the queue.
3400 rules inserted. The rule base contains 2639 rules. 302 rules in the queue.
3600 rules inserted. The rule base contains 2795 rules. 315 rules in the queue.
3800 rules inserted. The rule base contains 2964 rules. 344 rules in the queue.
4000 rules inserted. The rule base contains 3137 rules. 381 rules in the queue.
4200 rules inserted. The rule base contains 3310 rules. 343 rules in the queue.
4400 rules inserted. The rule base contains 3457 rules. 372 rules in the queue.
4600 rules inserted. The rule base contains 3591 rules. 377 rules in the queue.
4800 rules inserted. The rule base contains 3712 rules. 340 rules in the queue.
5000 rules inserted. The rule base contains 3821 rules. 332 rules in the queue.
5200 rules inserted. The rule base contains 3958 rules. 343 rules in the queue.
5400 rules inserted. The rule base contains 4126 rules. 351 rules in the queue.
5600 rules inserted. The rule base contains 4254 rules. 356 rules in the queue.
5800 rules inserted. The rule base contains 4404 rules. 339 rules in the queue.
6000 rules inserted. The rule base contains 4545 rules. 290 rules in the queue.
6200 rules inserted. The rule base contains 4652 rules. 257 rules in the queue.
6400 rules inserted. The rule base contains 4750 rules. 255 rules in the queue.
6600 rules inserted. The rule base contains 4847 rules. 251 rules in the queue.
6800 rules inserted. The rule base contains 4995 rules. 259 rules in the queue.
7000 rules inserted. The rule base contains 5120 rules. 193 rules in the queue.
7200 rules inserted. The rule base contains 5154 rules. 75 rules in the queue.
7400 rules inserted. The rule base contains 5139 rules. 17 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_385900135 = key_e[me = alice,them = bob,!1 = @sid_385900121]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_385900135,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_385900135,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_385900135,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_385900135,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_385900135,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_385900135,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_385900135,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_385900135,g).
attacker(dhexp(key_385900135,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {317}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_385900135,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900135,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_385900195 = key_e[me = alice,them = bob,!1 = @sid_385900181]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_385900195,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_385900195,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_385900195,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_385900195,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_385900195,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_385900195,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_385900195,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_385900195,g).
attacker(dhexp(key_385900195,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {317}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_385900195,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900195,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_385900256 = key_e[me = alice,them = bob,!1 = @sid_385900242]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_385900256,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_385900256,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_385900256,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_385900256,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_385900256,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_385900256,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_385900256,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_385900256,g).
attacker(dhexp(key_385900256,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {317}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_385900256,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900256,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_385900316 = key_e[me = alice,them = bob,!1 = @sid_385900302]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_385900316,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_385900316,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_385900316,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_385900316,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_385900316,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_385900316,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_385900316,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_385900316,g).
attacker(dhexp(key_385900316,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {317}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_385900316,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_385900316,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1172,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1172,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1172,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1172,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
