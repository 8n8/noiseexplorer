File "KX1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KX1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "KX1.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "KX1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "KX1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "KX1.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "KX1.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "KX1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 321, character 6:
Warning: identifier s rebound.
File "KX1.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "KX1.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "KX1.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 361, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 363, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 371, characters 6-7:
Warning: identifier re rebound.
File "KX1.noise.passive.pv", line 372, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 376, characters 48-53:
Warning: identifier valid1 rebound.
File "KX1.noise.passive.pv", line 377, characters 6-7:
Warning: identifier rs rebound.
File "KX1.noise.passive.pv", line 378, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 380, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 388, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 584, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 577, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 569, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KX1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 371, characters 6-7:
Warning: identifier re rebound.
File "KX1.noise.passive.pv", line 372, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 376, characters 48-53:
Warning: identifier valid1 rebound.
File "KX1.noise.passive.pv", line 377, characters 6-7:
Warning: identifier rs rebound.
File "KX1.noise.passive.pv", line 378, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 380, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KX1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KX1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "KX1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "KX1.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 642, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 634, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 627, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 388, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KX1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 619, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "KX1.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "KX1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 321, character 6:
Warning: identifier s rebound.
File "KX1.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "KX1.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KX1.noise.passive.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KX1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KX1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 612, characters 8-9:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "KX1.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 361, characters 7-8:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 363, characters 7-8:
Warning: identifier hs rebound.
File "KX1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KX1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KX1.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let v_529: key = catch-fail(dhexp(key_s(alice),g)) in
    {3}let s_530: keypair = (if not-caught-fail(v_529) then keypairpack(v_529,key_s(alice)) else fail-any) in
    {4}out(pub, getpublickey(s_530));
    (
        {5}let e_531: keypair = keypairpack(empty,empty) in
        {6}let rs_532: key = empty in
        {7}let re_533: key = empty in
        {8}let v_534: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_535: key = catch-fail(v_534) in
        {10}let v_536: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_537: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any))) in
        {12}let v_538: symmetricstate = catch-fail((if success?((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then symmetricstatepack(1-proj-3-tuple(v_537),2-proj-3-tuple(v_537),hash(3-proj-3-tuple(v_537),empty)) else fail-any) else fail-any)) in
        {13}let v_539: bitstring = catch-fail(symmetricstateunpack(v_538)) in
        {14}let v_540: symmetricstate = catch-fail((if success?(getpublickey(s_530)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),getpublickey(s_530))) else fail-any) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_538) then (if not-caught-fail(v_540) then handshakestatepack(v_540,s_530,e_531,rs_532,re_533,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {39}get statestore(=alice,=bob,statepack_a(hs_541: handshakestate)) in
        {17}let v_542: bitstring = catch-fail(handshakestateunpack(hs_541)) in
        {18}let v_543: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_544: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_545: keypair = catch-fail((if not-caught-fail(v_544) then keypairpack(v_544,key_e(alice,bob)) else fail-any)) in
        {21}let v_546: bitstring = catch-fail(getpublickey(v_545)) in
        {22}let v_547: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_542))) in
        {23}let v_548: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_542)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),v_546)) else fail-any) else fail-any)) in
        {24}let v_549: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {25}let v_550: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {26}let v_551: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_550),2-proj-2-tuple(v_550),3-proj-3-tuple(v_549),msg_a(alice,bob))) in
        {27}let v_552: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {28}let v_553: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_550))) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then cipherstatepack(1-proj-2-tuple(v_552),increment_nonce(2-proj-2-tuple(v_550))) else fail-any) else fail-any)) in
        {29}let v_554: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_549)) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_553) then (v_553,v_551) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_555: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) in
        {31}let v_556: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_554)) && success?(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_555),hash(3-proj-3-tuple(v_555),2-proj-2-tuple(v_554))) else fail-any) else fail-any)) in
        {32}let v_557: bitstring = catch-fail((if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then (if not-caught-fail(v_556) then (v_556,2-proj-2-tuple(v_554)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_558: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_557),2-proj-7-tuple(v_542),v_545,4-proj-7-tuple(v_542),5-proj-7-tuple(v_542),6-proj-7-tuple(v_542),7-proj-7-tuple(v_542))) in
        {34}let v_559: bitstring = catch-fail(concat3(v_546,2-proj-3-tuple(v_543),2-proj-2-tuple(v_557))) in
        {35}let (hs_560: handshakestate,re_561: key,message_a: bitstring) = (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-7-tuple(v_542))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (v_558,5-proj-7-tuple(v_542),v_559) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {36}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {37}insert statestore(alice,bob,statepack_b(hs_560));
        {38}out(pub, message_a)
    ) | (
        {87}get statestore(=alice,=bob,statepack_b(hs_562: handshakestate)) in
        {40}in(pub, message_b: bitstring);
        {41}let v_563: bitstring = catch-fail(handshakestateunpack(hs_562)) in
        {42}let v_564: bitstring = catch-fail(deconcat3(message_b)) in
        {43}let v_565: bool = catch-fail(true) in
        {44}let v_566: key = catch-fail(1-proj-3-tuple(v_564)) in
        {45}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_563))) in
        {46}let v_568: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_563)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then symmetricstatepack(1-proj-3-tuple(v_567),2-proj-3-tuple(v_567),hash(3-proj-3-tuple(v_567),v_566)) else fail-any) else fail-any)) in
        {47}let v_569: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_563))) in
        {48}let v_570: bitstring = catch-fail(symmetricstateunpack(v_568)) in
        {49}let v_571: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {50}let v_572: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {51}let v_573: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {52}let v_574: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_570))) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (v_571,v_572,v_573) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {53}let v_575: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_574)) then cipherstatepack(2-proj-3-tuple(v_574),minnonce) else fail-any),1-proj-3-tuple(v_574),3-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any)) in
        {54}let v_576: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_563))) in
        {55}let v_577: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {56}let v_578: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_577),(if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any))) in
        {57}let v_579: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_577),(if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any))) in
        {58}let v_580: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_577),(if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any))) in
        {59}let v_581: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_577))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (v_578,v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_582: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_563)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),v_566) else fail-any) else fail-any)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_581)) then cipherstatepack(2-proj-3-tuple(v_581),minnonce) else fail-any),1-proj-3-tuple(v_581),3-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any)) in
        {61}let v_583: bitstring = catch-fail(symmetricstateunpack(v_582)) in
        {62}let v_584: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_583))) in
        {63}let v_585: aead = catch-fail(decrypt(1-proj-2-tuple(v_584),2-proj-2-tuple(v_584),3-proj-3-tuple(v_583),2-proj-3-tuple(v_564))) in
        {64}let v_586: bitstring = catch-fail(aeadunpack(v_585)) in
        {65}let v_587: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_583))) in
        {66}let v_588: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_584))) && success?(1-proj-3-tuple(v_583))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then cipherstatepack(1-proj-2-tuple(v_587),increment_nonce(2-proj-2-tuple(v_584))) else fail-any) else fail-any)) in
        {67}let v_589: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_564)) && (success?(3-proj-3-tuple(v_583)) && success?(1-proj-3-tuple(v_583)))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then (if not-caught-fail(v_585) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if not-caught-fail(v_588) then (v_588,3-proj-3-tuple(v_586),1-proj-3-tuple(v_586)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_590: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_589),2-proj-3-tuple(v_583),3-proj-3-tuple(v_583)))) in
        {69}let v_591: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_564)) && success?(symmetricstatepack(1-proj-3-tuple(v_589),2-proj-3-tuple(v_583),3-proj-3-tuple(v_583)))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then symmetricstatepack(1-proj-3-tuple(v_590),2-proj-3-tuple(v_590),hash(3-proj-3-tuple(v_590),2-proj-3-tuple(v_564))) else fail-any) else fail-any)) in
        {70}let v_592: bitstring = catch-fail((if success?(2-proj-3-tuple(v_564)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if not-caught-fail(v_591) then (v_591,2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_593: key = catch-fail(2-proj-3-tuple(v_592)) in
        {72}let v_594: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_592))) in
        {73}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {74}let v_596: aead = catch-fail(decrypt(1-proj-2-tuple(v_595),2-proj-2-tuple(v_595),3-proj-3-tuple(v_594),3-proj-3-tuple(v_564))) in
        {75}let v_597: bitstring = catch-fail(aeadunpack(v_596)) in
        {76}let v_598: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {77}let v_599: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_595))) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then cipherstatepack(1-proj-2-tuple(v_598),increment_nonce(2-proj-2-tuple(v_595))) else fail-any) else fail-any)) in
        {78}let v_600: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && (success?(3-proj-3-tuple(v_594)) && success?(1-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,3-proj-3-tuple(v_597),1-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_601: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) in
        {80}let v_602: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack(1-proj-3-tuple(v_601),2-proj-3-tuple(v_601),hash(3-proj-3-tuple(v_601),3-proj-3-tuple(v_564))) else fail-any) else fail-any)) in
        {81}let v_603: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if not-caught-fail(v_602) then (v_602,2-proj-3-tuple(v_600),3-proj-3-tuple(v_600)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {82}let v_604: key = catch-fail(dhexp(key_s(bob),g)) in
        {83}let v_605: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_603),2-proj-7-tuple(v_563),3-proj-7-tuple(v_563),v_593,v_566,6-proj-7-tuple(v_563),7-proj-7-tuple(v_563))) in
        {84}let (hs_606: handshakestate,re_607: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-7-tuple(v_563))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then (if not-caught-fail(v_575) then (if not-caught-fail(v_582) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if not-caught-fail(v_593) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if ((3-proj-3-tuple(v_592) && 3-proj-3-tuple(v_603)) && (v_593 = getpublickey((if not-caught-fail(v_604) then keypairpack(v_604,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_605) then (v_605,getpublickey(3-proj-7-tuple(v_563)),2-proj-3-tuple(v_603),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {85}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {86}insert statestore(alice,bob,statepack_c(hs_606))
    ) | (
        {112}get statestore(=alice,=bob,statepack_c(hs_608: handshakestate)) in
        {88}let v_609: bitstring = catch-fail(handshakestateunpack(hs_608)) in
        {89}let v_610: bitstring = catch-fail((empty,empty,empty)) in
        {90}let v_611: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_609))) in
        {91}let v_612: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_609))) in
        {92}let v_613: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_612),(if (success?(4-proj-7-tuple(v_609)) && success?(3-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),4-proj-7-tuple(v_609)) else fail-any) else fail-any))) in
        {93}let v_614: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_612),(if (success?(4-proj-7-tuple(v_609)) && success?(3-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),4-proj-7-tuple(v_609)) else fail-any) else fail-any))) in
        {94}let v_615: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_612),(if (success?(4-proj-7-tuple(v_609)) && success?(3-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),4-proj-7-tuple(v_609)) else fail-any) else fail-any))) in
        {95}let v_616: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_609)) && success?(3-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),4-proj-7-tuple(v_609)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_612))) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then (v_613,v_614,v_615) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let v_617: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_609)) && success?(3-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),4-proj-7-tuple(v_609)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_609))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_616)) then cipherstatepack(2-proj-3-tuple(v_616),minnonce) else fail-any),1-proj-3-tuple(v_616),3-proj-3-tuple(v_612)) else fail-any) else fail-any) else fail-any)) in
        {97}let v_618: bitstring = catch-fail(symmetricstateunpack(v_617)) in
        {98}let v_619: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_618))) in
        {99}let v_620: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_619),2-proj-2-tuple(v_619),3-proj-3-tuple(v_618),msg_c(alice,bob))) in
        {100}let v_621: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_618))) in
        {101}let v_622: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_619))) && success?(1-proj-3-tuple(v_618))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then cipherstatepack(1-proj-2-tuple(v_621),increment_nonce(2-proj-2-tuple(v_619))) else fail-any) else fail-any)) in
        {102}let v_623: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_618)) && success?(1-proj-3-tuple(v_618))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then (if not-caught-fail(v_620) then (if not-caught-fail(v_622) then (v_622,v_620) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {103}let v_624: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_623),2-proj-3-tuple(v_618),3-proj-3-tuple(v_618)))) in
        {104}let v_625: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_623)) && success?(symmetricstatepack(1-proj-2-tuple(v_623),2-proj-3-tuple(v_618),3-proj-3-tuple(v_618)))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then symmetricstatepack(1-proj-3-tuple(v_624),2-proj-3-tuple(v_624),hash(3-proj-3-tuple(v_624),2-proj-2-tuple(v_623))) else fail-any) else fail-any)) in
        {105}let v_626: bitstring = catch-fail((if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then (if not-caught-fail(v_625) then (v_625,2-proj-2-tuple(v_623)) else fail-any) else fail-any) else fail-any)) in
        {106}let v_627: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_626),2-proj-7-tuple(v_609),3-proj-7-tuple(v_609),4-proj-7-tuple(v_609),5-proj-7-tuple(v_609),6-proj-7-tuple(v_609),7-proj-7-tuple(v_609))) in
        {107}let v_628: bitstring = catch-fail(concat3(1-proj-3-tuple(v_610),2-proj-3-tuple(v_610),2-proj-2-tuple(v_626))) in
        {108}let (hs_629: handshakestate,re_630: key,message_c: bitstring) = (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-7-tuple(v_609))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if not-caught-fail(v_617) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (v_627,5-proj-7-tuple(v_609),v_628) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {109}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {110}insert statestore(alice,bob,statepack_d(hs_629));
        {111}out(pub, message_c)
    ) | (
        {131}get statestore(=alice,=bob,statepack_d(hs_631: handshakestate)) in
        {113}in(pub, message_d: bitstring);
        {114}let v_632: bitstring = catch-fail(handshakestateunpack(hs_631)) in
        {115}let v_633: bitstring = catch-fail(deconcat3(message_d)) in
        {116}let v_634: bool = catch-fail(true) in
        {117}let v_635: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_632))) in
        {118}let v_636: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {119}let v_637: aead = catch-fail(decrypt(1-proj-2-tuple(v_636),2-proj-2-tuple(v_636),3-proj-3-tuple(v_635),3-proj-3-tuple(v_633))) in
        {120}let v_638: bitstring = catch-fail(aeadunpack(v_637)) in
        {121}let v_639: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {122}let v_640: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_636))) && success?(1-proj-3-tuple(v_635))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then cipherstatepack(1-proj-2-tuple(v_639),increment_nonce(2-proj-2-tuple(v_636))) else fail-any) else fail-any)) in
        {123}let v_641: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_633)) && (success?(3-proj-3-tuple(v_635)) && success?(1-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then (if not-caught-fail(v_637) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_640) then (v_640,3-proj-3-tuple(v_638),1-proj-3-tuple(v_638)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_642: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) in
        {125}let v_643: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_633)) && success?(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then symmetricstatepack(1-proj-3-tuple(v_642),2-proj-3-tuple(v_642),hash(3-proj-3-tuple(v_642),3-proj-3-tuple(v_633))) else fail-any) else fail-any)) in
        {126}let v_644: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_633)) && success?(1-proj-7-tuple(v_632))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if not-caught-fail(v_643) then (v_643,2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_645: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_644),2-proj-7-tuple(v_632),3-proj-7-tuple(v_632),4-proj-7-tuple(v_632),5-proj-7-tuple(v_632),6-proj-7-tuple(v_632),7-proj-7-tuple(v_632))) in
        {128}let (hs_646: handshakestate,re_647: key,plaintext_d: bitstring,valid_648: bool) = (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-7-tuple(v_632))))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if not-caught-fail(v_634) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if (v_634 && 3-proj-3-tuple(v_644)) then (if not-caught-fail(v_645) then (v_645,getpublickey(3-proj-7-tuple(v_632)),2-proj-3-tuple(v_644),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {129}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_648);
        {130}insert statestore(alice,bob,statepack_e(hs_646))
    ) | (
        {157}get statestore(=alice,=bob,statepack_e(hs_649: handshakestate)) in
        {132}let v_650: bitstring = catch-fail(handshakestateunpack(hs_649)) in
        {133}let v_651: bitstring = catch-fail((empty,empty,empty)) in
        {134}let v_652: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_650))) in
        {135}let v_653: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {136}let v_654: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_653),2-proj-2-tuple(v_653),3-proj-3-tuple(v_652),msg_e(alice,bob))) in
        {137}let v_655: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {138}let v_656: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_653))) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then cipherstatepack(1-proj-2-tuple(v_655),increment_nonce(2-proj-2-tuple(v_653))) else fail-any) else fail-any)) in
        {139}let v_657: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_652)) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then (if not-caught-fail(v_654) then (if not-caught-fail(v_656) then (v_656,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {140}let v_658: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) in
        {141}let v_659: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_657)) && success?(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),hash(3-proj-3-tuple(v_658),2-proj-2-tuple(v_657))) else fail-any) else fail-any)) in
        {142}let v_660: bitstring = catch-fail((if success?(1-proj-7-tuple(v_650)) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_659) then (v_659,2-proj-2-tuple(v_657)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {143}let v_661: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_660),2-proj-7-tuple(v_650),3-proj-7-tuple(v_650),4-proj-7-tuple(v_650),5-proj-7-tuple(v_650),6-proj-7-tuple(v_650),7-proj-7-tuple(v_650))) in
        {144}let v_662: bitstring = catch-fail(concat3(1-proj-3-tuple(v_651),2-proj-3-tuple(v_651),2-proj-2-tuple(v_660))) in
        {145}let v_663: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_660))) in
        {146}let v_664: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_663),zero)) in
        {147}let v_665: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_663),zero)) in
        {148}let v_666: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_663),zero)) in
        {149}let v_667: bitstring = catch-fail((if success?(2-proj-3-tuple(v_663)) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (v_664,v_665,v_666) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {150}let v_668: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_667)) then cipherstatepack(1-proj-3-tuple(v_667),minnonce) else fail-any)) in
        {151}let v_669: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_667)) then cipherstatepack(2-proj-3-tuple(v_667),minnonce) else fail-any)) in
        {152}let v_670: bitstring = catch-fail((if success?(1-proj-2-tuple(v_660)) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (1-proj-2-tuple(v_660),v_668,v_669) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {153}let (hs_671: handshakestate,re_672: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-7-tuple(v_650))))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then (if not-caught-fail(v_661) then (if not-caught-fail(v_662) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (v_661,5-proj-7-tuple(v_650),v_662,2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {154}event SendMsg(alice,bob,stage_e,msg_e(alice,bob),true);
        {155}insert statestore(alice,bob,statepack_f(hs_671));
        {156}out(pub, message_e)
    ) | (
        {158}event LeakS(phase0,alice);
        {159}out(pub, key_s(alice))
    ) | (
        {160}phase 1;
        {161}event LeakS(phase1,alice);
        {162}out(pub, key_s(alice))
    )
) | (
    {163}let v_673: key = catch-fail(dhexp(key_s(alice),g)) in
    {164}let s_674: keypair = (if not-caught-fail(v_673) then keypairpack(v_673,key_s(alice)) else fail-any) in
    {165}out(pub, getpublickey(s_674));
    (
        {166}let e_675: keypair = keypairpack(empty,empty) in
        {167}let rs_676: key = empty in
        {168}let re_677: key = empty in
        {169}let v_678: bitstring = catch-fail(hash(somename,empty)) in
        {170}let v_679: key = catch-fail(v_678) in
        {171}let v_680: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {172}let v_681: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_678) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then symmetricstatepack(v_680,v_679,v_678) else fail-any) else fail-any) else fail-any))) in
        {173}let v_682: symmetricstate = catch-fail((if success?((if not-caught-fail(v_678) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then symmetricstatepack(v_680,v_679,v_678) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_681),hash(3-proj-3-tuple(v_681),empty)) else fail-any) else fail-any)) in
        {174}let v_683: bitstring = catch-fail(symmetricstateunpack(v_682)) in
        {175}let v_684: symmetricstate = catch-fail((if success?(getpublickey(s_674)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_683),hash(3-proj-3-tuple(v_683),getpublickey(s_674))) else fail-any) else fail-any)) in
        {176}let hs_685: handshakestate = (if not-caught-fail(v_682) then (if not-caught-fail(v_684) then handshakestatepack(v_684,s_674,e_675,rs_676,re_677,empty,true) else fail-any) else fail-any) in
        {177}insert statestore(alice,charlie,statepack_a(hs_685))
    ) | (
        {200}get statestore(=alice,=charlie,statepack_a(hs_686: handshakestate)) in
        {178}let v_687: bitstring = catch-fail(handshakestateunpack(hs_686)) in
        {179}let v_688: bitstring = catch-fail((empty,empty,empty)) in
        {180}let v_689: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {181}let v_690: keypair = catch-fail((if not-caught-fail(v_689) then keypairpack(v_689,key_e(alice,charlie)) else fail-any)) in
        {182}let v_691: bitstring = catch-fail(getpublickey(v_690)) in
        {183}let v_692: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_687))) in
        {184}let v_693: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_687)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then symmetricstatepack(1-proj-3-tuple(v_692),2-proj-3-tuple(v_692),hash(3-proj-3-tuple(v_692),v_691)) else fail-any) else fail-any)) in
        {185}let v_694: bitstring = catch-fail(symmetricstateunpack(v_693)) in
        {186}let v_695: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {187}let v_696: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_695),2-proj-2-tuple(v_695),3-proj-3-tuple(v_694),msg_a(alice,charlie))) in
        {188}let v_697: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {189}let v_698: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_695))) && success?(1-proj-3-tuple(v_694))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then cipherstatepack(1-proj-2-tuple(v_697),increment_nonce(2-proj-2-tuple(v_695))) else fail-any) else fail-any)) in
        {190}let v_699: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_694)) && success?(1-proj-3-tuple(v_694))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_698) then (v_698,v_696) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {191}let v_700: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_699),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) in
        {192}let v_701: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_699)) && success?(symmetricstatepack(1-proj-2-tuple(v_699),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_700),hash(3-proj-3-tuple(v_700),2-proj-2-tuple(v_699))) else fail-any) else fail-any)) in
        {193}let v_702: bitstring = catch-fail((if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then (if not-caught-fail(v_701) then (v_701,2-proj-2-tuple(v_699)) else fail-any) else fail-any) else fail-any)) in
        {194}let v_703: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_702),2-proj-7-tuple(v_687),v_690,4-proj-7-tuple(v_687),5-proj-7-tuple(v_687),6-proj-7-tuple(v_687),7-proj-7-tuple(v_687))) in
        {195}let v_704: bitstring = catch-fail(concat3(v_691,2-proj-3-tuple(v_688),2-proj-2-tuple(v_702))) in
        {196}let (hs_705: handshakestate,re_706: key,message_a_707: bitstring) = (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-7-tuple(v_687))))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (if not-caught-fail(v_693) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-2-tuple(v_702))))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (v_703,5-proj-7-tuple(v_687),v_704) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {197}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {198}insert statestore(alice,charlie,statepack_b(hs_705));
        {199}out(pub, message_a_707)
    ) | (
        {248}get statestore(=alice,=charlie,statepack_b(hs_708: handshakestate)) in
        {201}in(pub, message_b_709: bitstring);
        {202}let v_710: bitstring = catch-fail(handshakestateunpack(hs_708)) in
        {203}let v_711: bitstring = catch-fail(deconcat3(message_b_709)) in
        {204}let v_712: bool = catch-fail(true) in
        {205}let v_713: key = catch-fail(1-proj-3-tuple(v_711)) in
        {206}let v_714: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_710))) in
        {207}let v_715: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_710)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then symmetricstatepack(1-proj-3-tuple(v_714),2-proj-3-tuple(v_714),hash(3-proj-3-tuple(v_714),v_713)) else fail-any) else fail-any)) in
        {208}let v_716: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_710))) in
        {209}let v_717: bitstring = catch-fail(symmetricstateunpack(v_715)) in
        {210}let v_718: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_717),(if success?(3-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any))) in
        {211}let v_719: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_717),(if success?(3-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any))) in
        {212}let v_720: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_717),(if success?(3-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any))) in
        {213}let v_721: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_717))) then (if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (v_718,v_719,v_720) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {214}let v_722: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_721)) then cipherstatepack(2-proj-3-tuple(v_721),minnonce) else fail-any),1-proj-3-tuple(v_721),3-proj-3-tuple(v_717)) else fail-any) else fail-any) else fail-any)) in
        {215}let v_723: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_710))) in
        {216}let v_724: bitstring = catch-fail(symmetricstateunpack(v_722)) in
        {217}let v_725: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_724),(if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_713) else fail-any) else fail-any))) in
        {218}let v_726: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_724),(if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_713) else fail-any) else fail-any))) in
        {219}let v_727: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_724),(if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_713) else fail-any) else fail-any))) in
        {220}let v_728: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_713) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_724))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (v_725,v_726,v_727) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {221}let v_729: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),v_713) else fail-any) else fail-any)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_728)) then cipherstatepack(2-proj-3-tuple(v_728),minnonce) else fail-any),1-proj-3-tuple(v_728),3-proj-3-tuple(v_724)) else fail-any) else fail-any) else fail-any)) in
        {222}let v_730: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {223}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {224}let v_732: aead = catch-fail(decrypt(1-proj-2-tuple(v_731),2-proj-2-tuple(v_731),3-proj-3-tuple(v_730),2-proj-3-tuple(v_711))) in
        {225}let v_733: bitstring = catch-fail(aeadunpack(v_732)) in
        {226}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {227}let v_735: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_731))) && success?(1-proj-3-tuple(v_730))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then cipherstatepack(1-proj-2-tuple(v_734),increment_nonce(2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {228}let v_736: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_711)) && (success?(3-proj-3-tuple(v_730)) && success?(1-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,3-proj-3-tuple(v_733),1-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {229}let v_737: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) in
        {230}let v_738: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_711)) && success?(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_737),hash(3-proj-3-tuple(v_737),2-proj-3-tuple(v_711))) else fail-any) else fail-any)) in
        {231}let v_739: bitstring = catch-fail((if success?(2-proj-3-tuple(v_711)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if not-caught-fail(v_738) then (v_738,2-proj-3-tuple(v_736),3-proj-3-tuple(v_736)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {232}let v_740: key = catch-fail(2-proj-3-tuple(v_739)) in
        {233}let v_741: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_739))) in
        {234}let v_742: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_741))) in
        {235}let v_743: aead = catch-fail(decrypt(1-proj-2-tuple(v_742),2-proj-2-tuple(v_742),3-proj-3-tuple(v_741),3-proj-3-tuple(v_711))) in
        {236}let v_744: bitstring = catch-fail(aeadunpack(v_743)) in
        {237}let v_745: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_741))) in
        {238}let v_746: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_742))) && success?(1-proj-3-tuple(v_741))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then cipherstatepack(1-proj-2-tuple(v_745),increment_nonce(2-proj-2-tuple(v_742))) else fail-any) else fail-any)) in
        {239}let v_747: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_711)) && (success?(3-proj-3-tuple(v_741)) && success?(1-proj-3-tuple(v_741)))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then (if not-caught-fail(v_743) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if not-caught-fail(v_746) then (v_746,3-proj-3-tuple(v_744),1-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {240}let v_748: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_747),2-proj-3-tuple(v_741),3-proj-3-tuple(v_741)))) in
        {241}let v_749: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_711)) && success?(symmetricstatepack(1-proj-3-tuple(v_747),2-proj-3-tuple(v_741),3-proj-3-tuple(v_741)))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack(1-proj-3-tuple(v_748),2-proj-3-tuple(v_748),hash(3-proj-3-tuple(v_748),3-proj-3-tuple(v_711))) else fail-any) else fail-any)) in
        {242}let v_750: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_711)) && success?(1-proj-3-tuple(v_739))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if not-caught-fail(v_749) then (v_749,2-proj-3-tuple(v_747),3-proj-3-tuple(v_747)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_751: key = catch-fail(dhexp(key_s(charlie),g)) in
        {244}let v_752: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_750),2-proj-7-tuple(v_710),3-proj-7-tuple(v_710),v_740,v_713,6-proj-7-tuple(v_710),7-proj-7-tuple(v_710))) in
        {245}let (hs_753: handshakestate,re_754: key,plaintext_b_755: bitstring,valid_756: bool) = (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-7-tuple(v_710))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_713) then (if not-caught-fail(v_715) then (if not-caught-fail(v_722) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if not-caught-fail(v_740) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if ((3-proj-3-tuple(v_739) && 3-proj-3-tuple(v_750)) && (v_740 = getpublickey((if not-caught-fail(v_751) then keypairpack(v_751,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_752) then (v_752,getpublickey(3-proj-7-tuple(v_710)),2-proj-3-tuple(v_750),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {246}event RecvMsg(alice,charlie,stage_b,plaintext_b_755,valid_756);
        {247}insert statestore(alice,charlie,statepack_c(hs_753))
    ) | (
        {273}get statestore(=alice,=charlie,statepack_c(hs_757: handshakestate)) in
        {249}let v_758: bitstring = catch-fail(handshakestateunpack(hs_757)) in
        {250}let v_759: bitstring = catch-fail((empty,empty,empty)) in
        {251}let v_760: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_758))) in
        {252}let v_761: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_758))) in
        {253}let v_762: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_761),(if (success?(4-proj-7-tuple(v_758)) && success?(3-proj-7-tuple(v_758))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),4-proj-7-tuple(v_758)) else fail-any) else fail-any))) in
        {254}let v_763: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_761),(if (success?(4-proj-7-tuple(v_758)) && success?(3-proj-7-tuple(v_758))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),4-proj-7-tuple(v_758)) else fail-any) else fail-any))) in
        {255}let v_764: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_761),(if (success?(4-proj-7-tuple(v_758)) && success?(3-proj-7-tuple(v_758))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),4-proj-7-tuple(v_758)) else fail-any) else fail-any))) in
        {256}let v_765: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_758)) && success?(3-proj-7-tuple(v_758))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),4-proj-7-tuple(v_758)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_761))) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then (if not-caught-fail(v_764) then (v_762,v_763,v_764) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {257}let v_766: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_758)) && success?(3-proj-7-tuple(v_758))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),4-proj-7-tuple(v_758)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_758))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_765)) then cipherstatepack(2-proj-3-tuple(v_765),minnonce) else fail-any),1-proj-3-tuple(v_765),3-proj-3-tuple(v_761)) else fail-any) else fail-any) else fail-any)) in
        {258}let v_767: bitstring = catch-fail(symmetricstateunpack(v_766)) in
        {259}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {260}let v_769: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_768),2-proj-2-tuple(v_768),3-proj-3-tuple(v_767),msg_c(alice,charlie))) in
        {261}let v_770: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {262}let v_771: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_768))) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then cipherstatepack(1-proj-2-tuple(v_770),increment_nonce(2-proj-2-tuple(v_768))) else fail-any) else fail-any)) in
        {263}let v_772: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_767)) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_771) then (v_771,v_769) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {264}let v_773: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_772),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) in
        {265}let v_774: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_772)) && success?(symmetricstatepack(1-proj-2-tuple(v_772),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then symmetricstatepack(1-proj-3-tuple(v_773),2-proj-3-tuple(v_773),hash(3-proj-3-tuple(v_773),2-proj-2-tuple(v_772))) else fail-any) else fail-any)) in
        {266}let v_775: bitstring = catch-fail((if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_774) then (v_774,2-proj-2-tuple(v_772)) else fail-any) else fail-any) else fail-any)) in
        {267}let v_776: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_775),2-proj-7-tuple(v_758),3-proj-7-tuple(v_758),4-proj-7-tuple(v_758),5-proj-7-tuple(v_758),6-proj-7-tuple(v_758),7-proj-7-tuple(v_758))) in
        {268}let v_777: bitstring = catch-fail(concat3(1-proj-3-tuple(v_759),2-proj-3-tuple(v_759),2-proj-2-tuple(v_775))) in
        {269}let (hs_778: handshakestate,re_779: key,message_c_780: bitstring) = (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-7-tuple(v_758))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if not-caught-fail(v_766) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then (if not-caught-fail(v_776) then (if not-caught-fail(v_777) then (v_776,5-proj-7-tuple(v_758),v_777) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {270}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {271}insert statestore(alice,charlie,statepack_d(hs_778));
        {272}out(pub, message_c_780)
    ) | (
        {292}get statestore(=alice,=charlie,statepack_d(hs_781: handshakestate)) in
        {274}in(pub, message_d_782: bitstring);
        {275}let v_783: bitstring = catch-fail(handshakestateunpack(hs_781)) in
        {276}let v_784: bitstring = catch-fail(deconcat3(message_d_782)) in
        {277}let v_785: bool = catch-fail(true) in
        {278}let v_786: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_783))) in
        {279}let v_787: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_786))) in
        {280}let v_788: aead = catch-fail(decrypt(1-proj-2-tuple(v_787),2-proj-2-tuple(v_787),3-proj-3-tuple(v_786),3-proj-3-tuple(v_784))) in
        {281}let v_789: bitstring = catch-fail(aeadunpack(v_788)) in
        {282}let v_790: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_786))) in
        {283}let v_791: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_787))) && success?(1-proj-3-tuple(v_786))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then cipherstatepack(1-proj-2-tuple(v_790),increment_nonce(2-proj-2-tuple(v_787))) else fail-any) else fail-any)) in
        {284}let v_792: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_784)) && (success?(3-proj-3-tuple(v_786)) && success?(1-proj-3-tuple(v_786)))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then (if not-caught-fail(v_788) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if not-caught-fail(v_791) then (v_791,3-proj-3-tuple(v_789),1-proj-3-tuple(v_789)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {285}let v_793: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_792),2-proj-3-tuple(v_786),3-proj-3-tuple(v_786)))) in
        {286}let v_794: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_784)) && success?(symmetricstatepack(1-proj-3-tuple(v_792),2-proj-3-tuple(v_786),3-proj-3-tuple(v_786)))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_793),hash(3-proj-3-tuple(v_793),3-proj-3-tuple(v_784))) else fail-any) else fail-any)) in
        {287}let v_795: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_784)) && success?(1-proj-7-tuple(v_783))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then (if not-caught-fail(v_794) then (v_794,2-proj-3-tuple(v_792),3-proj-3-tuple(v_792)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {288}let v_796: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_795),2-proj-7-tuple(v_783),3-proj-7-tuple(v_783),4-proj-7-tuple(v_783),5-proj-7-tuple(v_783),6-proj-7-tuple(v_783),7-proj-7-tuple(v_783))) in
        {289}let (hs_797: handshakestate,re_798: key,plaintext_d_799: bitstring,valid_800: bool) = (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-7-tuple(v_783))))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if not-caught-fail(v_785) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if (v_785 && 3-proj-3-tuple(v_795)) then (if not-caught-fail(v_796) then (v_796,getpublickey(3-proj-7-tuple(v_783)),2-proj-3-tuple(v_795),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {290}event RecvMsg(alice,charlie,stage_d,plaintext_d_799,valid_800);
        {291}insert statestore(alice,charlie,statepack_e(hs_797))
    ) | (
        {318}get statestore(=alice,=charlie,statepack_e(hs_801: handshakestate)) in
        {293}let v_802: bitstring = catch-fail(handshakestateunpack(hs_801)) in
        {294}let v_803: bitstring = catch-fail((empty,empty,empty)) in
        {295}let v_804: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_802))) in
        {296}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_804))) in
        {297}let v_806: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_805),2-proj-2-tuple(v_805),3-proj-3-tuple(v_804),msg_e(alice,charlie))) in
        {298}let v_807: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_804))) in
        {299}let v_808: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_805))) && success?(1-proj-3-tuple(v_804))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then cipherstatepack(1-proj-2-tuple(v_807),increment_nonce(2-proj-2-tuple(v_805))) else fail-any) else fail-any)) in
        {300}let v_809: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_804)) && success?(1-proj-3-tuple(v_804))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then (if not-caught-fail(v_806) then (if not-caught-fail(v_808) then (v_808,v_806) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_810: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_809),2-proj-3-tuple(v_804),3-proj-3-tuple(v_804)))) in
        {302}let v_811: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_809)) && success?(symmetricstatepack(1-proj-2-tuple(v_809),2-proj-3-tuple(v_804),3-proj-3-tuple(v_804)))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),2-proj-2-tuple(v_809))) else fail-any) else fail-any)) in
        {303}let v_812: bitstring = catch-fail((if success?(1-proj-7-tuple(v_802)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_811) then (v_811,2-proj-2-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {304}let v_813: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_812),2-proj-7-tuple(v_802),3-proj-7-tuple(v_802),4-proj-7-tuple(v_802),5-proj-7-tuple(v_802),6-proj-7-tuple(v_802),7-proj-7-tuple(v_802))) in
        {305}let v_814: bitstring = catch-fail(concat3(1-proj-3-tuple(v_803),2-proj-3-tuple(v_803),2-proj-2-tuple(v_812))) in
        {306}let v_815: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_812))) in
        {307}let v_816: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_815),zero)) in
        {308}let v_817: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_815),zero)) in
        {309}let v_818: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_815),zero)) in
        {310}let v_819: bitstring = catch-fail((if success?(2-proj-3-tuple(v_815)) then (if not-caught-fail(v_816) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (v_816,v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {311}let v_820: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_819)) then cipherstatepack(1-proj-3-tuple(v_819),minnonce) else fail-any)) in
        {312}let v_821: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_819)) then cipherstatepack(2-proj-3-tuple(v_819),minnonce) else fail-any)) in
        {313}let v_822: bitstring = catch-fail((if success?(1-proj-2-tuple(v_812)) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if not-caught-fail(v_820) then (if not-caught-fail(v_821) then (1-proj-2-tuple(v_812),v_820,v_821) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {314}let (hs_823: handshakestate,re_824: key,message_e_825: bitstring,cs1_826: cipherstate,cs2_827: cipherstate) = (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-7-tuple(v_802))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (v_813,5-proj-7-tuple(v_802),v_814,2-proj-3-tuple(v_822),3-proj-3-tuple(v_822)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {315}event SendMsg(alice,charlie,stage_e,msg_e(alice,charlie),true);
        {316}insert statestore(alice,charlie,statepack_f(hs_823));
        {317}out(pub, message_e_825)
    ) | (
        {319}event LeakS(phase0,alice);
        {320}out(pub, key_s(alice))
    ) | (
        {321}phase 1;
        {322}event LeakS(phase1,alice);
        {323}out(pub, key_s(alice))
    )
) | (
    {324}let s_828: keypair = keypairpack(empty,empty) in
    {325}out(pub, getpublickey(s_828));
    (
        {326}let e_829: keypair = keypairpack(empty,empty) in
        {327}let v_830: key = catch-fail(dhexp(key_s(alice),g)) in
        {328}let rs_831: key = getpublickey((if not-caught-fail(v_830) then keypairpack(v_830,key_s(alice)) else fail-any)) in
        {329}let re_832: key = empty in
        {330}let v_833: bitstring = catch-fail(hash(somename,empty)) in
        {331}let v_834: key = catch-fail(v_833) in
        {332}let v_835: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {333}let v_836: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then symmetricstatepack(v_835,v_834,v_833) else fail-any) else fail-any) else fail-any))) in
        {334}let v_837: symmetricstate = catch-fail((if success?((if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then symmetricstatepack(v_835,v_834,v_833) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then symmetricstatepack(1-proj-3-tuple(v_836),2-proj-3-tuple(v_836),hash(3-proj-3-tuple(v_836),empty)) else fail-any) else fail-any)) in
        {335}let v_838: bitstring = catch-fail(symmetricstateunpack(v_837)) in
        {336}let v_839: symmetricstate = catch-fail((if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_838),hash(3-proj-3-tuple(v_838),rs_831)) else fail-any)) in
        {337}let hs_840: handshakestate = (if not-caught-fail(v_837) then (if not-caught-fail(v_839) then handshakestatepack(v_839,s_828,e_829,rs_831,re_832,empty,false) else fail-any) else fail-any) in
        {338}insert statestore(bob,alice,statepack_a(hs_840))
    ) | (
        {360}get statestore(=bob,=alice,statepack_a(hs_841: handshakestate)) in
        {339}in(pub, message_a_842: bitstring);
        {340}let v_843: bitstring = catch-fail(handshakestateunpack(hs_841)) in
        {341}let v_844: bitstring = catch-fail(deconcat3(message_a_842)) in
        {342}let v_845: bool = catch-fail(true) in
        {343}let v_846: key = catch-fail(1-proj-3-tuple(v_844)) in
        {344}let v_847: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_843))) in
        {345}let v_848: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_843)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then symmetricstatepack(1-proj-3-tuple(v_847),2-proj-3-tuple(v_847),hash(3-proj-3-tuple(v_847),v_846)) else fail-any) else fail-any)) in
        {346}let v_849: bitstring = catch-fail(symmetricstateunpack(v_848)) in
        {347}let v_850: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_849))) in
        {348}let v_851: aead = catch-fail(decrypt(1-proj-2-tuple(v_850),2-proj-2-tuple(v_850),3-proj-3-tuple(v_849),3-proj-3-tuple(v_844))) in
        {349}let v_852: bitstring = catch-fail(aeadunpack(v_851)) in
        {350}let v_853: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_849))) in
        {351}let v_854: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_850))) && success?(1-proj-3-tuple(v_849))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then cipherstatepack(1-proj-2-tuple(v_853),increment_nonce(2-proj-2-tuple(v_850))) else fail-any) else fail-any)) in
        {352}let v_855: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_844)) && (success?(3-proj-3-tuple(v_849)) && success?(1-proj-3-tuple(v_849)))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_851) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if not-caught-fail(v_854) then (v_854,3-proj-3-tuple(v_852),1-proj-3-tuple(v_852)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {353}let v_856: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_855),2-proj-3-tuple(v_849),3-proj-3-tuple(v_849)))) in
        {354}let v_857: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_844)) && success?(symmetricstatepack(1-proj-3-tuple(v_855),2-proj-3-tuple(v_849),3-proj-3-tuple(v_849)))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then symmetricstatepack(1-proj-3-tuple(v_856),2-proj-3-tuple(v_856),hash(3-proj-3-tuple(v_856),3-proj-3-tuple(v_844))) else fail-any) else fail-any)) in
        {355}let v_858: bitstring = catch-fail((if success?(3-proj-3-tuple(v_844)) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then (if not-caught-fail(v_857) then (v_857,2-proj-3-tuple(v_855),3-proj-3-tuple(v_855)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {356}let v_859: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_858),2-proj-7-tuple(v_843),3-proj-7-tuple(v_843),4-proj-7-tuple(v_843),v_846,6-proj-7-tuple(v_843),7-proj-7-tuple(v_843))) in
        {357}let (hs_860: handshakestate,re_861: key,plaintext_a: bitstring,valid_862: bool) = (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-7-tuple(v_843))))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then (if not-caught-fail(v_845) then (if not-caught-fail(v_846) then (if not-caught-fail(v_848) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if (v_845 && 3-proj-3-tuple(v_858)) then (if not-caught-fail(v_859) then (v_859,getpublickey(3-proj-7-tuple(v_843)),2-proj-3-tuple(v_858),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {358}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_862);
        {359}insert statestore(bob,alice,statepack_b(hs_860))
    ) | (
        {408}get statestore(=bob,=alice,statepack_b(hs_863: handshakestate)) in
        {361}let v_864: bitstring = catch-fail(handshakestateunpack(hs_863)) in
        {362}let v_865: bitstring = catch-fail((empty,empty,empty)) in
        {363}let v_866: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {364}let v_867: keypair = catch-fail((if not-caught-fail(v_866) then keypairpack(v_866,key_e(bob,alice)) else fail-any)) in
        {365}let v_868: bitstring = catch-fail(getpublickey(v_867)) in
        {366}let v_869: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_864))) in
        {367}let v_870: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_864)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_869),hash(3-proj-3-tuple(v_869),v_868)) else fail-any) else fail-any)) in
        {368}let v_871: bitstring = catch-fail(keypairunpack(v_867)) in
        {369}let v_872: bitstring = catch-fail(symmetricstateunpack(v_870)) in
        {370}let v_873: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_872),(if success?(5-proj-7-tuple(v_864)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then dhexp(2-proj-2-tuple(v_871),5-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {371}let v_874: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_872),(if success?(5-proj-7-tuple(v_864)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then dhexp(2-proj-2-tuple(v_871),5-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {372}let v_875: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_872),(if success?(5-proj-7-tuple(v_864)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then dhexp(2-proj-2-tuple(v_871),5-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {373}let v_876: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_864)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then dhexp(2-proj-2-tuple(v_871),5-proj-7-tuple(v_864)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_872))) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then (if not-caught-fail(v_875) then (v_873,v_874,v_875) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_877: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_864)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then dhexp(2-proj-2-tuple(v_871),5-proj-7-tuple(v_864)) else fail-any) else fail-any)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_876)) then cipherstatepack(2-proj-3-tuple(v_876),minnonce) else fail-any),1-proj-3-tuple(v_876),3-proj-3-tuple(v_872)) else fail-any) else fail-any) else fail-any)) in
        {375}let v_878: bitstring = catch-fail(keypairunpack(v_867)) in
        {376}let v_879: bitstring = catch-fail(symmetricstateunpack(v_877)) in
        {377}let v_880: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_879),(if success?(4-proj-7-tuple(v_864)) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then dhexp(2-proj-2-tuple(v_878),4-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {378}let v_881: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_879),(if success?(4-proj-7-tuple(v_864)) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then dhexp(2-proj-2-tuple(v_878),4-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {379}let v_882: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_879),(if success?(4-proj-7-tuple(v_864)) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then dhexp(2-proj-2-tuple(v_878),4-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {380}let v_883: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_864)) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then dhexp(2-proj-2-tuple(v_878),4-proj-7-tuple(v_864)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_879))) then (if not-caught-fail(v_880) then (if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (v_880,v_881,v_882) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_884: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_864)) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then dhexp(2-proj-2-tuple(v_878),4-proj-7-tuple(v_864)) else fail-any) else fail-any)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_883)) then cipherstatepack(2-proj-3-tuple(v_883),minnonce) else fail-any),1-proj-3-tuple(v_883),3-proj-3-tuple(v_879)) else fail-any) else fail-any) else fail-any)) in
        {382}let v_885: key = catch-fail(dhexp(key_s(bob),g)) in
        {383}let v_886: keypair = catch-fail((if not-caught-fail(v_885) then keypairpack(v_885,key_s(bob)) else fail-any)) in
        {384}let v_887: bitstring = catch-fail(symmetricstateunpack(v_884)) in
        {385}let v_888: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_887))) in
        {386}let v_889: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_888),2-proj-2-tuple(v_888),3-proj-3-tuple(v_887),getpublickey(v_886))) in
        {387}let v_890: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_887))) in
        {388}let v_891: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_888))) && success?(1-proj-3-tuple(v_887))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-2-tuple(v_890))))) then cipherstatepack(1-proj-2-tuple(v_890),increment_nonce(2-proj-2-tuple(v_888))) else fail-any) else fail-any)) in
        {389}let v_892: bitstring = catch-fail((if (success?(getpublickey(v_886)) && (success?(3-proj-3-tuple(v_887)) && success?(1-proj-3-tuple(v_887)))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then (if not-caught-fail(v_889) then (if not-caught-fail(v_891) then (v_891,v_889) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let v_893: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_892),2-proj-3-tuple(v_887),3-proj-3-tuple(v_887)))) in
        {391}let v_894: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_892)) && success?(symmetricstatepack(1-proj-2-tuple(v_892),2-proj-3-tuple(v_887),3-proj-3-tuple(v_887)))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then symmetricstatepack(1-proj-3-tuple(v_893),2-proj-3-tuple(v_893),hash(3-proj-3-tuple(v_893),2-proj-2-tuple(v_892))) else fail-any) else fail-any)) in
        {392}let v_895: bitstring = catch-fail((if success?(getpublickey(v_886)) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then (if not-caught-fail(v_894) then (v_894,2-proj-2-tuple(v_892)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {393}let v_896: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_895))) in
        {394}let v_897: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_896))) in
        {395}let v_898: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_897),2-proj-2-tuple(v_897),3-proj-3-tuple(v_896),msg_b(bob,alice))) in
        {396}let v_899: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_896))) in
        {397}let v_900: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_897))) && success?(1-proj-3-tuple(v_896))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then cipherstatepack(1-proj-2-tuple(v_899),increment_nonce(2-proj-2-tuple(v_897))) else fail-any) else fail-any)) in
        {398}let v_901: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_896)) && success?(1-proj-3-tuple(v_896))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then (if not-caught-fail(v_898) then (if not-caught-fail(v_900) then (v_900,v_898) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_902: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_901),2-proj-3-tuple(v_896),3-proj-3-tuple(v_896)))) in
        {400}let v_903: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_901)) && success?(symmetricstatepack(1-proj-2-tuple(v_901),2-proj-3-tuple(v_896),3-proj-3-tuple(v_896)))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then symmetricstatepack(1-proj-3-tuple(v_902),2-proj-3-tuple(v_902),hash(3-proj-3-tuple(v_902),2-proj-2-tuple(v_901))) else fail-any) else fail-any)) in
        {401}let v_904: bitstring = catch-fail((if success?(1-proj-2-tuple(v_895)) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then (if not-caught-fail(v_903) then (v_903,2-proj-2-tuple(v_901)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {402}let v_905: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_904),v_886,v_867,4-proj-7-tuple(v_864),5-proj-7-tuple(v_864),6-proj-7-tuple(v_864),7-proj-7-tuple(v_864))) in
        {403}let v_906: bitstring = catch-fail(concat3(v_868,2-proj-2-tuple(v_895),2-proj-2-tuple(v_904))) in
        {404}let (hs_907: handshakestate,re_908: key,message_b_909: bitstring) = (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-7-tuple(v_864))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (if not-caught-fail(v_870) then (if not-caught-fail(v_877) then (if not-caught-fail(v_884) then (if not-caught-fail(v_886) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then (if not-caught-fail(v_905) then (if not-caught-fail(v_906) then (v_905,5-proj-7-tuple(v_864),v_906) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {405}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {406}insert statestore(bob,alice,statepack_c(hs_907));
        {407}out(pub, message_b_909)
    ) | (
        {434}get statestore(=bob,=alice,statepack_c(hs_910: handshakestate)) in
        {409}in(pub, message_c_911: bitstring);
        {410}let v_912: bitstring = catch-fail(handshakestateunpack(hs_910)) in
        {411}let v_913: bitstring = catch-fail(deconcat3(message_c_911)) in
        {412}let v_914: bool = catch-fail(true) in
        {413}let v_915: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_912))) in
        {414}let v_916: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_912))) in
        {415}let v_917: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_916),(if (success?(5-proj-7-tuple(v_912)) && success?(2-proj-7-tuple(v_912))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_912)) else fail-any) else fail-any))) in
        {416}let v_918: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_916),(if (success?(5-proj-7-tuple(v_912)) && success?(2-proj-7-tuple(v_912))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_912)) else fail-any) else fail-any))) in
        {417}let v_919: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_916),(if (success?(5-proj-7-tuple(v_912)) && success?(2-proj-7-tuple(v_912))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_912)) else fail-any) else fail-any))) in
        {418}let v_920: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_912)) && success?(2-proj-7-tuple(v_912))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_912)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_916))) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (v_917,v_918,v_919) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {419}let v_921: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_912)) && success?(2-proj-7-tuple(v_912))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then dhexp(2-proj-2-tuple(v_915),5-proj-7-tuple(v_912)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_912))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_920)) then cipherstatepack(2-proj-3-tuple(v_920),minnonce) else fail-any),1-proj-3-tuple(v_920),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any)) in
        {420}let v_922: bitstring = catch-fail(symmetricstateunpack(v_921)) in
        {421}let v_923: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_922))) in
        {422}let v_924: aead = catch-fail(decrypt(1-proj-2-tuple(v_923),2-proj-2-tuple(v_923),3-proj-3-tuple(v_922),3-proj-3-tuple(v_913))) in
        {423}let v_925: bitstring = catch-fail(aeadunpack(v_924)) in
        {424}let v_926: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_922))) in
        {425}let v_927: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_923))) && success?(1-proj-3-tuple(v_922))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-2-tuple(v_926))))) then cipherstatepack(1-proj-2-tuple(v_926),increment_nonce(2-proj-2-tuple(v_923))) else fail-any) else fail-any)) in
        {426}let v_928: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_913)) && (success?(3-proj-3-tuple(v_922)) && success?(1-proj-3-tuple(v_922)))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then (if not-caught-fail(v_924) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if not-caught-fail(v_927) then (v_927,3-proj-3-tuple(v_925),1-proj-3-tuple(v_925)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let v_929: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_928),2-proj-3-tuple(v_922),3-proj-3-tuple(v_922)))) in
        {428}let v_930: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_913)) && success?(symmetricstatepack(1-proj-3-tuple(v_928),2-proj-3-tuple(v_922),3-proj-3-tuple(v_922)))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then symmetricstatepack(1-proj-3-tuple(v_929),2-proj-3-tuple(v_929),hash(3-proj-3-tuple(v_929),3-proj-3-tuple(v_913))) else fail-any) else fail-any)) in
        {429}let v_931: bitstring = catch-fail((if success?(3-proj-3-tuple(v_913)) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if not-caught-fail(v_930) then (v_930,2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {430}let v_932: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_931),2-proj-7-tuple(v_912),3-proj-7-tuple(v_912),4-proj-7-tuple(v_912),5-proj-7-tuple(v_912),6-proj-7-tuple(v_912),7-proj-7-tuple(v_912))) in
        {431}let (hs_933: handshakestate,re_934: key,plaintext_c: bitstring,valid_935: bool) = (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-7-tuple(v_912))))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if not-caught-fail(v_914) then (if not-caught-fail(v_921) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if (v_914 && 3-proj-3-tuple(v_931)) then (if not-caught-fail(v_932) then (v_932,getpublickey(3-proj-7-tuple(v_912)),2-proj-3-tuple(v_931),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {432}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_935);
        {433}insert statestore(bob,alice,statepack_d(hs_933))
    ) | (
        {452}get statestore(=bob,=alice,statepack_d(hs_936: handshakestate)) in
        {435}let v_937: bitstring = catch-fail(handshakestateunpack(hs_936)) in
        {436}let v_938: bitstring = catch-fail((empty,empty,empty)) in
        {437}let v_939: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_937))) in
        {438}let v_940: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_939))) in
        {439}let v_941: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_940),2-proj-2-tuple(v_940),3-proj-3-tuple(v_939),msg_d(bob,alice))) in
        {440}let v_942: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_939))) in
        {441}let v_943: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_940))) && success?(1-proj-3-tuple(v_939))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then cipherstatepack(1-proj-2-tuple(v_942),increment_nonce(2-proj-2-tuple(v_940))) else fail-any) else fail-any)) in
        {442}let v_944: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_939)) && success?(1-proj-3-tuple(v_939))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then (if not-caught-fail(v_941) then (if not-caught-fail(v_943) then (v_943,v_941) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_945: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_944),2-proj-3-tuple(v_939),3-proj-3-tuple(v_939)))) in
        {444}let v_946: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_944)) && success?(symmetricstatepack(1-proj-2-tuple(v_944),2-proj-3-tuple(v_939),3-proj-3-tuple(v_939)))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then symmetricstatepack(1-proj-3-tuple(v_945),2-proj-3-tuple(v_945),hash(3-proj-3-tuple(v_945),2-proj-2-tuple(v_944))) else fail-any) else fail-any)) in
        {445}let v_947: bitstring = catch-fail((if success?(1-proj-7-tuple(v_937)) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then (if not-caught-fail(v_946) then (v_946,2-proj-2-tuple(v_944)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {446}let v_948: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_947),2-proj-7-tuple(v_937),3-proj-7-tuple(v_937),4-proj-7-tuple(v_937),5-proj-7-tuple(v_937),6-proj-7-tuple(v_937),7-proj-7-tuple(v_937))) in
        {447}let v_949: bitstring = catch-fail(concat3(1-proj-3-tuple(v_938),2-proj-3-tuple(v_938),2-proj-2-tuple(v_947))) in
        {448}let (hs_950: handshakestate,re_951: key,message_d_952: bitstring) = (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-7-tuple(v_937))))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then (v_948,5-proj-7-tuple(v_937),v_949) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {449}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {450}insert statestore(bob,alice,statepack_e(hs_950));
        {451}out(pub, message_d_952)
    ) | (
        {480}get statestore(=bob,=alice,statepack_e(hs_953: handshakestate)) in
        {453}in(pub, message_e_954: bitstring);
        {454}let v_955: bitstring = catch-fail(handshakestateunpack(hs_953)) in
        {455}let v_956: bitstring = catch-fail(deconcat3(message_e_954)) in
        {456}let v_957: bool = catch-fail(true) in
        {457}let v_958: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_955))) in
        {458}let v_959: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_958))) in
        {459}let v_960: aead = catch-fail(decrypt(1-proj-2-tuple(v_959),2-proj-2-tuple(v_959),3-proj-3-tuple(v_958),3-proj-3-tuple(v_956))) in
        {460}let v_961: bitstring = catch-fail(aeadunpack(v_960)) in
        {461}let v_962: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_958))) in
        {462}let v_963: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_959))) && success?(1-proj-3-tuple(v_958))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then cipherstatepack(1-proj-2-tuple(v_962),increment_nonce(2-proj-2-tuple(v_959))) else fail-any) else fail-any)) in
        {463}let v_964: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_956)) && (success?(3-proj-3-tuple(v_958)) && success?(1-proj-3-tuple(v_958)))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then (if not-caught-fail(v_960) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_963) then (v_963,3-proj-3-tuple(v_961),1-proj-3-tuple(v_961)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {464}let v_965: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_964),2-proj-3-tuple(v_958),3-proj-3-tuple(v_958)))) in
        {465}let v_966: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_956)) && success?(symmetricstatepack(1-proj-3-tuple(v_964),2-proj-3-tuple(v_958),3-proj-3-tuple(v_958)))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then symmetricstatepack(1-proj-3-tuple(v_965),2-proj-3-tuple(v_965),hash(3-proj-3-tuple(v_965),3-proj-3-tuple(v_956))) else fail-any) else fail-any)) in
        {466}let v_967: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_956)) && success?(1-proj-7-tuple(v_955))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if not-caught-fail(v_966) then (v_966,2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {467}let v_968: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_967),2-proj-7-tuple(v_955),3-proj-7-tuple(v_955),4-proj-7-tuple(v_955),5-proj-7-tuple(v_955),6-proj-7-tuple(v_955),7-proj-7-tuple(v_955))) in
        {468}let v_969: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_967))) in
        {469}let v_970: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_969),zero)) in
        {470}let v_971: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_969),zero)) in
        {471}let v_972: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_969),zero)) in
        {472}let v_973: bitstring = catch-fail((if success?(2-proj-3-tuple(v_969)) then (if not-caught-fail(v_970) then (if not-caught-fail(v_971) then (if not-caught-fail(v_972) then (v_970,v_971,v_972) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {473}let v_974: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_973)) then cipherstatepack(1-proj-3-tuple(v_973),minnonce) else fail-any)) in
        {474}let v_975: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_973)) then cipherstatepack(2-proj-3-tuple(v_973),minnonce) else fail-any)) in
        {475}let v_976: bitstring = catch-fail((if success?(1-proj-3-tuple(v_967)) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then (if not-caught-fail(v_974) then (if not-caught-fail(v_975) then (1-proj-3-tuple(v_967),v_974,v_975) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let (hs_977: handshakestate,re_978: key,plaintext_e: bitstring,valid_979: bool,cs1_980: cipherstate,cs2_981: cipherstate) = (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-7-tuple(v_955))))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then (if not-caught-fail(v_957) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then (if (v_957 && 3-proj-3-tuple(v_967)) then (if not-caught-fail(v_968) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then (v_968,getpublickey(3-proj-7-tuple(v_955)),2-proj-3-tuple(v_967),true,2-proj-3-tuple(v_976),3-proj-3-tuple(v_976)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {477}event RecvMsg(bob,alice,stage_e,plaintext_e,valid_979);
        {478}insert statestore(bob,alice,statepack_f(hs_977));
        {479}event RecvEnd(valid_979)
    ) | (
        {481}event LeakS(phase0,bob);
        {482}out(pub, key_s(bob))
    ) | (
        {483}phase 1;
        {484}event LeakS(phase1,bob);
        {485}out(pub, key_s(bob))
    )
) | (
    {486}let s_982: keypair = keypairpack(empty,empty) in
    {487}out(pub, getpublickey(s_982));
    (
        {488}let e_983: keypair = keypairpack(empty,empty) in
        {489}let v_984: key = catch-fail(dhexp(key_s(charlie),g)) in
        {490}let rs_985: key = getpublickey((if not-caught-fail(v_984) then keypairpack(v_984,key_s(charlie)) else fail-any)) in
        {491}let re_986: key = empty in
        {492}let v_987: bitstring = catch-fail(hash(somename,empty)) in
        {493}let v_988: key = catch-fail(v_987) in
        {494}let v_989: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {495}let v_990: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_987) then (if not-caught-fail(v_988) then (if not-caught-fail(v_989) then symmetricstatepack(v_989,v_988,v_987) else fail-any) else fail-any) else fail-any))) in
        {496}let v_991: symmetricstate = catch-fail((if success?((if not-caught-fail(v_987) then (if not-caught-fail(v_988) then (if not-caught-fail(v_989) then symmetricstatepack(v_989,v_988,v_987) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then symmetricstatepack(1-proj-3-tuple(v_990),2-proj-3-tuple(v_990),hash(3-proj-3-tuple(v_990),empty)) else fail-any) else fail-any)) in
        {497}let v_992: bitstring = catch-fail(symmetricstateunpack(v_991)) in
        {498}let v_993: symmetricstate = catch-fail((if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then symmetricstatepack(1-proj-3-tuple(v_992),2-proj-3-tuple(v_992),hash(3-proj-3-tuple(v_992),rs_985)) else fail-any)) in
        {499}let hs_994: handshakestate = (if not-caught-fail(v_991) then (if not-caught-fail(v_993) then handshakestatepack(v_993,s_982,e_983,rs_985,re_986,empty,false) else fail-any) else fail-any) in
        {500}insert statestore(bob,charlie,statepack_a(hs_994))
    ) | (
        {522}get statestore(=bob,=charlie,statepack_a(hs_995: handshakestate)) in
        {501}in(pub, message_a_996: bitstring);
        {502}let v_997: bitstring = catch-fail(handshakestateunpack(hs_995)) in
        {503}let v_998: bitstring = catch-fail(deconcat3(message_a_996)) in
        {504}let v_999: bool = catch-fail(true) in
        {505}let v_1000: key = catch-fail(1-proj-3-tuple(v_998)) in
        {506}let v_1001: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_997))) in
        {507}let v_1002: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_997)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then symmetricstatepack(1-proj-3-tuple(v_1001),2-proj-3-tuple(v_1001),hash(3-proj-3-tuple(v_1001),v_1000)) else fail-any) else fail-any)) in
        {508}let v_1003: bitstring = catch-fail(symmetricstateunpack(v_1002)) in
        {509}let v_1004: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1003))) in
        {510}let v_1005: aead = catch-fail(decrypt(1-proj-2-tuple(v_1004),2-proj-2-tuple(v_1004),3-proj-3-tuple(v_1003),3-proj-3-tuple(v_998))) in
        {511}let v_1006: bitstring = catch-fail(aeadunpack(v_1005)) in
        {512}let v_1007: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1003))) in
        {513}let v_1008: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1004))) && success?(1-proj-3-tuple(v_1003))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-2-tuple(v_1007))))) then cipherstatepack(1-proj-2-tuple(v_1007),increment_nonce(2-proj-2-tuple(v_1004))) else fail-any) else fail-any)) in
        {514}let v_1009: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_998)) && (success?(3-proj-3-tuple(v_1003)) && success?(1-proj-3-tuple(v_1003)))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then (if not-caught-fail(v_1005) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then (if not-caught-fail(v_1008) then (v_1008,3-proj-3-tuple(v_1006),1-proj-3-tuple(v_1006)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {515}let v_1010: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1009),2-proj-3-tuple(v_1003),3-proj-3-tuple(v_1003)))) in
        {516}let v_1011: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_998)) && success?(symmetricstatepack(1-proj-3-tuple(v_1009),2-proj-3-tuple(v_1003),3-proj-3-tuple(v_1003)))) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then symmetricstatepack(1-proj-3-tuple(v_1010),2-proj-3-tuple(v_1010),hash(3-proj-3-tuple(v_1010),3-proj-3-tuple(v_998))) else fail-any) else fail-any)) in
        {517}let v_1012: bitstring = catch-fail((if success?(3-proj-3-tuple(v_998)) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then (if not-caught-fail(v_1011) then (v_1011,2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {518}let v_1013: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1012),2-proj-7-tuple(v_997),3-proj-7-tuple(v_997),4-proj-7-tuple(v_997),v_1000,6-proj-7-tuple(v_997),7-proj-7-tuple(v_997))) in
        {519}let (hs_1014: handshakestate,re_1015: key,plaintext_a_1016: bitstring,valid_1017: bool) = (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-7-tuple(v_997))))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then (if not-caught-fail(v_999) then (if not-caught-fail(v_1000) then (if not-caught-fail(v_1002) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-3-tuple(v_1012))))) then (if (v_999 && 3-proj-3-tuple(v_1012)) then (if not-caught-fail(v_1013) then (v_1013,getpublickey(3-proj-7-tuple(v_997)),2-proj-3-tuple(v_1012),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {520}event RecvMsg(bob,charlie,stage_a,plaintext_a_1016,valid_1017);
        {521}insert statestore(bob,charlie,statepack_b(hs_1014))
    ) | (
        {570}get statestore(=bob,=charlie,statepack_b(hs_1018: handshakestate)) in
        {523}let v_1019: bitstring = catch-fail(handshakestateunpack(hs_1018)) in
        {524}let v_1020: bitstring = catch-fail((empty,empty,empty)) in
        {525}let v_1021: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {526}let v_1022: keypair = catch-fail((if not-caught-fail(v_1021) then keypairpack(v_1021,key_e(bob,charlie)) else fail-any)) in
        {527}let v_1023: bitstring = catch-fail(getpublickey(v_1022)) in
        {528}let v_1024: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1019))) in
        {529}let v_1025: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-3-tuple(v_1024))))) then symmetricstatepack(1-proj-3-tuple(v_1024),2-proj-3-tuple(v_1024),hash(3-proj-3-tuple(v_1024),v_1023)) else fail-any) else fail-any)) in
        {530}let v_1026: bitstring = catch-fail(keypairunpack(v_1022)) in
        {531}let v_1027: bitstring = catch-fail(symmetricstateunpack(v_1025)) in
        {532}let v_1028: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1027),(if success?(5-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-2-tuple(v_1026))))) then dhexp(2-proj-2-tuple(v_1026),5-proj-7-tuple(v_1019)) else fail-any) else fail-any))) in
        {533}let v_1029: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1027),(if success?(5-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-2-tuple(v_1026))))) then dhexp(2-proj-2-tuple(v_1026),5-proj-7-tuple(v_1019)) else fail-any) else fail-any))) in
        {534}let v_1030: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1027),(if success?(5-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-2-tuple(v_1026))))) then dhexp(2-proj-2-tuple(v_1026),5-proj-7-tuple(v_1019)) else fail-any) else fail-any))) in
        {535}let v_1031: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-2-tuple(v_1026))))) then dhexp(2-proj-2-tuple(v_1026),5-proj-7-tuple(v_1019)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1027))) then (if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then (v_1028,v_1029,v_1030) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {536}let v_1032: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-2-tuple(v_1026))))) then dhexp(2-proj-2-tuple(v_1026),5-proj-7-tuple(v_1019)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-3-tuple(v_1027))))) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1031)) then cipherstatepack(2-proj-3-tuple(v_1031),minnonce) else fail-any),1-proj-3-tuple(v_1031),3-proj-3-tuple(v_1027)) else fail-any) else fail-any) else fail-any)) in
        {537}let v_1033: bitstring = catch-fail(keypairunpack(v_1022)) in
        {538}let v_1034: bitstring = catch-fail(symmetricstateunpack(v_1032)) in
        {539}let v_1035: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1034),(if success?(4-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then dhexp(2-proj-2-tuple(v_1033),4-proj-7-tuple(v_1019)) else fail-any) else fail-any))) in
        {540}let v_1036: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1034),(if success?(4-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then dhexp(2-proj-2-tuple(v_1033),4-proj-7-tuple(v_1019)) else fail-any) else fail-any))) in
        {541}let v_1037: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1034),(if success?(4-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then dhexp(2-proj-2-tuple(v_1033),4-proj-7-tuple(v_1019)) else fail-any) else fail-any))) in
        {542}let v_1038: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then dhexp(2-proj-2-tuple(v_1033),4-proj-7-tuple(v_1019)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1034))) then (if not-caught-fail(v_1035) then (if not-caught-fail(v_1036) then (if not-caught-fail(v_1037) then (v_1035,v_1036,v_1037) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1039: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1019)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then dhexp(2-proj-2-tuple(v_1033),4-proj-7-tuple(v_1019)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-3-tuple(v_1034))))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1038)) then cipherstatepack(2-proj-3-tuple(v_1038),minnonce) else fail-any),1-proj-3-tuple(v_1038),3-proj-3-tuple(v_1034)) else fail-any) else fail-any) else fail-any)) in
        {544}let v_1040: key = catch-fail(dhexp(key_s(bob),g)) in
        {545}let v_1041: keypair = catch-fail((if not-caught-fail(v_1040) then keypairpack(v_1040,key_s(bob)) else fail-any)) in
        {546}let v_1042: bitstring = catch-fail(symmetricstateunpack(v_1039)) in
        {547}let v_1043: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1042))) in
        {548}let v_1044: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1043),2-proj-2-tuple(v_1043),3-proj-3-tuple(v_1042),getpublickey(v_1041))) in
        {549}let v_1045: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1042))) in
        {550}let v_1046: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1043))) && success?(1-proj-3-tuple(v_1042))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then cipherstatepack(1-proj-2-tuple(v_1045),increment_nonce(2-proj-2-tuple(v_1043))) else fail-any) else fail-any)) in
        {551}let v_1047: bitstring = catch-fail((if (success?(getpublickey(v_1041)) && (success?(3-proj-3-tuple(v_1042)) && success?(1-proj-3-tuple(v_1042)))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then (if not-caught-fail(v_1044) then (if not-caught-fail(v_1046) then (v_1046,v_1044) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {552}let v_1048: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1047),2-proj-3-tuple(v_1042),3-proj-3-tuple(v_1042)))) in
        {553}let v_1049: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1047)) && success?(symmetricstatepack(1-proj-2-tuple(v_1047),2-proj-3-tuple(v_1042),3-proj-3-tuple(v_1042)))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then symmetricstatepack(1-proj-3-tuple(v_1048),2-proj-3-tuple(v_1048),hash(3-proj-3-tuple(v_1048),2-proj-2-tuple(v_1047))) else fail-any) else fail-any)) in
        {554}let v_1050: bitstring = catch-fail((if success?(getpublickey(v_1041)) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then (if not-caught-fail(v_1049) then (v_1049,2-proj-2-tuple(v_1047)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {555}let v_1051: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1050))) in
        {556}let v_1052: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1051))) in
        {557}let v_1053: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1052),2-proj-2-tuple(v_1052),3-proj-3-tuple(v_1051),msg_b(bob,charlie))) in
        {558}let v_1054: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1051))) in
        {559}let v_1055: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1052))) && success?(1-proj-3-tuple(v_1051))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then cipherstatepack(1-proj-2-tuple(v_1054),increment_nonce(2-proj-2-tuple(v_1052))) else fail-any) else fail-any)) in
        {560}let v_1056: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1051)) && success?(1-proj-3-tuple(v_1051))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then (if not-caught-fail(v_1053) then (if not-caught-fail(v_1055) then (v_1055,v_1053) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1057: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1056),2-proj-3-tuple(v_1051),3-proj-3-tuple(v_1051)))) in
        {562}let v_1058: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1056)) && success?(symmetricstatepack(1-proj-2-tuple(v_1056),2-proj-3-tuple(v_1051),3-proj-3-tuple(v_1051)))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then symmetricstatepack(1-proj-3-tuple(v_1057),2-proj-3-tuple(v_1057),hash(3-proj-3-tuple(v_1057),2-proj-2-tuple(v_1056))) else fail-any) else fail-any)) in
        {563}let v_1059: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1050)) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-2-tuple(v_1056))))) then (if not-caught-fail(v_1058) then (v_1058,2-proj-2-tuple(v_1056)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {564}let v_1060: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1059),v_1041,v_1022,4-proj-7-tuple(v_1019),5-proj-7-tuple(v_1019),6-proj-7-tuple(v_1019),7-proj-7-tuple(v_1019))) in
        {565}let v_1061: bitstring = catch-fail(concat3(v_1023,2-proj-2-tuple(v_1050),2-proj-2-tuple(v_1059))) in
        {566}let (hs_1062: handshakestate,re_1063: key,message_b_1064: bitstring) = (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-7-tuple(v_1019))))) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1023) then (if not-caught-fail(v_1025) then (if not-caught-fail(v_1032) then (if not-caught-fail(v_1039) then (if not-caught-fail(v_1041) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-2-tuple(v_1050))))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then (if not-caught-fail(v_1060) then (if not-caught-fail(v_1061) then (v_1060,5-proj-7-tuple(v_1019),v_1061) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {567}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {568}insert statestore(bob,charlie,statepack_c(hs_1062));
        {569}out(pub, message_b_1064)
    ) | (
        {596}get statestore(=bob,=charlie,statepack_c(hs_1065: handshakestate)) in
        {571}in(pub, message_c_1066: bitstring);
        {572}let v_1067: bitstring = catch-fail(handshakestateunpack(hs_1065)) in
        {573}let v_1068: bitstring = catch-fail(deconcat3(message_c_1066)) in
        {574}let v_1069: bool = catch-fail(true) in
        {575}let v_1070: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1067))) in
        {576}let v_1071: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1067))) in
        {577}let v_1072: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1071),(if (success?(5-proj-7-tuple(v_1067)) && success?(2-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),5-proj-7-tuple(v_1067)) else fail-any) else fail-any))) in
        {578}let v_1073: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1071),(if (success?(5-proj-7-tuple(v_1067)) && success?(2-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),5-proj-7-tuple(v_1067)) else fail-any) else fail-any))) in
        {579}let v_1074: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1071),(if (success?(5-proj-7-tuple(v_1067)) && success?(2-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),5-proj-7-tuple(v_1067)) else fail-any) else fail-any))) in
        {580}let v_1075: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1067)) && success?(2-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),5-proj-7-tuple(v_1067)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1071))) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1073) then (if not-caught-fail(v_1074) then (v_1072,v_1073,v_1074) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {581}let v_1076: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1067)) && success?(2-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),5-proj-7-tuple(v_1067)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-3-tuple(v_1071))))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-3-tuple(v_1075))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1075)) then cipherstatepack(2-proj-3-tuple(v_1075),minnonce) else fail-any),1-proj-3-tuple(v_1075),3-proj-3-tuple(v_1071)) else fail-any) else fail-any) else fail-any)) in
        {582}let v_1077: bitstring = catch-fail(symmetricstateunpack(v_1076)) in
        {583}let v_1078: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1077))) in
        {584}let v_1079: aead = catch-fail(decrypt(1-proj-2-tuple(v_1078),2-proj-2-tuple(v_1078),3-proj-3-tuple(v_1077),3-proj-3-tuple(v_1068))) in
        {585}let v_1080: bitstring = catch-fail(aeadunpack(v_1079)) in
        {586}let v_1081: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1077))) in
        {587}let v_1082: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1078))) && success?(1-proj-3-tuple(v_1077))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-2-tuple(v_1081))))) then cipherstatepack(1-proj-2-tuple(v_1081),increment_nonce(2-proj-2-tuple(v_1078))) else fail-any) else fail-any)) in
        {588}let v_1083: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1068)) && (success?(3-proj-3-tuple(v_1077)) && success?(1-proj-3-tuple(v_1077)))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then (if not-caught-fail(v_1079) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if not-caught-fail(v_1082) then (v_1082,3-proj-3-tuple(v_1080),1-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {589}let v_1084: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)))) in
        {590}let v_1085: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1068)) && success?(symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then symmetricstatepack(1-proj-3-tuple(v_1084),2-proj-3-tuple(v_1084),hash(3-proj-3-tuple(v_1084),3-proj-3-tuple(v_1068))) else fail-any) else fail-any)) in
        {591}let v_1086: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1068)) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if not-caught-fail(v_1085) then (v_1085,2-proj-3-tuple(v_1083),3-proj-3-tuple(v_1083)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1087: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1086),2-proj-7-tuple(v_1067),3-proj-7-tuple(v_1067),4-proj-7-tuple(v_1067),5-proj-7-tuple(v_1067),6-proj-7-tuple(v_1067),7-proj-7-tuple(v_1067))) in
        {593}let (hs_1088: handshakestate,re_1089: key,plaintext_c_1090: bitstring,valid_1091: bool) = (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-7-tuple(v_1067))))) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (if not-caught-fail(v_1069) then (if not-caught-fail(v_1076) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if (v_1069 && 3-proj-3-tuple(v_1086)) then (if not-caught-fail(v_1087) then (v_1087,getpublickey(3-proj-7-tuple(v_1067)),2-proj-3-tuple(v_1086),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {594}event RecvMsg(bob,charlie,stage_c,plaintext_c_1090,valid_1091);
        {595}insert statestore(bob,charlie,statepack_d(hs_1088))
    ) | (
        {614}get statestore(=bob,=charlie,statepack_d(hs_1092: handshakestate)) in
        {597}let v_1093: bitstring = catch-fail(handshakestateunpack(hs_1092)) in
        {598}let v_1094: bitstring = catch-fail((empty,empty,empty)) in
        {599}let v_1095: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1093))) in
        {600}let v_1096: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1095))) in
        {601}let v_1097: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1096),2-proj-2-tuple(v_1096),3-proj-3-tuple(v_1095),msg_d(bob,charlie))) in
        {602}let v_1098: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1095))) in
        {603}let v_1099: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1096))) && success?(1-proj-3-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then cipherstatepack(1-proj-2-tuple(v_1098),increment_nonce(2-proj-2-tuple(v_1096))) else fail-any) else fail-any)) in
        {604}let v_1100: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1095)) && success?(1-proj-3-tuple(v_1095))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1099) then (v_1099,v_1097) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1101: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1100),2-proj-3-tuple(v_1095),3-proj-3-tuple(v_1095)))) in
        {606}let v_1102: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1100)) && success?(symmetricstatepack(1-proj-2-tuple(v_1100),2-proj-3-tuple(v_1095),3-proj-3-tuple(v_1095)))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then symmetricstatepack(1-proj-3-tuple(v_1101),2-proj-3-tuple(v_1101),hash(3-proj-3-tuple(v_1101),2-proj-2-tuple(v_1100))) else fail-any) else fail-any)) in
        {607}let v_1103: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1093)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-2-tuple(v_1100))))) then (if not-caught-fail(v_1102) then (v_1102,2-proj-2-tuple(v_1100)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1104: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1103),2-proj-7-tuple(v_1093),3-proj-7-tuple(v_1093),4-proj-7-tuple(v_1093),5-proj-7-tuple(v_1093),6-proj-7-tuple(v_1093),7-proj-7-tuple(v_1093))) in
        {609}let v_1105: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1094),2-proj-3-tuple(v_1094),2-proj-2-tuple(v_1103))) in
        {610}let (hs_1106: handshakestate,re_1107: key,message_d_1108: bitstring) = (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-7-tuple(v_1093))))) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-2-tuple(v_1103))))) then (if not-caught-fail(v_1104) then (if not-caught-fail(v_1105) then (v_1104,5-proj-7-tuple(v_1093),v_1105) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {611}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {612}insert statestore(bob,charlie,statepack_e(hs_1106));
        {613}out(pub, message_d_1108)
    ) | (
        {642}get statestore(=bob,=charlie,statepack_e(hs_1109: handshakestate)) in
        {615}in(pub, message_e_1110: bitstring);
        {616}let v_1111: bitstring = catch-fail(handshakestateunpack(hs_1109)) in
        {617}let v_1112: bitstring = catch-fail(deconcat3(message_e_1110)) in
        {618}let v_1113: bool = catch-fail(true) in
        {619}let v_1114: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1111))) in
        {620}let v_1115: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1114))) in
        {621}let v_1116: aead = catch-fail(decrypt(1-proj-2-tuple(v_1115),2-proj-2-tuple(v_1115),3-proj-3-tuple(v_1114),3-proj-3-tuple(v_1112))) in
        {622}let v_1117: bitstring = catch-fail(aeadunpack(v_1116)) in
        {623}let v_1118: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1114))) in
        {624}let v_1119: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1115))) && success?(1-proj-3-tuple(v_1114))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-2-tuple(v_1118))))) then cipherstatepack(1-proj-2-tuple(v_1118),increment_nonce(2-proj-2-tuple(v_1115))) else fail-any) else fail-any)) in
        {625}let v_1120: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && (success?(3-proj-3-tuple(v_1114)) && success?(1-proj-3-tuple(v_1114)))) then (if (not-caught-fail(v_1115) && success?(is-true(success?(1-proj-2-tuple(v_1115))))) then (if not-caught-fail(v_1116) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-3-tuple(v_1117))))) then (if not-caught-fail(v_1119) then (v_1119,3-proj-3-tuple(v_1117),1-proj-3-tuple(v_1117)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1121: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1120),2-proj-3-tuple(v_1114),3-proj-3-tuple(v_1114)))) in
        {627}let v_1122: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && success?(symmetricstatepack(1-proj-3-tuple(v_1120),2-proj-3-tuple(v_1114),3-proj-3-tuple(v_1114)))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then symmetricstatepack(1-proj-3-tuple(v_1121),2-proj-3-tuple(v_1121),hash(3-proj-3-tuple(v_1121),3-proj-3-tuple(v_1112))) else fail-any) else fail-any)) in
        {628}let v_1123: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && success?(1-proj-7-tuple(v_1111))) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-3-tuple(v_1120))))) then (if not-caught-fail(v_1122) then (v_1122,2-proj-3-tuple(v_1120),3-proj-3-tuple(v_1120)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {629}let v_1124: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1123),2-proj-7-tuple(v_1111),3-proj-7-tuple(v_1111),4-proj-7-tuple(v_1111),5-proj-7-tuple(v_1111),6-proj-7-tuple(v_1111),7-proj-7-tuple(v_1111))) in
        {630}let v_1125: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1123))) in
        {631}let v_1126: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1125),zero)) in
        {632}let v_1127: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1125),zero)) in
        {633}let v_1128: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1125),zero)) in
        {634}let v_1129: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1125)) then (if not-caught-fail(v_1126) then (if not-caught-fail(v_1127) then (if not-caught-fail(v_1128) then (v_1126,v_1127,v_1128) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {635}let v_1130: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1129)) then cipherstatepack(1-proj-3-tuple(v_1129),minnonce) else fail-any)) in
        {636}let v_1131: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1129)) then cipherstatepack(2-proj-3-tuple(v_1129),minnonce) else fail-any)) in
        {637}let v_1132: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1123)) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-3-tuple(v_1129))))) then (if not-caught-fail(v_1130) then (if not-caught-fail(v_1131) then (1-proj-3-tuple(v_1123),v_1130,v_1131) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {638}let (hs_1133: handshakestate,re_1134: key,plaintext_e_1135: bitstring,valid_1136: bool,cs1_1137: cipherstate,cs2_1138: cipherstate) = (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-7-tuple(v_1111))))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if not-caught-fail(v_1113) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (if (v_1113 && 3-proj-3-tuple(v_1123)) then (if not-caught-fail(v_1124) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-3-tuple(v_1132))))) then (v_1124,getpublickey(3-proj-7-tuple(v_1111)),2-proj-3-tuple(v_1123),true,2-proj-3-tuple(v_1132),3-proj-3-tuple(v_1132)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {639}event RecvMsg(bob,charlie,stage_e,plaintext_e_1135,valid_1136);
        {640}insert statestore(bob,charlie,statepack_f(hs_1133));
        {641}event RecvEnd(valid_1136)
    ) | (
        {643}event LeakS(phase0,bob);
        {644}out(pub, key_s(bob))
    ) | (
        {645}phase 1;
        {646}event LeakS(phase1,bob);
        {647}out(pub, key_s(bob))
    )
) | (
    {648}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 171 rules in the queue.
400 rules inserted. The rule base contains 390 rules. 17 rules in the queue.
600 rules inserted. The rule base contains 569 rules. 34 rules in the queue.
800 rules inserted. The rule base contains 759 rules. 189 rules in the queue.
1000 rules inserted. The rule base contains 920 rules. 195 rules in the queue.
1200 rules inserted. The rule base contains 1087 rules. 243 rules in the queue.
1400 rules inserted. The rule base contains 1229 rules. 247 rules in the queue.
1600 rules inserted. The rule base contains 1380 rules. 274 rules in the queue.
1800 rules inserted. The rule base contains 1500 rules. 251 rules in the queue.
2000 rules inserted. The rule base contains 1672 rules. 275 rules in the queue.
2200 rules inserted. The rule base contains 1812 rules. 293 rules in the queue.
2400 rules inserted. The rule base contains 1947 rules. 313 rules in the queue.
2600 rules inserted. The rule base contains 2094 rules. 341 rules in the queue.
2800 rules inserted. The rule base contains 2238 rules. 351 rules in the queue.
3000 rules inserted. The rule base contains 2392 rules. 350 rules in the queue.
3200 rules inserted. The rule base contains 2524 rules. 343 rules in the queue.
3400 rules inserted. The rule base contains 2666 rules. 364 rules in the queue.
3600 rules inserted. The rule base contains 2803 rules. 355 rules in the queue.
3800 rules inserted. The rule base contains 2913 rules. 342 rules in the queue.
4000 rules inserted. The rule base contains 3035 rules. 317 rules in the queue.
4200 rules inserted. The rule base contains 3133 rules. 291 rules in the queue.
4400 rules inserted. The rule base contains 3235 rules. 268 rules in the queue.
4600 rules inserted. The rule base contains 3302 rules. 217 rules in the queue.
4800 rules inserted. The rule base contains 3446 rules. 235 rules in the queue.
5000 rules inserted. The rule base contains 3591 rules. 252 rules in the queue.
5200 rules inserted. The rule base contains 3753 rules. 294 rules in the queue.
5400 rules inserted. The rule base contains 3890 rules. 330 rules in the queue.
5600 rules inserted. The rule base contains 4027 rules. 350 rules in the queue.
5800 rules inserted. The rule base contains 4150 rules. 314 rules in the queue.
6000 rules inserted. The rule base contains 4276 rules. 322 rules in the queue.
6200 rules inserted. The rule base contains 4425 rules. 300 rules in the queue.
6400 rules inserted. The rule base contains 4590 rules. 318 rules in the queue.
6600 rules inserted. The rule base contains 4736 rules. 322 rules in the queue.
6800 rules inserted. The rule base contains 4875 rules. 337 rules in the queue.
7000 rules inserted. The rule base contains 5011 rules. 335 rules in the queue.
7200 rules inserted. The rule base contains 5104 rules. 307 rules in the queue.
7400 rules inserted. The rule base contains 5206 rules. 260 rules in the queue.
7600 rules inserted. The rule base contains 5322 rules. 249 rules in the queue.
7800 rules inserted. The rule base contains 5461 rules. 229 rules in the queue.
8000 rules inserted. The rule base contains 5583 rules. 227 rules in the queue.
8200 rules inserted. The rule base contains 5711 rules. 212 rules in the queue.
8400 rules inserted. The rule base contains 5805 rules. 178 rules in the queue.
8600 rules inserted. The rule base contains 5894 rules. 118 rules in the queue.
8800 rules inserted. The rule base contains 5977 rules. 48 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {177}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {200}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {197}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {199}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {360}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {339}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {358}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {177}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {200}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {197}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {199}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {360}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {339}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {358}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {177}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {200}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {197}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {199}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {360}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {339}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {358}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
