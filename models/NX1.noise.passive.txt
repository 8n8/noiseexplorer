File "NX1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "NX1.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "NX1.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "NX1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "NX1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "NX1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "NX1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "NX1.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 308, character 6:
Warning: identifier s rebound.
File "NX1.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "NX1.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 310, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 335, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 336, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 345, characters 6-7:
Warning: identifier re rebound.
File "NX1.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "NX1.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 362, characters 48-53:
Warning: identifier valid1 rebound.
File "NX1.noise.passive.pv", line 363, characters 6-7:
Warning: identifier rs rebound.
File "NX1.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 385, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 387, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 395, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 397, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 335, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 336, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 561, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 385, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 387, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 553, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "NX1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 546, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "NX1.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 362, characters 48-53:
Warning: identifier valid1 rebound.
File "NX1.noise.passive.pv", line 363, characters 6-7:
Warning: identifier rs rebound.
File "NX1.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "NX1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 538, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "NX1.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "NX1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 626, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 395, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 397, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 618, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 611, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "NX1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 603, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "NX1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "NX1.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 308, character 6:
Warning: identifier s rebound.
File "NX1.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "NX1.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 310, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "NX1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 596, characters 8-9:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 345, characters 6-7:
Warning: identifier re rebound.
File "NX1.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "NX1.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "NX1.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "NX1.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let s_505: keypair = keypairpack(empty,empty) in
    (
        {6}let e_506: keypair = keypairpack(empty,empty) in
        {7}let rs_507: key = empty in
        {8}let re_508: key = empty in
        {9}let v_509: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_510: key = catch-fail(v_509) in
        {11}let v_511: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_512: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_509) then (if not-caught-fail(v_510) then (if not-caught-fail(v_511) then symmetricstatepack(v_511,v_510,v_509) else fail-any) else fail-any) else fail-any))) in
        {13}let v_513: symmetricstate = catch-fail((if success?((if not-caught-fail(v_509) then (if not-caught-fail(v_510) then (if not-caught-fail(v_511) then symmetricstatepack(v_511,v_510,v_509) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then symmetricstatepack(1-proj-3-tuple(v_512),2-proj-3-tuple(v_512),hash(3-proj-3-tuple(v_512),empty)) else fail-any) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_513) then handshakestatepack(v_513,s_505,e_506,rs_507,re_508,empty,true) else fail-any) in
        {15}insert statestore(me,them,statepack_a(hs))
    ) | (
        {39}get statestore(=me,=them,statepack_a(hs_514: handshakestate)) in
        {16}let v_515: bitstring = catch-fail(handshakestateunpack(hs_514)) in
        {17}let v_516: bitstring = catch-fail((empty,empty,empty)) in
        {18}new key_e[me,them]: key;
        {19}let v_517: key = catch-fail(dhexp(key_e,g)) in
        {20}let v_518: keypair = catch-fail((if not-caught-fail(v_517) then keypairpack(v_517,key_e) else fail-any)) in
        {21}let v_519: bitstring = catch-fail(getpublickey(v_518)) in
        {22}let v_520: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_515))) in
        {23}let v_521: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_515)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then symmetricstatepack(1-proj-3-tuple(v_520),2-proj-3-tuple(v_520),hash(3-proj-3-tuple(v_520),v_519)) else fail-any) else fail-any)) in
        {24}let v_522: bitstring = catch-fail(symmetricstateunpack(v_521)) in
        {25}let v_523: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_522))) in
        {26}let v_524: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_523),2-proj-2-tuple(v_523),3-proj-3-tuple(v_522),msg_a(me,them))) in
        {27}let v_525: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_522))) in
        {28}let v_526: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_523))) && success?(1-proj-3-tuple(v_522))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-2-tuple(v_525))))) then cipherstatepack(1-proj-2-tuple(v_525),increment_nonce(2-proj-2-tuple(v_523))) else fail-any) else fail-any)) in
        {29}let v_527: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_522)) && success?(1-proj-3-tuple(v_522))) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-2-tuple(v_523))))) then (if not-caught-fail(v_524) then (if not-caught-fail(v_526) then (v_526,v_524) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_528: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_527),2-proj-3-tuple(v_522),3-proj-3-tuple(v_522)))) in
        {31}let v_529: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_527)) && success?(symmetricstatepack(1-proj-2-tuple(v_527),2-proj-3-tuple(v_522),3-proj-3-tuple(v_522)))) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then symmetricstatepack(1-proj-3-tuple(v_528),2-proj-3-tuple(v_528),hash(3-proj-3-tuple(v_528),2-proj-2-tuple(v_527))) else fail-any) else fail-any)) in
        {32}let v_530: bitstring = catch-fail((if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then (if not-caught-fail(v_529) then (v_529,2-proj-2-tuple(v_527)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_531: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_530),2-proj-7-tuple(v_515),v_518,4-proj-7-tuple(v_515),5-proj-7-tuple(v_515),6-proj-7-tuple(v_515),7-proj-7-tuple(v_515))) in
        {34}let v_532: bitstring = catch-fail(concat3(v_519,2-proj-3-tuple(v_516),2-proj-2-tuple(v_530))) in
        {35}let (hs_533: handshakestate,re_534: key,message_a: bitstring) = (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-7-tuple(v_515))))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then (if not-caught-fail(v_518) then (if not-caught-fail(v_519) then (if not-caught-fail(v_521) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then (if not-caught-fail(v_531) then (if not-caught-fail(v_532) then (v_531,5-proj-7-tuple(v_515),v_532) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {36}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {37}insert statestore(me,them,statepack_b(hs_533));
        {38}out(pub, message_a)
    ) | (
        {80}get statestore(=me,=them,statepack_b(hs_535: handshakestate)) in
        {40}in(pub, message_b: bitstring);
        {41}let v_536: bitstring = catch-fail(handshakestateunpack(hs_535)) in
        {42}let v_537: bitstring = catch-fail(deconcat3(message_b)) in
        {43}let v_538: bool = catch-fail(true) in
        {44}let v_539: key = catch-fail(1-proj-3-tuple(v_537)) in
        {45}let v_540: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_536))) in
        {46}let v_541: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_536)) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_540),hash(3-proj-3-tuple(v_540),v_539)) else fail-any) else fail-any)) in
        {47}let v_542: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_536))) in
        {48}let v_543: bitstring = catch-fail(symmetricstateunpack(v_541)) in
        {49}let v_544: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_543),(if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any))) in
        {50}let v_545: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_543),(if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any))) in
        {51}let v_546: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_543),(if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any))) in
        {52}let v_547: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_543))) then (if not-caught-fail(v_544) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (v_544,v_545,v_546) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {53}let v_548: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_547)) then cipherstatepack(2-proj-3-tuple(v_547),minnonce) else fail-any),1-proj-3-tuple(v_547),3-proj-3-tuple(v_543)) else fail-any) else fail-any) else fail-any)) in
        {54}let v_549: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {55}let v_550: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {56}let v_551: aead = catch-fail(decrypt(1-proj-2-tuple(v_550),2-proj-2-tuple(v_550),3-proj-3-tuple(v_549),2-proj-3-tuple(v_537))) in
        {57}let v_552: bitstring = catch-fail(aeadunpack(v_551)) in
        {58}let v_553: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {59}let v_554: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_550))) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then cipherstatepack(1-proj-2-tuple(v_553),increment_nonce(2-proj-2-tuple(v_550))) else fail-any) else fail-any)) in
        {60}let v_555: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_537)) && (success?(3-proj-3-tuple(v_549)) && success?(1-proj-3-tuple(v_549)))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then (if not-caught-fail(v_551) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (if not-caught-fail(v_554) then (v_554,3-proj-3-tuple(v_552),1-proj-3-tuple(v_552)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_556: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) in
        {62}let v_557: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_537)) && success?(symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_556),hash(3-proj-3-tuple(v_556),2-proj-3-tuple(v_537))) else fail-any) else fail-any)) in
        {63}let v_558: bitstring = catch-fail((if success?(2-proj-3-tuple(v_537)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if not-caught-fail(v_557) then (v_557,2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {64}let v_559: key = catch-fail(2-proj-3-tuple(v_558)) in
        {65}let v_560: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_558))) in
        {66}let v_561: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_560))) in
        {67}let v_562: aead = catch-fail(decrypt(1-proj-2-tuple(v_561),2-proj-2-tuple(v_561),3-proj-3-tuple(v_560),3-proj-3-tuple(v_537))) in
        {68}let v_563: bitstring = catch-fail(aeadunpack(v_562)) in
        {69}let v_564: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_560))) in
        {70}let v_565: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_561))) && success?(1-proj-3-tuple(v_560))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then cipherstatepack(1-proj-2-tuple(v_564),increment_nonce(2-proj-2-tuple(v_561))) else fail-any) else fail-any)) in
        {71}let v_566: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_537)) && (success?(3-proj-3-tuple(v_560)) && success?(1-proj-3-tuple(v_560)))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-2-tuple(v_561))))) then (if not-caught-fail(v_562) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if not-caught-fail(v_565) then (v_565,3-proj-3-tuple(v_563),1-proj-3-tuple(v_563)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_567: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_566),2-proj-3-tuple(v_560),3-proj-3-tuple(v_560)))) in
        {73}let v_568: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_537)) && success?(symmetricstatepack(1-proj-3-tuple(v_566),2-proj-3-tuple(v_560),3-proj-3-tuple(v_560)))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then symmetricstatepack(1-proj-3-tuple(v_567),2-proj-3-tuple(v_567),hash(3-proj-3-tuple(v_567),3-proj-3-tuple(v_537))) else fail-any) else fail-any)) in
        {74}let v_569: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_537)) && success?(1-proj-3-tuple(v_558))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if not-caught-fail(v_568) then (v_568,2-proj-3-tuple(v_566),3-proj-3-tuple(v_566)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {75}let v_570: key = catch-fail(dhexp(key_s(them),g)) in
        {76}let v_571: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_569),2-proj-7-tuple(v_536),3-proj-7-tuple(v_536),v_559,v_539,6-proj-7-tuple(v_536),7-proj-7-tuple(v_536))) in
        {77}let (hs_572: handshakestate,re_573: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-7-tuple(v_536))))) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if not-caught-fail(v_538) then (if not-caught-fail(v_539) then (if not-caught-fail(v_541) then (if not-caught-fail(v_548) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if not-caught-fail(v_559) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if ((3-proj-3-tuple(v_558) && 3-proj-3-tuple(v_569)) && (v_559 = getpublickey((if not-caught-fail(v_570) then keypairpack(v_570,key_s(them)) else fail-any)))) then (if not-caught-fail(v_571) then (v_571,getpublickey(3-proj-7-tuple(v_536)),2-proj-3-tuple(v_569),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {78}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {79}insert statestore(me,them,statepack_c(hs_572))
    ) | (
        {105}get statestore(=me,=them,statepack_c(hs_574: handshakestate)) in
        {81}let v_575: bitstring = catch-fail(handshakestateunpack(hs_574)) in
        {82}let v_576: bitstring = catch-fail((empty,empty,empty)) in
        {83}let v_577: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_575))) in
        {84}let v_578: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_575))) in
        {85}let v_579: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_578),(if (success?(4-proj-7-tuple(v_575)) && success?(3-proj-7-tuple(v_575))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),4-proj-7-tuple(v_575)) else fail-any) else fail-any))) in
        {86}let v_580: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_578),(if (success?(4-proj-7-tuple(v_575)) && success?(3-proj-7-tuple(v_575))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),4-proj-7-tuple(v_575)) else fail-any) else fail-any))) in
        {87}let v_581: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_578),(if (success?(4-proj-7-tuple(v_575)) && success?(3-proj-7-tuple(v_575))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),4-proj-7-tuple(v_575)) else fail-any) else fail-any))) in
        {88}let v_582: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_575)) && success?(3-proj-7-tuple(v_575))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),4-proj-7-tuple(v_575)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_578))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then (v_579,v_580,v_581) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_583: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_575)) && success?(3-proj-7-tuple(v_575))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then dhexp(2-proj-2-tuple(v_577),4-proj-7-tuple(v_575)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_575))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_582)) then cipherstatepack(2-proj-3-tuple(v_582),minnonce) else fail-any),1-proj-3-tuple(v_582),3-proj-3-tuple(v_578)) else fail-any) else fail-any) else fail-any)) in
        {90}let v_584: bitstring = catch-fail(symmetricstateunpack(v_583)) in
        {91}let v_585: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_584))) in
        {92}let v_586: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_585),2-proj-2-tuple(v_585),3-proj-3-tuple(v_584),msg_c(me,them))) in
        {93}let v_587: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_584))) in
        {94}let v_588: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_585))) && success?(1-proj-3-tuple(v_584))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then cipherstatepack(1-proj-2-tuple(v_587),increment_nonce(2-proj-2-tuple(v_585))) else fail-any) else fail-any)) in
        {95}let v_589: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_584)) && success?(1-proj-3-tuple(v_584))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then (if not-caught-fail(v_586) then (if not-caught-fail(v_588) then (v_588,v_586) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let v_590: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_589),2-proj-3-tuple(v_584),3-proj-3-tuple(v_584)))) in
        {97}let v_591: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_589)) && success?(symmetricstatepack(1-proj-2-tuple(v_589),2-proj-3-tuple(v_584),3-proj-3-tuple(v_584)))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then symmetricstatepack(1-proj-3-tuple(v_590),2-proj-3-tuple(v_590),hash(3-proj-3-tuple(v_590),2-proj-2-tuple(v_589))) else fail-any) else fail-any)) in
        {98}let v_592: bitstring = catch-fail((if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then (if not-caught-fail(v_591) then (v_591,2-proj-2-tuple(v_589)) else fail-any) else fail-any) else fail-any)) in
        {99}let v_593: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_592),2-proj-7-tuple(v_575),3-proj-7-tuple(v_575),4-proj-7-tuple(v_575),5-proj-7-tuple(v_575),6-proj-7-tuple(v_575),7-proj-7-tuple(v_575))) in
        {100}let v_594: bitstring = catch-fail(concat3(1-proj-3-tuple(v_576),2-proj-3-tuple(v_576),2-proj-2-tuple(v_592))) in
        {101}let (hs_595: handshakestate,re_596: key,message_c: bitstring) = (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-7-tuple(v_575))))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if not-caught-fail(v_583) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then (if not-caught-fail(v_593) then (if not-caught-fail(v_594) then (v_593,5-proj-7-tuple(v_575),v_594) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {102}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {103}insert statestore(me,them,statepack_d(hs_595));
        {104}out(pub, message_c)
    ) | (
        {106}!
        {125}get statestore(=me,=them,statepack_d(hs_597: handshakestate)) in
        {107}in(pub, message_d: bitstring);
        {108}let v_598: bitstring = catch-fail(handshakestateunpack(hs_597)) in
        {109}let v_599: bitstring = catch-fail(deconcat3(message_d)) in
        {110}let v_600: bool = catch-fail(true) in
        {111}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_598))) in
        {112}let v_602: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {113}let v_603: aead = catch-fail(decrypt(1-proj-2-tuple(v_602),2-proj-2-tuple(v_602),3-proj-3-tuple(v_601),3-proj-3-tuple(v_599))) in
        {114}let v_604: bitstring = catch-fail(aeadunpack(v_603)) in
        {115}let v_605: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {116}let v_606: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_602))) && success?(1-proj-3-tuple(v_601))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then cipherstatepack(1-proj-2-tuple(v_605),increment_nonce(2-proj-2-tuple(v_602))) else fail-any) else fail-any)) in
        {117}let v_607: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_599)) && (success?(3-proj-3-tuple(v_601)) && success?(1-proj-3-tuple(v_601)))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then (if not-caught-fail(v_603) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if not-caught-fail(v_606) then (v_606,3-proj-3-tuple(v_604),1-proj-3-tuple(v_604)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_608: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) in
        {119}let v_609: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_599)) && success?(symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then symmetricstatepack(1-proj-3-tuple(v_608),2-proj-3-tuple(v_608),hash(3-proj-3-tuple(v_608),3-proj-3-tuple(v_599))) else fail-any) else fail-any)) in
        {120}let v_610: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_599)) && success?(1-proj-7-tuple(v_598))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if not-caught-fail(v_609) then (v_609,2-proj-3-tuple(v_607),3-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {121}let v_611: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_610),2-proj-7-tuple(v_598),3-proj-7-tuple(v_598),4-proj-7-tuple(v_598),5-proj-7-tuple(v_598),6-proj-7-tuple(v_598),7-proj-7-tuple(v_598))) in
        {122}let (hs_612: handshakestate,re_613: key,plaintext_d: bitstring,valid_614: bool) = (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-7-tuple(v_598))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if not-caught-fail(v_600) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if (v_600 && 3-proj-3-tuple(v_610)) then (if not-caught-fail(v_611) then (v_611,getpublickey(3-proj-7-tuple(v_598)),2-proj-3-tuple(v_610),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {123}event RecvMsg(me,them,stage_d,plaintext_d,valid_614);
        {124}insert statestore(me,them,statepack_e(hs_612))
    ) | (
        {126}!
        {152}get statestore(=me,=them,statepack_e(hs_615: handshakestate)) in
        {127}let v_616: bitstring = catch-fail(handshakestateunpack(hs_615)) in
        {128}let v_617: bitstring = catch-fail((empty,empty,empty)) in
        {129}let v_618: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_616))) in
        {130}let v_619: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_618))) in
        {131}let v_620: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_619),2-proj-2-tuple(v_619),3-proj-3-tuple(v_618),msg_e(me,them))) in
        {132}let v_621: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_618))) in
        {133}let v_622: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_619))) && success?(1-proj-3-tuple(v_618))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then cipherstatepack(1-proj-2-tuple(v_621),increment_nonce(2-proj-2-tuple(v_619))) else fail-any) else fail-any)) in
        {134}let v_623: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_618)) && success?(1-proj-3-tuple(v_618))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then (if not-caught-fail(v_620) then (if not-caught-fail(v_622) then (v_622,v_620) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_624: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_623),2-proj-3-tuple(v_618),3-proj-3-tuple(v_618)))) in
        {136}let v_625: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_623)) && success?(symmetricstatepack(1-proj-2-tuple(v_623),2-proj-3-tuple(v_618),3-proj-3-tuple(v_618)))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then symmetricstatepack(1-proj-3-tuple(v_624),2-proj-3-tuple(v_624),hash(3-proj-3-tuple(v_624),2-proj-2-tuple(v_623))) else fail-any) else fail-any)) in
        {137}let v_626: bitstring = catch-fail((if success?(1-proj-7-tuple(v_616)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then (if not-caught-fail(v_625) then (v_625,2-proj-2-tuple(v_623)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_627: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_626),2-proj-7-tuple(v_616),3-proj-7-tuple(v_616),4-proj-7-tuple(v_616),5-proj-7-tuple(v_616),6-proj-7-tuple(v_616),7-proj-7-tuple(v_616))) in
        {139}let v_628: bitstring = catch-fail(concat3(1-proj-3-tuple(v_617),2-proj-3-tuple(v_617),2-proj-2-tuple(v_626))) in
        {140}let v_629: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_626))) in
        {141}let v_630: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_629),zero)) in
        {142}let v_631: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_629),zero)) in
        {143}let v_632: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_629),zero)) in
        {144}let v_633: bitstring = catch-fail((if success?(2-proj-3-tuple(v_629)) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (v_630,v_631,v_632) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {145}let v_634: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_633)) then cipherstatepack(1-proj-3-tuple(v_633),minnonce) else fail-any)) in
        {146}let v_635: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_633)) then cipherstatepack(2-proj-3-tuple(v_633),minnonce) else fail-any)) in
        {147}let v_636: bitstring = catch-fail((if success?(1-proj-2-tuple(v_626)) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if not-caught-fail(v_634) then (if not-caught-fail(v_635) then (1-proj-2-tuple(v_626),v_634,v_635) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {148}let (hs_637: handshakestate,re_638: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-7-tuple(v_616))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (v_627,5-proj-7-tuple(v_616),v_628,2-proj-3-tuple(v_636),3-proj-3-tuple(v_636)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {149}event SendMsg(me,them,stage_e,msg_e(me,them),true);
        {150}insert statestore(me,them,statepack_f(hs_637));
        {151}out(pub, message_e)
    ) | (
        {153}event LeakS(phase0,me);
        {154}out(pub, key_s(me))
    ) | (
        {155}phase 1;
        {156}event LeakS(phase1,me);
        {157}out(pub, key_s(me))
    )
) | (
    {158}let them_639: principal = charlie in
    {159}let me_640: principal = alice in
    {160}let s_641: keypair = keypairpack(empty,empty) in
    (
        {161}let e_642: keypair = keypairpack(empty,empty) in
        {162}let rs_643: key = empty in
        {163}let re_644: key = empty in
        {164}let v_645: bitstring = catch-fail(hash(somename,empty)) in
        {165}let v_646: key = catch-fail(v_645) in
        {166}let v_647: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {167}let v_648: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (if not-caught-fail(v_647) then symmetricstatepack(v_647,v_646,v_645) else fail-any) else fail-any) else fail-any))) in
        {168}let v_649: symmetricstate = catch-fail((if success?((if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (if not-caught-fail(v_647) then symmetricstatepack(v_647,v_646,v_645) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack(1-proj-3-tuple(v_648),2-proj-3-tuple(v_648),hash(3-proj-3-tuple(v_648),empty)) else fail-any) else fail-any)) in
        {169}let hs_650: handshakestate = (if not-caught-fail(v_649) then handshakestatepack(v_649,s_641,e_642,rs_643,re_644,empty,true) else fail-any) in
        {170}insert statestore(me_640,them_639,statepack_a(hs_650))
    ) | (
        {194}get statestore(=me_640,=them_639,statepack_a(hs_651: handshakestate)) in
        {171}let v_652: bitstring = catch-fail(handshakestateunpack(hs_651)) in
        {172}let v_653: bitstring = catch-fail((empty,empty,empty)) in
        {173}new key_e_654[me_640,them_639]: key;
        {174}let v_655: key = catch-fail(dhexp(key_e_654,g)) in
        {175}let v_656: keypair = catch-fail((if not-caught-fail(v_655) then keypairpack(v_655,key_e_654) else fail-any)) in
        {176}let v_657: bitstring = catch-fail(getpublickey(v_656)) in
        {177}let v_658: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_652))) in
        {178}let v_659: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_652)) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),hash(3-proj-3-tuple(v_658),v_657)) else fail-any) else fail-any)) in
        {179}let v_660: bitstring = catch-fail(symmetricstateunpack(v_659)) in
        {180}let v_661: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_660))) in
        {181}let v_662: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_661),2-proj-2-tuple(v_661),3-proj-3-tuple(v_660),msg_a(me_640,them_639))) in
        {182}let v_663: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_660))) in
        {183}let v_664: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_661))) && success?(1-proj-3-tuple(v_660))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then cipherstatepack(1-proj-2-tuple(v_663),increment_nonce(2-proj-2-tuple(v_661))) else fail-any) else fail-any)) in
        {184}let v_665: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_660)) && success?(1-proj-3-tuple(v_660))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then (if not-caught-fail(v_662) then (if not-caught-fail(v_664) then (v_664,v_662) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {185}let v_666: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_665),2-proj-3-tuple(v_660),3-proj-3-tuple(v_660)))) in
        {186}let v_667: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_665)) && success?(symmetricstatepack(1-proj-2-tuple(v_665),2-proj-3-tuple(v_660),3-proj-3-tuple(v_660)))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then symmetricstatepack(1-proj-3-tuple(v_666),2-proj-3-tuple(v_666),hash(3-proj-3-tuple(v_666),2-proj-2-tuple(v_665))) else fail-any) else fail-any)) in
        {187}let v_668: bitstring = catch-fail((if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-2-tuple(v_665))))) then (if not-caught-fail(v_667) then (v_667,2-proj-2-tuple(v_665)) else fail-any) else fail-any) else fail-any)) in
        {188}let v_669: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_668),2-proj-7-tuple(v_652),v_656,4-proj-7-tuple(v_652),5-proj-7-tuple(v_652),6-proj-7-tuple(v_652),7-proj-7-tuple(v_652))) in
        {189}let v_670: bitstring = catch-fail(concat3(v_657,2-proj-3-tuple(v_653),2-proj-2-tuple(v_668))) in
        {190}let (hs_671: handshakestate,re_672: key,message_a_673: bitstring) = (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-7-tuple(v_652))))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (if not-caught-fail(v_659) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (v_669,5-proj-7-tuple(v_652),v_670) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {191}event SendMsg(me_640,them_639,stage_a,msg_a(me_640,them_639),true);
        {192}insert statestore(me_640,them_639,statepack_b(hs_671));
        {193}out(pub, message_a_673)
    ) | (
        {235}get statestore(=me_640,=them_639,statepack_b(hs_674: handshakestate)) in
        {195}in(pub, message_b_675: bitstring);
        {196}let v_676: bitstring = catch-fail(handshakestateunpack(hs_674)) in
        {197}let v_677: bitstring = catch-fail(deconcat3(message_b_675)) in
        {198}let v_678: bool = catch-fail(true) in
        {199}let v_679: key = catch-fail(1-proj-3-tuple(v_677)) in
        {200}let v_680: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_676))) in
        {201}let v_681: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_676)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then symmetricstatepack(1-proj-3-tuple(v_680),2-proj-3-tuple(v_680),hash(3-proj-3-tuple(v_680),v_679)) else fail-any) else fail-any)) in
        {202}let v_682: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_676))) in
        {203}let v_683: bitstring = catch-fail(symmetricstateunpack(v_681)) in
        {204}let v_684: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_683),(if success?(3-proj-7-tuple(v_676)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_679) else fail-any) else fail-any))) in
        {205}let v_685: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_683),(if success?(3-proj-7-tuple(v_676)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_679) else fail-any) else fail-any))) in
        {206}let v_686: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_683),(if success?(3-proj-7-tuple(v_676)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_679) else fail-any) else fail-any))) in
        {207}let v_687: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_676)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_679) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_683))) then (if not-caught-fail(v_684) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (v_684,v_685,v_686) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let v_688: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_676)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then dhexp(2-proj-2-tuple(v_682),v_679) else fail-any) else fail-any)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_687)) then cipherstatepack(2-proj-3-tuple(v_687),minnonce) else fail-any),1-proj-3-tuple(v_687),3-proj-3-tuple(v_683)) else fail-any) else fail-any) else fail-any)) in
        {209}let v_689: bitstring = catch-fail(symmetricstateunpack(v_688)) in
        {210}let v_690: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_689))) in
        {211}let v_691: aead = catch-fail(decrypt(1-proj-2-tuple(v_690),2-proj-2-tuple(v_690),3-proj-3-tuple(v_689),2-proj-3-tuple(v_677))) in
        {212}let v_692: bitstring = catch-fail(aeadunpack(v_691)) in
        {213}let v_693: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_689))) in
        {214}let v_694: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_690))) && success?(1-proj-3-tuple(v_689))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then cipherstatepack(1-proj-2-tuple(v_693),increment_nonce(2-proj-2-tuple(v_690))) else fail-any) else fail-any)) in
        {215}let v_695: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_677)) && (success?(3-proj-3-tuple(v_689)) && success?(1-proj-3-tuple(v_689)))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-2-tuple(v_690))))) then (if not-caught-fail(v_691) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then (if not-caught-fail(v_694) then (v_694,3-proj-3-tuple(v_692),1-proj-3-tuple(v_692)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {216}let v_696: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_695),2-proj-3-tuple(v_689),3-proj-3-tuple(v_689)))) in
        {217}let v_697: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_677)) && success?(symmetricstatepack(1-proj-3-tuple(v_695),2-proj-3-tuple(v_689),3-proj-3-tuple(v_689)))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then symmetricstatepack(1-proj-3-tuple(v_696),2-proj-3-tuple(v_696),hash(3-proj-3-tuple(v_696),2-proj-3-tuple(v_677))) else fail-any) else fail-any)) in
        {218}let v_698: bitstring = catch-fail((if success?(2-proj-3-tuple(v_677)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if not-caught-fail(v_697) then (v_697,2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_699: key = catch-fail(2-proj-3-tuple(v_698)) in
        {220}let v_700: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_698))) in
        {221}let v_701: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_700))) in
        {222}let v_702: aead = catch-fail(decrypt(1-proj-2-tuple(v_701),2-proj-2-tuple(v_701),3-proj-3-tuple(v_700),3-proj-3-tuple(v_677))) in
        {223}let v_703: bitstring = catch-fail(aeadunpack(v_702)) in
        {224}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_700))) in
        {225}let v_705: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_701))) && success?(1-proj-3-tuple(v_700))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then cipherstatepack(1-proj-2-tuple(v_704),increment_nonce(2-proj-2-tuple(v_701))) else fail-any) else fail-any)) in
        {226}let v_706: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_677)) && (success?(3-proj-3-tuple(v_700)) && success?(1-proj-3-tuple(v_700)))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then (if not-caught-fail(v_702) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if not-caught-fail(v_705) then (v_705,3-proj-3-tuple(v_703),1-proj-3-tuple(v_703)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {227}let v_707: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)))) in
        {228}let v_708: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_677)) && success?(symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then symmetricstatepack(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),hash(3-proj-3-tuple(v_707),3-proj-3-tuple(v_677))) else fail-any) else fail-any)) in
        {229}let v_709: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_677)) && success?(1-proj-3-tuple(v_698))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if not-caught-fail(v_708) then (v_708,2-proj-3-tuple(v_706),3-proj-3-tuple(v_706)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_710: key = catch-fail(dhexp(key_s(them_639),g)) in
        {231}let v_711: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_709),2-proj-7-tuple(v_676),3-proj-7-tuple(v_676),v_699,v_679,6-proj-7-tuple(v_676),7-proj-7-tuple(v_676))) in
        {232}let (hs_712: handshakestate,re_713: key,plaintext_b_714: bitstring,valid_715: bool) = (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-7-tuple(v_676))))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then (if not-caught-fail(v_681) then (if not-caught-fail(v_688) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if not-caught-fail(v_699) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if ((3-proj-3-tuple(v_698) && 3-proj-3-tuple(v_709)) && (v_699 = getpublickey((if not-caught-fail(v_710) then keypairpack(v_710,key_s(them_639)) else fail-any)))) then (if not-caught-fail(v_711) then (v_711,getpublickey(3-proj-7-tuple(v_676)),2-proj-3-tuple(v_709),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {233}event RecvMsg(me_640,them_639,stage_b,plaintext_b_714,valid_715);
        {234}insert statestore(me_640,them_639,statepack_c(hs_712))
    ) | (
        {260}get statestore(=me_640,=them_639,statepack_c(hs_716: handshakestate)) in
        {236}let v_717: bitstring = catch-fail(handshakestateunpack(hs_716)) in
        {237}let v_718: bitstring = catch-fail((empty,empty,empty)) in
        {238}let v_719: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_717))) in
        {239}let v_720: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_717))) in
        {240}let v_721: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_720),(if (success?(4-proj-7-tuple(v_717)) && success?(3-proj-7-tuple(v_717))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_717)) else fail-any) else fail-any))) in
        {241}let v_722: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_720),(if (success?(4-proj-7-tuple(v_717)) && success?(3-proj-7-tuple(v_717))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_717)) else fail-any) else fail-any))) in
        {242}let v_723: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_720),(if (success?(4-proj-7-tuple(v_717)) && success?(3-proj-7-tuple(v_717))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_717)) else fail-any) else fail-any))) in
        {243}let v_724: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_717)) && success?(3-proj-7-tuple(v_717))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_717)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_720))) then (if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (v_721,v_722,v_723) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_725: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_717)) && success?(3-proj-7-tuple(v_717))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_717)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_717))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_724)) then cipherstatepack(2-proj-3-tuple(v_724),minnonce) else fail-any),1-proj-3-tuple(v_724),3-proj-3-tuple(v_720)) else fail-any) else fail-any) else fail-any)) in
        {245}let v_726: bitstring = catch-fail(symmetricstateunpack(v_725)) in
        {246}let v_727: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {247}let v_728: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_727),2-proj-2-tuple(v_727),3-proj-3-tuple(v_726),msg_c(me_640,them_639))) in
        {248}let v_729: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {249}let v_730: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_727))) && success?(1-proj-3-tuple(v_726))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-2-tuple(v_729))))) then cipherstatepack(1-proj-2-tuple(v_729),increment_nonce(2-proj-2-tuple(v_727))) else fail-any) else fail-any)) in
        {250}let v_731: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_726)) && success?(1-proj-3-tuple(v_726))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-2-tuple(v_727))))) then (if not-caught-fail(v_728) then (if not-caught-fail(v_730) then (v_730,v_728) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_732: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_731),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) in
        {252}let v_733: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_731)) && success?(symmetricstatepack(1-proj-2-tuple(v_731),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_732),hash(3-proj-3-tuple(v_732),2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {253}let v_734: bitstring = catch-fail((if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_733) then (v_733,2-proj-2-tuple(v_731)) else fail-any) else fail-any) else fail-any)) in
        {254}let v_735: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_734),2-proj-7-tuple(v_717),3-proj-7-tuple(v_717),4-proj-7-tuple(v_717),5-proj-7-tuple(v_717),6-proj-7-tuple(v_717),7-proj-7-tuple(v_717))) in
        {255}let v_736: bitstring = catch-fail(concat3(1-proj-3-tuple(v_718),2-proj-3-tuple(v_718),2-proj-2-tuple(v_734))) in
        {256}let (hs_737: handshakestate,re_738: key,message_c_739: bitstring) = (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-7-tuple(v_717))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if not-caught-fail(v_725) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then (if not-caught-fail(v_735) then (if not-caught-fail(v_736) then (v_735,5-proj-7-tuple(v_717),v_736) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {257}event SendMsg(me_640,them_639,stage_c,msg_c(me_640,them_639),true);
        {258}insert statestore(me_640,them_639,statepack_d(hs_737));
        {259}out(pub, message_c_739)
    ) | (
        {261}!
        {280}get statestore(=me_640,=them_639,statepack_d(hs_740: handshakestate)) in
        {262}in(pub, message_d_741: bitstring);
        {263}let v_742: bitstring = catch-fail(handshakestateunpack(hs_740)) in
        {264}let v_743: bitstring = catch-fail(deconcat3(message_d_741)) in
        {265}let v_744: bool = catch-fail(true) in
        {266}let v_745: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_742))) in
        {267}let v_746: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_745))) in
        {268}let v_747: aead = catch-fail(decrypt(1-proj-2-tuple(v_746),2-proj-2-tuple(v_746),3-proj-3-tuple(v_745),3-proj-3-tuple(v_743))) in
        {269}let v_748: bitstring = catch-fail(aeadunpack(v_747)) in
        {270}let v_749: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_745))) in
        {271}let v_750: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_746))) && success?(1-proj-3-tuple(v_745))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then cipherstatepack(1-proj-2-tuple(v_749),increment_nonce(2-proj-2-tuple(v_746))) else fail-any) else fail-any)) in
        {272}let v_751: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_743)) && (success?(3-proj-3-tuple(v_745)) && success?(1-proj-3-tuple(v_745)))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then (if not-caught-fail(v_747) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if not-caught-fail(v_750) then (v_750,3-proj-3-tuple(v_748),1-proj-3-tuple(v_748)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let v_752: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_751),2-proj-3-tuple(v_745),3-proj-3-tuple(v_745)))) in
        {274}let v_753: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_743)) && success?(symmetricstatepack(1-proj-3-tuple(v_751),2-proj-3-tuple(v_745),3-proj-3-tuple(v_745)))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then symmetricstatepack(1-proj-3-tuple(v_752),2-proj-3-tuple(v_752),hash(3-proj-3-tuple(v_752),3-proj-3-tuple(v_743))) else fail-any) else fail-any)) in
        {275}let v_754: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_743)) && success?(1-proj-7-tuple(v_742))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if not-caught-fail(v_753) then (v_753,2-proj-3-tuple(v_751),3-proj-3-tuple(v_751)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {276}let v_755: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_754),2-proj-7-tuple(v_742),3-proj-7-tuple(v_742),4-proj-7-tuple(v_742),5-proj-7-tuple(v_742),6-proj-7-tuple(v_742),7-proj-7-tuple(v_742))) in
        {277}let (hs_756: handshakestate,re_757: key,plaintext_d_758: bitstring,valid_759: bool) = (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-7-tuple(v_742))))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then (if not-caught-fail(v_744) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then (if (v_744 && 3-proj-3-tuple(v_754)) then (if not-caught-fail(v_755) then (v_755,getpublickey(3-proj-7-tuple(v_742)),2-proj-3-tuple(v_754),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {278}event RecvMsg(me_640,them_639,stage_d,plaintext_d_758,valid_759);
        {279}insert statestore(me_640,them_639,statepack_e(hs_756))
    ) | (
        {281}!
        {307}get statestore(=me_640,=them_639,statepack_e(hs_760: handshakestate)) in
        {282}let v_761: bitstring = catch-fail(handshakestateunpack(hs_760)) in
        {283}let v_762: bitstring = catch-fail((empty,empty,empty)) in
        {284}let v_763: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_761))) in
        {285}let v_764: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_763))) in
        {286}let v_765: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_764),2-proj-2-tuple(v_764),3-proj-3-tuple(v_763),msg_e(me_640,them_639))) in
        {287}let v_766: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_763))) in
        {288}let v_767: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_764))) && success?(1-proj-3-tuple(v_763))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then cipherstatepack(1-proj-2-tuple(v_766),increment_nonce(2-proj-2-tuple(v_764))) else fail-any) else fail-any)) in
        {289}let v_768: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_763)) && success?(1-proj-3-tuple(v_763))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then (if not-caught-fail(v_765) then (if not-caught-fail(v_767) then (v_767,v_765) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {290}let v_769: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_768),2-proj-3-tuple(v_763),3-proj-3-tuple(v_763)))) in
        {291}let v_770: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_768)) && success?(symmetricstatepack(1-proj-2-tuple(v_768),2-proj-3-tuple(v_763),3-proj-3-tuple(v_763)))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then symmetricstatepack(1-proj-3-tuple(v_769),2-proj-3-tuple(v_769),hash(3-proj-3-tuple(v_769),2-proj-2-tuple(v_768))) else fail-any) else fail-any)) in
        {292}let v_771: bitstring = catch-fail((if success?(1-proj-7-tuple(v_761)) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_770) then (v_770,2-proj-2-tuple(v_768)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_772: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_771),2-proj-7-tuple(v_761),3-proj-7-tuple(v_761),4-proj-7-tuple(v_761),5-proj-7-tuple(v_761),6-proj-7-tuple(v_761),7-proj-7-tuple(v_761))) in
        {294}let v_773: bitstring = catch-fail(concat3(1-proj-3-tuple(v_762),2-proj-3-tuple(v_762),2-proj-2-tuple(v_771))) in
        {295}let v_774: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_771))) in
        {296}let v_775: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_774),zero)) in
        {297}let v_776: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_774),zero)) in
        {298}let v_777: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_774),zero)) in
        {299}let v_778: bitstring = catch-fail((if success?(2-proj-3-tuple(v_774)) then (if not-caught-fail(v_775) then (if not-caught-fail(v_776) then (if not-caught-fail(v_777) then (v_775,v_776,v_777) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_779: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_778)) then cipherstatepack(1-proj-3-tuple(v_778),minnonce) else fail-any)) in
        {301}let v_780: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_778)) then cipherstatepack(2-proj-3-tuple(v_778),minnonce) else fail-any)) in
        {302}let v_781: bitstring = catch-fail((if success?(1-proj-2-tuple(v_771)) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if not-caught-fail(v_779) then (if not-caught-fail(v_780) then (1-proj-2-tuple(v_771),v_779,v_780) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let (hs_782: handshakestate,re_783: key,message_e_784: bitstring,cs1_785: cipherstate,cs2_786: cipherstate) = (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-7-tuple(v_761))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then (if not-caught-fail(v_772) then (if not-caught-fail(v_773) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (v_772,5-proj-7-tuple(v_761),v_773,2-proj-3-tuple(v_781),3-proj-3-tuple(v_781)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {304}event SendMsg(me_640,them_639,stage_e,msg_e(me_640,them_639),true);
        {305}insert statestore(me_640,them_639,statepack_f(hs_782));
        {306}out(pub, message_e_784)
    ) | (
        {308}event LeakS(phase0,me_640);
        {309}out(pub, key_s(me_640))
    ) | (
        {310}phase 1;
        {311}event LeakS(phase1,me_640);
        {312}out(pub, key_s(me_640))
    )
) | (
    {313}let them_787: principal = alice in
    {314}let me_788: principal = bob in
    {315}let s_789: keypair = keypairpack(empty,empty) in
    {316}out(pub, getpublickey(s_789));
    (
        {317}let e_790: keypair = keypairpack(empty,empty) in
        {318}let rs_791: key = empty in
        {319}let re_792: key = empty in
        {320}let v_793: bitstring = catch-fail(hash(somename,empty)) in
        {321}let v_794: key = catch-fail(v_793) in
        {322}let v_795: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {323}let v_796: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_793) then (if not-caught-fail(v_794) then (if not-caught-fail(v_795) then symmetricstatepack(v_795,v_794,v_793) else fail-any) else fail-any) else fail-any))) in
        {324}let v_797: symmetricstate = catch-fail((if success?((if not-caught-fail(v_793) then (if not-caught-fail(v_794) then (if not-caught-fail(v_795) then symmetricstatepack(v_795,v_794,v_793) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then symmetricstatepack(1-proj-3-tuple(v_796),2-proj-3-tuple(v_796),hash(3-proj-3-tuple(v_796),empty)) else fail-any) else fail-any)) in
        {325}let hs_798: handshakestate = (if not-caught-fail(v_797) then handshakestatepack(v_797,s_789,e_790,rs_791,re_792,empty,false) else fail-any) in
        {326}insert statestore(me_788,them_787,statepack_a(hs_798))
    ) | (
        {348}get statestore(=me_788,=them_787,statepack_a(hs_799: handshakestate)) in
        {327}in(pub, message_a_800: bitstring);
        {328}let v_801: bitstring = catch-fail(handshakestateunpack(hs_799)) in
        {329}let v_802: bitstring = catch-fail(deconcat3(message_a_800)) in
        {330}let v_803: bool = catch-fail(true) in
        {331}let v_804: key = catch-fail(1-proj-3-tuple(v_802)) in
        {332}let v_805: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_801))) in
        {333}let v_806: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_801)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then symmetricstatepack(1-proj-3-tuple(v_805),2-proj-3-tuple(v_805),hash(3-proj-3-tuple(v_805),v_804)) else fail-any) else fail-any)) in
        {334}let v_807: bitstring = catch-fail(symmetricstateunpack(v_806)) in
        {335}let v_808: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_807))) in
        {336}let v_809: aead = catch-fail(decrypt(1-proj-2-tuple(v_808),2-proj-2-tuple(v_808),3-proj-3-tuple(v_807),3-proj-3-tuple(v_802))) in
        {337}let v_810: bitstring = catch-fail(aeadunpack(v_809)) in
        {338}let v_811: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_807))) in
        {339}let v_812: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_808))) && success?(1-proj-3-tuple(v_807))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then cipherstatepack(1-proj-2-tuple(v_811),increment_nonce(2-proj-2-tuple(v_808))) else fail-any) else fail-any)) in
        {340}let v_813: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_802)) && (success?(3-proj-3-tuple(v_807)) && success?(1-proj-3-tuple(v_807)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then (if not-caught-fail(v_809) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if not-caught-fail(v_812) then (v_812,3-proj-3-tuple(v_810),1-proj-3-tuple(v_810)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {341}let v_814: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_813),2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)))) in
        {342}let v_815: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_802)) && success?(symmetricstatepack(1-proj-3-tuple(v_813),2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_814),hash(3-proj-3-tuple(v_814),3-proj-3-tuple(v_802))) else fail-any) else fail-any)) in
        {343}let v_816: bitstring = catch-fail((if success?(3-proj-3-tuple(v_802)) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if not-caught-fail(v_815) then (v_815,2-proj-3-tuple(v_813),3-proj-3-tuple(v_813)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {344}let v_817: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_816),2-proj-7-tuple(v_801),3-proj-7-tuple(v_801),4-proj-7-tuple(v_801),v_804,6-proj-7-tuple(v_801),7-proj-7-tuple(v_801))) in
        {345}let (hs_818: handshakestate,re_819: key,plaintext_a: bitstring,valid_820: bool) = (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-7-tuple(v_801))))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if not-caught-fail(v_803) then (if not-caught-fail(v_804) then (if not-caught-fail(v_806) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if (v_803 && 3-proj-3-tuple(v_816)) then (if not-caught-fail(v_817) then (v_817,getpublickey(3-proj-7-tuple(v_801)),2-proj-3-tuple(v_816),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {346}event RecvMsg(me_788,them_787,stage_a,plaintext_a,valid_820);
        {347}insert statestore(me_788,them_787,statepack_b(hs_818))
    ) | (
        {390}get statestore(=me_788,=them_787,statepack_b(hs_821: handshakestate)) in
        {349}let v_822: bitstring = catch-fail(handshakestateunpack(hs_821)) in
        {350}let v_823: bitstring = catch-fail((empty,empty,empty)) in
        {351}new key_e_824[me_788,them_787]: key;
        {352}let v_825: key = catch-fail(dhexp(key_e_824,g)) in
        {353}let v_826: keypair = catch-fail((if not-caught-fail(v_825) then keypairpack(v_825,key_e_824) else fail-any)) in
        {354}let v_827: bitstring = catch-fail(getpublickey(v_826)) in
        {355}let v_828: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_822))) in
        {356}let v_829: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_822)) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_828),hash(3-proj-3-tuple(v_828),v_827)) else fail-any) else fail-any)) in
        {357}let v_830: bitstring = catch-fail(keypairunpack(v_826)) in
        {358}let v_831: bitstring = catch-fail(symmetricstateunpack(v_829)) in
        {359}let v_832: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_831),(if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {360}let v_833: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_831),(if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {361}let v_834: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_831),(if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_822)) else fail-any) else fail-any))) in
        {362}let v_835: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_822)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_831))) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (v_832,v_833,v_834) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {363}let v_836: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_822)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_822)) else fail-any) else fail-any)) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_835)) then cipherstatepack(2-proj-3-tuple(v_835),minnonce) else fail-any),1-proj-3-tuple(v_835),3-proj-3-tuple(v_831)) else fail-any) else fail-any) else fail-any)) in
        {364}let v_837: key = catch-fail(dhexp(key_s(me_788),g)) in
        {365}let v_838: keypair = catch-fail((if not-caught-fail(v_837) then keypairpack(v_837,key_s(me_788)) else fail-any)) in
        {366}let v_839: bitstring = catch-fail(symmetricstateunpack(v_836)) in
        {367}let v_840: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_839))) in
        {368}let v_841: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_840),2-proj-2-tuple(v_840),3-proj-3-tuple(v_839),getpublickey(v_838))) in
        {369}let v_842: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_839))) in
        {370}let v_843: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_840))) && success?(1-proj-3-tuple(v_839))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then cipherstatepack(1-proj-2-tuple(v_842),increment_nonce(2-proj-2-tuple(v_840))) else fail-any) else fail-any)) in
        {371}let v_844: bitstring = catch-fail((if (success?(getpublickey(v_838)) && (success?(3-proj-3-tuple(v_839)) && success?(1-proj-3-tuple(v_839)))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then (if not-caught-fail(v_841) then (if not-caught-fail(v_843) then (v_843,v_841) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_845: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_844),2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)))) in
        {373}let v_846: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_844)) && success?(symmetricstatepack(1-proj-2-tuple(v_844),2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),2-proj-2-tuple(v_844))) else fail-any) else fail-any)) in
        {374}let v_847: bitstring = catch-fail((if success?(getpublickey(v_838)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then (if not-caught-fail(v_846) then (v_846,2-proj-2-tuple(v_844)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_848: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_847))) in
        {376}let v_849: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_848))) in
        {377}let v_850: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_849),2-proj-2-tuple(v_849),3-proj-3-tuple(v_848),msg_b(me_788,them_787))) in
        {378}let v_851: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_848))) in
        {379}let v_852: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_849))) && success?(1-proj-3-tuple(v_848))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then cipherstatepack(1-proj-2-tuple(v_851),increment_nonce(2-proj-2-tuple(v_849))) else fail-any) else fail-any)) in
        {380}let v_853: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_848)) && success?(1-proj-3-tuple(v_848))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-2-tuple(v_849))))) then (if not-caught-fail(v_850) then (if not-caught-fail(v_852) then (v_852,v_850) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_854: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_853),2-proj-3-tuple(v_848),3-proj-3-tuple(v_848)))) in
        {382}let v_855: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_853)) && success?(symmetricstatepack(1-proj-2-tuple(v_853),2-proj-3-tuple(v_848),3-proj-3-tuple(v_848)))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_854),hash(3-proj-3-tuple(v_854),2-proj-2-tuple(v_853))) else fail-any) else fail-any)) in
        {383}let v_856: bitstring = catch-fail((if success?(1-proj-2-tuple(v_847)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then (if not-caught-fail(v_855) then (v_855,2-proj-2-tuple(v_853)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {384}let v_857: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_856),v_838,v_826,4-proj-7-tuple(v_822),5-proj-7-tuple(v_822),6-proj-7-tuple(v_822),7-proj-7-tuple(v_822))) in
        {385}let v_858: bitstring = catch-fail(concat3(v_827,2-proj-2-tuple(v_847),2-proj-2-tuple(v_856))) in
        {386}let (hs_859: handshakestate,re_860: key,message_b_861: bitstring) = (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-7-tuple(v_822))))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_826) then (if not-caught-fail(v_827) then (if not-caught-fail(v_829) then (if not-caught-fail(v_836) then (if not-caught-fail(v_838) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then (if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (v_857,5-proj-7-tuple(v_822),v_858) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {387}event SendMsg(me_788,them_787,stage_b,msg_b(me_788,them_787),true);
        {388}insert statestore(me_788,them_787,statepack_c(hs_859));
        {389}out(pub, message_b_861)
    ) | (
        {416}get statestore(=me_788,=them_787,statepack_c(hs_862: handshakestate)) in
        {391}in(pub, message_c_863: bitstring);
        {392}let v_864: bitstring = catch-fail(handshakestateunpack(hs_862)) in
        {393}let v_865: bitstring = catch-fail(deconcat3(message_c_863)) in
        {394}let v_866: bool = catch-fail(true) in
        {395}let v_867: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_864))) in
        {396}let v_868: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_864))) in
        {397}let v_869: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_868),(if (success?(5-proj-7-tuple(v_864)) && success?(2-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {398}let v_870: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_868),(if (success?(5-proj-7-tuple(v_864)) && success?(2-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {399}let v_871: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_868),(if (success?(5-proj-7-tuple(v_864)) && success?(2-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {400}let v_872: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_864)) && success?(2-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_864)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_868))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then (v_869,v_870,v_871) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {401}let v_873: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_864)) && success?(2-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),5-proj-7-tuple(v_864)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_864))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_872)) then cipherstatepack(2-proj-3-tuple(v_872),minnonce) else fail-any),1-proj-3-tuple(v_872),3-proj-3-tuple(v_868)) else fail-any) else fail-any) else fail-any)) in
        {402}let v_874: bitstring = catch-fail(symmetricstateunpack(v_873)) in
        {403}let v_875: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {404}let v_876: aead = catch-fail(decrypt(1-proj-2-tuple(v_875),2-proj-2-tuple(v_875),3-proj-3-tuple(v_874),3-proj-3-tuple(v_865))) in
        {405}let v_877: bitstring = catch-fail(aeadunpack(v_876)) in
        {406}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {407}let v_879: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_875))) && success?(1-proj-3-tuple(v_874))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then cipherstatepack(1-proj-2-tuple(v_878),increment_nonce(2-proj-2-tuple(v_875))) else fail-any) else fail-any)) in
        {408}let v_880: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_865)) && (success?(3-proj-3-tuple(v_874)) && success?(1-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-2-tuple(v_875))))) then (if not-caught-fail(v_876) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if not-caught-fail(v_879) then (v_879,3-proj-3-tuple(v_877),1-proj-3-tuple(v_877)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {409}let v_881: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) in
        {410}let v_882: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_865)) && success?(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack(1-proj-3-tuple(v_881),2-proj-3-tuple(v_881),hash(3-proj-3-tuple(v_881),3-proj-3-tuple(v_865))) else fail-any) else fail-any)) in
        {411}let v_883: bitstring = catch-fail((if success?(3-proj-3-tuple(v_865)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (v_882,2-proj-3-tuple(v_880),3-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {412}let v_884: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_883),2-proj-7-tuple(v_864),3-proj-7-tuple(v_864),4-proj-7-tuple(v_864),5-proj-7-tuple(v_864),6-proj-7-tuple(v_864),7-proj-7-tuple(v_864))) in
        {413}let (hs_885: handshakestate,re_886: key,plaintext_c: bitstring,valid_887: bool) = (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-7-tuple(v_864))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_866) then (if not-caught-fail(v_873) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if (v_866 && 3-proj-3-tuple(v_883)) then (if not-caught-fail(v_884) then (v_884,getpublickey(3-proj-7-tuple(v_864)),2-proj-3-tuple(v_883),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {414}event RecvMsg(me_788,them_787,stage_c,plaintext_c,valid_887);
        {415}insert statestore(me_788,them_787,statepack_d(hs_885))
    ) | (
        {417}!
        {435}get statestore(=me_788,=them_787,statepack_d(hs_888: handshakestate)) in
        {418}let v_889: bitstring = catch-fail(handshakestateunpack(hs_888)) in
        {419}let v_890: bitstring = catch-fail((empty,empty,empty)) in
        {420}let v_891: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_889))) in
        {421}let v_892: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {422}let v_893: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_892),2-proj-2-tuple(v_892),3-proj-3-tuple(v_891),msg_d(me_788,them_787))) in
        {423}let v_894: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {424}let v_895: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_892))) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then cipherstatepack(1-proj-2-tuple(v_894),increment_nonce(2-proj-2-tuple(v_892))) else fail-any) else fail-any)) in
        {425}let v_896: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_891)) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_895) then (v_895,v_893) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {426}let v_897: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) in
        {427}let v_898: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_896)) && success?(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_897),hash(3-proj-3-tuple(v_897),2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {428}let v_899: bitstring = catch-fail((if success?(1-proj-7-tuple(v_889)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_898) then (v_898,2-proj-2-tuple(v_896)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {429}let v_900: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_899),2-proj-7-tuple(v_889),3-proj-7-tuple(v_889),4-proj-7-tuple(v_889),5-proj-7-tuple(v_889),6-proj-7-tuple(v_889),7-proj-7-tuple(v_889))) in
        {430}let v_901: bitstring = catch-fail(concat3(1-proj-3-tuple(v_890),2-proj-3-tuple(v_890),2-proj-2-tuple(v_899))) in
        {431}let (hs_902: handshakestate,re_903: key,message_d_904: bitstring) = (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-7-tuple(v_889))))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (v_900,5-proj-7-tuple(v_889),v_901) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {432}event SendMsg(me_788,them_787,stage_d,msg_d(me_788,them_787),true);
        {433}insert statestore(me_788,them_787,statepack_e(hs_902));
        {434}out(pub, message_d_904)
    ) | (
        {436}!
        {464}get statestore(=me_788,=them_787,statepack_e(hs_905: handshakestate)) in
        {437}in(pub, message_e_906: bitstring);
        {438}let v_907: bitstring = catch-fail(handshakestateunpack(hs_905)) in
        {439}let v_908: bitstring = catch-fail(deconcat3(message_e_906)) in
        {440}let v_909: bool = catch-fail(true) in
        {441}let v_910: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
        {442}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {443}let v_912: aead = catch-fail(decrypt(1-proj-2-tuple(v_911),2-proj-2-tuple(v_911),3-proj-3-tuple(v_910),3-proj-3-tuple(v_908))) in
        {444}let v_913: bitstring = catch-fail(aeadunpack(v_912)) in
        {445}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {446}let v_915: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_911))) && success?(1-proj-3-tuple(v_910))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then cipherstatepack(1-proj-2-tuple(v_914),increment_nonce(2-proj-2-tuple(v_911))) else fail-any) else fail-any)) in
        {447}let v_916: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_910)) && success?(1-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if not-caught-fail(v_915) then (v_915,3-proj-3-tuple(v_913),1-proj-3-tuple(v_913)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {448}let v_917: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) in
        {449}let v_918: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then symmetricstatepack(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),hash(3-proj-3-tuple(v_917),3-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {450}let v_919: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(1-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {451}let v_920: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_919),2-proj-7-tuple(v_907),3-proj-7-tuple(v_907),4-proj-7-tuple(v_907),5-proj-7-tuple(v_907),6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
        {452}let v_921: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_919))) in
        {453}let v_922: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_921),zero)) in
        {454}let v_923: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_921),zero)) in
        {455}let v_924: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_921),zero)) in
        {456}let v_925: bitstring = catch-fail((if success?(2-proj-3-tuple(v_921)) then (if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (v_922,v_923,v_924) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {457}let v_926: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_925)) then cipherstatepack(1-proj-3-tuple(v_925),minnonce) else fail-any)) in
        {458}let v_927: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_925)) then cipherstatepack(2-proj-3-tuple(v_925),minnonce) else fail-any)) in
        {459}let v_928: bitstring = catch-fail((if success?(1-proj-3-tuple(v_919)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if not-caught-fail(v_926) then (if not-caught-fail(v_927) then (1-proj-3-tuple(v_919),v_926,v_927) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let (hs_929: handshakestate,re_930: key,plaintext_e: bitstring,valid_931: bool,cs1_932: cipherstate,cs2_933: cipherstate) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_909) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if (v_909 && 3-proj-3-tuple(v_919)) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (v_920,getpublickey(3-proj-7-tuple(v_907)),2-proj-3-tuple(v_919),true,2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {461}event RecvMsg(me_788,them_787,stage_e,plaintext_e,valid_931);
        {462}insert statestore(me_788,them_787,statepack_f(hs_929));
        {463}event RecvEnd(valid_931)
    ) | (
        {465}event LeakS(phase0,me_788);
        {466}out(pub, key_s(me_788))
    ) | (
        {467}phase 1;
        {468}event LeakS(phase1,me_788);
        {469}out(pub, key_s(me_788))
    )
) | (
    {470}let them_934: principal = charlie in
    {471}let me_935: principal = bob in
    {472}let s_936: keypair = keypairpack(empty,empty) in
    {473}out(pub, getpublickey(s_936));
    (
        {474}let e_937: keypair = keypairpack(empty,empty) in
        {475}let rs_938: key = empty in
        {476}let re_939: key = empty in
        {477}let v_940: bitstring = catch-fail(hash(somename,empty)) in
        {478}let v_941: key = catch-fail(v_940) in
        {479}let v_942: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {480}let v_943: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then symmetricstatepack(v_942,v_941,v_940) else fail-any) else fail-any) else fail-any))) in
        {481}let v_944: symmetricstate = catch-fail((if success?((if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then symmetricstatepack(v_942,v_941,v_940) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then symmetricstatepack(1-proj-3-tuple(v_943),2-proj-3-tuple(v_943),hash(3-proj-3-tuple(v_943),empty)) else fail-any) else fail-any)) in
        {482}let hs_945: handshakestate = (if not-caught-fail(v_944) then handshakestatepack(v_944,s_936,e_937,rs_938,re_939,empty,false) else fail-any) in
        {483}insert statestore(me_935,them_934,statepack_a(hs_945))
    ) | (
        {505}get statestore(=me_935,=them_934,statepack_a(hs_946: handshakestate)) in
        {484}in(pub, message_a_947: bitstring);
        {485}let v_948: bitstring = catch-fail(handshakestateunpack(hs_946)) in
        {486}let v_949: bitstring = catch-fail(deconcat3(message_a_947)) in
        {487}let v_950: bool = catch-fail(true) in
        {488}let v_951: key = catch-fail(1-proj-3-tuple(v_949)) in
        {489}let v_952: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_948))) in
        {490}let v_953: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_948)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_952),hash(3-proj-3-tuple(v_952),v_951)) else fail-any) else fail-any)) in
        {491}let v_954: bitstring = catch-fail(symmetricstateunpack(v_953)) in
        {492}let v_955: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_954))) in
        {493}let v_956: aead = catch-fail(decrypt(1-proj-2-tuple(v_955),2-proj-2-tuple(v_955),3-proj-3-tuple(v_954),3-proj-3-tuple(v_949))) in
        {494}let v_957: bitstring = catch-fail(aeadunpack(v_956)) in
        {495}let v_958: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_954))) in
        {496}let v_959: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_955))) && success?(1-proj-3-tuple(v_954))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then cipherstatepack(1-proj-2-tuple(v_958),increment_nonce(2-proj-2-tuple(v_955))) else fail-any) else fail-any)) in
        {497}let v_960: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_949)) && (success?(3-proj-3-tuple(v_954)) && success?(1-proj-3-tuple(v_954)))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then (if not-caught-fail(v_956) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if not-caught-fail(v_959) then (v_959,3-proj-3-tuple(v_957),1-proj-3-tuple(v_957)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_961: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_960),2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)))) in
        {499}let v_962: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_949)) && success?(symmetricstatepack(1-proj-3-tuple(v_960),2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_961),hash(3-proj-3-tuple(v_961),3-proj-3-tuple(v_949))) else fail-any) else fail-any)) in
        {500}let v_963: bitstring = catch-fail((if success?(3-proj-3-tuple(v_949)) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if not-caught-fail(v_962) then (v_962,2-proj-3-tuple(v_960),3-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_964: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_963),2-proj-7-tuple(v_948),3-proj-7-tuple(v_948),4-proj-7-tuple(v_948),v_951,6-proj-7-tuple(v_948),7-proj-7-tuple(v_948))) in
        {502}let (hs_965: handshakestate,re_966: key,plaintext_a_967: bitstring,valid_968: bool) = (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-7-tuple(v_948))))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then (if not-caught-fail(v_953) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if (v_950 && 3-proj-3-tuple(v_963)) then (if not-caught-fail(v_964) then (v_964,getpublickey(3-proj-7-tuple(v_948)),2-proj-3-tuple(v_963),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {503}event RecvMsg(me_935,them_934,stage_a,plaintext_a_967,valid_968);
        {504}insert statestore(me_935,them_934,statepack_b(hs_965))
    ) | (
        {547}get statestore(=me_935,=them_934,statepack_b(hs_969: handshakestate)) in
        {506}let v_970: bitstring = catch-fail(handshakestateunpack(hs_969)) in
        {507}let v_971: bitstring = catch-fail((empty,empty,empty)) in
        {508}new key_e_972[me_935,them_934]: key;
        {509}let v_973: key = catch-fail(dhexp(key_e_972,g)) in
        {510}let v_974: keypair = catch-fail((if not-caught-fail(v_973) then keypairpack(v_973,key_e_972) else fail-any)) in
        {511}let v_975: bitstring = catch-fail(getpublickey(v_974)) in
        {512}let v_976: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_970))) in
        {513}let v_977: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_970)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then symmetricstatepack(1-proj-3-tuple(v_976),2-proj-3-tuple(v_976),hash(3-proj-3-tuple(v_976),v_975)) else fail-any) else fail-any)) in
        {514}let v_978: bitstring = catch-fail(keypairunpack(v_974)) in
        {515}let v_979: bitstring = catch-fail(symmetricstateunpack(v_977)) in
        {516}let v_980: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_970)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_970)) else fail-any) else fail-any))) in
        {517}let v_981: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_970)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_970)) else fail-any) else fail-any))) in
        {518}let v_982: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_970)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_970)) else fail-any) else fail-any))) in
        {519}let v_983: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_970)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_970)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_979))) then (if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (if not-caught-fail(v_982) then (v_980,v_981,v_982) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {520}let v_984: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_970)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_970)) else fail-any) else fail-any)) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_983)) then cipherstatepack(2-proj-3-tuple(v_983),minnonce) else fail-any),1-proj-3-tuple(v_983),3-proj-3-tuple(v_979)) else fail-any) else fail-any) else fail-any)) in
        {521}let v_985: key = catch-fail(dhexp(key_s(me_935),g)) in
        {522}let v_986: keypair = catch-fail((if not-caught-fail(v_985) then keypairpack(v_985,key_s(me_935)) else fail-any)) in
        {523}let v_987: bitstring = catch-fail(symmetricstateunpack(v_984)) in
        {524}let v_988: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_987))) in
        {525}let v_989: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_988),2-proj-2-tuple(v_988),3-proj-3-tuple(v_987),getpublickey(v_986))) in
        {526}let v_990: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_987))) in
        {527}let v_991: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_988))) && success?(1-proj-3-tuple(v_987))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then cipherstatepack(1-proj-2-tuple(v_990),increment_nonce(2-proj-2-tuple(v_988))) else fail-any) else fail-any)) in
        {528}let v_992: bitstring = catch-fail((if (success?(getpublickey(v_986)) && (success?(3-proj-3-tuple(v_987)) && success?(1-proj-3-tuple(v_987)))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then (if not-caught-fail(v_989) then (if not-caught-fail(v_991) then (v_991,v_989) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {529}let v_993: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_992),2-proj-3-tuple(v_987),3-proj-3-tuple(v_987)))) in
        {530}let v_994: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_992)) && success?(symmetricstatepack(1-proj-2-tuple(v_992),2-proj-3-tuple(v_987),3-proj-3-tuple(v_987)))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then symmetricstatepack(1-proj-3-tuple(v_993),2-proj-3-tuple(v_993),hash(3-proj-3-tuple(v_993),2-proj-2-tuple(v_992))) else fail-any) else fail-any)) in
        {531}let v_995: bitstring = catch-fail((if success?(getpublickey(v_986)) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-3-tuple(v_987))))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then (if not-caught-fail(v_994) then (v_994,2-proj-2-tuple(v_992)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_996: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_995))) in
        {533}let v_997: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {534}let v_998: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_997),2-proj-2-tuple(v_997),3-proj-3-tuple(v_996),msg_b(me_935,them_934))) in
        {535}let v_999: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {536}let v_1000: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_997))) && success?(1-proj-3-tuple(v_996))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then cipherstatepack(1-proj-2-tuple(v_999),increment_nonce(2-proj-2-tuple(v_997))) else fail-any) else fail-any)) in
        {537}let v_1001: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_996)) && success?(1-proj-3-tuple(v_996))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then (if not-caught-fail(v_998) then (if not-caught-fail(v_1000) then (v_1000,v_998) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {538}let v_1002: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1001),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) in
        {539}let v_1003: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1001)) && success?(symmetricstatepack(1-proj-2-tuple(v_1001),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_1002),hash(3-proj-3-tuple(v_1002),2-proj-2-tuple(v_1001))) else fail-any) else fail-any)) in
        {540}let v_1004: bitstring = catch-fail((if success?(1-proj-2-tuple(v_995)) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then (if not-caught-fail(v_1003) then (v_1003,2-proj-2-tuple(v_1001)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {541}let v_1005: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1004),v_986,v_974,4-proj-7-tuple(v_970),5-proj-7-tuple(v_970),6-proj-7-tuple(v_970),7-proj-7-tuple(v_970))) in
        {542}let v_1006: bitstring = catch-fail(concat3(v_975,2-proj-2-tuple(v_995),2-proj-2-tuple(v_1004))) in
        {543}let (hs_1007: handshakestate,re_1008: key,message_b_1009: bitstring) = (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-7-tuple(v_970))))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then (if not-caught-fail(v_974) then (if not-caught-fail(v_975) then (if not-caught-fail(v_977) then (if not-caught-fail(v_984) then (if not-caught-fail(v_986) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-2-tuple(v_995))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1006) then (v_1005,5-proj-7-tuple(v_970),v_1006) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {544}event SendMsg(me_935,them_934,stage_b,msg_b(me_935,them_934),true);
        {545}insert statestore(me_935,them_934,statepack_c(hs_1007));
        {546}out(pub, message_b_1009)
    ) | (
        {573}get statestore(=me_935,=them_934,statepack_c(hs_1010: handshakestate)) in
        {548}in(pub, message_c_1011: bitstring);
        {549}let v_1012: bitstring = catch-fail(handshakestateunpack(hs_1010)) in
        {550}let v_1013: bitstring = catch-fail(deconcat3(message_c_1011)) in
        {551}let v_1014: bool = catch-fail(true) in
        {552}let v_1015: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1012))) in
        {553}let v_1016: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1012))) in
        {554}let v_1017: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1016),(if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any))) in
        {555}let v_1018: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1016),(if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any))) in
        {556}let v_1019: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1016),(if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any))) in
        {557}let v_1020: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1016))) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then (v_1017,v_1018,v_1019) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1021: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-3-tuple(v_1016))))) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1020)) then cipherstatepack(2-proj-3-tuple(v_1020),minnonce) else fail-any),1-proj-3-tuple(v_1020),3-proj-3-tuple(v_1016)) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1022: bitstring = catch-fail(symmetricstateunpack(v_1021)) in
        {560}let v_1023: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1022))) in
        {561}let v_1024: aead = catch-fail(decrypt(1-proj-2-tuple(v_1023),2-proj-2-tuple(v_1023),3-proj-3-tuple(v_1022),3-proj-3-tuple(v_1013))) in
        {562}let v_1025: bitstring = catch-fail(aeadunpack(v_1024)) in
        {563}let v_1026: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1022))) in
        {564}let v_1027: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1023))) && success?(1-proj-3-tuple(v_1022))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-2-tuple(v_1026))))) then cipherstatepack(1-proj-2-tuple(v_1026),increment_nonce(2-proj-2-tuple(v_1023))) else fail-any) else fail-any)) in
        {565}let v_1028: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1013)) && (success?(3-proj-3-tuple(v_1022)) && success?(1-proj-3-tuple(v_1022)))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then (if not-caught-fail(v_1024) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then (if not-caught-fail(v_1027) then (v_1027,3-proj-3-tuple(v_1025),1-proj-3-tuple(v_1025)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1029: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1022),3-proj-3-tuple(v_1022)))) in
        {567}let v_1030: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1013)) && success?(symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1022),3-proj-3-tuple(v_1022)))) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-3-tuple(v_1029))))) then symmetricstatepack(1-proj-3-tuple(v_1029),2-proj-3-tuple(v_1029),hash(3-proj-3-tuple(v_1029),3-proj-3-tuple(v_1013))) else fail-any) else fail-any)) in
        {568}let v_1031: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1013)) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if not-caught-fail(v_1030) then (v_1030,2-proj-3-tuple(v_1028),3-proj-3-tuple(v_1028)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {569}let v_1032: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1031),2-proj-7-tuple(v_1012),3-proj-7-tuple(v_1012),4-proj-7-tuple(v_1012),5-proj-7-tuple(v_1012),6-proj-7-tuple(v_1012),7-proj-7-tuple(v_1012))) in
        {570}let (hs_1033: handshakestate,re_1034: key,plaintext_c_1035: bitstring,valid_1036: bool) = (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-7-tuple(v_1012))))) then (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-3-tuple(v_1013))))) then (if not-caught-fail(v_1014) then (if not-caught-fail(v_1021) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then (if (v_1014 && 3-proj-3-tuple(v_1031)) then (if not-caught-fail(v_1032) then (v_1032,getpublickey(3-proj-7-tuple(v_1012)),2-proj-3-tuple(v_1031),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {571}event RecvMsg(me_935,them_934,stage_c,plaintext_c_1035,valid_1036);
        {572}insert statestore(me_935,them_934,statepack_d(hs_1033))
    ) | (
        {574}!
        {592}get statestore(=me_935,=them_934,statepack_d(hs_1037: handshakestate)) in
        {575}let v_1038: bitstring = catch-fail(handshakestateunpack(hs_1037)) in
        {576}let v_1039: bitstring = catch-fail((empty,empty,empty)) in
        {577}let v_1040: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1038))) in
        {578}let v_1041: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1040))) in
        {579}let v_1042: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1041),2-proj-2-tuple(v_1041),3-proj-3-tuple(v_1040),msg_d(me_935,them_934))) in
        {580}let v_1043: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1040))) in
        {581}let v_1044: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1041))) && success?(1-proj-3-tuple(v_1040))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then cipherstatepack(1-proj-2-tuple(v_1043),increment_nonce(2-proj-2-tuple(v_1041))) else fail-any) else fail-any)) in
        {582}let v_1045: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1040)) && success?(1-proj-3-tuple(v_1040))) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-2-tuple(v_1041))))) then (if not-caught-fail(v_1042) then (if not-caught-fail(v_1044) then (v_1044,v_1042) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {583}let v_1046: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1045),2-proj-3-tuple(v_1040),3-proj-3-tuple(v_1040)))) in
        {584}let v_1047: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1045)) && success?(symmetricstatepack(1-proj-2-tuple(v_1045),2-proj-3-tuple(v_1040),3-proj-3-tuple(v_1040)))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then symmetricstatepack(1-proj-3-tuple(v_1046),2-proj-3-tuple(v_1046),hash(3-proj-3-tuple(v_1046),2-proj-2-tuple(v_1045))) else fail-any) else fail-any)) in
        {585}let v_1048: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1038)) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then (if not-caught-fail(v_1047) then (v_1047,2-proj-2-tuple(v_1045)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {586}let v_1049: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1048),2-proj-7-tuple(v_1038),3-proj-7-tuple(v_1038),4-proj-7-tuple(v_1038),5-proj-7-tuple(v_1038),6-proj-7-tuple(v_1038),7-proj-7-tuple(v_1038))) in
        {587}let v_1050: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1039),2-proj-2-tuple(v_1048))) in
        {588}let (hs_1051: handshakestate,re_1052: key,message_d_1053: bitstring) = (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-7-tuple(v_1038))))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-2-tuple(v_1048))))) then (if not-caught-fail(v_1049) then (if not-caught-fail(v_1050) then (v_1049,5-proj-7-tuple(v_1038),v_1050) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {589}event SendMsg(me_935,them_934,stage_d,msg_d(me_935,them_934),true);
        {590}insert statestore(me_935,them_934,statepack_e(hs_1051));
        {591}out(pub, message_d_1053)
    ) | (
        {593}!
        {621}get statestore(=me_935,=them_934,statepack_e(hs_1054: handshakestate)) in
        {594}in(pub, message_e_1055: bitstring);
        {595}let v_1056: bitstring = catch-fail(handshakestateunpack(hs_1054)) in
        {596}let v_1057: bitstring = catch-fail(deconcat3(message_e_1055)) in
        {597}let v_1058: bool = catch-fail(true) in
        {598}let v_1059: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1056))) in
        {599}let v_1060: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1059))) in
        {600}let v_1061: aead = catch-fail(decrypt(1-proj-2-tuple(v_1060),2-proj-2-tuple(v_1060),3-proj-3-tuple(v_1059),3-proj-3-tuple(v_1057))) in
        {601}let v_1062: bitstring = catch-fail(aeadunpack(v_1061)) in
        {602}let v_1063: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1059))) in
        {603}let v_1064: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1060))) && success?(1-proj-3-tuple(v_1059))) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then cipherstatepack(1-proj-2-tuple(v_1063),increment_nonce(2-proj-2-tuple(v_1060))) else fail-any) else fail-any)) in
        {604}let v_1065: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1057)) && (success?(3-proj-3-tuple(v_1059)) && success?(1-proj-3-tuple(v_1059)))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then (if not-caught-fail(v_1061) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-3-tuple(v_1062))))) then (if not-caught-fail(v_1064) then (v_1064,3-proj-3-tuple(v_1062),1-proj-3-tuple(v_1062)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1066: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1065),2-proj-3-tuple(v_1059),3-proj-3-tuple(v_1059)))) in
        {606}let v_1067: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1057)) && success?(symmetricstatepack(1-proj-3-tuple(v_1065),2-proj-3-tuple(v_1059),3-proj-3-tuple(v_1059)))) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then symmetricstatepack(1-proj-3-tuple(v_1066),2-proj-3-tuple(v_1066),hash(3-proj-3-tuple(v_1066),3-proj-3-tuple(v_1057))) else fail-any) else fail-any)) in
        {607}let v_1068: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1057)) && success?(1-proj-7-tuple(v_1056))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then (if not-caught-fail(v_1067) then (v_1067,2-proj-3-tuple(v_1065),3-proj-3-tuple(v_1065)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1069: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1068),2-proj-7-tuple(v_1056),3-proj-7-tuple(v_1056),4-proj-7-tuple(v_1056),5-proj-7-tuple(v_1056),6-proj-7-tuple(v_1056),7-proj-7-tuple(v_1056))) in
        {609}let v_1070: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1068))) in
        {610}let v_1071: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1070),zero)) in
        {611}let v_1072: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1070),zero)) in
        {612}let v_1073: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1070),zero)) in
        {613}let v_1074: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1070)) then (if not-caught-fail(v_1071) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1073) then (v_1071,v_1072,v_1073) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {614}let v_1075: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1074)) then cipherstatepack(1-proj-3-tuple(v_1074),minnonce) else fail-any)) in
        {615}let v_1076: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1074)) then cipherstatepack(2-proj-3-tuple(v_1074),minnonce) else fail-any)) in
        {616}let v_1077: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1068)) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then (if not-caught-fail(v_1075) then (if not-caught-fail(v_1076) then (1-proj-3-tuple(v_1068),v_1075,v_1076) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {617}let (hs_1078: handshakestate,re_1079: key,plaintext_e_1080: bitstring,valid_1081: bool,cs1_1082: cipherstate,cs2_1083: cipherstate) = (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-7-tuple(v_1056))))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then (if not-caught-fail(v_1058) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (if (v_1058 && 3-proj-3-tuple(v_1068)) then (if not-caught-fail(v_1069) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (v_1069,getpublickey(3-proj-7-tuple(v_1056)),2-proj-3-tuple(v_1068),true,2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {618}event RecvMsg(me_935,them_934,stage_e,plaintext_e_1080,valid_1081);
        {619}insert statestore(me_935,them_934,statepack_f(hs_1078));
        {620}event RecvEnd(valid_1081)
    ) | (
        {622}event LeakS(phase0,me_935);
        {623}out(pub, key_s(me_935))
    ) | (
        {624}phase 1;
        {625}event LeakS(phase1,me_935);
        {626}out(pub, key_s(me_935))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1164,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1164,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1164,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1164,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1164,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1164,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1164,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1164,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1164,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1164,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 146 rules in the queue.
400 rules inserted. The rule base contains 391 rules. 84 rules in the queue.
600 rules inserted. The rule base contains 569 rules. 72 rules in the queue.
800 rules inserted. The rule base contains 745 rules. 174 rules in the queue.
1000 rules inserted. The rule base contains 895 rules. 200 rules in the queue.
1200 rules inserted. The rule base contains 1053 rules. 209 rules in the queue.
1400 rules inserted. The rule base contains 1225 rules. 244 rules in the queue.
1600 rules inserted. The rule base contains 1379 rules. 252 rules in the queue.
1800 rules inserted. The rule base contains 1522 rules. 245 rules in the queue.
2000 rules inserted. The rule base contains 1675 rules. 261 rules in the queue.
2200 rules inserted. The rule base contains 1803 rules. 276 rules in the queue.
2400 rules inserted. The rule base contains 1904 rules. 257 rules in the queue.
2600 rules inserted. The rule base contains 2008 rules. 257 rules in the queue.
2800 rules inserted. The rule base contains 2083 rules. 239 rules in the queue.
3000 rules inserted. The rule base contains 2179 rules. 215 rules in the queue.
3200 rules inserted. The rule base contains 2256 rules. 204 rules in the queue.
3400 rules inserted. The rule base contains 2344 rules. 175 rules in the queue.
3600 rules inserted. The rule base contains 2447 rules. 187 rules in the queue.
3800 rules inserted. The rule base contains 2580 rules. 184 rules in the queue.
4000 rules inserted. The rule base contains 2757 rules. 217 rules in the queue.
4200 rules inserted. The rule base contains 2908 rules. 225 rules in the queue.
4400 rules inserted. The rule base contains 3014 rules. 193 rules in the queue.
4600 rules inserted. The rule base contains 3146 rules. 181 rules in the queue.
4800 rules inserted. The rule base contains 3272 rules. 180 rules in the queue.
5000 rules inserted. The rule base contains 3402 rules. 206 rules in the queue.
5200 rules inserted. The rule base contains 3520 rules. 168 rules in the queue.
5400 rules inserted. The rule base contains 3631 rules. 123 rules in the queue.
5600 rules inserted. The rule base contains 3737 rules. 122 rules in the queue.
5800 rules inserted. The rule base contains 3856 rules. 68 rules in the queue.
6000 rules inserted. The rule base contains 3893 rules. 21 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_42288342 = key_e_654[me_640 = alice,them_639 = charlie,!1 = @sid_42288324]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {326}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {194}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {191}.
So the message concat3(dhexp(key_e_42288342,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_42288342,g)),msg_a(alice,charlie))) may be sent on channel pub at output {193}.
mess(pub,concat3(dhexp(key_e_42288342,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_42288342,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {348}.
The message concat3(dhexp(key_e_42288342,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_42288342,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {327}.
We have dhexp(key_e_42288342,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {346}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1164,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1164,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1164,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1164,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_42288380 = key_e_654[me_640 = alice,them_639 = charlie,!1 = @sid_42288362]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {326}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {194}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {191}.
So the message concat3(dhexp(key_e_42288380,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_42288380,g)),msg_a(alice,charlie))) may be sent on channel pub at output {193}.
mess(pub,concat3(dhexp(key_e_42288380,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_42288380,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {348}.
The message concat3(dhexp(key_e_42288380,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_42288380,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {327}.
We have dhexp(key_e_42288380,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {346}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_42288412 = key_e_654[me_640 = alice,them_639 = charlie,!1 = @sid_42288394]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {326}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {194}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {191}.
So the message concat3(dhexp(key_e_42288412,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_42288412,g)),msg_a(alice,charlie))) may be sent on channel pub at output {193}.
mess(pub,concat3(dhexp(key_e_42288412,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_42288412,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {348}.
The message concat3(dhexp(key_e_42288412,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_42288412,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {327}.
We have dhexp(key_e_42288412,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {346}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_42288462 = key_e[me = alice,them = bob,!1 = @sid_42288448]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42288462,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42288462,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_42288462,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_42288462,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_42288462,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_42288462,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_42288462,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_42288462,g).
attacker(dhexp(key_42288462,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_42288462,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288462,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_42288512 = key_e[me = alice,them = bob,!1 = @sid_42288498]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42288512,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42288512,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_42288512,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_42288512,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_42288512,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_42288512,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_42288512,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_42288512,g).
attacker(dhexp(key_42288512,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_42288512,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288512,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_42288563 = key_e[me = alice,them = bob,!1 = @sid_42288549]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42288563,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42288563,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_42288563,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_42288563,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_42288563,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_42288563,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_42288563,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_42288563,g).
attacker(dhexp(key_42288563,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_42288563,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288563,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_42288613 = key_e[me = alice,them = bob,!1 = @sid_42288599]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42288613,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42288613,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_42288613,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_42288613,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_42288613,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_42288613,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_42288613,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_42288613,g).
attacker(dhexp(key_42288613,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_42288613,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_42288613,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_42288680 = key_e_972[me_935 = bob,them_934 = charlie,!1 = @sid_42288665]
key_42288681 = key_e[me = alice,them = bob,!1 = @sid_42288639]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42288681,g),key_42288681),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42288681,g),key_42288681),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42288681,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42288681,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {505}.
The message concat3(dhexp(key_42288681,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {484}.
We have dhexp(key_42288681,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42288681,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42288681,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42288681,g),empty,false))) that may be in a table by 6 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the message concat3(dhexp(key_e_42288680,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288681,dhexp(key_e_42288680,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))),dhexp(key_e_42288680,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288681,dhexp(key_e_42288680,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))),dhexp(key_e_42288680,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288681,dhexp(key_e_42288680,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))),dhexp(key_e_42288680,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {546}.
mess(pub,concat3(dhexp(key_e_42288680,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288681,dhexp(key_e_42288680,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))),dhexp(key_e_42288680,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288681,dhexp(key_e_42288680,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))),dhexp(key_e_42288680,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288681,dhexp(key_e_42288680,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))),dhexp(key_e_42288680,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42288681,g),key_42288681),empty,empty,empty,true))) that may be in a table by 2 may be read at get {80}.
The message concat3(dhexp(key_e_42288680,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288681,dhexp(key_e_42288680,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))),dhexp(key_e_42288680,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288681,dhexp(key_e_42288680,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))),dhexp(key_e_42288680,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288681,dhexp(key_e_42288680,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288681,g)),msg_a(alice,bob))),dhexp(key_e_42288680,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
We have dhexp(key_e_42288680,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {78}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1164,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1164,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1164,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1164,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_42288754 = key_e_972[me_935 = bob,them_934 = charlie,!1 = @sid_42288739]
key_42288755 = key_e[me = alice,them = bob,!1 = @sid_42288713]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42288755,g),key_42288755),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42288755,g),key_42288755),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42288755,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42288755,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {505}.
The message concat3(dhexp(key_42288755,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {484}.
We have dhexp(key_42288755,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42288755,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42288755,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42288755,g),empty,false))) that may be in a table by 6 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the message concat3(dhexp(key_e_42288754,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288755,dhexp(key_e_42288754,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))),dhexp(key_e_42288754,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288755,dhexp(key_e_42288754,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))),dhexp(key_e_42288754,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288755,dhexp(key_e_42288754,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))),dhexp(key_e_42288754,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {546}.
mess(pub,concat3(dhexp(key_e_42288754,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288755,dhexp(key_e_42288754,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))),dhexp(key_e_42288754,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288755,dhexp(key_e_42288754,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))),dhexp(key_e_42288754,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288755,dhexp(key_e_42288754,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))),dhexp(key_e_42288754,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42288755,g),key_42288755),empty,empty,empty,true))) that may be in a table by 2 may be read at get {80}.
The message concat3(dhexp(key_e_42288754,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288755,dhexp(key_e_42288754,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))),dhexp(key_e_42288754,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288755,dhexp(key_e_42288754,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))),dhexp(key_e_42288754,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288755,dhexp(key_e_42288754,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288755,g)),msg_a(alice,bob))),dhexp(key_e_42288754,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
We have dhexp(key_e_42288754,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {78}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_42288822 = key_e_972[me_935 = bob,them_934 = charlie,!1 = @sid_42288807]
key_42288823 = key_e[me = alice,them = bob,!1 = @sid_42288781]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42288823,g),key_42288823),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42288823,g),key_42288823),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42288823,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42288823,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {505}.
The message concat3(dhexp(key_42288823,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {484}.
We have dhexp(key_42288823,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42288823,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42288823,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42288823,g),empty,false))) that may be in a table by 6 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the message concat3(dhexp(key_e_42288822,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288823,dhexp(key_e_42288822,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))),dhexp(key_e_42288822,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288823,dhexp(key_e_42288822,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))),dhexp(key_e_42288822,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288823,dhexp(key_e_42288822,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))),dhexp(key_e_42288822,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {546}.
mess(pub,concat3(dhexp(key_e_42288822,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288823,dhexp(key_e_42288822,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))),dhexp(key_e_42288822,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288823,dhexp(key_e_42288822,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))),dhexp(key_e_42288822,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288823,dhexp(key_e_42288822,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))),dhexp(key_e_42288822,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42288823,g),key_42288823),empty,empty,empty,true))) that may be in a table by 2 may be read at get {80}.
The message concat3(dhexp(key_e_42288822,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288823,dhexp(key_e_42288822,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))),dhexp(key_e_42288822,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288823,dhexp(key_e_42288822,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))),dhexp(key_e_42288822,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42288823,dhexp(key_e_42288822,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42288823,g)),msg_a(alice,bob))),dhexp(key_e_42288822,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
We have dhexp(key_e_42288822,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {78}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1164,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1164,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1164,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1164,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true))
Abbreviations:
key_e_42289070 = key_e_972[me_935 = bob,them_934 = charlie,!1 = @sid_42289028]
key_42289071 = key_e[me = alice,them = bob,!1 = @sid_42289002]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42289071,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42289071,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {505}.
The message concat3(dhexp(key_42289071,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {484}.
We have dhexp(key_42289071,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289071,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289071,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289071,g),empty,false))) that may be in a table by 6 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the message concat3(dhexp(key_e_42289070,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {546}.
mess(pub,concat3(dhexp(key_e_42289070,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),empty,empty,empty,true))) that may be in a table by 2 may be read at get {80}.
The message concat3(dhexp(key_e_42289070,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),dhexp(key_s(bob),g),dhexp(key_e_42289070,g),empty,true))) may be inserted in a table at insert {79}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),dhexp(key_s(bob),g),dhexp(key_e_42289070,g),empty,true)))).

9. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),dhexp(key_s(bob),g),dhexp(key_e_42289070,g),empty,true))) that may be in a table by 8 may be read at get {105}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {102}.
So the entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),dhexp(key_s(bob),g),dhexp(key_e_42289070,g),empty,true))) may be inserted in a table at insert {103}.
table(statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),dhexp(key_s(bob),g),dhexp(key_e_42289070,g),empty,true)))).

10. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

12. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 11 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42289071,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42289071,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))).

13. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 10 may be read at get {505}.
The message concat3(dhexp(key_42289071,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))) that may be sent on channel pub by 12 may be received at input {484}.
We have dhexp(key_42289071,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289071,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289071,g),empty,false)))).

14. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289071,g),empty,false))) that may be in a table by 13 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the entry statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289070,g),key_e_42289070),empty,dhexp(key_42289071,g),empty,false))) may be inserted in a table at insert {545}.
table(statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289070,g),key_e_42289070),empty,dhexp(key_42289071,g),empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 15 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),empty,empty,empty,true)))).

17. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

18. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

19. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 18 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42289071,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42289071,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))).

20. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 17 may be read at get {505}.
The message concat3(dhexp(key_42289071,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))) that may be sent on channel pub by 19 may be received at input {484}.
We have dhexp(key_42289071,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289071,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289071,g),empty,false)))).

21. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289071,g),empty,false))) that may be in a table by 20 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the message concat3(dhexp(key_e_42289070,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {546}.
mess(pub,concat3(dhexp(key_e_42289070,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

22. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),empty,empty,empty,true))) that may be in a table by 16 may be read at get {80}.
The message concat3(dhexp(key_e_42289070,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 21 may be received at input {40}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),dhexp(key_s(bob),g),dhexp(key_e_42289070,g),empty,true))) may be inserted in a table at insert {79}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),dhexp(key_s(bob),g),dhexp(key_e_42289070,g),empty,true)))).

23. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),dhexp(key_s(bob),g),dhexp(key_e_42289070,g),empty,true))) that may be in a table by 22 may be read at get {105}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {102}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))) may be sent on channel pub at output {104}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))).

24. The entry statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289070,g),key_e_42289070),empty,dhexp(key_42289071,g),empty,false))) that may be in a table by 14 may be read at get {573}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))) that may be sent on channel pub by 23 may be received at input {548}.
So the entry statestore(bob,charlie,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289070,g),key_e_42289070),empty,dhexp(key_42289071,g),empty,false))) may be inserted in a table at insert {572}.
table(statestore(bob,charlie,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289070,g),key_e_42289070),empty,dhexp(key_42289071,g),empty,false)))).

25. The entry statestore(bob,charlie,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289070,g),key_e_42289070),empty,dhexp(key_42289071,g),empty,false))) that may be in a table by 24 may be read at get {592}.
The event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true) may be executed at {589}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))),msg_d(bob,charlie))) may be sent on channel pub at output {591}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))),msg_d(bob,charlie)))).

26. The entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289071,g),key_42289071),dhexp(key_s(bob),g),dhexp(key_e_42289070,g),empty,true))) that may be in a table by 9 may be read at get {125}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289070,dhexp(key_42289071,g))),dhexp(key_s(bob),dhexp(key_42289071,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289071,dhexp(key_e_42289070,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289071,g)),msg_a(alice,bob))),dhexp(key_e_42289070,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))),msg_d(bob,charlie))) that may be sent on channel pub by 25 may be received at input {107}.
So event RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true) may be executed at {123}.
end(RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1164,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1164,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1164,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1164,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true))
Abbreviations:
key_e_42289310 = key_e_972[me_935 = bob,them_934 = charlie,!1 = @sid_42289268]
key_42289311 = key_e[me = alice,them = bob,!1 = @sid_42289242]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42289311,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42289311,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {505}.
The message concat3(dhexp(key_42289311,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {484}.
We have dhexp(key_42289311,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289311,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289311,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289311,g),empty,false))) that may be in a table by 6 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the message concat3(dhexp(key_e_42289310,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {546}.
mess(pub,concat3(dhexp(key_e_42289310,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),empty,empty,empty,true))) that may be in a table by 2 may be read at get {80}.
The message concat3(dhexp(key_e_42289310,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),dhexp(key_s(bob),g),dhexp(key_e_42289310,g),empty,true))) may be inserted in a table at insert {79}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),dhexp(key_s(bob),g),dhexp(key_e_42289310,g),empty,true)))).

9. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),dhexp(key_s(bob),g),dhexp(key_e_42289310,g),empty,true))) that may be in a table by 8 may be read at get {105}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {102}.
So the entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),dhexp(key_s(bob),g),dhexp(key_e_42289310,g),empty,true))) may be inserted in a table at insert {103}.
table(statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),dhexp(key_s(bob),g),dhexp(key_e_42289310,g),empty,true)))).

10. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

12. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 11 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42289311,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42289311,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))).

13. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 10 may be read at get {505}.
The message concat3(dhexp(key_42289311,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))) that may be sent on channel pub by 12 may be received at input {484}.
We have dhexp(key_42289311,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289311,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289311,g),empty,false)))).

14. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289311,g),empty,false))) that may be in a table by 13 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the entry statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289310,g),key_e_42289310),empty,dhexp(key_42289311,g),empty,false))) may be inserted in a table at insert {545}.
table(statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289310,g),key_e_42289310),empty,dhexp(key_42289311,g),empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 15 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),empty,empty,empty,true)))).

17. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

18. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

19. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 18 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42289311,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42289311,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))).

20. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 17 may be read at get {505}.
The message concat3(dhexp(key_42289311,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))) that may be sent on channel pub by 19 may be received at input {484}.
We have dhexp(key_42289311,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289311,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289311,g),empty,false)))).

21. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289311,g),empty,false))) that may be in a table by 20 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the message concat3(dhexp(key_e_42289310,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {546}.
mess(pub,concat3(dhexp(key_e_42289310,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

22. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),empty,empty,empty,true))) that may be in a table by 16 may be read at get {80}.
The message concat3(dhexp(key_e_42289310,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 21 may be received at input {40}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),dhexp(key_s(bob),g),dhexp(key_e_42289310,g),empty,true))) may be inserted in a table at insert {79}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),dhexp(key_s(bob),g),dhexp(key_e_42289310,g),empty,true)))).

23. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),dhexp(key_s(bob),g),dhexp(key_e_42289310,g),empty,true))) that may be in a table by 22 may be read at get {105}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {102}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))) may be sent on channel pub at output {104}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))).

24. The entry statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289310,g),key_e_42289310),empty,dhexp(key_42289311,g),empty,false))) that may be in a table by 14 may be read at get {573}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))) that may be sent on channel pub by 23 may be received at input {548}.
So the entry statestore(bob,charlie,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289310,g),key_e_42289310),empty,dhexp(key_42289311,g),empty,false))) may be inserted in a table at insert {572}.
table(statestore(bob,charlie,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289310,g),key_e_42289310),empty,dhexp(key_42289311,g),empty,false)))).

25. The entry statestore(bob,charlie,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289310,g),key_e_42289310),empty,dhexp(key_42289311,g),empty,false))) that may be in a table by 24 may be read at get {592}.
The event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true) may be executed at {589}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))),msg_d(bob,charlie))) may be sent on channel pub at output {591}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))),msg_d(bob,charlie)))).

26. The entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289311,g),key_42289311),dhexp(key_s(bob),g),dhexp(key_e_42289310,g),empty,true))) that may be in a table by 9 may be read at get {125}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289310,dhexp(key_42289311,g))),dhexp(key_s(bob),dhexp(key_42289311,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289311,dhexp(key_e_42289310,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289311,g)),msg_a(alice,bob))),dhexp(key_e_42289310,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))),msg_d(bob,charlie))) that may be sent on channel pub by 25 may be received at input {107}.
So event RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true) may be executed at {123}.
end(RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true))
Abbreviations:
key_e_42289544 = key_e_972[me_935 = bob,them_934 = charlie,!1 = @sid_42289502]
key_42289545 = key_e[me = alice,them = bob,!1 = @sid_42289476]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42289545,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42289545,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {505}.
The message concat3(dhexp(key_42289545,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {484}.
We have dhexp(key_42289545,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289545,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289545,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289545,g),empty,false))) that may be in a table by 6 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the message concat3(dhexp(key_e_42289544,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {546}.
mess(pub,concat3(dhexp(key_e_42289544,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),empty,empty,empty,true))) that may be in a table by 2 may be read at get {80}.
The message concat3(dhexp(key_e_42289544,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),dhexp(key_s(bob),g),dhexp(key_e_42289544,g),empty,true))) may be inserted in a table at insert {79}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),dhexp(key_s(bob),g),dhexp(key_e_42289544,g),empty,true)))).

9. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),dhexp(key_s(bob),g),dhexp(key_e_42289544,g),empty,true))) that may be in a table by 8 may be read at get {105}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {102}.
So the entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),dhexp(key_s(bob),g),dhexp(key_e_42289544,g),empty,true))) may be inserted in a table at insert {103}.
table(statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),dhexp(key_s(bob),g),dhexp(key_e_42289544,g),empty,true)))).

10. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

12. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 11 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42289545,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42289545,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))).

13. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 10 may be read at get {505}.
The message concat3(dhexp(key_42289545,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))) that may be sent on channel pub by 12 may be received at input {484}.
We have dhexp(key_42289545,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289545,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289545,g),empty,false)))).

14. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289545,g),empty,false))) that may be in a table by 13 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the entry statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289544,g),key_e_42289544),empty,dhexp(key_42289545,g),empty,false))) may be inserted in a table at insert {545}.
table(statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289544,g),key_e_42289544),empty,dhexp(key_42289545,g),empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 15 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),empty,empty,empty,true)))).

17. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {483}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

18. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

19. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 18 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_42289545,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_42289545,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))).

20. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 17 may be read at get {505}.
The message concat3(dhexp(key_42289545,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))) that may be sent on channel pub by 19 may be received at input {484}.
We have dhexp(key_42289545,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289545,g),empty,false))) may be inserted in a table at insert {504}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289545,g),empty,false)))).

21. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_42289545,g),empty,false))) that may be in a table by 20 may be read at get {547}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {544}.
So the message concat3(dhexp(key_e_42289544,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {546}.
mess(pub,concat3(dhexp(key_e_42289544,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

22. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),empty,empty,empty,true))) that may be in a table by 16 may be read at get {80}.
The message concat3(dhexp(key_e_42289544,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 21 may be received at input {40}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),dhexp(key_s(bob),g),dhexp(key_e_42289544,g),empty,true))) may be inserted in a table at insert {79}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),dhexp(key_s(bob),g),dhexp(key_e_42289544,g),empty,true)))).

23. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),dhexp(key_s(bob),g),dhexp(key_e_42289544,g),empty,true))) that may be in a table by 22 may be read at get {105}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {102}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))) may be sent on channel pub at output {104}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))).

24. The entry statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289544,g),key_e_42289544),empty,dhexp(key_42289545,g),empty,false))) that may be in a table by 14 may be read at get {573}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))) that may be sent on channel pub by 23 may be received at input {548}.
So the entry statestore(bob,charlie,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289544,g),key_e_42289544),empty,dhexp(key_42289545,g),empty,false))) may be inserted in a table at insert {572}.
table(statestore(bob,charlie,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289544,g),key_e_42289544),empty,dhexp(key_42289545,g),empty,false)))).

25. The entry statestore(bob,charlie,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e_42289544,g),key_e_42289544),empty,dhexp(key_42289545,g),empty,false))) that may be in a table by 24 may be read at get {592}.
The event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true) may be executed at {589}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))),msg_d(bob,charlie))) may be sent on channel pub at output {591}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))),msg_d(bob,charlie)))).

26. The entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_42289545,g),key_42289545),dhexp(key_s(bob),g),dhexp(key_e_42289544,g),empty,true))) that may be in a table by 9 may be read at get {125}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_42289544,dhexp(key_42289545,g))),dhexp(key_s(bob),dhexp(key_42289545,g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_42289545,dhexp(key_e_42289544,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_42289545,g)),msg_a(alice,bob))),dhexp(key_e_42289544,g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))),msg_d(bob,charlie))) that may be sent on channel pub by 25 may be received at input {107}.
So event RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true) may be executed at {123}.
end(RecvMsg(alice,bob,stage_d,msg_d(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1164,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1164,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1164,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1164,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
