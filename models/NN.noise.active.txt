File "NN.noise.active.pv", line 245, characters 7-8:
Warning: identifier ck rebound.
File "NN.noise.active.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "NN.noise.active.pv", line 255, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 255, character 36:
Warning: identifier h rebound.
File "NN.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 294, character 6:
Warning: identifier e rebound.
File "NN.noise.active.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "NN.noise.active.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 298, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NN.noise.active.pv", line 299, characters 6-7:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 306, character 6:
Warning: identifier e rebound.
File "NN.noise.active.pv", line 307, characters 6-7:
Warning: identifier ne rebound.
File "NN.noise.active.pv", line 308, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NN.noise.active.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NN.noise.active.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 328, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NN.noise.active.pv", line 329, characters 6-7:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "NN.noise.active.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 342, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "NN.noise.active.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 365, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 367, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 522, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 524, characters 8-9:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 514, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 515, characters 8-9:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NN.noise.active.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "NN.noise.active.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 245, characters 7-8:
Warning: identifier ck rebound.
File "NN.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 499, characters 8-9:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 294, character 6:
Warning: identifier e rebound.
File "NN.noise.active.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "NN.noise.active.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 298, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NN.noise.active.pv", line 299, characters 6-7:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 575, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 576, characters 8-9:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 328, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NN.noise.active.pv", line 329, characters 6-7:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 566, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 365, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 367, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 306, character 6:
Warning: identifier e rebound.
File "NN.noise.active.pv", line 307, characters 6-7:
Warning: identifier ne rebound.
File "NN.noise.active.pv", line 308, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NN.noise.active.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 245, characters 7-8:
Warning: identifier ck rebound.
File "NN.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "NN.noise.active.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "NN.noise.active.pv", line 342, characters 7-8:
Warning: identifier hs rebound.
File "NN.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NN.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_116,dhexp(a_115,g)) = dhexp(a_115,dhexp(b_116,g))
Completing equations...
Completed equations:
dhexp(b_116,dhexp(a_115,g)) = dhexp(a_115,dhexp(b_116,g))
Convergent part:
Completing equations...
Completed equations:
Process:
(
    {1}!
    {2}new sid_a: sessionid;
    {3}let s_489: keypair = keypairpack(empty,empty) in
    (
        {4}let e_490: keypair = keypairpack(empty,empty) in
        {5}let rs_491: key = empty in
        {6}let re_492: key = empty in
        {7}let v_493: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_494: key = catch-fail(v_493) in
        {9}let v_495: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_496: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_493) then (if not-caught-fail(v_494) then (if not-caught-fail(v_495) then symmetricstatepack(v_495,v_494,v_493) else fail-any) else fail-any) else fail-any))) in
        {11}let v_497: symmetricstate = catch-fail((if success?((if not-caught-fail(v_493) then (if not-caught-fail(v_494) then (if not-caught-fail(v_495) then symmetricstatepack(v_495,v_494,v_493) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-3-tuple(v_496))))) then symmetricstatepack(1-proj-3-tuple(v_496),2-proj-3-tuple(v_496),hash(3-proj-3-tuple(v_496),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_497) then handshakestatepack(v_497,s_489,e_490,rs_491,re_492,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,sid_a,statepack_a(hs))
    ) | (
        {36}get statestore(=alice,=bob,=sid_a,statepack_a(hs_498: handshakestate)) in
        {14}let v_499: bitstring = catch-fail(handshakestateunpack(hs_498)) in
        {15}let v_500: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_501: key = catch-fail(dhexp(key_e(alice,bob,sid_a),g)) in
        {17}let v_502: keypair = catch-fail((if not-caught-fail(v_501) then keypairpack(v_501,key_e(alice,bob,sid_a)) else fail-any)) in
        {18}let v_503: bitstring = catch-fail(getpublickey(v_502)) in
        {19}let v_504: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_499))) in
        {20}let v_505: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_499)) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-3-tuple(v_504))))) then symmetricstatepack(1-proj-3-tuple(v_504),2-proj-3-tuple(v_504),hash(3-proj-3-tuple(v_504),v_503)) else fail-any) else fail-any)) in
        {21}let v_506: bitstring = catch-fail(symmetricstateunpack(v_505)) in
        {22}let v_507: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_506))) in
        {23}let v_508: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_507),2-proj-2-tuple(v_507),3-proj-3-tuple(v_506),msg_a(alice,bob))) in
        {24}let v_509: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_506))) in
        {25}let v_510: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_507))) && success?(1-proj-3-tuple(v_506))) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then cipherstatepack(1-proj-2-tuple(v_509),increment_nonce(2-proj-2-tuple(v_507))) else fail-any) else fail-any)) in
        {26}let v_511: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_506)) && success?(1-proj-3-tuple(v_506))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-2-tuple(v_507))))) then (if not-caught-fail(v_508) then (if not-caught-fail(v_510) then (v_510,v_508) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {27}let v_512: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_511),2-proj-3-tuple(v_506),3-proj-3-tuple(v_506)))) in
        {28}let v_513: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_511)) && success?(symmetricstatepack(1-proj-2-tuple(v_511),2-proj-3-tuple(v_506),3-proj-3-tuple(v_506)))) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then symmetricstatepack(1-proj-3-tuple(v_512),2-proj-3-tuple(v_512),hash(3-proj-3-tuple(v_512),2-proj-2-tuple(v_511))) else fail-any) else fail-any)) in
        {29}let v_514: bitstring = catch-fail((if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-2-tuple(v_511))))) then (if not-caught-fail(v_513) then (v_513,2-proj-2-tuple(v_511)) else fail-any) else fail-any) else fail-any)) in
        {30}let v_515: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_514),2-proj-7-tuple(v_499),v_502,4-proj-7-tuple(v_499),5-proj-7-tuple(v_499),6-proj-7-tuple(v_499),7-proj-7-tuple(v_499))) in
        {31}let v_516: bitstring = catch-fail(concat3(v_503,2-proj-3-tuple(v_500),2-proj-2-tuple(v_514))) in
        {32}let (hs_517: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-7-tuple(v_499))))) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then (if not-caught-fail(v_502) then (if not-caught-fail(v_503) then (if not-caught-fail(v_505) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-2-tuple(v_514))))) then (if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (v_515,v_516) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {33}event SendMsg(alice,bob,stagepack_a(getpublickey(handshakestategete(hs_517)),handshakestategetre(hs_517)),msg_a(alice,bob));
        {34}insert statestore(alice,bob,sid_a,statepack_b(hs_517));
        {35}out(pub, message_a)
    ) | (
        {77}get statestore(=alice,=bob,=sid_a,statepack_b(hs_518: handshakestate)) in
        {37}in(pub, message_b: bitstring);
        {38}let v_519: bitstring = catch-fail(handshakestateunpack(hs_518)) in
        {39}let v_520: bitstring = catch-fail(deconcat3(message_b)) in
        {40}let v_521: bool = catch-fail(true) in
        {41}let v_522: key = catch-fail(1-proj-3-tuple(v_520)) in
        {42}let v_523: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_519))) in
        {43}let v_524: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_519)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then symmetricstatepack(1-proj-3-tuple(v_523),2-proj-3-tuple(v_523),hash(3-proj-3-tuple(v_523),v_522)) else fail-any) else fail-any)) in
        {44}let v_525: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_519))) in
        {45}let v_526: bitstring = catch-fail(symmetricstateunpack(v_524)) in
        {46}let v_527: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_526),(if success?(3-proj-7-tuple(v_519)) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-2-tuple(v_525))))) then dhexp(2-proj-2-tuple(v_525),v_522) else fail-any) else fail-any))) in
        {47}let v_528: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_526),(if success?(3-proj-7-tuple(v_519)) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-2-tuple(v_525))))) then dhexp(2-proj-2-tuple(v_525),v_522) else fail-any) else fail-any))) in
        {48}let v_529: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_526),(if success?(3-proj-7-tuple(v_519)) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-2-tuple(v_525))))) then dhexp(2-proj-2-tuple(v_525),v_522) else fail-any) else fail-any))) in
        {49}let v_530: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_519)) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-2-tuple(v_525))))) then dhexp(2-proj-2-tuple(v_525),v_522) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_526))) then (if not-caught-fail(v_527) then (if not-caught-fail(v_528) then (if not-caught-fail(v_529) then (v_527,v_528,v_529) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_531: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_519)) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-2-tuple(v_525))))) then dhexp(2-proj-2-tuple(v_525),v_522) else fail-any) else fail-any)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_530)) then cipherstatepack(2-proj-3-tuple(v_530),minnonce) else fail-any),1-proj-3-tuple(v_530),3-proj-3-tuple(v_526)) else fail-any) else fail-any) else fail-any)) in
        {51}let v_532: bitstring = catch-fail(symmetricstateunpack(v_531)) in
        {52}let v_533: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_532))) in
        {53}let v_534: aead = catch-fail(decrypt(1-proj-2-tuple(v_533),2-proj-2-tuple(v_533),3-proj-3-tuple(v_532),3-proj-3-tuple(v_520))) in
        {54}let v_535: bitstring = catch-fail(aeadunpack(v_534)) in
        {55}let v_536: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_532))) in
        {56}let v_537: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_533))) && success?(1-proj-3-tuple(v_532))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then cipherstatepack(1-proj-2-tuple(v_536),increment_nonce(2-proj-2-tuple(v_533))) else fail-any) else fail-any)) in
        {57}let v_538: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_520)) && (success?(3-proj-3-tuple(v_532)) && success?(1-proj-3-tuple(v_532)))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then (if not-caught-fail(v_534) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if not-caught-fail(v_537) then (v_537,3-proj-3-tuple(v_535),1-proj-3-tuple(v_535)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {58}let v_539: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_538),2-proj-3-tuple(v_532),3-proj-3-tuple(v_532)))) in
        {59}let v_540: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_520)) && success?(symmetricstatepack(1-proj-3-tuple(v_538),2-proj-3-tuple(v_532),3-proj-3-tuple(v_532)))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),3-proj-3-tuple(v_520))) else fail-any) else fail-any)) in
        {60}let v_541: bitstring = catch-fail((if success?(3-proj-3-tuple(v_520)) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if not-caught-fail(v_540) then (v_540,2-proj-3-tuple(v_538),3-proj-3-tuple(v_538)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let =true = (v_521 && 3-proj-3-tuple(v_541)) in
        (
            {62}let v_542: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_541),2-proj-7-tuple(v_519),3-proj-7-tuple(v_519),4-proj-7-tuple(v_519),v_522,6-proj-7-tuple(v_519),7-proj-7-tuple(v_519))) in
            {63}let v_543: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_541))) in
            {64}let v_544: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_543),zero)) in
            {65}let v_545: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_543),zero)) in
            {66}let v_546: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_543),zero)) in
            {67}let v_547: bitstring = catch-fail((if success?(2-proj-3-tuple(v_543)) then (if not-caught-fail(v_544) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (v_544,v_545,v_546) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {68}let v_548: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_547)) then cipherstatepack(1-proj-3-tuple(v_547),minnonce) else fail-any)) in
            {69}let v_549: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_547)) then cipherstatepack(2-proj-3-tuple(v_547),minnonce) else fail-any)) in
            {70}let v_550: bitstring = catch-fail((if success?(1-proj-3-tuple(v_541)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then (if not-caught-fail(v_548) then (if not-caught-fail(v_549) then (1-proj-3-tuple(v_541),v_548,v_549) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {71}let (hs_551: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-7-tuple(v_519))))) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then (if not-caught-fail(v_524) then (if not-caught-fail(v_531) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then (if not-caught-fail(v_542) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (v_542,2-proj-3-tuple(v_541),true,2-proj-3-tuple(v_550),3-proj-3-tuple(v_550)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {72}event RecvMsg(alice,bob,stagepack_b(getpublickey(handshakestategete(hs_551)),handshakestategetre(hs_551)),plaintext_b);
            {73}insert statestore(alice,bob,sid_a,statepack_c(hs_551,cs1,cs2))
        )
        else
            {74}let (hs_552: handshakestate,plaintext_b_553: bitstring,valid_554: bool,cs1_555: cipherstate,cs2_556: cipherstate) = (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-7-tuple(v_519))))) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then (if not-caught-fail(v_524) then (if not-caught-fail(v_531) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then fail-any else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {75}event RecvMsg(alice,bob,stagepack_b(getpublickey(handshakestategete(hs_552)),handshakestategetre(hs_552)),plaintext_b_553);
            {76}insert statestore(alice,bob,sid_a,statepack_c(hs_552,cs1_555,cs2_556))
    ) | (
        {78}!
        {97}get statestore(=alice,=bob,=sid_a,statepack_c(hs_557: handshakestate,cs1_558: cipherstate,cs2_559: cipherstate)) in
        {79}let hs_560: handshakestate = handshakestatesetcs(hs_557,cs1_558) in
        {80}let v_561: bitstring = catch-fail(handshakestateunpack(hs_560)) in
        {81}let v_562: bitstring = catch-fail((empty,empty,empty)) in
        {82}let v_563: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_561))) in
        {83}let v_564: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {84}let v_565: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_564),2-proj-2-tuple(v_564),3-proj-3-tuple(v_563),msg_c(alice,bob))) in
        {85}let v_566: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {86}let v_567: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_564))) && success?(1-proj-3-tuple(v_563))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then cipherstatepack(1-proj-2-tuple(v_566),increment_nonce(2-proj-2-tuple(v_564))) else fail-any) else fail-any)) in
        {87}let v_568: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_563)) && success?(1-proj-3-tuple(v_563))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_567) then (v_567,v_565) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {88}let v_569: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_568),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) in
        {89}let v_570: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_568)) && success?(symmetricstatepack(1-proj-2-tuple(v_568),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_569),hash(3-proj-3-tuple(v_569),2-proj-2-tuple(v_568))) else fail-any) else fail-any)) in
        {90}let v_571: bitstring = catch-fail((if success?(1-proj-7-tuple(v_561)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then (if not-caught-fail(v_570) then (v_570,2-proj-2-tuple(v_568)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {91}let v_572: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_571),2-proj-7-tuple(v_561),3-proj-7-tuple(v_561),4-proj-7-tuple(v_561),5-proj-7-tuple(v_561),6-proj-7-tuple(v_561),7-proj-7-tuple(v_561))) in
        {92}let v_573: bitstring = catch-fail(concat3(1-proj-3-tuple(v_562),2-proj-3-tuple(v_562),2-proj-2-tuple(v_571))) in
        {93}let (hs_574: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-7-tuple(v_561))))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (v_572,v_573) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {94}event SendMsg(alice,bob,stagepack_c(getpublickey(handshakestategete(hs_574)),handshakestategetre(hs_574)),msg_c(alice,bob));
        {95}insert statestore(alice,bob,sid_a,statepack_d(hs_574,handshakestategetcs(hs_574),cs2_559));
        {96}out(pub, message_c)
    ) | (
        {98}!
        {122}get statestore(=alice,=bob,=sid_a,statepack_d(hs_575: handshakestate,cs1_576: cipherstate,cs2_577: cipherstate)) in
        {99}let hs_578: handshakestate = handshakestatesetcs(hs_575,cs2_577) in
        {100}in(pub, message_d: bitstring);
        {101}let v_579: bitstring = catch-fail(handshakestateunpack(hs_578)) in
        {102}let v_580: bitstring = catch-fail(deconcat3(message_d)) in
        {103}let v_581: bool = catch-fail(true) in
        {104}let v_582: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_579))) in
        {105}let v_583: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_582))) in
        {106}let v_584: aead = catch-fail(decrypt(1-proj-2-tuple(v_583),2-proj-2-tuple(v_583),3-proj-3-tuple(v_582),3-proj-3-tuple(v_580))) in
        {107}let v_585: bitstring = catch-fail(aeadunpack(v_584)) in
        {108}let v_586: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_582))) in
        {109}let v_587: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_583))) && success?(1-proj-3-tuple(v_582))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then cipherstatepack(1-proj-2-tuple(v_586),increment_nonce(2-proj-2-tuple(v_583))) else fail-any) else fail-any)) in
        {110}let v_588: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_580)) && (success?(3-proj-3-tuple(v_582)) && success?(1-proj-3-tuple(v_582)))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then (if not-caught-fail(v_584) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if not-caught-fail(v_587) then (v_587,3-proj-3-tuple(v_585),1-proj-3-tuple(v_585)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {111}let v_589: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_588),2-proj-3-tuple(v_582),3-proj-3-tuple(v_582)))) in
        {112}let v_590: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_580)) && success?(symmetricstatepack(1-proj-3-tuple(v_588),2-proj-3-tuple(v_582),3-proj-3-tuple(v_582)))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then symmetricstatepack(1-proj-3-tuple(v_589),2-proj-3-tuple(v_589),hash(3-proj-3-tuple(v_589),3-proj-3-tuple(v_580))) else fail-any) else fail-any)) in
        {113}let v_591: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_580)) && success?(1-proj-7-tuple(v_579))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if not-caught-fail(v_590) then (v_590,2-proj-3-tuple(v_588),3-proj-3-tuple(v_588)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let =true = (v_581 && 3-proj-3-tuple(v_591)) in
        (
            {115}let v_592: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_591),2-proj-7-tuple(v_579),3-proj-7-tuple(v_579),4-proj-7-tuple(v_579),5-proj-7-tuple(v_579),6-proj-7-tuple(v_579),7-proj-7-tuple(v_579))) in
            {116}let (hs_593: handshakestate,plaintext_d: bitstring,valid_594: bool) = (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-7-tuple(v_579))))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if not-caught-fail(v_581) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if not-caught-fail(v_592) then (v_592,2-proj-3-tuple(v_591),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {117}event RecvMsg(alice,bob,stagepack_d(getpublickey(handshakestategete(hs_593)),handshakestategetre(hs_593)),plaintext_d);
            {118}event RecvEnd(valid_594)
        )
        else
            {119}let (hs_595: handshakestate,plaintext_d_596: bitstring,valid_597: bool) = (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-7-tuple(v_579))))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if not-caught-fail(v_581) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then fail-any else fail-any) else fail-any) else fail-any) else fail-any) in
            {120}event RecvMsg(alice,bob,stagepack_d(getpublickey(handshakestategete(hs_595)),handshakestategetre(hs_595)),plaintext_d_596);
            {121}event RecvEnd(valid_597)
    ) | (
        {123}event LeakS(phase0,alice);
        {124}out(pub, key_s(alice))
    ) | (
        {125}phase 1;
        {126}event LeakS(phase1,alice);
        {127}out(pub, key_s(alice))
    )
) | (
    {128}!
    {129}new sid_b: sessionid;
    {130}let s_598: keypair = keypairpack(empty,empty) in
    (
        {131}let e_599: keypair = keypairpack(empty,empty) in
        {132}let rs_600: key = empty in
        {133}let re_601: key = empty in
        {134}let v_602: bitstring = catch-fail(hash(somename,empty)) in
        {135}let v_603: key = catch-fail(v_602) in
        {136}let v_604: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {137}let v_605: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then symmetricstatepack(v_604,v_603,v_602) else fail-any) else fail-any) else fail-any))) in
        {138}let v_606: symmetricstate = catch-fail((if success?((if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then symmetricstatepack(v_604,v_603,v_602) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then symmetricstatepack(1-proj-3-tuple(v_605),2-proj-3-tuple(v_605),hash(3-proj-3-tuple(v_605),empty)) else fail-any) else fail-any)) in
        {139}let hs_607: handshakestate = (if not-caught-fail(v_606) then handshakestatepack(v_606,s_598,e_599,rs_600,re_601,empty,false) else fail-any) in
        {140}insert statestore(bob,alice,sid_b,statepack_a(hs_607))
    ) | (
        {166}get statestore(=bob,=alice,=sid_b,statepack_a(hs_608: handshakestate)) in
        {141}in(pub, message_a_609: bitstring);
        {142}let v_610: bitstring = catch-fail(handshakestateunpack(hs_608)) in
        {143}let v_611: bitstring = catch-fail(deconcat3(message_a_609)) in
        {144}let v_612: bool = catch-fail(true) in
        {145}let v_613: key = catch-fail(1-proj-3-tuple(v_611)) in
        {146}let v_614: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_610))) in
        {147}let v_615: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_610)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then symmetricstatepack(1-proj-3-tuple(v_614),2-proj-3-tuple(v_614),hash(3-proj-3-tuple(v_614),v_613)) else fail-any) else fail-any)) in
        {148}let v_616: bitstring = catch-fail(symmetricstateunpack(v_615)) in
        {149}let v_617: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_616))) in
        {150}let v_618: aead = catch-fail(decrypt(1-proj-2-tuple(v_617),2-proj-2-tuple(v_617),3-proj-3-tuple(v_616),3-proj-3-tuple(v_611))) in
        {151}let v_619: bitstring = catch-fail(aeadunpack(v_618)) in
        {152}let v_620: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_616))) in
        {153}let v_621: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_617))) && success?(1-proj-3-tuple(v_616))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then cipherstatepack(1-proj-2-tuple(v_620),increment_nonce(2-proj-2-tuple(v_617))) else fail-any) else fail-any)) in
        {154}let v_622: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_611)) && (success?(3-proj-3-tuple(v_616)) && success?(1-proj-3-tuple(v_616)))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then (if not-caught-fail(v_618) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then (if not-caught-fail(v_621) then (v_621,3-proj-3-tuple(v_619),1-proj-3-tuple(v_619)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {155}let v_623: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_622),2-proj-3-tuple(v_616),3-proj-3-tuple(v_616)))) in
        {156}let v_624: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_611)) && success?(symmetricstatepack(1-proj-3-tuple(v_622),2-proj-3-tuple(v_616),3-proj-3-tuple(v_616)))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack(1-proj-3-tuple(v_623),2-proj-3-tuple(v_623),hash(3-proj-3-tuple(v_623),3-proj-3-tuple(v_611))) else fail-any) else fail-any)) in
        {157}let v_625: bitstring = catch-fail((if success?(3-proj-3-tuple(v_611)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if not-caught-fail(v_624) then (v_624,2-proj-3-tuple(v_622),3-proj-3-tuple(v_622)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {158}let =true = (v_612 && 3-proj-3-tuple(v_625)) in
        (
            {159}let v_626: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_625),2-proj-7-tuple(v_610),3-proj-7-tuple(v_610),4-proj-7-tuple(v_610),v_613,6-proj-7-tuple(v_610),7-proj-7-tuple(v_610))) in
            {160}let (hs_627: handshakestate,plaintext_a: bitstring,valid_628: bool) = (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-7-tuple(v_610))))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (if not-caught-fail(v_615) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then (if not-caught-fail(v_626) then (v_626,2-proj-3-tuple(v_625),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {161}event RecvMsg(bob,alice,stagepack_a(getpublickey(handshakestategete(hs_627)),handshakestategetre(hs_627)),plaintext_a);
            {162}insert statestore(bob,alice,sid_b,statepack_b(hs_627))
        )
        else
            {163}let (hs_629: handshakestate,plaintext_a_630: bitstring,valid_631: bool) = (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-7-tuple(v_610))))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (if not-caught-fail(v_615) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then fail-any else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {164}event RecvMsg(bob,alice,stagepack_a(getpublickey(handshakestategete(hs_629)),handshakestategetre(hs_629)),plaintext_a_630);
            {165}insert statestore(bob,alice,sid_b,statepack_b(hs_629))
    ) | (
        {204}get statestore(=bob,=alice,=sid_b,statepack_b(hs_632: handshakestate)) in
        {167}let v_633: bitstring = catch-fail(handshakestateunpack(hs_632)) in
        {168}let v_634: bitstring = catch-fail((empty,empty,empty)) in
        {169}let v_635: key = catch-fail(dhexp(key_e(bob,alice,sid_b),g)) in
        {170}let v_636: keypair = catch-fail((if not-caught-fail(v_635) then keypairpack(v_635,key_e(bob,alice,sid_b)) else fail-any)) in
        {171}let v_637: bitstring = catch-fail(getpublickey(v_636)) in
        {172}let v_638: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_633))) in
        {173}let v_639: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_633)) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_638),hash(3-proj-3-tuple(v_638),v_637)) else fail-any) else fail-any)) in
        {174}let v_640: bitstring = catch-fail(keypairunpack(v_636)) in
        {175}let v_641: bitstring = catch-fail(symmetricstateunpack(v_639)) in
        {176}let v_642: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_641),(if success?(5-proj-7-tuple(v_633)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),5-proj-7-tuple(v_633)) else fail-any) else fail-any))) in
        {177}let v_643: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_641),(if success?(5-proj-7-tuple(v_633)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),5-proj-7-tuple(v_633)) else fail-any) else fail-any))) in
        {178}let v_644: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_641),(if success?(5-proj-7-tuple(v_633)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),5-proj-7-tuple(v_633)) else fail-any) else fail-any))) in
        {179}let v_645: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_633)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),5-proj-7-tuple(v_633)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_641))) then (if not-caught-fail(v_642) then (if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (v_642,v_643,v_644) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {180}let v_646: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_633)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then dhexp(2-proj-2-tuple(v_640),5-proj-7-tuple(v_633)) else fail-any) else fail-any)) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_645)) then cipherstatepack(2-proj-3-tuple(v_645),minnonce) else fail-any),1-proj-3-tuple(v_645),3-proj-3-tuple(v_641)) else fail-any) else fail-any) else fail-any)) in
        {181}let v_647: bitstring = catch-fail(symmetricstateunpack(v_646)) in
        {182}let v_648: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {183}let v_649: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_648),2-proj-2-tuple(v_648),3-proj-3-tuple(v_647),msg_b(bob,alice))) in
        {184}let v_650: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {185}let v_651: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_648))) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then cipherstatepack(1-proj-2-tuple(v_650),increment_nonce(2-proj-2-tuple(v_648))) else fail-any) else fail-any)) in
        {186}let v_652: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_647)) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_649) then (if not-caught-fail(v_651) then (v_651,v_649) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {187}let v_653: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_652),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) in
        {188}let v_654: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_652)) && success?(symmetricstatepack(1-proj-2-tuple(v_652),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_653),hash(3-proj-3-tuple(v_653),2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {189}let v_655: bitstring = catch-fail((if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_654) then (v_654,2-proj-2-tuple(v_652)) else fail-any) else fail-any) else fail-any)) in
        {190}let v_656: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_655),2-proj-7-tuple(v_633),v_636,4-proj-7-tuple(v_633),5-proj-7-tuple(v_633),6-proj-7-tuple(v_633),7-proj-7-tuple(v_633))) in
        {191}let v_657: bitstring = catch-fail(concat3(v_637,2-proj-3-tuple(v_634),2-proj-2-tuple(v_655))) in
        {192}let v_658: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_655))) in
        {193}let v_659: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_658),zero)) in
        {194}let v_660: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_658),zero)) in
        {195}let v_661: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_658),zero)) in
        {196}let v_662: bitstring = catch-fail((if success?(2-proj-3-tuple(v_658)) then (if not-caught-fail(v_659) then (if not-caught-fail(v_660) then (if not-caught-fail(v_661) then (v_659,v_660,v_661) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_663: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_662)) then cipherstatepack(1-proj-3-tuple(v_662),minnonce) else fail-any)) in
        {198}let v_664: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_662)) then cipherstatepack(2-proj-3-tuple(v_662),minnonce) else fail-any)) in
        {199}let v_665: bitstring = catch-fail((if success?(1-proj-2-tuple(v_655)) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (1-proj-2-tuple(v_655),v_663,v_664) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {200}let (hs_666: handshakestate,message_b_667: bitstring,cs1_668: cipherstate,cs2_669: cipherstate) = (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-7-tuple(v_633))))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if not-caught-fail(v_636) then (if not-caught-fail(v_637) then (if not-caught-fail(v_639) then (if not-caught-fail(v_646) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (v_656,v_657,2-proj-3-tuple(v_665),3-proj-3-tuple(v_665)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {201}event SendMsg(bob,alice,stagepack_b(getpublickey(handshakestategete(hs_666)),handshakestategetre(hs_666)),msg_b(bob,alice));
        {202}insert statestore(bob,alice,sid_b,statepack_c(hs_666,cs1_668,cs2_669));
        {203}out(pub, message_b_667)
    ) | (
        {205}!
        {229}get statestore(=bob,=alice,=sid_b,statepack_c(hs_670: handshakestate,cs1_671: cipherstate,cs2_672: cipherstate)) in
        {206}let hs_673: handshakestate = handshakestatesetcs(hs_670,cs1_671) in
        {207}in(pub, message_c_674: bitstring);
        {208}let v_675: bitstring = catch-fail(handshakestateunpack(hs_673)) in
        {209}let v_676: bitstring = catch-fail(deconcat3(message_c_674)) in
        {210}let v_677: bool = catch-fail(true) in
        {211}let v_678: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_675))) in
        {212}let v_679: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_678))) in
        {213}let v_680: aead = catch-fail(decrypt(1-proj-2-tuple(v_679),2-proj-2-tuple(v_679),3-proj-3-tuple(v_678),3-proj-3-tuple(v_676))) in
        {214}let v_681: bitstring = catch-fail(aeadunpack(v_680)) in
        {215}let v_682: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_678))) in
        {216}let v_683: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_679))) && success?(1-proj-3-tuple(v_678))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then cipherstatepack(1-proj-2-tuple(v_682),increment_nonce(2-proj-2-tuple(v_679))) else fail-any) else fail-any)) in
        {217}let v_684: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_676)) && (success?(3-proj-3-tuple(v_678)) && success?(1-proj-3-tuple(v_678)))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then (if not-caught-fail(v_680) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if not-caught-fail(v_683) then (v_683,3-proj-3-tuple(v_681),1-proj-3-tuple(v_681)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_685: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_678),3-proj-3-tuple(v_678)))) in
        {219}let v_686: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_676)) && success?(symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_678),3-proj-3-tuple(v_678)))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then symmetricstatepack(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),hash(3-proj-3-tuple(v_685),3-proj-3-tuple(v_676))) else fail-any) else fail-any)) in
        {220}let v_687: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_676)) && success?(1-proj-7-tuple(v_675))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then (if not-caught-fail(v_686) then (v_686,2-proj-3-tuple(v_684),3-proj-3-tuple(v_684)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {221}let =true = (v_677 && 3-proj-3-tuple(v_687)) in
        (
            {222}let v_688: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_687),2-proj-7-tuple(v_675),3-proj-7-tuple(v_675),4-proj-7-tuple(v_675),5-proj-7-tuple(v_675),6-proj-7-tuple(v_675),7-proj-7-tuple(v_675))) in
            {223}let (hs_689: handshakestate,plaintext_c: bitstring,valid_690: bool) = (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-7-tuple(v_675))))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if not-caught-fail(v_677) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if not-caught-fail(v_688) then (v_688,2-proj-3-tuple(v_687),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {224}event RecvMsg(bob,alice,stagepack_c(getpublickey(handshakestategete(hs_689)),handshakestategetre(hs_689)),plaintext_c);
            {225}insert statestore(bob,alice,sid_b,statepack_d(hs_689,handshakestategetcs(hs_689),cs2_672))
        )
        else
            {226}let (hs_691: handshakestate,plaintext_c_692: bitstring,valid_693: bool) = (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-7-tuple(v_675))))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if not-caught-fail(v_677) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then fail-any else fail-any) else fail-any) else fail-any) else fail-any) in
            {227}event RecvMsg(bob,alice,stagepack_c(getpublickey(handshakestategete(hs_691)),handshakestategetre(hs_691)),plaintext_c_692);
            {228}insert statestore(bob,alice,sid_b,statepack_d(hs_691,handshakestategetcs(hs_691),cs2_672))
    ) | (
        {230}!
        {248}get statestore(=bob,=alice,=sid_b,statepack_d(hs_694: handshakestate,cs1_695: cipherstate,cs2_696: cipherstate)) in
        {231}let hs_697: handshakestate = handshakestatesetcs(hs_694,cs2_696) in
        {232}let v_698: bitstring = catch-fail(handshakestateunpack(hs_697)) in
        {233}let v_699: bitstring = catch-fail((empty,empty,empty)) in
        {234}let v_700: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_698))) in
        {235}let v_701: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_700))) in
        {236}let v_702: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_701),2-proj-2-tuple(v_701),3-proj-3-tuple(v_700),msg_d(bob,alice))) in
        {237}let v_703: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_700))) in
        {238}let v_704: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_701))) && success?(1-proj-3-tuple(v_700))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then cipherstatepack(1-proj-2-tuple(v_703),increment_nonce(2-proj-2-tuple(v_701))) else fail-any) else fail-any)) in
        {239}let v_705: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_700)) && success?(1-proj-3-tuple(v_700))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then (if not-caught-fail(v_702) then (if not-caught-fail(v_704) then (v_704,v_702) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {240}let v_706: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_705),2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)))) in
        {241}let v_707: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_705)) && success?(symmetricstatepack(1-proj-2-tuple(v_705),2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_706),hash(3-proj-3-tuple(v_706),2-proj-2-tuple(v_705))) else fail-any) else fail-any)) in
        {242}let v_708: bitstring = catch-fail((if success?(1-proj-7-tuple(v_698)) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then (if not-caught-fail(v_707) then (v_707,2-proj-2-tuple(v_705)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_709: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_708),2-proj-7-tuple(v_698),3-proj-7-tuple(v_698),4-proj-7-tuple(v_698),5-proj-7-tuple(v_698),6-proj-7-tuple(v_698),7-proj-7-tuple(v_698))) in
        {244}let v_710: bitstring = catch-fail(concat3(1-proj-3-tuple(v_699),2-proj-3-tuple(v_699),2-proj-2-tuple(v_708))) in
        {245}let (hs_711: handshakestate,message_d_712: bitstring) = (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-7-tuple(v_698))))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then (if not-caught-fail(v_709) then (if not-caught-fail(v_710) then (v_709,v_710) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {246}event SendMsg(bob,alice,stagepack_d(getpublickey(handshakestategete(hs_711)),handshakestategetre(hs_711)),msg_d(bob,alice));
        {247}out(pub, message_d_712)
    ) | (
        {249}event LeakS(phase0,bob);
        {250}out(pub, key_s(bob))
    ) | (
        {251}phase 1;
        {252}event LeakS(phase1,bob);
        {253}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_a(ae,be),m)); event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,c_847,stagepack_a(ae,be),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,c_847,stagepack_a(ae,be),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_a(ae,be),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_a(ae,be),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_b(be,ae),m)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,c_847,stagepack_b(be,ae),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,c_847,stagepack_b(be,ae),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_b(be,ae),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_b(be,ae),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_c(ae,be),m)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,c_847,stagepack_c(ae,be),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,c_847,stagepack_c(ae,be),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_c(ae,be),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_c(ae,be),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_d(be,ae),m)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,c_847,stagepack_d(be,ae),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,c_847,stagepack_d(be,ae),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_d(be,ae),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_d(be,ae),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 51 rules in the queue.
400 rules inserted. The rule base contains 373 rules. 45 rules in the queue.
600 rules inserted. The rule base contains 503 rules. 97 rules in the queue.
800 rules inserted. The rule base contains 655 rules. 115 rules in the queue.
1000 rules inserted. The rule base contains 795 rules. 138 rules in the queue.
1200 rules inserted. The rule base contains 934 rules. 176 rules in the queue.
1400 rules inserted. The rule base contains 1072 rules. 159 rules in the queue.
1600 rules inserted. The rule base contains 1227 rules. 205 rules in the queue.
1800 rules inserted. The rule base contains 1373 rules. 237 rules in the queue.
2000 rules inserted. The rule base contains 1507 rules. 231 rules in the queue.
2200 rules inserted. The rule base contains 1639 rules. 291 rules in the queue.
2400 rules inserted. The rule base contains 1740 rules. 302 rules in the queue.
2600 rules inserted. The rule base contains 1847 rules. 282 rules in the queue.
2800 rules inserted. The rule base contains 1892 rules. 241 rules in the queue.
3000 rules inserted. The rule base contains 2005 rules. 263 rules in the queue.
3200 rules inserted. The rule base contains 2089 rules. 282 rules in the queue.
3400 rules inserted. The rule base contains 2231 rules. 258 rules in the queue.
3600 rules inserted. The rule base contains 2381 rules. 234 rules in the queue.
3800 rules inserted. The rule base contains 2515 rules. 250 rules in the queue.
4000 rules inserted. The rule base contains 2650 rules. 246 rules in the queue.
4200 rules inserted. The rule base contains 2770 rules. 227 rules in the queue.
4400 rules inserted. The rule base contains 2881 rules. 249 rules in the queue.
4600 rules inserted. The rule base contains 2990 rules. 276 rules in the queue.
4800 rules inserted. The rule base contains 3071 rules. 255 rules in the queue.
5000 rules inserted. The rule base contains 3191 rules. 246 rules in the queue.
5200 rules inserted. The rule base contains 3235 rules. 269 rules in the queue.
5400 rules inserted. The rule base contains 3188 rules. 284 rules in the queue.
5600 rules inserted. The rule base contains 3322 rules. 266 rules in the queue.
5800 rules inserted. The rule base contains 3466 rules. 264 rules in the queue.
6000 rules inserted. The rule base contains 3608 rules. 298 rules in the queue.
6200 rules inserted. The rule base contains 3762 rules. 348 rules in the queue.
6400 rules inserted. The rule base contains 3908 rules. 366 rules in the queue.
6600 rules inserted. The rule base contains 4040 rules. 358 rules in the queue.
6800 rules inserted. The rule base contains 4146 rules. 352 rules in the queue.
7000 rules inserted. The rule base contains 4279 rules. 372 rules in the queue.
7200 rules inserted. The rule base contains 4409 rules. 384 rules in the queue.
7400 rules inserted. The rule base contains 4493 rules. 361 rules in the queue.
7600 rules inserted. The rule base contains 4614 rules. 341 rules in the queue.
7800 rules inserted. The rule base contains 4712 rules. 348 rules in the queue.
8000 rules inserted. The rule base contains 4832 rules. 370 rules in the queue.
8200 rules inserted. The rule base contains 4832 rules. 351 rules in the queue.
8400 rules inserted. The rule base contains 4881 rules. 305 rules in the queue.
8600 rules inserted. The rule base contains 4992 rules. 281 rules in the queue.
8800 rules inserted. The rule base contains 4618 rules. 285 rules in the queue.
9000 rules inserted. The rule base contains 4720 rules. 277 rules in the queue.
9200 rules inserted. The rule base contains 4762 rules. 264 rules in the queue.
9400 rules inserted. The rule base contains 4840 rules. 238 rules in the queue.
9600 rules inserted. The rule base contains 4835 rules. 252 rules in the queue.
9800 rules inserted. The rule base contains 4961 rules. 267 rules in the queue.
10000 rules inserted. The rule base contains 5015 rules. 252 rules in the queue.
10200 rules inserted. The rule base contains 5085 rules. 242 rules in the queue.
10400 rules inserted. The rule base contains 5204 rules. 264 rules in the queue.
10600 rules inserted. The rule base contains 5286 rules. 274 rules in the queue.
10800 rules inserted. The rule base contains 5339 rules. 245 rules in the queue.
11000 rules inserted. The rule base contains 5452 rules. 251 rules in the queue.
11200 rules inserted. The rule base contains 5561 rules. 260 rules in the queue.
11400 rules inserted. The rule base contains 5652 rules. 262 rules in the queue.
11600 rules inserted. The rule base contains 5691 rules. 236 rules in the queue.
11800 rules inserted. The rule base contains 5803 rules. 256 rules in the queue.
12000 rules inserted. The rule base contains 5917 rules. 267 rules in the queue.
12200 rules inserted. The rule base contains 5972 rules. 255 rules in the queue.
12400 rules inserted. The rule base contains 6054 rules. 243 rules in the queue.
12600 rules inserted. The rule base contains 6159 rules. 260 rules in the queue.
12800 rules inserted. The rule base contains 6246 rules. 274 rules in the queue.
13000 rules inserted. The rule base contains 6295 rules. 244 rules in the queue.
13200 rules inserted. The rule base contains 6408 rules. 257 rules in the queue.
13400 rules inserted. The rule base contains 6517 rules. 260 rules in the queue.
13600 rules inserted. The rule base contains 6607 rules. 267 rules in the queue.
13800 rules inserted. The rule base contains 6658 rules. 234 rules in the queue.
14000 rules inserted. The rule base contains 6757 rules. 258 rules in the queue.
14200 rules inserted. The rule base contains 6883 rules. 274 rules in the queue.
14400 rules inserted. The rule base contains 6932 rules. 260 rules in the queue.
14600 rules inserted. The rule base contains 7015 rules. 249 rules in the queue.
14800 rules inserted. The rule base contains 7117 rules. 253 rules in the queue.
