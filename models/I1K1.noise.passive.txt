File "I1K1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1K1.noise.passive.pv", line 270, characters 7-8:
Warning: identifier ck rebound.
File "I1K1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 271, character 36:
Warning: identifier h rebound.
File "I1K1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 312, character 6:
Warning: identifier e rebound.
File "I1K1.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ne rebound.
File "I1K1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 316, character 6:
Warning: identifier s rebound.
File "I1K1.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 317, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1K1.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 318, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 326, character 6:
Warning: identifier e rebound.
File "I1K1.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ne rebound.
File "I1K1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 341, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier re rebound.
File "I1K1.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 354, characters 48-53:
Warning: identifier valid1 rebound.
File "I1K1.noise.passive.pv", line 355, characters 6-7:
Warning: identifier rs rebound.
File "I1K1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier re rebound.
File "I1K1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 370, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 373, characters 7-8:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 381, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 382, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 384, characters 7-8:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 341, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1K1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier re rebound.
File "I1K1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 370, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 373, characters 7-8:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1K1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1K1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 490, characters 8-9:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 312, character 6:
Warning: identifier e rebound.
File "I1K1.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ne rebound.
File "I1K1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 316, character 6:
Warning: identifier s rebound.
File "I1K1.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 317, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1K1.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 318, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 548, characters 8-9:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 381, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 382, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 384, characters 7-8:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1K1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 540, characters 8-9:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 326, character 6:
Warning: identifier e rebound.
File "I1K1.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ne rebound.
File "I1K1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 330, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1K1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1K1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 533, characters 8-9:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier re rebound.
File "I1K1.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 354, characters 48-53:
Warning: identifier valid1 rebound.
File "I1K1.noise.passive.pv", line 355, characters 6-7:
Warning: identifier rs rebound.
File "I1K1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "I1K1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "I1K1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "I1K1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_455: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_455));
    (
        {4}let e_456: keypair = keypairpack(empty,empty) in
        {5}let v_457: key = catch-fail(dhexp(key_s(bob),g)) in
        {6}let rs_458: key = getpublickey((if not-caught-fail(v_457) then keypairpack(v_457,key_s(bob)) else fail-any)) in
        {7}let re_459: key = empty in
        {8}let v_460: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_461: key = catch-fail(v_460) in
        {10}let v_462: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_463: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_460) then (if not-caught-fail(v_461) then (if not-caught-fail(v_462) then symmetricstatepack(v_462,v_461,v_460) else fail-any) else fail-any) else fail-any))) in
        {12}let v_464: symmetricstate = catch-fail((if success?((if not-caught-fail(v_460) then (if not-caught-fail(v_461) then (if not-caught-fail(v_462) then symmetricstatepack(v_462,v_461,v_460) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_463) && success?(is-true(success?(1-proj-3-tuple(v_463))))) then symmetricstatepack(1-proj-3-tuple(v_463),2-proj-3-tuple(v_463),hash(3-proj-3-tuple(v_463),empty)) else fail-any) else fail-any)) in
        {13}let v_465: bitstring = catch-fail(symmetricstateunpack(v_464)) in
        {14}let v_466: symmetricstate = catch-fail((if (not-caught-fail(v_465) && success?(is-true(success?(1-proj-3-tuple(v_465))))) then symmetricstatepack(1-proj-3-tuple(v_465),2-proj-3-tuple(v_465),hash(3-proj-3-tuple(v_465),rs_458)) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_464) then (if not-caught-fail(v_466) then handshakestatepack(v_466,s_455,e_456,rs_458,re_459,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {50}get statestore(=alice,=bob,statepack_a(hs_467: handshakestate)) in
        {17}let v_468: bitstring = catch-fail(handshakestateunpack(hs_467)) in
        {18}let v_469: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_470: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_471: keypair = catch-fail((if not-caught-fail(v_470) then keypairpack(v_470,key_e(alice,bob)) else fail-any)) in
        {21}let v_472: bitstring = catch-fail(getpublickey(v_471)) in
        {22}let v_473: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_468))) in
        {23}let v_474: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_468)) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-3-tuple(v_473))))) then symmetricstatepack(1-proj-3-tuple(v_473),2-proj-3-tuple(v_473),hash(3-proj-3-tuple(v_473),v_472)) else fail-any) else fail-any)) in
        {24}let v_475: key = catch-fail(dhexp(key_s(alice),g)) in
        {25}let v_476: keypair = catch-fail((if not-caught-fail(v_475) then keypairpack(v_475,key_s(alice)) else fail-any)) in
        {26}let v_477: bitstring = catch-fail(symmetricstateunpack(v_474)) in
        {27}let v_478: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_477))) in
        {28}let v_479: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_478),2-proj-2-tuple(v_478),3-proj-3-tuple(v_477),getpublickey(v_476))) in
        {29}let v_480: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_477))) in
        {30}let v_481: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_478))) && success?(1-proj-3-tuple(v_477))) then (if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-2-tuple(v_480))))) then cipherstatepack(1-proj-2-tuple(v_480),increment_nonce(2-proj-2-tuple(v_478))) else fail-any) else fail-any)) in
        {31}let v_482: bitstring = catch-fail((if (success?(getpublickey(v_476)) && (success?(3-proj-3-tuple(v_477)) && success?(1-proj-3-tuple(v_477)))) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-2-tuple(v_478))))) then (if not-caught-fail(v_479) then (if not-caught-fail(v_481) then (v_481,v_479) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_483: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_482),2-proj-3-tuple(v_477),3-proj-3-tuple(v_477)))) in
        {33}let v_484: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_482)) && success?(symmetricstatepack(1-proj-2-tuple(v_482),2-proj-3-tuple(v_477),3-proj-3-tuple(v_477)))) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack(1-proj-3-tuple(v_483),2-proj-3-tuple(v_483),hash(3-proj-3-tuple(v_483),2-proj-2-tuple(v_482))) else fail-any) else fail-any)) in
        {34}let v_485: bitstring = catch-fail((if success?(getpublickey(v_476)) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-3-tuple(v_477))))) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-2-tuple(v_482))))) then (if not-caught-fail(v_484) then (v_484,2-proj-2-tuple(v_482)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {35}let v_486: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_485))) in
        {36}let v_487: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_486))) in
        {37}let v_488: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_487),2-proj-2-tuple(v_487),3-proj-3-tuple(v_486),msg_a(alice,bob))) in
        {38}let v_489: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_486))) in
        {39}let v_490: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_487))) && success?(1-proj-3-tuple(v_486))) then (if (not-caught-fail(v_489) && success?(is-true(success?(1-proj-2-tuple(v_489))))) then cipherstatepack(1-proj-2-tuple(v_489),increment_nonce(2-proj-2-tuple(v_487))) else fail-any) else fail-any)) in
        {40}let v_491: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_486)) && success?(1-proj-3-tuple(v_486))) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-2-tuple(v_487))))) then (if not-caught-fail(v_488) then (if not-caught-fail(v_490) then (v_490,v_488) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_492: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_491),2-proj-3-tuple(v_486),3-proj-3-tuple(v_486)))) in
        {42}let v_493: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_491)) && success?(symmetricstatepack(1-proj-2-tuple(v_491),2-proj-3-tuple(v_486),3-proj-3-tuple(v_486)))) then (if (not-caught-fail(v_492) && success?(is-true(success?(1-proj-3-tuple(v_492))))) then symmetricstatepack(1-proj-3-tuple(v_492),2-proj-3-tuple(v_492),hash(3-proj-3-tuple(v_492),2-proj-2-tuple(v_491))) else fail-any) else fail-any)) in
        {43}let v_494: bitstring = catch-fail((if success?(1-proj-2-tuple(v_485)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-3-tuple(v_486))))) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-2-tuple(v_491))))) then (if not-caught-fail(v_493) then (v_493,2-proj-2-tuple(v_491)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {44}let v_495: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_494),v_476,v_471,4-proj-7-tuple(v_468),5-proj-7-tuple(v_468),6-proj-7-tuple(v_468),7-proj-7-tuple(v_468))) in
        {45}let v_496: bitstring = catch-fail(concat3(v_472,2-proj-2-tuple(v_485),2-proj-2-tuple(v_494))) in
        {46}let (hs_497: handshakestate,re_498: key,message_a: bitstring) = (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-7-tuple(v_468))))) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-3-tuple(v_469))))) then (if not-caught-fail(v_471) then (if not-caught-fail(v_472) then (if not-caught-fail(v_474) then (if not-caught-fail(v_476) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-2-tuple(v_485))))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-2-tuple(v_494))))) then (if not-caught-fail(v_495) then (if not-caught-fail(v_496) then (v_495,5-proj-7-tuple(v_468),v_496) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {47}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {48}insert statestore(alice,bob,statepack_b(hs_497));
        {49}out(pub, message_a)
    ) | (
        {86}get statestore(=alice,=bob,statepack_b(hs_499: handshakestate)) in
        {51}in(pub, message_b: bitstring);
        {52}let v_500: bitstring = catch-fail(handshakestateunpack(hs_499)) in
        {53}let v_501: bitstring = catch-fail(deconcat3(message_b)) in
        {54}let v_502: bool = catch-fail(true) in
        {55}let v_503: key = catch-fail(1-proj-3-tuple(v_501)) in
        {56}let v_504: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_500))) in
        {57}let v_505: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_500)) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-3-tuple(v_504))))) then symmetricstatepack(1-proj-3-tuple(v_504),2-proj-3-tuple(v_504),hash(3-proj-3-tuple(v_504),v_503)) else fail-any) else fail-any)) in
        {58}let v_506: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_500))) in
        {59}let v_507: bitstring = catch-fail(symmetricstateunpack(v_505)) in
        {60}let v_508: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_507),(if success?(3-proj-7-tuple(v_500)) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-2-tuple(v_506))))) then dhexp(2-proj-2-tuple(v_506),v_503) else fail-any) else fail-any))) in
        {61}let v_509: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_507),(if success?(3-proj-7-tuple(v_500)) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-2-tuple(v_506))))) then dhexp(2-proj-2-tuple(v_506),v_503) else fail-any) else fail-any))) in
        {62}let v_510: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_507),(if success?(3-proj-7-tuple(v_500)) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-2-tuple(v_506))))) then dhexp(2-proj-2-tuple(v_506),v_503) else fail-any) else fail-any))) in
        {63}let v_511: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_500)) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-2-tuple(v_506))))) then dhexp(2-proj-2-tuple(v_506),v_503) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_507))) then (if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (if not-caught-fail(v_510) then (v_508,v_509,v_510) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {64}let v_512: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_500)) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-2-tuple(v_506))))) then dhexp(2-proj-2-tuple(v_506),v_503) else fail-any) else fail-any)) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-3-tuple(v_511))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_511)) then cipherstatepack(2-proj-3-tuple(v_511),minnonce) else fail-any),1-proj-3-tuple(v_511),3-proj-3-tuple(v_507)) else fail-any) else fail-any) else fail-any)) in
        {65}let v_513: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_500))) in
        {66}let v_514: bitstring = catch-fail(symmetricstateunpack(v_512)) in
        {67}let v_515: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_514),(if (success?(4-proj-7-tuple(v_500)) && success?(3-proj-7-tuple(v_500))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),4-proj-7-tuple(v_500)) else fail-any) else fail-any))) in
        {68}let v_516: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_514),(if (success?(4-proj-7-tuple(v_500)) && success?(3-proj-7-tuple(v_500))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),4-proj-7-tuple(v_500)) else fail-any) else fail-any))) in
        {69}let v_517: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_514),(if (success?(4-proj-7-tuple(v_500)) && success?(3-proj-7-tuple(v_500))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),4-proj-7-tuple(v_500)) else fail-any) else fail-any))) in
        {70}let v_518: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_500)) && success?(3-proj-7-tuple(v_500))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),4-proj-7-tuple(v_500)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_514))) then (if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (if not-caught-fail(v_517) then (v_515,v_516,v_517) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_519: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_500)) && success?(3-proj-7-tuple(v_500))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),4-proj-7-tuple(v_500)) else fail-any) else fail-any)) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_518)) then cipherstatepack(2-proj-3-tuple(v_518),minnonce) else fail-any),1-proj-3-tuple(v_518),3-proj-3-tuple(v_514)) else fail-any) else fail-any) else fail-any)) in
        {72}let v_520: bitstring = catch-fail(symmetricstateunpack(v_519)) in
        {73}let v_521: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_520))) in
        {74}let v_522: aead = catch-fail(decrypt(1-proj-2-tuple(v_521),2-proj-2-tuple(v_521),3-proj-3-tuple(v_520),3-proj-3-tuple(v_501))) in
        {75}let v_523: bitstring = catch-fail(aeadunpack(v_522)) in
        {76}let v_524: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_520))) in
        {77}let v_525: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_521))) && success?(1-proj-3-tuple(v_520))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-2-tuple(v_524))))) then cipherstatepack(1-proj-2-tuple(v_524),increment_nonce(2-proj-2-tuple(v_521))) else fail-any) else fail-any)) in
        {78}let v_526: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_501)) && (success?(3-proj-3-tuple(v_520)) && success?(1-proj-3-tuple(v_520)))) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-2-tuple(v_521))))) then (if not-caught-fail(v_522) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then (if not-caught-fail(v_525) then (v_525,3-proj-3-tuple(v_523),1-proj-3-tuple(v_523)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_527: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_526),2-proj-3-tuple(v_520),3-proj-3-tuple(v_520)))) in
        {80}let v_528: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_501)) && success?(symmetricstatepack(1-proj-3-tuple(v_526),2-proj-3-tuple(v_520),3-proj-3-tuple(v_520)))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack(1-proj-3-tuple(v_527),2-proj-3-tuple(v_527),hash(3-proj-3-tuple(v_527),3-proj-3-tuple(v_501))) else fail-any) else fail-any)) in
        {81}let v_529: bitstring = catch-fail((if success?(3-proj-3-tuple(v_501)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then (if not-caught-fail(v_528) then (v_528,2-proj-3-tuple(v_526),3-proj-3-tuple(v_526)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {82}let v_530: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_529),2-proj-7-tuple(v_500),3-proj-7-tuple(v_500),4-proj-7-tuple(v_500),v_503,6-proj-7-tuple(v_500),7-proj-7-tuple(v_500))) in
        {83}let (hs_531: handshakestate,re_532: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-7-tuple(v_500))))) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-3-tuple(v_501))))) then (if not-caught-fail(v_502) then (if not-caught-fail(v_503) then (if not-caught-fail(v_505) then (if not-caught-fail(v_512) then (if not-caught-fail(v_519) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then (if (v_502 && 3-proj-3-tuple(v_529)) then (if not-caught-fail(v_530) then (v_530,getpublickey(3-proj-7-tuple(v_500)),2-proj-3-tuple(v_529),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {84}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {85}insert statestore(alice,bob,statepack_c(hs_531))
    ) | (
        {119}get statestore(=alice,=bob,statepack_c(hs_533: handshakestate)) in
        {87}let v_534: bitstring = catch-fail(handshakestateunpack(hs_533)) in
        {88}let v_535: bitstring = catch-fail((empty,empty,empty)) in
        {89}let v_536: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_534))) in
        {90}let v_537: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_534))) in
        {91}let v_538: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_537),(if (success?(5-proj-7-tuple(v_534)) && success?(2-proj-7-tuple(v_534))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_534)) else fail-any) else fail-any))) in
        {92}let v_539: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_537),(if (success?(5-proj-7-tuple(v_534)) && success?(2-proj-7-tuple(v_534))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_534)) else fail-any) else fail-any))) in
        {93}let v_540: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_537),(if (success?(5-proj-7-tuple(v_534)) && success?(2-proj-7-tuple(v_534))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_534)) else fail-any) else fail-any))) in
        {94}let v_541: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_534)) && success?(2-proj-7-tuple(v_534))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_534)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_537))) then (if not-caught-fail(v_538) then (if not-caught-fail(v_539) then (if not-caught-fail(v_540) then (v_538,v_539,v_540) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_542: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_534)) && success?(2-proj-7-tuple(v_534))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_534)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_534))) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_541)) then cipherstatepack(2-proj-3-tuple(v_541),minnonce) else fail-any),1-proj-3-tuple(v_541),3-proj-3-tuple(v_537)) else fail-any) else fail-any) else fail-any)) in
        {96}let v_543: bitstring = catch-fail(symmetricstateunpack(v_542)) in
        {97}let v_544: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_543))) in
        {98}let v_545: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_544),2-proj-2-tuple(v_544),3-proj-3-tuple(v_543),msg_c(alice,bob))) in
        {99}let v_546: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_543))) in
        {100}let v_547: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_544))) && success?(1-proj-3-tuple(v_543))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then cipherstatepack(1-proj-2-tuple(v_546),increment_nonce(2-proj-2-tuple(v_544))) else fail-any) else fail-any)) in
        {101}let v_548: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_543)) && success?(1-proj-3-tuple(v_543))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_547) then (v_547,v_545) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_549: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_548),2-proj-3-tuple(v_543),3-proj-3-tuple(v_543)))) in
        {103}let v_550: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_548)) && success?(symmetricstatepack(1-proj-2-tuple(v_548),2-proj-3-tuple(v_543),3-proj-3-tuple(v_543)))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then symmetricstatepack(1-proj-3-tuple(v_549),2-proj-3-tuple(v_549),hash(3-proj-3-tuple(v_549),2-proj-2-tuple(v_548))) else fail-any) else fail-any)) in
        {104}let v_551: bitstring = catch-fail((if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then (if not-caught-fail(v_550) then (v_550,2-proj-2-tuple(v_548)) else fail-any) else fail-any) else fail-any)) in
        {105}let v_552: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_551),2-proj-7-tuple(v_534),3-proj-7-tuple(v_534),4-proj-7-tuple(v_534),5-proj-7-tuple(v_534),6-proj-7-tuple(v_534),7-proj-7-tuple(v_534))) in
        {106}let v_553: bitstring = catch-fail(concat3(1-proj-3-tuple(v_535),2-proj-3-tuple(v_535),2-proj-2-tuple(v_551))) in
        {107}let v_554: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_551))) in
        {108}let v_555: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_554),zero)) in
        {109}let v_556: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_554),zero)) in
        {110}let v_557: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_554),zero)) in
        {111}let v_558: bitstring = catch-fail((if success?(2-proj-3-tuple(v_554)) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (if not-caught-fail(v_557) then (v_555,v_556,v_557) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {112}let v_559: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_558)) then cipherstatepack(1-proj-3-tuple(v_558),minnonce) else fail-any)) in
        {113}let v_560: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_558)) then cipherstatepack(2-proj-3-tuple(v_558),minnonce) else fail-any)) in
        {114}let v_561: bitstring = catch-fail((if success?(1-proj-2-tuple(v_551)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (1-proj-2-tuple(v_551),v_559,v_560) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let (hs_562: handshakestate,re_563: key,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-7-tuple(v_534))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if not-caught-fail(v_542) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (v_552,5-proj-7-tuple(v_534),v_553,2-proj-3-tuple(v_561),3-proj-3-tuple(v_561)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {116}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {117}insert statestore(alice,bob,statepack_d(hs_562));
        {118}out(pub, message_c)
    ) | (
        {120}event LeakS(phase0,alice);
        {121}out(pub, key_s(alice))
    ) | (
        {122}phase 1;
        {123}event LeakS(phase1,alice);
        {124}out(pub, key_s(alice))
    )
) | (
    {125}let s_564: keypair = keypairpack(empty,empty) in
    {126}out(pub, getpublickey(s_564));
    (
        {127}let e_565: keypair = keypairpack(empty,empty) in
        {128}let v_566: key = catch-fail(dhexp(key_s(charlie),g)) in
        {129}let rs_567: key = getpublickey((if not-caught-fail(v_566) then keypairpack(v_566,key_s(charlie)) else fail-any)) in
        {130}let re_568: key = empty in
        {131}let v_569: bitstring = catch-fail(hash(somename,empty)) in
        {132}let v_570: key = catch-fail(v_569) in
        {133}let v_571: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {134}let v_572: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then symmetricstatepack(v_571,v_570,v_569) else fail-any) else fail-any) else fail-any))) in
        {135}let v_573: symmetricstate = catch-fail((if success?((if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then symmetricstatepack(v_571,v_570,v_569) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then symmetricstatepack(1-proj-3-tuple(v_572),2-proj-3-tuple(v_572),hash(3-proj-3-tuple(v_572),empty)) else fail-any) else fail-any)) in
        {136}let v_574: bitstring = catch-fail(symmetricstateunpack(v_573)) in
        {137}let v_575: symmetricstate = catch-fail((if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),hash(3-proj-3-tuple(v_574),rs_567)) else fail-any)) in
        {138}let hs_576: handshakestate = (if not-caught-fail(v_573) then (if not-caught-fail(v_575) then handshakestatepack(v_575,s_564,e_565,rs_567,re_568,empty,true) else fail-any) else fail-any) in
        {139}insert statestore(alice,charlie,statepack_a(hs_576))
    ) | (
        {173}get statestore(=alice,=charlie,statepack_a(hs_577: handshakestate)) in
        {140}let v_578: bitstring = catch-fail(handshakestateunpack(hs_577)) in
        {141}let v_579: bitstring = catch-fail((empty,empty,empty)) in
        {142}let v_580: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {143}let v_581: keypair = catch-fail((if not-caught-fail(v_580) then keypairpack(v_580,key_e(alice,charlie)) else fail-any)) in
        {144}let v_582: bitstring = catch-fail(getpublickey(v_581)) in
        {145}let v_583: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_578))) in
        {146}let v_584: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_578)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then symmetricstatepack(1-proj-3-tuple(v_583),2-proj-3-tuple(v_583),hash(3-proj-3-tuple(v_583),v_582)) else fail-any) else fail-any)) in
        {147}let v_585: key = catch-fail(dhexp(key_s(alice),g)) in
        {148}let v_586: keypair = catch-fail((if not-caught-fail(v_585) then keypairpack(v_585,key_s(alice)) else fail-any)) in
        {149}let v_587: bitstring = catch-fail(symmetricstateunpack(v_584)) in
        {150}let v_588: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {151}let v_589: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_588),2-proj-2-tuple(v_588),3-proj-3-tuple(v_587),getpublickey(v_586))) in
        {152}let v_590: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {153}let v_591: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_588))) && success?(1-proj-3-tuple(v_587))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then cipherstatepack(1-proj-2-tuple(v_590),increment_nonce(2-proj-2-tuple(v_588))) else fail-any) else fail-any)) in
        {154}let v_592: bitstring = catch-fail((if (success?(getpublickey(v_586)) && (success?(3-proj-3-tuple(v_587)) && success?(1-proj-3-tuple(v_587)))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_591) then (v_591,v_589) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {155}let v_593: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_592),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) in
        {156}let v_594: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_592)) && success?(symmetricstatepack(1-proj-2-tuple(v_592),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_593),hash(3-proj-3-tuple(v_593),2-proj-2-tuple(v_592))) else fail-any) else fail-any)) in
        {157}let v_595: bitstring = catch-fail((if success?(getpublickey(v_586)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then (if not-caught-fail(v_594) then (v_594,2-proj-2-tuple(v_592)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {158}let v_596: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_595))) in
        {159}let v_597: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_596))) in
        {160}let v_598: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_597),2-proj-2-tuple(v_597),3-proj-3-tuple(v_596),msg_a(alice,charlie))) in
        {161}let v_599: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_596))) in
        {162}let v_600: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_597))) && success?(1-proj-3-tuple(v_596))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then cipherstatepack(1-proj-2-tuple(v_599),increment_nonce(2-proj-2-tuple(v_597))) else fail-any) else fail-any)) in
        {163}let v_601: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_596)) && success?(1-proj-3-tuple(v_596))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then (if not-caught-fail(v_598) then (if not-caught-fail(v_600) then (v_600,v_598) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {164}let v_602: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_601),2-proj-3-tuple(v_596),3-proj-3-tuple(v_596)))) in
        {165}let v_603: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_601)) && success?(symmetricstatepack(1-proj-2-tuple(v_601),2-proj-3-tuple(v_596),3-proj-3-tuple(v_596)))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then symmetricstatepack(1-proj-3-tuple(v_602),2-proj-3-tuple(v_602),hash(3-proj-3-tuple(v_602),2-proj-2-tuple(v_601))) else fail-any) else fail-any)) in
        {166}let v_604: bitstring = catch-fail((if success?(1-proj-2-tuple(v_595)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then (if not-caught-fail(v_603) then (v_603,2-proj-2-tuple(v_601)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {167}let v_605: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_604),v_586,v_581,4-proj-7-tuple(v_578),5-proj-7-tuple(v_578),6-proj-7-tuple(v_578),7-proj-7-tuple(v_578))) in
        {168}let v_606: bitstring = catch-fail(concat3(v_582,2-proj-2-tuple(v_595),2-proj-2-tuple(v_604))) in
        {169}let (hs_607: handshakestate,re_608: key,message_a_609: bitstring) = (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-7-tuple(v_578))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_581) then (if not-caught-fail(v_582) then (if not-caught-fail(v_584) then (if not-caught-fail(v_586) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then (v_605,5-proj-7-tuple(v_578),v_606) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {170}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {171}insert statestore(alice,charlie,statepack_b(hs_607));
        {172}out(pub, message_a_609)
    ) | (
        {209}get statestore(=alice,=charlie,statepack_b(hs_610: handshakestate)) in
        {174}in(pub, message_b_611: bitstring);
        {175}let v_612: bitstring = catch-fail(handshakestateunpack(hs_610)) in
        {176}let v_613: bitstring = catch-fail(deconcat3(message_b_611)) in
        {177}let v_614: bool = catch-fail(true) in
        {178}let v_615: key = catch-fail(1-proj-3-tuple(v_613)) in
        {179}let v_616: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_612))) in
        {180}let v_617: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_612)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack(1-proj-3-tuple(v_616),2-proj-3-tuple(v_616),hash(3-proj-3-tuple(v_616),v_615)) else fail-any) else fail-any)) in
        {181}let v_618: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_612))) in
        {182}let v_619: bitstring = catch-fail(symmetricstateunpack(v_617)) in
        {183}let v_620: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_619),(if success?(3-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any))) in
        {184}let v_621: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_619),(if success?(3-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any))) in
        {185}let v_622: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_619),(if success?(3-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any))) in
        {186}let v_623: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_619))) then (if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (v_620,v_621,v_622) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {187}let v_624: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any)) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_623)) then cipherstatepack(2-proj-3-tuple(v_623),minnonce) else fail-any),1-proj-3-tuple(v_623),3-proj-3-tuple(v_619)) else fail-any) else fail-any) else fail-any)) in
        {188}let v_625: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_612))) in
        {189}let v_626: bitstring = catch-fail(symmetricstateunpack(v_624)) in
        {190}let v_627: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_626),(if (success?(4-proj-7-tuple(v_612)) && success?(3-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any))) in
        {191}let v_628: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_626),(if (success?(4-proj-7-tuple(v_612)) && success?(3-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any))) in
        {192}let v_629: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_626),(if (success?(4-proj-7-tuple(v_612)) && success?(3-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any))) in
        {193}let v_630: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_612)) && success?(3-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_626))) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (v_627,v_628,v_629) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_631: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_612)) && success?(3-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_630)) then cipherstatepack(2-proj-3-tuple(v_630),minnonce) else fail-any),1-proj-3-tuple(v_630),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any)) in
        {195}let v_632: bitstring = catch-fail(symmetricstateunpack(v_631)) in
        {196}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_632))) in
        {197}let v_634: aead = catch-fail(decrypt(1-proj-2-tuple(v_633),2-proj-2-tuple(v_633),3-proj-3-tuple(v_632),3-proj-3-tuple(v_613))) in
        {198}let v_635: bitstring = catch-fail(aeadunpack(v_634)) in
        {199}let v_636: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_632))) in
        {200}let v_637: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_633))) && success?(1-proj-3-tuple(v_632))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then cipherstatepack(1-proj-2-tuple(v_636),increment_nonce(2-proj-2-tuple(v_633))) else fail-any) else fail-any)) in
        {201}let v_638: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_613)) && (success?(3-proj-3-tuple(v_632)) && success?(1-proj-3-tuple(v_632)))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then (if not-caught-fail(v_634) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,3-proj-3-tuple(v_635),1-proj-3-tuple(v_635)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_639: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_632),3-proj-3-tuple(v_632)))) in
        {203}let v_640: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_613)) && success?(symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_632),3-proj-3-tuple(v_632)))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then symmetricstatepack(1-proj-3-tuple(v_639),2-proj-3-tuple(v_639),hash(3-proj-3-tuple(v_639),3-proj-3-tuple(v_613))) else fail-any) else fail-any)) in
        {204}let v_641: bitstring = catch-fail((if success?(3-proj-3-tuple(v_613)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_640) then (v_640,2-proj-3-tuple(v_638),3-proj-3-tuple(v_638)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {205}let v_642: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_641),2-proj-7-tuple(v_612),3-proj-7-tuple(v_612),4-proj-7-tuple(v_612),v_615,6-proj-7-tuple(v_612),7-proj-7-tuple(v_612))) in
        {206}let (hs_643: handshakestate,re_644: key,plaintext_b_645: bitstring,valid_646: bool) = (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-7-tuple(v_612))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then (if not-caught-fail(v_617) then (if not-caught-fail(v_624) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (v_614 && 3-proj-3-tuple(v_641)) then (if not-caught-fail(v_642) then (v_642,getpublickey(3-proj-7-tuple(v_612)),2-proj-3-tuple(v_641),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {207}event RecvMsg(alice,charlie,stage_b,plaintext_b_645,valid_646);
        {208}insert statestore(alice,charlie,statepack_c(hs_643))
    ) | (
        {242}get statestore(=alice,=charlie,statepack_c(hs_647: handshakestate)) in
        {210}let v_648: bitstring = catch-fail(handshakestateunpack(hs_647)) in
        {211}let v_649: bitstring = catch-fail((empty,empty,empty)) in
        {212}let v_650: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_648))) in
        {213}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_648))) in
        {214}let v_652: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_651),(if (success?(5-proj-7-tuple(v_648)) && success?(2-proj-7-tuple(v_648))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_648)) else fail-any) else fail-any))) in
        {215}let v_653: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_651),(if (success?(5-proj-7-tuple(v_648)) && success?(2-proj-7-tuple(v_648))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_648)) else fail-any) else fail-any))) in
        {216}let v_654: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_651),(if (success?(5-proj-7-tuple(v_648)) && success?(2-proj-7-tuple(v_648))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_648)) else fail-any) else fail-any))) in
        {217}let v_655: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_648)) && success?(2-proj-7-tuple(v_648))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_648)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_651))) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (v_652,v_653,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_656: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_648)) && success?(2-proj-7-tuple(v_648))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_648)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_648))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_655)) then cipherstatepack(2-proj-3-tuple(v_655),minnonce) else fail-any),1-proj-3-tuple(v_655),3-proj-3-tuple(v_651)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_657: bitstring = catch-fail(symmetricstateunpack(v_656)) in
        {220}let v_658: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_657))) in
        {221}let v_659: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_658),2-proj-2-tuple(v_658),3-proj-3-tuple(v_657),msg_c(alice,charlie))) in
        {222}let v_660: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_657))) in
        {223}let v_661: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_658))) && success?(1-proj-3-tuple(v_657))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then cipherstatepack(1-proj-2-tuple(v_660),increment_nonce(2-proj-2-tuple(v_658))) else fail-any) else fail-any)) in
        {224}let v_662: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_657)) && success?(1-proj-3-tuple(v_657))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-2-tuple(v_658))))) then (if not-caught-fail(v_659) then (if not-caught-fail(v_661) then (v_661,v_659) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_663: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_662),2-proj-3-tuple(v_657),3-proj-3-tuple(v_657)))) in
        {226}let v_664: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_662)) && success?(symmetricstatepack(1-proj-2-tuple(v_662),2-proj-3-tuple(v_657),3-proj-3-tuple(v_657)))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then symmetricstatepack(1-proj-3-tuple(v_663),2-proj-3-tuple(v_663),hash(3-proj-3-tuple(v_663),2-proj-2-tuple(v_662))) else fail-any) else fail-any)) in
        {227}let v_665: bitstring = catch-fail((if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then (if not-caught-fail(v_664) then (v_664,2-proj-2-tuple(v_662)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_666: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_665),2-proj-7-tuple(v_648),3-proj-7-tuple(v_648),4-proj-7-tuple(v_648),5-proj-7-tuple(v_648),6-proj-7-tuple(v_648),7-proj-7-tuple(v_648))) in
        {229}let v_667: bitstring = catch-fail(concat3(1-proj-3-tuple(v_649),2-proj-3-tuple(v_649),2-proj-2-tuple(v_665))) in
        {230}let v_668: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_665))) in
        {231}let v_669: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_668),zero)) in
        {232}let v_670: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_668),zero)) in
        {233}let v_671: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_668),zero)) in
        {234}let v_672: bitstring = catch-fail((if success?(2-proj-3-tuple(v_668)) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (if not-caught-fail(v_671) then (v_669,v_670,v_671) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {235}let v_673: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_672)) then cipherstatepack(1-proj-3-tuple(v_672),minnonce) else fail-any)) in
        {236}let v_674: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_672)) then cipherstatepack(2-proj-3-tuple(v_672),minnonce) else fail-any)) in
        {237}let v_675: bitstring = catch-fail((if success?(1-proj-2-tuple(v_665)) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then (if not-caught-fail(v_673) then (if not-caught-fail(v_674) then (1-proj-2-tuple(v_665),v_673,v_674) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let (hs_676: handshakestate,re_677: key,message_c_678: bitstring,cs1_679: cipherstate,cs2_680: cipherstate) = (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-7-tuple(v_648))))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if not-caught-fail(v_656) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-2-tuple(v_665))))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (v_666,5-proj-7-tuple(v_648),v_667,2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {239}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {240}insert statestore(alice,charlie,statepack_d(hs_676));
        {241}out(pub, message_c_678)
    ) | (
        {243}event LeakS(phase0,alice);
        {244}out(pub, key_s(alice))
    ) | (
        {245}phase 1;
        {246}event LeakS(phase1,alice);
        {247}out(pub, key_s(alice))
    )
) | (
    {248}let v_681: key = catch-fail(dhexp(key_s(bob),g)) in
    {249}let s_682: keypair = (if not-caught-fail(v_681) then keypairpack(v_681,key_s(bob)) else fail-any) in
    {250}out(pub, getpublickey(s_682));
    (
        {251}let e_683: keypair = keypairpack(empty,empty) in
        {252}let rs_684: key = empty in
        {253}let re_685: key = empty in
        {254}let v_686: bitstring = catch-fail(hash(somename,empty)) in
        {255}let v_687: key = catch-fail(v_686) in
        {256}let v_688: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {257}let v_689: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_686) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then symmetricstatepack(v_688,v_687,v_686) else fail-any) else fail-any) else fail-any))) in
        {258}let v_690: symmetricstate = catch-fail((if success?((if not-caught-fail(v_686) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then symmetricstatepack(v_688,v_687,v_686) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then symmetricstatepack(1-proj-3-tuple(v_689),2-proj-3-tuple(v_689),hash(3-proj-3-tuple(v_689),empty)) else fail-any) else fail-any)) in
        {259}let v_691: bitstring = catch-fail(symmetricstateunpack(v_690)) in
        {260}let v_692: symmetricstate = catch-fail((if success?(getpublickey(s_682)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then symmetricstatepack(1-proj-3-tuple(v_691),2-proj-3-tuple(v_691),hash(3-proj-3-tuple(v_691),getpublickey(s_682))) else fail-any) else fail-any)) in
        {261}let hs_693: handshakestate = (if not-caught-fail(v_690) then (if not-caught-fail(v_692) then handshakestatepack(v_692,s_682,e_683,rs_684,re_685,empty,false) else fail-any) else fail-any) in
        {262}insert statestore(bob,alice,statepack_a(hs_693))
    ) | (
        {296}get statestore(=bob,=alice,statepack_a(hs_694: handshakestate)) in
        {263}in(pub, message_a_695: bitstring);
        {264}let v_696: bitstring = catch-fail(handshakestateunpack(hs_694)) in
        {265}let v_697: bitstring = catch-fail(deconcat3(message_a_695)) in
        {266}let v_698: bool = catch-fail(true) in
        {267}let v_699: key = catch-fail(1-proj-3-tuple(v_697)) in
        {268}let v_700: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_696))) in
        {269}let v_701: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_696)) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_700),hash(3-proj-3-tuple(v_700),v_699)) else fail-any) else fail-any)) in
        {270}let v_702: bitstring = catch-fail(symmetricstateunpack(v_701)) in
        {271}let v_703: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {272}let v_704: aead = catch-fail(decrypt(1-proj-2-tuple(v_703),2-proj-2-tuple(v_703),3-proj-3-tuple(v_702),2-proj-3-tuple(v_697))) in
        {273}let v_705: bitstring = catch-fail(aeadunpack(v_704)) in
        {274}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {275}let v_707: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_703))) && success?(1-proj-3-tuple(v_702))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then cipherstatepack(1-proj-2-tuple(v_706),increment_nonce(2-proj-2-tuple(v_703))) else fail-any) else fail-any)) in
        {276}let v_708: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_697)) && (success?(3-proj-3-tuple(v_702)) && success?(1-proj-3-tuple(v_702)))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then (if not-caught-fail(v_704) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if not-caught-fail(v_707) then (v_707,3-proj-3-tuple(v_705),1-proj-3-tuple(v_705)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_709: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) in
        {278}let v_710: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_697)) && success?(symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),2-proj-3-tuple(v_697))) else fail-any) else fail-any)) in
        {279}let v_711: bitstring = catch-fail((if success?(2-proj-3-tuple(v_697)) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_710) then (v_710,2-proj-3-tuple(v_708),3-proj-3-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_712: key = catch-fail(2-proj-3-tuple(v_711)) in
        {281}let v_713: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_711))) in
        {282}let v_714: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_713))) in
        {283}let v_715: aead = catch-fail(decrypt(1-proj-2-tuple(v_714),2-proj-2-tuple(v_714),3-proj-3-tuple(v_713),3-proj-3-tuple(v_697))) in
        {284}let v_716: bitstring = catch-fail(aeadunpack(v_715)) in
        {285}let v_717: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_713))) in
        {286}let v_718: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_714))) && success?(1-proj-3-tuple(v_713))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then cipherstatepack(1-proj-2-tuple(v_717),increment_nonce(2-proj-2-tuple(v_714))) else fail-any) else fail-any)) in
        {287}let v_719: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_697)) && (success?(3-proj-3-tuple(v_713)) && success?(1-proj-3-tuple(v_713)))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then (if not-caught-fail(v_715) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if not-caught-fail(v_718) then (v_718,3-proj-3-tuple(v_716),1-proj-3-tuple(v_716)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {288}let v_720: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_713),3-proj-3-tuple(v_713)))) in
        {289}let v_721: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_697)) && success?(symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_713),3-proj-3-tuple(v_713)))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then symmetricstatepack(1-proj-3-tuple(v_720),2-proj-3-tuple(v_720),hash(3-proj-3-tuple(v_720),3-proj-3-tuple(v_697))) else fail-any) else fail-any)) in
        {290}let v_722: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_697)) && success?(1-proj-3-tuple(v_711))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then (if not-caught-fail(v_721) then (v_721,2-proj-3-tuple(v_719),3-proj-3-tuple(v_719)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {291}let v_723: key = catch-fail(dhexp(key_s(alice),g)) in
        {292}let v_724: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_722),2-proj-7-tuple(v_696),3-proj-7-tuple(v_696),v_712,v_699,6-proj-7-tuple(v_696),7-proj-7-tuple(v_696))) in
        {293}let (hs_725: handshakestate,re_726: key,plaintext_a: bitstring,valid_727: bool) = (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-7-tuple(v_696))))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (if not-caught-fail(v_701) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if not-caught-fail(v_712) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then (if ((3-proj-3-tuple(v_711) && 3-proj-3-tuple(v_722)) && (v_712 = getpublickey((if not-caught-fail(v_723) then keypairpack(v_723,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_724) then (v_724,getpublickey(3-proj-7-tuple(v_696)),2-proj-3-tuple(v_722),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {294}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_727);
        {295}insert statestore(bob,alice,statepack_b(hs_725))
    ) | (
        {333}get statestore(=bob,=alice,statepack_b(hs_728: handshakestate)) in
        {297}let v_729: bitstring = catch-fail(handshakestateunpack(hs_728)) in
        {298}let v_730: bitstring = catch-fail((empty,empty,empty)) in
        {299}let v_731: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {300}let v_732: keypair = catch-fail((if not-caught-fail(v_731) then keypairpack(v_731,key_e(bob,alice)) else fail-any)) in
        {301}let v_733: bitstring = catch-fail(getpublickey(v_732)) in
        {302}let v_734: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_729))) in
        {303}let v_735: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_729)) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),v_733)) else fail-any) else fail-any)) in
        {304}let v_736: bitstring = catch-fail(keypairunpack(v_732)) in
        {305}let v_737: bitstring = catch-fail(symmetricstateunpack(v_735)) in
        {306}let v_738: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_737),(if success?(5-proj-7-tuple(v_729)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),5-proj-7-tuple(v_729)) else fail-any) else fail-any))) in
        {307}let v_739: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_737),(if success?(5-proj-7-tuple(v_729)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),5-proj-7-tuple(v_729)) else fail-any) else fail-any))) in
        {308}let v_740: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_737),(if success?(5-proj-7-tuple(v_729)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),5-proj-7-tuple(v_729)) else fail-any) else fail-any))) in
        {309}let v_741: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_729)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),5-proj-7-tuple(v_729)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_737))) then (if not-caught-fail(v_738) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (v_738,v_739,v_740) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {310}let v_742: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_729)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),5-proj-7-tuple(v_729)) else fail-any) else fail-any)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_741)) then cipherstatepack(2-proj-3-tuple(v_741),minnonce) else fail-any),1-proj-3-tuple(v_741),3-proj-3-tuple(v_737)) else fail-any) else fail-any) else fail-any)) in
        {311}let v_743: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_729))) in
        {312}let v_744: bitstring = catch-fail(symmetricstateunpack(v_742)) in
        {313}let v_745: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_744),(if (success?(5-proj-7-tuple(v_729)) && success?(2-proj-7-tuple(v_729))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_729)) else fail-any) else fail-any))) in
        {314}let v_746: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_744),(if (success?(5-proj-7-tuple(v_729)) && success?(2-proj-7-tuple(v_729))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_729)) else fail-any) else fail-any))) in
        {315}let v_747: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_744),(if (success?(5-proj-7-tuple(v_729)) && success?(2-proj-7-tuple(v_729))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_729)) else fail-any) else fail-any))) in
        {316}let v_748: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_729)) && success?(2-proj-7-tuple(v_729))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_729)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_744))) then (if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (v_745,v_746,v_747) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {317}let v_749: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_729)) && success?(2-proj-7-tuple(v_729))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_729)) else fail-any) else fail-any)) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_748)) then cipherstatepack(2-proj-3-tuple(v_748),minnonce) else fail-any),1-proj-3-tuple(v_748),3-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any)) in
        {318}let v_750: bitstring = catch-fail(symmetricstateunpack(v_749)) in
        {319}let v_751: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {320}let v_752: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_751),2-proj-2-tuple(v_751),3-proj-3-tuple(v_750),msg_b(bob,alice))) in
        {321}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {322}let v_754: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_751))) && success?(1-proj-3-tuple(v_750))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then cipherstatepack(1-proj-2-tuple(v_753),increment_nonce(2-proj-2-tuple(v_751))) else fail-any) else fail-any)) in
        {323}let v_755: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_750)) && success?(1-proj-3-tuple(v_750))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then (if not-caught-fail(v_752) then (if not-caught-fail(v_754) then (v_754,v_752) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {324}let v_756: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_755),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) in
        {325}let v_757: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_755)) && success?(symmetricstatepack(1-proj-2-tuple(v_755),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_756),hash(3-proj-3-tuple(v_756),2-proj-2-tuple(v_755))) else fail-any) else fail-any)) in
        {326}let v_758: bitstring = catch-fail((if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then (if not-caught-fail(v_757) then (v_757,2-proj-2-tuple(v_755)) else fail-any) else fail-any) else fail-any)) in
        {327}let v_759: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_758),2-proj-7-tuple(v_729),v_732,4-proj-7-tuple(v_729),5-proj-7-tuple(v_729),6-proj-7-tuple(v_729),7-proj-7-tuple(v_729))) in
        {328}let v_760: bitstring = catch-fail(concat3(v_733,2-proj-3-tuple(v_730),2-proj-2-tuple(v_758))) in
        {329}let (hs_761: handshakestate,re_762: key,message_b_763: bitstring) = (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-7-tuple(v_729))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_735) then (if not-caught-fail(v_742) then (if not-caught-fail(v_749) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then (if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (v_759,5-proj-7-tuple(v_729),v_760) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {330}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {331}insert statestore(bob,alice,statepack_c(hs_761));
        {332}out(pub, message_b_763)
    ) | (
        {368}get statestore(=bob,=alice,statepack_c(hs_764: handshakestate)) in
        {334}in(pub, message_c_765: bitstring);
        {335}let v_766: bitstring = catch-fail(handshakestateunpack(hs_764)) in
        {336}let v_767: bitstring = catch-fail(deconcat3(message_c_765)) in
        {337}let v_768: bool = catch-fail(true) in
        {338}let v_769: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_766))) in
        {339}let v_770: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_766))) in
        {340}let v_771: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_770),(if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any))) in
        {341}let v_772: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_770),(if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any))) in
        {342}let v_773: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_770),(if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any))) in
        {343}let v_774: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_770))) then (if not-caught-fail(v_771) then (if not-caught-fail(v_772) then (if not-caught-fail(v_773) then (v_771,v_772,v_773) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {344}let v_775: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_766))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_774)) then cipherstatepack(2-proj-3-tuple(v_774),minnonce) else fail-any),1-proj-3-tuple(v_774),3-proj-3-tuple(v_770)) else fail-any) else fail-any) else fail-any)) in
        {345}let v_776: bitstring = catch-fail(symmetricstateunpack(v_775)) in
        {346}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {347}let v_778: aead = catch-fail(decrypt(1-proj-2-tuple(v_777),2-proj-2-tuple(v_777),3-proj-3-tuple(v_776),3-proj-3-tuple(v_767))) in
        {348}let v_779: bitstring = catch-fail(aeadunpack(v_778)) in
        {349}let v_780: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {350}let v_781: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_777))) && success?(1-proj-3-tuple(v_776))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then cipherstatepack(1-proj-2-tuple(v_780),increment_nonce(2-proj-2-tuple(v_777))) else fail-any) else fail-any)) in
        {351}let v_782: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_767)) && (success?(3-proj-3-tuple(v_776)) && success?(1-proj-3-tuple(v_776)))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then (if not-caught-fail(v_778) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,3-proj-3-tuple(v_779),1-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_783: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) in
        {353}let v_784: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_767)) && success?(symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then symmetricstatepack(1-proj-3-tuple(v_783),2-proj-3-tuple(v_783),hash(3-proj-3-tuple(v_783),3-proj-3-tuple(v_767))) else fail-any) else fail-any)) in
        {354}let v_785: bitstring = catch-fail((if success?(3-proj-3-tuple(v_767)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_784) then (v_784,2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_786: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_785),2-proj-7-tuple(v_766),3-proj-7-tuple(v_766),4-proj-7-tuple(v_766),5-proj-7-tuple(v_766),6-proj-7-tuple(v_766),7-proj-7-tuple(v_766))) in
        {356}let v_787: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_785))) in
        {357}let v_788: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_787),zero)) in
        {358}let v_789: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_787),zero)) in
        {359}let v_790: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_787),zero)) in
        {360}let v_791: bitstring = catch-fail((if success?(2-proj-3-tuple(v_787)) then (if not-caught-fail(v_788) then (if not-caught-fail(v_789) then (if not-caught-fail(v_790) then (v_788,v_789,v_790) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let v_792: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_791)) then cipherstatepack(1-proj-3-tuple(v_791),minnonce) else fail-any)) in
        {362}let v_793: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_791)) then cipherstatepack(2-proj-3-tuple(v_791),minnonce) else fail-any)) in
        {363}let v_794: bitstring = catch-fail((if success?(1-proj-3-tuple(v_785)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (1-proj-3-tuple(v_785),v_792,v_793) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {364}let (hs_795: handshakestate,re_796: key,plaintext_c: bitstring,valid_797: bool,cs1_798: cipherstate,cs2_799: cipherstate) = (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-7-tuple(v_766))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if not-caught-fail(v_768) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if (v_768 && 3-proj-3-tuple(v_785)) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (v_786,getpublickey(3-proj-7-tuple(v_766)),2-proj-3-tuple(v_785),true,2-proj-3-tuple(v_794),3-proj-3-tuple(v_794)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {365}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_797);
        {366}insert statestore(bob,alice,statepack_d(hs_795));
        {367}event RecvEnd(valid_797)
    ) | (
        {369}event LeakS(phase0,bob);
        {370}out(pub, key_s(bob))
    ) | (
        {371}phase 1;
        {372}event LeakS(phase1,bob);
        {373}out(pub, key_s(bob))
    )
) | (
    {374}let v_800: key = catch-fail(dhexp(key_s(bob),g)) in
    {375}let s_801: keypair = (if not-caught-fail(v_800) then keypairpack(v_800,key_s(bob)) else fail-any) in
    {376}out(pub, getpublickey(s_801));
    (
        {377}let e_802: keypair = keypairpack(empty,empty) in
        {378}let rs_803: key = empty in
        {379}let re_804: key = empty in
        {380}let v_805: bitstring = catch-fail(hash(somename,empty)) in
        {381}let v_806: key = catch-fail(v_805) in
        {382}let v_807: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {383}let v_808: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_805) then (if not-caught-fail(v_806) then (if not-caught-fail(v_807) then symmetricstatepack(v_807,v_806,v_805) else fail-any) else fail-any) else fail-any))) in
        {384}let v_809: symmetricstate = catch-fail((if success?((if not-caught-fail(v_805) then (if not-caught-fail(v_806) then (if not-caught-fail(v_807) then symmetricstatepack(v_807,v_806,v_805) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),hash(3-proj-3-tuple(v_808),empty)) else fail-any) else fail-any)) in
        {385}let v_810: bitstring = catch-fail(symmetricstateunpack(v_809)) in
        {386}let v_811: symmetricstate = catch-fail((if success?(getpublickey(s_801)) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),getpublickey(s_801))) else fail-any) else fail-any)) in
        {387}let hs_812: handshakestate = (if not-caught-fail(v_809) then (if not-caught-fail(v_811) then handshakestatepack(v_811,s_801,e_802,rs_803,re_804,empty,false) else fail-any) else fail-any) in
        {388}insert statestore(bob,charlie,statepack_a(hs_812))
    ) | (
        {422}get statestore(=bob,=charlie,statepack_a(hs_813: handshakestate)) in
        {389}in(pub, message_a_814: bitstring);
        {390}let v_815: bitstring = catch-fail(handshakestateunpack(hs_813)) in
        {391}let v_816: bitstring = catch-fail(deconcat3(message_a_814)) in
        {392}let v_817: bool = catch-fail(true) in
        {393}let v_818: key = catch-fail(1-proj-3-tuple(v_816)) in
        {394}let v_819: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_815))) in
        {395}let v_820: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_815)) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),hash(3-proj-3-tuple(v_819),v_818)) else fail-any) else fail-any)) in
        {396}let v_821: bitstring = catch-fail(symmetricstateunpack(v_820)) in
        {397}let v_822: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {398}let v_823: aead = catch-fail(decrypt(1-proj-2-tuple(v_822),2-proj-2-tuple(v_822),3-proj-3-tuple(v_821),2-proj-3-tuple(v_816))) in
        {399}let v_824: bitstring = catch-fail(aeadunpack(v_823)) in
        {400}let v_825: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {401}let v_826: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_822))) && success?(1-proj-3-tuple(v_821))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then cipherstatepack(1-proj-2-tuple(v_825),increment_nonce(2-proj-2-tuple(v_822))) else fail-any) else fail-any)) in
        {402}let v_827: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_816)) && (success?(3-proj-3-tuple(v_821)) && success?(1-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-2-tuple(v_822))))) then (if not-caught-fail(v_823) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if not-caught-fail(v_826) then (v_826,3-proj-3-tuple(v_824),1-proj-3-tuple(v_824)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {403}let v_828: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) in
        {404}let v_829: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_816)) && success?(symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_828),hash(3-proj-3-tuple(v_828),2-proj-3-tuple(v_816))) else fail-any) else fail-any)) in
        {405}let v_830: bitstring = catch-fail((if success?(2-proj-3-tuple(v_816)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_829) then (v_829,2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {406}let v_831: key = catch-fail(2-proj-3-tuple(v_830)) in
        {407}let v_832: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_830))) in
        {408}let v_833: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
        {409}let v_834: aead = catch-fail(decrypt(1-proj-2-tuple(v_833),2-proj-2-tuple(v_833),3-proj-3-tuple(v_832),3-proj-3-tuple(v_816))) in
        {410}let v_835: bitstring = catch-fail(aeadunpack(v_834)) in
        {411}let v_836: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
        {412}let v_837: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_833))) && success?(1-proj-3-tuple(v_832))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then cipherstatepack(1-proj-2-tuple(v_836),increment_nonce(2-proj-2-tuple(v_833))) else fail-any) else fail-any)) in
        {413}let v_838: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_816)) && (success?(3-proj-3-tuple(v_832)) && success?(1-proj-3-tuple(v_832)))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then (if not-caught-fail(v_834) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_837) then (v_837,3-proj-3-tuple(v_835),1-proj-3-tuple(v_835)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {414}let v_839: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) in
        {415}let v_840: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_816)) && success?(symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then symmetricstatepack(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),hash(3-proj-3-tuple(v_839),3-proj-3-tuple(v_816))) else fail-any) else fail-any)) in
        {416}let v_841: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_816)) && success?(1-proj-3-tuple(v_830))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (if not-caught-fail(v_840) then (v_840,2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {417}let v_842: key = catch-fail(dhexp(key_s(charlie),g)) in
        {418}let v_843: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_841),2-proj-7-tuple(v_815),3-proj-7-tuple(v_815),v_831,v_818,6-proj-7-tuple(v_815),7-proj-7-tuple(v_815))) in
        {419}let (hs_844: handshakestate,re_845: key,plaintext_a_846: bitstring,valid_847: bool) = (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-7-tuple(v_815))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (if not-caught-fail(v_820) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if not-caught-fail(v_831) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if ((3-proj-3-tuple(v_830) && 3-proj-3-tuple(v_841)) && (v_831 = getpublickey((if not-caught-fail(v_842) then keypairpack(v_842,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_843) then (v_843,getpublickey(3-proj-7-tuple(v_815)),2-proj-3-tuple(v_841),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {420}event RecvMsg(bob,charlie,stage_a,plaintext_a_846,valid_847);
        {421}insert statestore(bob,charlie,statepack_b(hs_844))
    ) | (
        {459}get statestore(=bob,=charlie,statepack_b(hs_848: handshakestate)) in
        {423}let v_849: bitstring = catch-fail(handshakestateunpack(hs_848)) in
        {424}let v_850: bitstring = catch-fail((empty,empty,empty)) in
        {425}let v_851: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {426}let v_852: keypair = catch-fail((if not-caught-fail(v_851) then keypairpack(v_851,key_e(bob,charlie)) else fail-any)) in
        {427}let v_853: bitstring = catch-fail(getpublickey(v_852)) in
        {428}let v_854: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_849))) in
        {429}let v_855: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_849)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_854),hash(3-proj-3-tuple(v_854),v_853)) else fail-any) else fail-any)) in
        {430}let v_856: bitstring = catch-fail(keypairunpack(v_852)) in
        {431}let v_857: bitstring = catch-fail(symmetricstateunpack(v_855)) in
        {432}let v_858: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_857),(if success?(5-proj-7-tuple(v_849)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),5-proj-7-tuple(v_849)) else fail-any) else fail-any))) in
        {433}let v_859: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_857),(if success?(5-proj-7-tuple(v_849)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),5-proj-7-tuple(v_849)) else fail-any) else fail-any))) in
        {434}let v_860: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_857),(if success?(5-proj-7-tuple(v_849)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),5-proj-7-tuple(v_849)) else fail-any) else fail-any))) in
        {435}let v_861: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_849)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),5-proj-7-tuple(v_849)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_857))) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then (v_858,v_859,v_860) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_862: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_849)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then dhexp(2-proj-2-tuple(v_856),5-proj-7-tuple(v_849)) else fail-any) else fail-any)) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_861)) then cipherstatepack(2-proj-3-tuple(v_861),minnonce) else fail-any),1-proj-3-tuple(v_861),3-proj-3-tuple(v_857)) else fail-any) else fail-any) else fail-any)) in
        {437}let v_863: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_849))) in
        {438}let v_864: bitstring = catch-fail(symmetricstateunpack(v_862)) in
        {439}let v_865: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_864),(if (success?(5-proj-7-tuple(v_849)) && success?(2-proj-7-tuple(v_849))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then dhexp(2-proj-2-tuple(v_863),5-proj-7-tuple(v_849)) else fail-any) else fail-any))) in
        {440}let v_866: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_864),(if (success?(5-proj-7-tuple(v_849)) && success?(2-proj-7-tuple(v_849))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then dhexp(2-proj-2-tuple(v_863),5-proj-7-tuple(v_849)) else fail-any) else fail-any))) in
        {441}let v_867: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_864),(if (success?(5-proj-7-tuple(v_849)) && success?(2-proj-7-tuple(v_849))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then dhexp(2-proj-2-tuple(v_863),5-proj-7-tuple(v_849)) else fail-any) else fail-any))) in
        {442}let v_868: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_849)) && success?(2-proj-7-tuple(v_849))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then dhexp(2-proj-2-tuple(v_863),5-proj-7-tuple(v_849)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_864))) then (if not-caught-fail(v_865) then (if not-caught-fail(v_866) then (if not-caught-fail(v_867) then (v_865,v_866,v_867) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_869: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_849)) && success?(2-proj-7-tuple(v_849))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then dhexp(2-proj-2-tuple(v_863),5-proj-7-tuple(v_849)) else fail-any) else fail-any)) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_868)) then cipherstatepack(2-proj-3-tuple(v_868),minnonce) else fail-any),1-proj-3-tuple(v_868),3-proj-3-tuple(v_864)) else fail-any) else fail-any) else fail-any)) in
        {444}let v_870: bitstring = catch-fail(symmetricstateunpack(v_869)) in
        {445}let v_871: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_870))) in
        {446}let v_872: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_871),2-proj-2-tuple(v_871),3-proj-3-tuple(v_870),msg_b(bob,charlie))) in
        {447}let v_873: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_870))) in
        {448}let v_874: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_871))) && success?(1-proj-3-tuple(v_870))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then cipherstatepack(1-proj-2-tuple(v_873),increment_nonce(2-proj-2-tuple(v_871))) else fail-any) else fail-any)) in
        {449}let v_875: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_870)) && success?(1-proj-3-tuple(v_870))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then (if not-caught-fail(v_872) then (if not-caught-fail(v_874) then (v_874,v_872) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_876: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_875),2-proj-3-tuple(v_870),3-proj-3-tuple(v_870)))) in
        {451}let v_877: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_875)) && success?(symmetricstatepack(1-proj-2-tuple(v_875),2-proj-3-tuple(v_870),3-proj-3-tuple(v_870)))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then symmetricstatepack(1-proj-3-tuple(v_876),2-proj-3-tuple(v_876),hash(3-proj-3-tuple(v_876),2-proj-2-tuple(v_875))) else fail-any) else fail-any)) in
        {452}let v_878: bitstring = catch-fail((if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-2-tuple(v_875))))) then (if not-caught-fail(v_877) then (v_877,2-proj-2-tuple(v_875)) else fail-any) else fail-any) else fail-any)) in
        {453}let v_879: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_878),2-proj-7-tuple(v_849),v_852,4-proj-7-tuple(v_849),5-proj-7-tuple(v_849),6-proj-7-tuple(v_849),7-proj-7-tuple(v_849))) in
        {454}let v_880: bitstring = catch-fail(concat3(v_853,2-proj-3-tuple(v_850),2-proj-2-tuple(v_878))) in
        {455}let (hs_881: handshakestate,re_882: key,message_b_883: bitstring) = (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-7-tuple(v_849))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if not-caught-fail(v_852) then (if not-caught-fail(v_853) then (if not-caught-fail(v_855) then (if not-caught-fail(v_862) then (if not-caught-fail(v_869) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then (if not-caught-fail(v_879) then (if not-caught-fail(v_880) then (v_879,5-proj-7-tuple(v_849),v_880) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {456}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {457}insert statestore(bob,charlie,statepack_c(hs_881));
        {458}out(pub, message_b_883)
    ) | (
        {494}get statestore(=bob,=charlie,statepack_c(hs_884: handshakestate)) in
        {460}in(pub, message_c_885: bitstring);
        {461}let v_886: bitstring = catch-fail(handshakestateunpack(hs_884)) in
        {462}let v_887: bitstring = catch-fail(deconcat3(message_c_885)) in
        {463}let v_888: bool = catch-fail(true) in
        {464}let v_889: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_886))) in
        {465}let v_890: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_886))) in
        {466}let v_891: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_890),(if (success?(4-proj-7-tuple(v_886)) && success?(3-proj-7-tuple(v_886))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then dhexp(2-proj-2-tuple(v_889),4-proj-7-tuple(v_886)) else fail-any) else fail-any))) in
        {467}let v_892: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_890),(if (success?(4-proj-7-tuple(v_886)) && success?(3-proj-7-tuple(v_886))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then dhexp(2-proj-2-tuple(v_889),4-proj-7-tuple(v_886)) else fail-any) else fail-any))) in
        {468}let v_893: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_890),(if (success?(4-proj-7-tuple(v_886)) && success?(3-proj-7-tuple(v_886))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then dhexp(2-proj-2-tuple(v_889),4-proj-7-tuple(v_886)) else fail-any) else fail-any))) in
        {469}let v_894: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_886)) && success?(3-proj-7-tuple(v_886))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then dhexp(2-proj-2-tuple(v_889),4-proj-7-tuple(v_886)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_890))) then (if not-caught-fail(v_891) then (if not-caught-fail(v_892) then (if not-caught-fail(v_893) then (v_891,v_892,v_893) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {470}let v_895: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_886)) && success?(3-proj-7-tuple(v_886))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then dhexp(2-proj-2-tuple(v_889),4-proj-7-tuple(v_886)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_886))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_894)) then cipherstatepack(2-proj-3-tuple(v_894),minnonce) else fail-any),1-proj-3-tuple(v_894),3-proj-3-tuple(v_890)) else fail-any) else fail-any) else fail-any)) in
        {471}let v_896: bitstring = catch-fail(symmetricstateunpack(v_895)) in
        {472}let v_897: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_896))) in
        {473}let v_898: aead = catch-fail(decrypt(1-proj-2-tuple(v_897),2-proj-2-tuple(v_897),3-proj-3-tuple(v_896),3-proj-3-tuple(v_887))) in
        {474}let v_899: bitstring = catch-fail(aeadunpack(v_898)) in
        {475}let v_900: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_896))) in
        {476}let v_901: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_897))) && success?(1-proj-3-tuple(v_896))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then cipherstatepack(1-proj-2-tuple(v_900),increment_nonce(2-proj-2-tuple(v_897))) else fail-any) else fail-any)) in
        {477}let v_902: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_887)) && (success?(3-proj-3-tuple(v_896)) && success?(1-proj-3-tuple(v_896)))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then (if not-caught-fail(v_898) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (if not-caught-fail(v_901) then (v_901,3-proj-3-tuple(v_899),1-proj-3-tuple(v_899)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {478}let v_903: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_902),2-proj-3-tuple(v_896),3-proj-3-tuple(v_896)))) in
        {479}let v_904: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_887)) && success?(symmetricstatepack(1-proj-3-tuple(v_902),2-proj-3-tuple(v_896),3-proj-3-tuple(v_896)))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then symmetricstatepack(1-proj-3-tuple(v_903),2-proj-3-tuple(v_903),hash(3-proj-3-tuple(v_903),3-proj-3-tuple(v_887))) else fail-any) else fail-any)) in
        {480}let v_905: bitstring = catch-fail((if success?(3-proj-3-tuple(v_887)) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if not-caught-fail(v_904) then (v_904,2-proj-3-tuple(v_902),3-proj-3-tuple(v_902)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {481}let v_906: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_905),2-proj-7-tuple(v_886),3-proj-7-tuple(v_886),4-proj-7-tuple(v_886),5-proj-7-tuple(v_886),6-proj-7-tuple(v_886),7-proj-7-tuple(v_886))) in
        {482}let v_907: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_905))) in
        {483}let v_908: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_907),zero)) in
        {484}let v_909: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_907),zero)) in
        {485}let v_910: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_907),zero)) in
        {486}let v_911: bitstring = catch-fail((if success?(2-proj-3-tuple(v_907)) then (if not-caught-fail(v_908) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (v_908,v_909,v_910) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {487}let v_912: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_911)) then cipherstatepack(1-proj-3-tuple(v_911),minnonce) else fail-any)) in
        {488}let v_913: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_911)) then cipherstatepack(2-proj-3-tuple(v_911),minnonce) else fail-any)) in
        {489}let v_914: bitstring = catch-fail((if success?(1-proj-3-tuple(v_905)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then (1-proj-3-tuple(v_905),v_912,v_913) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {490}let (hs_915: handshakestate,re_916: key,plaintext_c_917: bitstring,valid_918: bool,cs1_919: cipherstate,cs2_920: cipherstate) = (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-7-tuple(v_886))))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_895) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if (v_888 && 3-proj-3-tuple(v_905)) then (if not-caught-fail(v_906) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (v_906,getpublickey(3-proj-7-tuple(v_886)),2-proj-3-tuple(v_905),true,2-proj-3-tuple(v_914),3-proj-3-tuple(v_914)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {491}event RecvMsg(bob,charlie,stage_c,plaintext_c_917,valid_918);
        {492}insert statestore(bob,charlie,statepack_d(hs_915));
        {493}event RecvEnd(valid_918)
    ) | (
        {495}event LeakS(phase0,bob);
        {496}out(pub, key_s(bob))
    ) | (
        {497}phase 1;
        {498}event LeakS(phase1,bob);
        {499}out(pub, key_s(bob))
    )
) | (
    {500}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 178 rules in the queue.
400 rules inserted. The rule base contains 390 rules. 19 rules in the queue.
600 rules inserted. The rule base contains 569 rules. 89 rules in the queue.
800 rules inserted. The rule base contains 743 rules. 76 rules in the queue.
1000 rules inserted. The rule base contains 842 rules. 71 rules in the queue.
1200 rules inserted. The rule base contains 945 rules. 76 rules in the queue.
1400 rules inserted. The rule base contains 1101 rules. 120 rules in the queue.
1600 rules inserted. The rule base contains 1250 rules. 143 rules in the queue.
1800 rules inserted. The rule base contains 1382 rules. 127 rules in the queue.
2000 rules inserted. The rule base contains 1539 rules. 123 rules in the queue.
2200 rules inserted. The rule base contains 1707 rules. 142 rules in the queue.
2400 rules inserted. The rule base contains 1855 rules. 161 rules in the queue.
2600 rules inserted. The rule base contains 1961 rules. 138 rules in the queue.
2800 rules inserted. The rule base contains 1997 rules. 24 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {250}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

21. By 20, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {250}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

21. By 20, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {250}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

21. By 20, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {250}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. By 17, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

19. By 10, the attacker may know empty.
By 18, the attacker may know increment_nonce(minnonce).
By 16, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

21. By 20, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {262}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {296}.
The message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) that may be sent on channel pub by 3 may be received at input {263}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {295}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 4 may be read at get {333}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {330}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {331}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 6 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {48}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {262}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 9 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {296}.
The message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) that may be sent on channel pub by 10 may be received at input {263}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {295}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 11 may be read at get {333}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {330}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {332}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 7 may be read at get {86}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {51}.
We have dhexp(key_e(bob,alice),g) <> caught-fail.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {85}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {119}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {116}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on channel pub at output {118}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))) that may be sent on channel pub by 14 may be received at input {334}.
So event RecvEnd(true) may be executed at {367}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
