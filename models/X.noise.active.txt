File "X.noise.active.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.active.pv", line 263, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.active.pv", line 264, character 36:
Warning: identifier h rebound.
File "X.noise.active.pv", line 273, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.active.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 279, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 305, character 6:
Warning: identifier e rebound.
File "X.noise.active.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "X.noise.active.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 310, character 6:
Warning: identifier s rebound.
File "X.noise.active.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 311, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X.noise.active.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X.noise.active.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "X.noise.active.pv", line 323, characters 6-7:
Warning: identifier re rebound.
File "X.noise.active.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 327, characters 48-53:
Warning: identifier valid1 rebound.
File "X.noise.active.pv", line 328, characters 6-7:
Warning: identifier rs rebound.
File "X.noise.active.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 332, characters 7-8:
Warning: identifier hs rebound.
File "X.noise.active.pv", line 399, characters 8-9:
Warning: identifier hs rebound.
File "X.noise.active.pv", line 305, character 6:
Warning: identifier e rebound.
File "X.noise.active.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "X.noise.active.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 310, character 6:
Warning: identifier s rebound.
File "X.noise.active.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 311, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X.noise.active.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X.noise.active.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "X.noise.active.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.active.pv", line 273, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.active.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.active.pv", line 273, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.active.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 427, characters 8-9:
Warning: identifier hs rebound.
File "X.noise.active.pv", line 323, characters 6-7:
Warning: identifier re rebound.
File "X.noise.active.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 327, characters 48-53:
Warning: identifier valid1 rebound.
File "X.noise.active.pv", line 328, characters 6-7:
Warning: identifier rs rebound.
File "X.noise.active.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 332, characters 7-8:
Warning: identifier hs rebound.
File "X.noise.active.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.active.pv", line 279, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.active.pv", line 279, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.active.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_352: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_352));
    (
        {4}let e_353: keypair = keypairpack(empty,empty) in
        {5}let v_354: key = catch-fail(dhexp(key_s(bob),g)) in
        {6}let rs_355: key = getpublickey((if not-caught-fail(v_354) then keypairpack(v_354,key_s(bob)) else fail-any)) in
        {7}let re_356: key = empty in
        {8}let v_357: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_358: key = catch-fail(v_357) in
        {10}let v_359: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_360: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_357) then (if not-caught-fail(v_358) then (if not-caught-fail(v_359) then symmetricstatepack(v_359,v_358,v_357) else fail-any) else fail-any) else fail-any))) in
        {12}let v_361: symmetricstate = catch-fail((if success?((if not-caught-fail(v_357) then (if not-caught-fail(v_358) then (if not-caught-fail(v_359) then symmetricstatepack(v_359,v_358,v_357) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-3-tuple(v_360))))) then symmetricstatepack(1-proj-3-tuple(v_360),2-proj-3-tuple(v_360),hash(3-proj-3-tuple(v_360),empty)) else fail-any) else fail-any)) in
        {13}let v_362: bitstring = catch-fail(symmetricstateunpack(v_361)) in
        {14}let v_363: symmetricstate = catch-fail((if (not-caught-fail(v_362) && success?(is-true(success?(1-proj-3-tuple(v_362))))) then symmetricstatepack(1-proj-3-tuple(v_362),2-proj-3-tuple(v_362),hash(3-proj-3-tuple(v_362),rs_355)) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_361) then (if not-caught-fail(v_363) then handshakestatepack(v_363,s_352,e_353,rs_355,re_356,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {72}get statestore(=alice,=bob,statepack_a(hs_364: handshakestate)) in
        {17}let v_365: bitstring = catch-fail(handshakestateunpack(hs_364)) in
        {18}let v_366: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_367: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_368: keypair = catch-fail((if not-caught-fail(v_367) then keypairpack(v_367,key_e(alice,bob)) else fail-any)) in
        {21}let v_369: bitstring = catch-fail(getpublickey(v_368)) in
        {22}let v_370: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_365))) in
        {23}let v_371: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_365)) then (if (not-caught-fail(v_370) && success?(is-true(success?(1-proj-3-tuple(v_370))))) then symmetricstatepack(1-proj-3-tuple(v_370),2-proj-3-tuple(v_370),hash(3-proj-3-tuple(v_370),v_369)) else fail-any) else fail-any)) in
        {24}let v_372: bitstring = catch-fail(keypairunpack(v_368)) in
        {25}let v_373: bitstring = catch-fail(symmetricstateunpack(v_371)) in
        {26}let v_374: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_373),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {27}let v_375: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_373),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {28}let v_376: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_373),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {29}let v_377: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_373))) then (if not-caught-fail(v_374) then (if not-caught-fail(v_375) then (if not-caught-fail(v_376) then (v_374,v_375,v_376) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_378: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any)) then (if (not-caught-fail(v_373) && success?(is-true(success?(1-proj-3-tuple(v_373))))) then (if (not-caught-fail(v_377) && success?(is-true(success?(1-proj-3-tuple(v_377))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_377)) then cipherstatepack(2-proj-3-tuple(v_377),minnonce) else fail-any),1-proj-3-tuple(v_377),3-proj-3-tuple(v_373)) else fail-any) else fail-any) else fail-any)) in
        {31}let v_379: key = catch-fail(dhexp(key_s(alice),g)) in
        {32}let v_380: keypair = catch-fail((if not-caught-fail(v_379) then keypairpack(v_379,key_s(alice)) else fail-any)) in
        {33}let v_381: bitstring = catch-fail(symmetricstateunpack(v_378)) in
        {34}let v_382: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_381))) in
        {35}let v_383: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_382),2-proj-2-tuple(v_382),3-proj-3-tuple(v_381),getpublickey(v_380))) in
        {36}let v_384: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_381))) in
        {37}let v_385: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_382))) && success?(1-proj-3-tuple(v_381))) then (if (not-caught-fail(v_384) && success?(is-true(success?(1-proj-2-tuple(v_384))))) then cipherstatepack(1-proj-2-tuple(v_384),increment_nonce(2-proj-2-tuple(v_382))) else fail-any) else fail-any)) in
        {38}let v_386: bitstring = catch-fail((if (success?(getpublickey(v_380)) && (success?(3-proj-3-tuple(v_381)) && success?(1-proj-3-tuple(v_381)))) then (if (not-caught-fail(v_382) && success?(is-true(success?(1-proj-2-tuple(v_382))))) then (if not-caught-fail(v_383) then (if not-caught-fail(v_385) then (v_385,v_383) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {39}let v_387: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_386),2-proj-3-tuple(v_381),3-proj-3-tuple(v_381)))) in
        {40}let v_388: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_386)) && success?(symmetricstatepack(1-proj-2-tuple(v_386),2-proj-3-tuple(v_381),3-proj-3-tuple(v_381)))) then (if (not-caught-fail(v_387) && success?(is-true(success?(1-proj-3-tuple(v_387))))) then symmetricstatepack(1-proj-3-tuple(v_387),2-proj-3-tuple(v_387),hash(3-proj-3-tuple(v_387),2-proj-2-tuple(v_386))) else fail-any) else fail-any)) in
        {41}let v_389: bitstring = catch-fail((if success?(getpublickey(v_380)) then (if (not-caught-fail(v_381) && success?(is-true(success?(1-proj-3-tuple(v_381))))) then (if (not-caught-fail(v_386) && success?(is-true(success?(1-proj-2-tuple(v_386))))) then (if not-caught-fail(v_388) then (v_388,2-proj-2-tuple(v_386)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_390: bitstring = catch-fail(keypairunpack(v_380)) in
        {43}let v_391: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_389))) in
        {44}let v_392: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_391),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {45}let v_393: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_391),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {46}let v_394: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_391),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {47}let v_395: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_391))) then (if not-caught-fail(v_392) then (if not-caught-fail(v_393) then (if not-caught-fail(v_394) then (v_392,v_393,v_394) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {48}let v_396: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_389))) then (if (not-caught-fail(v_391) && success?(is-true(success?(1-proj-3-tuple(v_391))))) then (if (not-caught-fail(v_395) && success?(is-true(success?(1-proj-3-tuple(v_395))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_395)) then cipherstatepack(2-proj-3-tuple(v_395),minnonce) else fail-any),1-proj-3-tuple(v_395),3-proj-3-tuple(v_391)) else fail-any) else fail-any) else fail-any)) in
        {49}let v_397: bitstring = catch-fail(symmetricstateunpack(v_396)) in
        {50}let v_398: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_397))) in
        {51}let v_399: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_398),2-proj-2-tuple(v_398),3-proj-3-tuple(v_397),msg_a(alice,bob))) in
        {52}let v_400: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_397))) in
        {53}let v_401: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_398))) && success?(1-proj-3-tuple(v_397))) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-2-tuple(v_400))))) then cipherstatepack(1-proj-2-tuple(v_400),increment_nonce(2-proj-2-tuple(v_398))) else fail-any) else fail-any)) in
        {54}let v_402: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_397)) && success?(1-proj-3-tuple(v_397))) then (if (not-caught-fail(v_398) && success?(is-true(success?(1-proj-2-tuple(v_398))))) then (if not-caught-fail(v_399) then (if not-caught-fail(v_401) then (v_401,v_399) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_403: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_402),2-proj-3-tuple(v_397),3-proj-3-tuple(v_397)))) in
        {56}let v_404: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_402)) && success?(symmetricstatepack(1-proj-2-tuple(v_402),2-proj-3-tuple(v_397),3-proj-3-tuple(v_397)))) then (if (not-caught-fail(v_403) && success?(is-true(success?(1-proj-3-tuple(v_403))))) then symmetricstatepack(1-proj-3-tuple(v_403),2-proj-3-tuple(v_403),hash(3-proj-3-tuple(v_403),2-proj-2-tuple(v_402))) else fail-any) else fail-any)) in
        {57}let v_405: bitstring = catch-fail((if (not-caught-fail(v_397) && success?(is-true(success?(1-proj-3-tuple(v_397))))) then (if (not-caught-fail(v_402) && success?(is-true(success?(1-proj-2-tuple(v_402))))) then (if not-caught-fail(v_404) then (v_404,2-proj-2-tuple(v_402)) else fail-any) else fail-any) else fail-any)) in
        {58}let v_406: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_405),v_380,v_368,4-proj-7-tuple(v_365),5-proj-7-tuple(v_365),6-proj-7-tuple(v_365),7-proj-7-tuple(v_365))) in
        {59}let v_407: bitstring = catch-fail(concat3(v_369,2-proj-2-tuple(v_389),2-proj-2-tuple(v_405))) in
        {60}let v_408: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_405))) in
        {61}let v_409: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_408),zero)) in
        {62}let v_410: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_408),zero)) in
        {63}let v_411: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_408),zero)) in
        {64}let v_412: bitstring = catch-fail((if success?(2-proj-3-tuple(v_408)) then (if not-caught-fail(v_409) then (if not-caught-fail(v_410) then (if not-caught-fail(v_411) then (v_409,v_410,v_411) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_413: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_412)) then cipherstatepack(1-proj-3-tuple(v_412),minnonce) else fail-any)) in
        {66}let v_414: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_412)) then cipherstatepack(2-proj-3-tuple(v_412),minnonce) else fail-any)) in
        {67}let v_415: bitstring = catch-fail((if success?(1-proj-2-tuple(v_405)) then (if (not-caught-fail(v_408) && success?(is-true(success?(1-proj-3-tuple(v_408))))) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-3-tuple(v_412))))) then (if not-caught-fail(v_413) then (if not-caught-fail(v_414) then (1-proj-2-tuple(v_405),v_413,v_414) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let (hs_416: handshakestate,re_417: key,message_a: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_365) && success?(is-true(success?(1-proj-7-tuple(v_365))))) then (if (not-caught-fail(v_366) && success?(is-true(success?(1-proj-3-tuple(v_366))))) then (if not-caught-fail(v_368) then (if not-caught-fail(v_369) then (if not-caught-fail(v_371) then (if not-caught-fail(v_378) then (if not-caught-fail(v_380) then (if (not-caught-fail(v_389) && success?(is-true(success?(1-proj-2-tuple(v_389))))) then (if not-caught-fail(v_396) then (if (not-caught-fail(v_405) && success?(is-true(success?(1-proj-2-tuple(v_405))))) then (if not-caught-fail(v_406) then (if not-caught-fail(v_407) then (if (not-caught-fail(v_415) && success?(is-true(success?(1-proj-3-tuple(v_415))))) then (v_406,5-proj-7-tuple(v_365),v_407,2-proj-3-tuple(v_415),3-proj-3-tuple(v_415)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {69}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {70}insert statestore(alice,bob,statepack_b(hs_416));
        {71}out(pub, message_a)
    ) | (
        {73}event LeakS(phase0,alice);
        {74}out(pub, key_s(alice))
    ) | (
        {75}phase 1;
        {76}event LeakS(phase1,alice);
        {77}out(pub, key_s(alice))
    )
) | (
    {78}let s_418: keypair = keypairpack(empty,empty) in
    {79}out(pub, getpublickey(s_418));
    (
        {80}let e_419: keypair = keypairpack(empty,empty) in
        {81}let v_420: key = catch-fail(dhexp(key_s(charlie),g)) in
        {82}let rs_421: key = getpublickey((if not-caught-fail(v_420) then keypairpack(v_420,key_s(charlie)) else fail-any)) in
        {83}let re_422: key = empty in
        {84}let v_423: bitstring = catch-fail(hash(somename,empty)) in
        {85}let v_424: key = catch-fail(v_423) in
        {86}let v_425: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {87}let v_426: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_423) then (if not-caught-fail(v_424) then (if not-caught-fail(v_425) then symmetricstatepack(v_425,v_424,v_423) else fail-any) else fail-any) else fail-any))) in
        {88}let v_427: symmetricstate = catch-fail((if success?((if not-caught-fail(v_423) then (if not-caught-fail(v_424) then (if not-caught-fail(v_425) then symmetricstatepack(v_425,v_424,v_423) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_426) && success?(is-true(success?(1-proj-3-tuple(v_426))))) then symmetricstatepack(1-proj-3-tuple(v_426),2-proj-3-tuple(v_426),hash(3-proj-3-tuple(v_426),empty)) else fail-any) else fail-any)) in
        {89}let v_428: bitstring = catch-fail(symmetricstateunpack(v_427)) in
        {90}let v_429: symmetricstate = catch-fail((if (not-caught-fail(v_428) && success?(is-true(success?(1-proj-3-tuple(v_428))))) then symmetricstatepack(1-proj-3-tuple(v_428),2-proj-3-tuple(v_428),hash(3-proj-3-tuple(v_428),rs_421)) else fail-any)) in
        {91}let hs_430: handshakestate = (if not-caught-fail(v_427) then (if not-caught-fail(v_429) then handshakestatepack(v_429,s_418,e_419,rs_421,re_422,empty,true) else fail-any) else fail-any) in
        {92}insert statestore(alice,charlie,statepack_a(hs_430))
    ) | (
        {148}get statestore(=alice,=charlie,statepack_a(hs_431: handshakestate)) in
        {93}let v_432: bitstring = catch-fail(handshakestateunpack(hs_431)) in
        {94}let v_433: bitstring = catch-fail((empty,empty,empty)) in
        {95}let v_434: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {96}let v_435: keypair = catch-fail((if not-caught-fail(v_434) then keypairpack(v_434,key_e(alice,charlie)) else fail-any)) in
        {97}let v_436: bitstring = catch-fail(getpublickey(v_435)) in
        {98}let v_437: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_432))) in
        {99}let v_438: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_432)) then (if (not-caught-fail(v_437) && success?(is-true(success?(1-proj-3-tuple(v_437))))) then symmetricstatepack(1-proj-3-tuple(v_437),2-proj-3-tuple(v_437),hash(3-proj-3-tuple(v_437),v_436)) else fail-any) else fail-any)) in
        {100}let v_439: bitstring = catch-fail(keypairunpack(v_435)) in
        {101}let v_440: bitstring = catch-fail(symmetricstateunpack(v_438)) in
        {102}let v_441: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_440),(if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {103}let v_442: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_440),(if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {104}let v_443: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_440),(if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {105}let v_444: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_440))) then (if not-caught-fail(v_441) then (if not-caught-fail(v_442) then (if not-caught-fail(v_443) then (v_441,v_442,v_443) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {106}let v_445: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then dhexp(2-proj-2-tuple(v_439),4-proj-7-tuple(v_432)) else fail-any) else fail-any)) then (if (not-caught-fail(v_440) && success?(is-true(success?(1-proj-3-tuple(v_440))))) then (if (not-caught-fail(v_444) && success?(is-true(success?(1-proj-3-tuple(v_444))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_444)) then cipherstatepack(2-proj-3-tuple(v_444),minnonce) else fail-any),1-proj-3-tuple(v_444),3-proj-3-tuple(v_440)) else fail-any) else fail-any) else fail-any)) in
        {107}let v_446: key = catch-fail(dhexp(key_s(alice),g)) in
        {108}let v_447: keypair = catch-fail((if not-caught-fail(v_446) then keypairpack(v_446,key_s(alice)) else fail-any)) in
        {109}let v_448: bitstring = catch-fail(symmetricstateunpack(v_445)) in
        {110}let v_449: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_448))) in
        {111}let v_450: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_449),2-proj-2-tuple(v_449),3-proj-3-tuple(v_448),getpublickey(v_447))) in
        {112}let v_451: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_448))) in
        {113}let v_452: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_449))) && success?(1-proj-3-tuple(v_448))) then (if (not-caught-fail(v_451) && success?(is-true(success?(1-proj-2-tuple(v_451))))) then cipherstatepack(1-proj-2-tuple(v_451),increment_nonce(2-proj-2-tuple(v_449))) else fail-any) else fail-any)) in
        {114}let v_453: bitstring = catch-fail((if (success?(getpublickey(v_447)) && (success?(3-proj-3-tuple(v_448)) && success?(1-proj-3-tuple(v_448)))) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-2-tuple(v_449))))) then (if not-caught-fail(v_450) then (if not-caught-fail(v_452) then (v_452,v_450) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_454: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_453),2-proj-3-tuple(v_448),3-proj-3-tuple(v_448)))) in
        {116}let v_455: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_453)) && success?(symmetricstatepack(1-proj-2-tuple(v_453),2-proj-3-tuple(v_448),3-proj-3-tuple(v_448)))) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-3-tuple(v_454))))) then symmetricstatepack(1-proj-3-tuple(v_454),2-proj-3-tuple(v_454),hash(3-proj-3-tuple(v_454),2-proj-2-tuple(v_453))) else fail-any) else fail-any)) in
        {117}let v_456: bitstring = catch-fail((if success?(getpublickey(v_447)) then (if (not-caught-fail(v_448) && success?(is-true(success?(1-proj-3-tuple(v_448))))) then (if (not-caught-fail(v_453) && success?(is-true(success?(1-proj-2-tuple(v_453))))) then (if not-caught-fail(v_455) then (v_455,2-proj-2-tuple(v_453)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_457: bitstring = catch-fail(keypairunpack(v_447)) in
        {119}let v_458: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_456))) in
        {120}let v_459: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_458),(if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-2-tuple(v_457))))) then dhexp(2-proj-2-tuple(v_457),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {121}let v_460: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_458),(if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-2-tuple(v_457))))) then dhexp(2-proj-2-tuple(v_457),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {122}let v_461: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_458),(if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-2-tuple(v_457))))) then dhexp(2-proj-2-tuple(v_457),4-proj-7-tuple(v_432)) else fail-any) else fail-any))) in
        {123}let v_462: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-2-tuple(v_457))))) then dhexp(2-proj-2-tuple(v_457),4-proj-7-tuple(v_432)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_458))) then (if not-caught-fail(v_459) then (if not-caught-fail(v_460) then (if not-caught-fail(v_461) then (v_459,v_460,v_461) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_463: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_432)) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-2-tuple(v_457))))) then dhexp(2-proj-2-tuple(v_457),4-proj-7-tuple(v_432)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_456))) then (if (not-caught-fail(v_458) && success?(is-true(success?(1-proj-3-tuple(v_458))))) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-3-tuple(v_462))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_462)) then cipherstatepack(2-proj-3-tuple(v_462),minnonce) else fail-any),1-proj-3-tuple(v_462),3-proj-3-tuple(v_458)) else fail-any) else fail-any) else fail-any)) in
        {125}let v_464: bitstring = catch-fail(symmetricstateunpack(v_463)) in
        {126}let v_465: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_464))) in
        {127}let v_466: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_465),2-proj-2-tuple(v_465),3-proj-3-tuple(v_464),msg_a(alice,charlie))) in
        {128}let v_467: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_464))) in
        {129}let v_468: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_465))) && success?(1-proj-3-tuple(v_464))) then (if (not-caught-fail(v_467) && success?(is-true(success?(1-proj-2-tuple(v_467))))) then cipherstatepack(1-proj-2-tuple(v_467),increment_nonce(2-proj-2-tuple(v_465))) else fail-any) else fail-any)) in
        {130}let v_469: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_464)) && success?(1-proj-3-tuple(v_464))) then (if (not-caught-fail(v_465) && success?(is-true(success?(1-proj-2-tuple(v_465))))) then (if not-caught-fail(v_466) then (if not-caught-fail(v_468) then (v_468,v_466) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {131}let v_470: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_469),2-proj-3-tuple(v_464),3-proj-3-tuple(v_464)))) in
        {132}let v_471: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_469)) && success?(symmetricstatepack(1-proj-2-tuple(v_469),2-proj-3-tuple(v_464),3-proj-3-tuple(v_464)))) then (if (not-caught-fail(v_470) && success?(is-true(success?(1-proj-3-tuple(v_470))))) then symmetricstatepack(1-proj-3-tuple(v_470),2-proj-3-tuple(v_470),hash(3-proj-3-tuple(v_470),2-proj-2-tuple(v_469))) else fail-any) else fail-any)) in
        {133}let v_472: bitstring = catch-fail((if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-3-tuple(v_464))))) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-2-tuple(v_469))))) then (if not-caught-fail(v_471) then (v_471,2-proj-2-tuple(v_469)) else fail-any) else fail-any) else fail-any)) in
        {134}let v_473: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_472),v_447,v_435,4-proj-7-tuple(v_432),5-proj-7-tuple(v_432),6-proj-7-tuple(v_432),7-proj-7-tuple(v_432))) in
        {135}let v_474: bitstring = catch-fail(concat3(v_436,2-proj-2-tuple(v_456),2-proj-2-tuple(v_472))) in
        {136}let v_475: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_472))) in
        {137}let v_476: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_475),zero)) in
        {138}let v_477: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_475),zero)) in
        {139}let v_478: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_475),zero)) in
        {140}let v_479: bitstring = catch-fail((if success?(2-proj-3-tuple(v_475)) then (if not-caught-fail(v_476) then (if not-caught-fail(v_477) then (if not-caught-fail(v_478) then (v_476,v_477,v_478) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {141}let v_480: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_479)) then cipherstatepack(1-proj-3-tuple(v_479),minnonce) else fail-any)) in
        {142}let v_481: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_479)) then cipherstatepack(2-proj-3-tuple(v_479),minnonce) else fail-any)) in
        {143}let v_482: bitstring = catch-fail((if success?(1-proj-2-tuple(v_472)) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then (if not-caught-fail(v_480) then (if not-caught-fail(v_481) then (1-proj-2-tuple(v_472),v_480,v_481) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {144}let (hs_483: handshakestate,re_484: key,message_a_485: bitstring,cs1_486: cipherstate,cs2_487: cipherstate) = (if (not-caught-fail(v_432) && success?(is-true(success?(1-proj-7-tuple(v_432))))) then (if (not-caught-fail(v_433) && success?(is-true(success?(1-proj-3-tuple(v_433))))) then (if not-caught-fail(v_435) then (if not-caught-fail(v_436) then (if not-caught-fail(v_438) then (if not-caught-fail(v_445) then (if not-caught-fail(v_447) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then (if not-caught-fail(v_463) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-2-tuple(v_472))))) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-3-tuple(v_482))))) then (v_473,5-proj-7-tuple(v_432),v_474,2-proj-3-tuple(v_482),3-proj-3-tuple(v_482)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {145}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {146}insert statestore(alice,charlie,statepack_b(hs_483));
        {147}out(pub, message_a_485)
    ) | (
        {149}event LeakS(phase0,alice);
        {150}out(pub, key_s(alice))
    ) | (
        {151}phase 1;
        {152}event LeakS(phase1,alice);
        {153}out(pub, key_s(alice))
    )
) | (
    {154}let v_488: key = catch-fail(dhexp(key_s(bob),g)) in
    {155}let s_489: keypair = (if not-caught-fail(v_488) then keypairpack(v_488,key_s(bob)) else fail-any) in
    {156}out(pub, getpublickey(s_489));
    (
        {157}let e_490: keypair = keypairpack(empty,empty) in
        {158}let rs_491: key = empty in
        {159}let re_492: key = empty in
        {160}let v_493: bitstring = catch-fail(hash(somename,empty)) in
        {161}let v_494: key = catch-fail(v_493) in
        {162}let v_495: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {163}let v_496: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_493) then (if not-caught-fail(v_494) then (if not-caught-fail(v_495) then symmetricstatepack(v_495,v_494,v_493) else fail-any) else fail-any) else fail-any))) in
        {164}let v_497: symmetricstate = catch-fail((if success?((if not-caught-fail(v_493) then (if not-caught-fail(v_494) then (if not-caught-fail(v_495) then symmetricstatepack(v_495,v_494,v_493) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-3-tuple(v_496))))) then symmetricstatepack(1-proj-3-tuple(v_496),2-proj-3-tuple(v_496),hash(3-proj-3-tuple(v_496),empty)) else fail-any) else fail-any)) in
        {165}let v_498: bitstring = catch-fail(symmetricstateunpack(v_497)) in
        {166}let v_499: symmetricstate = catch-fail((if success?(getpublickey(s_489)) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-3-tuple(v_498))))) then symmetricstatepack(1-proj-3-tuple(v_498),2-proj-3-tuple(v_498),hash(3-proj-3-tuple(v_498),getpublickey(s_489))) else fail-any) else fail-any)) in
        {167}let hs_500: handshakestate = (if not-caught-fail(v_497) then (if not-caught-fail(v_499) then handshakestatepack(v_499,s_489,e_490,rs_491,re_492,empty,false) else fail-any) else fail-any) in
        {168}insert statestore(bob,alice,statepack_a(hs_500))
    ) | (
        {225}get statestore(=bob,=alice,statepack_a(hs_501: handshakestate)) in
        {169}in(pub, message_a_502: bitstring);
        {170}let v_503: bitstring = catch-fail(handshakestateunpack(hs_501)) in
        {171}let v_504: bitstring = catch-fail(deconcat3(message_a_502)) in
        {172}let v_505: bool = catch-fail(true) in
        {173}let v_506: key = catch-fail(1-proj-3-tuple(v_504)) in
        {174}let v_507: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_503))) in
        {175}let v_508: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_503)) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then symmetricstatepack(1-proj-3-tuple(v_507),2-proj-3-tuple(v_507),hash(3-proj-3-tuple(v_507),v_506)) else fail-any) else fail-any)) in
        {176}let v_509: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_503))) in
        {177}let v_510: bitstring = catch-fail(symmetricstateunpack(v_508)) in
        {178}let v_511: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_510),(if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),v_506) else fail-any) else fail-any))) in
        {179}let v_512: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_510),(if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),v_506) else fail-any) else fail-any))) in
        {180}let v_513: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_510),(if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),v_506) else fail-any) else fail-any))) in
        {181}let v_514: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),v_506) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_510))) then (if not-caught-fail(v_511) then (if not-caught-fail(v_512) then (if not-caught-fail(v_513) then (v_511,v_512,v_513) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {182}let v_515: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),v_506) else fail-any) else fail-any)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_514)) then cipherstatepack(2-proj-3-tuple(v_514),minnonce) else fail-any),1-proj-3-tuple(v_514),3-proj-3-tuple(v_510)) else fail-any) else fail-any) else fail-any)) in
        {183}let v_516: bitstring = catch-fail(symmetricstateunpack(v_515)) in
        {184}let v_517: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_516))) in
        {185}let v_518: aead = catch-fail(decrypt(1-proj-2-tuple(v_517),2-proj-2-tuple(v_517),3-proj-3-tuple(v_516),2-proj-3-tuple(v_504))) in
        {186}let v_519: bitstring = catch-fail(aeadunpack(v_518)) in
        {187}let v_520: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_516))) in
        {188}let v_521: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_517))) && success?(1-proj-3-tuple(v_516))) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-2-tuple(v_520))))) then cipherstatepack(1-proj-2-tuple(v_520),increment_nonce(2-proj-2-tuple(v_517))) else fail-any) else fail-any)) in
        {189}let v_522: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_504)) && (success?(3-proj-3-tuple(v_516)) && success?(1-proj-3-tuple(v_516)))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then (if not-caught-fail(v_518) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then (if not-caught-fail(v_521) then (v_521,3-proj-3-tuple(v_519),1-proj-3-tuple(v_519)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_523: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_522),2-proj-3-tuple(v_516),3-proj-3-tuple(v_516)))) in
        {191}let v_524: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_504)) && success?(symmetricstatepack(1-proj-3-tuple(v_522),2-proj-3-tuple(v_516),3-proj-3-tuple(v_516)))) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then symmetricstatepack(1-proj-3-tuple(v_523),2-proj-3-tuple(v_523),hash(3-proj-3-tuple(v_523),2-proj-3-tuple(v_504))) else fail-any) else fail-any)) in
        {192}let v_525: bitstring = catch-fail((if success?(2-proj-3-tuple(v_504)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then (if not-caught-fail(v_524) then (v_524,2-proj-3-tuple(v_522),3-proj-3-tuple(v_522)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {193}let v_526: key = catch-fail(2-proj-3-tuple(v_525)) in
        {194}let v_527: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_503))) in
        {195}let v_528: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_525))) in
        {196}let v_529: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_528),(if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_526) else fail-any) else fail-any))) in
        {197}let v_530: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_528),(if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_526) else fail-any) else fail-any))) in
        {198}let v_531: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_528),(if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_526) else fail-any) else fail-any))) in
        {199}let v_532: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_526) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_528))) then (if not-caught-fail(v_529) then (if not-caught-fail(v_530) then (if not-caught-fail(v_531) then (v_529,v_530,v_531) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {200}let v_533: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_503)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),v_526) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_525))) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_532)) then cipherstatepack(2-proj-3-tuple(v_532),minnonce) else fail-any),1-proj-3-tuple(v_532),3-proj-3-tuple(v_528)) else fail-any) else fail-any) else fail-any)) in
        {201}let v_534: bitstring = catch-fail(symmetricstateunpack(v_533)) in
        {202}let v_535: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_534))) in
        {203}let v_536: aead = catch-fail(decrypt(1-proj-2-tuple(v_535),2-proj-2-tuple(v_535),3-proj-3-tuple(v_534),3-proj-3-tuple(v_504))) in
        {204}let v_537: bitstring = catch-fail(aeadunpack(v_536)) in
        {205}let v_538: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_534))) in
        {206}let v_539: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_535))) && success?(1-proj-3-tuple(v_534))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then cipherstatepack(1-proj-2-tuple(v_538),increment_nonce(2-proj-2-tuple(v_535))) else fail-any) else fail-any)) in
        {207}let v_540: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_504)) && (success?(3-proj-3-tuple(v_534)) && success?(1-proj-3-tuple(v_534)))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then (if not-caught-fail(v_536) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if not-caught-fail(v_539) then (v_539,3-proj-3-tuple(v_537),1-proj-3-tuple(v_537)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let v_541: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_534),3-proj-3-tuple(v_534)))) in
        {209}let v_542: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_504)) && success?(symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_534),3-proj-3-tuple(v_534)))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack(1-proj-3-tuple(v_541),2-proj-3-tuple(v_541),hash(3-proj-3-tuple(v_541),3-proj-3-tuple(v_504))) else fail-any) else fail-any)) in
        {210}let v_543: bitstring = catch-fail((if success?(3-proj-3-tuple(v_504)) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-3-tuple(v_534))))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then (if not-caught-fail(v_542) then (v_542,2-proj-3-tuple(v_540),3-proj-3-tuple(v_540)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {211}let v_544: key = catch-fail(dhexp(key_s(alice),g)) in
        {212}let v_545: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_543),2-proj-7-tuple(v_503),3-proj-7-tuple(v_503),v_526,v_506,6-proj-7-tuple(v_503),7-proj-7-tuple(v_503))) in
        {213}let v_546: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_543))) in
        {214}let v_547: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_546),zero)) in
        {215}let v_548: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_546),zero)) in
        {216}let v_549: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_546),zero)) in
        {217}let v_550: bitstring = catch-fail((if success?(2-proj-3-tuple(v_546)) then (if not-caught-fail(v_547) then (if not-caught-fail(v_548) then (if not-caught-fail(v_549) then (v_547,v_548,v_549) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_551: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_550)) then cipherstatepack(1-proj-3-tuple(v_550),minnonce) else fail-any)) in
        {219}let v_552: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_550)) then cipherstatepack(2-proj-3-tuple(v_550),minnonce) else fail-any)) in
        {220}let v_553: bitstring = catch-fail((if success?(1-proj-3-tuple(v_543)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_552) then (1-proj-3-tuple(v_543),v_551,v_552) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {221}let (hs_554: handshakestate,re_555: key,plaintext_a: bitstring,valid: bool,cs1_556: cipherstate,cs2_557: cipherstate) = (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-7-tuple(v_503))))) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-3-tuple(v_504))))) then (if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (if not-caught-fail(v_508) then (if not-caught-fail(v_515) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then (if not-caught-fail(v_526) then (if not-caught-fail(v_533) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if ((3-proj-3-tuple(v_525) && 3-proj-3-tuple(v_543)) && (v_526 = getpublickey((if not-caught-fail(v_544) then keypairpack(v_544,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_545) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-3-tuple(v_553))))) then (v_545,getpublickey(3-proj-7-tuple(v_503)),2-proj-3-tuple(v_543),true,2-proj-3-tuple(v_553),3-proj-3-tuple(v_553)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {222}event RecvMsg(bob,alice,stage_a,plaintext_a,valid);
        {223}insert statestore(bob,alice,statepack_b(hs_554));
        {224}event RecvEnd(valid)
    ) | (
        {226}event LeakS(phase0,bob);
        {227}out(pub, key_s(bob))
    ) | (
        {228}phase 1;
        {229}event LeakS(phase1,bob);
        {230}out(pub, key_s(bob))
    )
) | (
    {231}let v_558: key = catch-fail(dhexp(key_s(bob),g)) in
    {232}let s_559: keypair = (if not-caught-fail(v_558) then keypairpack(v_558,key_s(bob)) else fail-any) in
    {233}out(pub, getpublickey(s_559));
    (
        {234}let e_560: keypair = keypairpack(empty,empty) in
        {235}let rs_561: key = empty in
        {236}let re_562: key = empty in
        {237}let v_563: bitstring = catch-fail(hash(somename,empty)) in
        {238}let v_564: key = catch-fail(v_563) in
        {239}let v_565: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {240}let v_566: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_563) then (if not-caught-fail(v_564) then (if not-caught-fail(v_565) then symmetricstatepack(v_565,v_564,v_563) else fail-any) else fail-any) else fail-any))) in
        {241}let v_567: symmetricstate = catch-fail((if success?((if not-caught-fail(v_563) then (if not-caught-fail(v_564) then (if not-caught-fail(v_565) then symmetricstatepack(v_565,v_564,v_563) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then symmetricstatepack(1-proj-3-tuple(v_566),2-proj-3-tuple(v_566),hash(3-proj-3-tuple(v_566),empty)) else fail-any) else fail-any)) in
        {242}let v_568: bitstring = catch-fail(symmetricstateunpack(v_567)) in
        {243}let v_569: symmetricstate = catch-fail((if success?(getpublickey(s_559)) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then symmetricstatepack(1-proj-3-tuple(v_568),2-proj-3-tuple(v_568),hash(3-proj-3-tuple(v_568),getpublickey(s_559))) else fail-any) else fail-any)) in
        {244}let hs_570: handshakestate = (if not-caught-fail(v_567) then (if not-caught-fail(v_569) then handshakestatepack(v_569,s_559,e_560,rs_561,re_562,empty,false) else fail-any) else fail-any) in
        {245}insert statestore(bob,charlie,statepack_a(hs_570))
    ) | (
        {302}get statestore(=bob,=charlie,statepack_a(hs_571: handshakestate)) in
        {246}in(pub, message_a_572: bitstring);
        {247}let v_573: bitstring = catch-fail(handshakestateunpack(hs_571)) in
        {248}let v_574: bitstring = catch-fail(deconcat3(message_a_572)) in
        {249}let v_575: bool = catch-fail(true) in
        {250}let v_576: key = catch-fail(1-proj-3-tuple(v_574)) in
        {251}let v_577: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_573))) in
        {252}let v_578: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_573)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_577),hash(3-proj-3-tuple(v_577),v_576)) else fail-any) else fail-any)) in
        {253}let v_579: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_573))) in
        {254}let v_580: bitstring = catch-fail(symmetricstateunpack(v_578)) in
        {255}let v_581: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_580),(if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),v_576) else fail-any) else fail-any))) in
        {256}let v_582: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_580),(if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),v_576) else fail-any) else fail-any))) in
        {257}let v_583: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_580),(if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),v_576) else fail-any) else fail-any))) in
        {258}let v_584: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),v_576) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_580))) then (if not-caught-fail(v_581) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (v_581,v_582,v_583) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {259}let v_585: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then dhexp(2-proj-2-tuple(v_579),v_576) else fail-any) else fail-any)) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_584)) then cipherstatepack(2-proj-3-tuple(v_584),minnonce) else fail-any),1-proj-3-tuple(v_584),3-proj-3-tuple(v_580)) else fail-any) else fail-any) else fail-any)) in
        {260}let v_586: bitstring = catch-fail(symmetricstateunpack(v_585)) in
        {261}let v_587: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_586))) in
        {262}let v_588: aead = catch-fail(decrypt(1-proj-2-tuple(v_587),2-proj-2-tuple(v_587),3-proj-3-tuple(v_586),2-proj-3-tuple(v_574))) in
        {263}let v_589: bitstring = catch-fail(aeadunpack(v_588)) in
        {264}let v_590: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_586))) in
        {265}let v_591: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_587))) && success?(1-proj-3-tuple(v_586))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then cipherstatepack(1-proj-2-tuple(v_590),increment_nonce(2-proj-2-tuple(v_587))) else fail-any) else fail-any)) in
        {266}let v_592: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_574)) && (success?(3-proj-3-tuple(v_586)) && success?(1-proj-3-tuple(v_586)))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then (if not-caught-fail(v_588) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if not-caught-fail(v_591) then (v_591,3-proj-3-tuple(v_589),1-proj-3-tuple(v_589)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_593: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_586),3-proj-3-tuple(v_586)))) in
        {268}let v_594: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_574)) && success?(symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_586),3-proj-3-tuple(v_586)))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_593),hash(3-proj-3-tuple(v_593),2-proj-3-tuple(v_574))) else fail-any) else fail-any)) in
        {269}let v_595: bitstring = catch-fail((if success?(2-proj-3-tuple(v_574)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if not-caught-fail(v_594) then (v_594,2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_596: key = catch-fail(2-proj-3-tuple(v_595)) in
        {271}let v_597: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_573))) in
        {272}let v_598: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_595))) in
        {273}let v_599: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_598),(if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_596) else fail-any) else fail-any))) in
        {274}let v_600: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_598),(if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_596) else fail-any) else fail-any))) in
        {275}let v_601: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_598),(if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_596) else fail-any) else fail-any))) in
        {276}let v_602: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_596) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_598))) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (v_599,v_600,v_601) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_603: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_573)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_596) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_595))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_602)) then cipherstatepack(2-proj-3-tuple(v_602),minnonce) else fail-any),1-proj-3-tuple(v_602),3-proj-3-tuple(v_598)) else fail-any) else fail-any) else fail-any)) in
        {278}let v_604: bitstring = catch-fail(symmetricstateunpack(v_603)) in
        {279}let v_605: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {280}let v_606: aead = catch-fail(decrypt(1-proj-2-tuple(v_605),2-proj-2-tuple(v_605),3-proj-3-tuple(v_604),3-proj-3-tuple(v_574))) in
        {281}let v_607: bitstring = catch-fail(aeadunpack(v_606)) in
        {282}let v_608: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {283}let v_609: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_605))) && success?(1-proj-3-tuple(v_604))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then cipherstatepack(1-proj-2-tuple(v_608),increment_nonce(2-proj-2-tuple(v_605))) else fail-any) else fail-any)) in
        {284}let v_610: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_574)) && (success?(3-proj-3-tuple(v_604)) && success?(1-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then (if not-caught-fail(v_606) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if not-caught-fail(v_609) then (v_609,3-proj-3-tuple(v_607),1-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {285}let v_611: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) in
        {286}let v_612: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_574)) && success?(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),3-proj-3-tuple(v_574))) else fail-any) else fail-any)) in
        {287}let v_613: bitstring = catch-fail((if success?(3-proj-3-tuple(v_574)) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if not-caught-fail(v_612) then (v_612,2-proj-3-tuple(v_610),3-proj-3-tuple(v_610)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {288}let v_614: key = catch-fail(dhexp(key_s(charlie),g)) in
        {289}let v_615: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_613),2-proj-7-tuple(v_573),3-proj-7-tuple(v_573),v_596,v_576,6-proj-7-tuple(v_573),7-proj-7-tuple(v_573))) in
        {290}let v_616: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_613))) in
        {291}let v_617: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_616),zero)) in
        {292}let v_618: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_616),zero)) in
        {293}let v_619: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_616),zero)) in
        {294}let v_620: bitstring = catch-fail((if success?(2-proj-3-tuple(v_616)) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (v_617,v_618,v_619) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_621: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_620)) then cipherstatepack(1-proj-3-tuple(v_620),minnonce) else fail-any)) in
        {296}let v_622: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_620)) then cipherstatepack(2-proj-3-tuple(v_620),minnonce) else fail-any)) in
        {297}let v_623: bitstring = catch-fail((if success?(1-proj-3-tuple(v_613)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (1-proj-3-tuple(v_613),v_621,v_622) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let (hs_624: handshakestate,re_625: key,plaintext_a_626: bitstring,valid_627: bool,cs1_628: cipherstate,cs2_629: cipherstate) = (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-7-tuple(v_573))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_578) then (if not-caught-fail(v_585) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then (if not-caught-fail(v_596) then (if not-caught-fail(v_603) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if ((3-proj-3-tuple(v_595) && 3-proj-3-tuple(v_613)) && (v_596 = getpublickey((if not-caught-fail(v_614) then keypairpack(v_614,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_615) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (v_615,getpublickey(3-proj-7-tuple(v_573)),2-proj-3-tuple(v_613),true,2-proj-3-tuple(v_623),3-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {299}event RecvMsg(bob,charlie,stage_a,plaintext_a_626,valid_627);
        {300}insert statestore(bob,charlie,statepack_b(hs_624));
        {301}event RecvEnd(valid_627)
    ) | (
        {303}event LeakS(phase0,bob);
        {304}out(pub, key_s(bob))
    ) | (
        {305}phase 1;
        {306}event LeakS(phase1,bob);
        {307}out(pub, key_s(bob))
    )
) | (
    {308}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_710,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_710,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 173 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 128 rules in the queue.
600 rules inserted. The rule base contains 569 rules. 94 rules in the queue.
800 rules inserted. The rule base contains 767 rules. 141 rules in the queue.
1000 rules inserted. The rule base contains 949 rules. 136 rules in the queue.
1200 rules inserted. The rule base contains 1125 rules. 140 rules in the queue.
1400 rules inserted. The rule base contains 1312 rules. 161 rules in the queue.
1600 rules inserted. The rule base contains 1459 rules. 171 rules in the queue.
1800 rules inserted. The rule base contains 1583 rules. 223 rules in the queue.
2000 rules inserted. The rule base contains 1688 rules. 269 rules in the queue.
2200 rules inserted. The rule base contains 1782 rules. 281 rules in the queue.
2400 rules inserted. The rule base contains 1835 rules. 341 rules in the queue.
2600 rules inserted. The rule base contains 1834 rules. 357 rules in the queue.
2800 rules inserted. The rule base contains 1861 rules. 339 rules in the queue.
3000 rules inserted. The rule base contains 1893 rules. 340 rules in the queue.
3200 rules inserted. The rule base contains 1934 rules. 312 rules in the queue.
3400 rules inserted. The rule base contains 1869 rules. 275 rules in the queue.
3600 rules inserted. The rule base contains 1867 rules. 278 rules in the queue.
3800 rules inserted. The rule base contains 1949 rules. 261 rules in the queue.
4000 rules inserted. The rule base contains 1810 rules. 220 rules in the queue.
4200 rules inserted. The rule base contains 1886 rules. 188 rules in the queue.
4400 rules inserted. The rule base contains 1985 rules. 134 rules in the queue.
4600 rules inserted. The rule base contains 2102 rules. 60 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) && attacker(m_529338919) -> end(RecvMsg(bob,alice,stage_a,m_529338919,true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {168}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_529339060).

3. Using the function pub the attacker may obtain pub.
attacker(pub).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {72}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {69}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {71}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

6. By 3, the attacker may have the channel pub.
By 5, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

7. By 6, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 6, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {156}.
mess(pub,dhexp(key_s(bob),g)).

10. By 3, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. The event LeakS(phase0,bob) may be executed at {226}.
So the message key_s(bob) may be sent on channel pub at output {227}.
mess(pub,key_s(bob)).

19. By 3, the attacker may have the channel pub.
By 18, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

20. By 19, the attacker may know key_s(bob).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
attacker(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

21. By 13, the attacker may know hash(somename,empty).
By 20, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
By 17, the attacker may know minnonce.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g).
attacker(dhexp(key_s(alice),g)).

24. Using the function g the attacker may obtain g.
attacker(g).

25. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 24, the attacker may know g.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g)).

26. By 13, the attacker may know hash(somename,empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g))).

27. By 26, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)).
By 17, the attacker may know minnonce.
By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g).
By 23, the attacker may know dhexp(key_s(alice),g).
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))).

28. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g).
By 27, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)))).

29. By 19, the attacker may know key_s(bob).
By 23, the attacker may know dhexp(key_s(alice),g).
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)).
attacker(dhexp(key_s(bob),dhexp(key_s(alice),g))).

30. By 13, the attacker may know hash(somename,empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
attacker(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g))).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
By 29, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
By 17, the attacker may know minnonce.
By 28, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))).
By 2, the attacker may know m_529339060.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339060).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339060)).

33. By 24, the attacker may know g.
By 27, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)).
By 32, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339060).
Using the function concat3 the attacker may obtain concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339060)).
attacker(concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339060))).

34. By 3, the attacker may have the channel pub.
By 33, the attacker may have the message concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339060)).
So the attacker may send this message on this channel.
mess(pub,concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339060))).

35. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {225}.
The message concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339060)) that may be sent on channel pub by 34 may be received at input {169}.
We have g <> caught-fail.
So event RecvMsg(bob,alice,stage_a,m_529339060,true) may be executed at {222}.
end(RecvMsg(bob,alice,stage_a,m_529339060,true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_710,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) && attacker(m_529339062) -> end(RecvMsg(bob,alice,stage_a,m_529339062,true))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) && attacker(m_529339064) -> end(RecvMsg(bob,alice,stage_a,m_529339064,true))
goal reachable: begin(LeakS(phase0,alice)) && attacker(m_529339066) -> end(RecvMsg(bob,alice,stage_a,m_529339066,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_710,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_710,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) && attacker(m_529339077) -> end(RecvMsg(bob,alice,stage_a,m_529339077,true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {168}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_529339219).

3. Using the function pub the attacker may obtain pub.
attacker(pub).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {72}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {69}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {71}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

6. By 3, the attacker may have the channel pub.
By 5, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

7. By 6, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 6, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {156}.
mess(pub,dhexp(key_s(bob),g)).

10. By 3, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. The event LeakS(phase0,bob) may be executed at {226}.
So the message key_s(bob) may be sent on channel pub at output {227}.
mess(pub,key_s(bob)).

19. By 3, the attacker may have the channel pub.
By 18, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

20. By 19, the attacker may know key_s(bob).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
attacker(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

21. By 13, the attacker may know hash(somename,empty).
By 20, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
By 17, the attacker may know minnonce.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g).
attacker(dhexp(key_s(alice),g)).

24. Using the function g the attacker may obtain g.
attacker(g).

25. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 24, the attacker may know g.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g)).

26. By 13, the attacker may know hash(somename,empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g))).

27. By 26, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)).
By 17, the attacker may know minnonce.
By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g).
By 23, the attacker may know dhexp(key_s(alice),g).
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))).

28. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g).
By 27, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)))).

29. By 19, the attacker may know key_s(bob).
By 23, the attacker may know dhexp(key_s(alice),g).
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)).
attacker(dhexp(key_s(bob),dhexp(key_s(alice),g))).

30. By 13, the attacker may know hash(somename,empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
attacker(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g))).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
By 29, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
By 17, the attacker may know minnonce.
By 28, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))).
By 2, the attacker may know m_529339219.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339219).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339219)).

33. By 24, the attacker may know g.
By 27, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)).
By 32, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339219).
Using the function concat3 the attacker may obtain concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339219)).
attacker(concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339219))).

34. By 3, the attacker may have the channel pub.
By 33, the attacker may have the message concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339219)).
So the attacker may send this message on this channel.
mess(pub,concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339219))).

35. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {225}.
The message concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339219)) that may be sent on channel pub by 34 may be received at input {169}.
We have g <> caught-fail.
So event RecvMsg(bob,alice,stage_a,m_529339219,true) may be executed at {222}.
end(RecvMsg(bob,alice,stage_a,m_529339219,true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_710,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) && attacker(m_529339221) -> end(RecvMsg(bob,alice,stage_a,m_529339221,true))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) && attacker(m_529339223) -> end(RecvMsg(bob,alice,stage_a,m_529339223,true))
goal reachable: begin(LeakS(phase0,alice)) && attacker(m_529339225) -> end(RecvMsg(bob,alice,stage_a,m_529339225,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) && attacker(m_529339235) -> end(RecvMsg(bob,alice,stage_a,m_529339235,true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {168}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_529339376).

3. Using the function pub the attacker may obtain pub.
attacker(pub).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {72}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {69}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {71}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

6. By 3, the attacker may have the channel pub.
By 5, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

7. By 6, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 6, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {156}.
mess(pub,dhexp(key_s(bob),g)).

10. By 3, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

18. The event LeakS(phase0,bob) may be executed at {226}.
So the message key_s(bob) may be sent on channel pub at output {227}.
mess(pub,key_s(bob)).

19. By 3, the attacker may have the channel pub.
By 18, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

20. By 19, the attacker may know key_s(bob).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
attacker(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

21. By 13, the attacker may know hash(somename,empty).
By 20, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
By 17, the attacker may know minnonce.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g).
attacker(dhexp(key_s(alice),g)).

24. Using the function g the attacker may obtain g.
attacker(g).

25. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 24, the attacker may know g.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g)).

26. By 13, the attacker may know hash(somename,empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g))).

27. By 26, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)).
By 17, the attacker may know minnonce.
By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g).
By 23, the attacker may know dhexp(key_s(alice),g).
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))).

28. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g).
By 27, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)))).

29. By 19, the attacker may know key_s(bob).
By 23, the attacker may know dhexp(key_s(alice),g).
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)).
attacker(dhexp(key_s(bob),dhexp(key_s(alice),g))).

30. By 13, the attacker may know hash(somename,empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
attacker(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g))).

31. By 30, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
By 29, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

32. By 31, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
By 17, the attacker may know minnonce.
By 28, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))).
By 2, the attacker may know m_529339376.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339376).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339376)).

33. By 24, the attacker may know g.
By 27, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)).
By 32, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339376).
Using the function concat3 the attacker may obtain concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339376)).
attacker(concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339376))).

34. By 3, the attacker may have the channel pub.
By 33, the attacker may have the message concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339376)).
So the attacker may send this message on this channel.
mess(pub,concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339376))).

35. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {225}.
The message concat3(g,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),g)),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),g),dhexp(key_s(alice),g))),m_529339376)) that may be sent on channel pub by 34 may be received at input {169}.
We have g <> caught-fail.
So event RecvMsg(bob,alice,stage_a,m_529339376,true) may be executed at {222}.
end(RecvMsg(bob,alice,stage_a,m_529339376,true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {72}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {69}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {71}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

8. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 7 may be read at get {72}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {69}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {71}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

9. By 1, the attacker may have the channel pub.
By 8, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

10. By 9, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

11. By 9, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

12. The message dhexp(key_s(bob),g) may be sent on channel pub at output {156}.
mess(pub,dhexp(key_s(bob),g)).

13. By 1, the attacker may have the channel pub.
By 12, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 11, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 10, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 10, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

24. By 11, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

25. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

26. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

27. The event LeakS(phase1,bob) may be executed at {229}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {230}.
mess_p1(pub,key_s(bob)).

28. By 26, the attacker may have the channel pub in phase 1.
By 27, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

29. By 28, the attacker may know key_s(bob) in phase 1.
By 25, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

30. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

31. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

32. By 31, the attacker may know somename in phase 1.
By 30, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

33. By 32, the attacker may know hash(somename,empty) in phase 1.
By 30, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

34. By 33, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 29, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

35. By 34, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 24, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

36. By 28, the attacker may know key_s(bob) in phase 1.
By 24, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

37. By 32, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

38. By 37, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 35, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 23, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

39. By 38, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

40. By 28, the attacker may know key_s(bob) in phase 1.
By 39, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(dhexp(key_s(bob),dhexp(key_s(alice),g))).

41. By 32, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

42. By 41, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 40, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

43. By 42, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

44. By 43, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {72}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {69}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {71}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

8. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 7 may be read at get {72}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {69}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {71}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

9. By 1, the attacker may have the channel pub.
By 8, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

10. By 9, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

11. By 9, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

12. The message dhexp(key_s(bob),g) may be sent on channel pub at output {156}.
mess(pub,dhexp(key_s(bob),g)).

13. By 1, the attacker may have the channel pub.
By 12, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 11, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 10, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 10, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

24. By 11, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

25. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

26. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

27. The event LeakS(phase1,bob) may be executed at {229}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {230}.
mess_p1(pub,key_s(bob)).

28. By 26, the attacker may have the channel pub in phase 1.
By 27, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

29. By 28, the attacker may know key_s(bob) in phase 1.
By 25, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

30. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

31. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

32. By 31, the attacker may know somename in phase 1.
By 30, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

33. By 32, the attacker may know hash(somename,empty) in phase 1.
By 30, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

34. By 33, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 29, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

35. By 34, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 24, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

36. By 28, the attacker may know key_s(bob) in phase 1.
By 24, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

37. By 32, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

38. By 37, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 35, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 23, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

39. By 38, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

40. By 28, the attacker may know key_s(bob) in phase 1.
By 39, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(dhexp(key_s(bob),dhexp(key_s(alice),g))).

41. By 32, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

42. By 41, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 40, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

43. By 42, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

44. By 43, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {72}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {69}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {71}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

8. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 7 may be read at get {72}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {69}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {71}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

9. By 1, the attacker may have the channel pub.
By 8, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

10. By 9, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

11. By 9, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

12. The message dhexp(key_s(bob),g) may be sent on channel pub at output {156}.
mess(pub,dhexp(key_s(bob),g)).

13. By 1, the attacker may have the channel pub.
By 12, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 11, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 10, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. By 10, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

24. By 11, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

25. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

26. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

27. The event LeakS(phase1,bob) may be executed at {229}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {230}.
mess_p1(pub,key_s(bob)).

28. By 26, the attacker may have the channel pub in phase 1.
By 27, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

29. By 28, the attacker may know key_s(bob) in phase 1.
By 25, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

30. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

31. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

32. By 31, the attacker may know somename in phase 1.
By 30, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

33. By 32, the attacker may know hash(somename,empty) in phase 1.
By 30, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

34. By 33, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 29, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

35. By 34, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 24, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

36. By 28, the attacker may know key_s(bob) in phase 1.
By 24, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

37. By 32, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

38. By 37, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 35, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 23, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

39. By 38, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

40. By 28, the attacker may know key_s(bob) in phase 1.
By 39, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(dhexp(key_s(bob),dhexp(key_s(alice),g))).

41. By 32, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

42. By 41, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 40, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

43. By 42, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

44. By 43, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
