File "I1K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 250, character 36:
Warning: identifier h rebound.
File "I1K.noise.active.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 292, character 6:
Warning: identifier e rebound.
File "I1K.noise.active.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.active.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 297, character 6:
Warning: identifier s rebound.
File "I1K.noise.active.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 298, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1K.noise.active.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 299, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 308, character 6:
Warning: identifier e rebound.
File "I1K.noise.active.pv", line 309, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.active.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.active.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 352, characters 48-53:
Warning: identifier valid1 rebound.
File "I1K.noise.active.pv", line 353, characters 6-7:
Warning: identifier rs rebound.
File "I1K.noise.active.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 364, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.active.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 378, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 364, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.active.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 544, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 292, character 6:
Warning: identifier e rebound.
File "I1K.noise.active.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.active.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 297, character 6:
Warning: identifier s rebound.
File "I1K.noise.active.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 298, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1K.noise.active.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 299, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 632, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 624, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 617, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 378, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 609, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 308, character 6:
Warning: identifier e rebound.
File "I1K.noise.active.pv", line 309, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.active.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 602, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.active.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 352, characters 48-53:
Warning: identifier valid1 rebound.
File "I1K.noise.active.pv", line 353, characters 6-7:
Warning: identifier rs rebound.
File "I1K.noise.active.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let s_529: keypair = keypairpack(empty,empty) in
    {6}out(pub, getpublickey(s_529));
    (
        {7}let e_530: keypair = keypairpack(empty,empty) in
        {8}let v_531: key = catch-fail(dhexp(key_s(them),g)) in
        {9}let rs_532: key = getpublickey((if not-caught-fail(v_531) then keypairpack(v_531,key_s(them)) else fail-any)) in
        {10}let re_533: key = empty in
        {11}let v_534: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_535: key = catch-fail(v_534) in
        {13}let v_536: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_537: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any))) in
        {15}let v_538: symmetricstate = catch-fail((if success?((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then symmetricstatepack(1-proj-3-tuple(v_537),2-proj-3-tuple(v_537),hash(3-proj-3-tuple(v_537),empty)) else fail-any) else fail-any)) in
        {16}let v_539: bitstring = catch-fail(symmetricstateunpack(v_538)) in
        {17}let v_540: symmetricstate = catch-fail((if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),rs_532)) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_538) then (if not-caught-fail(v_540) then handshakestatepack(v_540,s_529,e_530,rs_532,re_533,empty,true) else fail-any) else fail-any) in
        {19}insert statestore(me,them,statepack_a(hs))
    ) | (
        {61}get statestore(=me,=them,statepack_a(hs_541: handshakestate)) in
        {20}let v_542: bitstring = catch-fail(handshakestateunpack(hs_541)) in
        {21}let v_543: bitstring = catch-fail((empty,empty,empty)) in
        {22}new key_e[me,them]: key;
        {23}let v_544: key = catch-fail(dhexp(key_e,g)) in
        {24}let v_545: keypair = catch-fail((if not-caught-fail(v_544) then keypairpack(v_544,key_e) else fail-any)) in
        {25}let v_546: bitstring = catch-fail(getpublickey(v_545)) in
        {26}let v_547: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_542))) in
        {27}let v_548: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_542)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),v_546)) else fail-any) else fail-any)) in
        {28}let v_549: bitstring = catch-fail(keypairunpack(v_545)) in
        {29}let v_550: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {30}let v_551: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_550),(if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any))) in
        {31}let v_552: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_550),(if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any))) in
        {32}let v_553: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_550),(if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any))) in
        {33}let v_554: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_550))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (v_551,v_552,v_553) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_555: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_554)) then cipherstatepack(2-proj-3-tuple(v_554),minnonce) else fail-any),1-proj-3-tuple(v_554),3-proj-3-tuple(v_550)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_556: key = catch-fail(dhexp(key_s(me),g)) in
        {36}let v_557: keypair = catch-fail((if not-caught-fail(v_556) then keypairpack(v_556,key_s(me)) else fail-any)) in
        {37}let v_558: bitstring = catch-fail(symmetricstateunpack(v_555)) in
        {38}let v_559: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_558))) in
        {39}let v_560: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_559),2-proj-2-tuple(v_559),3-proj-3-tuple(v_558),getpublickey(v_557))) in
        {40}let v_561: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_558))) in
        {41}let v_562: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_559))) && success?(1-proj-3-tuple(v_558))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-2-tuple(v_561))))) then cipherstatepack(1-proj-2-tuple(v_561),increment_nonce(2-proj-2-tuple(v_559))) else fail-any) else fail-any)) in
        {42}let v_563: bitstring = catch-fail((if (success?(getpublickey(v_557)) && (success?(3-proj-3-tuple(v_558)) && success?(1-proj-3-tuple(v_558)))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then (if not-caught-fail(v_560) then (if not-caught-fail(v_562) then (v_562,v_560) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {43}let v_564: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_563),2-proj-3-tuple(v_558),3-proj-3-tuple(v_558)))) in
        {44}let v_565: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_563)) && success?(symmetricstatepack(1-proj-2-tuple(v_563),2-proj-3-tuple(v_558),3-proj-3-tuple(v_558)))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),2-proj-2-tuple(v_563))) else fail-any) else fail-any)) in
        {45}let v_566: bitstring = catch-fail((if success?(getpublickey(v_557)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then (if not-caught-fail(v_565) then (v_565,2-proj-2-tuple(v_563)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {46}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_566))) in
        {47}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {48}let v_569: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_568),2-proj-2-tuple(v_568),3-proj-3-tuple(v_567),msg_a(me,them))) in
        {49}let v_570: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {50}let v_571: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_568))) && success?(1-proj-3-tuple(v_567))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then cipherstatepack(1-proj-2-tuple(v_570),increment_nonce(2-proj-2-tuple(v_568))) else fail-any) else fail-any)) in
        {51}let v_572: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_567)) && success?(1-proj-3-tuple(v_567))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then (if not-caught-fail(v_569) then (if not-caught-fail(v_571) then (v_571,v_569) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {52}let v_573: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_572),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) in
        {53}let v_574: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_572)) && success?(symmetricstatepack(1-proj-2-tuple(v_572),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),2-proj-2-tuple(v_572))) else fail-any) else fail-any)) in
        {54}let v_575: bitstring = catch-fail((if success?(1-proj-2-tuple(v_566)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_574) then (v_574,2-proj-2-tuple(v_572)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {55}let v_576: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_575),v_557,v_545,4-proj-7-tuple(v_542),5-proj-7-tuple(v_542),6-proj-7-tuple(v_542),7-proj-7-tuple(v_542))) in
        {56}let v_577: bitstring = catch-fail(concat3(v_546,2-proj-2-tuple(v_566),2-proj-2-tuple(v_575))) in
        {57}let (hs_578: handshakestate,re_579: key,message_a: bitstring) = (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-7-tuple(v_542))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then (if not-caught-fail(v_555) then (if not-caught-fail(v_557) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (v_576,5-proj-7-tuple(v_542),v_577) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {58}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {59}insert statestore(me,them,statepack_b(hs_578));
        {60}out(pub, message_a)
    ) | (
        {90}get statestore(=me,=them,statepack_b(hs_580: handshakestate)) in
        {62}in(pub, message_b: bitstring);
        {63}let v_581: bitstring = catch-fail(handshakestateunpack(hs_580)) in
        {64}let v_582: bitstring = catch-fail(deconcat3(message_b)) in
        {65}let v_583: bool = catch-fail(true) in
        {66}let v_584: key = catch-fail(1-proj-3-tuple(v_582)) in
        {67}let v_585: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_581))) in
        {68}let v_586: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_581)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack(1-proj-3-tuple(v_585),2-proj-3-tuple(v_585),hash(3-proj-3-tuple(v_585),v_584)) else fail-any) else fail-any)) in
        {69}let v_587: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_581))) in
        {70}let v_588: bitstring = catch-fail(symmetricstateunpack(v_586)) in
        {71}let v_589: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any))) in
        {72}let v_590: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any))) in
        {73}let v_591: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any))) in
        {74}let v_592: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_588))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then (v_589,v_590,v_591) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {75}let v_593: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any)) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_592)) then cipherstatepack(2-proj-3-tuple(v_592),minnonce) else fail-any),1-proj-3-tuple(v_592),3-proj-3-tuple(v_588)) else fail-any) else fail-any) else fail-any)) in
        {76}let v_594: bitstring = catch-fail(symmetricstateunpack(v_593)) in
        {77}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {78}let v_596: aead = catch-fail(decrypt(1-proj-2-tuple(v_595),2-proj-2-tuple(v_595),3-proj-3-tuple(v_594),3-proj-3-tuple(v_582))) in
        {79}let v_597: bitstring = catch-fail(aeadunpack(v_596)) in
        {80}let v_598: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {81}let v_599: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_595))) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then cipherstatepack(1-proj-2-tuple(v_598),increment_nonce(2-proj-2-tuple(v_595))) else fail-any) else fail-any)) in
        {82}let v_600: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_582)) && (success?(3-proj-3-tuple(v_594)) && success?(1-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,3-proj-3-tuple(v_597),1-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_601: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) in
        {84}let v_602: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_582)) && success?(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack(1-proj-3-tuple(v_601),2-proj-3-tuple(v_601),hash(3-proj-3-tuple(v_601),3-proj-3-tuple(v_582))) else fail-any) else fail-any)) in
        {85}let v_603: bitstring = catch-fail((if success?(3-proj-3-tuple(v_582)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if not-caught-fail(v_602) then (v_602,2-proj-3-tuple(v_600),3-proj-3-tuple(v_600)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_604: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_603),2-proj-7-tuple(v_581),3-proj-7-tuple(v_581),4-proj-7-tuple(v_581),v_584,6-proj-7-tuple(v_581),7-proj-7-tuple(v_581))) in
        {87}let (hs_605: handshakestate,re_606: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-7-tuple(v_581))))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (if not-caught-fail(v_586) then (if not-caught-fail(v_593) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (v_583 && 3-proj-3-tuple(v_603)) then (if not-caught-fail(v_604) then (v_604,getpublickey(3-proj-7-tuple(v_581)),2-proj-3-tuple(v_603),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {88}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {89}insert statestore(me,them,statepack_c(hs_605))
    ) | (
        {115}get statestore(=me,=them,statepack_c(hs_607: handshakestate)) in
        {91}let v_608: bitstring = catch-fail(handshakestateunpack(hs_607)) in
        {92}let v_609: bitstring = catch-fail((empty,empty,empty)) in
        {93}let v_610: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_608))) in
        {94}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_608))) in
        {95}let v_612: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_611),(if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any))) in
        {96}let v_613: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_611),(if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any))) in
        {97}let v_614: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_611),(if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any))) in
        {98}let v_615: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_611))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (v_612,v_613,v_614) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_616: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_608))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_615)) then cipherstatepack(2-proj-3-tuple(v_615),minnonce) else fail-any),1-proj-3-tuple(v_615),3-proj-3-tuple(v_611)) else fail-any) else fail-any) else fail-any)) in
        {100}let v_617: bitstring = catch-fail(symmetricstateunpack(v_616)) in
        {101}let v_618: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {102}let v_619: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_618),2-proj-2-tuple(v_618),3-proj-3-tuple(v_617),msg_c(me,them))) in
        {103}let v_620: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {104}let v_621: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_618))) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then cipherstatepack(1-proj-2-tuple(v_620),increment_nonce(2-proj-2-tuple(v_618))) else fail-any) else fail-any)) in
        {105}let v_622: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then (v_621,v_619) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {106}let v_623: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) in
        {107}let v_624: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_622)) && success?(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack(1-proj-3-tuple(v_623),2-proj-3-tuple(v_623),hash(3-proj-3-tuple(v_623),2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {108}let v_625: bitstring = catch-fail((if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_624) then (v_624,2-proj-2-tuple(v_622)) else fail-any) else fail-any) else fail-any)) in
        {109}let v_626: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_625),2-proj-7-tuple(v_608),3-proj-7-tuple(v_608),4-proj-7-tuple(v_608),5-proj-7-tuple(v_608),6-proj-7-tuple(v_608),7-proj-7-tuple(v_608))) in
        {110}let v_627: bitstring = catch-fail(concat3(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),2-proj-2-tuple(v_625))) in
        {111}let (hs_628: handshakestate,re_629: key,message_c: bitstring) = (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-7-tuple(v_608))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if not-caught-fail(v_616) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (v_626,5-proj-7-tuple(v_608),v_627) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {112}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {113}insert statestore(me,them,statepack_d(hs_628));
        {114}out(pub, message_c)
    ) | (
        {134}get statestore(=me,=them,statepack_d(hs_630: handshakestate)) in
        {116}in(pub, message_d: bitstring);
        {117}let v_631: bitstring = catch-fail(handshakestateunpack(hs_630)) in
        {118}let v_632: bitstring = catch-fail(deconcat3(message_d)) in
        {119}let v_633: bool = catch-fail(true) in
        {120}let v_634: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_631))) in
        {121}let v_635: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {122}let v_636: aead = catch-fail(decrypt(1-proj-2-tuple(v_635),2-proj-2-tuple(v_635),3-proj-3-tuple(v_634),3-proj-3-tuple(v_632))) in
        {123}let v_637: bitstring = catch-fail(aeadunpack(v_636)) in
        {124}let v_638: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {125}let v_639: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_635))) && success?(1-proj-3-tuple(v_634))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then cipherstatepack(1-proj-2-tuple(v_638),increment_nonce(2-proj-2-tuple(v_635))) else fail-any) else fail-any)) in
        {126}let v_640: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_632)) && (success?(3-proj-3-tuple(v_634)) && success?(1-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then (if not-caught-fail(v_636) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_639) then (v_639,3-proj-3-tuple(v_637),1-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_641: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) in
        {128}let v_642: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_632)) && success?(symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_641),hash(3-proj-3-tuple(v_641),3-proj-3-tuple(v_632))) else fail-any) else fail-any)) in
        {129}let v_643: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_632)) && success?(1-proj-7-tuple(v_631))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if not-caught-fail(v_642) then (v_642,2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {130}let v_644: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_643),2-proj-7-tuple(v_631),3-proj-7-tuple(v_631),4-proj-7-tuple(v_631),5-proj-7-tuple(v_631),6-proj-7-tuple(v_631),7-proj-7-tuple(v_631))) in
        {131}let (hs_645: handshakestate,re_646: key,plaintext_d: bitstring,valid_647: bool) = (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-7-tuple(v_631))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_633) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (v_633 && 3-proj-3-tuple(v_643)) then (if not-caught-fail(v_644) then (v_644,getpublickey(3-proj-7-tuple(v_631)),2-proj-3-tuple(v_643),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {132}event RecvMsg(me,them,stage_d,plaintext_d,valid_647);
        {133}insert statestore(me,them,statepack_e(hs_645))
    ) | (
        {160}get statestore(=me,=them,statepack_e(hs_648: handshakestate)) in
        {135}let v_649: bitstring = catch-fail(handshakestateunpack(hs_648)) in
        {136}let v_650: bitstring = catch-fail((empty,empty,empty)) in
        {137}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_649))) in
        {138}let v_652: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {139}let v_653: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_652),2-proj-2-tuple(v_652),3-proj-3-tuple(v_651),msg_e(me,them))) in
        {140}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {141}let v_655: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_652))) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then cipherstatepack(1-proj-2-tuple(v_654),increment_nonce(2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {142}let v_656: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_651)) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_653) then (if not-caught-fail(v_655) then (v_655,v_653) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {143}let v_657: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) in
        {144}let v_658: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_656)) && success?(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),2-proj-2-tuple(v_656))) else fail-any) else fail-any)) in
        {145}let v_659: bitstring = catch-fail((if success?(1-proj-7-tuple(v_649)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-2-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,2-proj-2-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {146}let v_660: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_659),2-proj-7-tuple(v_649),3-proj-7-tuple(v_649),4-proj-7-tuple(v_649),5-proj-7-tuple(v_649),6-proj-7-tuple(v_649),7-proj-7-tuple(v_649))) in
        {147}let v_661: bitstring = catch-fail(concat3(1-proj-3-tuple(v_650),2-proj-3-tuple(v_650),2-proj-2-tuple(v_659))) in
        {148}let v_662: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_659))) in
        {149}let v_663: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_662),zero)) in
        {150}let v_664: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_662),zero)) in
        {151}let v_665: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_662),zero)) in
        {152}let v_666: bitstring = catch-fail((if success?(2-proj-3-tuple(v_662)) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (v_663,v_664,v_665) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {153}let v_667: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_666)) then cipherstatepack(1-proj-3-tuple(v_666),minnonce) else fail-any)) in
        {154}let v_668: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_666)) then cipherstatepack(2-proj-3-tuple(v_666),minnonce) else fail-any)) in
        {155}let v_669: bitstring = catch-fail((if success?(1-proj-2-tuple(v_659)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (1-proj-2-tuple(v_659),v_667,v_668) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let (hs_670: handshakestate,re_671: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-7-tuple(v_649))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_660) then (if not-caught-fail(v_661) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (v_660,5-proj-7-tuple(v_649),v_661,2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {157}event SendMsg(me,them,stage_e,msg_e(me,them),true);
        {158}insert statestore(me,them,statepack_f(hs_670));
        {159}out(pub, message_e)
    ) | (
        {161}event LeakS(phase0,me);
        {162}out(pub, key_s(me))
    ) | (
        {163}phase 1;
        {164}event LeakS(phase1,me);
        {165}out(pub, key_s(me))
    )
) | (
    {166}let them_672: principal = charlie in
    {167}let me_673: principal = alice in
    {168}let s_674: keypair = keypairpack(empty,empty) in
    {169}out(pub, getpublickey(s_674));
    (
        {170}let e_675: keypair = keypairpack(empty,empty) in
        {171}let v_676: key = catch-fail(dhexp(key_s(them_672),g)) in
        {172}let rs_677: key = getpublickey((if not-caught-fail(v_676) then keypairpack(v_676,key_s(them_672)) else fail-any)) in
        {173}let re_678: key = empty in
        {174}let v_679: bitstring = catch-fail(hash(somename,empty)) in
        {175}let v_680: key = catch-fail(v_679) in
        {176}let v_681: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {177}let v_682: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (if not-caught-fail(v_681) then symmetricstatepack(v_681,v_680,v_679) else fail-any) else fail-any) else fail-any))) in
        {178}let v_683: symmetricstate = catch-fail((if success?((if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (if not-caught-fail(v_681) then symmetricstatepack(v_681,v_680,v_679) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),empty)) else fail-any) else fail-any)) in
        {179}let v_684: bitstring = catch-fail(symmetricstateunpack(v_683)) in
        {180}let v_685: symmetricstate = catch-fail((if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_684),hash(3-proj-3-tuple(v_684),rs_677)) else fail-any)) in
        {181}let hs_686: handshakestate = (if not-caught-fail(v_683) then (if not-caught-fail(v_685) then handshakestatepack(v_685,s_674,e_675,rs_677,re_678,empty,true) else fail-any) else fail-any) in
        {182}insert statestore(me_673,them_672,statepack_a(hs_686))
    ) | (
        {224}get statestore(=me_673,=them_672,statepack_a(hs_687: handshakestate)) in
        {183}let v_688: bitstring = catch-fail(handshakestateunpack(hs_687)) in
        {184}let v_689: bitstring = catch-fail((empty,empty,empty)) in
        {185}new key_e_690[me_673,them_672]: key;
        {186}let v_691: key = catch-fail(dhexp(key_e_690,g)) in
        {187}let v_692: keypair = catch-fail((if not-caught-fail(v_691) then keypairpack(v_691,key_e_690) else fail-any)) in
        {188}let v_693: bitstring = catch-fail(getpublickey(v_692)) in
        {189}let v_694: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_688))) in
        {190}let v_695: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_688)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then symmetricstatepack(1-proj-3-tuple(v_694),2-proj-3-tuple(v_694),hash(3-proj-3-tuple(v_694),v_693)) else fail-any) else fail-any)) in
        {191}let v_696: bitstring = catch-fail(keypairunpack(v_692)) in
        {192}let v_697: bitstring = catch-fail(symmetricstateunpack(v_695)) in
        {193}let v_698: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_697),(if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),4-proj-7-tuple(v_688)) else fail-any) else fail-any))) in
        {194}let v_699: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_697),(if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),4-proj-7-tuple(v_688)) else fail-any) else fail-any))) in
        {195}let v_700: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_697),(if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),4-proj-7-tuple(v_688)) else fail-any) else fail-any))) in
        {196}let v_701: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),4-proj-7-tuple(v_688)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_697))) then (if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then (v_698,v_699,v_700) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_702: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_688)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then dhexp(2-proj-2-tuple(v_696),4-proj-7-tuple(v_688)) else fail-any) else fail-any)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_701)) then cipherstatepack(2-proj-3-tuple(v_701),minnonce) else fail-any),1-proj-3-tuple(v_701),3-proj-3-tuple(v_697)) else fail-any) else fail-any) else fail-any)) in
        {198}let v_703: key = catch-fail(dhexp(key_s(me_673),g)) in
        {199}let v_704: keypair = catch-fail((if not-caught-fail(v_703) then keypairpack(v_703,key_s(me_673)) else fail-any)) in
        {200}let v_705: bitstring = catch-fail(symmetricstateunpack(v_702)) in
        {201}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_705))) in
        {202}let v_707: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_706),2-proj-2-tuple(v_706),3-proj-3-tuple(v_705),getpublickey(v_704))) in
        {203}let v_708: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_705))) in
        {204}let v_709: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_706))) && success?(1-proj-3-tuple(v_705))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then cipherstatepack(1-proj-2-tuple(v_708),increment_nonce(2-proj-2-tuple(v_706))) else fail-any) else fail-any)) in
        {205}let v_710: bitstring = catch-fail((if (success?(getpublickey(v_704)) && (success?(3-proj-3-tuple(v_705)) && success?(1-proj-3-tuple(v_705)))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then (if not-caught-fail(v_707) then (if not-caught-fail(v_709) then (v_709,v_707) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let v_711: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_710),2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)))) in
        {207}let v_712: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_710)) && success?(symmetricstatepack(1-proj-2-tuple(v_710),2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then symmetricstatepack(1-proj-3-tuple(v_711),2-proj-3-tuple(v_711),hash(3-proj-3-tuple(v_711),2-proj-2-tuple(v_710))) else fail-any) else fail-any)) in
        {208}let v_713: bitstring = catch-fail((if success?(getpublickey(v_704)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then (if not-caught-fail(v_712) then (v_712,2-proj-2-tuple(v_710)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let v_714: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_713))) in
        {210}let v_715: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_714))) in
        {211}let v_716: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_715),2-proj-2-tuple(v_715),3-proj-3-tuple(v_714),msg_a(me_673,them_672))) in
        {212}let v_717: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_714))) in
        {213}let v_718: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_715))) && success?(1-proj-3-tuple(v_714))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then cipherstatepack(1-proj-2-tuple(v_717),increment_nonce(2-proj-2-tuple(v_715))) else fail-any) else fail-any)) in
        {214}let v_719: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_714)) && success?(1-proj-3-tuple(v_714))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then (if not-caught-fail(v_716) then (if not-caught-fail(v_718) then (v_718,v_716) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {215}let v_720: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_719),2-proj-3-tuple(v_714),3-proj-3-tuple(v_714)))) in
        {216}let v_721: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_719)) && success?(symmetricstatepack(1-proj-2-tuple(v_719),2-proj-3-tuple(v_714),3-proj-3-tuple(v_714)))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then symmetricstatepack(1-proj-3-tuple(v_720),2-proj-3-tuple(v_720),hash(3-proj-3-tuple(v_720),2-proj-2-tuple(v_719))) else fail-any) else fail-any)) in
        {217}let v_722: bitstring = catch-fail((if success?(1-proj-2-tuple(v_713)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then (if not-caught-fail(v_721) then (v_721,2-proj-2-tuple(v_719)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_723: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_722),v_704,v_692,4-proj-7-tuple(v_688),5-proj-7-tuple(v_688),6-proj-7-tuple(v_688),7-proj-7-tuple(v_688))) in
        {219}let v_724: bitstring = catch-fail(concat3(v_693,2-proj-2-tuple(v_713),2-proj-2-tuple(v_722))) in
        {220}let (hs_725: handshakestate,re_726: key,message_a_727: bitstring) = (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-7-tuple(v_688))))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if not-caught-fail(v_692) then (if not-caught-fail(v_693) then (if not-caught-fail(v_695) then (if not-caught-fail(v_702) then (if not-caught-fail(v_704) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then (v_723,5-proj-7-tuple(v_688),v_724) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {221}event SendMsg(me_673,them_672,stage_a,msg_a(me_673,them_672),true);
        {222}insert statestore(me_673,them_672,statepack_b(hs_725));
        {223}out(pub, message_a_727)
    ) | (
        {253}get statestore(=me_673,=them_672,statepack_b(hs_728: handshakestate)) in
        {225}in(pub, message_b_729: bitstring);
        {226}let v_730: bitstring = catch-fail(handshakestateunpack(hs_728)) in
        {227}let v_731: bitstring = catch-fail(deconcat3(message_b_729)) in
        {228}let v_732: bool = catch-fail(true) in
        {229}let v_733: key = catch-fail(1-proj-3-tuple(v_731)) in
        {230}let v_734: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_730))) in
        {231}let v_735: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_730)) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),v_733)) else fail-any) else fail-any)) in
        {232}let v_736: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_730))) in
        {233}let v_737: bitstring = catch-fail(symmetricstateunpack(v_735)) in
        {234}let v_738: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_737),(if success?(3-proj-7-tuple(v_730)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),v_733) else fail-any) else fail-any))) in
        {235}let v_739: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_737),(if success?(3-proj-7-tuple(v_730)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),v_733) else fail-any) else fail-any))) in
        {236}let v_740: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_737),(if success?(3-proj-7-tuple(v_730)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),v_733) else fail-any) else fail-any))) in
        {237}let v_741: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_730)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),v_733) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_737))) then (if not-caught-fail(v_738) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (v_738,v_739,v_740) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let v_742: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_730)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then dhexp(2-proj-2-tuple(v_736),v_733) else fail-any) else fail-any)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_741)) then cipherstatepack(2-proj-3-tuple(v_741),minnonce) else fail-any),1-proj-3-tuple(v_741),3-proj-3-tuple(v_737)) else fail-any) else fail-any) else fail-any)) in
        {239}let v_743: bitstring = catch-fail(symmetricstateunpack(v_742)) in
        {240}let v_744: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_743))) in
        {241}let v_745: aead = catch-fail(decrypt(1-proj-2-tuple(v_744),2-proj-2-tuple(v_744),3-proj-3-tuple(v_743),3-proj-3-tuple(v_731))) in
        {242}let v_746: bitstring = catch-fail(aeadunpack(v_745)) in
        {243}let v_747: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_743))) in
        {244}let v_748: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_744))) && success?(1-proj-3-tuple(v_743))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then cipherstatepack(1-proj-2-tuple(v_747),increment_nonce(2-proj-2-tuple(v_744))) else fail-any) else fail-any)) in
        {245}let v_749: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_731)) && (success?(3-proj-3-tuple(v_743)) && success?(1-proj-3-tuple(v_743)))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-2-tuple(v_744))))) then (if not-caught-fail(v_745) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if not-caught-fail(v_748) then (v_748,3-proj-3-tuple(v_746),1-proj-3-tuple(v_746)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_750: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_749),2-proj-3-tuple(v_743),3-proj-3-tuple(v_743)))) in
        {247}let v_751: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_731)) && success?(symmetricstatepack(1-proj-3-tuple(v_749),2-proj-3-tuple(v_743),3-proj-3-tuple(v_743)))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then symmetricstatepack(1-proj-3-tuple(v_750),2-proj-3-tuple(v_750),hash(3-proj-3-tuple(v_750),3-proj-3-tuple(v_731))) else fail-any) else fail-any)) in
        {248}let v_752: bitstring = catch-fail((if success?(3-proj-3-tuple(v_731)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if not-caught-fail(v_751) then (v_751,2-proj-3-tuple(v_749),3-proj-3-tuple(v_749)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {249}let v_753: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_752),2-proj-7-tuple(v_730),3-proj-7-tuple(v_730),4-proj-7-tuple(v_730),v_733,6-proj-7-tuple(v_730),7-proj-7-tuple(v_730))) in
        {250}let (hs_754: handshakestate,re_755: key,plaintext_b_756: bitstring,valid_757: bool) = (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-7-tuple(v_730))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_735) then (if not-caught-fail(v_742) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if (v_732 && 3-proj-3-tuple(v_752)) then (if not-caught-fail(v_753) then (v_753,getpublickey(3-proj-7-tuple(v_730)),2-proj-3-tuple(v_752),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {251}event RecvMsg(me_673,them_672,stage_b,plaintext_b_756,valid_757);
        {252}insert statestore(me_673,them_672,statepack_c(hs_754))
    ) | (
        {278}get statestore(=me_673,=them_672,statepack_c(hs_758: handshakestate)) in
        {254}let v_759: bitstring = catch-fail(handshakestateunpack(hs_758)) in
        {255}let v_760: bitstring = catch-fail((empty,empty,empty)) in
        {256}let v_761: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_759))) in
        {257}let v_762: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_759))) in
        {258}let v_763: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_762),(if (success?(5-proj-7-tuple(v_759)) && success?(2-proj-7-tuple(v_759))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_759)) else fail-any) else fail-any))) in
        {259}let v_764: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_762),(if (success?(5-proj-7-tuple(v_759)) && success?(2-proj-7-tuple(v_759))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_759)) else fail-any) else fail-any))) in
        {260}let v_765: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_762),(if (success?(5-proj-7-tuple(v_759)) && success?(2-proj-7-tuple(v_759))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_759)) else fail-any) else fail-any))) in
        {261}let v_766: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_759)) && success?(2-proj-7-tuple(v_759))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_759)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_762))) then (if not-caught-fail(v_763) then (if not-caught-fail(v_764) then (if not-caught-fail(v_765) then (v_763,v_764,v_765) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_767: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_759)) && success?(2-proj-7-tuple(v_759))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then dhexp(2-proj-2-tuple(v_761),5-proj-7-tuple(v_759)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_759))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_766)) then cipherstatepack(2-proj-3-tuple(v_766),minnonce) else fail-any),1-proj-3-tuple(v_766),3-proj-3-tuple(v_762)) else fail-any) else fail-any) else fail-any)) in
        {263}let v_768: bitstring = catch-fail(symmetricstateunpack(v_767)) in
        {264}let v_769: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_768))) in
        {265}let v_770: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_769),2-proj-2-tuple(v_769),3-proj-3-tuple(v_768),msg_c(me_673,them_672))) in
        {266}let v_771: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_768))) in
        {267}let v_772: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_769))) && success?(1-proj-3-tuple(v_768))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then cipherstatepack(1-proj-2-tuple(v_771),increment_nonce(2-proj-2-tuple(v_769))) else fail-any) else fail-any)) in
        {268}let v_773: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_768)) && success?(1-proj-3-tuple(v_768))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then (if not-caught-fail(v_770) then (if not-caught-fail(v_772) then (v_772,v_770) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {269}let v_774: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_773),2-proj-3-tuple(v_768),3-proj-3-tuple(v_768)))) in
        {270}let v_775: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_773)) && success?(symmetricstatepack(1-proj-2-tuple(v_773),2-proj-3-tuple(v_768),3-proj-3-tuple(v_768)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_774),hash(3-proj-3-tuple(v_774),2-proj-2-tuple(v_773))) else fail-any) else fail-any)) in
        {271}let v_776: bitstring = catch-fail((if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-2-tuple(v_773))))) then (if not-caught-fail(v_775) then (v_775,2-proj-2-tuple(v_773)) else fail-any) else fail-any) else fail-any)) in
        {272}let v_777: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_776),2-proj-7-tuple(v_759),3-proj-7-tuple(v_759),4-proj-7-tuple(v_759),5-proj-7-tuple(v_759),6-proj-7-tuple(v_759),7-proj-7-tuple(v_759))) in
        {273}let v_778: bitstring = catch-fail(concat3(1-proj-3-tuple(v_760),2-proj-3-tuple(v_760),2-proj-2-tuple(v_776))) in
        {274}let (hs_779: handshakestate,re_780: key,message_c_781: bitstring) = (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-7-tuple(v_759))))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then (if not-caught-fail(v_767) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (v_777,5-proj-7-tuple(v_759),v_778) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {275}event SendMsg(me_673,them_672,stage_c,msg_c(me_673,them_672),true);
        {276}insert statestore(me_673,them_672,statepack_d(hs_779));
        {277}out(pub, message_c_781)
    ) | (
        {297}get statestore(=me_673,=them_672,statepack_d(hs_782: handshakestate)) in
        {279}in(pub, message_d_783: bitstring);
        {280}let v_784: bitstring = catch-fail(handshakestateunpack(hs_782)) in
        {281}let v_785: bitstring = catch-fail(deconcat3(message_d_783)) in
        {282}let v_786: bool = catch-fail(true) in
        {283}let v_787: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_784))) in
        {284}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_787))) in
        {285}let v_789: aead = catch-fail(decrypt(1-proj-2-tuple(v_788),2-proj-2-tuple(v_788),3-proj-3-tuple(v_787),3-proj-3-tuple(v_785))) in
        {286}let v_790: bitstring = catch-fail(aeadunpack(v_789)) in
        {287}let v_791: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_787))) in
        {288}let v_792: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_788))) && success?(1-proj-3-tuple(v_787))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-2-tuple(v_791))))) then cipherstatepack(1-proj-2-tuple(v_791),increment_nonce(2-proj-2-tuple(v_788))) else fail-any) else fail-any)) in
        {289}let v_793: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_785)) && (success?(3-proj-3-tuple(v_787)) && success?(1-proj-3-tuple(v_787)))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then (if not-caught-fail(v_789) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_792) then (v_792,3-proj-3-tuple(v_790),1-proj-3-tuple(v_790)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {290}let v_794: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_787),3-proj-3-tuple(v_787)))) in
        {291}let v_795: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_785)) && success?(symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_787),3-proj-3-tuple(v_787)))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then symmetricstatepack(1-proj-3-tuple(v_794),2-proj-3-tuple(v_794),hash(3-proj-3-tuple(v_794),3-proj-3-tuple(v_785))) else fail-any) else fail-any)) in
        {292}let v_796: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_785)) && success?(1-proj-7-tuple(v_784))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if not-caught-fail(v_795) then (v_795,2-proj-3-tuple(v_793),3-proj-3-tuple(v_793)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_797: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_796),2-proj-7-tuple(v_784),3-proj-7-tuple(v_784),4-proj-7-tuple(v_784),5-proj-7-tuple(v_784),6-proj-7-tuple(v_784),7-proj-7-tuple(v_784))) in
        {294}let (hs_798: handshakestate,re_799: key,plaintext_d_800: bitstring,valid_801: bool) = (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-7-tuple(v_784))))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then (if (v_786 && 3-proj-3-tuple(v_796)) then (if not-caught-fail(v_797) then (v_797,getpublickey(3-proj-7-tuple(v_784)),2-proj-3-tuple(v_796),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {295}event RecvMsg(me_673,them_672,stage_d,plaintext_d_800,valid_801);
        {296}insert statestore(me_673,them_672,statepack_e(hs_798))
    ) | (
        {323}get statestore(=me_673,=them_672,statepack_e(hs_802: handshakestate)) in
        {298}let v_803: bitstring = catch-fail(handshakestateunpack(hs_802)) in
        {299}let v_804: bitstring = catch-fail((empty,empty,empty)) in
        {300}let v_805: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_803))) in
        {301}let v_806: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {302}let v_807: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_806),2-proj-2-tuple(v_806),3-proj-3-tuple(v_805),msg_e(me_673,them_672))) in
        {303}let v_808: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {304}let v_809: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_806))) && success?(1-proj-3-tuple(v_805))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then cipherstatepack(1-proj-2-tuple(v_808),increment_nonce(2-proj-2-tuple(v_806))) else fail-any) else fail-any)) in
        {305}let v_810: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_805)) && success?(1-proj-3-tuple(v_805))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then (if not-caught-fail(v_807) then (if not-caught-fail(v_809) then (v_809,v_807) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_811: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_810),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) in
        {307}let v_812: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_810)) && success?(symmetricstatepack(1-proj-2-tuple(v_810),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then symmetricstatepack(1-proj-3-tuple(v_811),2-proj-3-tuple(v_811),hash(3-proj-3-tuple(v_811),2-proj-2-tuple(v_810))) else fail-any) else fail-any)) in
        {308}let v_813: bitstring = catch-fail((if success?(1-proj-7-tuple(v_803)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_812) then (v_812,2-proj-2-tuple(v_810)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {309}let v_814: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_813),2-proj-7-tuple(v_803),3-proj-7-tuple(v_803),4-proj-7-tuple(v_803),5-proj-7-tuple(v_803),6-proj-7-tuple(v_803),7-proj-7-tuple(v_803))) in
        {310}let v_815: bitstring = catch-fail(concat3(1-proj-3-tuple(v_804),2-proj-3-tuple(v_804),2-proj-2-tuple(v_813))) in
        {311}let v_816: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_813))) in
        {312}let v_817: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_816),zero)) in
        {313}let v_818: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_816),zero)) in
        {314}let v_819: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_816),zero)) in
        {315}let v_820: bitstring = catch-fail((if success?(2-proj-3-tuple(v_816)) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (if not-caught-fail(v_819) then (v_817,v_818,v_819) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_821: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_820)) then cipherstatepack(1-proj-3-tuple(v_820),minnonce) else fail-any)) in
        {317}let v_822: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_820)) then cipherstatepack(2-proj-3-tuple(v_820),minnonce) else fail-any)) in
        {318}let v_823: bitstring = catch-fail((if success?(1-proj-2-tuple(v_813)) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if not-caught-fail(v_821) then (if not-caught-fail(v_822) then (1-proj-2-tuple(v_813),v_821,v_822) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {319}let (hs_824: handshakestate,re_825: key,message_e_826: bitstring,cs1_827: cipherstate,cs2_828: cipherstate) = (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-7-tuple(v_803))))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (v_814,5-proj-7-tuple(v_803),v_815,2-proj-3-tuple(v_823),3-proj-3-tuple(v_823)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {320}event SendMsg(me_673,them_672,stage_e,msg_e(me_673,them_672),true);
        {321}insert statestore(me_673,them_672,statepack_f(hs_824));
        {322}out(pub, message_e_826)
    ) | (
        {324}event LeakS(phase0,me_673);
        {325}out(pub, key_s(me_673))
    ) | (
        {326}phase 1;
        {327}event LeakS(phase1,me_673);
        {328}out(pub, key_s(me_673))
    )
) | (
    {329}let them_829: principal = alice in
    {330}let me_830: principal = bob in
    {331}let v_831: key = catch-fail(dhexp(key_s(me_830),g)) in
    {332}let s_832: keypair = (if not-caught-fail(v_831) then keypairpack(v_831,key_s(me_830)) else fail-any) in
    {333}out(pub, getpublickey(s_832));
    (
        {334}let e_833: keypair = keypairpack(empty,empty) in
        {335}let rs_834: key = empty in
        {336}let re_835: key = empty in
        {337}let v_836: bitstring = catch-fail(hash(somename,empty)) in
        {338}let v_837: key = catch-fail(v_836) in
        {339}let v_838: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {340}let v_839: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_836) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then symmetricstatepack(v_838,v_837,v_836) else fail-any) else fail-any) else fail-any))) in
        {341}let v_840: symmetricstate = catch-fail((if success?((if not-caught-fail(v_836) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then symmetricstatepack(v_838,v_837,v_836) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then symmetricstatepack(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),hash(3-proj-3-tuple(v_839),empty)) else fail-any) else fail-any)) in
        {342}let v_841: bitstring = catch-fail(symmetricstateunpack(v_840)) in
        {343}let v_842: symmetricstate = catch-fail((if success?(getpublickey(s_832)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then symmetricstatepack(1-proj-3-tuple(v_841),2-proj-3-tuple(v_841),hash(3-proj-3-tuple(v_841),getpublickey(s_832))) else fail-any) else fail-any)) in
        {344}let hs_843: handshakestate = (if not-caught-fail(v_840) then (if not-caught-fail(v_842) then handshakestatepack(v_842,s_832,e_833,rs_834,re_835,empty,false) else fail-any) else fail-any) in
        {345}insert statestore(me_830,them_829,statepack_a(hs_843))
    ) | (
        {386}get statestore(=me_830,=them_829,statepack_a(hs_844: handshakestate)) in
        {346}in(pub, message_a_845: bitstring);
        {347}let v_846: bitstring = catch-fail(handshakestateunpack(hs_844)) in
        {348}let v_847: bitstring = catch-fail(deconcat3(message_a_845)) in
        {349}let v_848: bool = catch-fail(true) in
        {350}let v_849: key = catch-fail(1-proj-3-tuple(v_847)) in
        {351}let v_850: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_846))) in
        {352}let v_851: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_846)) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then symmetricstatepack(1-proj-3-tuple(v_850),2-proj-3-tuple(v_850),hash(3-proj-3-tuple(v_850),v_849)) else fail-any) else fail-any)) in
        {353}let v_852: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_846))) in
        {354}let v_853: bitstring = catch-fail(symmetricstateunpack(v_851)) in
        {355}let v_854: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_853),(if success?(2-proj-7-tuple(v_846)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then dhexp(2-proj-2-tuple(v_852),v_849) else fail-any) else fail-any))) in
        {356}let v_855: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_853),(if success?(2-proj-7-tuple(v_846)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then dhexp(2-proj-2-tuple(v_852),v_849) else fail-any) else fail-any))) in
        {357}let v_856: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_853),(if success?(2-proj-7-tuple(v_846)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then dhexp(2-proj-2-tuple(v_852),v_849) else fail-any) else fail-any))) in
        {358}let v_857: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_846)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then dhexp(2-proj-2-tuple(v_852),v_849) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_853))) then (if not-caught-fail(v_854) then (if not-caught-fail(v_855) then (if not-caught-fail(v_856) then (v_854,v_855,v_856) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {359}let v_858: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_846)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then dhexp(2-proj-2-tuple(v_852),v_849) else fail-any) else fail-any)) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_857)) then cipherstatepack(2-proj-3-tuple(v_857),minnonce) else fail-any),1-proj-3-tuple(v_857),3-proj-3-tuple(v_853)) else fail-any) else fail-any) else fail-any)) in
        {360}let v_859: bitstring = catch-fail(symmetricstateunpack(v_858)) in
        {361}let v_860: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_859))) in
        {362}let v_861: aead = catch-fail(decrypt(1-proj-2-tuple(v_860),2-proj-2-tuple(v_860),3-proj-3-tuple(v_859),2-proj-3-tuple(v_847))) in
        {363}let v_862: bitstring = catch-fail(aeadunpack(v_861)) in
        {364}let v_863: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_859))) in
        {365}let v_864: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_860))) && success?(1-proj-3-tuple(v_859))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then cipherstatepack(1-proj-2-tuple(v_863),increment_nonce(2-proj-2-tuple(v_860))) else fail-any) else fail-any)) in
        {366}let v_865: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_847)) && (success?(3-proj-3-tuple(v_859)) && success?(1-proj-3-tuple(v_859)))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-2-tuple(v_860))))) then (if not-caught-fail(v_861) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if not-caught-fail(v_864) then (v_864,3-proj-3-tuple(v_862),1-proj-3-tuple(v_862)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {367}let v_866: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_859),3-proj-3-tuple(v_859)))) in
        {368}let v_867: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_847)) && success?(symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_859),3-proj-3-tuple(v_859)))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then symmetricstatepack(1-proj-3-tuple(v_866),2-proj-3-tuple(v_866),hash(3-proj-3-tuple(v_866),2-proj-3-tuple(v_847))) else fail-any) else fail-any)) in
        {369}let v_868: bitstring = catch-fail((if success?(2-proj-3-tuple(v_847)) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_867) then (v_867,2-proj-3-tuple(v_865),3-proj-3-tuple(v_865)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {370}let v_869: key = catch-fail(2-proj-3-tuple(v_868)) in
        {371}let v_870: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_868))) in
        {372}let v_871: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_870))) in
        {373}let v_872: aead = catch-fail(decrypt(1-proj-2-tuple(v_871),2-proj-2-tuple(v_871),3-proj-3-tuple(v_870),3-proj-3-tuple(v_847))) in
        {374}let v_873: bitstring = catch-fail(aeadunpack(v_872)) in
        {375}let v_874: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_870))) in
        {376}let v_875: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_871))) && success?(1-proj-3-tuple(v_870))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then cipherstatepack(1-proj-2-tuple(v_874),increment_nonce(2-proj-2-tuple(v_871))) else fail-any) else fail-any)) in
        {377}let v_876: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_847)) && (success?(3-proj-3-tuple(v_870)) && success?(1-proj-3-tuple(v_870)))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-2-tuple(v_871))))) then (if not-caught-fail(v_872) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if not-caught-fail(v_875) then (v_875,3-proj-3-tuple(v_873),1-proj-3-tuple(v_873)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {378}let v_877: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_876),2-proj-3-tuple(v_870),3-proj-3-tuple(v_870)))) in
        {379}let v_878: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_847)) && success?(symmetricstatepack(1-proj-3-tuple(v_876),2-proj-3-tuple(v_870),3-proj-3-tuple(v_870)))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then symmetricstatepack(1-proj-3-tuple(v_877),2-proj-3-tuple(v_877),hash(3-proj-3-tuple(v_877),3-proj-3-tuple(v_847))) else fail-any) else fail-any)) in
        {380}let v_879: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_847)) && success?(1-proj-3-tuple(v_868))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then (if not-caught-fail(v_878) then (v_878,2-proj-3-tuple(v_876),3-proj-3-tuple(v_876)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_880: key = catch-fail(dhexp(key_s(them_829),g)) in
        {382}let v_881: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_879),2-proj-7-tuple(v_846),3-proj-7-tuple(v_846),v_869,v_849,6-proj-7-tuple(v_846),7-proj-7-tuple(v_846))) in
        {383}let (hs_882: handshakestate,re_883: key,plaintext_a: bitstring,valid_884: bool) = (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-7-tuple(v_846))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then (if not-caught-fail(v_848) then (if not-caught-fail(v_849) then (if not-caught-fail(v_851) then (if not-caught-fail(v_858) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if not-caught-fail(v_869) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if ((3-proj-3-tuple(v_868) && 3-proj-3-tuple(v_879)) && (v_869 = getpublickey((if not-caught-fail(v_880) then keypairpack(v_880,key_s(them_829)) else fail-any)))) then (if not-caught-fail(v_881) then (v_881,getpublickey(3-proj-7-tuple(v_846)),2-proj-3-tuple(v_879),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {384}event RecvMsg(me_830,them_829,stage_a,plaintext_a,valid_884);
        {385}insert statestore(me_830,them_829,statepack_b(hs_882))
    ) | (
        {417}get statestore(=me_830,=them_829,statepack_b(hs_885: handshakestate)) in
        {387}let v_886: bitstring = catch-fail(handshakestateunpack(hs_885)) in
        {388}let v_887: bitstring = catch-fail((empty,empty,empty)) in
        {389}new key_e_888[me_830,them_829]: key;
        {390}let v_889: key = catch-fail(dhexp(key_e_888,g)) in
        {391}let v_890: keypair = catch-fail((if not-caught-fail(v_889) then keypairpack(v_889,key_e_888) else fail-any)) in
        {392}let v_891: bitstring = catch-fail(getpublickey(v_890)) in
        {393}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_886))) in
        {394}let v_893: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_886)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then symmetricstatepack(1-proj-3-tuple(v_892),2-proj-3-tuple(v_892),hash(3-proj-3-tuple(v_892),v_891)) else fail-any) else fail-any)) in
        {395}let v_894: bitstring = catch-fail(keypairunpack(v_890)) in
        {396}let v_895: bitstring = catch-fail(symmetricstateunpack(v_893)) in
        {397}let v_896: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_895),(if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_886)) else fail-any) else fail-any))) in
        {398}let v_897: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_895),(if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_886)) else fail-any) else fail-any))) in
        {399}let v_898: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_895),(if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_886)) else fail-any) else fail-any))) in
        {400}let v_899: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_886)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_895))) then (if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (v_896,v_897,v_898) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {401}let v_900: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_886)) else fail-any) else fail-any)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_899)) then cipherstatepack(2-proj-3-tuple(v_899),minnonce) else fail-any),1-proj-3-tuple(v_899),3-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any)) in
        {402}let v_901: bitstring = catch-fail(symmetricstateunpack(v_900)) in
        {403}let v_902: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_901))) in
        {404}let v_903: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_902),2-proj-2-tuple(v_902),3-proj-3-tuple(v_901),msg_b(me_830,them_829))) in
        {405}let v_904: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_901))) in
        {406}let v_905: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_902))) && success?(1-proj-3-tuple(v_901))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then cipherstatepack(1-proj-2-tuple(v_904),increment_nonce(2-proj-2-tuple(v_902))) else fail-any) else fail-any)) in
        {407}let v_906: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_901)) && success?(1-proj-3-tuple(v_901))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then (if not-caught-fail(v_903) then (if not-caught-fail(v_905) then (v_905,v_903) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {408}let v_907: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_906),2-proj-3-tuple(v_901),3-proj-3-tuple(v_901)))) in
        {409}let v_908: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_906)) && success?(symmetricstatepack(1-proj-2-tuple(v_906),2-proj-3-tuple(v_901),3-proj-3-tuple(v_901)))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then symmetricstatepack(1-proj-3-tuple(v_907),2-proj-3-tuple(v_907),hash(3-proj-3-tuple(v_907),2-proj-2-tuple(v_906))) else fail-any) else fail-any)) in
        {410}let v_909: bitstring = catch-fail((if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then (if not-caught-fail(v_908) then (v_908,2-proj-2-tuple(v_906)) else fail-any) else fail-any) else fail-any)) in
        {411}let v_910: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_909),2-proj-7-tuple(v_886),v_890,4-proj-7-tuple(v_886),5-proj-7-tuple(v_886),6-proj-7-tuple(v_886),7-proj-7-tuple(v_886))) in
        {412}let v_911: bitstring = catch-fail(concat3(v_891,2-proj-3-tuple(v_887),2-proj-2-tuple(v_909))) in
        {413}let (hs_912: handshakestate,re_913: key,message_b_914: bitstring) = (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-7-tuple(v_886))))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if not-caught-fail(v_890) then (if not-caught-fail(v_891) then (if not-caught-fail(v_893) then (if not-caught-fail(v_900) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then (if not-caught-fail(v_910) then (if not-caught-fail(v_911) then (v_910,5-proj-7-tuple(v_886),v_911) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {414}event SendMsg(me_830,them_829,stage_b,msg_b(me_830,them_829),true);
        {415}insert statestore(me_830,them_829,statepack_c(hs_912));
        {416}out(pub, message_b_914)
    ) | (
        {443}get statestore(=me_830,=them_829,statepack_c(hs_915: handshakestate)) in
        {418}in(pub, message_c_916: bitstring);
        {419}let v_917: bitstring = catch-fail(handshakestateunpack(hs_915)) in
        {420}let v_918: bitstring = catch-fail(deconcat3(message_c_916)) in
        {421}let v_919: bool = catch-fail(true) in
        {422}let v_920: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_917))) in
        {423}let v_921: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_917))) in
        {424}let v_922: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_921),(if (success?(4-proj-7-tuple(v_917)) && success?(3-proj-7-tuple(v_917))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_917)) else fail-any) else fail-any))) in
        {425}let v_923: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_921),(if (success?(4-proj-7-tuple(v_917)) && success?(3-proj-7-tuple(v_917))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_917)) else fail-any) else fail-any))) in
        {426}let v_924: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_921),(if (success?(4-proj-7-tuple(v_917)) && success?(3-proj-7-tuple(v_917))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_917)) else fail-any) else fail-any))) in
        {427}let v_925: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_917)) && success?(3-proj-7-tuple(v_917))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_917)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_921))) then (if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (v_922,v_923,v_924) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {428}let v_926: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_917)) && success?(3-proj-7-tuple(v_917))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_917)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_917))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_925)) then cipherstatepack(2-proj-3-tuple(v_925),minnonce) else fail-any),1-proj-3-tuple(v_925),3-proj-3-tuple(v_921)) else fail-any) else fail-any) else fail-any)) in
        {429}let v_927: bitstring = catch-fail(symmetricstateunpack(v_926)) in
        {430}let v_928: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_927))) in
        {431}let v_929: aead = catch-fail(decrypt(1-proj-2-tuple(v_928),2-proj-2-tuple(v_928),3-proj-3-tuple(v_927),3-proj-3-tuple(v_918))) in
        {432}let v_930: bitstring = catch-fail(aeadunpack(v_929)) in
        {433}let v_931: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_927))) in
        {434}let v_932: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_928))) && success?(1-proj-3-tuple(v_927))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-2-tuple(v_931))))) then cipherstatepack(1-proj-2-tuple(v_931),increment_nonce(2-proj-2-tuple(v_928))) else fail-any) else fail-any)) in
        {435}let v_933: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_918)) && (success?(3-proj-3-tuple(v_927)) && success?(1-proj-3-tuple(v_927)))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then (if not-caught-fail(v_929) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if not-caught-fail(v_932) then (v_932,3-proj-3-tuple(v_930),1-proj-3-tuple(v_930)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_934: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_933),2-proj-3-tuple(v_927),3-proj-3-tuple(v_927)))) in
        {437}let v_935: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_918)) && success?(symmetricstatepack(1-proj-3-tuple(v_933),2-proj-3-tuple(v_927),3-proj-3-tuple(v_927)))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_934),hash(3-proj-3-tuple(v_934),3-proj-3-tuple(v_918))) else fail-any) else fail-any)) in
        {438}let v_936: bitstring = catch-fail((if success?(3-proj-3-tuple(v_918)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if not-caught-fail(v_935) then (v_935,2-proj-3-tuple(v_933),3-proj-3-tuple(v_933)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_937: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_936),2-proj-7-tuple(v_917),3-proj-7-tuple(v_917),4-proj-7-tuple(v_917),5-proj-7-tuple(v_917),6-proj-7-tuple(v_917),7-proj-7-tuple(v_917))) in
        {440}let (hs_938: handshakestate,re_939: key,plaintext_c: bitstring,valid_940: bool) = (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-7-tuple(v_917))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if not-caught-fail(v_919) then (if not-caught-fail(v_926) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if (v_919 && 3-proj-3-tuple(v_936)) then (if not-caught-fail(v_937) then (v_937,getpublickey(3-proj-7-tuple(v_917)),2-proj-3-tuple(v_936),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {441}event RecvMsg(me_830,them_829,stage_c,plaintext_c,valid_940);
        {442}insert statestore(me_830,them_829,statepack_d(hs_938))
    ) | (
        {461}get statestore(=me_830,=them_829,statepack_d(hs_941: handshakestate)) in
        {444}let v_942: bitstring = catch-fail(handshakestateunpack(hs_941)) in
        {445}let v_943: bitstring = catch-fail((empty,empty,empty)) in
        {446}let v_944: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_942))) in
        {447}let v_945: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_944))) in
        {448}let v_946: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_945),2-proj-2-tuple(v_945),3-proj-3-tuple(v_944),msg_d(me_830,them_829))) in
        {449}let v_947: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_944))) in
        {450}let v_948: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_945))) && success?(1-proj-3-tuple(v_944))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then cipherstatepack(1-proj-2-tuple(v_947),increment_nonce(2-proj-2-tuple(v_945))) else fail-any) else fail-any)) in
        {451}let v_949: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_944)) && success?(1-proj-3-tuple(v_944))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then (if not-caught-fail(v_946) then (if not-caught-fail(v_948) then (v_948,v_946) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {452}let v_950: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_949),2-proj-3-tuple(v_944),3-proj-3-tuple(v_944)))) in
        {453}let v_951: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_949)) && success?(symmetricstatepack(1-proj-2-tuple(v_949),2-proj-3-tuple(v_944),3-proj-3-tuple(v_944)))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then symmetricstatepack(1-proj-3-tuple(v_950),2-proj-3-tuple(v_950),hash(3-proj-3-tuple(v_950),2-proj-2-tuple(v_949))) else fail-any) else fail-any)) in
        {454}let v_952: bitstring = catch-fail((if success?(1-proj-7-tuple(v_942)) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-2-tuple(v_949))))) then (if not-caught-fail(v_951) then (v_951,2-proj-2-tuple(v_949)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {455}let v_953: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_952),2-proj-7-tuple(v_942),3-proj-7-tuple(v_942),4-proj-7-tuple(v_942),5-proj-7-tuple(v_942),6-proj-7-tuple(v_942),7-proj-7-tuple(v_942))) in
        {456}let v_954: bitstring = catch-fail(concat3(1-proj-3-tuple(v_943),2-proj-3-tuple(v_943),2-proj-2-tuple(v_952))) in
        {457}let (hs_955: handshakestate,re_956: key,message_d_957: bitstring) = (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-7-tuple(v_942))))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then (if not-caught-fail(v_953) then (if not-caught-fail(v_954) then (v_953,5-proj-7-tuple(v_942),v_954) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {458}event SendMsg(me_830,them_829,stage_d,msg_d(me_830,them_829),true);
        {459}insert statestore(me_830,them_829,statepack_e(hs_955));
        {460}out(pub, message_d_957)
    ) | (
        {489}get statestore(=me_830,=them_829,statepack_e(hs_958: handshakestate)) in
        {462}in(pub, message_e_959: bitstring);
        {463}let v_960: bitstring = catch-fail(handshakestateunpack(hs_958)) in
        {464}let v_961: bitstring = catch-fail(deconcat3(message_e_959)) in
        {465}let v_962: bool = catch-fail(true) in
        {466}let v_963: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_960))) in
        {467}let v_964: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_963))) in
        {468}let v_965: aead = catch-fail(decrypt(1-proj-2-tuple(v_964),2-proj-2-tuple(v_964),3-proj-3-tuple(v_963),3-proj-3-tuple(v_961))) in
        {469}let v_966: bitstring = catch-fail(aeadunpack(v_965)) in
        {470}let v_967: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_963))) in
        {471}let v_968: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_964))) && success?(1-proj-3-tuple(v_963))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then cipherstatepack(1-proj-2-tuple(v_967),increment_nonce(2-proj-2-tuple(v_964))) else fail-any) else fail-any)) in
        {472}let v_969: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_961)) && (success?(3-proj-3-tuple(v_963)) && success?(1-proj-3-tuple(v_963)))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-2-tuple(v_964))))) then (if not-caught-fail(v_965) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if not-caught-fail(v_968) then (v_968,3-proj-3-tuple(v_966),1-proj-3-tuple(v_966)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {473}let v_970: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_969),2-proj-3-tuple(v_963),3-proj-3-tuple(v_963)))) in
        {474}let v_971: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_961)) && success?(symmetricstatepack(1-proj-3-tuple(v_969),2-proj-3-tuple(v_963),3-proj-3-tuple(v_963)))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then symmetricstatepack(1-proj-3-tuple(v_970),2-proj-3-tuple(v_970),hash(3-proj-3-tuple(v_970),3-proj-3-tuple(v_961))) else fail-any) else fail-any)) in
        {475}let v_972: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_961)) && success?(1-proj-7-tuple(v_960))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (if not-caught-fail(v_971) then (v_971,2-proj-3-tuple(v_969),3-proj-3-tuple(v_969)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_973: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_972),2-proj-7-tuple(v_960),3-proj-7-tuple(v_960),4-proj-7-tuple(v_960),5-proj-7-tuple(v_960),6-proj-7-tuple(v_960),7-proj-7-tuple(v_960))) in
        {477}let v_974: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_972))) in
        {478}let v_975: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_974),zero)) in
        {479}let v_976: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_974),zero)) in
        {480}let v_977: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_974),zero)) in
        {481}let v_978: bitstring = catch-fail((if success?(2-proj-3-tuple(v_974)) then (if not-caught-fail(v_975) then (if not-caught-fail(v_976) then (if not-caught-fail(v_977) then (v_975,v_976,v_977) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {482}let v_979: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_978)) then cipherstatepack(1-proj-3-tuple(v_978),minnonce) else fail-any)) in
        {483}let v_980: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_978)) then cipherstatepack(2-proj-3-tuple(v_978),minnonce) else fail-any)) in
        {484}let v_981: bitstring = catch-fail((if success?(1-proj-3-tuple(v_972)) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then (if not-caught-fail(v_979) then (if not-caught-fail(v_980) then (1-proj-3-tuple(v_972),v_979,v_980) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let (hs_982: handshakestate,re_983: key,plaintext_e: bitstring,valid_984: bool,cs1_985: cipherstate,cs2_986: cipherstate) = (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-7-tuple(v_960))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_962) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if (v_962 && 3-proj-3-tuple(v_972)) then (if not-caught-fail(v_973) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then (v_973,getpublickey(3-proj-7-tuple(v_960)),2-proj-3-tuple(v_972),true,2-proj-3-tuple(v_981),3-proj-3-tuple(v_981)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {486}event RecvMsg(me_830,them_829,stage_e,plaintext_e,valid_984);
        {487}insert statestore(me_830,them_829,statepack_f(hs_982));
        {488}event RecvEnd(valid_984)
    ) | (
        {490}event LeakS(phase0,me_830);
        {491}out(pub, key_s(me_830))
    ) | (
        {492}phase 1;
        {493}event LeakS(phase1,me_830);
        {494}out(pub, key_s(me_830))
    )
) | (
    {495}let them_987: principal = charlie in
    {496}let me_988: principal = bob in
    {497}let v_989: key = catch-fail(dhexp(key_s(me_988),g)) in
    {498}let s_990: keypair = (if not-caught-fail(v_989) then keypairpack(v_989,key_s(me_988)) else fail-any) in
    {499}out(pub, getpublickey(s_990));
    (
        {500}let e_991: keypair = keypairpack(empty,empty) in
        {501}let rs_992: key = empty in
        {502}let re_993: key = empty in
        {503}let v_994: bitstring = catch-fail(hash(somename,empty)) in
        {504}let v_995: key = catch-fail(v_994) in
        {505}let v_996: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {506}let v_997: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_994) then (if not-caught-fail(v_995) then (if not-caught-fail(v_996) then symmetricstatepack(v_996,v_995,v_994) else fail-any) else fail-any) else fail-any))) in
        {507}let v_998: symmetricstate = catch-fail((if success?((if not-caught-fail(v_994) then (if not-caught-fail(v_995) then (if not-caught-fail(v_996) then symmetricstatepack(v_996,v_995,v_994) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack(1-proj-3-tuple(v_997),2-proj-3-tuple(v_997),hash(3-proj-3-tuple(v_997),empty)) else fail-any) else fail-any)) in
        {508}let v_999: bitstring = catch-fail(symmetricstateunpack(v_998)) in
        {509}let v_1000: symmetricstate = catch-fail((if success?(getpublickey(s_990)) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then symmetricstatepack(1-proj-3-tuple(v_999),2-proj-3-tuple(v_999),hash(3-proj-3-tuple(v_999),getpublickey(s_990))) else fail-any) else fail-any)) in
        {510}let hs_1001: handshakestate = (if not-caught-fail(v_998) then (if not-caught-fail(v_1000) then handshakestatepack(v_1000,s_990,e_991,rs_992,re_993,empty,false) else fail-any) else fail-any) in
        {511}insert statestore(me_988,them_987,statepack_a(hs_1001))
    ) | (
        {552}get statestore(=me_988,=them_987,statepack_a(hs_1002: handshakestate)) in
        {512}in(pub, message_a_1003: bitstring);
        {513}let v_1004: bitstring = catch-fail(handshakestateunpack(hs_1002)) in
        {514}let v_1005: bitstring = catch-fail(deconcat3(message_a_1003)) in
        {515}let v_1006: bool = catch-fail(true) in
        {516}let v_1007: key = catch-fail(1-proj-3-tuple(v_1005)) in
        {517}let v_1008: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1004))) in
        {518}let v_1009: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1004)) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then symmetricstatepack(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1008),hash(3-proj-3-tuple(v_1008),v_1007)) else fail-any) else fail-any)) in
        {519}let v_1010: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1004))) in
        {520}let v_1011: bitstring = catch-fail(symmetricstateunpack(v_1009)) in
        {521}let v_1012: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1011),(if success?(2-proj-7-tuple(v_1004)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1007) else fail-any) else fail-any))) in
        {522}let v_1013: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1011),(if success?(2-proj-7-tuple(v_1004)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1007) else fail-any) else fail-any))) in
        {523}let v_1014: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1011),(if success?(2-proj-7-tuple(v_1004)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1007) else fail-any) else fail-any))) in
        {524}let v_1015: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1004)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1007) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1011))) then (if not-caught-fail(v_1012) then (if not-caught-fail(v_1013) then (if not-caught-fail(v_1014) then (v_1012,v_1013,v_1014) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1016: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1004)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1007) else fail-any) else fail-any)) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1015)) then cipherstatepack(2-proj-3-tuple(v_1015),minnonce) else fail-any),1-proj-3-tuple(v_1015),3-proj-3-tuple(v_1011)) else fail-any) else fail-any) else fail-any)) in
        {526}let v_1017: bitstring = catch-fail(symmetricstateunpack(v_1016)) in
        {527}let v_1018: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1017))) in
        {528}let v_1019: aead = catch-fail(decrypt(1-proj-2-tuple(v_1018),2-proj-2-tuple(v_1018),3-proj-3-tuple(v_1017),2-proj-3-tuple(v_1005))) in
        {529}let v_1020: bitstring = catch-fail(aeadunpack(v_1019)) in
        {530}let v_1021: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1017))) in
        {531}let v_1022: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1018))) && success?(1-proj-3-tuple(v_1017))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then cipherstatepack(1-proj-2-tuple(v_1021),increment_nonce(2-proj-2-tuple(v_1018))) else fail-any) else fail-any)) in
        {532}let v_1023: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1005)) && (success?(3-proj-3-tuple(v_1017)) && success?(1-proj-3-tuple(v_1017)))) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then (if not-caught-fail(v_1019) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if not-caught-fail(v_1022) then (v_1022,3-proj-3-tuple(v_1020),1-proj-3-tuple(v_1020)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {533}let v_1024: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1023),2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)))) in
        {534}let v_1025: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1005)) && success?(symmetricstatepack(1-proj-3-tuple(v_1023),2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)))) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-3-tuple(v_1024))))) then symmetricstatepack(1-proj-3-tuple(v_1024),2-proj-3-tuple(v_1024),hash(3-proj-3-tuple(v_1024),2-proj-3-tuple(v_1005))) else fail-any) else fail-any)) in
        {535}let v_1026: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1005)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-3-tuple(v_1023))))) then (if not-caught-fail(v_1025) then (v_1025,2-proj-3-tuple(v_1023),3-proj-3-tuple(v_1023)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {536}let v_1027: key = catch-fail(2-proj-3-tuple(v_1026)) in
        {537}let v_1028: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1026))) in
        {538}let v_1029: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1028))) in
        {539}let v_1030: aead = catch-fail(decrypt(1-proj-2-tuple(v_1029),2-proj-2-tuple(v_1029),3-proj-3-tuple(v_1028),3-proj-3-tuple(v_1005))) in
        {540}let v_1031: bitstring = catch-fail(aeadunpack(v_1030)) in
        {541}let v_1032: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1028))) in
        {542}let v_1033: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1029))) && success?(1-proj-3-tuple(v_1028))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then cipherstatepack(1-proj-2-tuple(v_1032),increment_nonce(2-proj-2-tuple(v_1029))) else fail-any) else fail-any)) in
        {543}let v_1034: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1005)) && (success?(3-proj-3-tuple(v_1028)) && success?(1-proj-3-tuple(v_1028)))) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-2-tuple(v_1029))))) then (if not-caught-fail(v_1030) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then (if not-caught-fail(v_1033) then (v_1033,3-proj-3-tuple(v_1031),1-proj-3-tuple(v_1031)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {544}let v_1035: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1034),2-proj-3-tuple(v_1028),3-proj-3-tuple(v_1028)))) in
        {545}let v_1036: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1005)) && success?(symmetricstatepack(1-proj-3-tuple(v_1034),2-proj-3-tuple(v_1028),3-proj-3-tuple(v_1028)))) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then symmetricstatepack(1-proj-3-tuple(v_1035),2-proj-3-tuple(v_1035),hash(3-proj-3-tuple(v_1035),3-proj-3-tuple(v_1005))) else fail-any) else fail-any)) in
        {546}let v_1037: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1005)) && success?(1-proj-3-tuple(v_1026))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-3-tuple(v_1034))))) then (if not-caught-fail(v_1036) then (v_1036,2-proj-3-tuple(v_1034),3-proj-3-tuple(v_1034)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {547}let v_1038: key = catch-fail(dhexp(key_s(them_987),g)) in
        {548}let v_1039: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1037),2-proj-7-tuple(v_1004),3-proj-7-tuple(v_1004),v_1027,v_1007,6-proj-7-tuple(v_1004),7-proj-7-tuple(v_1004))) in
        {549}let (hs_1040: handshakestate,re_1041: key,plaintext_a_1042: bitstring,valid_1043: bool) = (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-7-tuple(v_1004))))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if not-caught-fail(v_1006) then (if not-caught-fail(v_1007) then (if not-caught-fail(v_1009) then (if not-caught-fail(v_1016) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then (if not-caught-fail(v_1027) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then (if ((3-proj-3-tuple(v_1026) && 3-proj-3-tuple(v_1037)) && (v_1027 = getpublickey((if not-caught-fail(v_1038) then keypairpack(v_1038,key_s(them_987)) else fail-any)))) then (if not-caught-fail(v_1039) then (v_1039,getpublickey(3-proj-7-tuple(v_1004)),2-proj-3-tuple(v_1037),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {550}event RecvMsg(me_988,them_987,stage_a,plaintext_a_1042,valid_1043);
        {551}insert statestore(me_988,them_987,statepack_b(hs_1040))
    ) | (
        {583}get statestore(=me_988,=them_987,statepack_b(hs_1044: handshakestate)) in
        {553}let v_1045: bitstring = catch-fail(handshakestateunpack(hs_1044)) in
        {554}let v_1046: bitstring = catch-fail((empty,empty,empty)) in
        {555}new key_e_1047[me_988,them_987]: key;
        {556}let v_1048: key = catch-fail(dhexp(key_e_1047,g)) in
        {557}let v_1049: keypair = catch-fail((if not-caught-fail(v_1048) then keypairpack(v_1048,key_e_1047) else fail-any)) in
        {558}let v_1050: bitstring = catch-fail(getpublickey(v_1049)) in
        {559}let v_1051: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1045))) in
        {560}let v_1052: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then symmetricstatepack(1-proj-3-tuple(v_1051),2-proj-3-tuple(v_1051),hash(3-proj-3-tuple(v_1051),v_1050)) else fail-any) else fail-any)) in
        {561}let v_1053: bitstring = catch-fail(keypairunpack(v_1049)) in
        {562}let v_1054: bitstring = catch-fail(symmetricstateunpack(v_1052)) in
        {563}let v_1055: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1054),(if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {564}let v_1056: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1054),(if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {565}let v_1057: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1054),(if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1045)) else fail-any) else fail-any))) in
        {566}let v_1058: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1045)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1054))) then (if not-caught-fail(v_1055) then (if not-caught-fail(v_1056) then (if not-caught-fail(v_1057) then (v_1055,v_1056,v_1057) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {567}let v_1059: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1045)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1045)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1058)) then cipherstatepack(2-proj-3-tuple(v_1058),minnonce) else fail-any),1-proj-3-tuple(v_1058),3-proj-3-tuple(v_1054)) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1060: bitstring = catch-fail(symmetricstateunpack(v_1059)) in
        {569}let v_1061: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1060))) in
        {570}let v_1062: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1061),2-proj-2-tuple(v_1061),3-proj-3-tuple(v_1060),msg_b(me_988,them_987))) in
        {571}let v_1063: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1060))) in
        {572}let v_1064: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1061))) && success?(1-proj-3-tuple(v_1060))) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then cipherstatepack(1-proj-2-tuple(v_1063),increment_nonce(2-proj-2-tuple(v_1061))) else fail-any) else fail-any)) in
        {573}let v_1065: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1060)) && success?(1-proj-3-tuple(v_1060))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1064) then (v_1064,v_1062) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {574}let v_1066: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1065),2-proj-3-tuple(v_1060),3-proj-3-tuple(v_1060)))) in
        {575}let v_1067: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1065)) && success?(symmetricstatepack(1-proj-2-tuple(v_1065),2-proj-3-tuple(v_1060),3-proj-3-tuple(v_1060)))) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then symmetricstatepack(1-proj-3-tuple(v_1066),2-proj-3-tuple(v_1066),hash(3-proj-3-tuple(v_1066),2-proj-2-tuple(v_1065))) else fail-any) else fail-any)) in
        {576}let v_1068: bitstring = catch-fail((if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-2-tuple(v_1065))))) then (if not-caught-fail(v_1067) then (v_1067,2-proj-2-tuple(v_1065)) else fail-any) else fail-any) else fail-any)) in
        {577}let v_1069: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1068),2-proj-7-tuple(v_1045),v_1049,4-proj-7-tuple(v_1045),5-proj-7-tuple(v_1045),6-proj-7-tuple(v_1045),7-proj-7-tuple(v_1045))) in
        {578}let v_1070: bitstring = catch-fail(concat3(v_1050,2-proj-3-tuple(v_1046),2-proj-2-tuple(v_1068))) in
        {579}let (hs_1071: handshakestate,re_1072: key,message_b_1073: bitstring) = (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-7-tuple(v_1045))))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then (if not-caught-fail(v_1049) then (if not-caught-fail(v_1050) then (if not-caught-fail(v_1052) then (if not-caught-fail(v_1059) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-2-tuple(v_1068))))) then (if not-caught-fail(v_1069) then (if not-caught-fail(v_1070) then (v_1069,5-proj-7-tuple(v_1045),v_1070) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {580}event SendMsg(me_988,them_987,stage_b,msg_b(me_988,them_987),true);
        {581}insert statestore(me_988,them_987,statepack_c(hs_1071));
        {582}out(pub, message_b_1073)
    ) | (
        {609}get statestore(=me_988,=them_987,statepack_c(hs_1074: handshakestate)) in
        {584}in(pub, message_c_1075: bitstring);
        {585}let v_1076: bitstring = catch-fail(handshakestateunpack(hs_1074)) in
        {586}let v_1077: bitstring = catch-fail(deconcat3(message_c_1075)) in
        {587}let v_1078: bool = catch-fail(true) in
        {588}let v_1079: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1076))) in
        {589}let v_1080: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1076))) in
        {590}let v_1081: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1080),(if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any))) in
        {591}let v_1082: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1080),(if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any))) in
        {592}let v_1083: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1080),(if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any))) in
        {593}let v_1084: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1080))) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1082) then (if not-caught-fail(v_1083) then (v_1081,v_1082,v_1083) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {594}let v_1085: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1084)) then cipherstatepack(2-proj-3-tuple(v_1084),minnonce) else fail-any),1-proj-3-tuple(v_1084),3-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any)) in
        {595}let v_1086: bitstring = catch-fail(symmetricstateunpack(v_1085)) in
        {596}let v_1087: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1086))) in
        {597}let v_1088: aead = catch-fail(decrypt(1-proj-2-tuple(v_1087),2-proj-2-tuple(v_1087),3-proj-3-tuple(v_1086),3-proj-3-tuple(v_1077))) in
        {598}let v_1089: bitstring = catch-fail(aeadunpack(v_1088)) in
        {599}let v_1090: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1086))) in
        {600}let v_1091: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1087))) && success?(1-proj-3-tuple(v_1086))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-2-tuple(v_1090))))) then cipherstatepack(1-proj-2-tuple(v_1090),increment_nonce(2-proj-2-tuple(v_1087))) else fail-any) else fail-any)) in
        {601}let v_1092: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1077)) && (success?(3-proj-3-tuple(v_1086)) && success?(1-proj-3-tuple(v_1086)))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-2-tuple(v_1087))))) then (if not-caught-fail(v_1088) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-3-tuple(v_1089))))) then (if not-caught-fail(v_1091) then (v_1091,3-proj-3-tuple(v_1089),1-proj-3-tuple(v_1089)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {602}let v_1093: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1086),3-proj-3-tuple(v_1086)))) in
        {603}let v_1094: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1077)) && success?(symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1086),3-proj-3-tuple(v_1086)))) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-3-tuple(v_1093))))) then symmetricstatepack(1-proj-3-tuple(v_1093),2-proj-3-tuple(v_1093),hash(3-proj-3-tuple(v_1093),3-proj-3-tuple(v_1077))) else fail-any) else fail-any)) in
        {604}let v_1095: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1077)) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then (if not-caught-fail(v_1094) then (v_1094,2-proj-3-tuple(v_1092),3-proj-3-tuple(v_1092)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1096: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1095),2-proj-7-tuple(v_1076),3-proj-7-tuple(v_1076),4-proj-7-tuple(v_1076),5-proj-7-tuple(v_1076),6-proj-7-tuple(v_1076),7-proj-7-tuple(v_1076))) in
        {606}let (hs_1097: handshakestate,re_1098: key,plaintext_c_1099: bitstring,valid_1100: bool) = (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-7-tuple(v_1076))))) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (if not-caught-fail(v_1078) then (if not-caught-fail(v_1085) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if (v_1078 && 3-proj-3-tuple(v_1095)) then (if not-caught-fail(v_1096) then (v_1096,getpublickey(3-proj-7-tuple(v_1076)),2-proj-3-tuple(v_1095),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {607}event RecvMsg(me_988,them_987,stage_c,plaintext_c_1099,valid_1100);
        {608}insert statestore(me_988,them_987,statepack_d(hs_1097))
    ) | (
        {627}get statestore(=me_988,=them_987,statepack_d(hs_1101: handshakestate)) in
        {610}let v_1102: bitstring = catch-fail(handshakestateunpack(hs_1101)) in
        {611}let v_1103: bitstring = catch-fail((empty,empty,empty)) in
        {612}let v_1104: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1102))) in
        {613}let v_1105: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1104))) in
        {614}let v_1106: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1105),2-proj-2-tuple(v_1105),3-proj-3-tuple(v_1104),msg_d(me_988,them_987))) in
        {615}let v_1107: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1104))) in
        {616}let v_1108: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1105))) && success?(1-proj-3-tuple(v_1104))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-2-tuple(v_1107))))) then cipherstatepack(1-proj-2-tuple(v_1107),increment_nonce(2-proj-2-tuple(v_1105))) else fail-any) else fail-any)) in
        {617}let v_1109: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1104)) && success?(1-proj-3-tuple(v_1104))) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then (if not-caught-fail(v_1106) then (if not-caught-fail(v_1108) then (v_1108,v_1106) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {618}let v_1110: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1109),2-proj-3-tuple(v_1104),3-proj-3-tuple(v_1104)))) in
        {619}let v_1111: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1109)) && success?(symmetricstatepack(1-proj-2-tuple(v_1109),2-proj-3-tuple(v_1104),3-proj-3-tuple(v_1104)))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then symmetricstatepack(1-proj-3-tuple(v_1110),2-proj-3-tuple(v_1110),hash(3-proj-3-tuple(v_1110),2-proj-2-tuple(v_1109))) else fail-any) else fail-any)) in
        {620}let v_1112: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1102)) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-3-tuple(v_1104))))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then (if not-caught-fail(v_1111) then (v_1111,2-proj-2-tuple(v_1109)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {621}let v_1113: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1112),2-proj-7-tuple(v_1102),3-proj-7-tuple(v_1102),4-proj-7-tuple(v_1102),5-proj-7-tuple(v_1102),6-proj-7-tuple(v_1102),7-proj-7-tuple(v_1102))) in
        {622}let v_1114: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1103),2-proj-3-tuple(v_1103),2-proj-2-tuple(v_1112))) in
        {623}let (hs_1115: handshakestate,re_1116: key,message_d_1117: bitstring) = (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-7-tuple(v_1102))))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-2-tuple(v_1112))))) then (if not-caught-fail(v_1113) then (if not-caught-fail(v_1114) then (v_1113,5-proj-7-tuple(v_1102),v_1114) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {624}event SendMsg(me_988,them_987,stage_d,msg_d(me_988,them_987),true);
        {625}insert statestore(me_988,them_987,statepack_e(hs_1115));
        {626}out(pub, message_d_1117)
    ) | (
        {655}get statestore(=me_988,=them_987,statepack_e(hs_1118: handshakestate)) in
        {628}in(pub, message_e_1119: bitstring);
        {629}let v_1120: bitstring = catch-fail(handshakestateunpack(hs_1118)) in
        {630}let v_1121: bitstring = catch-fail(deconcat3(message_e_1119)) in
        {631}let v_1122: bool = catch-fail(true) in
        {632}let v_1123: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1120))) in
        {633}let v_1124: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {634}let v_1125: aead = catch-fail(decrypt(1-proj-2-tuple(v_1124),2-proj-2-tuple(v_1124),3-proj-3-tuple(v_1123),3-proj-3-tuple(v_1121))) in
        {635}let v_1126: bitstring = catch-fail(aeadunpack(v_1125)) in
        {636}let v_1127: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {637}let v_1128: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1124))) && success?(1-proj-3-tuple(v_1123))) then (if (not-caught-fail(v_1127) && success?(is-true(success?(1-proj-2-tuple(v_1127))))) then cipherstatepack(1-proj-2-tuple(v_1127),increment_nonce(2-proj-2-tuple(v_1124))) else fail-any) else fail-any)) in
        {638}let v_1129: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1121)) && (success?(3-proj-3-tuple(v_1123)) && success?(1-proj-3-tuple(v_1123)))) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then (if not-caught-fail(v_1125) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-3-tuple(v_1126))))) then (if not-caught-fail(v_1128) then (v_1128,3-proj-3-tuple(v_1126),1-proj-3-tuple(v_1126)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {639}let v_1130: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1129),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) in
        {640}let v_1131: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1121)) && success?(symmetricstatepack(1-proj-3-tuple(v_1129),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) then (if (not-caught-fail(v_1130) && success?(is-true(success?(1-proj-3-tuple(v_1130))))) then symmetricstatepack(1-proj-3-tuple(v_1130),2-proj-3-tuple(v_1130),hash(3-proj-3-tuple(v_1130),3-proj-3-tuple(v_1121))) else fail-any) else fail-any)) in
        {641}let v_1132: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1121)) && success?(1-proj-7-tuple(v_1120))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-3-tuple(v_1129))))) then (if not-caught-fail(v_1131) then (v_1131,2-proj-3-tuple(v_1129),3-proj-3-tuple(v_1129)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {642}let v_1133: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1132),2-proj-7-tuple(v_1120),3-proj-7-tuple(v_1120),4-proj-7-tuple(v_1120),5-proj-7-tuple(v_1120),6-proj-7-tuple(v_1120),7-proj-7-tuple(v_1120))) in
        {643}let v_1134: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1132))) in
        {644}let v_1135: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1134),zero)) in
        {645}let v_1136: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1134),zero)) in
        {646}let v_1137: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1134),zero)) in
        {647}let v_1138: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1134)) then (if not-caught-fail(v_1135) then (if not-caught-fail(v_1136) then (if not-caught-fail(v_1137) then (v_1135,v_1136,v_1137) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {648}let v_1139: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1138)) then cipherstatepack(1-proj-3-tuple(v_1138),minnonce) else fail-any)) in
        {649}let v_1140: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1138)) then cipherstatepack(2-proj-3-tuple(v_1138),minnonce) else fail-any)) in
        {650}let v_1141: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1132)) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-3-tuple(v_1138))))) then (if not-caught-fail(v_1139) then (if not-caught-fail(v_1140) then (1-proj-3-tuple(v_1132),v_1139,v_1140) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {651}let (hs_1142: handshakestate,re_1143: key,plaintext_e_1144: bitstring,valid_1145: bool,cs1_1146: cipherstate,cs2_1147: cipherstate) = (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-7-tuple(v_1120))))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then (if not-caught-fail(v_1122) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-3-tuple(v_1132))))) then (if (v_1122 && 3-proj-3-tuple(v_1132)) then (if not-caught-fail(v_1133) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-3-tuple(v_1141))))) then (v_1133,getpublickey(3-proj-7-tuple(v_1120)),2-proj-3-tuple(v_1132),true,2-proj-3-tuple(v_1141),3-proj-3-tuple(v_1141)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {652}event RecvMsg(me_988,them_987,stage_e,plaintext_e_1144,valid_1145);
        {653}insert statestore(me_988,them_987,statepack_f(hs_1142));
        {654}event RecvEnd(valid_1145)
    ) | (
        {656}event LeakS(phase0,me_988);
        {657}out(pub, key_s(me_988))
    ) | (
        {658}phase 1;
        {659}event LeakS(phase1,me_988);
        {660}out(pub, key_s(me_988))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 165 rules in the queue.
400 rules inserted. The rule base contains 396 rules. 72 rules in the queue.
600 rules inserted. The rule base contains 583 rules. 258 rules in the queue.
800 rules inserted. The rule base contains 774 rules. 228 rules in the queue.
1000 rules inserted. The rule base contains 919 rules. 265 rules in the queue.
1200 rules inserted. The rule base contains 1107 rules. 350 rules in the queue.
1400 rules inserted. The rule base contains 1307 rules. 484 rules in the queue.
1600 rules inserted. The rule base contains 1427 rules. 484 rules in the queue.
1800 rules inserted. The rule base contains 1567 rules. 504 rules in the queue.
2000 rules inserted. The rule base contains 1742 rules. 557 rules in the queue.
2200 rules inserted. The rule base contains 1935 rules. 626 rules in the queue.
2400 rules inserted. The rule base contains 2130 rules. 680 rules in the queue.
2600 rules inserted. The rule base contains 2274 rules. 691 rules in the queue.
2800 rules inserted. The rule base contains 2437 rules. 706 rules in the queue.
3000 rules inserted. The rule base contains 2613 rules. 727 rules in the queue.
3200 rules inserted. The rule base contains 2736 rules. 737 rules in the queue.
3400 rules inserted. The rule base contains 2867 rules. 751 rules in the queue.
3600 rules inserted. The rule base contains 2991 rules. 767 rules in the queue.
3800 rules inserted. The rule base contains 3130 rules. 773 rules in the queue.
4000 rules inserted. The rule base contains 3280 rules. 744 rules in the queue.
4200 rules inserted. The rule base contains 3430 rules. 706 rules in the queue.
4400 rules inserted. The rule base contains 3591 rules. 669 rules in the queue.
4600 rules inserted. The rule base contains 3705 rules. 668 rules in the queue.
4800 rules inserted. The rule base contains 3788 rules. 655 rules in the queue.
5000 rules inserted. The rule base contains 3868 rules. 650 rules in the queue.
5200 rules inserted. The rule base contains 3962 rules. 721 rules in the queue.
5400 rules inserted. The rule base contains 4117 rules. 731 rules in the queue.
5600 rules inserted. The rule base contains 4258 rules. 754 rules in the queue.
5800 rules inserted. The rule base contains 4259 rules. 763 rules in the queue.
6000 rules inserted. The rule base contains 4359 rules. 781 rules in the queue.
6200 rules inserted. The rule base contains 4479 rules. 790 rules in the queue.
6400 rules inserted. The rule base contains 4606 rules. 806 rules in the queue.
6600 rules inserted. The rule base contains 4621 rules. 822 rules in the queue.
6800 rules inserted. The rule base contains 4719 rules. 802 rules in the queue.
7000 rules inserted. The rule base contains 4812 rules. 788 rules in the queue.
7200 rules inserted. The rule base contains 4876 rules. 778 rules in the queue.
7400 rules inserted. The rule base contains 4937 rules. 777 rules in the queue.
7600 rules inserted. The rule base contains 5072 rules. 762 rules in the queue.
7800 rules inserted. The rule base contains 5178 rules. 732 rules in the queue.
8000 rules inserted. The rule base contains 5160 rules. 733 rules in the queue.
8200 rules inserted. The rule base contains 5309 rules. 963 rules in the queue.
8400 rules inserted. The rule base contains 5440 rules. 1001 rules in the queue.
8600 rules inserted. The rule base contains 5587 rules. 1026 rules in the queue.
8800 rules inserted. The rule base contains 5739 rules. 1148 rules in the queue.
9000 rules inserted. The rule base contains 5931 rules. 1592 rules in the queue.
9200 rules inserted. The rule base contains 6067 rules. 1596 rules in the queue.
9400 rules inserted. The rule base contains 6221 rules. 1760 rules in the queue.
9600 rules inserted. The rule base contains 6353 rules. 1951 rules in the queue.
9800 rules inserted. The rule base contains 6546 rules. 1963 rules in the queue.
10000 rules inserted. The rule base contains 6737 rules. 1904 rules in the queue.
10200 rules inserted. The rule base contains 6928 rules. 1855 rules in the queue.
10400 rules inserted. The rule base contains 7121 rules. 2119 rules in the queue.
10600 rules inserted. The rule base contains 7278 rules. 2319 rules in the queue.
10800 rules inserted. The rule base contains 7408 rules. 2321 rules in the queue.
11000 rules inserted. The rule base contains 7554 rules. 2390 rules in the queue.
11200 rules inserted. The rule base contains 7674 rules. 2442 rules in the queue.
11400 rules inserted. The rule base contains 7842 rules. 2501 rules in the queue.
11600 rules inserted. The rule base contains 8015 rules. 2540 rules in the queue.
11800 rules inserted. The rule base contains 8210 rules. 2592 rules in the queue.
12000 rules inserted. The rule base contains 8409 rules. 2601 rules in the queue.
12200 rules inserted. The rule base contains 8601 rules. 2625 rules in the queue.
12400 rules inserted. The rule base contains 8794 rules. 2579 rules in the queue.
12600 rules inserted. The rule base contains 8986 rules. 2520 rules in the queue.
12800 rules inserted. The rule base contains 9177 rules. 2493 rules in the queue.
13000 rules inserted. The rule base contains 9340 rules. 2545 rules in the queue.
13200 rules inserted. The rule base contains 9512 rules. 2573 rules in the queue.
13400 rules inserted. The rule base contains 9686 rules. 2515 rules in the queue.
13600 rules inserted. The rule base contains 9828 rules. 2659 rules in the queue.
13800 rules inserted. The rule base contains 10025 rules. 2774 rules in the queue.
14000 rules inserted. The rule base contains 10190 rules. 2837 rules in the queue.
14200 rules inserted. The rule base contains 10352 rules. 2899 rules in the queue.
14400 rules inserted. The rule base contains 10507 rules. 2897 rules in the queue.
14600 rules inserted. The rule base contains 10687 rules. 2903 rules in the queue.
14800 rules inserted. The rule base contains 10857 rules. 2906 rules in the queue.
15000 rules inserted. The rule base contains 11057 rules. 2920 rules in the queue.
15200 rules inserted. The rule base contains 11257 rules. 2936 rules in the queue.
15400 rules inserted. The rule base contains 11341 rules. 2919 rules in the queue.
15600 rules inserted. The rule base contains 11417 rules. 2907 rules in the queue.
15800 rules inserted. The rule base contains 11562 rules. 2919 rules in the queue.
16000 rules inserted. The rule base contains 11689 rules. 2914 rules in the queue.
16200 rules inserted. The rule base contains 11724 rules. 2890 rules in the queue.
16400 rules inserted. The rule base contains 11894 rules. 2969 rules in the queue.
16600 rules inserted. The rule base contains 12092 rules. 3040 rules in the queue.
16800 rules inserted. The rule base contains 12264 rules. 3074 rules in the queue.
17000 rules inserted. The rule base contains 12400 rules. 3142 rules in the queue.
17200 rules inserted. The rule base contains 12519 rules. 3131 rules in the queue.
17400 rules inserted. The rule base contains 12590 rules. 3116 rules in the queue.
17600 rules inserted. The rule base contains 12763 rules. 3201 rules in the queue.
17800 rules inserted. The rule base contains 12917 rules. 3207 rules in the queue.
18000 rules inserted. The rule base contains 13108 rules. 3219 rules in the queue.
18200 rules inserted. The rule base contains 13207 rules. 3224 rules in the queue.
18400 rules inserted. The rule base contains 13318 rules. 3232 rules in the queue.
18600 rules inserted. The rule base contains 13420 rules. 3231 rules in the queue.
18800 rules inserted. The rule base contains 13465 rules. 3302 rules in the queue.
19000 rules inserted. The rule base contains 13542 rules. 3310 rules in the queue.
19200 rules inserted. The rule base contains 13696 rules. 3262 rules in the queue.
19400 rules inserted. The rule base contains 13815 rules. 3233 rules in the queue.
19600 rules inserted. The rule base contains 13955 rules. 3240 rules in the queue.
19800 rules inserted. The rule base contains 14122 rules. 3261 rules in the queue.
20000 rules inserted. The rule base contains 14314 rules. 3243 rules in the queue.
20200 rules inserted. The rule base contains 14435 rules. 3305 rules in the queue.
20400 rules inserted. The rule base contains 14631 rules. 3309 rules in the queue.
20600 rules inserted. The rule base contains 14809 rules. 3354 rules in the queue.
20800 rules inserted. The rule base contains 14881 rules. 3361 rules in the queue.
21000 rules inserted. The rule base contains 14972 rules. 3355 rules in the queue.
21200 rules inserted. The rule base contains 15054 rules. 3366 rules in the queue.
21400 rules inserted. The rule base contains 15149 rules. 3377 rules in the queue.
21600 rules inserted. The rule base contains 15289 rules. 3387 rules in the queue.
21800 rules inserted. The rule base contains 15361 rules. 3383 rules in the queue.
22000 rules inserted. The rule base contains 15460 rules. 3373 rules in the queue.
22200 rules inserted. The rule base contains 15540 rules. 3413 rules in the queue.
22400 rules inserted. The rule base contains 15736 rules. 3453 rules in the queue.
22600 rules inserted. The rule base contains 15864 rules. 3492 rules in the queue.
22800 rules inserted. The rule base contains 16028 rules. 3485 rules in the queue.
23000 rules inserted. The rule base contains 16227 rules. 3517 rules in the queue.
23200 rules inserted. The rule base contains 16369 rules. 3498 rules in the queue.
23400 rules inserted. The rule base contains 16565 rules. 3502 rules in the queue.
23600 rules inserted. The rule base contains 16765 rules. 3503 rules in the queue.
23800 rules inserted. The rule base contains 16934 rules. 3487 rules in the queue.
24000 rules inserted. The rule base contains 17121 rules. 3496 rules in the queue.
24200 rules inserted. The rule base contains 17321 rules. 3506 rules in the queue.
24400 rules inserted. The rule base contains 17518 rules. 3519 rules in the queue.
24600 rules inserted. The rule base contains 17643 rules. 3563 rules in the queue.
24800 rules inserted. The rule base contains 17762 rules. 3595 rules in the queue.
25000 rules inserted. The rule base contains 17904 rules. 3604 rules in the queue.
25200 rules inserted. The rule base contains 18065 rules. 3620 rules in the queue.
25400 rules inserted. The rule base contains 18125 rules. 3709 rules in the queue.
25600 rules inserted. The rule base contains 18219 rules. 3737 rules in the queue.
25800 rules inserted. The rule base contains 18413 rules. 3769 rules in the queue.
26000 rules inserted. The rule base contains 18591 rules. 3794 rules in the queue.
26200 rules inserted. The rule base contains 18731 rules. 3814 rules in the queue.
26400 rules inserted. The rule base contains 18923 rules. 3905 rules in the queue.
26600 rules inserted. The rule base contains 19123 rules. 3922 rules in the queue.
26800 rules inserted. The rule base contains 19289 rules. 3923 rules in the queue.
27000 rules inserted. The rule base contains 19489 rules. 3933 rules in the queue.
27200 rules inserted. The rule base contains 19689 rules. 3946 rules in the queue.
27400 rules inserted. The rule base contains 19881 rules. 3935 rules in the queue.
27600 rules inserted. The rule base contains 20081 rules. 3939 rules in the queue.
27800 rules inserted. The rule base contains 20281 rules. 3940 rules in the queue.
28000 rules inserted. The rule base contains 20451 rules. 3930 rules in the queue.
28200 rules inserted. The rule base contains 20606 rules. 3955 rules in the queue.
28400 rules inserted. The rule base contains 20774 rules. 3944 rules in the queue.
28600 rules inserted. The rule base contains 20926 rules. 3947 rules in the queue.
28800 rules inserted. The rule base contains 21120 rules. 3952 rules in the queue.
29000 rules inserted. The rule base contains 21285 rules. 3913 rules in the queue.
29200 rules inserted. The rule base contains 21424 rules. 3894 rules in the queue.
29400 rules inserted. The rule base contains 21556 rules. 3906 rules in the queue.
29600 rules inserted. The rule base contains 21689 rules. 3935 rules in the queue.
29800 rules inserted. The rule base contains 21857 rules. 3922 rules in the queue.
30000 rules inserted. The rule base contains 22031 rules. 3922 rules in the queue.
30200 rules inserted. The rule base contains 22197 rules. 3916 rules in the queue.
30400 rules inserted. The rule base contains 22316 rules. 3938 rules in the queue.
30600 rules inserted. The rule base contains 22484 rules. 3943 rules in the queue.
30800 rules inserted. The rule base contains 22652 rules. 3945 rules in the queue.
31000 rules inserted. The rule base contains 22836 rules. 3946 rules in the queue.
31200 rules inserted. The rule base contains 22988 rules. 3949 rules in the queue.
31400 rules inserted. The rule base contains 23188 rules. 3958 rules in the queue.
31600 rules inserted. The rule base contains 23388 rules. 3967 rules in the queue.
31800 rules inserted. The rule base contains 23588 rules. 3969 rules in the queue.
32000 rules inserted. The rule base contains 23710 rules. 4014 rules in the queue.
32200 rules inserted. The rule base contains 23821 rules. 3970 rules in the queue.
32400 rules inserted. The rule base contains 23946 rules. 3945 rules in the queue.
32600 rules inserted. The rule base contains 24114 rules. 3953 rules in the queue.
32800 rules inserted. The rule base contains 24297 rules. 3958 rules in the queue.
33000 rules inserted. The rule base contains 24321 rules. 3926 rules in the queue.
33200 rules inserted. The rule base contains 24441 rules. 3892 rules in the queue.
33400 rules inserted. The rule base contains 24641 rules. 3891 rules in the queue.
33600 rules inserted. The rule base contains 24837 rules. 3890 rules in the queue.
33800 rules inserted. The rule base contains 25037 rules. 3898 rules in the queue.
34000 rules inserted. The rule base contains 25172 rules. 3899 rules in the queue.
34200 rules inserted. The rule base contains 25372 rules. 3899 rules in the queue.
34400 rules inserted. The rule base contains 25572 rules. 3942 rules in the queue.
34600 rules inserted. The rule base contains 25704 rules. 3951 rules in the queue.
34800 rules inserted. The rule base contains 25904 rules. 4023 rules in the queue.
35000 rules inserted. The rule base contains 26104 rules. 4075 rules in the queue.
35200 rules inserted. The rule base contains 26262 rules. 4072 rules in the queue.
35400 rules inserted. The rule base contains 26462 rules. 4085 rules in the queue.
35600 rules inserted. The rule base contains 26662 rules. 4093 rules in the queue.
35800 rules inserted. The rule base contains 26822 rules. 4111 rules in the queue.
36000 rules inserted. The rule base contains 26941 rules. 4132 rules in the queue.
