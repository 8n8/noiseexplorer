File "I1K.noise.active.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 234, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 235, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 235, character 36:
Warning: identifier h rebound.
File "I1K.noise.active.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 276, character 6:
Warning: identifier e rebound.
File "I1K.noise.active.pv", line 277, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.active.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 281, character 6:
Warning: identifier s rebound.
File "I1K.noise.active.pv", line 282, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 282, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1K.noise.active.pv", line 283, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 283, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 284, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 291, character 6:
Warning: identifier e rebound.
File "I1K.noise.active.pv", line 292, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.active.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.active.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 335, characters 48-53:
Warning: identifier valid1 rebound.
File "I1K.noise.active.pv", line 336, characters 6-7:
Warning: identifier rs rebound.
File "I1K.noise.active.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 347, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.active.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 350, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 375, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 385, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 559, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 550, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 375, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 543, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 536, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 347, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.active.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 350, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 528, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 276, character 6:
Warning: identifier e rebound.
File "I1K.noise.active.pv", line 277, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.active.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 281, character 6:
Warning: identifier s rebound.
File "I1K.noise.active.pv", line 282, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 282, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1K.noise.active.pv", line 283, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 283, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 284, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 618, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 620, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 385, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 610, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 611, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 603, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 595, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 291, character 6:
Warning: identifier e rebound.
File "I1K.noise.active.pv", line 292, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.active.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.active.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 588, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.active.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 335, characters 48-53:
Warning: identifier valid1 rebound.
File "I1K.noise.active.pv", line 336, characters 6-7:
Warning: identifier rs rebound.
File "I1K.noise.active.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.active.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.active.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.active.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.active.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_556: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_556));
    (
        {6}let e_557: keypair = keypairpack(empty,empty) in
        {7}let v_558: key = catch-fail(dhexp(key_s(bob),g)) in
        {8}let rs_559: key = getpublickey((if not-caught-fail(v_558) then keypairpack(v_558,key_s(bob)) else fail-any)) in
        {9}let re_560: key = empty in
        {10}let v_561: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_562: key = catch-fail(v_561) in
        {12}let v_563: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_564: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then symmetricstatepack(v_563,v_562,v_561) else fail-any) else fail-any) else fail-any))) in
        {14}let v_565: symmetricstate = catch-fail((if success?((if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then symmetricstatepack(v_563,v_562,v_561) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),empty)) else fail-any) else fail-any)) in
        {15}let v_566: bitstring = catch-fail(symmetricstateunpack(v_565)) in
        {16}let v_567: symmetricstate = catch-fail((if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then symmetricstatepack(1-proj-3-tuple(v_566),2-proj-3-tuple(v_566),hash(3-proj-3-tuple(v_566),rs_559)) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_565) then (if not-caught-fail(v_567) then handshakestatepack(v_567,s_556,e_557,rs_559,re_560,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {59}get statestore(=alice,=bob,=sid,statepack_a(hs_568: handshakestate)) in
        {19}let v_569: bitstring = catch-fail(handshakestateunpack(hs_568)) in
        {20}let v_570: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_571: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {22}let v_572: keypair = catch-fail((if not-caught-fail(v_571) then keypairpack(v_571,key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_573: bitstring = catch-fail(getpublickey(v_572)) in
        {24}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_569))) in
        {25}let v_575: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_569)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),hash(3-proj-3-tuple(v_574),v_573)) else fail-any) else fail-any)) in
        {26}let v_576: bitstring = catch-fail(keypairunpack(v_572)) in
        {27}let v_577: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {28}let v_578: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_577),(if success?(4-proj-7-tuple(v_569)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_569)) else fail-any) else fail-any))) in
        {29}let v_579: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_577),(if success?(4-proj-7-tuple(v_569)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_569)) else fail-any) else fail-any))) in
        {30}let v_580: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_577),(if success?(4-proj-7-tuple(v_569)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_569)) else fail-any) else fail-any))) in
        {31}let v_581: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_569)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_569)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_577))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (v_578,v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_582: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_569)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_569)) else fail-any) else fail-any)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_581)) then cipherstatepack(2-proj-3-tuple(v_581),minnonce) else fail-any),1-proj-3-tuple(v_581),3-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_583: key = catch-fail(dhexp(key_s(alice),g)) in
        {34}let v_584: keypair = catch-fail((if not-caught-fail(v_583) then keypairpack(v_583,key_s(alice)) else fail-any)) in
        {35}let v_585: bitstring = catch-fail(symmetricstateunpack(v_582)) in
        {36}let v_586: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_585))) in
        {37}let v_587: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_586),2-proj-2-tuple(v_586),3-proj-3-tuple(v_585),getpublickey(v_584))) in
        {38}let v_588: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_585))) in
        {39}let v_589: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_586))) && success?(1-proj-3-tuple(v_585))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then cipherstatepack(1-proj-2-tuple(v_588),increment_nonce(2-proj-2-tuple(v_586))) else fail-any) else fail-any)) in
        {40}let v_590: bitstring = catch-fail((if (success?(getpublickey(v_584)) && (success?(3-proj-3-tuple(v_585)) && success?(1-proj-3-tuple(v_585)))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then (if not-caught-fail(v_587) then (if not-caught-fail(v_589) then (v_589,v_587) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_591: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_590),2-proj-3-tuple(v_585),3-proj-3-tuple(v_585)))) in
        {42}let v_592: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_590)) && success?(symmetricstatepack(1-proj-2-tuple(v_590),2-proj-3-tuple(v_585),3-proj-3-tuple(v_585)))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then symmetricstatepack(1-proj-3-tuple(v_591),2-proj-3-tuple(v_591),hash(3-proj-3-tuple(v_591),2-proj-2-tuple(v_590))) else fail-any) else fail-any)) in
        {43}let v_593: bitstring = catch-fail((if success?(getpublickey(v_584)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then (if not-caught-fail(v_592) then (v_592,2-proj-2-tuple(v_590)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {44}let v_594: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_593))) in
        {45}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {46}let v_596: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_595),2-proj-2-tuple(v_595),3-proj-3-tuple(v_594),msg_a(alice,bob,sid))) in
        {47}let v_597: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {48}let v_598: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_595))) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then cipherstatepack(1-proj-2-tuple(v_597),increment_nonce(2-proj-2-tuple(v_595))) else fail-any) else fail-any)) in
        {49}let v_599: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_594)) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if not-caught-fail(v_598) then (v_598,v_596) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_600: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_599),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) in
        {51}let v_601: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_599)) && success?(symmetricstatepack(1-proj-2-tuple(v_599),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_600),hash(3-proj-3-tuple(v_600),2-proj-2-tuple(v_599))) else fail-any) else fail-any)) in
        {52}let v_602: bitstring = catch-fail((if success?(1-proj-2-tuple(v_593)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then (if not-caught-fail(v_601) then (v_601,2-proj-2-tuple(v_599)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {53}let v_603: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_602),v_584,v_572,4-proj-7-tuple(v_569),5-proj-7-tuple(v_569),6-proj-7-tuple(v_569),7-proj-7-tuple(v_569))) in
        {54}let v_604: bitstring = catch-fail(concat3(v_573,2-proj-2-tuple(v_593),2-proj-2-tuple(v_602))) in
        {55}let (hs_605: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-7-tuple(v_569))))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (if not-caught-fail(v_575) then (if not-caught-fail(v_582) then (if not-caught-fail(v_584) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (v_603,v_604) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {56}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {57}insert statestore(alice,bob,sid,statepack_b(hs_605));
        {58}out(pub, message_a)
    ) | (
        {88}get statestore(=alice,=bob,=sid,statepack_b(hs_606: handshakestate)) in
        {60}in(pub, message_b: bitstring);
        {61}let v_607: bitstring = catch-fail(handshakestateunpack(hs_606)) in
        {62}let v_608: bitstring = catch-fail(deconcat3(message_b)) in
        {63}let v_609: bool = catch-fail(true) in
        {64}let v_610: key = catch-fail(1-proj-3-tuple(v_608)) in
        {65}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_607))) in
        {66}let v_612: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_607)) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),v_610)) else fail-any) else fail-any)) in
        {67}let v_613: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_607))) in
        {68}let v_614: bitstring = catch-fail(symmetricstateunpack(v_612)) in
        {69}let v_615: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any))) in
        {70}let v_616: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any))) in
        {71}let v_617: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any))) in
        {72}let v_618: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_614))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (v_615,v_616,v_617) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_619: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_618)) then cipherstatepack(2-proj-3-tuple(v_618),minnonce) else fail-any),1-proj-3-tuple(v_618),3-proj-3-tuple(v_614)) else fail-any) else fail-any) else fail-any)) in
        {74}let v_620: bitstring = catch-fail(symmetricstateunpack(v_619)) in
        {75}let v_621: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {76}let v_622: aead = catch-fail(decrypt(1-proj-2-tuple(v_621),2-proj-2-tuple(v_621),3-proj-3-tuple(v_620),3-proj-3-tuple(v_608))) in
        {77}let v_623: bitstring = catch-fail(aeadunpack(v_622)) in
        {78}let v_624: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {79}let v_625: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_621))) && success?(1-proj-3-tuple(v_620))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then cipherstatepack(1-proj-2-tuple(v_624),increment_nonce(2-proj-2-tuple(v_621))) else fail-any) else fail-any)) in
        {80}let v_626: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_608)) && (success?(3-proj-3-tuple(v_620)) && success?(1-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if not-caught-fail(v_622) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_625) then (v_625,3-proj-3-tuple(v_623),1-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_627: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) in
        {82}let v_628: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_608)) && success?(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),3-proj-3-tuple(v_608))) else fail-any) else fail-any)) in
        {83}let v_629: bitstring = catch-fail((if success?(3-proj-3-tuple(v_608)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if not-caught-fail(v_628) then (v_628,2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_630: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_629),2-proj-7-tuple(v_607),3-proj-7-tuple(v_607),4-proj-7-tuple(v_607),v_610,6-proj-7-tuple(v_607),7-proj-7-tuple(v_607))) in
        {85}let (hs_631: handshakestate,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-7-tuple(v_607))))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (if not-caught-fail(v_612) then (if not-caught-fail(v_619) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (v_609 && 3-proj-3-tuple(v_629)) then (if not-caught-fail(v_630) then (v_630,2-proj-3-tuple(v_629),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {86}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {87}insert statestore(alice,bob,sid,statepack_c(hs_631))
    ) | (
        {121}get statestore(=alice,=bob,=sid,statepack_c(hs_632: handshakestate)) in
        {89}let v_633: bitstring = catch-fail(handshakestateunpack(hs_632)) in
        {90}let v_634: bitstring = catch-fail((empty,empty,empty)) in
        {91}let v_635: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_633))) in
        {92}let v_636: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_633))) in
        {93}let v_637: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_636),(if (success?(5-proj-7-tuple(v_633)) && success?(2-proj-7-tuple(v_633))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_633)) else fail-any) else fail-any))) in
        {94}let v_638: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_636),(if (success?(5-proj-7-tuple(v_633)) && success?(2-proj-7-tuple(v_633))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_633)) else fail-any) else fail-any))) in
        {95}let v_639: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_636),(if (success?(5-proj-7-tuple(v_633)) && success?(2-proj-7-tuple(v_633))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_633)) else fail-any) else fail-any))) in
        {96}let v_640: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_633)) && success?(2-proj-7-tuple(v_633))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_633)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_636))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (v_637,v_638,v_639) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_641: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_633)) && success?(2-proj-7-tuple(v_633))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),5-proj-7-tuple(v_633)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_633))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_640)) then cipherstatepack(2-proj-3-tuple(v_640),minnonce) else fail-any),1-proj-3-tuple(v_640),3-proj-3-tuple(v_636)) else fail-any) else fail-any) else fail-any)) in
        {98}let v_642: bitstring = catch-fail(symmetricstateunpack(v_641)) in
        {99}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {100}let v_644: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_643),2-proj-2-tuple(v_643),3-proj-3-tuple(v_642),msg_c(alice,bob,sid))) in
        {101}let v_645: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {102}let v_646: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_643))) && success?(1-proj-3-tuple(v_642))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then cipherstatepack(1-proj-2-tuple(v_645),increment_nonce(2-proj-2-tuple(v_643))) else fail-any) else fail-any)) in
        {103}let v_647: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_642)) && success?(1-proj-3-tuple(v_642))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then (if not-caught-fail(v_644) then (if not-caught-fail(v_646) then (v_646,v_644) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_648: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) in
        {105}let v_649: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_647)) && success?(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack(1-proj-3-tuple(v_648),2-proj-3-tuple(v_648),hash(3-proj-3-tuple(v_648),2-proj-2-tuple(v_647))) else fail-any) else fail-any)) in
        {106}let v_650: bitstring = catch-fail((if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then (if not-caught-fail(v_649) then (v_649,2-proj-2-tuple(v_647)) else fail-any) else fail-any) else fail-any)) in
        {107}let v_651: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_650),2-proj-7-tuple(v_633),3-proj-7-tuple(v_633),4-proj-7-tuple(v_633),5-proj-7-tuple(v_633),6-proj-7-tuple(v_633),7-proj-7-tuple(v_633))) in
        {108}let v_652: bitstring = catch-fail(concat3(1-proj-3-tuple(v_634),2-proj-3-tuple(v_634),2-proj-2-tuple(v_650))) in
        {109}let v_653: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_650))) in
        {110}let v_654: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_653),zero)) in
        {111}let v_655: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_653),zero)) in
        {112}let v_656: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_653),zero)) in
        {113}let v_657: bitstring = catch-fail((if success?(2-proj-3-tuple(v_653)) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then (if not-caught-fail(v_656) then (v_654,v_655,v_656) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_658: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_657)) then cipherstatepack(1-proj-3-tuple(v_657),minnonce) else fail-any)) in
        {115}let v_659: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_657)) then cipherstatepack(2-proj-3-tuple(v_657),minnonce) else fail-any)) in
        {116}let v_660: bitstring = catch-fail((if success?(1-proj-2-tuple(v_650)) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if not-caught-fail(v_658) then (if not-caught-fail(v_659) then (1-proj-2-tuple(v_650),v_658,v_659) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let (hs_661: handshakestate,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-7-tuple(v_633))))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if not-caught-fail(v_641) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (v_651,v_652,2-proj-3-tuple(v_660),3-proj-3-tuple(v_660)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {118}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {119}insert statestore(alice,bob,sid,statepack_d(hs_661,cs1,cs2));
        {120}out(pub, message_c)
    ) | (
        {122}!
        {142}get statestore(=alice,=bob,=sid,statepack_d(hs_662: handshakestate,cs1_663: cipherstate,cs2_664: cipherstate)) in
        {123}let hs_665: handshakestate = handshakestatesetcs(hs_662,cs2_664) in
        {124}in(pub, message_d: bitstring);
        {125}let v_666: bitstring = catch-fail(handshakestateunpack(hs_665)) in
        {126}let v_667: bitstring = catch-fail(deconcat3(message_d)) in
        {127}let v_668: bool = catch-fail(true) in
        {128}let v_669: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_666))) in
        {129}let v_670: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {130}let v_671: aead = catch-fail(decrypt(1-proj-2-tuple(v_670),2-proj-2-tuple(v_670),3-proj-3-tuple(v_669),3-proj-3-tuple(v_667))) in
        {131}let v_672: bitstring = catch-fail(aeadunpack(v_671)) in
        {132}let v_673: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {133}let v_674: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_670))) && success?(1-proj-3-tuple(v_669))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then cipherstatepack(1-proj-2-tuple(v_673),increment_nonce(2-proj-2-tuple(v_670))) else fail-any) else fail-any)) in
        {134}let v_675: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_667)) && (success?(3-proj-3-tuple(v_669)) && success?(1-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-2-tuple(v_670))))) then (if not-caught-fail(v_671) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then (if not-caught-fail(v_674) then (v_674,3-proj-3-tuple(v_672),1-proj-3-tuple(v_672)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_676: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) in
        {136}let v_677: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_667)) && success?(symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then symmetricstatepack(1-proj-3-tuple(v_676),2-proj-3-tuple(v_676),hash(3-proj-3-tuple(v_676),3-proj-3-tuple(v_667))) else fail-any) else fail-any)) in
        {137}let v_678: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_667)) && success?(1-proj-7-tuple(v_666))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if not-caught-fail(v_677) then (v_677,2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_679: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_678),2-proj-7-tuple(v_666),3-proj-7-tuple(v_666),4-proj-7-tuple(v_666),5-proj-7-tuple(v_666),6-proj-7-tuple(v_666),7-proj-7-tuple(v_666))) in
        {139}let (hs_680: handshakestate,plaintext_d: bitstring,valid_681: bool) = (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-7-tuple(v_666))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if not-caught-fail(v_668) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if (v_668 && 3-proj-3-tuple(v_678)) then (if not-caught-fail(v_679) then (v_679,2-proj-3-tuple(v_678),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {140}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {141}insert statestore(alice,bob,sid,statepack_e(hs_680,cs1_663,handshakestategetcs(hs_680)))
    ) | (
        {143}!
        {161}get statestore(=alice,=bob,=sid,statepack_e(hs_682: handshakestate,cs1_683: cipherstate,cs2_684: cipherstate)) in
        {144}let hs_685: handshakestate = handshakestatesetcs(hs_682,cs1_683) in
        {145}let v_686: bitstring = catch-fail(handshakestateunpack(hs_685)) in
        {146}let v_687: bitstring = catch-fail((empty,empty,empty)) in
        {147}let v_688: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_686))) in
        {148}let v_689: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {149}let v_690: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_689),2-proj-2-tuple(v_689),3-proj-3-tuple(v_688),msg_e(alice,bob,sid))) in
        {150}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {151}let v_692: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_689))) && success?(1-proj-3-tuple(v_688))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then cipherstatepack(1-proj-2-tuple(v_691),increment_nonce(2-proj-2-tuple(v_689))) else fail-any) else fail-any)) in
        {152}let v_693: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_688)) && success?(1-proj-3-tuple(v_688))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then (if not-caught-fail(v_690) then (if not-caught-fail(v_692) then (v_692,v_690) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {153}let v_694: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) in
        {154}let v_695: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_693)) && success?(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then symmetricstatepack(1-proj-3-tuple(v_694),2-proj-3-tuple(v_694),hash(3-proj-3-tuple(v_694),2-proj-2-tuple(v_693))) else fail-any) else fail-any)) in
        {155}let v_696: bitstring = catch-fail((if success?(1-proj-7-tuple(v_686)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,2-proj-2-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {156}let v_697: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_696),2-proj-7-tuple(v_686),3-proj-7-tuple(v_686),4-proj-7-tuple(v_686),5-proj-7-tuple(v_686),6-proj-7-tuple(v_686),7-proj-7-tuple(v_686))) in
        {157}let v_698: bitstring = catch-fail(concat3(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),2-proj-2-tuple(v_696))) in
        {158}let (hs_699: handshakestate,message_e: bitstring) = (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-7-tuple(v_686))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (v_697,v_698) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {159}event SendMsg(alice,bob,stagepack_e(sid),msg_e(alice,bob,sid));
        {160}out(pub, message_e)
    ) | (
        {162}event LeakS(phase0,alice);
        {163}out(pub, key_s(alice))
    ) | (
        {164}phase 1;
        {165}event LeakS(phase1,alice);
        {166}out(pub, key_s(alice))
    )
) | (
    {167}let s_700: keypair = keypairpack(empty,empty) in
    {168}out(pub, getpublickey(s_700));
    (
        {169}let e_701: keypair = keypairpack(empty,empty) in
        {170}let v_702: key = catch-fail(dhexp(key_s(charlie),g)) in
        {171}let rs_703: key = getpublickey((if not-caught-fail(v_702) then keypairpack(v_702,key_s(charlie)) else fail-any)) in
        {172}let re_704: key = empty in
        {173}let v_705: bitstring = catch-fail(hash(somename,empty)) in
        {174}let v_706: key = catch-fail(v_705) in
        {175}let v_707: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {176}let v_708: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_705) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then symmetricstatepack(v_707,v_706,v_705) else fail-any) else fail-any) else fail-any))) in
        {177}let v_709: symmetricstate = catch-fail((if success?((if not-caught-fail(v_705) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then symmetricstatepack(v_707,v_706,v_705) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_708),hash(3-proj-3-tuple(v_708),empty)) else fail-any) else fail-any)) in
        {178}let v_710: bitstring = catch-fail(symmetricstateunpack(v_709)) in
        {179}let v_711: symmetricstate = catch-fail((if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then symmetricstatepack(1-proj-3-tuple(v_710),2-proj-3-tuple(v_710),hash(3-proj-3-tuple(v_710),rs_703)) else fail-any)) in
        {180}let hs_712: handshakestate = (if not-caught-fail(v_709) then (if not-caught-fail(v_711) then handshakestatepack(v_711,s_700,e_701,rs_703,re_704,empty,true) else fail-any) else fail-any) in
        {181}insert statestore(alice,charlie,sid,statepack_a(hs_712))
    ) | (
        {222}get statestore(=alice,=charlie,=sid,statepack_a(hs_713: handshakestate)) in
        {182}let v_714: bitstring = catch-fail(handshakestateunpack(hs_713)) in
        {183}let v_715: bitstring = catch-fail((empty,empty,empty)) in
        {184}let v_716: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {185}let v_717: keypair = catch-fail((if not-caught-fail(v_716) then keypairpack(v_716,key_e(alice,charlie,sid)) else fail-any)) in
        {186}let v_718: bitstring = catch-fail(getpublickey(v_717)) in
        {187}let v_719: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_714))) in
        {188}let v_720: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_714)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),hash(3-proj-3-tuple(v_719),v_718)) else fail-any) else fail-any)) in
        {189}let v_721: bitstring = catch-fail(keypairunpack(v_717)) in
        {190}let v_722: bitstring = catch-fail(symmetricstateunpack(v_720)) in
        {191}let v_723: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_722),(if success?(4-proj-7-tuple(v_714)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_714)) else fail-any) else fail-any))) in
        {192}let v_724: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_722),(if success?(4-proj-7-tuple(v_714)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_714)) else fail-any) else fail-any))) in
        {193}let v_725: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_722),(if success?(4-proj-7-tuple(v_714)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_714)) else fail-any) else fail-any))) in
        {194}let v_726: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_714)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_714)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_722))) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then (if not-caught-fail(v_725) then (v_723,v_724,v_725) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {195}let v_727: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_714)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then dhexp(2-proj-2-tuple(v_721),4-proj-7-tuple(v_714)) else fail-any) else fail-any)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_726)) then cipherstatepack(2-proj-3-tuple(v_726),minnonce) else fail-any),1-proj-3-tuple(v_726),3-proj-3-tuple(v_722)) else fail-any) else fail-any) else fail-any)) in
        {196}let v_728: key = catch-fail(dhexp(key_s(alice),g)) in
        {197}let v_729: keypair = catch-fail((if not-caught-fail(v_728) then keypairpack(v_728,key_s(alice)) else fail-any)) in
        {198}let v_730: bitstring = catch-fail(symmetricstateunpack(v_727)) in
        {199}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {200}let v_732: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_731),2-proj-2-tuple(v_731),3-proj-3-tuple(v_730),getpublickey(v_729))) in
        {201}let v_733: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {202}let v_734: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_731))) && success?(1-proj-3-tuple(v_730))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then cipherstatepack(1-proj-2-tuple(v_733),increment_nonce(2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {203}let v_735: bitstring = catch-fail((if (success?(getpublickey(v_729)) && (success?(3-proj-3-tuple(v_730)) && success?(1-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_732) then (if not-caught-fail(v_734) then (v_734,v_732) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {204}let v_736: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_735),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) in
        {205}let v_737: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_735)) && success?(symmetricstatepack(1-proj-2-tuple(v_735),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_736),hash(3-proj-3-tuple(v_736),2-proj-2-tuple(v_735))) else fail-any) else fail-any)) in
        {206}let v_738: bitstring = catch-fail((if success?(getpublickey(v_729)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then (if not-caught-fail(v_737) then (v_737,2-proj-2-tuple(v_735)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {207}let v_739: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_738))) in
        {208}let v_740: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_739))) in
        {209}let v_741: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_740),2-proj-2-tuple(v_740),3-proj-3-tuple(v_739),msg_a(alice,charlie,sid))) in
        {210}let v_742: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_739))) in
        {211}let v_743: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_740))) && success?(1-proj-3-tuple(v_739))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then cipherstatepack(1-proj-2-tuple(v_742),increment_nonce(2-proj-2-tuple(v_740))) else fail-any) else fail-any)) in
        {212}let v_744: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_739)) && success?(1-proj-3-tuple(v_739))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then (if not-caught-fail(v_741) then (if not-caught-fail(v_743) then (v_743,v_741) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {213}let v_745: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_744),2-proj-3-tuple(v_739),3-proj-3-tuple(v_739)))) in
        {214}let v_746: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_744)) && success?(symmetricstatepack(1-proj-2-tuple(v_744),2-proj-3-tuple(v_739),3-proj-3-tuple(v_739)))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then symmetricstatepack(1-proj-3-tuple(v_745),2-proj-3-tuple(v_745),hash(3-proj-3-tuple(v_745),2-proj-2-tuple(v_744))) else fail-any) else fail-any)) in
        {215}let v_747: bitstring = catch-fail((if success?(1-proj-2-tuple(v_738)) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-2-tuple(v_744))))) then (if not-caught-fail(v_746) then (v_746,2-proj-2-tuple(v_744)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {216}let v_748: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_747),v_729,v_717,4-proj-7-tuple(v_714),5-proj-7-tuple(v_714),6-proj-7-tuple(v_714),7-proj-7-tuple(v_714))) in
        {217}let v_749: bitstring = catch-fail(concat3(v_718,2-proj-2-tuple(v_738),2-proj-2-tuple(v_747))) in
        {218}let (hs_750: handshakestate,message_a_751: bitstring) = (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-7-tuple(v_714))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (if not-caught-fail(v_720) then (if not-caught-fail(v_727) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then (if not-caught-fail(v_748) then (if not-caught-fail(v_749) then (v_748,v_749) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {219}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {220}insert statestore(alice,charlie,sid,statepack_b(hs_750));
        {221}out(pub, message_a_751)
    ) | (
        {251}get statestore(=alice,=charlie,=sid,statepack_b(hs_752: handshakestate)) in
        {223}in(pub, message_b_753: bitstring);
        {224}let v_754: bitstring = catch-fail(handshakestateunpack(hs_752)) in
        {225}let v_755: bitstring = catch-fail(deconcat3(message_b_753)) in
        {226}let v_756: bool = catch-fail(true) in
        {227}let v_757: key = catch-fail(1-proj-3-tuple(v_755)) in
        {228}let v_758: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_754))) in
        {229}let v_759: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_754)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then symmetricstatepack(1-proj-3-tuple(v_758),2-proj-3-tuple(v_758),hash(3-proj-3-tuple(v_758),v_757)) else fail-any) else fail-any)) in
        {230}let v_760: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_754))) in
        {231}let v_761: bitstring = catch-fail(symmetricstateunpack(v_759)) in
        {232}let v_762: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_761),(if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),v_757) else fail-any) else fail-any))) in
        {233}let v_763: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_761),(if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),v_757) else fail-any) else fail-any))) in
        {234}let v_764: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_761),(if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),v_757) else fail-any) else fail-any))) in
        {235}let v_765: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),v_757) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_761))) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then (if not-caught-fail(v_764) then (v_762,v_763,v_764) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_766: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then dhexp(2-proj-2-tuple(v_760),v_757) else fail-any) else fail-any)) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_765)) then cipherstatepack(2-proj-3-tuple(v_765),minnonce) else fail-any),1-proj-3-tuple(v_765),3-proj-3-tuple(v_761)) else fail-any) else fail-any) else fail-any)) in
        {237}let v_767: bitstring = catch-fail(symmetricstateunpack(v_766)) in
        {238}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {239}let v_769: aead = catch-fail(decrypt(1-proj-2-tuple(v_768),2-proj-2-tuple(v_768),3-proj-3-tuple(v_767),3-proj-3-tuple(v_755))) in
        {240}let v_770: bitstring = catch-fail(aeadunpack(v_769)) in
        {241}let v_771: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {242}let v_772: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_768))) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then cipherstatepack(1-proj-2-tuple(v_771),increment_nonce(2-proj-2-tuple(v_768))) else fail-any) else fail-any)) in
        {243}let v_773: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_755)) && (success?(3-proj-3-tuple(v_767)) && success?(1-proj-3-tuple(v_767)))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_769) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if not-caught-fail(v_772) then (v_772,3-proj-3-tuple(v_770),1-proj-3-tuple(v_770)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_774: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_773),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) in
        {245}let v_775: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_755)) && success?(symmetricstatepack(1-proj-3-tuple(v_773),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_774),hash(3-proj-3-tuple(v_774),3-proj-3-tuple(v_755))) else fail-any) else fail-any)) in
        {246}let v_776: bitstring = catch-fail((if success?(3-proj-3-tuple(v_755)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if not-caught-fail(v_775) then (v_775,2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_777: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_776),2-proj-7-tuple(v_754),3-proj-7-tuple(v_754),4-proj-7-tuple(v_754),v_757,6-proj-7-tuple(v_754),7-proj-7-tuple(v_754))) in
        {248}let (hs_778: handshakestate,plaintext_b_779: bitstring,valid_780: bool) = (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-7-tuple(v_754))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if not-caught-fail(v_756) then (if not-caught-fail(v_757) then (if not-caught-fail(v_759) then (if not-caught-fail(v_766) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if (v_756 && 3-proj-3-tuple(v_776)) then (if not-caught-fail(v_777) then (v_777,2-proj-3-tuple(v_776),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {249}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_779);
        {250}insert statestore(alice,charlie,sid,statepack_c(hs_778))
    ) | (
        {284}get statestore(=alice,=charlie,=sid,statepack_c(hs_781: handshakestate)) in
        {252}let v_782: bitstring = catch-fail(handshakestateunpack(hs_781)) in
        {253}let v_783: bitstring = catch-fail((empty,empty,empty)) in
        {254}let v_784: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_782))) in
        {255}let v_785: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_782))) in
        {256}let v_786: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_785),(if (success?(5-proj-7-tuple(v_782)) && success?(2-proj-7-tuple(v_782))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_782)) else fail-any) else fail-any))) in
        {257}let v_787: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_785),(if (success?(5-proj-7-tuple(v_782)) && success?(2-proj-7-tuple(v_782))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_782)) else fail-any) else fail-any))) in
        {258}let v_788: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_785),(if (success?(5-proj-7-tuple(v_782)) && success?(2-proj-7-tuple(v_782))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_782)) else fail-any) else fail-any))) in
        {259}let v_789: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_782)) && success?(2-proj-7-tuple(v_782))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_782)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_785))) then (if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (if not-caught-fail(v_788) then (v_786,v_787,v_788) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_790: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_782)) && success?(2-proj-7-tuple(v_782))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then dhexp(2-proj-2-tuple(v_784),5-proj-7-tuple(v_782)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_782))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_789)) then cipherstatepack(2-proj-3-tuple(v_789),minnonce) else fail-any),1-proj-3-tuple(v_789),3-proj-3-tuple(v_785)) else fail-any) else fail-any) else fail-any)) in
        {261}let v_791: bitstring = catch-fail(symmetricstateunpack(v_790)) in
        {262}let v_792: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {263}let v_793: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_792),2-proj-2-tuple(v_792),3-proj-3-tuple(v_791),msg_c(alice,charlie,sid))) in
        {264}let v_794: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {265}let v_795: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_792))) && success?(1-proj-3-tuple(v_791))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then cipherstatepack(1-proj-2-tuple(v_794),increment_nonce(2-proj-2-tuple(v_792))) else fail-any) else fail-any)) in
        {266}let v_796: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_791)) && success?(1-proj-3-tuple(v_791))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then (if not-caught-fail(v_793) then (if not-caught-fail(v_795) then (v_795,v_793) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_797: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_796),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) in
        {268}let v_798: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_796)) && success?(symmetricstatepack(1-proj-2-tuple(v_796),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_797),hash(3-proj-3-tuple(v_797),2-proj-2-tuple(v_796))) else fail-any) else fail-any)) in
        {269}let v_799: bitstring = catch-fail((if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then (if not-caught-fail(v_798) then (v_798,2-proj-2-tuple(v_796)) else fail-any) else fail-any) else fail-any)) in
        {270}let v_800: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_799),2-proj-7-tuple(v_782),3-proj-7-tuple(v_782),4-proj-7-tuple(v_782),5-proj-7-tuple(v_782),6-proj-7-tuple(v_782),7-proj-7-tuple(v_782))) in
        {271}let v_801: bitstring = catch-fail(concat3(1-proj-3-tuple(v_783),2-proj-3-tuple(v_783),2-proj-2-tuple(v_799))) in
        {272}let v_802: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_799))) in
        {273}let v_803: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_802),zero)) in
        {274}let v_804: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_802),zero)) in
        {275}let v_805: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_802),zero)) in
        {276}let v_806: bitstring = catch-fail((if success?(2-proj-3-tuple(v_802)) then (if not-caught-fail(v_803) then (if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (v_803,v_804,v_805) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_807: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_806)) then cipherstatepack(1-proj-3-tuple(v_806),minnonce) else fail-any)) in
        {278}let v_808: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_806)) then cipherstatepack(2-proj-3-tuple(v_806),minnonce) else fail-any)) in
        {279}let v_809: bitstring = catch-fail((if success?(1-proj-2-tuple(v_799)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if not-caught-fail(v_807) then (if not-caught-fail(v_808) then (1-proj-2-tuple(v_799),v_807,v_808) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let (hs_810: handshakestate,message_c_811: bitstring,cs1_812: cipherstate,cs2_813: cipherstate) = (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-7-tuple(v_782))))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then (if not-caught-fail(v_790) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (v_800,v_801,2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {281}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {282}insert statestore(alice,charlie,sid,statepack_d(hs_810,cs1_812,cs2_813));
        {283}out(pub, message_c_811)
    ) | (
        {285}!
        {305}get statestore(=alice,=charlie,=sid,statepack_d(hs_814: handshakestate,cs1_815: cipherstate,cs2_816: cipherstate)) in
        {286}let hs_817: handshakestate = handshakestatesetcs(hs_814,cs2_816) in
        {287}in(pub, message_d_818: bitstring);
        {288}let v_819: bitstring = catch-fail(handshakestateunpack(hs_817)) in
        {289}let v_820: bitstring = catch-fail(deconcat3(message_d_818)) in
        {290}let v_821: bool = catch-fail(true) in
        {291}let v_822: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_819))) in
        {292}let v_823: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_822))) in
        {293}let v_824: aead = catch-fail(decrypt(1-proj-2-tuple(v_823),2-proj-2-tuple(v_823),3-proj-3-tuple(v_822),3-proj-3-tuple(v_820))) in
        {294}let v_825: bitstring = catch-fail(aeadunpack(v_824)) in
        {295}let v_826: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_822))) in
        {296}let v_827: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_823))) && success?(1-proj-3-tuple(v_822))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-2-tuple(v_826))))) then cipherstatepack(1-proj-2-tuple(v_826),increment_nonce(2-proj-2-tuple(v_823))) else fail-any) else fail-any)) in
        {297}let v_828: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_820)) && (success?(3-proj-3-tuple(v_822)) && success?(1-proj-3-tuple(v_822)))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then (if not-caught-fail(v_824) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (if not-caught-fail(v_827) then (v_827,3-proj-3-tuple(v_825),1-proj-3-tuple(v_825)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let v_829: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_822),3-proj-3-tuple(v_822)))) in
        {299}let v_830: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_820)) && success?(symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_822),3-proj-3-tuple(v_822)))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then symmetricstatepack(1-proj-3-tuple(v_829),2-proj-3-tuple(v_829),hash(3-proj-3-tuple(v_829),3-proj-3-tuple(v_820))) else fail-any) else fail-any)) in
        {300}let v_831: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_820)) && success?(1-proj-7-tuple(v_819))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then (if not-caught-fail(v_830) then (v_830,2-proj-3-tuple(v_828),3-proj-3-tuple(v_828)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_832: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_831),2-proj-7-tuple(v_819),3-proj-7-tuple(v_819),4-proj-7-tuple(v_819),5-proj-7-tuple(v_819),6-proj-7-tuple(v_819),7-proj-7-tuple(v_819))) in
        {302}let (hs_833: handshakestate,plaintext_d_834: bitstring,valid_835: bool) = (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-7-tuple(v_819))))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if not-caught-fail(v_821) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if (v_821 && 3-proj-3-tuple(v_831)) then (if not-caught-fail(v_832) then (v_832,2-proj-3-tuple(v_831),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {303}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_834);
        {304}insert statestore(alice,charlie,sid,statepack_e(hs_833,cs1_815,handshakestategetcs(hs_833)))
    ) | (
        {306}!
        {324}get statestore(=alice,=charlie,=sid,statepack_e(hs_836: handshakestate,cs1_837: cipherstate,cs2_838: cipherstate)) in
        {307}let hs_839: handshakestate = handshakestatesetcs(hs_836,cs1_837) in
        {308}let v_840: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {309}let v_841: bitstring = catch-fail((empty,empty,empty)) in
        {310}let v_842: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_840))) in
        {311}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {312}let v_844: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_843),2-proj-2-tuple(v_843),3-proj-3-tuple(v_842),msg_e(alice,charlie,sid))) in
        {313}let v_845: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {314}let v_846: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_843))) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then cipherstatepack(1-proj-2-tuple(v_845),increment_nonce(2-proj-2-tuple(v_843))) else fail-any) else fail-any)) in
        {315}let v_847: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (v_846,v_844) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_848: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) in
        {317}let v_849: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_847)) && success?(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_848),hash(3-proj-3-tuple(v_848),2-proj-2-tuple(v_847))) else fail-any) else fail-any)) in
        {318}let v_850: bitstring = catch-fail((if success?(1-proj-7-tuple(v_840)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if not-caught-fail(v_849) then (v_849,2-proj-2-tuple(v_847)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {319}let v_851: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_850),2-proj-7-tuple(v_840),3-proj-7-tuple(v_840),4-proj-7-tuple(v_840),5-proj-7-tuple(v_840),6-proj-7-tuple(v_840),7-proj-7-tuple(v_840))) in
        {320}let v_852: bitstring = catch-fail(concat3(1-proj-3-tuple(v_841),2-proj-3-tuple(v_841),2-proj-2-tuple(v_850))) in
        {321}let (hs_853: handshakestate,message_e_854: bitstring) = (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-7-tuple(v_840))))) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (v_851,v_852) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {322}event SendMsg(alice,charlie,stagepack_e(sid),msg_e(alice,charlie,sid));
        {323}out(pub, message_e_854)
    ) | (
        {325}event LeakS(phase0,alice);
        {326}out(pub, key_s(alice))
    ) | (
        {327}phase 1;
        {328}event LeakS(phase1,alice);
        {329}out(pub, key_s(alice))
    )
) | (
    {330}let v_855: key = catch-fail(dhexp(key_s(bob),g)) in
    {331}let s_856: keypair = (if not-caught-fail(v_855) then keypairpack(v_855,key_s(bob)) else fail-any) in
    {332}out(pub, getpublickey(s_856));
    (
        {333}let e_857: keypair = keypairpack(empty,empty) in
        {334}let rs_858: key = empty in
        {335}let re_859: key = empty in
        {336}let v_860: bitstring = catch-fail(hash(somename,empty)) in
        {337}let v_861: key = catch-fail(v_860) in
        {338}let v_862: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {339}let v_863: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (if not-caught-fail(v_862) then symmetricstatepack(v_862,v_861,v_860) else fail-any) else fail-any) else fail-any))) in
        {340}let v_864: symmetricstate = catch-fail((if success?((if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (if not-caught-fail(v_862) then symmetricstatepack(v_862,v_861,v_860) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),hash(3-proj-3-tuple(v_863),empty)) else fail-any) else fail-any)) in
        {341}let v_865: bitstring = catch-fail(symmetricstateunpack(v_864)) in
        {342}let v_866: symmetricstate = catch-fail((if success?(getpublickey(s_856)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then symmetricstatepack(1-proj-3-tuple(v_865),2-proj-3-tuple(v_865),hash(3-proj-3-tuple(v_865),getpublickey(s_856))) else fail-any) else fail-any)) in
        {343}let hs_867: handshakestate = (if not-caught-fail(v_864) then (if not-caught-fail(v_866) then handshakestatepack(v_866,s_856,e_857,rs_858,re_859,empty,false) else fail-any) else fail-any) in
        {344}insert statestore(bob,alice,sid,statepack_a(hs_867))
    ) | (
        {385}get statestore(=bob,=alice,=sid,statepack_a(hs_868: handshakestate)) in
        {345}in(pub, message_a_869: bitstring);
        {346}let v_870: bitstring = catch-fail(handshakestateunpack(hs_868)) in
        {347}let v_871: bitstring = catch-fail(deconcat3(message_a_869)) in
        {348}let v_872: bool = catch-fail(true) in
        {349}let v_873: key = catch-fail(1-proj-3-tuple(v_871)) in
        {350}let v_874: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_870))) in
        {351}let v_875: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_870)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack(1-proj-3-tuple(v_874),2-proj-3-tuple(v_874),hash(3-proj-3-tuple(v_874),v_873)) else fail-any) else fail-any)) in
        {352}let v_876: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_870))) in
        {353}let v_877: bitstring = catch-fail(symmetricstateunpack(v_875)) in
        {354}let v_878: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_877),(if success?(2-proj-7-tuple(v_870)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),v_873) else fail-any) else fail-any))) in
        {355}let v_879: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_877),(if success?(2-proj-7-tuple(v_870)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),v_873) else fail-any) else fail-any))) in
        {356}let v_880: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_877),(if success?(2-proj-7-tuple(v_870)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),v_873) else fail-any) else fail-any))) in
        {357}let v_881: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_870)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),v_873) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_877))) then (if not-caught-fail(v_878) then (if not-caught-fail(v_879) then (if not-caught-fail(v_880) then (v_878,v_879,v_880) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {358}let v_882: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_870)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),v_873) else fail-any) else fail-any)) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_881)) then cipherstatepack(2-proj-3-tuple(v_881),minnonce) else fail-any),1-proj-3-tuple(v_881),3-proj-3-tuple(v_877)) else fail-any) else fail-any) else fail-any)) in
        {359}let v_883: bitstring = catch-fail(symmetricstateunpack(v_882)) in
        {360}let v_884: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_883))) in
        {361}let v_885: aead = catch-fail(decrypt(1-proj-2-tuple(v_884),2-proj-2-tuple(v_884),3-proj-3-tuple(v_883),2-proj-3-tuple(v_871))) in
        {362}let v_886: bitstring = catch-fail(aeadunpack(v_885)) in
        {363}let v_887: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_883))) in
        {364}let v_888: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_884))) && success?(1-proj-3-tuple(v_883))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-2-tuple(v_887))))) then cipherstatepack(1-proj-2-tuple(v_887),increment_nonce(2-proj-2-tuple(v_884))) else fail-any) else fail-any)) in
        {365}let v_889: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_871)) && (success?(3-proj-3-tuple(v_883)) && success?(1-proj-3-tuple(v_883)))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then (if not-caught-fail(v_885) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if not-caught-fail(v_888) then (v_888,3-proj-3-tuple(v_886),1-proj-3-tuple(v_886)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {366}let v_890: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_889),2-proj-3-tuple(v_883),3-proj-3-tuple(v_883)))) in
        {367}let v_891: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_871)) && success?(symmetricstatepack(1-proj-3-tuple(v_889),2-proj-3-tuple(v_883),3-proj-3-tuple(v_883)))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then symmetricstatepack(1-proj-3-tuple(v_890),2-proj-3-tuple(v_890),hash(3-proj-3-tuple(v_890),2-proj-3-tuple(v_871))) else fail-any) else fail-any)) in
        {368}let v_892: bitstring = catch-fail((if success?(2-proj-3-tuple(v_871)) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if not-caught-fail(v_891) then (v_891,2-proj-3-tuple(v_889),3-proj-3-tuple(v_889)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_893: key = catch-fail(2-proj-3-tuple(v_892)) in
        {370}let v_894: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_892))) in
        {371}let v_895: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_894))) in
        {372}let v_896: aead = catch-fail(decrypt(1-proj-2-tuple(v_895),2-proj-2-tuple(v_895),3-proj-3-tuple(v_894),3-proj-3-tuple(v_871))) in
        {373}let v_897: bitstring = catch-fail(aeadunpack(v_896)) in
        {374}let v_898: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_894))) in
        {375}let v_899: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_895))) && success?(1-proj-3-tuple(v_894))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then cipherstatepack(1-proj-2-tuple(v_898),increment_nonce(2-proj-2-tuple(v_895))) else fail-any) else fail-any)) in
        {376}let v_900: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_871)) && (success?(3-proj-3-tuple(v_894)) && success?(1-proj-3-tuple(v_894)))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then (if not-caught-fail(v_896) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if not-caught-fail(v_899) then (v_899,3-proj-3-tuple(v_897),1-proj-3-tuple(v_897)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_901: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_900),2-proj-3-tuple(v_894),3-proj-3-tuple(v_894)))) in
        {378}let v_902: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_871)) && success?(symmetricstatepack(1-proj-3-tuple(v_900),2-proj-3-tuple(v_894),3-proj-3-tuple(v_894)))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_901),hash(3-proj-3-tuple(v_901),3-proj-3-tuple(v_871))) else fail-any) else fail-any)) in
        {379}let v_903: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_871)) && success?(1-proj-3-tuple(v_892))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if not-caught-fail(v_902) then (v_902,2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_904: key = catch-fail(dhexp(key_s(alice),g)) in
        {381}let v_905: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_903),2-proj-7-tuple(v_870),3-proj-7-tuple(v_870),v_893,v_873,6-proj-7-tuple(v_870),7-proj-7-tuple(v_870))) in
        {382}let (hs_906: handshakestate,plaintext_a: bitstring,valid_907: bool) = (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-7-tuple(v_870))))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (if not-caught-fail(v_875) then (if not-caught-fail(v_882) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if not-caught-fail(v_893) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if ((3-proj-3-tuple(v_892) && 3-proj-3-tuple(v_903)) && (v_893 = getpublickey((if not-caught-fail(v_904) then keypairpack(v_904,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_905) then (v_905,2-proj-3-tuple(v_903),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {383}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {384}insert statestore(bob,alice,sid,statepack_b(hs_906))
    ) | (
        {415}get statestore(=bob,=alice,=sid,statepack_b(hs_908: handshakestate)) in
        {386}let v_909: bitstring = catch-fail(handshakestateunpack(hs_908)) in
        {387}let v_910: bitstring = catch-fail((empty,empty,empty)) in
        {388}let v_911: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {389}let v_912: keypair = catch-fail((if not-caught-fail(v_911) then keypairpack(v_911,key_e(bob,alice,sid)) else fail-any)) in
        {390}let v_913: bitstring = catch-fail(getpublickey(v_912)) in
        {391}let v_914: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_909))) in
        {392}let v_915: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_909)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then symmetricstatepack(1-proj-3-tuple(v_914),2-proj-3-tuple(v_914),hash(3-proj-3-tuple(v_914),v_913)) else fail-any) else fail-any)) in
        {393}let v_916: bitstring = catch-fail(keypairunpack(v_912)) in
        {394}let v_917: bitstring = catch-fail(symmetricstateunpack(v_915)) in
        {395}let v_918: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_917),(if success?(5-proj-7-tuple(v_909)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),5-proj-7-tuple(v_909)) else fail-any) else fail-any))) in
        {396}let v_919: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_917),(if success?(5-proj-7-tuple(v_909)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),5-proj-7-tuple(v_909)) else fail-any) else fail-any))) in
        {397}let v_920: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_917),(if success?(5-proj-7-tuple(v_909)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),5-proj-7-tuple(v_909)) else fail-any) else fail-any))) in
        {398}let v_921: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_909)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),5-proj-7-tuple(v_909)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_917))) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (if not-caught-fail(v_920) then (v_918,v_919,v_920) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_922: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_909)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),5-proj-7-tuple(v_909)) else fail-any) else fail-any)) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_921)) then cipherstatepack(2-proj-3-tuple(v_921),minnonce) else fail-any),1-proj-3-tuple(v_921),3-proj-3-tuple(v_917)) else fail-any) else fail-any) else fail-any)) in
        {400}let v_923: bitstring = catch-fail(symmetricstateunpack(v_922)) in
        {401}let v_924: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_923))) in
        {402}let v_925: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_924),2-proj-2-tuple(v_924),3-proj-3-tuple(v_923),msg_b(bob,alice,sid))) in
        {403}let v_926: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_923))) in
        {404}let v_927: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_924))) && success?(1-proj-3-tuple(v_923))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-2-tuple(v_926))))) then cipherstatepack(1-proj-2-tuple(v_926),increment_nonce(2-proj-2-tuple(v_924))) else fail-any) else fail-any)) in
        {405}let v_928: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_923)) && success?(1-proj-3-tuple(v_923))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-2-tuple(v_924))))) then (if not-caught-fail(v_925) then (if not-caught-fail(v_927) then (v_927,v_925) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {406}let v_929: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_928),2-proj-3-tuple(v_923),3-proj-3-tuple(v_923)))) in
        {407}let v_930: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_928)) && success?(symmetricstatepack(1-proj-2-tuple(v_928),2-proj-3-tuple(v_923),3-proj-3-tuple(v_923)))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then symmetricstatepack(1-proj-3-tuple(v_929),2-proj-3-tuple(v_929),hash(3-proj-3-tuple(v_929),2-proj-2-tuple(v_928))) else fail-any) else fail-any)) in
        {408}let v_931: bitstring = catch-fail((if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then (if not-caught-fail(v_930) then (v_930,2-proj-2-tuple(v_928)) else fail-any) else fail-any) else fail-any)) in
        {409}let v_932: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_931),2-proj-7-tuple(v_909),v_912,4-proj-7-tuple(v_909),5-proj-7-tuple(v_909),6-proj-7-tuple(v_909),7-proj-7-tuple(v_909))) in
        {410}let v_933: bitstring = catch-fail(concat3(v_913,2-proj-3-tuple(v_910),2-proj-2-tuple(v_931))) in
        {411}let (hs_934: handshakestate,message_b_935: bitstring) = (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-7-tuple(v_909))))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then (if not-caught-fail(v_915) then (if not-caught-fail(v_922) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-2-tuple(v_931))))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_933) then (v_932,v_933) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {412}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {413}insert statestore(bob,alice,sid,statepack_c(hs_934));
        {414}out(pub, message_b_935)
    ) | (
        {449}get statestore(=bob,=alice,=sid,statepack_c(hs_936: handshakestate)) in
        {416}in(pub, message_c_937: bitstring);
        {417}let v_938: bitstring = catch-fail(handshakestateunpack(hs_936)) in
        {418}let v_939: bitstring = catch-fail(deconcat3(message_c_937)) in
        {419}let v_940: bool = catch-fail(true) in
        {420}let v_941: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_938))) in
        {421}let v_942: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_938))) in
        {422}let v_943: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_942),(if (success?(4-proj-7-tuple(v_938)) && success?(3-proj-7-tuple(v_938))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),4-proj-7-tuple(v_938)) else fail-any) else fail-any))) in
        {423}let v_944: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_942),(if (success?(4-proj-7-tuple(v_938)) && success?(3-proj-7-tuple(v_938))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),4-proj-7-tuple(v_938)) else fail-any) else fail-any))) in
        {424}let v_945: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_942),(if (success?(4-proj-7-tuple(v_938)) && success?(3-proj-7-tuple(v_938))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),4-proj-7-tuple(v_938)) else fail-any) else fail-any))) in
        {425}let v_946: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_938)) && success?(3-proj-7-tuple(v_938))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),4-proj-7-tuple(v_938)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_942))) then (if not-caught-fail(v_943) then (if not-caught-fail(v_944) then (if not-caught-fail(v_945) then (v_943,v_944,v_945) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {426}let v_947: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_938)) && success?(3-proj-7-tuple(v_938))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),4-proj-7-tuple(v_938)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_938))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_946)) then cipherstatepack(2-proj-3-tuple(v_946),minnonce) else fail-any),1-proj-3-tuple(v_946),3-proj-3-tuple(v_942)) else fail-any) else fail-any) else fail-any)) in
        {427}let v_948: bitstring = catch-fail(symmetricstateunpack(v_947)) in
        {428}let v_949: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_948))) in
        {429}let v_950: aead = catch-fail(decrypt(1-proj-2-tuple(v_949),2-proj-2-tuple(v_949),3-proj-3-tuple(v_948),3-proj-3-tuple(v_939))) in
        {430}let v_951: bitstring = catch-fail(aeadunpack(v_950)) in
        {431}let v_952: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_948))) in
        {432}let v_953: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_949))) && success?(1-proj-3-tuple(v_948))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then cipherstatepack(1-proj-2-tuple(v_952),increment_nonce(2-proj-2-tuple(v_949))) else fail-any) else fail-any)) in
        {433}let v_954: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_939)) && (success?(3-proj-3-tuple(v_948)) && success?(1-proj-3-tuple(v_948)))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-2-tuple(v_949))))) then (if not-caught-fail(v_950) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if not-caught-fail(v_953) then (v_953,3-proj-3-tuple(v_951),1-proj-3-tuple(v_951)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {434}let v_955: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_954),2-proj-3-tuple(v_948),3-proj-3-tuple(v_948)))) in
        {435}let v_956: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_939)) && success?(symmetricstatepack(1-proj-3-tuple(v_954),2-proj-3-tuple(v_948),3-proj-3-tuple(v_948)))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_955),hash(3-proj-3-tuple(v_955),3-proj-3-tuple(v_939))) else fail-any) else fail-any)) in
        {436}let v_957: bitstring = catch-fail((if success?(3-proj-3-tuple(v_939)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if not-caught-fail(v_956) then (v_956,2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {437}let v_958: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_957),2-proj-7-tuple(v_938),3-proj-7-tuple(v_938),4-proj-7-tuple(v_938),5-proj-7-tuple(v_938),6-proj-7-tuple(v_938),7-proj-7-tuple(v_938))) in
        {438}let v_959: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_957))) in
        {439}let v_960: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_959),zero)) in
        {440}let v_961: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_959),zero)) in
        {441}let v_962: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_959),zero)) in
        {442}let v_963: bitstring = catch-fail((if success?(2-proj-3-tuple(v_959)) then (if not-caught-fail(v_960) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (v_960,v_961,v_962) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_964: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_963)) then cipherstatepack(1-proj-3-tuple(v_963),minnonce) else fail-any)) in
        {444}let v_965: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_963)) then cipherstatepack(2-proj-3-tuple(v_963),minnonce) else fail-any)) in
        {445}let v_966: bitstring = catch-fail((if success?(1-proj-3-tuple(v_957)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if not-caught-fail(v_964) then (if not-caught-fail(v_965) then (1-proj-3-tuple(v_957),v_964,v_965) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {446}let (hs_967: handshakestate,plaintext_c: bitstring,valid_968: bool,cs1_969: cipherstate,cs2_970: cipherstate) = (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-7-tuple(v_938))))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if not-caught-fail(v_940) then (if not-caught-fail(v_947) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if (v_940 && 3-proj-3-tuple(v_957)) then (if not-caught-fail(v_958) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (v_958,2-proj-3-tuple(v_957),true,2-proj-3-tuple(v_966),3-proj-3-tuple(v_966)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {447}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {448}insert statestore(bob,alice,sid,statepack_d(hs_967,cs1_969,cs2_970))
    ) | (
        {450}!
        {469}get statestore(=bob,=alice,=sid,statepack_d(hs_971: handshakestate,cs1_972: cipherstate,cs2_973: cipherstate)) in
        {451}let hs_974: handshakestate = handshakestatesetcs(hs_971,cs2_973) in
        {452}let v_975: bitstring = catch-fail(handshakestateunpack(hs_974)) in
        {453}let v_976: bitstring = catch-fail((empty,empty,empty)) in
        {454}let v_977: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_975))) in
        {455}let v_978: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_977))) in
        {456}let v_979: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_978),2-proj-2-tuple(v_978),3-proj-3-tuple(v_977),msg_d(bob,alice,sid))) in
        {457}let v_980: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_977))) in
        {458}let v_981: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_978))) && success?(1-proj-3-tuple(v_977))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then cipherstatepack(1-proj-2-tuple(v_980),increment_nonce(2-proj-2-tuple(v_978))) else fail-any) else fail-any)) in
        {459}let v_982: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_977)) && success?(1-proj-3-tuple(v_977))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then (if not-caught-fail(v_979) then (if not-caught-fail(v_981) then (v_981,v_979) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_983: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_982),2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)))) in
        {461}let v_984: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_982)) && success?(symmetricstatepack(1-proj-2-tuple(v_982),2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then symmetricstatepack(1-proj-3-tuple(v_983),2-proj-3-tuple(v_983),hash(3-proj-3-tuple(v_983),2-proj-2-tuple(v_982))) else fail-any) else fail-any)) in
        {462}let v_985: bitstring = catch-fail((if success?(1-proj-7-tuple(v_975)) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-2-tuple(v_982))))) then (if not-caught-fail(v_984) then (v_984,2-proj-2-tuple(v_982)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let v_986: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_985),2-proj-7-tuple(v_975),3-proj-7-tuple(v_975),4-proj-7-tuple(v_975),5-proj-7-tuple(v_975),6-proj-7-tuple(v_975),7-proj-7-tuple(v_975))) in
        {464}let v_987: bitstring = catch-fail(concat3(1-proj-3-tuple(v_976),2-proj-3-tuple(v_976),2-proj-2-tuple(v_985))) in
        {465}let (hs_988: handshakestate,message_d_989: bitstring) = (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-7-tuple(v_975))))) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-2-tuple(v_985))))) then (if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (v_986,v_987) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {466}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {467}insert statestore(bob,alice,sid,statepack_e(hs_988,cs1_972,handshakestategetcs(hs_988)));
        {468}out(pub, message_d_989)
    ) | (
        {470}!
        {490}get statestore(=bob,=alice,=sid,statepack_e(hs_990: handshakestate,cs1_991: cipherstate,cs2_992: cipherstate)) in
        {471}let hs_993: handshakestate = handshakestatesetcs(hs_990,cs1_991) in
        {472}in(pub, message_e_994: bitstring);
        {473}let v_995: bitstring = catch-fail(handshakestateunpack(hs_993)) in
        {474}let v_996: bitstring = catch-fail(deconcat3(message_e_994)) in
        {475}let v_997: bool = catch-fail(true) in
        {476}let v_998: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_995))) in
        {477}let v_999: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {478}let v_1000: aead = catch-fail(decrypt(1-proj-2-tuple(v_999),2-proj-2-tuple(v_999),3-proj-3-tuple(v_998),3-proj-3-tuple(v_996))) in
        {479}let v_1001: bitstring = catch-fail(aeadunpack(v_1000)) in
        {480}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {481}let v_1003: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_999))) && success?(1-proj-3-tuple(v_998))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then cipherstatepack(1-proj-2-tuple(v_1002),increment_nonce(2-proj-2-tuple(v_999))) else fail-any) else fail-any)) in
        {482}let v_1004: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_996)) && (success?(3-proj-3-tuple(v_998)) && success?(1-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if not-caught-fail(v_1003) then (v_1003,3-proj-3-tuple(v_1001),1-proj-3-tuple(v_1001)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_1005: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) in
        {484}let v_1006: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_996)) && success?(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),hash(3-proj-3-tuple(v_1005),3-proj-3-tuple(v_996))) else fail-any) else fail-any)) in
        {485}let v_1007: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_996)) && success?(1-proj-7-tuple(v_995))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,2-proj-3-tuple(v_1004),3-proj-3-tuple(v_1004)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {486}let v_1008: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1007),2-proj-7-tuple(v_995),3-proj-7-tuple(v_995),4-proj-7-tuple(v_995),5-proj-7-tuple(v_995),6-proj-7-tuple(v_995),7-proj-7-tuple(v_995))) in
        {487}let (hs_1009: handshakestate,plaintext_e: bitstring,valid_1010: bool) = (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-7-tuple(v_995))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if not-caught-fail(v_997) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if (v_997 && 3-proj-3-tuple(v_1007)) then (if not-caught-fail(v_1008) then (v_1008,2-proj-3-tuple(v_1007),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {488}event RecvMsg(bob,alice,stagepack_e(sid),plaintext_e);
        {489}event RecvEnd(valid_1010)
    ) | (
        {491}event LeakS(phase0,bob);
        {492}out(pub, key_s(bob))
    ) | (
        {493}phase 1;
        {494}event LeakS(phase1,bob);
        {495}out(pub, key_s(bob))
    )
) | (
    {496}let v_1011: key = catch-fail(dhexp(key_s(bob),g)) in
    {497}let s_1012: keypair = (if not-caught-fail(v_1011) then keypairpack(v_1011,key_s(bob)) else fail-any) in
    {498}out(pub, getpublickey(s_1012));
    (
        {499}let e_1013: keypair = keypairpack(empty,empty) in
        {500}let rs_1014: key = empty in
        {501}let re_1015: key = empty in
        {502}let v_1016: bitstring = catch-fail(hash(somename,empty)) in
        {503}let v_1017: key = catch-fail(v_1016) in
        {504}let v_1018: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {505}let v_1019: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1016) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then symmetricstatepack(v_1018,v_1017,v_1016) else fail-any) else fail-any) else fail-any))) in
        {506}let v_1020: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1016) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then symmetricstatepack(v_1018,v_1017,v_1016) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then symmetricstatepack(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),hash(3-proj-3-tuple(v_1019),empty)) else fail-any) else fail-any)) in
        {507}let v_1021: bitstring = catch-fail(symmetricstateunpack(v_1020)) in
        {508}let v_1022: symmetricstate = catch-fail((if success?(getpublickey(s_1012)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then symmetricstatepack(1-proj-3-tuple(v_1021),2-proj-3-tuple(v_1021),hash(3-proj-3-tuple(v_1021),getpublickey(s_1012))) else fail-any) else fail-any)) in
        {509}let hs_1023: handshakestate = (if not-caught-fail(v_1020) then (if not-caught-fail(v_1022) then handshakestatepack(v_1022,s_1012,e_1013,rs_1014,re_1015,empty,false) else fail-any) else fail-any) in
        {510}insert statestore(bob,charlie,sid,statepack_a(hs_1023))
    ) | (
        {551}get statestore(=bob,=charlie,=sid,statepack_a(hs_1024: handshakestate)) in
        {511}in(pub, message_a_1025: bitstring);
        {512}let v_1026: bitstring = catch-fail(handshakestateunpack(hs_1024)) in
        {513}let v_1027: bitstring = catch-fail(deconcat3(message_a_1025)) in
        {514}let v_1028: bool = catch-fail(true) in
        {515}let v_1029: key = catch-fail(1-proj-3-tuple(v_1027)) in
        {516}let v_1030: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1026))) in
        {517}let v_1031: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then symmetricstatepack(1-proj-3-tuple(v_1030),2-proj-3-tuple(v_1030),hash(3-proj-3-tuple(v_1030),v_1029)) else fail-any) else fail-any)) in
        {518}let v_1032: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1026))) in
        {519}let v_1033: bitstring = catch-fail(symmetricstateunpack(v_1031)) in
        {520}let v_1034: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1033),(if success?(2-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),v_1029) else fail-any) else fail-any))) in
        {521}let v_1035: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1033),(if success?(2-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),v_1029) else fail-any) else fail-any))) in
        {522}let v_1036: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1033),(if success?(2-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),v_1029) else fail-any) else fail-any))) in
        {523}let v_1037: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),v_1029) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1033))) then (if not-caught-fail(v_1034) then (if not-caught-fail(v_1035) then (if not-caught-fail(v_1036) then (v_1034,v_1035,v_1036) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {524}let v_1038: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),v_1029) else fail-any) else fail-any)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1037)) then cipherstatepack(2-proj-3-tuple(v_1037),minnonce) else fail-any),1-proj-3-tuple(v_1037),3-proj-3-tuple(v_1033)) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1039: bitstring = catch-fail(symmetricstateunpack(v_1038)) in
        {526}let v_1040: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {527}let v_1041: aead = catch-fail(decrypt(1-proj-2-tuple(v_1040),2-proj-2-tuple(v_1040),3-proj-3-tuple(v_1039),2-proj-3-tuple(v_1027))) in
        {528}let v_1042: bitstring = catch-fail(aeadunpack(v_1041)) in
        {529}let v_1043: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {530}let v_1044: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1040))) && success?(1-proj-3-tuple(v_1039))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-2-tuple(v_1043))))) then cipherstatepack(1-proj-2-tuple(v_1043),increment_nonce(2-proj-2-tuple(v_1040))) else fail-any) else fail-any)) in
        {531}let v_1045: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1027)) && (success?(3-proj-3-tuple(v_1039)) && success?(1-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then (if not-caught-fail(v_1041) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then (if not-caught-fail(v_1044) then (v_1044,3-proj-3-tuple(v_1042),1-proj-3-tuple(v_1042)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1046: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) in
        {533}let v_1047: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1027)) && success?(symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1046) && success?(is-true(success?(1-proj-3-tuple(v_1046))))) then symmetricstatepack(1-proj-3-tuple(v_1046),2-proj-3-tuple(v_1046),hash(3-proj-3-tuple(v_1046),2-proj-3-tuple(v_1027))) else fail-any) else fail-any)) in
        {534}let v_1048: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1027)) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then (if not-caught-fail(v_1047) then (v_1047,2-proj-3-tuple(v_1045),3-proj-3-tuple(v_1045)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1049: key = catch-fail(2-proj-3-tuple(v_1048)) in
        {536}let v_1050: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1048))) in
        {537}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {538}let v_1052: aead = catch-fail(decrypt(1-proj-2-tuple(v_1051),2-proj-2-tuple(v_1051),3-proj-3-tuple(v_1050),3-proj-3-tuple(v_1027))) in
        {539}let v_1053: bitstring = catch-fail(aeadunpack(v_1052)) in
        {540}let v_1054: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {541}let v_1055: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1051))) && success?(1-proj-3-tuple(v_1050))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then cipherstatepack(1-proj-2-tuple(v_1054),increment_nonce(2-proj-2-tuple(v_1051))) else fail-any) else fail-any)) in
        {542}let v_1056: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1027)) && (success?(3-proj-3-tuple(v_1050)) && success?(1-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then (if not-caught-fail(v_1052) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if not-caught-fail(v_1055) then (v_1055,3-proj-3-tuple(v_1053),1-proj-3-tuple(v_1053)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1057: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) in
        {544}let v_1058: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1027)) && success?(symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then symmetricstatepack(1-proj-3-tuple(v_1057),2-proj-3-tuple(v_1057),hash(3-proj-3-tuple(v_1057),3-proj-3-tuple(v_1027))) else fail-any) else fail-any)) in
        {545}let v_1059: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1027)) && success?(1-proj-3-tuple(v_1048))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if not-caught-fail(v_1058) then (v_1058,2-proj-3-tuple(v_1056),3-proj-3-tuple(v_1056)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {546}let v_1060: key = catch-fail(dhexp(key_s(charlie),g)) in
        {547}let v_1061: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1059),2-proj-7-tuple(v_1026),3-proj-7-tuple(v_1026),v_1049,v_1029,6-proj-7-tuple(v_1026),7-proj-7-tuple(v_1026))) in
        {548}let (hs_1062: handshakestate,plaintext_a_1063: bitstring,valid_1064: bool) = (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-7-tuple(v_1026))))) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-3-tuple(v_1027))))) then (if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1031) then (if not-caught-fail(v_1038) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if not-caught-fail(v_1049) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then (if ((3-proj-3-tuple(v_1048) && 3-proj-3-tuple(v_1059)) && (v_1049 = getpublickey((if not-caught-fail(v_1060) then keypairpack(v_1060,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1061) then (v_1061,2-proj-3-tuple(v_1059),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {549}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1063);
        {550}insert statestore(bob,charlie,sid,statepack_b(hs_1062))
    ) | (
        {581}get statestore(=bob,=charlie,=sid,statepack_b(hs_1065: handshakestate)) in
        {552}let v_1066: bitstring = catch-fail(handshakestateunpack(hs_1065)) in
        {553}let v_1067: bitstring = catch-fail((empty,empty,empty)) in
        {554}let v_1068: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {555}let v_1069: keypair = catch-fail((if not-caught-fail(v_1068) then keypairpack(v_1068,key_e(bob,charlie,sid)) else fail-any)) in
        {556}let v_1070: bitstring = catch-fail(getpublickey(v_1069)) in
        {557}let v_1071: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1066))) in
        {558}let v_1072: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1066)) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-3-tuple(v_1071))))) then symmetricstatepack(1-proj-3-tuple(v_1071),2-proj-3-tuple(v_1071),hash(3-proj-3-tuple(v_1071),v_1070)) else fail-any) else fail-any)) in
        {559}let v_1073: bitstring = catch-fail(keypairunpack(v_1069)) in
        {560}let v_1074: bitstring = catch-fail(symmetricstateunpack(v_1072)) in
        {561}let v_1075: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1074),(if success?(5-proj-7-tuple(v_1066)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1066)) else fail-any) else fail-any))) in
        {562}let v_1076: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1074),(if success?(5-proj-7-tuple(v_1066)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1066)) else fail-any) else fail-any))) in
        {563}let v_1077: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1074),(if success?(5-proj-7-tuple(v_1066)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1066)) else fail-any) else fail-any))) in
        {564}let v_1078: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1066)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1066)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1074))) then (if not-caught-fail(v_1075) then (if not-caught-fail(v_1076) then (if not-caught-fail(v_1077) then (v_1075,v_1076,v_1077) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {565}let v_1079: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1066)) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then dhexp(2-proj-2-tuple(v_1073),5-proj-7-tuple(v_1066)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-3-tuple(v_1078))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1078)) then cipherstatepack(2-proj-3-tuple(v_1078),minnonce) else fail-any),1-proj-3-tuple(v_1078),3-proj-3-tuple(v_1074)) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1080: bitstring = catch-fail(symmetricstateunpack(v_1079)) in
        {567}let v_1081: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1080))) in
        {568}let v_1082: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1081),2-proj-2-tuple(v_1081),3-proj-3-tuple(v_1080),msg_b(bob,charlie,sid))) in
        {569}let v_1083: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1080))) in
        {570}let v_1084: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1081))) && success?(1-proj-3-tuple(v_1080))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-2-tuple(v_1083))))) then cipherstatepack(1-proj-2-tuple(v_1083),increment_nonce(2-proj-2-tuple(v_1081))) else fail-any) else fail-any)) in
        {571}let v_1085: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1080)) && success?(1-proj-3-tuple(v_1080))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-2-tuple(v_1081))))) then (if not-caught-fail(v_1082) then (if not-caught-fail(v_1084) then (v_1084,v_1082) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {572}let v_1086: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1085),2-proj-3-tuple(v_1080),3-proj-3-tuple(v_1080)))) in
        {573}let v_1087: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1085)) && success?(symmetricstatepack(1-proj-2-tuple(v_1085),2-proj-3-tuple(v_1080),3-proj-3-tuple(v_1080)))) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then symmetricstatepack(1-proj-3-tuple(v_1086),2-proj-3-tuple(v_1086),hash(3-proj-3-tuple(v_1086),2-proj-2-tuple(v_1085))) else fail-any) else fail-any)) in
        {574}let v_1088: bitstring = catch-fail((if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then (if not-caught-fail(v_1087) then (v_1087,2-proj-2-tuple(v_1085)) else fail-any) else fail-any) else fail-any)) in
        {575}let v_1089: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1088),2-proj-7-tuple(v_1066),v_1069,4-proj-7-tuple(v_1066),5-proj-7-tuple(v_1066),6-proj-7-tuple(v_1066),7-proj-7-tuple(v_1066))) in
        {576}let v_1090: bitstring = catch-fail(concat3(v_1070,2-proj-3-tuple(v_1067),2-proj-2-tuple(v_1088))) in
        {577}let (hs_1091: handshakestate,message_b_1092: bitstring) = (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-7-tuple(v_1066))))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-3-tuple(v_1067))))) then (if not-caught-fail(v_1069) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1079) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-2-tuple(v_1088))))) then (if not-caught-fail(v_1089) then (if not-caught-fail(v_1090) then (v_1089,v_1090) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {578}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {579}insert statestore(bob,charlie,sid,statepack_c(hs_1091));
        {580}out(pub, message_b_1092)
    ) | (
        {615}get statestore(=bob,=charlie,=sid,statepack_c(hs_1093: handshakestate)) in
        {582}in(pub, message_c_1094: bitstring);
        {583}let v_1095: bitstring = catch-fail(handshakestateunpack(hs_1093)) in
        {584}let v_1096: bitstring = catch-fail(deconcat3(message_c_1094)) in
        {585}let v_1097: bool = catch-fail(true) in
        {586}let v_1098: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1095))) in
        {587}let v_1099: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1095))) in
        {588}let v_1100: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1099),(if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any))) in
        {589}let v_1101: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1099),(if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any))) in
        {590}let v_1102: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1099),(if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any))) in
        {591}let v_1103: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1099))) then (if not-caught-fail(v_1100) then (if not-caught-fail(v_1101) then (if not-caught-fail(v_1102) then (v_1100,v_1101,v_1102) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1104: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1095)) && success?(3-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then dhexp(2-proj-2-tuple(v_1098),4-proj-7-tuple(v_1095)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1095))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-3-tuple(v_1099))))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1103)) then cipherstatepack(2-proj-3-tuple(v_1103),minnonce) else fail-any),1-proj-3-tuple(v_1103),3-proj-3-tuple(v_1099)) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1105: bitstring = catch-fail(symmetricstateunpack(v_1104)) in
        {594}let v_1106: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1105))) in
        {595}let v_1107: aead = catch-fail(decrypt(1-proj-2-tuple(v_1106),2-proj-2-tuple(v_1106),3-proj-3-tuple(v_1105),3-proj-3-tuple(v_1096))) in
        {596}let v_1108: bitstring = catch-fail(aeadunpack(v_1107)) in
        {597}let v_1109: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1105))) in
        {598}let v_1110: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1106))) && success?(1-proj-3-tuple(v_1105))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then cipherstatepack(1-proj-2-tuple(v_1109),increment_nonce(2-proj-2-tuple(v_1106))) else fail-any) else fail-any)) in
        {599}let v_1111: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1096)) && (success?(3-proj-3-tuple(v_1105)) && success?(1-proj-3-tuple(v_1105)))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then (if not-caught-fail(v_1107) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-3-tuple(v_1108))))) then (if not-caught-fail(v_1110) then (v_1110,3-proj-3-tuple(v_1108),1-proj-3-tuple(v_1108)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {600}let v_1112: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1111),2-proj-3-tuple(v_1105),3-proj-3-tuple(v_1105)))) in
        {601}let v_1113: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1096)) && success?(symmetricstatepack(1-proj-3-tuple(v_1111),2-proj-3-tuple(v_1105),3-proj-3-tuple(v_1105)))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then symmetricstatepack(1-proj-3-tuple(v_1112),2-proj-3-tuple(v_1112),hash(3-proj-3-tuple(v_1112),3-proj-3-tuple(v_1096))) else fail-any) else fail-any)) in
        {602}let v_1114: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1096)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-3-tuple(v_1105))))) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then (if not-caught-fail(v_1113) then (v_1113,2-proj-3-tuple(v_1111),3-proj-3-tuple(v_1111)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {603}let v_1115: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1114),2-proj-7-tuple(v_1095),3-proj-7-tuple(v_1095),4-proj-7-tuple(v_1095),5-proj-7-tuple(v_1095),6-proj-7-tuple(v_1095),7-proj-7-tuple(v_1095))) in
        {604}let v_1116: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1114))) in
        {605}let v_1117: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1116),zero)) in
        {606}let v_1118: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1116),zero)) in
        {607}let v_1119: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1116),zero)) in
        {608}let v_1120: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1116)) then (if not-caught-fail(v_1117) then (if not-caught-fail(v_1118) then (if not-caught-fail(v_1119) then (v_1117,v_1118,v_1119) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {609}let v_1121: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1120)) then cipherstatepack(1-proj-3-tuple(v_1120),minnonce) else fail-any)) in
        {610}let v_1122: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1120)) then cipherstatepack(2-proj-3-tuple(v_1120),minnonce) else fail-any)) in
        {611}let v_1123: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1114)) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-3-tuple(v_1116))))) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-3-tuple(v_1120))))) then (if not-caught-fail(v_1121) then (if not-caught-fail(v_1122) then (1-proj-3-tuple(v_1114),v_1121,v_1122) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {612}let (hs_1124: handshakestate,plaintext_c_1125: bitstring,valid_1126: bool,cs1_1127: cipherstate,cs2_1128: cipherstate) = (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-7-tuple(v_1095))))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-3-tuple(v_1096))))) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1104) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then (if (v_1097 && 3-proj-3-tuple(v_1114)) then (if not-caught-fail(v_1115) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (v_1115,2-proj-3-tuple(v_1114),true,2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {613}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1125);
        {614}insert statestore(bob,charlie,sid,statepack_d(hs_1124,cs1_1127,cs2_1128))
    ) | (
        {616}!
        {635}get statestore(=bob,=charlie,=sid,statepack_d(hs_1129: handshakestate,cs1_1130: cipherstate,cs2_1131: cipherstate)) in
        {617}let hs_1132: handshakestate = handshakestatesetcs(hs_1129,cs2_1131) in
        {618}let v_1133: bitstring = catch-fail(handshakestateunpack(hs_1132)) in
        {619}let v_1134: bitstring = catch-fail((empty,empty,empty)) in
        {620}let v_1135: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1133))) in
        {621}let v_1136: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1135))) in
        {622}let v_1137: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1136),2-proj-2-tuple(v_1136),3-proj-3-tuple(v_1135),msg_d(bob,charlie,sid))) in
        {623}let v_1138: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1135))) in
        {624}let v_1139: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1136))) && success?(1-proj-3-tuple(v_1135))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-2-tuple(v_1138))))) then cipherstatepack(1-proj-2-tuple(v_1138),increment_nonce(2-proj-2-tuple(v_1136))) else fail-any) else fail-any)) in
        {625}let v_1140: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1135)) && success?(1-proj-3-tuple(v_1135))) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-2-tuple(v_1136))))) then (if not-caught-fail(v_1137) then (if not-caught-fail(v_1139) then (v_1139,v_1137) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1141: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1140),2-proj-3-tuple(v_1135),3-proj-3-tuple(v_1135)))) in
        {627}let v_1142: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1140)) && success?(symmetricstatepack(1-proj-2-tuple(v_1140),2-proj-3-tuple(v_1135),3-proj-3-tuple(v_1135)))) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-3-tuple(v_1141))))) then symmetricstatepack(1-proj-3-tuple(v_1141),2-proj-3-tuple(v_1141),hash(3-proj-3-tuple(v_1141),2-proj-2-tuple(v_1140))) else fail-any) else fail-any)) in
        {628}let v_1143: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1133)) then (if (not-caught-fail(v_1135) && success?(is-true(success?(1-proj-3-tuple(v_1135))))) then (if (not-caught-fail(v_1140) && success?(is-true(success?(1-proj-2-tuple(v_1140))))) then (if not-caught-fail(v_1142) then (v_1142,2-proj-2-tuple(v_1140)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {629}let v_1144: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1143),2-proj-7-tuple(v_1133),3-proj-7-tuple(v_1133),4-proj-7-tuple(v_1133),5-proj-7-tuple(v_1133),6-proj-7-tuple(v_1133),7-proj-7-tuple(v_1133))) in
        {630}let v_1145: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1134),2-proj-3-tuple(v_1134),2-proj-2-tuple(v_1143))) in
        {631}let (hs_1146: handshakestate,message_d_1147: bitstring) = (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-7-tuple(v_1133))))) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then (if (not-caught-fail(v_1143) && success?(is-true(success?(1-proj-2-tuple(v_1143))))) then (if not-caught-fail(v_1144) then (if not-caught-fail(v_1145) then (v_1144,v_1145) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {632}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {633}insert statestore(bob,charlie,sid,statepack_e(hs_1146,cs1_1130,handshakestategetcs(hs_1146)));
        {634}out(pub, message_d_1147)
    ) | (
        {636}!
        {656}get statestore(=bob,=charlie,=sid,statepack_e(hs_1148: handshakestate,cs1_1149: cipherstate,cs2_1150: cipherstate)) in
        {637}let hs_1151: handshakestate = handshakestatesetcs(hs_1148,cs1_1149) in
        {638}in(pub, message_e_1152: bitstring);
        {639}let v_1153: bitstring = catch-fail(handshakestateunpack(hs_1151)) in
        {640}let v_1154: bitstring = catch-fail(deconcat3(message_e_1152)) in
        {641}let v_1155: bool = catch-fail(true) in
        {642}let v_1156: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1153))) in
        {643}let v_1157: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1156))) in
        {644}let v_1158: aead = catch-fail(decrypt(1-proj-2-tuple(v_1157),2-proj-2-tuple(v_1157),3-proj-3-tuple(v_1156),3-proj-3-tuple(v_1154))) in
        {645}let v_1159: bitstring = catch-fail(aeadunpack(v_1158)) in
        {646}let v_1160: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1156))) in
        {647}let v_1161: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1157))) && success?(1-proj-3-tuple(v_1156))) then (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-2-tuple(v_1160))))) then cipherstatepack(1-proj-2-tuple(v_1160),increment_nonce(2-proj-2-tuple(v_1157))) else fail-any) else fail-any)) in
        {648}let v_1162: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && (success?(3-proj-3-tuple(v_1156)) && success?(1-proj-3-tuple(v_1156)))) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-2-tuple(v_1157))))) then (if not-caught-fail(v_1158) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-3-tuple(v_1159))))) then (if not-caught-fail(v_1161) then (v_1161,3-proj-3-tuple(v_1159),1-proj-3-tuple(v_1159)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {649}let v_1163: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1162),2-proj-3-tuple(v_1156),3-proj-3-tuple(v_1156)))) in
        {650}let v_1164: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && success?(symmetricstatepack(1-proj-3-tuple(v_1162),2-proj-3-tuple(v_1156),3-proj-3-tuple(v_1156)))) then (if (not-caught-fail(v_1163) && success?(is-true(success?(1-proj-3-tuple(v_1163))))) then symmetricstatepack(1-proj-3-tuple(v_1163),2-proj-3-tuple(v_1163),hash(3-proj-3-tuple(v_1163),3-proj-3-tuple(v_1154))) else fail-any) else fail-any)) in
        {651}let v_1165: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1154)) && success?(1-proj-7-tuple(v_1153))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-3-tuple(v_1162))))) then (if not-caught-fail(v_1164) then (v_1164,2-proj-3-tuple(v_1162),3-proj-3-tuple(v_1162)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {652}let v_1166: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1165),2-proj-7-tuple(v_1153),3-proj-7-tuple(v_1153),4-proj-7-tuple(v_1153),5-proj-7-tuple(v_1153),6-proj-7-tuple(v_1153),7-proj-7-tuple(v_1153))) in
        {653}let (hs_1167: handshakestate,plaintext_e_1168: bitstring,valid_1169: bool) = (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-7-tuple(v_1153))))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-3-tuple(v_1154))))) then (if not-caught-fail(v_1155) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then (if (v_1155 && 3-proj-3-tuple(v_1165)) then (if not-caught-fail(v_1166) then (v_1166,2-proj-3-tuple(v_1165),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {654}event RecvMsg(bob,charlie,stagepack_e(sid),plaintext_e_1168);
        {655}event RecvEnd(valid_1169)
    ) | (
        {657}event LeakS(phase0,bob);
        {658}out(pub, key_s(bob))
    ) | (
        {659}phase 1;
        {660}event LeakS(phase1,bob);
        {661}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1272,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1272,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob,sid_a)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 127 rules in the queue.
400 rules inserted. The rule base contains 385 rules. 77 rules in the queue.
600 rules inserted. The rule base contains 580 rules. 252 rules in the queue.
800 rules inserted. The rule base contains 770 rules. 244 rules in the queue.
1000 rules inserted. The rule base contains 926 rules. 308 rules in the queue.
1200 rules inserted. The rule base contains 1103 rules. 397 rules in the queue.
1400 rules inserted. The rule base contains 1297 rules. 507 rules in the queue.
1600 rules inserted. The rule base contains 1446 rules. 547 rules in the queue.
1800 rules inserted. The rule base contains 1592 rules. 591 rules in the queue.
2000 rules inserted. The rule base contains 1747 rules. 625 rules in the queue.
2200 rules inserted. The rule base contains 1933 rules. 682 rules in the queue.
2400 rules inserted. The rule base contains 2120 rules. 745 rules in the queue.
2600 rules inserted. The rule base contains 2305 rules. 782 rules in the queue.
2800 rules inserted. The rule base contains 2444 rules. 787 rules in the queue.
