File "K1K.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 234, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 235, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 235, character 36:
Warning: identifier h rebound.
File "K1K.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 278, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 279, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 283, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 283, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 284, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 291, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 337, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 345, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 349, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 351, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 371, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 373, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 383, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 558, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 549, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 551, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 371, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 373, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 542, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 535, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 345, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 349, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 351, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 527, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 278, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 279, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 282, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 283, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 283, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 284, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 617, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 619, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 383, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 609, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 610, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 602, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 594, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 291, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 244, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 245, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 587, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 337, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 225, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 251, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_534: key = catch-fail(dhexp(key_s(alice),g)) in
    {5}let s_535: keypair = (if not-caught-fail(v_534) then keypairpack(v_534,key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_535));
    (
        {7}let e_536: keypair = keypairpack(empty,empty) in
        {8}let v_537: key = catch-fail(dhexp(key_s(bob),g)) in
        {9}let rs_538: key = getpublickey((if not-caught-fail(v_537) then keypairpack(v_537,key_s(bob)) else fail-any)) in
        {10}let re_539: key = empty in
        {11}let v_540: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_541: key = catch-fail(v_540) in
        {13}let v_542: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_543: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then symmetricstatepack(v_542,v_541,v_540) else fail-any) else fail-any) else fail-any))) in
        {15}let v_544: symmetricstate = catch-fail((if success?((if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then symmetricstatepack(v_542,v_541,v_540) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then symmetricstatepack(1-proj-3-tuple(v_543),2-proj-3-tuple(v_543),hash(3-proj-3-tuple(v_543),empty)) else fail-any) else fail-any)) in
        {16}let v_545: bitstring = catch-fail(symmetricstateunpack(v_544)) in
        {17}let v_546: symmetricstate = catch-fail((if success?(getpublickey(s_535)) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then symmetricstatepack(1-proj-3-tuple(v_545),2-proj-3-tuple(v_545),hash(3-proj-3-tuple(v_545),getpublickey(s_535))) else fail-any) else fail-any)) in
        {18}let v_547: bitstring = catch-fail(symmetricstateunpack(v_546)) in
        {19}let v_548: symmetricstate = catch-fail((if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),rs_538)) else fail-any)) in
        {20}let hs: handshakestate = (if not-caught-fail(v_544) then (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then handshakestatepack(v_548,s_535,e_536,rs_538,re_539,empty,true) else fail-any) else fail-any) else fail-any) in
        {21}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {51}get statestore(=alice,=bob,=sid,statepack_a(hs_549: handshakestate)) in
        {22}let v_550: bitstring = catch-fail(handshakestateunpack(hs_549)) in
        {23}let v_551: bitstring = catch-fail((empty,empty,empty)) in
        {24}let v_552: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {25}let v_553: keypair = catch-fail((if not-caught-fail(v_552) then keypairpack(v_552,key_e(alice,bob,sid)) else fail-any)) in
        {26}let v_554: bitstring = catch-fail(getpublickey(v_553)) in
        {27}let v_555: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_550))) in
        {28}let v_556: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_550)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_555),hash(3-proj-3-tuple(v_555),v_554)) else fail-any) else fail-any)) in
        {29}let v_557: bitstring = catch-fail(keypairunpack(v_553)) in
        {30}let v_558: bitstring = catch-fail(symmetricstateunpack(v_556)) in
        {31}let v_559: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_558),(if success?(4-proj-7-tuple(v_550)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_550)) else fail-any) else fail-any))) in
        {32}let v_560: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_558),(if success?(4-proj-7-tuple(v_550)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_550)) else fail-any) else fail-any))) in
        {33}let v_561: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_558),(if success?(4-proj-7-tuple(v_550)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_550)) else fail-any) else fail-any))) in
        {34}let v_562: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_550)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_550)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_558))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (v_559,v_560,v_561) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {35}let v_563: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_550)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),4-proj-7-tuple(v_550)) else fail-any) else fail-any)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_562)) then cipherstatepack(2-proj-3-tuple(v_562),minnonce) else fail-any),1-proj-3-tuple(v_562),3-proj-3-tuple(v_558)) else fail-any) else fail-any) else fail-any)) in
        {36}let v_564: bitstring = catch-fail(symmetricstateunpack(v_563)) in
        {37}let v_565: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {38}let v_566: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_565),2-proj-2-tuple(v_565),3-proj-3-tuple(v_564),msg_a(alice,bob,sid))) in
        {39}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {40}let v_568: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_565))) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then cipherstatepack(1-proj-2-tuple(v_567),increment_nonce(2-proj-2-tuple(v_565))) else fail-any) else fail-any)) in
        {41}let v_569: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-2-tuple(v_565))))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then (v_568,v_566) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_570: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_569),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) in
        {43}let v_571: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_569)) && success?(symmetricstatepack(1-proj-2-tuple(v_569),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_570),hash(3-proj-3-tuple(v_570),2-proj-2-tuple(v_569))) else fail-any) else fail-any)) in
        {44}let v_572: bitstring = catch-fail((if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,2-proj-2-tuple(v_569)) else fail-any) else fail-any) else fail-any)) in
        {45}let v_573: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_572),2-proj-7-tuple(v_550),v_553,4-proj-7-tuple(v_550),5-proj-7-tuple(v_550),6-proj-7-tuple(v_550),7-proj-7-tuple(v_550))) in
        {46}let v_574: bitstring = catch-fail(concat3(v_554,2-proj-3-tuple(v_551),2-proj-2-tuple(v_572))) in
        {47}let (hs_575: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-7-tuple(v_550))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (if not-caught-fail(v_556) then (if not-caught-fail(v_563) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_573) then (if not-caught-fail(v_574) then (v_573,v_574) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {48}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {49}insert statestore(alice,bob,sid,statepack_b(hs_575));
        {50}out(pub, message_a)
    ) | (
        {80}get statestore(=alice,=bob,=sid,statepack_b(hs_576: handshakestate)) in
        {52}in(pub, message_b: bitstring);
        {53}let v_577: bitstring = catch-fail(handshakestateunpack(hs_576)) in
        {54}let v_578: bitstring = catch-fail(deconcat3(message_b)) in
        {55}let v_579: bool = catch-fail(true) in
        {56}let v_580: key = catch-fail(1-proj-3-tuple(v_578)) in
        {57}let v_581: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_577))) in
        {58}let v_582: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_577)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),hash(3-proj-3-tuple(v_581),v_580)) else fail-any) else fail-any)) in
        {59}let v_583: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_577))) in
        {60}let v_584: bitstring = catch-fail(symmetricstateunpack(v_582)) in
        {61}let v_585: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_584),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any))) in
        {62}let v_586: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_584),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any))) in
        {63}let v_587: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_584),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any))) in
        {64}let v_588: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_584))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (v_585,v_586,v_587) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_589: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_588)) then cipherstatepack(2-proj-3-tuple(v_588),minnonce) else fail-any),1-proj-3-tuple(v_588),3-proj-3-tuple(v_584)) else fail-any) else fail-any) else fail-any)) in
        {66}let v_590: bitstring = catch-fail(symmetricstateunpack(v_589)) in
        {67}let v_591: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_590))) in
        {68}let v_592: aead = catch-fail(decrypt(1-proj-2-tuple(v_591),2-proj-2-tuple(v_591),3-proj-3-tuple(v_590),3-proj-3-tuple(v_578))) in
        {69}let v_593: bitstring = catch-fail(aeadunpack(v_592)) in
        {70}let v_594: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_590))) in
        {71}let v_595: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_591))) && success?(1-proj-3-tuple(v_590))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then cipherstatepack(1-proj-2-tuple(v_594),increment_nonce(2-proj-2-tuple(v_591))) else fail-any) else fail-any)) in
        {72}let v_596: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_578)) && (success?(3-proj-3-tuple(v_590)) && success?(1-proj-3-tuple(v_590)))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then (if not-caught-fail(v_592) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if not-caught-fail(v_595) then (v_595,3-proj-3-tuple(v_593),1-proj-3-tuple(v_593)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_597: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_590),3-proj-3-tuple(v_590)))) in
        {74}let v_598: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_578)) && success?(symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_590),3-proj-3-tuple(v_590)))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_597),hash(3-proj-3-tuple(v_597),3-proj-3-tuple(v_578))) else fail-any) else fail-any)) in
        {75}let v_599: bitstring = catch-fail((if success?(3-proj-3-tuple(v_578)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if not-caught-fail(v_598) then (v_598,2-proj-3-tuple(v_596),3-proj-3-tuple(v_596)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_600: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_599),2-proj-7-tuple(v_577),3-proj-7-tuple(v_577),4-proj-7-tuple(v_577),v_580,6-proj-7-tuple(v_577),7-proj-7-tuple(v_577))) in
        {77}let (hs_601: handshakestate,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-7-tuple(v_577))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_582) then (if not-caught-fail(v_589) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (v_579 && 3-proj-3-tuple(v_599)) then (if not-caught-fail(v_600) then (v_600,2-proj-3-tuple(v_599),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {78}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {79}insert statestore(alice,bob,sid,statepack_c(hs_601))
    ) | (
        {113}get statestore(=alice,=bob,=sid,statepack_c(hs_602: handshakestate)) in
        {81}let v_603: bitstring = catch-fail(handshakestateunpack(hs_602)) in
        {82}let v_604: bitstring = catch-fail((empty,empty,empty)) in
        {83}let v_605: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_603))) in
        {84}let v_606: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_603))) in
        {85}let v_607: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_606),(if (success?(5-proj-7-tuple(v_603)) && success?(2-proj-7-tuple(v_603))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),5-proj-7-tuple(v_603)) else fail-any) else fail-any))) in
        {86}let v_608: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_606),(if (success?(5-proj-7-tuple(v_603)) && success?(2-proj-7-tuple(v_603))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),5-proj-7-tuple(v_603)) else fail-any) else fail-any))) in
        {87}let v_609: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_606),(if (success?(5-proj-7-tuple(v_603)) && success?(2-proj-7-tuple(v_603))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),5-proj-7-tuple(v_603)) else fail-any) else fail-any))) in
        {88}let v_610: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_603)) && success?(2-proj-7-tuple(v_603))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),5-proj-7-tuple(v_603)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_606))) then (if not-caught-fail(v_607) then (if not-caught-fail(v_608) then (if not-caught-fail(v_609) then (v_607,v_608,v_609) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_611: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_603)) && success?(2-proj-7-tuple(v_603))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),5-proj-7-tuple(v_603)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_603))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_610)) then cipherstatepack(2-proj-3-tuple(v_610),minnonce) else fail-any),1-proj-3-tuple(v_610),3-proj-3-tuple(v_606)) else fail-any) else fail-any) else fail-any)) in
        {90}let v_612: bitstring = catch-fail(symmetricstateunpack(v_611)) in
        {91}let v_613: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_612))) in
        {92}let v_614: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_613),2-proj-2-tuple(v_613),3-proj-3-tuple(v_612),msg_c(alice,bob,sid))) in
        {93}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_612))) in
        {94}let v_616: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_613))) && success?(1-proj-3-tuple(v_612))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then cipherstatepack(1-proj-2-tuple(v_615),increment_nonce(2-proj-2-tuple(v_613))) else fail-any) else fail-any)) in
        {95}let v_617: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_612)) && success?(1-proj-3-tuple(v_612))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then (if not-caught-fail(v_614) then (if not-caught-fail(v_616) then (v_616,v_614) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let v_618: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_617),2-proj-3-tuple(v_612),3-proj-3-tuple(v_612)))) in
        {97}let v_619: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_617)) && success?(symmetricstatepack(1-proj-2-tuple(v_617),2-proj-3-tuple(v_612),3-proj-3-tuple(v_612)))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),hash(3-proj-3-tuple(v_618),2-proj-2-tuple(v_617))) else fail-any) else fail-any)) in
        {98}let v_620: bitstring = catch-fail((if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then (if not-caught-fail(v_619) then (v_619,2-proj-2-tuple(v_617)) else fail-any) else fail-any) else fail-any)) in
        {99}let v_621: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_620),2-proj-7-tuple(v_603),3-proj-7-tuple(v_603),4-proj-7-tuple(v_603),5-proj-7-tuple(v_603),6-proj-7-tuple(v_603),7-proj-7-tuple(v_603))) in
        {100}let v_622: bitstring = catch-fail(concat3(1-proj-3-tuple(v_604),2-proj-3-tuple(v_604),2-proj-2-tuple(v_620))) in
        {101}let v_623: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_620))) in
        {102}let v_624: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_623),zero)) in
        {103}let v_625: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_623),zero)) in
        {104}let v_626: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_623),zero)) in
        {105}let v_627: bitstring = catch-fail((if success?(2-proj-3-tuple(v_623)) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (v_624,v_625,v_626) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {106}let v_628: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_627)) then cipherstatepack(1-proj-3-tuple(v_627),minnonce) else fail-any)) in
        {107}let v_629: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_627)) then cipherstatepack(2-proj-3-tuple(v_627),minnonce) else fail-any)) in
        {108}let v_630: bitstring = catch-fail((if success?(1-proj-2-tuple(v_620)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (1-proj-2-tuple(v_620),v_628,v_629) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {109}let (hs_631: handshakestate,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-7-tuple(v_603))))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if not-caught-fail(v_611) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (v_621,v_622,2-proj-3-tuple(v_630),3-proj-3-tuple(v_630)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {110}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {111}insert statestore(alice,bob,sid,statepack_d(hs_631,cs1,cs2));
        {112}out(pub, message_c)
    ) | (
        {114}!
        {134}get statestore(=alice,=bob,=sid,statepack_d(hs_632: handshakestate,cs1_633: cipherstate,cs2_634: cipherstate)) in
        {115}let hs_635: handshakestate = handshakestatesetcs(hs_632,cs2_634) in
        {116}in(pub, message_d: bitstring);
        {117}let v_636: bitstring = catch-fail(handshakestateunpack(hs_635)) in
        {118}let v_637: bitstring = catch-fail(deconcat3(message_d)) in
        {119}let v_638: bool = catch-fail(true) in
        {120}let v_639: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_636))) in
        {121}let v_640: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_639))) in
        {122}let v_641: aead = catch-fail(decrypt(1-proj-2-tuple(v_640),2-proj-2-tuple(v_640),3-proj-3-tuple(v_639),3-proj-3-tuple(v_637))) in
        {123}let v_642: bitstring = catch-fail(aeadunpack(v_641)) in
        {124}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_639))) in
        {125}let v_644: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_640))) && success?(1-proj-3-tuple(v_639))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then cipherstatepack(1-proj-2-tuple(v_643),increment_nonce(2-proj-2-tuple(v_640))) else fail-any) else fail-any)) in
        {126}let v_645: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_637)) && (success?(3-proj-3-tuple(v_639)) && success?(1-proj-3-tuple(v_639)))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then (if not-caught-fail(v_641) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if not-caught-fail(v_644) then (v_644,3-proj-3-tuple(v_642),1-proj-3-tuple(v_642)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_646: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_645),2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)))) in
        {128}let v_647: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_637)) && success?(symmetricstatepack(1-proj-3-tuple(v_645),2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_646),hash(3-proj-3-tuple(v_646),3-proj-3-tuple(v_637))) else fail-any) else fail-any)) in
        {129}let v_648: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_637)) && success?(1-proj-7-tuple(v_636))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then (if not-caught-fail(v_647) then (v_647,2-proj-3-tuple(v_645),3-proj-3-tuple(v_645)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {130}let v_649: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_648),2-proj-7-tuple(v_636),3-proj-7-tuple(v_636),4-proj-7-tuple(v_636),5-proj-7-tuple(v_636),6-proj-7-tuple(v_636),7-proj-7-tuple(v_636))) in
        {131}let (hs_650: handshakestate,plaintext_d: bitstring,valid_651: bool) = (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-7-tuple(v_636))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_638) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if (v_638 && 3-proj-3-tuple(v_648)) then (if not-caught-fail(v_649) then (v_649,2-proj-3-tuple(v_648),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {132}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {133}insert statestore(alice,bob,sid,statepack_e(hs_650,cs1_633,handshakestategetcs(hs_650)))
    ) | (
        {135}!
        {153}get statestore(=alice,=bob,=sid,statepack_e(hs_652: handshakestate,cs1_653: cipherstate,cs2_654: cipherstate)) in
        {136}let hs_655: handshakestate = handshakestatesetcs(hs_652,cs1_653) in
        {137}let v_656: bitstring = catch-fail(handshakestateunpack(hs_655)) in
        {138}let v_657: bitstring = catch-fail((empty,empty,empty)) in
        {139}let v_658: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_656))) in
        {140}let v_659: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_658))) in
        {141}let v_660: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_659),2-proj-2-tuple(v_659),3-proj-3-tuple(v_658),msg_e(alice,bob,sid))) in
        {142}let v_661: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_658))) in
        {143}let v_662: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_659))) && success?(1-proj-3-tuple(v_658))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then cipherstatepack(1-proj-2-tuple(v_661),increment_nonce(2-proj-2-tuple(v_659))) else fail-any) else fail-any)) in
        {144}let v_663: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_658)) && success?(1-proj-3-tuple(v_658))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_660) then (if not-caught-fail(v_662) then (v_662,v_660) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {145}let v_664: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_663),2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)))) in
        {146}let v_665: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_663)) && success?(symmetricstatepack(1-proj-2-tuple(v_663),2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then symmetricstatepack(1-proj-3-tuple(v_664),2-proj-3-tuple(v_664),hash(3-proj-3-tuple(v_664),2-proj-2-tuple(v_663))) else fail-any) else fail-any)) in
        {147}let v_666: bitstring = catch-fail((if success?(1-proj-7-tuple(v_656)) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then (if not-caught-fail(v_665) then (v_665,2-proj-2-tuple(v_663)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {148}let v_667: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_666),2-proj-7-tuple(v_656),3-proj-7-tuple(v_656),4-proj-7-tuple(v_656),5-proj-7-tuple(v_656),6-proj-7-tuple(v_656),7-proj-7-tuple(v_656))) in
        {149}let v_668: bitstring = catch-fail(concat3(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),2-proj-2-tuple(v_666))) in
        {150}let (hs_669: handshakestate,message_e: bitstring) = (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-7-tuple(v_656))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (v_667,v_668) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {151}event SendMsg(alice,bob,stagepack_e(sid),msg_e(alice,bob,sid));
        {152}out(pub, message_e)
    ) | (
        {154}event LeakS(phase0,alice);
        {155}out(pub, key_s(alice))
    ) | (
        {156}phase 1;
        {157}event LeakS(phase1,alice);
        {158}out(pub, key_s(alice))
    )
) | (
    {159}let v_670: key = catch-fail(dhexp(key_s(alice),g)) in
    {160}let s_671: keypair = (if not-caught-fail(v_670) then keypairpack(v_670,key_s(alice)) else fail-any) in
    {161}out(pub, getpublickey(s_671));
    (
        {162}let e_672: keypair = keypairpack(empty,empty) in
        {163}let v_673: key = catch-fail(dhexp(key_s(charlie),g)) in
        {164}let rs_674: key = getpublickey((if not-caught-fail(v_673) then keypairpack(v_673,key_s(charlie)) else fail-any)) in
        {165}let re_675: key = empty in
        {166}let v_676: bitstring = catch-fail(hash(somename,empty)) in
        {167}let v_677: key = catch-fail(v_676) in
        {168}let v_678: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {169}let v_679: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_676) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then symmetricstatepack(v_678,v_677,v_676) else fail-any) else fail-any) else fail-any))) in
        {170}let v_680: symmetricstate = catch-fail((if success?((if not-caught-fail(v_676) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then symmetricstatepack(v_678,v_677,v_676) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then symmetricstatepack(1-proj-3-tuple(v_679),2-proj-3-tuple(v_679),hash(3-proj-3-tuple(v_679),empty)) else fail-any) else fail-any)) in
        {171}let v_681: bitstring = catch-fail(symmetricstateunpack(v_680)) in
        {172}let v_682: symmetricstate = catch-fail((if success?(getpublickey(s_671)) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_681),hash(3-proj-3-tuple(v_681),getpublickey(s_671))) else fail-any) else fail-any)) in
        {173}let v_683: bitstring = catch-fail(symmetricstateunpack(v_682)) in
        {174}let v_684: symmetricstate = catch-fail((if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_683),hash(3-proj-3-tuple(v_683),rs_674)) else fail-any)) in
        {175}let hs_685: handshakestate = (if not-caught-fail(v_680) then (if not-caught-fail(v_682) then (if not-caught-fail(v_684) then handshakestatepack(v_684,s_671,e_672,rs_674,re_675,empty,true) else fail-any) else fail-any) else fail-any) in
        {176}insert statestore(alice,charlie,sid,statepack_a(hs_685))
    ) | (
        {206}get statestore(=alice,=charlie,=sid,statepack_a(hs_686: handshakestate)) in
        {177}let v_687: bitstring = catch-fail(handshakestateunpack(hs_686)) in
        {178}let v_688: bitstring = catch-fail((empty,empty,empty)) in
        {179}let v_689: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {180}let v_690: keypair = catch-fail((if not-caught-fail(v_689) then keypairpack(v_689,key_e(alice,charlie,sid)) else fail-any)) in
        {181}let v_691: bitstring = catch-fail(getpublickey(v_690)) in
        {182}let v_692: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_687))) in
        {183}let v_693: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_687)) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then symmetricstatepack(1-proj-3-tuple(v_692),2-proj-3-tuple(v_692),hash(3-proj-3-tuple(v_692),v_691)) else fail-any) else fail-any)) in
        {184}let v_694: bitstring = catch-fail(keypairunpack(v_690)) in
        {185}let v_695: bitstring = catch-fail(symmetricstateunpack(v_693)) in
        {186}let v_696: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_695),(if success?(4-proj-7-tuple(v_687)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then dhexp(2-proj-2-tuple(v_694),4-proj-7-tuple(v_687)) else fail-any) else fail-any))) in
        {187}let v_697: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_695),(if success?(4-proj-7-tuple(v_687)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then dhexp(2-proj-2-tuple(v_694),4-proj-7-tuple(v_687)) else fail-any) else fail-any))) in
        {188}let v_698: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_695),(if success?(4-proj-7-tuple(v_687)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then dhexp(2-proj-2-tuple(v_694),4-proj-7-tuple(v_687)) else fail-any) else fail-any))) in
        {189}let v_699: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_687)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then dhexp(2-proj-2-tuple(v_694),4-proj-7-tuple(v_687)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_695))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (v_696,v_697,v_698) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_700: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_687)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then dhexp(2-proj-2-tuple(v_694),4-proj-7-tuple(v_687)) else fail-any) else fail-any)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_699)) then cipherstatepack(2-proj-3-tuple(v_699),minnonce) else fail-any),1-proj-3-tuple(v_699),3-proj-3-tuple(v_695)) else fail-any) else fail-any) else fail-any)) in
        {191}let v_701: bitstring = catch-fail(symmetricstateunpack(v_700)) in
        {192}let v_702: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_701))) in
        {193}let v_703: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_702),2-proj-2-tuple(v_702),3-proj-3-tuple(v_701),msg_a(alice,charlie,sid))) in
        {194}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_701))) in
        {195}let v_705: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_702))) && success?(1-proj-3-tuple(v_701))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then cipherstatepack(1-proj-2-tuple(v_704),increment_nonce(2-proj-2-tuple(v_702))) else fail-any) else fail-any)) in
        {196}let v_706: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_701)) && success?(1-proj-3-tuple(v_701))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-2-tuple(v_702))))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_705) then (v_705,v_703) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_707: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_706),2-proj-3-tuple(v_701),3-proj-3-tuple(v_701)))) in
        {198}let v_708: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_706)) && success?(symmetricstatepack(1-proj-2-tuple(v_706),2-proj-3-tuple(v_701),3-proj-3-tuple(v_701)))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then symmetricstatepack(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),hash(3-proj-3-tuple(v_707),2-proj-2-tuple(v_706))) else fail-any) else fail-any)) in
        {199}let v_709: bitstring = catch-fail((if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then (if not-caught-fail(v_708) then (v_708,2-proj-2-tuple(v_706)) else fail-any) else fail-any) else fail-any)) in
        {200}let v_710: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_709),2-proj-7-tuple(v_687),v_690,4-proj-7-tuple(v_687),5-proj-7-tuple(v_687),6-proj-7-tuple(v_687),7-proj-7-tuple(v_687))) in
        {201}let v_711: bitstring = catch-fail(concat3(v_691,2-proj-3-tuple(v_688),2-proj-2-tuple(v_709))) in
        {202}let (hs_712: handshakestate,message_a_713: bitstring) = (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-7-tuple(v_687))))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (if not-caught-fail(v_693) then (if not-caught-fail(v_700) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-2-tuple(v_709))))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (v_710,v_711) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {203}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {204}insert statestore(alice,charlie,sid,statepack_b(hs_712));
        {205}out(pub, message_a_713)
    ) | (
        {235}get statestore(=alice,=charlie,=sid,statepack_b(hs_714: handshakestate)) in
        {207}in(pub, message_b_715: bitstring);
        {208}let v_716: bitstring = catch-fail(handshakestateunpack(hs_714)) in
        {209}let v_717: bitstring = catch-fail(deconcat3(message_b_715)) in
        {210}let v_718: bool = catch-fail(true) in
        {211}let v_719: key = catch-fail(1-proj-3-tuple(v_717)) in
        {212}let v_720: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_716))) in
        {213}let v_721: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_716)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then symmetricstatepack(1-proj-3-tuple(v_720),2-proj-3-tuple(v_720),hash(3-proj-3-tuple(v_720),v_719)) else fail-any) else fail-any)) in
        {214}let v_722: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_716))) in
        {215}let v_723: bitstring = catch-fail(symmetricstateunpack(v_721)) in
        {216}let v_724: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_723),(if success?(3-proj-7-tuple(v_716)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),v_719) else fail-any) else fail-any))) in
        {217}let v_725: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_723),(if success?(3-proj-7-tuple(v_716)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),v_719) else fail-any) else fail-any))) in
        {218}let v_726: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_723),(if success?(3-proj-7-tuple(v_716)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),v_719) else fail-any) else fail-any))) in
        {219}let v_727: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_716)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),v_719) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_723))) then (if not-caught-fail(v_724) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (v_724,v_725,v_726) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {220}let v_728: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_716)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),v_719) else fail-any) else fail-any)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_727)) then cipherstatepack(2-proj-3-tuple(v_727),minnonce) else fail-any),1-proj-3-tuple(v_727),3-proj-3-tuple(v_723)) else fail-any) else fail-any) else fail-any)) in
        {221}let v_729: bitstring = catch-fail(symmetricstateunpack(v_728)) in
        {222}let v_730: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_729))) in
        {223}let v_731: aead = catch-fail(decrypt(1-proj-2-tuple(v_730),2-proj-2-tuple(v_730),3-proj-3-tuple(v_729),3-proj-3-tuple(v_717))) in
        {224}let v_732: bitstring = catch-fail(aeadunpack(v_731)) in
        {225}let v_733: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_729))) in
        {226}let v_734: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_730))) && success?(1-proj-3-tuple(v_729))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then cipherstatepack(1-proj-2-tuple(v_733),increment_nonce(2-proj-2-tuple(v_730))) else fail-any) else fail-any)) in
        {227}let v_735: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_717)) && (success?(3-proj-3-tuple(v_729)) && success?(1-proj-3-tuple(v_729)))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then (if not-caught-fail(v_731) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if not-caught-fail(v_734) then (v_734,3-proj-3-tuple(v_732),1-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_736: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_735),2-proj-3-tuple(v_729),3-proj-3-tuple(v_729)))) in
        {229}let v_737: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_717)) && success?(symmetricstatepack(1-proj-3-tuple(v_735),2-proj-3-tuple(v_729),3-proj-3-tuple(v_729)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_736),hash(3-proj-3-tuple(v_736),3-proj-3-tuple(v_717))) else fail-any) else fail-any)) in
        {230}let v_738: bitstring = catch-fail((if success?(3-proj-3-tuple(v_717)) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if not-caught-fail(v_737) then (v_737,2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {231}let v_739: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_738),2-proj-7-tuple(v_716),3-proj-7-tuple(v_716),4-proj-7-tuple(v_716),v_719,6-proj-7-tuple(v_716),7-proj-7-tuple(v_716))) in
        {232}let (hs_740: handshakestate,plaintext_b_741: bitstring,valid_742: bool) = (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-7-tuple(v_716))))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then (if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (if not-caught-fail(v_721) then (if not-caught-fail(v_728) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (v_718 && 3-proj-3-tuple(v_738)) then (if not-caught-fail(v_739) then (v_739,2-proj-3-tuple(v_738),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {233}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_741);
        {234}insert statestore(alice,charlie,sid,statepack_c(hs_740))
    ) | (
        {268}get statestore(=alice,=charlie,=sid,statepack_c(hs_743: handshakestate)) in
        {236}let v_744: bitstring = catch-fail(handshakestateunpack(hs_743)) in
        {237}let v_745: bitstring = catch-fail((empty,empty,empty)) in
        {238}let v_746: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_744))) in
        {239}let v_747: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_744))) in
        {240}let v_748: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_747),(if (success?(5-proj-7-tuple(v_744)) && success?(2-proj-7-tuple(v_744))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),5-proj-7-tuple(v_744)) else fail-any) else fail-any))) in
        {241}let v_749: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_747),(if (success?(5-proj-7-tuple(v_744)) && success?(2-proj-7-tuple(v_744))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),5-proj-7-tuple(v_744)) else fail-any) else fail-any))) in
        {242}let v_750: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_747),(if (success?(5-proj-7-tuple(v_744)) && success?(2-proj-7-tuple(v_744))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),5-proj-7-tuple(v_744)) else fail-any) else fail-any))) in
        {243}let v_751: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_744)) && success?(2-proj-7-tuple(v_744))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),5-proj-7-tuple(v_744)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_747))) then (if not-caught-fail(v_748) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (v_748,v_749,v_750) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_752: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_744)) && success?(2-proj-7-tuple(v_744))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then dhexp(2-proj-2-tuple(v_746),5-proj-7-tuple(v_744)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_744))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_751)) then cipherstatepack(2-proj-3-tuple(v_751),minnonce) else fail-any),1-proj-3-tuple(v_751),3-proj-3-tuple(v_747)) else fail-any) else fail-any) else fail-any)) in
        {245}let v_753: bitstring = catch-fail(symmetricstateunpack(v_752)) in
        {246}let v_754: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_753))) in
        {247}let v_755: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_754),2-proj-2-tuple(v_754),3-proj-3-tuple(v_753),msg_c(alice,charlie,sid))) in
        {248}let v_756: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_753))) in
        {249}let v_757: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_754))) && success?(1-proj-3-tuple(v_753))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then cipherstatepack(1-proj-2-tuple(v_756),increment_nonce(2-proj-2-tuple(v_754))) else fail-any) else fail-any)) in
        {250}let v_758: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_753)) && success?(1-proj-3-tuple(v_753))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then (if not-caught-fail(v_755) then (if not-caught-fail(v_757) then (v_757,v_755) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_759: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_758),2-proj-3-tuple(v_753),3-proj-3-tuple(v_753)))) in
        {252}let v_760: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_758)) && success?(symmetricstatepack(1-proj-2-tuple(v_758),2-proj-3-tuple(v_753),3-proj-3-tuple(v_753)))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then symmetricstatepack(1-proj-3-tuple(v_759),2-proj-3-tuple(v_759),hash(3-proj-3-tuple(v_759),2-proj-2-tuple(v_758))) else fail-any) else fail-any)) in
        {253}let v_761: bitstring = catch-fail((if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then (if not-caught-fail(v_760) then (v_760,2-proj-2-tuple(v_758)) else fail-any) else fail-any) else fail-any)) in
        {254}let v_762: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_761),2-proj-7-tuple(v_744),3-proj-7-tuple(v_744),4-proj-7-tuple(v_744),5-proj-7-tuple(v_744),6-proj-7-tuple(v_744),7-proj-7-tuple(v_744))) in
        {255}let v_763: bitstring = catch-fail(concat3(1-proj-3-tuple(v_745),2-proj-3-tuple(v_745),2-proj-2-tuple(v_761))) in
        {256}let v_764: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_761))) in
        {257}let v_765: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_764),zero)) in
        {258}let v_766: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_764),zero)) in
        {259}let v_767: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_764),zero)) in
        {260}let v_768: bitstring = catch-fail((if success?(2-proj-3-tuple(v_764)) then (if not-caught-fail(v_765) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (v_765,v_766,v_767) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_769: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_768)) then cipherstatepack(1-proj-3-tuple(v_768),minnonce) else fail-any)) in
        {262}let v_770: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_768)) then cipherstatepack(2-proj-3-tuple(v_768),minnonce) else fail-any)) in
        {263}let v_771: bitstring = catch-fail((if success?(1-proj-2-tuple(v_761)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (1-proj-2-tuple(v_761),v_769,v_770) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {264}let (hs_772: handshakestate,message_c_773: bitstring,cs1_774: cipherstate,cs2_775: cipherstate) = (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-7-tuple(v_744))))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (if not-caught-fail(v_752) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (v_762,v_763,2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {265}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {266}insert statestore(alice,charlie,sid,statepack_d(hs_772,cs1_774,cs2_775));
        {267}out(pub, message_c_773)
    ) | (
        {269}!
        {289}get statestore(=alice,=charlie,=sid,statepack_d(hs_776: handshakestate,cs1_777: cipherstate,cs2_778: cipherstate)) in
        {270}let hs_779: handshakestate = handshakestatesetcs(hs_776,cs2_778) in
        {271}in(pub, message_d_780: bitstring);
        {272}let v_781: bitstring = catch-fail(handshakestateunpack(hs_779)) in
        {273}let v_782: bitstring = catch-fail(deconcat3(message_d_780)) in
        {274}let v_783: bool = catch-fail(true) in
        {275}let v_784: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_781))) in
        {276}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {277}let v_786: aead = catch-fail(decrypt(1-proj-2-tuple(v_785),2-proj-2-tuple(v_785),3-proj-3-tuple(v_784),3-proj-3-tuple(v_782))) in
        {278}let v_787: bitstring = catch-fail(aeadunpack(v_786)) in
        {279}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {280}let v_789: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_785))) && success?(1-proj-3-tuple(v_784))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then cipherstatepack(1-proj-2-tuple(v_788),increment_nonce(2-proj-2-tuple(v_785))) else fail-any) else fail-any)) in
        {281}let v_790: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && (success?(3-proj-3-tuple(v_784)) && success?(1-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_789) then (v_789,3-proj-3-tuple(v_787),1-proj-3-tuple(v_787)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {282}let v_791: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) in
        {283}let v_792: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_791),hash(3-proj-3-tuple(v_791),3-proj-3-tuple(v_782))) else fail-any) else fail-any)) in
        {284}let v_793: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(1-proj-7-tuple(v_781))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_792) then (v_792,2-proj-3-tuple(v_790),3-proj-3-tuple(v_790)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {285}let v_794: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_793),2-proj-7-tuple(v_781),3-proj-7-tuple(v_781),4-proj-7-tuple(v_781),5-proj-7-tuple(v_781),6-proj-7-tuple(v_781),7-proj-7-tuple(v_781))) in
        {286}let (hs_795: handshakestate,plaintext_d_796: bitstring,valid_797: bool) = (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-7-tuple(v_781))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_783) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if (v_783 && 3-proj-3-tuple(v_793)) then (if not-caught-fail(v_794) then (v_794,2-proj-3-tuple(v_793),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {287}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_796);
        {288}insert statestore(alice,charlie,sid,statepack_e(hs_795,cs1_777,handshakestategetcs(hs_795)))
    ) | (
        {290}!
        {308}get statestore(=alice,=charlie,=sid,statepack_e(hs_798: handshakestate,cs1_799: cipherstate,cs2_800: cipherstate)) in
        {291}let hs_801: handshakestate = handshakestatesetcs(hs_798,cs1_799) in
        {292}let v_802: bitstring = catch-fail(handshakestateunpack(hs_801)) in
        {293}let v_803: bitstring = catch-fail((empty,empty,empty)) in
        {294}let v_804: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_802))) in
        {295}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_804))) in
        {296}let v_806: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_805),2-proj-2-tuple(v_805),3-proj-3-tuple(v_804),msg_e(alice,charlie,sid))) in
        {297}let v_807: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_804))) in
        {298}let v_808: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_805))) && success?(1-proj-3-tuple(v_804))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then cipherstatepack(1-proj-2-tuple(v_807),increment_nonce(2-proj-2-tuple(v_805))) else fail-any) else fail-any)) in
        {299}let v_809: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_804)) && success?(1-proj-3-tuple(v_804))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then (if not-caught-fail(v_806) then (if not-caught-fail(v_808) then (v_808,v_806) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_810: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_809),2-proj-3-tuple(v_804),3-proj-3-tuple(v_804)))) in
        {301}let v_811: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_809)) && success?(symmetricstatepack(1-proj-2-tuple(v_809),2-proj-3-tuple(v_804),3-proj-3-tuple(v_804)))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),2-proj-2-tuple(v_809))) else fail-any) else fail-any)) in
        {302}let v_812: bitstring = catch-fail((if success?(1-proj-7-tuple(v_802)) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_811) then (v_811,2-proj-2-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_813: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_812),2-proj-7-tuple(v_802),3-proj-7-tuple(v_802),4-proj-7-tuple(v_802),5-proj-7-tuple(v_802),6-proj-7-tuple(v_802),7-proj-7-tuple(v_802))) in
        {304}let v_814: bitstring = catch-fail(concat3(1-proj-3-tuple(v_803),2-proj-3-tuple(v_803),2-proj-2-tuple(v_812))) in
        {305}let (hs_815: handshakestate,message_e_816: bitstring) = (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-7-tuple(v_802))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (v_813,v_814) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {306}event SendMsg(alice,charlie,stagepack_e(sid),msg_e(alice,charlie,sid));
        {307}out(pub, message_e_816)
    ) | (
        {309}event LeakS(phase0,alice);
        {310}out(pub, key_s(alice))
    ) | (
        {311}phase 1;
        {312}event LeakS(phase1,alice);
        {313}out(pub, key_s(alice))
    )
) | (
    {314}let v_817: key = catch-fail(dhexp(key_s(bob),g)) in
    {315}let s_818: keypair = (if not-caught-fail(v_817) then keypairpack(v_817,key_s(bob)) else fail-any) in
    {316}out(pub, getpublickey(s_818));
    (
        {317}let e_819: keypair = keypairpack(empty,empty) in
        {318}let v_820: key = catch-fail(dhexp(key_s(alice),g)) in
        {319}let rs_821: key = getpublickey((if not-caught-fail(v_820) then keypairpack(v_820,key_s(alice)) else fail-any)) in
        {320}let re_822: key = empty in
        {321}let v_823: bitstring = catch-fail(hash(somename,empty)) in
        {322}let v_824: key = catch-fail(v_823) in
        {323}let v_825: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {324}let v_826: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (if not-caught-fail(v_825) then symmetricstatepack(v_825,v_824,v_823) else fail-any) else fail-any) else fail-any))) in
        {325}let v_827: symmetricstate = catch-fail((if success?((if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (if not-caught-fail(v_825) then symmetricstatepack(v_825,v_824,v_823) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_826),hash(3-proj-3-tuple(v_826),empty)) else fail-any) else fail-any)) in
        {326}let v_828: bitstring = catch-fail(symmetricstateunpack(v_827)) in
        {327}let v_829: symmetricstate = catch-fail((if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_828),hash(3-proj-3-tuple(v_828),rs_821)) else fail-any)) in
        {328}let v_830: bitstring = catch-fail(symmetricstateunpack(v_829)) in
        {329}let v_831: symmetricstate = catch-fail((if success?(getpublickey(s_818)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then symmetricstatepack(1-proj-3-tuple(v_830),2-proj-3-tuple(v_830),hash(3-proj-3-tuple(v_830),getpublickey(s_818))) else fail-any) else fail-any)) in
        {330}let hs_832: handshakestate = (if not-caught-fail(v_827) then (if not-caught-fail(v_829) then (if not-caught-fail(v_831) then handshakestatepack(v_831,s_818,e_819,rs_821,re_822,empty,false) else fail-any) else fail-any) else fail-any) in
        {331}insert statestore(bob,alice,sid,statepack_a(hs_832))
    ) | (
        {360}get statestore(=bob,=alice,=sid,statepack_a(hs_833: handshakestate)) in
        {332}in(pub, message_a_834: bitstring);
        {333}let v_835: bitstring = catch-fail(handshakestateunpack(hs_833)) in
        {334}let v_836: bitstring = catch-fail(deconcat3(message_a_834)) in
        {335}let v_837: bool = catch-fail(true) in
        {336}let v_838: key = catch-fail(1-proj-3-tuple(v_836)) in
        {337}let v_839: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_835))) in
        {338}let v_840: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_835)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then symmetricstatepack(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),hash(3-proj-3-tuple(v_839),v_838)) else fail-any) else fail-any)) in
        {339}let v_841: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_835))) in
        {340}let v_842: bitstring = catch-fail(symmetricstateunpack(v_840)) in
        {341}let v_843: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_842),(if success?(2-proj-7-tuple(v_835)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),v_838) else fail-any) else fail-any))) in
        {342}let v_844: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_842),(if success?(2-proj-7-tuple(v_835)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),v_838) else fail-any) else fail-any))) in
        {343}let v_845: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_842),(if success?(2-proj-7-tuple(v_835)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),v_838) else fail-any) else fail-any))) in
        {344}let v_846: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_835)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),v_838) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_842))) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then (if not-caught-fail(v_845) then (v_843,v_844,v_845) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_847: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_835)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),v_838) else fail-any) else fail-any)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_846)) then cipherstatepack(2-proj-3-tuple(v_846),minnonce) else fail-any),1-proj-3-tuple(v_846),3-proj-3-tuple(v_842)) else fail-any) else fail-any) else fail-any)) in
        {346}let v_848: bitstring = catch-fail(symmetricstateunpack(v_847)) in
        {347}let v_849: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_848))) in
        {348}let v_850: aead = catch-fail(decrypt(1-proj-2-tuple(v_849),2-proj-2-tuple(v_849),3-proj-3-tuple(v_848),3-proj-3-tuple(v_836))) in
        {349}let v_851: bitstring = catch-fail(aeadunpack(v_850)) in
        {350}let v_852: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_848))) in
        {351}let v_853: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_849))) && success?(1-proj-3-tuple(v_848))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then cipherstatepack(1-proj-2-tuple(v_852),increment_nonce(2-proj-2-tuple(v_849))) else fail-any) else fail-any)) in
        {352}let v_854: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_836)) && (success?(3-proj-3-tuple(v_848)) && success?(1-proj-3-tuple(v_848)))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-2-tuple(v_849))))) then (if not-caught-fail(v_850) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if not-caught-fail(v_853) then (v_853,3-proj-3-tuple(v_851),1-proj-3-tuple(v_851)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {353}let v_855: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_848),3-proj-3-tuple(v_848)))) in
        {354}let v_856: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_836)) && success?(symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_848),3-proj-3-tuple(v_848)))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then symmetricstatepack(1-proj-3-tuple(v_855),2-proj-3-tuple(v_855),hash(3-proj-3-tuple(v_855),3-proj-3-tuple(v_836))) else fail-any) else fail-any)) in
        {355}let v_857: bitstring = catch-fail((if success?(3-proj-3-tuple(v_836)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if not-caught-fail(v_856) then (v_856,2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {356}let v_858: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_857),2-proj-7-tuple(v_835),3-proj-7-tuple(v_835),4-proj-7-tuple(v_835),v_838,6-proj-7-tuple(v_835),7-proj-7-tuple(v_835))) in
        {357}let (hs_859: handshakestate,plaintext_a: bitstring,valid_860: bool) = (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-7-tuple(v_835))))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (if not-caught-fail(v_840) then (if not-caught-fail(v_847) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if (v_837 && 3-proj-3-tuple(v_857)) then (if not-caught-fail(v_858) then (v_858,2-proj-3-tuple(v_857),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {358}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {359}insert statestore(bob,alice,sid,statepack_b(hs_859))
    ) | (
        {390}get statestore(=bob,=alice,=sid,statepack_b(hs_861: handshakestate)) in
        {361}let v_862: bitstring = catch-fail(handshakestateunpack(hs_861)) in
        {362}let v_863: bitstring = catch-fail((empty,empty,empty)) in
        {363}let v_864: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {364}let v_865: keypair = catch-fail((if not-caught-fail(v_864) then keypairpack(v_864,key_e(bob,alice,sid)) else fail-any)) in
        {365}let v_866: bitstring = catch-fail(getpublickey(v_865)) in
        {366}let v_867: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_862))) in
        {367}let v_868: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_862)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then symmetricstatepack(1-proj-3-tuple(v_867),2-proj-3-tuple(v_867),hash(3-proj-3-tuple(v_867),v_866)) else fail-any) else fail-any)) in
        {368}let v_869: bitstring = catch-fail(keypairunpack(v_865)) in
        {369}let v_870: bitstring = catch-fail(symmetricstateunpack(v_868)) in
        {370}let v_871: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_870),(if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any))) in
        {371}let v_872: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_870),(if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any))) in
        {372}let v_873: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_870),(if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any))) in
        {373}let v_874: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_870))) then (if not-caught-fail(v_871) then (if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (v_871,v_872,v_873) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_875: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any)) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_874)) then cipherstatepack(2-proj-3-tuple(v_874),minnonce) else fail-any),1-proj-3-tuple(v_874),3-proj-3-tuple(v_870)) else fail-any) else fail-any) else fail-any)) in
        {375}let v_876: bitstring = catch-fail(symmetricstateunpack(v_875)) in
        {376}let v_877: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_876))) in
        {377}let v_878: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_877),2-proj-2-tuple(v_877),3-proj-3-tuple(v_876),msg_b(bob,alice,sid))) in
        {378}let v_879: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_876))) in
        {379}let v_880: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_877))) && success?(1-proj-3-tuple(v_876))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-2-tuple(v_879))))) then cipherstatepack(1-proj-2-tuple(v_879),increment_nonce(2-proj-2-tuple(v_877))) else fail-any) else fail-any)) in
        {380}let v_881: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_876)) && success?(1-proj-3-tuple(v_876))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-2-tuple(v_877))))) then (if not-caught-fail(v_878) then (if not-caught-fail(v_880) then (v_880,v_878) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_882: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_881),2-proj-3-tuple(v_876),3-proj-3-tuple(v_876)))) in
        {382}let v_883: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_881)) && success?(symmetricstatepack(1-proj-2-tuple(v_881),2-proj-3-tuple(v_876),3-proj-3-tuple(v_876)))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then symmetricstatepack(1-proj-3-tuple(v_882),2-proj-3-tuple(v_882),hash(3-proj-3-tuple(v_882),2-proj-2-tuple(v_881))) else fail-any) else fail-any)) in
        {383}let v_884: bitstring = catch-fail((if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-2-tuple(v_881))))) then (if not-caught-fail(v_883) then (v_883,2-proj-2-tuple(v_881)) else fail-any) else fail-any) else fail-any)) in
        {384}let v_885: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_884),2-proj-7-tuple(v_862),v_865,4-proj-7-tuple(v_862),5-proj-7-tuple(v_862),6-proj-7-tuple(v_862),7-proj-7-tuple(v_862))) in
        {385}let v_886: bitstring = catch-fail(concat3(v_866,2-proj-3-tuple(v_863),2-proj-2-tuple(v_884))) in
        {386}let (hs_887: handshakestate,message_b_888: bitstring) = (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-7-tuple(v_862))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if not-caught-fail(v_865) then (if not-caught-fail(v_866) then (if not-caught-fail(v_868) then (if not-caught-fail(v_875) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then (if not-caught-fail(v_885) then (if not-caught-fail(v_886) then (v_885,v_886) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {387}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {388}insert statestore(bob,alice,sid,statepack_c(hs_887));
        {389}out(pub, message_b_888)
    ) | (
        {424}get statestore(=bob,=alice,=sid,statepack_c(hs_889: handshakestate)) in
        {391}in(pub, message_c_890: bitstring);
        {392}let v_891: bitstring = catch-fail(handshakestateunpack(hs_889)) in
        {393}let v_892: bitstring = catch-fail(deconcat3(message_c_890)) in
        {394}let v_893: bool = catch-fail(true) in
        {395}let v_894: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_891))) in
        {396}let v_895: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_891))) in
        {397}let v_896: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_895),(if (success?(4-proj-7-tuple(v_891)) && success?(3-proj-7-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),4-proj-7-tuple(v_891)) else fail-any) else fail-any))) in
        {398}let v_897: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_895),(if (success?(4-proj-7-tuple(v_891)) && success?(3-proj-7-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),4-proj-7-tuple(v_891)) else fail-any) else fail-any))) in
        {399}let v_898: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_895),(if (success?(4-proj-7-tuple(v_891)) && success?(3-proj-7-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),4-proj-7-tuple(v_891)) else fail-any) else fail-any))) in
        {400}let v_899: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_891)) && success?(3-proj-7-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),4-proj-7-tuple(v_891)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_895))) then (if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (v_896,v_897,v_898) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {401}let v_900: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_891)) && success?(3-proj-7-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),4-proj-7-tuple(v_891)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_891))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_899)) then cipherstatepack(2-proj-3-tuple(v_899),minnonce) else fail-any),1-proj-3-tuple(v_899),3-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any)) in
        {402}let v_901: bitstring = catch-fail(symmetricstateunpack(v_900)) in
        {403}let v_902: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_901))) in
        {404}let v_903: aead = catch-fail(decrypt(1-proj-2-tuple(v_902),2-proj-2-tuple(v_902),3-proj-3-tuple(v_901),3-proj-3-tuple(v_892))) in
        {405}let v_904: bitstring = catch-fail(aeadunpack(v_903)) in
        {406}let v_905: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_901))) in
        {407}let v_906: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_902))) && success?(1-proj-3-tuple(v_901))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-2-tuple(v_905))))) then cipherstatepack(1-proj-2-tuple(v_905),increment_nonce(2-proj-2-tuple(v_902))) else fail-any) else fail-any)) in
        {408}let v_907: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_892)) && (success?(3-proj-3-tuple(v_901)) && success?(1-proj-3-tuple(v_901)))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then (if not-caught-fail(v_903) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then (if not-caught-fail(v_906) then (v_906,3-proj-3-tuple(v_904),1-proj-3-tuple(v_904)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {409}let v_908: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_907),2-proj-3-tuple(v_901),3-proj-3-tuple(v_901)))) in
        {410}let v_909: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_892)) && success?(symmetricstatepack(1-proj-3-tuple(v_907),2-proj-3-tuple(v_901),3-proj-3-tuple(v_901)))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then symmetricstatepack(1-proj-3-tuple(v_908),2-proj-3-tuple(v_908),hash(3-proj-3-tuple(v_908),3-proj-3-tuple(v_892))) else fail-any) else fail-any)) in
        {411}let v_910: bitstring = catch-fail((if success?(3-proj-3-tuple(v_892)) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then (if not-caught-fail(v_909) then (v_909,2-proj-3-tuple(v_907),3-proj-3-tuple(v_907)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {412}let v_911: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_910),2-proj-7-tuple(v_891),3-proj-7-tuple(v_891),4-proj-7-tuple(v_891),5-proj-7-tuple(v_891),6-proj-7-tuple(v_891),7-proj-7-tuple(v_891))) in
        {413}let v_912: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_910))) in
        {414}let v_913: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_912),zero)) in
        {415}let v_914: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_912),zero)) in
        {416}let v_915: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_912),zero)) in
        {417}let v_916: bitstring = catch-fail((if success?(2-proj-3-tuple(v_912)) then (if not-caught-fail(v_913) then (if not-caught-fail(v_914) then (if not-caught-fail(v_915) then (v_913,v_914,v_915) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_917: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_916)) then cipherstatepack(1-proj-3-tuple(v_916),minnonce) else fail-any)) in
        {419}let v_918: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_916)) then cipherstatepack(2-proj-3-tuple(v_916),minnonce) else fail-any)) in
        {420}let v_919: bitstring = catch-fail((if success?(1-proj-3-tuple(v_910)) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (1-proj-3-tuple(v_910),v_917,v_918) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let (hs_920: handshakestate,plaintext_c: bitstring,valid_921: bool,cs1_922: cipherstate,cs2_923: cipherstate) = (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-7-tuple(v_891))))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_900) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (v_893 && 3-proj-3-tuple(v_910)) then (if not-caught-fail(v_911) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (v_911,2-proj-3-tuple(v_910),true,2-proj-3-tuple(v_919),3-proj-3-tuple(v_919)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {422}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {423}insert statestore(bob,alice,sid,statepack_d(hs_920,cs1_922,cs2_923))
    ) | (
        {425}!
        {444}get statestore(=bob,=alice,=sid,statepack_d(hs_924: handshakestate,cs1_925: cipherstate,cs2_926: cipherstate)) in
        {426}let hs_927: handshakestate = handshakestatesetcs(hs_924,cs2_926) in
        {427}let v_928: bitstring = catch-fail(handshakestateunpack(hs_927)) in
        {428}let v_929: bitstring = catch-fail((empty,empty,empty)) in
        {429}let v_930: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_928))) in
        {430}let v_931: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_930))) in
        {431}let v_932: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_931),2-proj-2-tuple(v_931),3-proj-3-tuple(v_930),msg_d(bob,alice,sid))) in
        {432}let v_933: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_930))) in
        {433}let v_934: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_931))) && success?(1-proj-3-tuple(v_930))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-2-tuple(v_933))))) then cipherstatepack(1-proj-2-tuple(v_933),increment_nonce(2-proj-2-tuple(v_931))) else fail-any) else fail-any)) in
        {434}let v_935: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_930)) && success?(1-proj-3-tuple(v_930))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-2-tuple(v_931))))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_934) then (v_934,v_932) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {435}let v_936: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_935),2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)))) in
        {436}let v_937: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_935)) && success?(symmetricstatepack(1-proj-2-tuple(v_935),2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_936),hash(3-proj-3-tuple(v_936),2-proj-2-tuple(v_935))) else fail-any) else fail-any)) in
        {437}let v_938: bitstring = catch-fail((if success?(1-proj-7-tuple(v_928)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then (if not-caught-fail(v_937) then (v_937,2-proj-2-tuple(v_935)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {438}let v_939: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_938),2-proj-7-tuple(v_928),3-proj-7-tuple(v_928),4-proj-7-tuple(v_928),5-proj-7-tuple(v_928),6-proj-7-tuple(v_928),7-proj-7-tuple(v_928))) in
        {439}let v_940: bitstring = catch-fail(concat3(1-proj-3-tuple(v_929),2-proj-3-tuple(v_929),2-proj-2-tuple(v_938))) in
        {440}let (hs_941: handshakestate,message_d_942: bitstring) = (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-7-tuple(v_928))))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then (if not-caught-fail(v_939) then (if not-caught-fail(v_940) then (v_939,v_940) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {441}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {442}insert statestore(bob,alice,sid,statepack_e(hs_941,cs1_925,handshakestategetcs(hs_941)));
        {443}out(pub, message_d_942)
    ) | (
        {445}!
        {465}get statestore(=bob,=alice,=sid,statepack_e(hs_943: handshakestate,cs1_944: cipherstate,cs2_945: cipherstate)) in
        {446}let hs_946: handshakestate = handshakestatesetcs(hs_943,cs1_944) in
        {447}in(pub, message_e_947: bitstring);
        {448}let v_948: bitstring = catch-fail(handshakestateunpack(hs_946)) in
        {449}let v_949: bitstring = catch-fail(deconcat3(message_e_947)) in
        {450}let v_950: bool = catch-fail(true) in
        {451}let v_951: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_948))) in
        {452}let v_952: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_951))) in
        {453}let v_953: aead = catch-fail(decrypt(1-proj-2-tuple(v_952),2-proj-2-tuple(v_952),3-proj-3-tuple(v_951),3-proj-3-tuple(v_949))) in
        {454}let v_954: bitstring = catch-fail(aeadunpack(v_953)) in
        {455}let v_955: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_951))) in
        {456}let v_956: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_952))) && success?(1-proj-3-tuple(v_951))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then cipherstatepack(1-proj-2-tuple(v_955),increment_nonce(2-proj-2-tuple(v_952))) else fail-any) else fail-any)) in
        {457}let v_957: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_949)) && (success?(3-proj-3-tuple(v_951)) && success?(1-proj-3-tuple(v_951)))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then (if not-caught-fail(v_953) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if not-caught-fail(v_956) then (v_956,3-proj-3-tuple(v_954),1-proj-3-tuple(v_954)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {458}let v_958: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_957),2-proj-3-tuple(v_951),3-proj-3-tuple(v_951)))) in
        {459}let v_959: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_949)) && success?(symmetricstatepack(1-proj-3-tuple(v_957),2-proj-3-tuple(v_951),3-proj-3-tuple(v_951)))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then symmetricstatepack(1-proj-3-tuple(v_958),2-proj-3-tuple(v_958),hash(3-proj-3-tuple(v_958),3-proj-3-tuple(v_949))) else fail-any) else fail-any)) in
        {460}let v_960: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_949)) && success?(1-proj-7-tuple(v_948))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if not-caught-fail(v_959) then (v_959,2-proj-3-tuple(v_957),3-proj-3-tuple(v_957)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {461}let v_961: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_960),2-proj-7-tuple(v_948),3-proj-7-tuple(v_948),4-proj-7-tuple(v_948),5-proj-7-tuple(v_948),6-proj-7-tuple(v_948),7-proj-7-tuple(v_948))) in
        {462}let (hs_962: handshakestate,plaintext_e: bitstring,valid_963: bool) = (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-7-tuple(v_948))))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if not-caught-fail(v_950) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if (v_950 && 3-proj-3-tuple(v_960)) then (if not-caught-fail(v_961) then (v_961,2-proj-3-tuple(v_960),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {463}event RecvMsg(bob,alice,stagepack_e(sid),plaintext_e);
        {464}event RecvEnd(valid_963)
    ) | (
        {466}event LeakS(phase0,bob);
        {467}out(pub, key_s(bob))
    ) | (
        {468}phase 1;
        {469}event LeakS(phase1,bob);
        {470}out(pub, key_s(bob))
    )
) | (
    {471}let v_964: key = catch-fail(dhexp(key_s(bob),g)) in
    {472}let s_965: keypair = (if not-caught-fail(v_964) then keypairpack(v_964,key_s(bob)) else fail-any) in
    {473}out(pub, getpublickey(s_965));
    (
        {474}let e_966: keypair = keypairpack(empty,empty) in
        {475}let v_967: key = catch-fail(dhexp(key_s(charlie),g)) in
        {476}let rs_968: key = getpublickey((if not-caught-fail(v_967) then keypairpack(v_967,key_s(charlie)) else fail-any)) in
        {477}let re_969: key = empty in
        {478}let v_970: bitstring = catch-fail(hash(somename,empty)) in
        {479}let v_971: key = catch-fail(v_970) in
        {480}let v_972: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {481}let v_973: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_970) then (if not-caught-fail(v_971) then (if not-caught-fail(v_972) then symmetricstatepack(v_972,v_971,v_970) else fail-any) else fail-any) else fail-any))) in
        {482}let v_974: symmetricstate = catch-fail((if success?((if not-caught-fail(v_970) then (if not-caught-fail(v_971) then (if not-caught-fail(v_972) then symmetricstatepack(v_972,v_971,v_970) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then symmetricstatepack(1-proj-3-tuple(v_973),2-proj-3-tuple(v_973),hash(3-proj-3-tuple(v_973),empty)) else fail-any) else fail-any)) in
        {483}let v_975: bitstring = catch-fail(symmetricstateunpack(v_974)) in
        {484}let v_976: symmetricstate = catch-fail((if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then symmetricstatepack(1-proj-3-tuple(v_975),2-proj-3-tuple(v_975),hash(3-proj-3-tuple(v_975),rs_968)) else fail-any)) in
        {485}let v_977: bitstring = catch-fail(symmetricstateunpack(v_976)) in
        {486}let v_978: symmetricstate = catch-fail((if success?(getpublickey(s_965)) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then symmetricstatepack(1-proj-3-tuple(v_977),2-proj-3-tuple(v_977),hash(3-proj-3-tuple(v_977),getpublickey(s_965))) else fail-any) else fail-any)) in
        {487}let hs_979: handshakestate = (if not-caught-fail(v_974) then (if not-caught-fail(v_976) then (if not-caught-fail(v_978) then handshakestatepack(v_978,s_965,e_966,rs_968,re_969,empty,false) else fail-any) else fail-any) else fail-any) in
        {488}insert statestore(bob,charlie,sid,statepack_a(hs_979))
    ) | (
        {517}get statestore(=bob,=charlie,=sid,statepack_a(hs_980: handshakestate)) in
        {489}in(pub, message_a_981: bitstring);
        {490}let v_982: bitstring = catch-fail(handshakestateunpack(hs_980)) in
        {491}let v_983: bitstring = catch-fail(deconcat3(message_a_981)) in
        {492}let v_984: bool = catch-fail(true) in
        {493}let v_985: key = catch-fail(1-proj-3-tuple(v_983)) in
        {494}let v_986: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_982))) in
        {495}let v_987: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_982)) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then symmetricstatepack(1-proj-3-tuple(v_986),2-proj-3-tuple(v_986),hash(3-proj-3-tuple(v_986),v_985)) else fail-any) else fail-any)) in
        {496}let v_988: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_982))) in
        {497}let v_989: bitstring = catch-fail(symmetricstateunpack(v_987)) in
        {498}let v_990: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_989),(if success?(2-proj-7-tuple(v_982)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),v_985) else fail-any) else fail-any))) in
        {499}let v_991: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_989),(if success?(2-proj-7-tuple(v_982)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),v_985) else fail-any) else fail-any))) in
        {500}let v_992: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_989),(if success?(2-proj-7-tuple(v_982)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),v_985) else fail-any) else fail-any))) in
        {501}let v_993: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_982)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),v_985) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_989))) then (if not-caught-fail(v_990) then (if not-caught-fail(v_991) then (if not-caught-fail(v_992) then (v_990,v_991,v_992) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {502}let v_994: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_982)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),v_985) else fail-any) else fail-any)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_993)) then cipherstatepack(2-proj-3-tuple(v_993),minnonce) else fail-any),1-proj-3-tuple(v_993),3-proj-3-tuple(v_989)) else fail-any) else fail-any) else fail-any)) in
        {503}let v_995: bitstring = catch-fail(symmetricstateunpack(v_994)) in
        {504}let v_996: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_995))) in
        {505}let v_997: aead = catch-fail(decrypt(1-proj-2-tuple(v_996),2-proj-2-tuple(v_996),3-proj-3-tuple(v_995),3-proj-3-tuple(v_983))) in
        {506}let v_998: bitstring = catch-fail(aeadunpack(v_997)) in
        {507}let v_999: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_995))) in
        {508}let v_1000: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_996))) && success?(1-proj-3-tuple(v_995))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then cipherstatepack(1-proj-2-tuple(v_999),increment_nonce(2-proj-2-tuple(v_996))) else fail-any) else fail-any)) in
        {509}let v_1001: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_983)) && (success?(3-proj-3-tuple(v_995)) && success?(1-proj-3-tuple(v_995)))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then (if not-caught-fail(v_997) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then (if not-caught-fail(v_1000) then (v_1000,3-proj-3-tuple(v_998),1-proj-3-tuple(v_998)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {510}let v_1002: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1001),2-proj-3-tuple(v_995),3-proj-3-tuple(v_995)))) in
        {511}let v_1003: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_983)) && success?(symmetricstatepack(1-proj-3-tuple(v_1001),2-proj-3-tuple(v_995),3-proj-3-tuple(v_995)))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_1002),hash(3-proj-3-tuple(v_1002),3-proj-3-tuple(v_983))) else fail-any) else fail-any)) in
        {512}let v_1004: bitstring = catch-fail((if success?(3-proj-3-tuple(v_983)) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if not-caught-fail(v_1003) then (v_1003,2-proj-3-tuple(v_1001),3-proj-3-tuple(v_1001)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {513}let v_1005: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1004),2-proj-7-tuple(v_982),3-proj-7-tuple(v_982),4-proj-7-tuple(v_982),v_985,6-proj-7-tuple(v_982),7-proj-7-tuple(v_982))) in
        {514}let (hs_1006: handshakestate,plaintext_a_1007: bitstring,valid_1008: bool) = (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-7-tuple(v_982))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if not-caught-fail(v_984) then (if not-caught-fail(v_985) then (if not-caught-fail(v_987) then (if not-caught-fail(v_994) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if (v_984 && 3-proj-3-tuple(v_1004)) then (if not-caught-fail(v_1005) then (v_1005,2-proj-3-tuple(v_1004),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {515}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1007);
        {516}insert statestore(bob,charlie,sid,statepack_b(hs_1006))
    ) | (
        {547}get statestore(=bob,=charlie,=sid,statepack_b(hs_1009: handshakestate)) in
        {518}let v_1010: bitstring = catch-fail(handshakestateunpack(hs_1009)) in
        {519}let v_1011: bitstring = catch-fail((empty,empty,empty)) in
        {520}let v_1012: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {521}let v_1013: keypair = catch-fail((if not-caught-fail(v_1012) then keypairpack(v_1012,key_e(bob,charlie,sid)) else fail-any)) in
        {522}let v_1014: bitstring = catch-fail(getpublickey(v_1013)) in
        {523}let v_1015: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1010))) in
        {524}let v_1016: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1010)) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then symmetricstatepack(1-proj-3-tuple(v_1015),2-proj-3-tuple(v_1015),hash(3-proj-3-tuple(v_1015),v_1014)) else fail-any) else fail-any)) in
        {525}let v_1017: bitstring = catch-fail(keypairunpack(v_1013)) in
        {526}let v_1018: bitstring = catch-fail(symmetricstateunpack(v_1016)) in
        {527}let v_1019: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1018),(if success?(5-proj-7-tuple(v_1010)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-2-tuple(v_1017))))) then dhexp(2-proj-2-tuple(v_1017),5-proj-7-tuple(v_1010)) else fail-any) else fail-any))) in
        {528}let v_1020: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1018),(if success?(5-proj-7-tuple(v_1010)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-2-tuple(v_1017))))) then dhexp(2-proj-2-tuple(v_1017),5-proj-7-tuple(v_1010)) else fail-any) else fail-any))) in
        {529}let v_1021: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1018),(if success?(5-proj-7-tuple(v_1010)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-2-tuple(v_1017))))) then dhexp(2-proj-2-tuple(v_1017),5-proj-7-tuple(v_1010)) else fail-any) else fail-any))) in
        {530}let v_1022: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1010)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-2-tuple(v_1017))))) then dhexp(2-proj-2-tuple(v_1017),5-proj-7-tuple(v_1010)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1018))) then (if not-caught-fail(v_1019) then (if not-caught-fail(v_1020) then (if not-caught-fail(v_1021) then (v_1019,v_1020,v_1021) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {531}let v_1023: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1010)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-2-tuple(v_1017))))) then dhexp(2-proj-2-tuple(v_1017),5-proj-7-tuple(v_1010)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-3-tuple(v_1018))))) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1022)) then cipherstatepack(2-proj-3-tuple(v_1022),minnonce) else fail-any),1-proj-3-tuple(v_1022),3-proj-3-tuple(v_1018)) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1024: bitstring = catch-fail(symmetricstateunpack(v_1023)) in
        {533}let v_1025: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1024))) in
        {534}let v_1026: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1025),2-proj-2-tuple(v_1025),3-proj-3-tuple(v_1024),msg_b(bob,charlie,sid))) in
        {535}let v_1027: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1024))) in
        {536}let v_1028: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1025))) && success?(1-proj-3-tuple(v_1024))) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-2-tuple(v_1027))))) then cipherstatepack(1-proj-2-tuple(v_1027),increment_nonce(2-proj-2-tuple(v_1025))) else fail-any) else fail-any)) in
        {537}let v_1029: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1024)) && success?(1-proj-3-tuple(v_1024))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then (if not-caught-fail(v_1026) then (if not-caught-fail(v_1028) then (v_1028,v_1026) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {538}let v_1030: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1029),2-proj-3-tuple(v_1024),3-proj-3-tuple(v_1024)))) in
        {539}let v_1031: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1029)) && success?(symmetricstatepack(1-proj-2-tuple(v_1029),2-proj-3-tuple(v_1024),3-proj-3-tuple(v_1024)))) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then symmetricstatepack(1-proj-3-tuple(v_1030),2-proj-3-tuple(v_1030),hash(3-proj-3-tuple(v_1030),2-proj-2-tuple(v_1029))) else fail-any) else fail-any)) in
        {540}let v_1032: bitstring = catch-fail((if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-3-tuple(v_1024))))) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-2-tuple(v_1029))))) then (if not-caught-fail(v_1031) then (v_1031,2-proj-2-tuple(v_1029)) else fail-any) else fail-any) else fail-any)) in
        {541}let v_1033: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1032),2-proj-7-tuple(v_1010),v_1013,4-proj-7-tuple(v_1010),5-proj-7-tuple(v_1010),6-proj-7-tuple(v_1010),7-proj-7-tuple(v_1010))) in
        {542}let v_1034: bitstring = catch-fail(concat3(v_1014,2-proj-3-tuple(v_1011),2-proj-2-tuple(v_1032))) in
        {543}let (hs_1035: handshakestate,message_b_1036: bitstring) = (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-7-tuple(v_1010))))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if not-caught-fail(v_1013) then (if not-caught-fail(v_1014) then (if not-caught-fail(v_1016) then (if not-caught-fail(v_1023) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then (if not-caught-fail(v_1033) then (if not-caught-fail(v_1034) then (v_1033,v_1034) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {544}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {545}insert statestore(bob,charlie,sid,statepack_c(hs_1035));
        {546}out(pub, message_b_1036)
    ) | (
        {581}get statestore(=bob,=charlie,=sid,statepack_c(hs_1037: handshakestate)) in
        {548}in(pub, message_c_1038: bitstring);
        {549}let v_1039: bitstring = catch-fail(handshakestateunpack(hs_1037)) in
        {550}let v_1040: bitstring = catch-fail(deconcat3(message_c_1038)) in
        {551}let v_1041: bool = catch-fail(true) in
        {552}let v_1042: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1039))) in
        {553}let v_1043: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1039))) in
        {554}let v_1044: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1043),(if (success?(4-proj-7-tuple(v_1039)) && success?(3-proj-7-tuple(v_1039))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then dhexp(2-proj-2-tuple(v_1042),4-proj-7-tuple(v_1039)) else fail-any) else fail-any))) in
        {555}let v_1045: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1043),(if (success?(4-proj-7-tuple(v_1039)) && success?(3-proj-7-tuple(v_1039))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then dhexp(2-proj-2-tuple(v_1042),4-proj-7-tuple(v_1039)) else fail-any) else fail-any))) in
        {556}let v_1046: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1043),(if (success?(4-proj-7-tuple(v_1039)) && success?(3-proj-7-tuple(v_1039))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then dhexp(2-proj-2-tuple(v_1042),4-proj-7-tuple(v_1039)) else fail-any) else fail-any))) in
        {557}let v_1047: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1039)) && success?(3-proj-7-tuple(v_1039))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then dhexp(2-proj-2-tuple(v_1042),4-proj-7-tuple(v_1039)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1043))) then (if not-caught-fail(v_1044) then (if not-caught-fail(v_1045) then (if not-caught-fail(v_1046) then (v_1044,v_1045,v_1046) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1048: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1039)) && success?(3-proj-7-tuple(v_1039))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then dhexp(2-proj-2-tuple(v_1042),4-proj-7-tuple(v_1039)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1039))) then (if (not-caught-fail(v_1043) && success?(is-true(success?(1-proj-3-tuple(v_1043))))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1047)) then cipherstatepack(2-proj-3-tuple(v_1047),minnonce) else fail-any),1-proj-3-tuple(v_1047),3-proj-3-tuple(v_1043)) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1049: bitstring = catch-fail(symmetricstateunpack(v_1048)) in
        {560}let v_1050: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1049))) in
        {561}let v_1051: aead = catch-fail(decrypt(1-proj-2-tuple(v_1050),2-proj-2-tuple(v_1050),3-proj-3-tuple(v_1049),3-proj-3-tuple(v_1040))) in
        {562}let v_1052: bitstring = catch-fail(aeadunpack(v_1051)) in
        {563}let v_1053: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1049))) in
        {564}let v_1054: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1050))) && success?(1-proj-3-tuple(v_1049))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then cipherstatepack(1-proj-2-tuple(v_1053),increment_nonce(2-proj-2-tuple(v_1050))) else fail-any) else fail-any)) in
        {565}let v_1055: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1040)) && (success?(3-proj-3-tuple(v_1049)) && success?(1-proj-3-tuple(v_1049)))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-2-tuple(v_1050))))) then (if not-caught-fail(v_1051) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if not-caught-fail(v_1054) then (v_1054,3-proj-3-tuple(v_1052),1-proj-3-tuple(v_1052)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {566}let v_1056: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1055),2-proj-3-tuple(v_1049),3-proj-3-tuple(v_1049)))) in
        {567}let v_1057: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1040)) && success?(symmetricstatepack(1-proj-3-tuple(v_1055),2-proj-3-tuple(v_1049),3-proj-3-tuple(v_1049)))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1056),hash(3-proj-3-tuple(v_1056),3-proj-3-tuple(v_1040))) else fail-any) else fail-any)) in
        {568}let v_1058: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1040)) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-3-tuple(v_1049))))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-3-tuple(v_1055))))) then (if not-caught-fail(v_1057) then (v_1057,2-proj-3-tuple(v_1055),3-proj-3-tuple(v_1055)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {569}let v_1059: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1058),2-proj-7-tuple(v_1039),3-proj-7-tuple(v_1039),4-proj-7-tuple(v_1039),5-proj-7-tuple(v_1039),6-proj-7-tuple(v_1039),7-proj-7-tuple(v_1039))) in
        {570}let v_1060: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1058))) in
        {571}let v_1061: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1060),zero)) in
        {572}let v_1062: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1060),zero)) in
        {573}let v_1063: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1060),zero)) in
        {574}let v_1064: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1060)) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1063) then (v_1061,v_1062,v_1063) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {575}let v_1065: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1064)) then cipherstatepack(1-proj-3-tuple(v_1064),minnonce) else fail-any)) in
        {576}let v_1066: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1064)) then cipherstatepack(2-proj-3-tuple(v_1064),minnonce) else fail-any)) in
        {577}let v_1067: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1058)) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then (if not-caught-fail(v_1065) then (if not-caught-fail(v_1066) then (1-proj-3-tuple(v_1058),v_1065,v_1066) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {578}let (hs_1068: handshakestate,plaintext_c_1069: bitstring,valid_1070: bool,cs1_1071: cipherstate,cs2_1072: cipherstate) = (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-7-tuple(v_1039))))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then (if not-caught-fail(v_1041) then (if not-caught-fail(v_1048) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if (v_1041 && 3-proj-3-tuple(v_1058)) then (if not-caught-fail(v_1059) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-3-tuple(v_1067))))) then (v_1059,2-proj-3-tuple(v_1058),true,2-proj-3-tuple(v_1067),3-proj-3-tuple(v_1067)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {579}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1069);
        {580}insert statestore(bob,charlie,sid,statepack_d(hs_1068,cs1_1071,cs2_1072))
    ) | (
        {582}!
        {601}get statestore(=bob,=charlie,=sid,statepack_d(hs_1073: handshakestate,cs1_1074: cipherstate,cs2_1075: cipherstate)) in
        {583}let hs_1076: handshakestate = handshakestatesetcs(hs_1073,cs2_1075) in
        {584}let v_1077: bitstring = catch-fail(handshakestateunpack(hs_1076)) in
        {585}let v_1078: bitstring = catch-fail((empty,empty,empty)) in
        {586}let v_1079: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1077))) in
        {587}let v_1080: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1079))) in
        {588}let v_1081: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1080),2-proj-2-tuple(v_1080),3-proj-3-tuple(v_1079),msg_d(bob,charlie,sid))) in
        {589}let v_1082: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1079))) in
        {590}let v_1083: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1080))) && success?(1-proj-3-tuple(v_1079))) then (if (not-caught-fail(v_1082) && success?(is-true(success?(1-proj-2-tuple(v_1082))))) then cipherstatepack(1-proj-2-tuple(v_1082),increment_nonce(2-proj-2-tuple(v_1080))) else fail-any) else fail-any)) in
        {591}let v_1084: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1079)) && success?(1-proj-3-tuple(v_1079))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-2-tuple(v_1080))))) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1083) then (v_1083,v_1081) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1085: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1084),2-proj-3-tuple(v_1079),3-proj-3-tuple(v_1079)))) in
        {593}let v_1086: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1084)) && success?(symmetricstatepack(1-proj-2-tuple(v_1084),2-proj-3-tuple(v_1079),3-proj-3-tuple(v_1079)))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-3-tuple(v_1085))))) then symmetricstatepack(1-proj-3-tuple(v_1085),2-proj-3-tuple(v_1085),hash(3-proj-3-tuple(v_1085),2-proj-2-tuple(v_1084))) else fail-any) else fail-any)) in
        {594}let v_1087: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1077)) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-3-tuple(v_1079))))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-2-tuple(v_1084))))) then (if not-caught-fail(v_1086) then (v_1086,2-proj-2-tuple(v_1084)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {595}let v_1088: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1087),2-proj-7-tuple(v_1077),3-proj-7-tuple(v_1077),4-proj-7-tuple(v_1077),5-proj-7-tuple(v_1077),6-proj-7-tuple(v_1077),7-proj-7-tuple(v_1077))) in
        {596}let v_1089: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1078),2-proj-3-tuple(v_1078),2-proj-2-tuple(v_1087))) in
        {597}let (hs_1090: handshakestate,message_d_1091: bitstring) = (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-7-tuple(v_1077))))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-3-tuple(v_1078))))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-2-tuple(v_1087))))) then (if not-caught-fail(v_1088) then (if not-caught-fail(v_1089) then (v_1088,v_1089) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {598}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {599}insert statestore(bob,charlie,sid,statepack_e(hs_1090,cs1_1074,handshakestategetcs(hs_1090)));
        {600}out(pub, message_d_1091)
    ) | (
        {602}!
        {622}get statestore(=bob,=charlie,=sid,statepack_e(hs_1092: handshakestate,cs1_1093: cipherstate,cs2_1094: cipherstate)) in
        {603}let hs_1095: handshakestate = handshakestatesetcs(hs_1092,cs1_1093) in
        {604}in(pub, message_e_1096: bitstring);
        {605}let v_1097: bitstring = catch-fail(handshakestateunpack(hs_1095)) in
        {606}let v_1098: bitstring = catch-fail(deconcat3(message_e_1096)) in
        {607}let v_1099: bool = catch-fail(true) in
        {608}let v_1100: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1097))) in
        {609}let v_1101: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1100))) in
        {610}let v_1102: aead = catch-fail(decrypt(1-proj-2-tuple(v_1101),2-proj-2-tuple(v_1101),3-proj-3-tuple(v_1100),3-proj-3-tuple(v_1098))) in
        {611}let v_1103: bitstring = catch-fail(aeadunpack(v_1102)) in
        {612}let v_1104: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1100))) in
        {613}let v_1105: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1101))) && success?(1-proj-3-tuple(v_1100))) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-2-tuple(v_1104))))) then cipherstatepack(1-proj-2-tuple(v_1104),increment_nonce(2-proj-2-tuple(v_1101))) else fail-any) else fail-any)) in
        {614}let v_1106: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1098)) && (success?(3-proj-3-tuple(v_1100)) && success?(1-proj-3-tuple(v_1100)))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then (if not-caught-fail(v_1102) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if not-caught-fail(v_1105) then (v_1105,3-proj-3-tuple(v_1103),1-proj-3-tuple(v_1103)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {615}let v_1107: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1106),2-proj-3-tuple(v_1100),3-proj-3-tuple(v_1100)))) in
        {616}let v_1108: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1098)) && success?(symmetricstatepack(1-proj-3-tuple(v_1106),2-proj-3-tuple(v_1100),3-proj-3-tuple(v_1100)))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then symmetricstatepack(1-proj-3-tuple(v_1107),2-proj-3-tuple(v_1107),hash(3-proj-3-tuple(v_1107),3-proj-3-tuple(v_1098))) else fail-any) else fail-any)) in
        {617}let v_1109: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1098)) && success?(1-proj-7-tuple(v_1097))) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-3-tuple(v_1100))))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then (if not-caught-fail(v_1108) then (v_1108,2-proj-3-tuple(v_1106),3-proj-3-tuple(v_1106)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {618}let v_1110: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1109),2-proj-7-tuple(v_1097),3-proj-7-tuple(v_1097),4-proj-7-tuple(v_1097),5-proj-7-tuple(v_1097),6-proj-7-tuple(v_1097),7-proj-7-tuple(v_1097))) in
        {619}let (hs_1111: handshakestate,plaintext_e_1112: bitstring,valid_1113: bool) = (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-7-tuple(v_1097))))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-3-tuple(v_1098))))) then (if not-caught-fail(v_1099) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then (if (v_1099 && 3-proj-3-tuple(v_1109)) then (if not-caught-fail(v_1110) then (v_1110,2-proj-3-tuple(v_1109),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {620}event RecvMsg(bob,charlie,stagepack_e(sid),plaintext_e_1112);
        {621}event RecvEnd(valid_1113)
    ) | (
        {623}event LeakS(phase0,bob);
        {624}out(pub, key_s(bob))
    ) | (
        {625}phase 1;
        {626}event LeakS(phase1,bob);
        {627}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob,sid_a)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 125 rules in the queue.
400 rules inserted. The rule base contains 388 rules. 34 rules in the queue.
600 rules inserted. The rule base contains 579 rules. 115 rules in the queue.
800 rules inserted. The rule base contains 774 rules. 221 rules in the queue.
1000 rules inserted. The rule base contains 964 rules. 326 rules in the queue.
1200 rules inserted. The rule base contains 1148 rules. 342 rules in the queue.
1400 rules inserted. The rule base contains 1333 rules. 374 rules in the queue.
1600 rules inserted. The rule base contains 1518 rules. 450 rules in the queue.
1800 rules inserted. The rule base contains 1670 rules. 394 rules in the queue.
2000 rules inserted. The rule base contains 1834 rules. 359 rules in the queue.
2200 rules inserted. The rule base contains 1992 rules. 365 rules in the queue.
2400 rules inserted. The rule base contains 2126 rules. 359 rules in the queue.
2600 rules inserted. The rule base contains 2258 rules. 384 rules in the queue.
2800 rules inserted. The rule base contains 2396 rules. 411 rules in the queue.
3000 rules inserted. The rule base contains 2534 rules. 446 rules in the queue.
3200 rules inserted. The rule base contains 2656 rules. 440 rules in the queue.
3400 rules inserted. The rule base contains 2751 rules. 420 rules in the queue.
3600 rules inserted. The rule base contains 2875 rules. 435 rules in the queue.
3800 rules inserted. The rule base contains 2988 rules. 425 rules in the queue.
4000 rules inserted. The rule base contains 3069 rules. 387 rules in the queue.
4200 rules inserted. The rule base contains 3152 rules. 391 rules in the queue.
4400 rules inserted. The rule base contains 3303 rules. 364 rules in the queue.
4600 rules inserted. The rule base contains 3457 rules. 356 rules in the queue.
4800 rules inserted. The rule base contains 3577 rules. 341 rules in the queue.
5000 rules inserted. The rule base contains 3691 rules. 281 rules in the queue.
5200 rules inserted. The rule base contains 3848 rules. 303 rules in the queue.
5400 rules inserted. The rule base contains 3982 rules. 321 rules in the queue.
5600 rules inserted. The rule base contains 4155 rules. 343 rules in the queue.
5800 rules inserted. The rule base contains 4305 rules. 356 rules in the queue.
6000 rules inserted. The rule base contains 4461 rules. 371 rules in the queue.
6200 rules inserted. The rule base contains 4596 rules. 403 rules in the queue.
6400 rules inserted. The rule base contains 4745 rules. 411 rules in the queue.
6600 rules inserted. The rule base contains 4867 rules. 364 rules in the queue.
6800 rules inserted. The rule base contains 5011 rules. 341 rules in the queue.
7000 rules inserted. The rule base contains 5122 rules. 325 rules in the queue.
7200 rules inserted. The rule base contains 5240 rules. 317 rules in the queue.
7400 rules inserted. The rule base contains 5375 rules. 327 rules in the queue.
7600 rules inserted. The rule base contains 5537 rules. 349 rules in the queue.
7800 rules inserted. The rule base contains 5684 rules. 360 rules in the queue.
8000 rules inserted. The rule base contains 5822 rules. 389 rules in the queue.
8200 rules inserted. The rule base contains 5960 rules. 382 rules in the queue.
8400 rules inserted. The rule base contains 6071 rules. 355 rules in the queue.
8600 rules inserted. The rule base contains 6209 rules. 332 rules in the queue.
8800 rules inserted. The rule base contains 6294 rules. 276 rules in the queue.
9000 rules inserted. The rule base contains 6409 rules. 256 rules in the queue.
9200 rules inserted. The rule base contains 6530 rules. 264 rules in the queue.
9400 rules inserted. The rule base contains 6644 rules. 266 rules in the queue.
9600 rules inserted. The rule base contains 6773 rules. 245 rules in the queue.
9800 rules inserted. The rule base contains 6875 rules. 182 rules in the queue.
10000 rules inserted. The rule base contains 6917 rules. 109 rules in the queue.
10200 rules inserted. The rule base contains 6933 rules. 47 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213269]),msg_a(alice,bob,sid[!1 = @sid_44213269]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_44213270]),msg_a(alice,bob,sid[!1 = @sid_44213269])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213278]),msg_a(alice,bob,sid[!1 = @sid_44213278]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_44213279]),msg_a(alice,bob,sid[!1 = @sid_44213278])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213288]),msg_a(alice,bob,sid[!1 = @sid_44213288]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_44213289]),msg_a(alice,bob,sid[!1 = @sid_44213288])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213298]),msg_a(alice,bob,sid[!1 = @sid_44213298]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_44213299]),msg_a(alice,bob,sid[!1 = @sid_44213298])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213307]),msg_a(alice,bob,sid[!1 = @sid_44213307]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_44213308]),msg_a(alice,bob,sid[!1 = @sid_44213307])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213315]),msg_a(alice,bob,sid[!1 = @sid_44213315]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_44213315]))
Abbreviations:
sid_44213406 = sid[!1 = @sid_44213382]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_44213406,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_44213406,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_44213406,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_44213406),msg_a(alice,bob,sid_44213406)) may be executed at {48}.
So the message concat3(dhexp(key_e(alice,bob,sid_44213406),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_44213406),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_44213406),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_44213406),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_44213406),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_44213406),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_44213406),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_44213406),g).
attacker(dhexp(key_e(alice,bob,sid_44213406),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {316}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_44213406),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know dhexp(key_e(alice,bob,sid_44213406),g).
So the attacker may know dhexp(key_e(alice,bob,sid_44213406),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid_44213406),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {469}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {470}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob,sid_44213406),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))).

26. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213406),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213406),g)),msg_a(alice,bob,sid_44213406)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_44213406) in phase 1.
attacker_p1(msg_a(alice,bob,sid_44213406)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213408]),msg_a(alice,bob,sid[!1 = @sid_44213408]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_44213408]))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213411]),msg_a(alice,bob,sid[!1 = @sid_44213411]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_44213411]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213417]),msg_a(alice,bob,sid[!1 = @sid_44213417]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_44213417]))
Abbreviations:
sid_44213509 = sid[!1 = @sid_44213485]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_44213509,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_44213509,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_44213509,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_44213509),msg_a(alice,bob,sid_44213509)) may be executed at {48}.
So the message concat3(dhexp(key_e(alice,bob,sid_44213509),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_44213509),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_44213509),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_44213509),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_44213509),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_44213509),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_44213509),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_44213509),g).
attacker(dhexp(key_e(alice,bob,sid_44213509),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {316}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_44213509),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know dhexp(key_e(alice,bob,sid_44213509),g).
So the attacker may know dhexp(key_e(alice,bob,sid_44213509),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid_44213509),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {469}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {470}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob,sid_44213509),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))).

26. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213509),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213509),g)),msg_a(alice,bob,sid_44213509)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_44213509) in phase 1.
attacker_p1(msg_a(alice,bob,sid_44213509)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213511]),msg_a(alice,bob,sid[!1 = @sid_44213511]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_44213511]))
Abbreviations:
sid_44213602 = sid[!1 = @sid_44213578]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_44213602,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_44213602,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_44213602,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_44213602),msg_a(alice,bob,sid_44213602)) may be executed at {48}.
So the message concat3(dhexp(key_e(alice,bob,sid_44213602),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_44213602),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_44213602),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_44213602),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_44213602),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_44213602),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_44213602),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_44213602),g).
attacker(dhexp(key_e(alice,bob,sid_44213602),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {316}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {6}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_44213602),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know dhexp(key_e(alice,bob,sid_44213602),g).
So the attacker may know dhexp(key_e(alice,bob,sid_44213602),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid_44213602),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {469}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {470}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob,sid_44213602),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))).

26. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_44213602),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44213602),g)),msg_a(alice,bob,sid_44213602)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_44213602) in phase 1.
attacker_p1(msg_a(alice,bob,sid_44213602)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213605]),msg_b(bob,alice,sid[!1 = @sid_44213605]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213606]),msg_a(alice,bob,sid[!1 = @sid_44213606]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_44213606]),msg_b(bob,alice,sid[!1 = @sid_44213605])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213614]),msg_b(bob,alice,sid[!1 = @sid_44213614]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213615]),msg_a(alice,bob,sid[!1 = @sid_44213615]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_44213615]),msg_b(bob,alice,sid[!1 = @sid_44213614])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213624]),msg_b(bob,alice,sid[!1 = @sid_44213624]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213625]),msg_a(alice,bob,sid[!1 = @sid_44213625]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_44213625]),msg_b(bob,alice,sid[!1 = @sid_44213624])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213634]),msg_b(bob,alice,sid[!1 = @sid_44213634]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213635]),msg_a(alice,bob,sid[!1 = @sid_44213635]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_44213635]),msg_b(bob,alice,sid[!1 = @sid_44213634])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213643]),msg_b(bob,alice,sid[!1 = @sid_44213643]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213644]),msg_a(alice,bob,sid[!1 = @sid_44213644]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_44213644]),msg_b(bob,alice,sid[!1 = @sid_44213643])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213665]),msg_c(alice,bob,sid[!1 = @sid_44213665]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213666]),msg_b(bob,alice,sid[!1 = @sid_44213666]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213665]),msg_a(alice,bob,sid[!1 = @sid_44213665]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_44213666]),msg_c(alice,bob,sid[!1 = @sid_44213665])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213674]),msg_c(alice,bob,sid[!1 = @sid_44213674]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213675]),msg_b(bob,alice,sid[!1 = @sid_44213675]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213674]),msg_a(alice,bob,sid[!1 = @sid_44213674]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_44213675]),msg_c(alice,bob,sid[!1 = @sid_44213674])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213684]),msg_c(alice,bob,sid[!1 = @sid_44213684]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213685]),msg_b(bob,alice,sid[!1 = @sid_44213685]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213684]),msg_a(alice,bob,sid[!1 = @sid_44213684]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_44213685]),msg_c(alice,bob,sid[!1 = @sid_44213684])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213694]),msg_c(alice,bob,sid[!1 = @sid_44213694]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213695]),msg_b(bob,alice,sid[!1 = @sid_44213695]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213694]),msg_a(alice,bob,sid[!1 = @sid_44213694]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_44213695]),msg_c(alice,bob,sid[!1 = @sid_44213694])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213703]),msg_c(alice,bob,sid[!1 = @sid_44213703]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213704]),msg_b(bob,alice,sid[!1 = @sid_44213704]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213703]),msg_a(alice,bob,sid[!1 = @sid_44213703]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_44213704]),msg_c(alice,bob,sid[!1 = @sid_44213703])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213725]),msg_d(bob,alice,sid[!1 = @sid_44213725]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213726]),msg_c(alice,bob,sid[!1 = @sid_44213726]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213725]),msg_b(bob,alice,sid[!1 = @sid_44213725]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213726]),msg_a(alice,bob,sid[!1 = @sid_44213726]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_44213726]),msg_d(bob,alice,sid[!1 = @sid_44213725])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213734]),msg_d(bob,alice,sid[!1 = @sid_44213734]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213735]),msg_c(alice,bob,sid[!1 = @sid_44213735]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213734]),msg_b(bob,alice,sid[!1 = @sid_44213734]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213735]),msg_a(alice,bob,sid[!1 = @sid_44213735]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_44213735]),msg_d(bob,alice,sid[!1 = @sid_44213734])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213744]),msg_d(bob,alice,sid[!1 = @sid_44213744]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213745]),msg_c(alice,bob,sid[!1 = @sid_44213745]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213744]),msg_b(bob,alice,sid[!1 = @sid_44213744]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213745]),msg_a(alice,bob,sid[!1 = @sid_44213745]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_44213745]),msg_d(bob,alice,sid[!1 = @sid_44213744])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1216,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213754]),msg_d(bob,alice,sid[!1 = @sid_44213754]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213755]),msg_c(alice,bob,sid[!1 = @sid_44213755]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213754]),msg_b(bob,alice,sid[!1 = @sid_44213754]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213755]),msg_a(alice,bob,sid[!1 = @sid_44213755]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_44213755]),msg_d(bob,alice,sid[!1 = @sid_44213754])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213763]),msg_d(bob,alice,sid[!1 = @sid_44213763]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213764]),msg_c(alice,bob,sid[!1 = @sid_44213764]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213763]),msg_b(bob,alice,sid[!1 = @sid_44213763]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213764]),msg_a(alice,bob,sid[!1 = @sid_44213764]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_44213764]),msg_d(bob,alice,sid[!1 = @sid_44213763])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_44213785]),msg_e(alice,bob,sid[!1 = @sid_44213785]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213786]),msg_d(bob,alice,sid[!1 = @sid_44213786]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213785]),msg_c(alice,bob,sid[!1 = @sid_44213785]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213786]),msg_b(bob,alice,sid[!1 = @sid_44213786]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213785]),msg_a(alice,bob,sid[!1 = @sid_44213785]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_44213786]),msg_e(alice,bob,sid[!1 = @sid_44213785])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_44213794]),msg_e(alice,bob,sid[!1 = @sid_44213794]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213795]),msg_d(bob,alice,sid[!1 = @sid_44213795]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213794]),msg_c(alice,bob,sid[!1 = @sid_44213794]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213795]),msg_b(bob,alice,sid[!1 = @sid_44213795]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213794]),msg_a(alice,bob,sid[!1 = @sid_44213794]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_44213795]),msg_e(alice,bob,sid[!1 = @sid_44213794])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_44213804]),msg_e(alice,bob,sid[!1 = @sid_44213804]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213805]),msg_d(bob,alice,sid[!1 = @sid_44213805]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213804]),msg_c(alice,bob,sid[!1 = @sid_44213804]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213805]),msg_b(bob,alice,sid[!1 = @sid_44213805]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213804]),msg_a(alice,bob,sid[!1 = @sid_44213804]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_44213805]),msg_e(alice,bob,sid[!1 = @sid_44213804])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,c_1216,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_44213814]),msg_e(alice,bob,sid[!1 = @sid_44213814]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213815]),msg_d(bob,alice,sid[!1 = @sid_44213815]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213814]),msg_c(alice,bob,sid[!1 = @sid_44213814]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213815]),msg_b(bob,alice,sid[!1 = @sid_44213815]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213814]),msg_a(alice,bob,sid[!1 = @sid_44213814]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_44213815]),msg_e(alice,bob,sid[!1 = @sid_44213814])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_44213823]),msg_e(alice,bob,sid[!1 = @sid_44213823]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213824]),msg_d(bob,alice,sid[!1 = @sid_44213824]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213823]),msg_c(alice,bob,sid[!1 = @sid_44213823]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213824]),msg_b(bob,alice,sid[!1 = @sid_44213824]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213823]),msg_a(alice,bob,sid[!1 = @sid_44213823]))) -> end(RecvMsg(bob,alice,stagepack_e(sid[!1 = @sid_44213824]),msg_e(alice,bob,sid[!1 = @sid_44213823])))
RESULT event(RecvMsg(bob,alice,stagepack_e(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_e(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob,sid_a))
RESULT not attacker_p1(msg_e(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_e(sid[!1 = @sid_44213843]),msg_e(alice,bob,sid[!1 = @sid_44213843]))) && begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_44213844]),msg_d(bob,alice,sid[!1 = @sid_44213844]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_44213843]),msg_c(alice,bob,sid[!1 = @sid_44213843]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_44213844]),msg_b(bob,alice,sid[!1 = @sid_44213844]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_44213843]),msg_a(alice,bob,sid[!1 = @sid_44213843]))) -> end(RecvEnd(true))
Abbreviations:
sid_44214239 = sid[!1 = @sid_44214159]
sid_44214240 = sid[!1 = @sid_44214228]

1. The entry statestore(bob,alice,sid_44214240,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {331}.
table(statestore(bob,alice,sid_44214240,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,bob,sid_44214239,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_44214239,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,sid_44214239,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_44214239),msg_a(alice,bob,sid_44214239)) may be executed at {48}.
So the message concat3(dhexp(key_e(alice,bob,sid_44214239),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_44214239),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239)))).

4. The entry statestore(bob,alice,sid_44214240,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {360}.
The message concat3(dhexp(key_e(alice,bob,sid_44214239),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))) that may be sent on channel pub by 3 may be received at input {332}.
We have dhexp(key_e(alice,bob,sid_44214239),g) <> caught-fail.
So the entry statestore(bob,alice,sid_44214240,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,alice,sid_44214240,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false)))).

5. The entry statestore(bob,alice,sid_44214240,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false))) that may be in a table by 4 may be read at get {390}.
The event SendMsg(bob,alice,stagepack_b(sid_44214240),msg_b(bob,alice,sid_44214240)) may be executed at {387}.
So the entry statestore(bob,alice,sid_44214240,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false))) may be inserted in a table at insert {388}.
table(statestore(bob,alice,sid_44214240,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false)))).

6. The entry statestore(alice,bob,sid_44214239,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stagepack_a(sid_44214239),msg_a(alice,bob,sid_44214239)) may be executed at {48}.
So the entry statestore(alice,bob,sid_44214239,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {49}.
table(statestore(alice,bob,sid_44214239,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),empty,empty,true)))).

7. The entry statestore(bob,alice,sid_44214240,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false))) that may be in a table by 4 may be read at get {390}.
The event SendMsg(bob,alice,stagepack_b(sid_44214240),msg_b(bob,alice,sid_44214240)) may be executed at {387}.
So the message concat3(dhexp(key_e(bob,alice,sid_44214240),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))) may be sent on channel pub at output {389}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_44214240),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240)))).

8. The entry statestore(alice,bob,sid_44214239,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 6 may be read at get {80}.
The message concat3(dhexp(key_e(bob,alice,sid_44214240),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))) that may be sent on channel pub by 7 may be received at input {52}.
We have dhexp(key_e(bob,alice,sid_44214240),g) <> caught-fail.
So the entry statestore(alice,bob,sid_44214239,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true))) may be inserted in a table at insert {79}.
table(statestore(alice,bob,sid_44214239,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true)))).

9. The entry statestore(alice,bob,sid_44214239,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true))) that may be in a table by 8 may be read at get {113}.
The event SendMsg(alice,bob,stagepack_c(sid_44214239),msg_c(alice,bob,sid_44214239)) may be executed at {110}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))) may be sent on channel pub at output {112}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239)))).

10. The entry statestore(bob,alice,sid_44214240,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false))) that may be in a table by 5 may be read at get {424}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))) that may be sent on channel pub by 9 may be received at input {391}.
So the entry statestore(bob,alice,sid_44214240,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {423}.
table(statestore(bob,alice,sid_44214240,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce)))).

11. The entry statestore(bob,alice,sid_44214240,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {444}.
The event SendMsg(bob,alice,stagepack_d(sid_44214240),msg_d(bob,alice,sid_44214240)) may be executed at {441}.
So the entry statestore(bob,alice,sid_44214240,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {442}.
table(statestore(bob,alice,sid_44214240,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce))))).

12. The entry statestore(alice,bob,sid_44214239,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true))) that may be in a table by 8 may be read at get {113}.
The event SendMsg(alice,bob,stagepack_c(sid_44214239),msg_c(alice,bob,sid_44214239)) may be executed at {110}.
So the entry statestore(alice,bob,sid_44214239,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {111}.
table(statestore(alice,bob,sid_44214239,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce)))).

13. The entry statestore(bob,alice,sid_44214240,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 10 may be read at get {444}.
The event SendMsg(bob,alice,stagepack_d(sid_44214240),msg_d(bob,alice,sid_44214240)) may be executed at {441}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240))) may be sent on channel pub at output {443}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240)))).

14. The entry statestore(alice,bob,sid_44214239,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 12 may be read at get {134}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240))) that may be sent on channel pub by 13 may be received at input {116}.
So the entry statestore(alice,bob,sid_44214239,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) may be inserted in a table at insert {133}.
table(statestore(alice,bob,sid_44214239,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce))))).

15. The entry statestore(alice,bob,sid_44214239,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_44214239),g),key_e(alice,bob,sid_44214239)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice,sid_44214240),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 14 may be read at get {153}.
The event SendMsg(alice,bob,stagepack_e(sid_44214239),msg_e(alice,bob,sid_44214239)) may be executed at {151}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240))),msg_e(alice,bob,sid_44214239))) may be sent on channel pub at output {152}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240))),msg_e(alice,bob,sid_44214239)))).

16. The entry statestore(bob,alice,sid_44214240,statepack_e(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice,sid_44214240),g),key_e(bob,alice,sid_44214240)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_44214239),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)))) that may be in a table by 11 may be read at get {465}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),dhexp(key_e(bob,alice,sid_44214240),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),dhexp(key_e(alice,bob,sid_44214239),dhexp(key_e(bob,alice,sid_44214240),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob,sid_44214239),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob,sid_44214239),g)),msg_a(alice,bob,sid_44214239))),dhexp(key_e(bob,alice,sid_44214240),g)),msg_b(bob,alice,sid_44214240))),msg_c(alice,bob,sid_44214239))),msg_d(bob,alice,sid_44214240))),msg_e(alice,bob,sid_44214239))) that may be sent on channel pub by 15 may be received at input {447}.
So event RecvEnd(true) may be executed at {464}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
