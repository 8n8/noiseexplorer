File "K1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "K1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 310, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 318, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 372, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 373, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 386, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 397, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 399, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 407, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 409, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 583, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 576, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 397, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 399, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 561, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 372, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 373, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 553, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 310, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 641, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 407, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 409, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 633, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 626, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 386, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 618, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 318, character 6:
Warning: identifier e rebound.
File "K1K.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ne rebound.
File "K1K.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1K.noise.passive.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 611, characters 8-9:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "K1K.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "K1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "K1K.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let v_507: key = catch-fail(dhexp(key_s(alice),g)) in
    {3}let s_508: keypair = (if not-caught-fail(v_507) then keypairpack(v_507,key_s(alice)) else fail-any) in
    {4}out(pub, getpublickey(s_508));
    (
        {5}let e_509: keypair = keypairpack(empty,empty) in
        {6}let v_510: key = catch-fail(dhexp(key_s(bob),g)) in
        {7}let rs_511: key = getpublickey((if not-caught-fail(v_510) then keypairpack(v_510,key_s(bob)) else fail-any)) in
        {8}let re_512: key = empty in
        {9}let v_513: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_514: key = catch-fail(v_513) in
        {11}let v_515: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_516: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_513) then (if not-caught-fail(v_514) then (if not-caught-fail(v_515) then symmetricstatepack(v_515,v_514,v_513) else fail-any) else fail-any) else fail-any))) in
        {13}let v_517: symmetricstate = catch-fail((if success?((if not-caught-fail(v_513) then (if not-caught-fail(v_514) then (if not-caught-fail(v_515) then symmetricstatepack(v_515,v_514,v_513) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then symmetricstatepack(1-proj-3-tuple(v_516),2-proj-3-tuple(v_516),hash(3-proj-3-tuple(v_516),empty)) else fail-any) else fail-any)) in
        {14}let v_518: bitstring = catch-fail(symmetricstateunpack(v_517)) in
        {15}let v_519: symmetricstate = catch-fail((if success?(getpublickey(s_508)) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_518),hash(3-proj-3-tuple(v_518),getpublickey(s_508))) else fail-any) else fail-any)) in
        {16}let v_520: bitstring = catch-fail(symmetricstateunpack(v_519)) in
        {17}let v_521: symmetricstate = catch-fail((if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then symmetricstatepack(1-proj-3-tuple(v_520),2-proj-3-tuple(v_520),hash(3-proj-3-tuple(v_520),rs_511)) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_517) then (if not-caught-fail(v_519) then (if not-caught-fail(v_521) then handshakestatepack(v_521,s_508,e_509,rs_511,re_512,empty,true) else fail-any) else fail-any) else fail-any) in
        {19}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {49}get statestore(=alice,=bob,statepack_a(hs_522: handshakestate)) in
        {20}let v_523: bitstring = catch-fail(handshakestateunpack(hs_522)) in
        {21}let v_524: bitstring = catch-fail((empty,empty,empty)) in
        {22}let v_525: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {23}let v_526: keypair = catch-fail((if not-caught-fail(v_525) then keypairpack(v_525,key_e(alice,bob)) else fail-any)) in
        {24}let v_527: bitstring = catch-fail(getpublickey(v_526)) in
        {25}let v_528: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_523))) in
        {26}let v_529: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_523)) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then symmetricstatepack(1-proj-3-tuple(v_528),2-proj-3-tuple(v_528),hash(3-proj-3-tuple(v_528),v_527)) else fail-any) else fail-any)) in
        {27}let v_530: bitstring = catch-fail(keypairunpack(v_526)) in
        {28}let v_531: bitstring = catch-fail(symmetricstateunpack(v_529)) in
        {29}let v_532: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_531),(if success?(4-proj-7-tuple(v_523)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),4-proj-7-tuple(v_523)) else fail-any) else fail-any))) in
        {30}let v_533: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_531),(if success?(4-proj-7-tuple(v_523)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),4-proj-7-tuple(v_523)) else fail-any) else fail-any))) in
        {31}let v_534: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_531),(if success?(4-proj-7-tuple(v_523)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),4-proj-7-tuple(v_523)) else fail-any) else fail-any))) in
        {32}let v_535: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_523)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),4-proj-7-tuple(v_523)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_531))) then (if not-caught-fail(v_532) then (if not-caught-fail(v_533) then (if not-caught-fail(v_534) then (v_532,v_533,v_534) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {33}let v_536: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_523)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),4-proj-7-tuple(v_523)) else fail-any) else fail-any)) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_535)) then cipherstatepack(2-proj-3-tuple(v_535),minnonce) else fail-any),1-proj-3-tuple(v_535),3-proj-3-tuple(v_531)) else fail-any) else fail-any) else fail-any)) in
        {34}let v_537: bitstring = catch-fail(symmetricstateunpack(v_536)) in
        {35}let v_538: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_537))) in
        {36}let v_539: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_538),2-proj-2-tuple(v_538),3-proj-3-tuple(v_537),msg_a(alice,bob))) in
        {37}let v_540: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_537))) in
        {38}let v_541: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_538))) && success?(1-proj-3-tuple(v_537))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then cipherstatepack(1-proj-2-tuple(v_540),increment_nonce(2-proj-2-tuple(v_538))) else fail-any) else fail-any)) in
        {39}let v_542: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_537)) && success?(1-proj-3-tuple(v_537))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then (if not-caught-fail(v_539) then (if not-caught-fail(v_541) then (v_541,v_539) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_543: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_542),2-proj-3-tuple(v_537),3-proj-3-tuple(v_537)))) in
        {41}let v_544: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_542)) && success?(symmetricstatepack(1-proj-2-tuple(v_542),2-proj-3-tuple(v_537),3-proj-3-tuple(v_537)))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then symmetricstatepack(1-proj-3-tuple(v_543),2-proj-3-tuple(v_543),hash(3-proj-3-tuple(v_543),2-proj-2-tuple(v_542))) else fail-any) else fail-any)) in
        {42}let v_545: bitstring = catch-fail((if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then (if not-caught-fail(v_544) then (v_544,2-proj-2-tuple(v_542)) else fail-any) else fail-any) else fail-any)) in
        {43}let v_546: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_545),2-proj-7-tuple(v_523),v_526,4-proj-7-tuple(v_523),5-proj-7-tuple(v_523),6-proj-7-tuple(v_523),7-proj-7-tuple(v_523))) in
        {44}let v_547: bitstring = catch-fail(concat3(v_527,2-proj-3-tuple(v_524),2-proj-2-tuple(v_545))) in
        {45}let (hs_548: handshakestate,re_549: key,message_a: bitstring) = (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-7-tuple(v_523))))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then (if not-caught-fail(v_526) then (if not-caught-fail(v_527) then (if not-caught-fail(v_529) then (if not-caught-fail(v_536) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (v_546,5-proj-7-tuple(v_523),v_547) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {46}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {47}insert statestore(alice,bob,statepack_b(hs_548));
        {48}out(pub, message_a)
    ) | (
        {78}get statestore(=alice,=bob,statepack_b(hs_550: handshakestate)) in
        {50}in(pub, message_b: bitstring);
        {51}let v_551: bitstring = catch-fail(handshakestateunpack(hs_550)) in
        {52}let v_552: bitstring = catch-fail(deconcat3(message_b)) in
        {53}let v_553: bool = catch-fail(true) in
        {54}let v_554: key = catch-fail(1-proj-3-tuple(v_552)) in
        {55}let v_555: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_551))) in
        {56}let v_556: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_551)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_555),hash(3-proj-3-tuple(v_555),v_554)) else fail-any) else fail-any)) in
        {57}let v_557: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_551))) in
        {58}let v_558: bitstring = catch-fail(symmetricstateunpack(v_556)) in
        {59}let v_559: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_558),(if success?(3-proj-7-tuple(v_551)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),v_554) else fail-any) else fail-any))) in
        {60}let v_560: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_558),(if success?(3-proj-7-tuple(v_551)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),v_554) else fail-any) else fail-any))) in
        {61}let v_561: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_558),(if success?(3-proj-7-tuple(v_551)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),v_554) else fail-any) else fail-any))) in
        {62}let v_562: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_551)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),v_554) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_558))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (v_559,v_560,v_561) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_563: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_551)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then dhexp(2-proj-2-tuple(v_557),v_554) else fail-any) else fail-any)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_562)) then cipherstatepack(2-proj-3-tuple(v_562),minnonce) else fail-any),1-proj-3-tuple(v_562),3-proj-3-tuple(v_558)) else fail-any) else fail-any) else fail-any)) in
        {64}let v_564: bitstring = catch-fail(symmetricstateunpack(v_563)) in
        {65}let v_565: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {66}let v_566: aead = catch-fail(decrypt(1-proj-2-tuple(v_565),2-proj-2-tuple(v_565),3-proj-3-tuple(v_564),3-proj-3-tuple(v_552))) in
        {67}let v_567: bitstring = catch-fail(aeadunpack(v_566)) in
        {68}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {69}let v_569: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_565))) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then cipherstatepack(1-proj-2-tuple(v_568),increment_nonce(2-proj-2-tuple(v_565))) else fail-any) else fail-any)) in
        {70}let v_570: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_552)) && (success?(3-proj-3-tuple(v_564)) && success?(1-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-2-tuple(v_565))))) then (if not-caught-fail(v_566) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if not-caught-fail(v_569) then (v_569,3-proj-3-tuple(v_567),1-proj-3-tuple(v_567)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_571: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) in
        {72}let v_572: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_552)) && success?(symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack(1-proj-3-tuple(v_571),2-proj-3-tuple(v_571),hash(3-proj-3-tuple(v_571),3-proj-3-tuple(v_552))) else fail-any) else fail-any)) in
        {73}let v_573: bitstring = catch-fail((if success?(3-proj-3-tuple(v_552)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if not-caught-fail(v_572) then (v_572,2-proj-3-tuple(v_570),3-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {74}let v_574: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_573),2-proj-7-tuple(v_551),3-proj-7-tuple(v_551),4-proj-7-tuple(v_551),v_554,6-proj-7-tuple(v_551),7-proj-7-tuple(v_551))) in
        {75}let (hs_575: handshakestate,re_576: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-7-tuple(v_551))))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (if not-caught-fail(v_556) then (if not-caught-fail(v_563) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if (v_553 && 3-proj-3-tuple(v_573)) then (if not-caught-fail(v_574) then (v_574,getpublickey(3-proj-7-tuple(v_551)),2-proj-3-tuple(v_573),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {76}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {77}insert statestore(alice,bob,statepack_c(hs_575))
    ) | (
        {103}get statestore(=alice,=bob,statepack_c(hs_577: handshakestate)) in
        {79}let v_578: bitstring = catch-fail(handshakestateunpack(hs_577)) in
        {80}let v_579: bitstring = catch-fail((empty,empty,empty)) in
        {81}let v_580: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_578))) in
        {82}let v_581: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_578))) in
        {83}let v_582: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_581),(if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any))) in
        {84}let v_583: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_581),(if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any))) in
        {85}let v_584: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_581),(if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any))) in
        {86}let v_585: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_581))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (v_582,v_583,v_584) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_586: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_578)) && success?(2-proj-7-tuple(v_578))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_578)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_578))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_585)) then cipherstatepack(2-proj-3-tuple(v_585),minnonce) else fail-any),1-proj-3-tuple(v_585),3-proj-3-tuple(v_581)) else fail-any) else fail-any) else fail-any)) in
        {88}let v_587: bitstring = catch-fail(symmetricstateunpack(v_586)) in
        {89}let v_588: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {90}let v_589: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_588),2-proj-2-tuple(v_588),3-proj-3-tuple(v_587),msg_c(alice,bob))) in
        {91}let v_590: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {92}let v_591: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_588))) && success?(1-proj-3-tuple(v_587))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then cipherstatepack(1-proj-2-tuple(v_590),increment_nonce(2-proj-2-tuple(v_588))) else fail-any) else fail-any)) in
        {93}let v_592: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_587)) && success?(1-proj-3-tuple(v_587))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_591) then (v_591,v_589) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {94}let v_593: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_592),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) in
        {95}let v_594: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_592)) && success?(symmetricstatepack(1-proj-2-tuple(v_592),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_593),hash(3-proj-3-tuple(v_593),2-proj-2-tuple(v_592))) else fail-any) else fail-any)) in
        {96}let v_595: bitstring = catch-fail((if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then (if not-caught-fail(v_594) then (v_594,2-proj-2-tuple(v_592)) else fail-any) else fail-any) else fail-any)) in
        {97}let v_596: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_595),2-proj-7-tuple(v_578),3-proj-7-tuple(v_578),4-proj-7-tuple(v_578),5-proj-7-tuple(v_578),6-proj-7-tuple(v_578),7-proj-7-tuple(v_578))) in
        {98}let v_597: bitstring = catch-fail(concat3(1-proj-3-tuple(v_579),2-proj-3-tuple(v_579),2-proj-2-tuple(v_595))) in
        {99}let (hs_598: handshakestate,re_599: key,message_c: bitstring) = (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-7-tuple(v_578))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_586) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (v_596,5-proj-7-tuple(v_578),v_597) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {100}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {101}insert statestore(alice,bob,statepack_d(hs_598));
        {102}out(pub, message_c)
    ) | (
        {122}get statestore(=alice,=bob,statepack_d(hs_600: handshakestate)) in
        {104}in(pub, message_d: bitstring);
        {105}let v_601: bitstring = catch-fail(handshakestateunpack(hs_600)) in
        {106}let v_602: bitstring = catch-fail(deconcat3(message_d)) in
        {107}let v_603: bool = catch-fail(true) in
        {108}let v_604: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_601))) in
        {109}let v_605: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {110}let v_606: aead = catch-fail(decrypt(1-proj-2-tuple(v_605),2-proj-2-tuple(v_605),3-proj-3-tuple(v_604),3-proj-3-tuple(v_602))) in
        {111}let v_607: bitstring = catch-fail(aeadunpack(v_606)) in
        {112}let v_608: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {113}let v_609: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_605))) && success?(1-proj-3-tuple(v_604))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then cipherstatepack(1-proj-2-tuple(v_608),increment_nonce(2-proj-2-tuple(v_605))) else fail-any) else fail-any)) in
        {114}let v_610: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_602)) && (success?(3-proj-3-tuple(v_604)) && success?(1-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then (if not-caught-fail(v_606) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if not-caught-fail(v_609) then (v_609,3-proj-3-tuple(v_607),1-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_611: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) in
        {116}let v_612: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_602)) && success?(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),3-proj-3-tuple(v_602))) else fail-any) else fail-any)) in
        {117}let v_613: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_602)) && success?(1-proj-7-tuple(v_601))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if not-caught-fail(v_612) then (v_612,2-proj-3-tuple(v_610),3-proj-3-tuple(v_610)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_614: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_613),2-proj-7-tuple(v_601),3-proj-7-tuple(v_601),4-proj-7-tuple(v_601),5-proj-7-tuple(v_601),6-proj-7-tuple(v_601),7-proj-7-tuple(v_601))) in
        {119}let (hs_615: handshakestate,re_616: key,plaintext_d: bitstring,valid_617: bool) = (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-7-tuple(v_601))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if not-caught-fail(v_603) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if (v_603 && 3-proj-3-tuple(v_613)) then (if not-caught-fail(v_614) then (v_614,getpublickey(3-proj-7-tuple(v_601)),2-proj-3-tuple(v_613),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {120}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_617);
        {121}insert statestore(alice,bob,statepack_e(hs_615))
    ) | (
        {148}get statestore(=alice,=bob,statepack_e(hs_618: handshakestate)) in
        {123}let v_619: bitstring = catch-fail(handshakestateunpack(hs_618)) in
        {124}let v_620: bitstring = catch-fail((empty,empty,empty)) in
        {125}let v_621: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_619))) in
        {126}let v_622: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {127}let v_623: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_622),2-proj-2-tuple(v_622),3-proj-3-tuple(v_621),msg_e(alice,bob))) in
        {128}let v_624: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {129}let v_625: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_622))) && success?(1-proj-3-tuple(v_621))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then cipherstatepack(1-proj-2-tuple(v_624),increment_nonce(2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {130}let v_626: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_621)) && success?(1-proj-3-tuple(v_621))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_623) then (if not-caught-fail(v_625) then (v_625,v_623) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {131}let v_627: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_626),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) in
        {132}let v_628: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_626)) && success?(symmetricstatepack(1-proj-2-tuple(v_626),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),2-proj-2-tuple(v_626))) else fail-any) else fail-any)) in
        {133}let v_629: bitstring = catch-fail((if success?(1-proj-7-tuple(v_619)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then (if not-caught-fail(v_628) then (v_628,2-proj-2-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {134}let v_630: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_629),2-proj-7-tuple(v_619),3-proj-7-tuple(v_619),4-proj-7-tuple(v_619),5-proj-7-tuple(v_619),6-proj-7-tuple(v_619),7-proj-7-tuple(v_619))) in
        {135}let v_631: bitstring = catch-fail(concat3(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),2-proj-2-tuple(v_629))) in
        {136}let v_632: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_629))) in
        {137}let v_633: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_632),zero)) in
        {138}let v_634: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_632),zero)) in
        {139}let v_635: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_632),zero)) in
        {140}let v_636: bitstring = catch-fail((if success?(2-proj-3-tuple(v_632)) then (if not-caught-fail(v_633) then (if not-caught-fail(v_634) then (if not-caught-fail(v_635) then (v_633,v_634,v_635) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {141}let v_637: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_636)) then cipherstatepack(1-proj-3-tuple(v_636),minnonce) else fail-any)) in
        {142}let v_638: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_636)) then cipherstatepack(2-proj-3-tuple(v_636),minnonce) else fail-any)) in
        {143}let v_639: bitstring = catch-fail((if success?(1-proj-2-tuple(v_629)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (1-proj-2-tuple(v_629),v_637,v_638) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {144}let (hs_640: handshakestate,re_641: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-7-tuple(v_619))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (v_630,5-proj-7-tuple(v_619),v_631,2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {145}event SendMsg(alice,bob,stage_e,msg_e(alice,bob),true);
        {146}insert statestore(alice,bob,statepack_f(hs_640));
        {147}out(pub, message_e)
    ) | (
        {149}event LeakS(phase0,alice);
        {150}out(pub, key_s(alice))
    ) | (
        {151}phase 1;
        {152}event LeakS(phase1,alice);
        {153}out(pub, key_s(alice))
    )
) | (
    {154}let v_642: key = catch-fail(dhexp(key_s(alice),g)) in
    {155}let s_643: keypair = (if not-caught-fail(v_642) then keypairpack(v_642,key_s(alice)) else fail-any) in
    {156}out(pub, getpublickey(s_643));
    (
        {157}let e_644: keypair = keypairpack(empty,empty) in
        {158}let v_645: key = catch-fail(dhexp(key_s(charlie),g)) in
        {159}let rs_646: key = getpublickey((if not-caught-fail(v_645) then keypairpack(v_645,key_s(charlie)) else fail-any)) in
        {160}let re_647: key = empty in
        {161}let v_648: bitstring = catch-fail(hash(somename,empty)) in
        {162}let v_649: key = catch-fail(v_648) in
        {163}let v_650: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {164}let v_651: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then symmetricstatepack(v_650,v_649,v_648) else fail-any) else fail-any) else fail-any))) in
        {165}let v_652: symmetricstate = catch-fail((if success?((if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then symmetricstatepack(v_650,v_649,v_648) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then symmetricstatepack(1-proj-3-tuple(v_651),2-proj-3-tuple(v_651),hash(3-proj-3-tuple(v_651),empty)) else fail-any) else fail-any)) in
        {166}let v_653: bitstring = catch-fail(symmetricstateunpack(v_652)) in
        {167}let v_654: symmetricstate = catch-fail((if success?(getpublickey(s_643)) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_653),hash(3-proj-3-tuple(v_653),getpublickey(s_643))) else fail-any) else fail-any)) in
        {168}let v_655: bitstring = catch-fail(symmetricstateunpack(v_654)) in
        {169}let v_656: symmetricstate = catch-fail((if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_655),hash(3-proj-3-tuple(v_655),rs_646)) else fail-any)) in
        {170}let hs_657: handshakestate = (if not-caught-fail(v_652) then (if not-caught-fail(v_654) then (if not-caught-fail(v_656) then handshakestatepack(v_656,s_643,e_644,rs_646,re_647,empty,true) else fail-any) else fail-any) else fail-any) in
        {171}insert statestore(alice,charlie,statepack_a(hs_657))
    ) | (
        {201}get statestore(=alice,=charlie,statepack_a(hs_658: handshakestate)) in
        {172}let v_659: bitstring = catch-fail(handshakestateunpack(hs_658)) in
        {173}let v_660: bitstring = catch-fail((empty,empty,empty)) in
        {174}let v_661: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {175}let v_662: keypair = catch-fail((if not-caught-fail(v_661) then keypairpack(v_661,key_e(alice,charlie)) else fail-any)) in
        {176}let v_663: bitstring = catch-fail(getpublickey(v_662)) in
        {177}let v_664: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_659))) in
        {178}let v_665: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_659)) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then symmetricstatepack(1-proj-3-tuple(v_664),2-proj-3-tuple(v_664),hash(3-proj-3-tuple(v_664),v_663)) else fail-any) else fail-any)) in
        {179}let v_666: bitstring = catch-fail(keypairunpack(v_662)) in
        {180}let v_667: bitstring = catch-fail(symmetricstateunpack(v_665)) in
        {181}let v_668: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_667),(if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {182}let v_669: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_667),(if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {183}let v_670: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_667),(if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any))) in
        {184}let v_671: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_667))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (v_668,v_669,v_670) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {185}let v_672: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_659)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_659)) else fail-any) else fail-any)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_671)) then cipherstatepack(2-proj-3-tuple(v_671),minnonce) else fail-any),1-proj-3-tuple(v_671),3-proj-3-tuple(v_667)) else fail-any) else fail-any) else fail-any)) in
        {186}let v_673: bitstring = catch-fail(symmetricstateunpack(v_672)) in
        {187}let v_674: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_673))) in
        {188}let v_675: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_674),2-proj-2-tuple(v_674),3-proj-3-tuple(v_673),msg_a(alice,charlie))) in
        {189}let v_676: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_673))) in
        {190}let v_677: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_674))) && success?(1-proj-3-tuple(v_673))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then cipherstatepack(1-proj-2-tuple(v_676),increment_nonce(2-proj-2-tuple(v_674))) else fail-any) else fail-any)) in
        {191}let v_678: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_673)) && success?(1-proj-3-tuple(v_673))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then (if not-caught-fail(v_675) then (if not-caught-fail(v_677) then (v_677,v_675) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {192}let v_679: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_678),2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)))) in
        {193}let v_680: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_678)) && success?(symmetricstatepack(1-proj-2-tuple(v_678),2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then symmetricstatepack(1-proj-3-tuple(v_679),2-proj-3-tuple(v_679),hash(3-proj-3-tuple(v_679),2-proj-2-tuple(v_678))) else fail-any) else fail-any)) in
        {194}let v_681: bitstring = catch-fail((if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then (if not-caught-fail(v_680) then (v_680,2-proj-2-tuple(v_678)) else fail-any) else fail-any) else fail-any)) in
        {195}let v_682: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_681),2-proj-7-tuple(v_659),v_662,4-proj-7-tuple(v_659),5-proj-7-tuple(v_659),6-proj-7-tuple(v_659),7-proj-7-tuple(v_659))) in
        {196}let v_683: bitstring = catch-fail(concat3(v_663,2-proj-3-tuple(v_660),2-proj-2-tuple(v_681))) in
        {197}let (hs_684: handshakestate,re_685: key,message_a_686: bitstring) = (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-7-tuple(v_659))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if not-caught-fail(v_662) then (if not-caught-fail(v_663) then (if not-caught-fail(v_665) then (if not-caught-fail(v_672) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then (if not-caught-fail(v_682) then (if not-caught-fail(v_683) then (v_682,5-proj-7-tuple(v_659),v_683) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {198}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {199}insert statestore(alice,charlie,statepack_b(hs_684));
        {200}out(pub, message_a_686)
    ) | (
        {230}get statestore(=alice,=charlie,statepack_b(hs_687: handshakestate)) in
        {202}in(pub, message_b_688: bitstring);
        {203}let v_689: bitstring = catch-fail(handshakestateunpack(hs_687)) in
        {204}let v_690: bitstring = catch-fail(deconcat3(message_b_688)) in
        {205}let v_691: bool = catch-fail(true) in
        {206}let v_692: key = catch-fail(1-proj-3-tuple(v_690)) in
        {207}let v_693: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_689))) in
        {208}let v_694: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_689)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_693),hash(3-proj-3-tuple(v_693),v_692)) else fail-any) else fail-any)) in
        {209}let v_695: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_689))) in
        {210}let v_696: bitstring = catch-fail(symmetricstateunpack(v_694)) in
        {211}let v_697: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_696),(if success?(3-proj-7-tuple(v_689)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),v_692) else fail-any) else fail-any))) in
        {212}let v_698: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_696),(if success?(3-proj-7-tuple(v_689)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),v_692) else fail-any) else fail-any))) in
        {213}let v_699: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_696),(if success?(3-proj-7-tuple(v_689)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),v_692) else fail-any) else fail-any))) in
        {214}let v_700: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_689)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),v_692) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_696))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (v_697,v_698,v_699) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {215}let v_701: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_689)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then dhexp(2-proj-2-tuple(v_695),v_692) else fail-any) else fail-any)) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_700)) then cipherstatepack(2-proj-3-tuple(v_700),minnonce) else fail-any),1-proj-3-tuple(v_700),3-proj-3-tuple(v_696)) else fail-any) else fail-any) else fail-any)) in
        {216}let v_702: bitstring = catch-fail(symmetricstateunpack(v_701)) in
        {217}let v_703: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {218}let v_704: aead = catch-fail(decrypt(1-proj-2-tuple(v_703),2-proj-2-tuple(v_703),3-proj-3-tuple(v_702),3-proj-3-tuple(v_690))) in
        {219}let v_705: bitstring = catch-fail(aeadunpack(v_704)) in
        {220}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {221}let v_707: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_703))) && success?(1-proj-3-tuple(v_702))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then cipherstatepack(1-proj-2-tuple(v_706),increment_nonce(2-proj-2-tuple(v_703))) else fail-any) else fail-any)) in
        {222}let v_708: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_690)) && (success?(3-proj-3-tuple(v_702)) && success?(1-proj-3-tuple(v_702)))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then (if not-caught-fail(v_704) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if not-caught-fail(v_707) then (v_707,3-proj-3-tuple(v_705),1-proj-3-tuple(v_705)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {223}let v_709: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) in
        {224}let v_710: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_690)) && success?(symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),3-proj-3-tuple(v_690))) else fail-any) else fail-any)) in
        {225}let v_711: bitstring = catch-fail((if success?(3-proj-3-tuple(v_690)) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_710) then (v_710,2-proj-3-tuple(v_708),3-proj-3-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let v_712: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_711),2-proj-7-tuple(v_689),3-proj-7-tuple(v_689),4-proj-7-tuple(v_689),v_692,6-proj-7-tuple(v_689),7-proj-7-tuple(v_689))) in
        {227}let (hs_713: handshakestate,re_714: key,plaintext_b_715: bitstring,valid_716: bool) = (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-7-tuple(v_689))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (if not-caught-fail(v_694) then (if not-caught-fail(v_701) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if (v_691 && 3-proj-3-tuple(v_711)) then (if not-caught-fail(v_712) then (v_712,getpublickey(3-proj-7-tuple(v_689)),2-proj-3-tuple(v_711),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {228}event RecvMsg(alice,charlie,stage_b,plaintext_b_715,valid_716);
        {229}insert statestore(alice,charlie,statepack_c(hs_713))
    ) | (
        {255}get statestore(=alice,=charlie,statepack_c(hs_717: handshakestate)) in
        {231}let v_718: bitstring = catch-fail(handshakestateunpack(hs_717)) in
        {232}let v_719: bitstring = catch-fail((empty,empty,empty)) in
        {233}let v_720: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_718))) in
        {234}let v_721: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_718))) in
        {235}let v_722: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_721),(if (success?(5-proj-7-tuple(v_718)) && success?(2-proj-7-tuple(v_718))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),5-proj-7-tuple(v_718)) else fail-any) else fail-any))) in
        {236}let v_723: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_721),(if (success?(5-proj-7-tuple(v_718)) && success?(2-proj-7-tuple(v_718))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),5-proj-7-tuple(v_718)) else fail-any) else fail-any))) in
        {237}let v_724: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_721),(if (success?(5-proj-7-tuple(v_718)) && success?(2-proj-7-tuple(v_718))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),5-proj-7-tuple(v_718)) else fail-any) else fail-any))) in
        {238}let v_725: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_718)) && success?(2-proj-7-tuple(v_718))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),5-proj-7-tuple(v_718)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_721))) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then (v_722,v_723,v_724) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_726: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_718)) && success?(2-proj-7-tuple(v_718))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),5-proj-7-tuple(v_718)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_718))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_725)) then cipherstatepack(2-proj-3-tuple(v_725),minnonce) else fail-any),1-proj-3-tuple(v_725),3-proj-3-tuple(v_721)) else fail-any) else fail-any) else fail-any)) in
        {240}let v_727: bitstring = catch-fail(symmetricstateunpack(v_726)) in
        {241}let v_728: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {242}let v_729: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_728),2-proj-2-tuple(v_728),3-proj-3-tuple(v_727),msg_c(alice,charlie))) in
        {243}let v_730: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {244}let v_731: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_728))) && success?(1-proj-3-tuple(v_727))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then cipherstatepack(1-proj-2-tuple(v_730),increment_nonce(2-proj-2-tuple(v_728))) else fail-any) else fail-any)) in
        {245}let v_732: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_727)) && success?(1-proj-3-tuple(v_727))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-2-tuple(v_728))))) then (if not-caught-fail(v_729) then (if not-caught-fail(v_731) then (v_731,v_729) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_733: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_732),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) in
        {247}let v_734: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_732)) && success?(symmetricstatepack(1-proj-2-tuple(v_732),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_733),hash(3-proj-3-tuple(v_733),2-proj-2-tuple(v_732))) else fail-any) else fail-any)) in
        {248}let v_735: bitstring = catch-fail((if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-2-tuple(v_732))))) then (if not-caught-fail(v_734) then (v_734,2-proj-2-tuple(v_732)) else fail-any) else fail-any) else fail-any)) in
        {249}let v_736: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_735),2-proj-7-tuple(v_718),3-proj-7-tuple(v_718),4-proj-7-tuple(v_718),5-proj-7-tuple(v_718),6-proj-7-tuple(v_718),7-proj-7-tuple(v_718))) in
        {250}let v_737: bitstring = catch-fail(concat3(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),2-proj-2-tuple(v_735))) in
        {251}let (hs_738: handshakestate,re_739: key,message_c_740: bitstring) = (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-7-tuple(v_718))))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then (if not-caught-fail(v_726) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then (v_736,5-proj-7-tuple(v_718),v_737) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {252}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {253}insert statestore(alice,charlie,statepack_d(hs_738));
        {254}out(pub, message_c_740)
    ) | (
        {274}get statestore(=alice,=charlie,statepack_d(hs_741: handshakestate)) in
        {256}in(pub, message_d_742: bitstring);
        {257}let v_743: bitstring = catch-fail(handshakestateunpack(hs_741)) in
        {258}let v_744: bitstring = catch-fail(deconcat3(message_d_742)) in
        {259}let v_745: bool = catch-fail(true) in
        {260}let v_746: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_743))) in
        {261}let v_747: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_746))) in
        {262}let v_748: aead = catch-fail(decrypt(1-proj-2-tuple(v_747),2-proj-2-tuple(v_747),3-proj-3-tuple(v_746),3-proj-3-tuple(v_744))) in
        {263}let v_749: bitstring = catch-fail(aeadunpack(v_748)) in
        {264}let v_750: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_746))) in
        {265}let v_751: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_747))) && success?(1-proj-3-tuple(v_746))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then cipherstatepack(1-proj-2-tuple(v_750),increment_nonce(2-proj-2-tuple(v_747))) else fail-any) else fail-any)) in
        {266}let v_752: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_744)) && (success?(3-proj-3-tuple(v_746)) && success?(1-proj-3-tuple(v_746)))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then (if not-caught-fail(v_748) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if not-caught-fail(v_751) then (v_751,3-proj-3-tuple(v_749),1-proj-3-tuple(v_749)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_753: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_752),2-proj-3-tuple(v_746),3-proj-3-tuple(v_746)))) in
        {268}let v_754: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_744)) && success?(symmetricstatepack(1-proj-3-tuple(v_752),2-proj-3-tuple(v_746),3-proj-3-tuple(v_746)))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then symmetricstatepack(1-proj-3-tuple(v_753),2-proj-3-tuple(v_753),hash(3-proj-3-tuple(v_753),3-proj-3-tuple(v_744))) else fail-any) else fail-any)) in
        {269}let v_755: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_744)) && success?(1-proj-7-tuple(v_743))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if not-caught-fail(v_754) then (v_754,2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_756: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_755),2-proj-7-tuple(v_743),3-proj-7-tuple(v_743),4-proj-7-tuple(v_743),5-proj-7-tuple(v_743),6-proj-7-tuple(v_743),7-proj-7-tuple(v_743))) in
        {271}let (hs_757: handshakestate,re_758: key,plaintext_d_759: bitstring,valid_760: bool) = (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-7-tuple(v_743))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if not-caught-fail(v_745) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if (v_745 && 3-proj-3-tuple(v_755)) then (if not-caught-fail(v_756) then (v_756,getpublickey(3-proj-7-tuple(v_743)),2-proj-3-tuple(v_755),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {272}event RecvMsg(alice,charlie,stage_d,plaintext_d_759,valid_760);
        {273}insert statestore(alice,charlie,statepack_e(hs_757))
    ) | (
        {300}get statestore(=alice,=charlie,statepack_e(hs_761: handshakestate)) in
        {275}let v_762: bitstring = catch-fail(handshakestateunpack(hs_761)) in
        {276}let v_763: bitstring = catch-fail((empty,empty,empty)) in
        {277}let v_764: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_762))) in
        {278}let v_765: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_764))) in
        {279}let v_766: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_765),2-proj-2-tuple(v_765),3-proj-3-tuple(v_764),msg_e(alice,charlie))) in
        {280}let v_767: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_764))) in
        {281}let v_768: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_765))) && success?(1-proj-3-tuple(v_764))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then cipherstatepack(1-proj-2-tuple(v_767),increment_nonce(2-proj-2-tuple(v_765))) else fail-any) else fail-any)) in
        {282}let v_769: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_764)) && success?(1-proj-3-tuple(v_764))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-2-tuple(v_765))))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_768) then (v_768,v_766) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_770: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_769),2-proj-3-tuple(v_764),3-proj-3-tuple(v_764)))) in
        {284}let v_771: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_769)) && success?(symmetricstatepack(1-proj-2-tuple(v_769),2-proj-3-tuple(v_764),3-proj-3-tuple(v_764)))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then symmetricstatepack(1-proj-3-tuple(v_770),2-proj-3-tuple(v_770),hash(3-proj-3-tuple(v_770),2-proj-2-tuple(v_769))) else fail-any) else fail-any)) in
        {285}let v_772: bitstring = catch-fail((if success?(1-proj-7-tuple(v_762)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then (if not-caught-fail(v_771) then (v_771,2-proj-2-tuple(v_769)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_773: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_772),2-proj-7-tuple(v_762),3-proj-7-tuple(v_762),4-proj-7-tuple(v_762),5-proj-7-tuple(v_762),6-proj-7-tuple(v_762),7-proj-7-tuple(v_762))) in
        {287}let v_774: bitstring = catch-fail(concat3(1-proj-3-tuple(v_763),2-proj-3-tuple(v_763),2-proj-2-tuple(v_772))) in
        {288}let v_775: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_772))) in
        {289}let v_776: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_775),zero)) in
        {290}let v_777: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_775),zero)) in
        {291}let v_778: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_775),zero)) in
        {292}let v_779: bitstring = catch-fail((if success?(2-proj-3-tuple(v_775)) then (if not-caught-fail(v_776) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (v_776,v_777,v_778) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_780: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_779)) then cipherstatepack(1-proj-3-tuple(v_779),minnonce) else fail-any)) in
        {294}let v_781: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_779)) then cipherstatepack(2-proj-3-tuple(v_779),minnonce) else fail-any)) in
        {295}let v_782: bitstring = catch-fail((if success?(1-proj-2-tuple(v_772)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (1-proj-2-tuple(v_772),v_780,v_781) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let (hs_783: handshakestate,re_784: key,message_e_785: bitstring,cs1_786: cipherstate,cs2_787: cipherstate) = (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-7-tuple(v_762))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (v_773,5-proj-7-tuple(v_762),v_774,2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {297}event SendMsg(alice,charlie,stage_e,msg_e(alice,charlie),true);
        {298}insert statestore(alice,charlie,statepack_f(hs_783));
        {299}out(pub, message_e_785)
    ) | (
        {301}event LeakS(phase0,alice);
        {302}out(pub, key_s(alice))
    ) | (
        {303}phase 1;
        {304}event LeakS(phase1,alice);
        {305}out(pub, key_s(alice))
    )
) | (
    {306}let v_788: key = catch-fail(dhexp(key_s(bob),g)) in
    {307}let s_789: keypair = (if not-caught-fail(v_788) then keypairpack(v_788,key_s(bob)) else fail-any) in
    {308}out(pub, getpublickey(s_789));
    (
        {309}let e_790: keypair = keypairpack(empty,empty) in
        {310}let v_791: key = catch-fail(dhexp(key_s(alice),g)) in
        {311}let rs_792: key = getpublickey((if not-caught-fail(v_791) then keypairpack(v_791,key_s(alice)) else fail-any)) in
        {312}let re_793: key = empty in
        {313}let v_794: bitstring = catch-fail(hash(somename,empty)) in
        {314}let v_795: key = catch-fail(v_794) in
        {315}let v_796: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {316}let v_797: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (if not-caught-fail(v_796) then symmetricstatepack(v_796,v_795,v_794) else fail-any) else fail-any) else fail-any))) in
        {317}let v_798: symmetricstate = catch-fail((if success?((if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (if not-caught-fail(v_796) then symmetricstatepack(v_796,v_795,v_794) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_797),hash(3-proj-3-tuple(v_797),empty)) else fail-any) else fail-any)) in
        {318}let v_799: bitstring = catch-fail(symmetricstateunpack(v_798)) in
        {319}let v_800: symmetricstate = catch-fail((if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack(1-proj-3-tuple(v_799),2-proj-3-tuple(v_799),hash(3-proj-3-tuple(v_799),rs_792)) else fail-any)) in
        {320}let v_801: bitstring = catch-fail(symmetricstateunpack(v_800)) in
        {321}let v_802: symmetricstate = catch-fail((if success?(getpublickey(s_789)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then symmetricstatepack(1-proj-3-tuple(v_801),2-proj-3-tuple(v_801),hash(3-proj-3-tuple(v_801),getpublickey(s_789))) else fail-any) else fail-any)) in
        {322}let hs_803: handshakestate = (if not-caught-fail(v_798) then (if not-caught-fail(v_800) then (if not-caught-fail(v_802) then handshakestatepack(v_802,s_789,e_790,rs_792,re_793,empty,false) else fail-any) else fail-any) else fail-any) in
        {323}insert statestore(bob,alice,statepack_a(hs_803))
    ) | (
        {352}get statestore(=bob,=alice,statepack_a(hs_804: handshakestate)) in
        {324}in(pub, message_a_805: bitstring);
        {325}let v_806: bitstring = catch-fail(handshakestateunpack(hs_804)) in
        {326}let v_807: bitstring = catch-fail(deconcat3(message_a_805)) in
        {327}let v_808: bool = catch-fail(true) in
        {328}let v_809: key = catch-fail(1-proj-3-tuple(v_807)) in
        {329}let v_810: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_806))) in
        {330}let v_811: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_806)) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),v_809)) else fail-any) else fail-any)) in
        {331}let v_812: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_806))) in
        {332}let v_813: bitstring = catch-fail(symmetricstateunpack(v_811)) in
        {333}let v_814: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_813),(if success?(2-proj-7-tuple(v_806)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then dhexp(2-proj-2-tuple(v_812),v_809) else fail-any) else fail-any))) in
        {334}let v_815: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_813),(if success?(2-proj-7-tuple(v_806)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then dhexp(2-proj-2-tuple(v_812),v_809) else fail-any) else fail-any))) in
        {335}let v_816: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_813),(if success?(2-proj-7-tuple(v_806)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then dhexp(2-proj-2-tuple(v_812),v_809) else fail-any) else fail-any))) in
        {336}let v_817: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_806)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then dhexp(2-proj-2-tuple(v_812),v_809) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_813))) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (if not-caught-fail(v_816) then (v_814,v_815,v_816) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {337}let v_818: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_806)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then dhexp(2-proj-2-tuple(v_812),v_809) else fail-any) else fail-any)) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_817)) then cipherstatepack(2-proj-3-tuple(v_817),minnonce) else fail-any),1-proj-3-tuple(v_817),3-proj-3-tuple(v_813)) else fail-any) else fail-any) else fail-any)) in
        {338}let v_819: bitstring = catch-fail(symmetricstateunpack(v_818)) in
        {339}let v_820: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_819))) in
        {340}let v_821: aead = catch-fail(decrypt(1-proj-2-tuple(v_820),2-proj-2-tuple(v_820),3-proj-3-tuple(v_819),3-proj-3-tuple(v_807))) in
        {341}let v_822: bitstring = catch-fail(aeadunpack(v_821)) in
        {342}let v_823: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_819))) in
        {343}let v_824: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_820))) && success?(1-proj-3-tuple(v_819))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then cipherstatepack(1-proj-2-tuple(v_823),increment_nonce(2-proj-2-tuple(v_820))) else fail-any) else fail-any)) in
        {344}let v_825: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_807)) && (success?(3-proj-3-tuple(v_819)) && success?(1-proj-3-tuple(v_819)))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-2-tuple(v_820))))) then (if not-caught-fail(v_821) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if not-caught-fail(v_824) then (v_824,3-proj-3-tuple(v_822),1-proj-3-tuple(v_822)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_826: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_825),2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)))) in
        {346}let v_827: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_807)) && success?(symmetricstatepack(1-proj-3-tuple(v_825),2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_826),hash(3-proj-3-tuple(v_826),3-proj-3-tuple(v_807))) else fail-any) else fail-any)) in
        {347}let v_828: bitstring = catch-fail((if success?(3-proj-3-tuple(v_807)) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (if not-caught-fail(v_827) then (v_827,2-proj-3-tuple(v_825),3-proj-3-tuple(v_825)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_829: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_828),2-proj-7-tuple(v_806),3-proj-7-tuple(v_806),4-proj-7-tuple(v_806),v_809,6-proj-7-tuple(v_806),7-proj-7-tuple(v_806))) in
        {349}let (hs_830: handshakestate,re_831: key,plaintext_a: bitstring,valid_832: bool) = (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-7-tuple(v_806))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if not-caught-fail(v_808) then (if not-caught-fail(v_809) then (if not-caught-fail(v_811) then (if not-caught-fail(v_818) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then (if (v_808 && 3-proj-3-tuple(v_828)) then (if not-caught-fail(v_829) then (v_829,getpublickey(3-proj-7-tuple(v_806)),2-proj-3-tuple(v_828),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {350}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_832);
        {351}insert statestore(bob,alice,statepack_b(hs_830))
    ) | (
        {382}get statestore(=bob,=alice,statepack_b(hs_833: handshakestate)) in
        {353}let v_834: bitstring = catch-fail(handshakestateunpack(hs_833)) in
        {354}let v_835: bitstring = catch-fail((empty,empty,empty)) in
        {355}let v_836: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {356}let v_837: keypair = catch-fail((if not-caught-fail(v_836) then keypairpack(v_836,key_e(bob,alice)) else fail-any)) in
        {357}let v_838: bitstring = catch-fail(getpublickey(v_837)) in
        {358}let v_839: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_834))) in
        {359}let v_840: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_834)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then symmetricstatepack(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),hash(3-proj-3-tuple(v_839),v_838)) else fail-any) else fail-any)) in
        {360}let v_841: bitstring = catch-fail(keypairunpack(v_837)) in
        {361}let v_842: bitstring = catch-fail(symmetricstateunpack(v_840)) in
        {362}let v_843: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_842),(if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {363}let v_844: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_842),(if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {364}let v_845: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_842),(if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any))) in
        {365}let v_846: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_842))) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then (if not-caught-fail(v_845) then (v_843,v_844,v_845) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {366}let v_847: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_834)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-2-tuple(v_841))))) then dhexp(2-proj-2-tuple(v_841),5-proj-7-tuple(v_834)) else fail-any) else fail-any)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_846)) then cipherstatepack(2-proj-3-tuple(v_846),minnonce) else fail-any),1-proj-3-tuple(v_846),3-proj-3-tuple(v_842)) else fail-any) else fail-any) else fail-any)) in
        {367}let v_848: bitstring = catch-fail(symmetricstateunpack(v_847)) in
        {368}let v_849: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_848))) in
        {369}let v_850: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_849),2-proj-2-tuple(v_849),3-proj-3-tuple(v_848),msg_b(bob,alice))) in
        {370}let v_851: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_848))) in
        {371}let v_852: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_849))) && success?(1-proj-3-tuple(v_848))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then cipherstatepack(1-proj-2-tuple(v_851),increment_nonce(2-proj-2-tuple(v_849))) else fail-any) else fail-any)) in
        {372}let v_853: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_848)) && success?(1-proj-3-tuple(v_848))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-2-tuple(v_849))))) then (if not-caught-fail(v_850) then (if not-caught-fail(v_852) then (v_852,v_850) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {373}let v_854: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_853),2-proj-3-tuple(v_848),3-proj-3-tuple(v_848)))) in
        {374}let v_855: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_853)) && success?(symmetricstatepack(1-proj-2-tuple(v_853),2-proj-3-tuple(v_848),3-proj-3-tuple(v_848)))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_854),hash(3-proj-3-tuple(v_854),2-proj-2-tuple(v_853))) else fail-any) else fail-any)) in
        {375}let v_856: bitstring = catch-fail((if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then (if not-caught-fail(v_855) then (v_855,2-proj-2-tuple(v_853)) else fail-any) else fail-any) else fail-any)) in
        {376}let v_857: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_856),2-proj-7-tuple(v_834),v_837,4-proj-7-tuple(v_834),5-proj-7-tuple(v_834),6-proj-7-tuple(v_834),7-proj-7-tuple(v_834))) in
        {377}let v_858: bitstring = catch-fail(concat3(v_838,2-proj-3-tuple(v_835),2-proj-2-tuple(v_856))) in
        {378}let (hs_859: handshakestate,re_860: key,message_b_861: bitstring) = (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-7-tuple(v_834))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (if not-caught-fail(v_840) then (if not-caught-fail(v_847) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then (if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (v_857,5-proj-7-tuple(v_834),v_858) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {379}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {380}insert statestore(bob,alice,statepack_c(hs_859));
        {381}out(pub, message_b_861)
    ) | (
        {408}get statestore(=bob,=alice,statepack_c(hs_862: handshakestate)) in
        {383}in(pub, message_c_863: bitstring);
        {384}let v_864: bitstring = catch-fail(handshakestateunpack(hs_862)) in
        {385}let v_865: bitstring = catch-fail(deconcat3(message_c_863)) in
        {386}let v_866: bool = catch-fail(true) in
        {387}let v_867: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_864))) in
        {388}let v_868: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_864))) in
        {389}let v_869: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_868),(if (success?(4-proj-7-tuple(v_864)) && success?(3-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),4-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {390}let v_870: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_868),(if (success?(4-proj-7-tuple(v_864)) && success?(3-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),4-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {391}let v_871: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_868),(if (success?(4-proj-7-tuple(v_864)) && success?(3-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),4-proj-7-tuple(v_864)) else fail-any) else fail-any))) in
        {392}let v_872: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_864)) && success?(3-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),4-proj-7-tuple(v_864)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_868))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then (v_869,v_870,v_871) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {393}let v_873: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_864)) && success?(3-proj-7-tuple(v_864))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),4-proj-7-tuple(v_864)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_864))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_872)) then cipherstatepack(2-proj-3-tuple(v_872),minnonce) else fail-any),1-proj-3-tuple(v_872),3-proj-3-tuple(v_868)) else fail-any) else fail-any) else fail-any)) in
        {394}let v_874: bitstring = catch-fail(symmetricstateunpack(v_873)) in
        {395}let v_875: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {396}let v_876: aead = catch-fail(decrypt(1-proj-2-tuple(v_875),2-proj-2-tuple(v_875),3-proj-3-tuple(v_874),3-proj-3-tuple(v_865))) in
        {397}let v_877: bitstring = catch-fail(aeadunpack(v_876)) in
        {398}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {399}let v_879: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_875))) && success?(1-proj-3-tuple(v_874))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then cipherstatepack(1-proj-2-tuple(v_878),increment_nonce(2-proj-2-tuple(v_875))) else fail-any) else fail-any)) in
        {400}let v_880: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_865)) && (success?(3-proj-3-tuple(v_874)) && success?(1-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-2-tuple(v_875))))) then (if not-caught-fail(v_876) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if not-caught-fail(v_879) then (v_879,3-proj-3-tuple(v_877),1-proj-3-tuple(v_877)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {401}let v_881: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) in
        {402}let v_882: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_865)) && success?(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack(1-proj-3-tuple(v_881),2-proj-3-tuple(v_881),hash(3-proj-3-tuple(v_881),3-proj-3-tuple(v_865))) else fail-any) else fail-any)) in
        {403}let v_883: bitstring = catch-fail((if success?(3-proj-3-tuple(v_865)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (v_882,2-proj-3-tuple(v_880),3-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {404}let v_884: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_883),2-proj-7-tuple(v_864),3-proj-7-tuple(v_864),4-proj-7-tuple(v_864),5-proj-7-tuple(v_864),6-proj-7-tuple(v_864),7-proj-7-tuple(v_864))) in
        {405}let (hs_885: handshakestate,re_886: key,plaintext_c: bitstring,valid_887: bool) = (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-7-tuple(v_864))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_866) then (if not-caught-fail(v_873) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if (v_866 && 3-proj-3-tuple(v_883)) then (if not-caught-fail(v_884) then (v_884,getpublickey(3-proj-7-tuple(v_864)),2-proj-3-tuple(v_883),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {406}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_887);
        {407}insert statestore(bob,alice,statepack_d(hs_885))
    ) | (
        {426}get statestore(=bob,=alice,statepack_d(hs_888: handshakestate)) in
        {409}let v_889: bitstring = catch-fail(handshakestateunpack(hs_888)) in
        {410}let v_890: bitstring = catch-fail((empty,empty,empty)) in
        {411}let v_891: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_889))) in
        {412}let v_892: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {413}let v_893: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_892),2-proj-2-tuple(v_892),3-proj-3-tuple(v_891),msg_d(bob,alice))) in
        {414}let v_894: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {415}let v_895: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_892))) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then cipherstatepack(1-proj-2-tuple(v_894),increment_nonce(2-proj-2-tuple(v_892))) else fail-any) else fail-any)) in
        {416}let v_896: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_891)) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_895) then (v_895,v_893) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {417}let v_897: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) in
        {418}let v_898: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_896)) && success?(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_897),hash(3-proj-3-tuple(v_897),2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {419}let v_899: bitstring = catch-fail((if success?(1-proj-7-tuple(v_889)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_898) then (v_898,2-proj-2-tuple(v_896)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {420}let v_900: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_899),2-proj-7-tuple(v_889),3-proj-7-tuple(v_889),4-proj-7-tuple(v_889),5-proj-7-tuple(v_889),6-proj-7-tuple(v_889),7-proj-7-tuple(v_889))) in
        {421}let v_901: bitstring = catch-fail(concat3(1-proj-3-tuple(v_890),2-proj-3-tuple(v_890),2-proj-2-tuple(v_899))) in
        {422}let (hs_902: handshakestate,re_903: key,message_d_904: bitstring) = (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-7-tuple(v_889))))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (v_900,5-proj-7-tuple(v_889),v_901) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {423}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {424}insert statestore(bob,alice,statepack_e(hs_902));
        {425}out(pub, message_d_904)
    ) | (
        {454}get statestore(=bob,=alice,statepack_e(hs_905: handshakestate)) in
        {427}in(pub, message_e_906: bitstring);
        {428}let v_907: bitstring = catch-fail(handshakestateunpack(hs_905)) in
        {429}let v_908: bitstring = catch-fail(deconcat3(message_e_906)) in
        {430}let v_909: bool = catch-fail(true) in
        {431}let v_910: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
        {432}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {433}let v_912: aead = catch-fail(decrypt(1-proj-2-tuple(v_911),2-proj-2-tuple(v_911),3-proj-3-tuple(v_910),3-proj-3-tuple(v_908))) in
        {434}let v_913: bitstring = catch-fail(aeadunpack(v_912)) in
        {435}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {436}let v_915: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_911))) && success?(1-proj-3-tuple(v_910))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then cipherstatepack(1-proj-2-tuple(v_914),increment_nonce(2-proj-2-tuple(v_911))) else fail-any) else fail-any)) in
        {437}let v_916: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_910)) && success?(1-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if not-caught-fail(v_915) then (v_915,3-proj-3-tuple(v_913),1-proj-3-tuple(v_913)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {438}let v_917: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) in
        {439}let v_918: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then symmetricstatepack(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),hash(3-proj-3-tuple(v_917),3-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {440}let v_919: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(1-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {441}let v_920: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_919),2-proj-7-tuple(v_907),3-proj-7-tuple(v_907),4-proj-7-tuple(v_907),5-proj-7-tuple(v_907),6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
        {442}let v_921: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_919))) in
        {443}let v_922: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_921),zero)) in
        {444}let v_923: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_921),zero)) in
        {445}let v_924: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_921),zero)) in
        {446}let v_925: bitstring = catch-fail((if success?(2-proj-3-tuple(v_921)) then (if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (v_922,v_923,v_924) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {447}let v_926: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_925)) then cipherstatepack(1-proj-3-tuple(v_925),minnonce) else fail-any)) in
        {448}let v_927: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_925)) then cipherstatepack(2-proj-3-tuple(v_925),minnonce) else fail-any)) in
        {449}let v_928: bitstring = catch-fail((if success?(1-proj-3-tuple(v_919)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if not-caught-fail(v_926) then (if not-caught-fail(v_927) then (1-proj-3-tuple(v_919),v_926,v_927) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let (hs_929: handshakestate,re_930: key,plaintext_e: bitstring,valid_931: bool,cs1_932: cipherstate,cs2_933: cipherstate) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_909) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if (v_909 && 3-proj-3-tuple(v_919)) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (v_920,getpublickey(3-proj-7-tuple(v_907)),2-proj-3-tuple(v_919),true,2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {451}event RecvMsg(bob,alice,stage_e,plaintext_e,valid_931);
        {452}insert statestore(bob,alice,statepack_f(hs_929));
        {453}event RecvEnd(valid_931)
    ) | (
        {455}event LeakS(phase0,bob);
        {456}out(pub, key_s(bob))
    ) | (
        {457}phase 1;
        {458}event LeakS(phase1,bob);
        {459}out(pub, key_s(bob))
    )
) | (
    {460}let v_934: key = catch-fail(dhexp(key_s(bob),g)) in
    {461}let s_935: keypair = (if not-caught-fail(v_934) then keypairpack(v_934,key_s(bob)) else fail-any) in
    {462}out(pub, getpublickey(s_935));
    (
        {463}let e_936: keypair = keypairpack(empty,empty) in
        {464}let v_937: key = catch-fail(dhexp(key_s(charlie),g)) in
        {465}let rs_938: key = getpublickey((if not-caught-fail(v_937) then keypairpack(v_937,key_s(charlie)) else fail-any)) in
        {466}let re_939: key = empty in
        {467}let v_940: bitstring = catch-fail(hash(somename,empty)) in
        {468}let v_941: key = catch-fail(v_940) in
        {469}let v_942: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {470}let v_943: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then symmetricstatepack(v_942,v_941,v_940) else fail-any) else fail-any) else fail-any))) in
        {471}let v_944: symmetricstate = catch-fail((if success?((if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then symmetricstatepack(v_942,v_941,v_940) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then symmetricstatepack(1-proj-3-tuple(v_943),2-proj-3-tuple(v_943),hash(3-proj-3-tuple(v_943),empty)) else fail-any) else fail-any)) in
        {472}let v_945: bitstring = catch-fail(symmetricstateunpack(v_944)) in
        {473}let v_946: symmetricstate = catch-fail((if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then symmetricstatepack(1-proj-3-tuple(v_945),2-proj-3-tuple(v_945),hash(3-proj-3-tuple(v_945),rs_938)) else fail-any)) in
        {474}let v_947: bitstring = catch-fail(symmetricstateunpack(v_946)) in
        {475}let v_948: symmetricstate = catch-fail((if success?(getpublickey(s_935)) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-3-tuple(v_947))))) then symmetricstatepack(1-proj-3-tuple(v_947),2-proj-3-tuple(v_947),hash(3-proj-3-tuple(v_947),getpublickey(s_935))) else fail-any) else fail-any)) in
        {476}let hs_949: handshakestate = (if not-caught-fail(v_944) then (if not-caught-fail(v_946) then (if not-caught-fail(v_948) then handshakestatepack(v_948,s_935,e_936,rs_938,re_939,empty,false) else fail-any) else fail-any) else fail-any) in
        {477}insert statestore(bob,charlie,statepack_a(hs_949))
    ) | (
        {506}get statestore(=bob,=charlie,statepack_a(hs_950: handshakestate)) in
        {478}in(pub, message_a_951: bitstring);
        {479}let v_952: bitstring = catch-fail(handshakestateunpack(hs_950)) in
        {480}let v_953: bitstring = catch-fail(deconcat3(message_a_951)) in
        {481}let v_954: bool = catch-fail(true) in
        {482}let v_955: key = catch-fail(1-proj-3-tuple(v_953)) in
        {483}let v_956: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_952))) in
        {484}let v_957: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_952)) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then symmetricstatepack(1-proj-3-tuple(v_956),2-proj-3-tuple(v_956),hash(3-proj-3-tuple(v_956),v_955)) else fail-any) else fail-any)) in
        {485}let v_958: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_952))) in
        {486}let v_959: bitstring = catch-fail(symmetricstateunpack(v_957)) in
        {487}let v_960: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_959),(if success?(2-proj-7-tuple(v_952)) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then dhexp(2-proj-2-tuple(v_958),v_955) else fail-any) else fail-any))) in
        {488}let v_961: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_959),(if success?(2-proj-7-tuple(v_952)) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then dhexp(2-proj-2-tuple(v_958),v_955) else fail-any) else fail-any))) in
        {489}let v_962: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_959),(if success?(2-proj-7-tuple(v_952)) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then dhexp(2-proj-2-tuple(v_958),v_955) else fail-any) else fail-any))) in
        {490}let v_963: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_952)) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then dhexp(2-proj-2-tuple(v_958),v_955) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_959))) then (if not-caught-fail(v_960) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (v_960,v_961,v_962) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {491}let v_964: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_952)) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then dhexp(2-proj-2-tuple(v_958),v_955) else fail-any) else fail-any)) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_963)) then cipherstatepack(2-proj-3-tuple(v_963),minnonce) else fail-any),1-proj-3-tuple(v_963),3-proj-3-tuple(v_959)) else fail-any) else fail-any) else fail-any)) in
        {492}let v_965: bitstring = catch-fail(symmetricstateunpack(v_964)) in
        {493}let v_966: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_965))) in
        {494}let v_967: aead = catch-fail(decrypt(1-proj-2-tuple(v_966),2-proj-2-tuple(v_966),3-proj-3-tuple(v_965),3-proj-3-tuple(v_953))) in
        {495}let v_968: bitstring = catch-fail(aeadunpack(v_967)) in
        {496}let v_969: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_965))) in
        {497}let v_970: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_966))) && success?(1-proj-3-tuple(v_965))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-2-tuple(v_969))))) then cipherstatepack(1-proj-2-tuple(v_969),increment_nonce(2-proj-2-tuple(v_966))) else fail-any) else fail-any)) in
        {498}let v_971: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_953)) && (success?(3-proj-3-tuple(v_965)) && success?(1-proj-3-tuple(v_965)))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then (if not-caught-fail(v_967) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then (if not-caught-fail(v_970) then (v_970,3-proj-3-tuple(v_968),1-proj-3-tuple(v_968)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {499}let v_972: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_971),2-proj-3-tuple(v_965),3-proj-3-tuple(v_965)))) in
        {500}let v_973: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_953)) && success?(symmetricstatepack(1-proj-3-tuple(v_971),2-proj-3-tuple(v_965),3-proj-3-tuple(v_965)))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_972),hash(3-proj-3-tuple(v_972),3-proj-3-tuple(v_953))) else fail-any) else fail-any)) in
        {501}let v_974: bitstring = catch-fail((if success?(3-proj-3-tuple(v_953)) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then (if not-caught-fail(v_973) then (v_973,2-proj-3-tuple(v_971),3-proj-3-tuple(v_971)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {502}let v_975: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_974),2-proj-7-tuple(v_952),3-proj-7-tuple(v_952),4-proj-7-tuple(v_952),v_955,6-proj-7-tuple(v_952),7-proj-7-tuple(v_952))) in
        {503}let (hs_976: handshakestate,re_977: key,plaintext_a_978: bitstring,valid_979: bool) = (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-7-tuple(v_952))))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if not-caught-fail(v_954) then (if not-caught-fail(v_955) then (if not-caught-fail(v_957) then (if not-caught-fail(v_964) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if (v_954 && 3-proj-3-tuple(v_974)) then (if not-caught-fail(v_975) then (v_975,getpublickey(3-proj-7-tuple(v_952)),2-proj-3-tuple(v_974),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {504}event RecvMsg(bob,charlie,stage_a,plaintext_a_978,valid_979);
        {505}insert statestore(bob,charlie,statepack_b(hs_976))
    ) | (
        {536}get statestore(=bob,=charlie,statepack_b(hs_980: handshakestate)) in
        {507}let v_981: bitstring = catch-fail(handshakestateunpack(hs_980)) in
        {508}let v_982: bitstring = catch-fail((empty,empty,empty)) in
        {509}let v_983: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {510}let v_984: keypair = catch-fail((if not-caught-fail(v_983) then keypairpack(v_983,key_e(bob,charlie)) else fail-any)) in
        {511}let v_985: bitstring = catch-fail(getpublickey(v_984)) in
        {512}let v_986: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_981))) in
        {513}let v_987: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_981)) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then symmetricstatepack(1-proj-3-tuple(v_986),2-proj-3-tuple(v_986),hash(3-proj-3-tuple(v_986),v_985)) else fail-any) else fail-any)) in
        {514}let v_988: bitstring = catch-fail(keypairunpack(v_984)) in
        {515}let v_989: bitstring = catch-fail(symmetricstateunpack(v_987)) in
        {516}let v_990: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_989),(if success?(5-proj-7-tuple(v_981)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),5-proj-7-tuple(v_981)) else fail-any) else fail-any))) in
        {517}let v_991: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_989),(if success?(5-proj-7-tuple(v_981)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),5-proj-7-tuple(v_981)) else fail-any) else fail-any))) in
        {518}let v_992: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_989),(if success?(5-proj-7-tuple(v_981)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),5-proj-7-tuple(v_981)) else fail-any) else fail-any))) in
        {519}let v_993: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_981)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),5-proj-7-tuple(v_981)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_989))) then (if not-caught-fail(v_990) then (if not-caught-fail(v_991) then (if not-caught-fail(v_992) then (v_990,v_991,v_992) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {520}let v_994: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_981)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then dhexp(2-proj-2-tuple(v_988),5-proj-7-tuple(v_981)) else fail-any) else fail-any)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_993)) then cipherstatepack(2-proj-3-tuple(v_993),minnonce) else fail-any),1-proj-3-tuple(v_993),3-proj-3-tuple(v_989)) else fail-any) else fail-any) else fail-any)) in
        {521}let v_995: bitstring = catch-fail(symmetricstateunpack(v_994)) in
        {522}let v_996: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_995))) in
        {523}let v_997: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_996),2-proj-2-tuple(v_996),3-proj-3-tuple(v_995),msg_b(bob,charlie))) in
        {524}let v_998: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_995))) in
        {525}let v_999: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_996))) && success?(1-proj-3-tuple(v_995))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-2-tuple(v_998))))) then cipherstatepack(1-proj-2-tuple(v_998),increment_nonce(2-proj-2-tuple(v_996))) else fail-any) else fail-any)) in
        {526}let v_1000: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_995)) && success?(1-proj-3-tuple(v_995))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then (if not-caught-fail(v_997) then (if not-caught-fail(v_999) then (v_999,v_997) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {527}let v_1001: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1000),2-proj-3-tuple(v_995),3-proj-3-tuple(v_995)))) in
        {528}let v_1002: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1000)) && success?(symmetricstatepack(1-proj-2-tuple(v_1000),2-proj-3-tuple(v_995),3-proj-3-tuple(v_995)))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then symmetricstatepack(1-proj-3-tuple(v_1001),2-proj-3-tuple(v_1001),hash(3-proj-3-tuple(v_1001),2-proj-2-tuple(v_1000))) else fail-any) else fail-any)) in
        {529}let v_1003: bitstring = catch-fail((if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-2-tuple(v_1000))))) then (if not-caught-fail(v_1002) then (v_1002,2-proj-2-tuple(v_1000)) else fail-any) else fail-any) else fail-any)) in
        {530}let v_1004: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1003),2-proj-7-tuple(v_981),v_984,4-proj-7-tuple(v_981),5-proj-7-tuple(v_981),6-proj-7-tuple(v_981),7-proj-7-tuple(v_981))) in
        {531}let v_1005: bitstring = catch-fail(concat3(v_985,2-proj-3-tuple(v_982),2-proj-2-tuple(v_1003))) in
        {532}let (hs_1006: handshakestate,re_1007: key,message_b_1008: bitstring) = (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-7-tuple(v_981))))) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then (if not-caught-fail(v_984) then (if not-caught-fail(v_985) then (if not-caught-fail(v_987) then (if not-caught-fail(v_994) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-2-tuple(v_1003))))) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1005) then (v_1004,5-proj-7-tuple(v_981),v_1005) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {533}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {534}insert statestore(bob,charlie,statepack_c(hs_1006));
        {535}out(pub, message_b_1008)
    ) | (
        {562}get statestore(=bob,=charlie,statepack_c(hs_1009: handshakestate)) in
        {537}in(pub, message_c_1010: bitstring);
        {538}let v_1011: bitstring = catch-fail(handshakestateunpack(hs_1009)) in
        {539}let v_1012: bitstring = catch-fail(deconcat3(message_c_1010)) in
        {540}let v_1013: bool = catch-fail(true) in
        {541}let v_1014: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1011))) in
        {542}let v_1015: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1011))) in
        {543}let v_1016: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1015),(if (success?(4-proj-7-tuple(v_1011)) && success?(3-proj-7-tuple(v_1011))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then dhexp(2-proj-2-tuple(v_1014),4-proj-7-tuple(v_1011)) else fail-any) else fail-any))) in
        {544}let v_1017: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1015),(if (success?(4-proj-7-tuple(v_1011)) && success?(3-proj-7-tuple(v_1011))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then dhexp(2-proj-2-tuple(v_1014),4-proj-7-tuple(v_1011)) else fail-any) else fail-any))) in
        {545}let v_1018: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1015),(if (success?(4-proj-7-tuple(v_1011)) && success?(3-proj-7-tuple(v_1011))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then dhexp(2-proj-2-tuple(v_1014),4-proj-7-tuple(v_1011)) else fail-any) else fail-any))) in
        {546}let v_1019: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1011)) && success?(3-proj-7-tuple(v_1011))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then dhexp(2-proj-2-tuple(v_1014),4-proj-7-tuple(v_1011)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1015))) then (if not-caught-fail(v_1016) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then (v_1016,v_1017,v_1018) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {547}let v_1020: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1011)) && success?(3-proj-7-tuple(v_1011))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then dhexp(2-proj-2-tuple(v_1014),4-proj-7-tuple(v_1011)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1011))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1019)) then cipherstatepack(2-proj-3-tuple(v_1019),minnonce) else fail-any),1-proj-3-tuple(v_1019),3-proj-3-tuple(v_1015)) else fail-any) else fail-any) else fail-any)) in
        {548}let v_1021: bitstring = catch-fail(symmetricstateunpack(v_1020)) in
        {549}let v_1022: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1021))) in
        {550}let v_1023: aead = catch-fail(decrypt(1-proj-2-tuple(v_1022),2-proj-2-tuple(v_1022),3-proj-3-tuple(v_1021),3-proj-3-tuple(v_1012))) in
        {551}let v_1024: bitstring = catch-fail(aeadunpack(v_1023)) in
        {552}let v_1025: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1021))) in
        {553}let v_1026: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1022))) && success?(1-proj-3-tuple(v_1021))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then cipherstatepack(1-proj-2-tuple(v_1025),increment_nonce(2-proj-2-tuple(v_1022))) else fail-any) else fail-any)) in
        {554}let v_1027: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1012)) && (success?(3-proj-3-tuple(v_1021)) && success?(1-proj-3-tuple(v_1021)))) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-2-tuple(v_1022))))) then (if not-caught-fail(v_1023) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-3-tuple(v_1024))))) then (if not-caught-fail(v_1026) then (v_1026,3-proj-3-tuple(v_1024),1-proj-3-tuple(v_1024)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {555}let v_1028: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1027),2-proj-3-tuple(v_1021),3-proj-3-tuple(v_1021)))) in
        {556}let v_1029: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1012)) && success?(symmetricstatepack(1-proj-3-tuple(v_1027),2-proj-3-tuple(v_1021),3-proj-3-tuple(v_1021)))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1028),hash(3-proj-3-tuple(v_1028),3-proj-3-tuple(v_1012))) else fail-any) else fail-any)) in
        {557}let v_1030: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1012)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-3-tuple(v_1027))))) then (if not-caught-fail(v_1029) then (v_1029,2-proj-3-tuple(v_1027),3-proj-3-tuple(v_1027)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1031: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1030),2-proj-7-tuple(v_1011),3-proj-7-tuple(v_1011),4-proj-7-tuple(v_1011),5-proj-7-tuple(v_1011),6-proj-7-tuple(v_1011),7-proj-7-tuple(v_1011))) in
        {559}let (hs_1032: handshakestate,re_1033: key,plaintext_c_1034: bitstring,valid_1035: bool) = (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-7-tuple(v_1011))))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-3-tuple(v_1012))))) then (if not-caught-fail(v_1013) then (if not-caught-fail(v_1020) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then (if (v_1013 && 3-proj-3-tuple(v_1030)) then (if not-caught-fail(v_1031) then (v_1031,getpublickey(3-proj-7-tuple(v_1011)),2-proj-3-tuple(v_1030),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {560}event RecvMsg(bob,charlie,stage_c,plaintext_c_1034,valid_1035);
        {561}insert statestore(bob,charlie,statepack_d(hs_1032))
    ) | (
        {580}get statestore(=bob,=charlie,statepack_d(hs_1036: handshakestate)) in
        {563}let v_1037: bitstring = catch-fail(handshakestateunpack(hs_1036)) in
        {564}let v_1038: bitstring = catch-fail((empty,empty,empty)) in
        {565}let v_1039: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1037))) in
        {566}let v_1040: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {567}let v_1041: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1040),2-proj-2-tuple(v_1040),3-proj-3-tuple(v_1039),msg_d(bob,charlie))) in
        {568}let v_1042: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {569}let v_1043: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1040))) && success?(1-proj-3-tuple(v_1039))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then cipherstatepack(1-proj-2-tuple(v_1042),increment_nonce(2-proj-2-tuple(v_1040))) else fail-any) else fail-any)) in
        {570}let v_1044: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1039)) && success?(1-proj-3-tuple(v_1039))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then (if not-caught-fail(v_1041) then (if not-caught-fail(v_1043) then (v_1043,v_1041) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {571}let v_1045: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1044),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) in
        {572}let v_1046: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1044)) && success?(symmetricstatepack(1-proj-2-tuple(v_1044),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1045),hash(3-proj-3-tuple(v_1045),2-proj-2-tuple(v_1044))) else fail-any) else fail-any)) in
        {573}let v_1047: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1037)) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then (if not-caught-fail(v_1046) then (v_1046,2-proj-2-tuple(v_1044)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {574}let v_1048: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1047),2-proj-7-tuple(v_1037),3-proj-7-tuple(v_1037),4-proj-7-tuple(v_1037),5-proj-7-tuple(v_1037),6-proj-7-tuple(v_1037),7-proj-7-tuple(v_1037))) in
        {575}let v_1049: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1038),2-proj-3-tuple(v_1038),2-proj-2-tuple(v_1047))) in
        {576}let (hs_1050: handshakestate,re_1051: key,message_d_1052: bitstring) = (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-7-tuple(v_1037))))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then (if not-caught-fail(v_1048) then (if not-caught-fail(v_1049) then (v_1048,5-proj-7-tuple(v_1037),v_1049) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {577}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {578}insert statestore(bob,charlie,statepack_e(hs_1050));
        {579}out(pub, message_d_1052)
    ) | (
        {608}get statestore(=bob,=charlie,statepack_e(hs_1053: handshakestate)) in
        {581}in(pub, message_e_1054: bitstring);
        {582}let v_1055: bitstring = catch-fail(handshakestateunpack(hs_1053)) in
        {583}let v_1056: bitstring = catch-fail(deconcat3(message_e_1054)) in
        {584}let v_1057: bool = catch-fail(true) in
        {585}let v_1058: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1055))) in
        {586}let v_1059: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1058))) in
        {587}let v_1060: aead = catch-fail(decrypt(1-proj-2-tuple(v_1059),2-proj-2-tuple(v_1059),3-proj-3-tuple(v_1058),3-proj-3-tuple(v_1056))) in
        {588}let v_1061: bitstring = catch-fail(aeadunpack(v_1060)) in
        {589}let v_1062: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1058))) in
        {590}let v_1063: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1059))) && success?(1-proj-3-tuple(v_1058))) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-2-tuple(v_1062))))) then cipherstatepack(1-proj-2-tuple(v_1062),increment_nonce(2-proj-2-tuple(v_1059))) else fail-any) else fail-any)) in
        {591}let v_1064: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1056)) && (success?(3-proj-3-tuple(v_1058)) && success?(1-proj-3-tuple(v_1058)))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then (if not-caught-fail(v_1060) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then (if not-caught-fail(v_1063) then (v_1063,3-proj-3-tuple(v_1061),1-proj-3-tuple(v_1061)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1065: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1064),2-proj-3-tuple(v_1058),3-proj-3-tuple(v_1058)))) in
        {593}let v_1066: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1056)) && success?(symmetricstatepack(1-proj-3-tuple(v_1064),2-proj-3-tuple(v_1058),3-proj-3-tuple(v_1058)))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then symmetricstatepack(1-proj-3-tuple(v_1065),2-proj-3-tuple(v_1065),hash(3-proj-3-tuple(v_1065),3-proj-3-tuple(v_1056))) else fail-any) else fail-any)) in
        {594}let v_1067: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1056)) && success?(1-proj-7-tuple(v_1055))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then (if not-caught-fail(v_1066) then (v_1066,2-proj-3-tuple(v_1064),3-proj-3-tuple(v_1064)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {595}let v_1068: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1067),2-proj-7-tuple(v_1055),3-proj-7-tuple(v_1055),4-proj-7-tuple(v_1055),5-proj-7-tuple(v_1055),6-proj-7-tuple(v_1055),7-proj-7-tuple(v_1055))) in
        {596}let v_1069: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1067))) in
        {597}let v_1070: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1069),zero)) in
        {598}let v_1071: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1069),zero)) in
        {599}let v_1072: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1069),zero)) in
        {600}let v_1073: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1069)) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1071) then (if not-caught-fail(v_1072) then (v_1070,v_1071,v_1072) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {601}let v_1074: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1073)) then cipherstatepack(1-proj-3-tuple(v_1073),minnonce) else fail-any)) in
        {602}let v_1075: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1073)) then cipherstatepack(2-proj-3-tuple(v_1073),minnonce) else fail-any)) in
        {603}let v_1076: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1067)) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-3-tuple(v_1073))))) then (if not-caught-fail(v_1074) then (if not-caught-fail(v_1075) then (1-proj-3-tuple(v_1067),v_1074,v_1075) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {604}let (hs_1077: handshakestate,re_1078: key,plaintext_e_1079: bitstring,valid_1080: bool,cs1_1081: cipherstate,cs2_1082: cipherstate) = (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-7-tuple(v_1055))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if not-caught-fail(v_1057) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-3-tuple(v_1067))))) then (if (v_1057 && 3-proj-3-tuple(v_1067)) then (if not-caught-fail(v_1068) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then (v_1068,getpublickey(3-proj-7-tuple(v_1055)),2-proj-3-tuple(v_1067),true,2-proj-3-tuple(v_1076),3-proj-3-tuple(v_1076)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {605}event RecvMsg(bob,charlie,stage_e,plaintext_e_1079,valid_1080);
        {606}insert statestore(bob,charlie,statepack_f(hs_1077));
        {607}event RecvEnd(valid_1080)
    ) | (
        {609}event LeakS(phase0,bob);
        {610}out(pub, key_s(bob))
    ) | (
        {611}phase 1;
        {612}event LeakS(phase1,bob);
        {613}out(pub, key_s(bob))
    )
) | (
    {614}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1163,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1163,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 163 rules in the queue.
400 rules inserted. The rule base contains 391 rules. 58 rules in the queue.
600 rules inserted. The rule base contains 579 rules. 125 rules in the queue.
800 rules inserted. The rule base contains 775 rules. 206 rules in the queue.
1000 rules inserted. The rule base contains 964 rules. 290 rules in the queue.
1200 rules inserted. The rule base contains 1143 rules. 260 rules in the queue.
1400 rules inserted. The rule base contains 1335 rules. 374 rules in the queue.
1600 rules inserted. The rule base contains 1509 rules. 389 rules in the queue.
1800 rules inserted. The rule base contains 1678 rules. 366 rules in the queue.
2000 rules inserted. The rule base contains 1861 rules. 384 rules in the queue.
2200 rules inserted. The rule base contains 2017 rules. 398 rules in the queue.
2400 rules inserted. The rule base contains 2153 rules. 334 rules in the queue.
2600 rules inserted. The rule base contains 2285 rules. 304 rules in the queue.
2800 rules inserted. The rule base contains 2449 rules. 302 rules in the queue.
3000 rules inserted. The rule base contains 2554 rules. 319 rules in the queue.
3200 rules inserted. The rule base contains 2669 rules. 320 rules in the queue.
3400 rules inserted. The rule base contains 2797 rules. 324 rules in the queue.
3600 rules inserted. The rule base contains 2813 rules. 310 rules in the queue.
3800 rules inserted. The rule base contains 2956 rules. 309 rules in the queue.
4000 rules inserted. The rule base contains 3102 rules. 312 rules in the queue.
4200 rules inserted. The rule base contains 3261 rules. 315 rules in the queue.
4400 rules inserted. The rule base contains 3360 rules. 268 rules in the queue.
4600 rules inserted. The rule base contains 3508 rules. 268 rules in the queue.
4800 rules inserted. The rule base contains 3660 rules. 285 rules in the queue.
5000 rules inserted. The rule base contains 3809 rules. 299 rules in the queue.
5200 rules inserted. The rule base contains 3953 rules. 300 rules in the queue.
5400 rules inserted. The rule base contains 4118 rules. 329 rules in the queue.
5600 rules inserted. The rule base contains 4299 rules. 362 rules in the queue.
5800 rules inserted. The rule base contains 4470 rules. 367 rules in the queue.
6000 rules inserted. The rule base contains 4649 rules. 354 rules in the queue.
6200 rules inserted. The rule base contains 4771 rules. 334 rules in the queue.
6400 rules inserted. The rule base contains 4908 rules. 323 rules in the queue.
6600 rules inserted. The rule base contains 5072 rules. 332 rules in the queue.
6800 rules inserted. The rule base contains 5209 rules. 340 rules in the queue.
7000 rules inserted. The rule base contains 5360 rules. 357 rules in the queue.
7200 rules inserted. The rule base contains 5533 rules. 343 rules in the queue.
7400 rules inserted. The rule base contains 5660 rules. 323 rules in the queue.
7600 rules inserted. The rule base contains 5793 rules. 291 rules in the queue.
7800 rules inserted. The rule base contains 5948 rules. 272 rules in the queue.
8000 rules inserted. The rule base contains 6081 rules. 246 rules in the queue.
8200 rules inserted. The rule base contains 6189 rules. 250 rules in the queue.
8400 rules inserted. The rule base contains 6307 rules. 247 rules in the queue.
8600 rules inserted. The rule base contains 6436 rules. 217 rules in the queue.
8800 rules inserted. The rule base contains 6545 rules. 149 rules in the queue.
9000 rules inserted. The rule base contains 6602 rules. 68 rules in the queue.
9200 rules inserted. The rule base contains 6589 rules. 12 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {308}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {458}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {459}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

26. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {308}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {458}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {459}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

26. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {308}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {458}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {459}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

26. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1163,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1163,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1163,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1163,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
