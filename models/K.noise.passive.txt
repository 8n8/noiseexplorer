File "K.noise.passive.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 263, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 264, character 36:
Warning: identifier h rebound.
File "K.noise.passive.pv", line 273, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 279, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 307, character 6:
Warning: identifier e rebound.
File "K.noise.passive.pv", line 308, characters 6-7:
Warning: identifier ne rebound.
File "K.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 323, characters 6-7:
Warning: identifier re rebound.
File "K.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 330, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 398, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 307, character 6:
Warning: identifier e rebound.
File "K.noise.passive.pv", line 308, characters 6-7:
Warning: identifier ne rebound.
File "K.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 273, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 426, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 323, characters 6-7:
Warning: identifier re rebound.
File "K.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 327, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 330, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 279, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let v_330: key = catch-fail(dhexp(key_s(alice),g)) in
    {3}let s_331: keypair = (if not-caught-fail(v_330) then keypairpack(v_330,key_s(alice)) else fail-any) in
    {4}out(pub, getpublickey(s_331));
    (
        {5}let e_332: keypair = keypairpack(empty,empty) in
        {6}let v_333: key = catch-fail(dhexp(key_s(bob),g)) in
        {7}let rs_334: key = getpublickey((if not-caught-fail(v_333) then keypairpack(v_333,key_s(bob)) else fail-any)) in
        {8}let re_335: key = empty in
        {9}let v_336: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_337: key = catch-fail(v_336) in
        {11}let v_338: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_339: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_336) then (if not-caught-fail(v_337) then (if not-caught-fail(v_338) then symmetricstatepack(v_338,v_337,v_336) else fail-any) else fail-any) else fail-any))) in
        {13}let v_340: symmetricstate = catch-fail((if success?((if not-caught-fail(v_336) then (if not-caught-fail(v_337) then (if not-caught-fail(v_338) then symmetricstatepack(v_338,v_337,v_336) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_339) && success?(is-true(success?(1-proj-3-tuple(v_339))))) then symmetricstatepack(1-proj-3-tuple(v_339),2-proj-3-tuple(v_339),hash(3-proj-3-tuple(v_339),empty)) else fail-any) else fail-any)) in
        {14}let v_341: bitstring = catch-fail(symmetricstateunpack(v_340)) in
        {15}let v_342: symmetricstate = catch-fail((if success?(getpublickey(s_331)) then (if (not-caught-fail(v_341) && success?(is-true(success?(1-proj-3-tuple(v_341))))) then symmetricstatepack(1-proj-3-tuple(v_341),2-proj-3-tuple(v_341),hash(3-proj-3-tuple(v_341),getpublickey(s_331))) else fail-any) else fail-any)) in
        {16}let v_343: bitstring = catch-fail(symmetricstateunpack(v_342)) in
        {17}let v_344: symmetricstate = catch-fail((if (not-caught-fail(v_343) && success?(is-true(success?(1-proj-3-tuple(v_343))))) then symmetricstatepack(1-proj-3-tuple(v_343),2-proj-3-tuple(v_343),hash(3-proj-3-tuple(v_343),rs_334)) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_340) then (if not-caught-fail(v_342) then (if not-caught-fail(v_344) then handshakestatepack(v_344,s_331,e_332,rs_334,re_335,empty,true) else fail-any) else fail-any) else fail-any) in
        {19}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {64}get statestore(=alice,=bob,statepack_a(hs_345: handshakestate)) in
        {20}let v_346: bitstring = catch-fail(handshakestateunpack(hs_345)) in
        {21}let v_347: bitstring = catch-fail((empty,empty,empty)) in
        {22}let v_348: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {23}let v_349: keypair = catch-fail((if not-caught-fail(v_348) then keypairpack(v_348,key_e(alice,bob)) else fail-any)) in
        {24}let v_350: bitstring = catch-fail(getpublickey(v_349)) in
        {25}let v_351: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_346))) in
        {26}let v_352: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_346)) then (if (not-caught-fail(v_351) && success?(is-true(success?(1-proj-3-tuple(v_351))))) then symmetricstatepack(1-proj-3-tuple(v_351),2-proj-3-tuple(v_351),hash(3-proj-3-tuple(v_351),v_350)) else fail-any) else fail-any)) in
        {27}let v_353: bitstring = catch-fail(keypairunpack(v_349)) in
        {28}let v_354: bitstring = catch-fail(symmetricstateunpack(v_352)) in
        {29}let v_355: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_354),(if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {30}let v_356: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_354),(if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {31}let v_357: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_354),(if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {32}let v_358: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_354))) then (if not-caught-fail(v_355) then (if not-caught-fail(v_356) then (if not-caught-fail(v_357) then (v_355,v_356,v_357) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {33}let v_359: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any)) then (if (not-caught-fail(v_354) && success?(is-true(success?(1-proj-3-tuple(v_354))))) then (if (not-caught-fail(v_358) && success?(is-true(success?(1-proj-3-tuple(v_358))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_358)) then cipherstatepack(2-proj-3-tuple(v_358),minnonce) else fail-any),1-proj-3-tuple(v_358),3-proj-3-tuple(v_354)) else fail-any) else fail-any) else fail-any)) in
        {34}let v_360: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_346))) in
        {35}let v_361: bitstring = catch-fail(symmetricstateunpack(v_359)) in
        {36}let v_362: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_361),(if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {37}let v_363: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_361),(if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {38}let v_364: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_361),(if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {39}let v_365: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_361))) then (if not-caught-fail(v_362) then (if not-caught-fail(v_363) then (if not-caught-fail(v_364) then (v_362,v_363,v_364) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_366: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any)) then (if (not-caught-fail(v_361) && success?(is-true(success?(1-proj-3-tuple(v_361))))) then (if (not-caught-fail(v_365) && success?(is-true(success?(1-proj-3-tuple(v_365))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_365)) then cipherstatepack(2-proj-3-tuple(v_365),minnonce) else fail-any),1-proj-3-tuple(v_365),3-proj-3-tuple(v_361)) else fail-any) else fail-any) else fail-any)) in
        {41}let v_367: bitstring = catch-fail(symmetricstateunpack(v_366)) in
        {42}let v_368: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_367))) in
        {43}let v_369: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_368),2-proj-2-tuple(v_368),3-proj-3-tuple(v_367),msg_a(alice,bob))) in
        {44}let v_370: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_367))) in
        {45}let v_371: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_368))) && success?(1-proj-3-tuple(v_367))) then (if (not-caught-fail(v_370) && success?(is-true(success?(1-proj-2-tuple(v_370))))) then cipherstatepack(1-proj-2-tuple(v_370),increment_nonce(2-proj-2-tuple(v_368))) else fail-any) else fail-any)) in
        {46}let v_372: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_367)) && success?(1-proj-3-tuple(v_367))) then (if (not-caught-fail(v_368) && success?(is-true(success?(1-proj-2-tuple(v_368))))) then (if not-caught-fail(v_369) then (if not-caught-fail(v_371) then (v_371,v_369) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {47}let v_373: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_372),2-proj-3-tuple(v_367),3-proj-3-tuple(v_367)))) in
        {48}let v_374: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_372)) && success?(symmetricstatepack(1-proj-2-tuple(v_372),2-proj-3-tuple(v_367),3-proj-3-tuple(v_367)))) then (if (not-caught-fail(v_373) && success?(is-true(success?(1-proj-3-tuple(v_373))))) then symmetricstatepack(1-proj-3-tuple(v_373),2-proj-3-tuple(v_373),hash(3-proj-3-tuple(v_373),2-proj-2-tuple(v_372))) else fail-any) else fail-any)) in
        {49}let v_375: bitstring = catch-fail((if (not-caught-fail(v_367) && success?(is-true(success?(1-proj-3-tuple(v_367))))) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then (if not-caught-fail(v_374) then (v_374,2-proj-2-tuple(v_372)) else fail-any) else fail-any) else fail-any)) in
        {50}let v_376: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_375),2-proj-7-tuple(v_346),v_349,4-proj-7-tuple(v_346),5-proj-7-tuple(v_346),6-proj-7-tuple(v_346),7-proj-7-tuple(v_346))) in
        {51}let v_377: bitstring = catch-fail(concat3(v_350,2-proj-3-tuple(v_347),2-proj-2-tuple(v_375))) in
        {52}let v_378: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_375))) in
        {53}let v_379: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_378),zero)) in
        {54}let v_380: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_378),zero)) in
        {55}let v_381: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_378),zero)) in
        {56}let v_382: bitstring = catch-fail((if success?(2-proj-3-tuple(v_378)) then (if not-caught-fail(v_379) then (if not-caught-fail(v_380) then (if not-caught-fail(v_381) then (v_379,v_380,v_381) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {57}let v_383: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_382)) then cipherstatepack(1-proj-3-tuple(v_382),minnonce) else fail-any)) in
        {58}let v_384: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_382)) then cipherstatepack(2-proj-3-tuple(v_382),minnonce) else fail-any)) in
        {59}let v_385: bitstring = catch-fail((if success?(1-proj-2-tuple(v_375)) then (if (not-caught-fail(v_378) && success?(is-true(success?(1-proj-3-tuple(v_378))))) then (if (not-caught-fail(v_382) && success?(is-true(success?(1-proj-3-tuple(v_382))))) then (if not-caught-fail(v_383) then (if not-caught-fail(v_384) then (1-proj-2-tuple(v_375),v_383,v_384) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let (hs_386: handshakestate,re_387: key,message_a: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_346) && success?(is-true(success?(1-proj-7-tuple(v_346))))) then (if (not-caught-fail(v_347) && success?(is-true(success?(1-proj-3-tuple(v_347))))) then (if not-caught-fail(v_349) then (if not-caught-fail(v_350) then (if not-caught-fail(v_352) then (if not-caught-fail(v_359) then (if not-caught-fail(v_366) then (if (not-caught-fail(v_375) && success?(is-true(success?(1-proj-2-tuple(v_375))))) then (if not-caught-fail(v_376) then (if not-caught-fail(v_377) then (if (not-caught-fail(v_385) && success?(is-true(success?(1-proj-3-tuple(v_385))))) then (v_376,5-proj-7-tuple(v_346),v_377,2-proj-3-tuple(v_385),3-proj-3-tuple(v_385)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {61}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {62}insert statestore(alice,bob,statepack_b(hs_386));
        {63}out(pub, message_a)
    ) | (
        {65}event LeakS(phase0,alice);
        {66}out(pub, key_s(alice))
    ) | (
        {67}phase 1;
        {68}event LeakS(phase1,alice);
        {69}out(pub, key_s(alice))
    )
) | (
    {70}let v_388: key = catch-fail(dhexp(key_s(alice),g)) in
    {71}let s_389: keypair = (if not-caught-fail(v_388) then keypairpack(v_388,key_s(alice)) else fail-any) in
    {72}out(pub, getpublickey(s_389));
    (
        {73}let e_390: keypair = keypairpack(empty,empty) in
        {74}let v_391: key = catch-fail(dhexp(key_s(charlie),g)) in
        {75}let rs_392: key = getpublickey((if not-caught-fail(v_391) then keypairpack(v_391,key_s(charlie)) else fail-any)) in
        {76}let re_393: key = empty in
        {77}let v_394: bitstring = catch-fail(hash(somename,empty)) in
        {78}let v_395: key = catch-fail(v_394) in
        {79}let v_396: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {80}let v_397: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_394) then (if not-caught-fail(v_395) then (if not-caught-fail(v_396) then symmetricstatepack(v_396,v_395,v_394) else fail-any) else fail-any) else fail-any))) in
        {81}let v_398: symmetricstate = catch-fail((if success?((if not-caught-fail(v_394) then (if not-caught-fail(v_395) then (if not-caught-fail(v_396) then symmetricstatepack(v_396,v_395,v_394) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_397) && success?(is-true(success?(1-proj-3-tuple(v_397))))) then symmetricstatepack(1-proj-3-tuple(v_397),2-proj-3-tuple(v_397),hash(3-proj-3-tuple(v_397),empty)) else fail-any) else fail-any)) in
        {82}let v_399: bitstring = catch-fail(symmetricstateunpack(v_398)) in
        {83}let v_400: symmetricstate = catch-fail((if success?(getpublickey(s_389)) then (if (not-caught-fail(v_399) && success?(is-true(success?(1-proj-3-tuple(v_399))))) then symmetricstatepack(1-proj-3-tuple(v_399),2-proj-3-tuple(v_399),hash(3-proj-3-tuple(v_399),getpublickey(s_389))) else fail-any) else fail-any)) in
        {84}let v_401: bitstring = catch-fail(symmetricstateunpack(v_400)) in
        {85}let v_402: symmetricstate = catch-fail((if (not-caught-fail(v_401) && success?(is-true(success?(1-proj-3-tuple(v_401))))) then symmetricstatepack(1-proj-3-tuple(v_401),2-proj-3-tuple(v_401),hash(3-proj-3-tuple(v_401),rs_392)) else fail-any)) in
        {86}let hs_403: handshakestate = (if not-caught-fail(v_398) then (if not-caught-fail(v_400) then (if not-caught-fail(v_402) then handshakestatepack(v_402,s_389,e_390,rs_392,re_393,empty,true) else fail-any) else fail-any) else fail-any) in
        {87}insert statestore(alice,charlie,statepack_a(hs_403))
    ) | (
        {132}get statestore(=alice,=charlie,statepack_a(hs_404: handshakestate)) in
        {88}let v_405: bitstring = catch-fail(handshakestateunpack(hs_404)) in
        {89}let v_406: bitstring = catch-fail((empty,empty,empty)) in
        {90}let v_407: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {91}let v_408: keypair = catch-fail((if not-caught-fail(v_407) then keypairpack(v_407,key_e(alice,charlie)) else fail-any)) in
        {92}let v_409: bitstring = catch-fail(getpublickey(v_408)) in
        {93}let v_410: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_405))) in
        {94}let v_411: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_405)) then (if (not-caught-fail(v_410) && success?(is-true(success?(1-proj-3-tuple(v_410))))) then symmetricstatepack(1-proj-3-tuple(v_410),2-proj-3-tuple(v_410),hash(3-proj-3-tuple(v_410),v_409)) else fail-any) else fail-any)) in
        {95}let v_412: bitstring = catch-fail(keypairunpack(v_408)) in
        {96}let v_413: bitstring = catch-fail(symmetricstateunpack(v_411)) in
        {97}let v_414: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_413),(if success?(4-proj-7-tuple(v_405)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),4-proj-7-tuple(v_405)) else fail-any) else fail-any))) in
        {98}let v_415: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_413),(if success?(4-proj-7-tuple(v_405)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),4-proj-7-tuple(v_405)) else fail-any) else fail-any))) in
        {99}let v_416: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_413),(if success?(4-proj-7-tuple(v_405)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),4-proj-7-tuple(v_405)) else fail-any) else fail-any))) in
        {100}let v_417: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_405)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),4-proj-7-tuple(v_405)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_413))) then (if not-caught-fail(v_414) then (if not-caught-fail(v_415) then (if not-caught-fail(v_416) then (v_414,v_415,v_416) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {101}let v_418: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_405)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-2-tuple(v_412))))) then dhexp(2-proj-2-tuple(v_412),4-proj-7-tuple(v_405)) else fail-any) else fail-any)) then (if (not-caught-fail(v_413) && success?(is-true(success?(1-proj-3-tuple(v_413))))) then (if (not-caught-fail(v_417) && success?(is-true(success?(1-proj-3-tuple(v_417))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_417)) then cipherstatepack(2-proj-3-tuple(v_417),minnonce) else fail-any),1-proj-3-tuple(v_417),3-proj-3-tuple(v_413)) else fail-any) else fail-any) else fail-any)) in
        {102}let v_419: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_405))) in
        {103}let v_420: bitstring = catch-fail(symmetricstateunpack(v_418)) in
        {104}let v_421: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_420),(if (success?(4-proj-7-tuple(v_405)) && success?(2-proj-7-tuple(v_405))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_405)) else fail-any) else fail-any))) in
        {105}let v_422: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_420),(if (success?(4-proj-7-tuple(v_405)) && success?(2-proj-7-tuple(v_405))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_405)) else fail-any) else fail-any))) in
        {106}let v_423: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_420),(if (success?(4-proj-7-tuple(v_405)) && success?(2-proj-7-tuple(v_405))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_405)) else fail-any) else fail-any))) in
        {107}let v_424: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_405)) && success?(2-proj-7-tuple(v_405))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_405)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_420))) then (if not-caught-fail(v_421) then (if not-caught-fail(v_422) then (if not-caught-fail(v_423) then (v_421,v_422,v_423) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_425: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_405)) && success?(2-proj-7-tuple(v_405))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then dhexp(2-proj-2-tuple(v_419),4-proj-7-tuple(v_405)) else fail-any) else fail-any)) then (if (not-caught-fail(v_420) && success?(is-true(success?(1-proj-3-tuple(v_420))))) then (if (not-caught-fail(v_424) && success?(is-true(success?(1-proj-3-tuple(v_424))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_424)) then cipherstatepack(2-proj-3-tuple(v_424),minnonce) else fail-any),1-proj-3-tuple(v_424),3-proj-3-tuple(v_420)) else fail-any) else fail-any) else fail-any)) in
        {109}let v_426: bitstring = catch-fail(symmetricstateunpack(v_425)) in
        {110}let v_427: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_426))) in
        {111}let v_428: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_427),2-proj-2-tuple(v_427),3-proj-3-tuple(v_426),msg_a(alice,charlie))) in
        {112}let v_429: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_426))) in
        {113}let v_430: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_427))) && success?(1-proj-3-tuple(v_426))) then (if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-2-tuple(v_429))))) then cipherstatepack(1-proj-2-tuple(v_429),increment_nonce(2-proj-2-tuple(v_427))) else fail-any) else fail-any)) in
        {114}let v_431: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_426)) && success?(1-proj-3-tuple(v_426))) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-2-tuple(v_427))))) then (if not-caught-fail(v_428) then (if not-caught-fail(v_430) then (v_430,v_428) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_432: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_431),2-proj-3-tuple(v_426),3-proj-3-tuple(v_426)))) in
        {116}let v_433: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_431)) && success?(symmetricstatepack(1-proj-2-tuple(v_431),2-proj-3-tuple(v_426),3-proj-3-tuple(v_426)))) then (if (not-caught-fail(v_432) && success?(is-true(success?(1-proj-3-tuple(v_432))))) then symmetricstatepack(1-proj-3-tuple(v_432),2-proj-3-tuple(v_432),hash(3-proj-3-tuple(v_432),2-proj-2-tuple(v_431))) else fail-any) else fail-any)) in
        {117}let v_434: bitstring = catch-fail((if (not-caught-fail(v_426) && success?(is-true(success?(1-proj-3-tuple(v_426))))) then (if (not-caught-fail(v_431) && success?(is-true(success?(1-proj-2-tuple(v_431))))) then (if not-caught-fail(v_433) then (v_433,2-proj-2-tuple(v_431)) else fail-any) else fail-any) else fail-any)) in
        {118}let v_435: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_434),2-proj-7-tuple(v_405),v_408,4-proj-7-tuple(v_405),5-proj-7-tuple(v_405),6-proj-7-tuple(v_405),7-proj-7-tuple(v_405))) in
        {119}let v_436: bitstring = catch-fail(concat3(v_409,2-proj-3-tuple(v_406),2-proj-2-tuple(v_434))) in
        {120}let v_437: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_434))) in
        {121}let v_438: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_437),zero)) in
        {122}let v_439: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_437),zero)) in
        {123}let v_440: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_437),zero)) in
        {124}let v_441: bitstring = catch-fail((if success?(2-proj-3-tuple(v_437)) then (if not-caught-fail(v_438) then (if not-caught-fail(v_439) then (if not-caught-fail(v_440) then (v_438,v_439,v_440) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {125}let v_442: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_441)) then cipherstatepack(1-proj-3-tuple(v_441),minnonce) else fail-any)) in
        {126}let v_443: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_441)) then cipherstatepack(2-proj-3-tuple(v_441),minnonce) else fail-any)) in
        {127}let v_444: bitstring = catch-fail((if success?(1-proj-2-tuple(v_434)) then (if (not-caught-fail(v_437) && success?(is-true(success?(1-proj-3-tuple(v_437))))) then (if (not-caught-fail(v_441) && success?(is-true(success?(1-proj-3-tuple(v_441))))) then (if not-caught-fail(v_442) then (if not-caught-fail(v_443) then (1-proj-2-tuple(v_434),v_442,v_443) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {128}let (hs_445: handshakestate,re_446: key,message_a_447: bitstring,cs1_448: cipherstate,cs2_449: cipherstate) = (if (not-caught-fail(v_405) && success?(is-true(success?(1-proj-7-tuple(v_405))))) then (if (not-caught-fail(v_406) && success?(is-true(success?(1-proj-3-tuple(v_406))))) then (if not-caught-fail(v_408) then (if not-caught-fail(v_409) then (if not-caught-fail(v_411) then (if not-caught-fail(v_418) then (if not-caught-fail(v_425) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-2-tuple(v_434))))) then (if not-caught-fail(v_435) then (if not-caught-fail(v_436) then (if (not-caught-fail(v_444) && success?(is-true(success?(1-proj-3-tuple(v_444))))) then (v_435,5-proj-7-tuple(v_405),v_436,2-proj-3-tuple(v_444),3-proj-3-tuple(v_444)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {129}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {130}insert statestore(alice,charlie,statepack_b(hs_445));
        {131}out(pub, message_a_447)
    ) | (
        {133}event LeakS(phase0,alice);
        {134}out(pub, key_s(alice))
    ) | (
        {135}phase 1;
        {136}event LeakS(phase1,alice);
        {137}out(pub, key_s(alice))
    )
) | (
    {138}let v_450: key = catch-fail(dhexp(key_s(bob),g)) in
    {139}let s_451: keypair = (if not-caught-fail(v_450) then keypairpack(v_450,key_s(bob)) else fail-any) in
    {140}out(pub, getpublickey(s_451));
    (
        {141}let e_452: keypair = keypairpack(empty,empty) in
        {142}let v_453: key = catch-fail(dhexp(key_s(alice),g)) in
        {143}let rs_454: key = getpublickey((if not-caught-fail(v_453) then keypairpack(v_453,key_s(alice)) else fail-any)) in
        {144}let re_455: key = empty in
        {145}let v_456: bitstring = catch-fail(hash(somename,empty)) in
        {146}let v_457: key = catch-fail(v_456) in
        {147}let v_458: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {148}let v_459: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_456) then (if not-caught-fail(v_457) then (if not-caught-fail(v_458) then symmetricstatepack(v_458,v_457,v_456) else fail-any) else fail-any) else fail-any))) in
        {149}let v_460: symmetricstate = catch-fail((if success?((if not-caught-fail(v_456) then (if not-caught-fail(v_457) then (if not-caught-fail(v_458) then symmetricstatepack(v_458,v_457,v_456) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_459) && success?(is-true(success?(1-proj-3-tuple(v_459))))) then symmetricstatepack(1-proj-3-tuple(v_459),2-proj-3-tuple(v_459),hash(3-proj-3-tuple(v_459),empty)) else fail-any) else fail-any)) in
        {150}let v_461: bitstring = catch-fail(symmetricstateunpack(v_460)) in
        {151}let v_462: symmetricstate = catch-fail((if (not-caught-fail(v_461) && success?(is-true(success?(1-proj-3-tuple(v_461))))) then symmetricstatepack(1-proj-3-tuple(v_461),2-proj-3-tuple(v_461),hash(3-proj-3-tuple(v_461),rs_454)) else fail-any)) in
        {152}let v_463: bitstring = catch-fail(symmetricstateunpack(v_462)) in
        {153}let v_464: symmetricstate = catch-fail((if success?(getpublickey(s_451)) then (if (not-caught-fail(v_463) && success?(is-true(success?(1-proj-3-tuple(v_463))))) then symmetricstatepack(1-proj-3-tuple(v_463),2-proj-3-tuple(v_463),hash(3-proj-3-tuple(v_463),getpublickey(s_451))) else fail-any) else fail-any)) in
        {154}let hs_465: handshakestate = (if not-caught-fail(v_460) then (if not-caught-fail(v_462) then (if not-caught-fail(v_464) then handshakestatepack(v_464,s_451,e_452,rs_454,re_455,empty,false) else fail-any) else fail-any) else fail-any) in
        {155}insert statestore(bob,alice,statepack_a(hs_465))
    ) | (
        {200}get statestore(=bob,=alice,statepack_a(hs_466: handshakestate)) in
        {156}in(pub, message_a_467: bitstring);
        {157}let v_468: bitstring = catch-fail(handshakestateunpack(hs_466)) in
        {158}let v_469: bitstring = catch-fail(deconcat3(message_a_467)) in
        {159}let v_470: bool = catch-fail(true) in
        {160}let v_471: key = catch-fail(1-proj-3-tuple(v_469)) in
        {161}let v_472: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_468))) in
        {162}let v_473: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_468)) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-3-tuple(v_472))))) then symmetricstatepack(1-proj-3-tuple(v_472),2-proj-3-tuple(v_472),hash(3-proj-3-tuple(v_472),v_471)) else fail-any) else fail-any)) in
        {163}let v_474: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_468))) in
        {164}let v_475: bitstring = catch-fail(symmetricstateunpack(v_473)) in
        {165}let v_476: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_475),(if success?(2-proj-7-tuple(v_468)) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-2-tuple(v_474))))) then dhexp(2-proj-2-tuple(v_474),v_471) else fail-any) else fail-any))) in
        {166}let v_477: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_475),(if success?(2-proj-7-tuple(v_468)) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-2-tuple(v_474))))) then dhexp(2-proj-2-tuple(v_474),v_471) else fail-any) else fail-any))) in
        {167}let v_478: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_475),(if success?(2-proj-7-tuple(v_468)) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-2-tuple(v_474))))) then dhexp(2-proj-2-tuple(v_474),v_471) else fail-any) else fail-any))) in
        {168}let v_479: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_468)) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-2-tuple(v_474))))) then dhexp(2-proj-2-tuple(v_474),v_471) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_475))) then (if not-caught-fail(v_476) then (if not-caught-fail(v_477) then (if not-caught-fail(v_478) then (v_476,v_477,v_478) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {169}let v_480: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_468)) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-2-tuple(v_474))))) then dhexp(2-proj-2-tuple(v_474),v_471) else fail-any) else fail-any)) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_479)) then cipherstatepack(2-proj-3-tuple(v_479),minnonce) else fail-any),1-proj-3-tuple(v_479),3-proj-3-tuple(v_475)) else fail-any) else fail-any) else fail-any)) in
        {170}let v_481: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_468))) in
        {171}let v_482: bitstring = catch-fail(symmetricstateunpack(v_480)) in
        {172}let v_483: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_482),(if (success?(4-proj-7-tuple(v_468)) && success?(2-proj-7-tuple(v_468))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-2-tuple(v_481))))) then dhexp(2-proj-2-tuple(v_481),4-proj-7-tuple(v_468)) else fail-any) else fail-any))) in
        {173}let v_484: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_482),(if (success?(4-proj-7-tuple(v_468)) && success?(2-proj-7-tuple(v_468))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-2-tuple(v_481))))) then dhexp(2-proj-2-tuple(v_481),4-proj-7-tuple(v_468)) else fail-any) else fail-any))) in
        {174}let v_485: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_482),(if (success?(4-proj-7-tuple(v_468)) && success?(2-proj-7-tuple(v_468))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-2-tuple(v_481))))) then dhexp(2-proj-2-tuple(v_481),4-proj-7-tuple(v_468)) else fail-any) else fail-any))) in
        {175}let v_486: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_468)) && success?(2-proj-7-tuple(v_468))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-2-tuple(v_481))))) then dhexp(2-proj-2-tuple(v_481),4-proj-7-tuple(v_468)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_482))) then (if not-caught-fail(v_483) then (if not-caught-fail(v_484) then (if not-caught-fail(v_485) then (v_483,v_484,v_485) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {176}let v_487: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_468)) && success?(2-proj-7-tuple(v_468))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-2-tuple(v_481))))) then dhexp(2-proj-2-tuple(v_481),4-proj-7-tuple(v_468)) else fail-any) else fail-any)) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-3-tuple(v_482))))) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-3-tuple(v_486))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_486)) then cipherstatepack(2-proj-3-tuple(v_486),minnonce) else fail-any),1-proj-3-tuple(v_486),3-proj-3-tuple(v_482)) else fail-any) else fail-any) else fail-any)) in
        {177}let v_488: bitstring = catch-fail(symmetricstateunpack(v_487)) in
        {178}let v_489: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_488))) in
        {179}let v_490: aead = catch-fail(decrypt(1-proj-2-tuple(v_489),2-proj-2-tuple(v_489),3-proj-3-tuple(v_488),3-proj-3-tuple(v_469))) in
        {180}let v_491: bitstring = catch-fail(aeadunpack(v_490)) in
        {181}let v_492: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_488))) in
        {182}let v_493: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_489))) && success?(1-proj-3-tuple(v_488))) then (if (not-caught-fail(v_492) && success?(is-true(success?(1-proj-2-tuple(v_492))))) then cipherstatepack(1-proj-2-tuple(v_492),increment_nonce(2-proj-2-tuple(v_489))) else fail-any) else fail-any)) in
        {183}let v_494: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_469)) && (success?(3-proj-3-tuple(v_488)) && success?(1-proj-3-tuple(v_488)))) then (if (not-caught-fail(v_489) && success?(is-true(success?(1-proj-2-tuple(v_489))))) then (if not-caught-fail(v_490) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then (if not-caught-fail(v_493) then (v_493,3-proj-3-tuple(v_491),1-proj-3-tuple(v_491)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {184}let v_495: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_494),2-proj-3-tuple(v_488),3-proj-3-tuple(v_488)))) in
        {185}let v_496: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_469)) && success?(symmetricstatepack(1-proj-3-tuple(v_494),2-proj-3-tuple(v_488),3-proj-3-tuple(v_488)))) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-3-tuple(v_495))))) then symmetricstatepack(1-proj-3-tuple(v_495),2-proj-3-tuple(v_495),hash(3-proj-3-tuple(v_495),3-proj-3-tuple(v_469))) else fail-any) else fail-any)) in
        {186}let v_497: bitstring = catch-fail((if success?(3-proj-3-tuple(v_469)) then (if (not-caught-fail(v_488) && success?(is-true(success?(1-proj-3-tuple(v_488))))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-3-tuple(v_494))))) then (if not-caught-fail(v_496) then (v_496,2-proj-3-tuple(v_494),3-proj-3-tuple(v_494)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {187}let v_498: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_497),2-proj-7-tuple(v_468),3-proj-7-tuple(v_468),4-proj-7-tuple(v_468),v_471,6-proj-7-tuple(v_468),7-proj-7-tuple(v_468))) in
        {188}let v_499: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_497))) in
        {189}let v_500: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_499),zero)) in
        {190}let v_501: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_499),zero)) in
        {191}let v_502: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_499),zero)) in
        {192}let v_503: bitstring = catch-fail((if success?(2-proj-3-tuple(v_499)) then (if not-caught-fail(v_500) then (if not-caught-fail(v_501) then (if not-caught-fail(v_502) then (v_500,v_501,v_502) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {193}let v_504: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_503)) then cipherstatepack(1-proj-3-tuple(v_503),minnonce) else fail-any)) in
        {194}let v_505: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_503)) then cipherstatepack(2-proj-3-tuple(v_503),minnonce) else fail-any)) in
        {195}let v_506: bitstring = catch-fail((if success?(1-proj-3-tuple(v_497)) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-3-tuple(v_499))))) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-3-tuple(v_503))))) then (if not-caught-fail(v_504) then (if not-caught-fail(v_505) then (1-proj-3-tuple(v_497),v_504,v_505) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {196}let (hs_507: handshakestate,re_508: key,plaintext_a: bitstring,valid: bool,cs1_509: cipherstate,cs2_510: cipherstate) = (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-7-tuple(v_468))))) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-3-tuple(v_469))))) then (if not-caught-fail(v_470) then (if not-caught-fail(v_471) then (if not-caught-fail(v_473) then (if not-caught-fail(v_480) then (if not-caught-fail(v_487) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-3-tuple(v_497))))) then (if (v_470 && 3-proj-3-tuple(v_497)) then (if not-caught-fail(v_498) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (v_498,getpublickey(3-proj-7-tuple(v_468)),2-proj-3-tuple(v_497),true,2-proj-3-tuple(v_506),3-proj-3-tuple(v_506)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {197}event RecvMsg(bob,alice,stage_a,plaintext_a,valid);
        {198}insert statestore(bob,alice,statepack_b(hs_507));
        {199}event RecvEnd(valid)
    ) | (
        {201}event LeakS(phase0,bob);
        {202}out(pub, key_s(bob))
    ) | (
        {203}phase 1;
        {204}event LeakS(phase1,bob);
        {205}out(pub, key_s(bob))
    )
) | (
    {206}let v_511: key = catch-fail(dhexp(key_s(bob),g)) in
    {207}let s_512: keypair = (if not-caught-fail(v_511) then keypairpack(v_511,key_s(bob)) else fail-any) in
    {208}out(pub, getpublickey(s_512));
    (
        {209}let e_513: keypair = keypairpack(empty,empty) in
        {210}let v_514: key = catch-fail(dhexp(key_s(charlie),g)) in
        {211}let rs_515: key = getpublickey((if not-caught-fail(v_514) then keypairpack(v_514,key_s(charlie)) else fail-any)) in
        {212}let re_516: key = empty in
        {213}let v_517: bitstring = catch-fail(hash(somename,empty)) in
        {214}let v_518: key = catch-fail(v_517) in
        {215}let v_519: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {216}let v_520: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_517) then (if not-caught-fail(v_518) then (if not-caught-fail(v_519) then symmetricstatepack(v_519,v_518,v_517) else fail-any) else fail-any) else fail-any))) in
        {217}let v_521: symmetricstate = catch-fail((if success?((if not-caught-fail(v_517) then (if not-caught-fail(v_518) then (if not-caught-fail(v_519) then symmetricstatepack(v_519,v_518,v_517) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then symmetricstatepack(1-proj-3-tuple(v_520),2-proj-3-tuple(v_520),hash(3-proj-3-tuple(v_520),empty)) else fail-any) else fail-any)) in
        {218}let v_522: bitstring = catch-fail(symmetricstateunpack(v_521)) in
        {219}let v_523: symmetricstate = catch-fail((if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then symmetricstatepack(1-proj-3-tuple(v_522),2-proj-3-tuple(v_522),hash(3-proj-3-tuple(v_522),rs_515)) else fail-any)) in
        {220}let v_524: bitstring = catch-fail(symmetricstateunpack(v_523)) in
        {221}let v_525: symmetricstate = catch-fail((if success?(getpublickey(s_512)) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then symmetricstatepack(1-proj-3-tuple(v_524),2-proj-3-tuple(v_524),hash(3-proj-3-tuple(v_524),getpublickey(s_512))) else fail-any) else fail-any)) in
        {222}let hs_526: handshakestate = (if not-caught-fail(v_521) then (if not-caught-fail(v_523) then (if not-caught-fail(v_525) then handshakestatepack(v_525,s_512,e_513,rs_515,re_516,empty,false) else fail-any) else fail-any) else fail-any) in
        {223}insert statestore(bob,charlie,statepack_a(hs_526))
    ) | (
        {268}get statestore(=bob,=charlie,statepack_a(hs_527: handshakestate)) in
        {224}in(pub, message_a_528: bitstring);
        {225}let v_529: bitstring = catch-fail(handshakestateunpack(hs_527)) in
        {226}let v_530: bitstring = catch-fail(deconcat3(message_a_528)) in
        {227}let v_531: bool = catch-fail(true) in
        {228}let v_532: key = catch-fail(1-proj-3-tuple(v_530)) in
        {229}let v_533: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_529))) in
        {230}let v_534: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_529)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then symmetricstatepack(1-proj-3-tuple(v_533),2-proj-3-tuple(v_533),hash(3-proj-3-tuple(v_533),v_532)) else fail-any) else fail-any)) in
        {231}let v_535: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_529))) in
        {232}let v_536: bitstring = catch-fail(symmetricstateunpack(v_534)) in
        {233}let v_537: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_536),(if success?(2-proj-7-tuple(v_529)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then dhexp(2-proj-2-tuple(v_535),v_532) else fail-any) else fail-any))) in
        {234}let v_538: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_536),(if success?(2-proj-7-tuple(v_529)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then dhexp(2-proj-2-tuple(v_535),v_532) else fail-any) else fail-any))) in
        {235}let v_539: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_536),(if success?(2-proj-7-tuple(v_529)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then dhexp(2-proj-2-tuple(v_535),v_532) else fail-any) else fail-any))) in
        {236}let v_540: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_529)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then dhexp(2-proj-2-tuple(v_535),v_532) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_536))) then (if not-caught-fail(v_537) then (if not-caught-fail(v_538) then (if not-caught-fail(v_539) then (v_537,v_538,v_539) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_541: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_529)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then dhexp(2-proj-2-tuple(v_535),v_532) else fail-any) else fail-any)) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_540)) then cipherstatepack(2-proj-3-tuple(v_540),minnonce) else fail-any),1-proj-3-tuple(v_540),3-proj-3-tuple(v_536)) else fail-any) else fail-any) else fail-any)) in
        {238}let v_542: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_529))) in
        {239}let v_543: bitstring = catch-fail(symmetricstateunpack(v_541)) in
        {240}let v_544: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_543),(if (success?(4-proj-7-tuple(v_529)) && success?(2-proj-7-tuple(v_529))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),4-proj-7-tuple(v_529)) else fail-any) else fail-any))) in
        {241}let v_545: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_543),(if (success?(4-proj-7-tuple(v_529)) && success?(2-proj-7-tuple(v_529))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),4-proj-7-tuple(v_529)) else fail-any) else fail-any))) in
        {242}let v_546: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_543),(if (success?(4-proj-7-tuple(v_529)) && success?(2-proj-7-tuple(v_529))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),4-proj-7-tuple(v_529)) else fail-any) else fail-any))) in
        {243}let v_547: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_529)) && success?(2-proj-7-tuple(v_529))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),4-proj-7-tuple(v_529)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_543))) then (if not-caught-fail(v_544) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (v_544,v_545,v_546) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_548: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_529)) && success?(2-proj-7-tuple(v_529))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),4-proj-7-tuple(v_529)) else fail-any) else fail-any)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_547)) then cipherstatepack(2-proj-3-tuple(v_547),minnonce) else fail-any),1-proj-3-tuple(v_547),3-proj-3-tuple(v_543)) else fail-any) else fail-any) else fail-any)) in
        {245}let v_549: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {246}let v_550: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {247}let v_551: aead = catch-fail(decrypt(1-proj-2-tuple(v_550),2-proj-2-tuple(v_550),3-proj-3-tuple(v_549),3-proj-3-tuple(v_530))) in
        {248}let v_552: bitstring = catch-fail(aeadunpack(v_551)) in
        {249}let v_553: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {250}let v_554: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_550))) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then cipherstatepack(1-proj-2-tuple(v_553),increment_nonce(2-proj-2-tuple(v_550))) else fail-any) else fail-any)) in
        {251}let v_555: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_530)) && (success?(3-proj-3-tuple(v_549)) && success?(1-proj-3-tuple(v_549)))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then (if not-caught-fail(v_551) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (if not-caught-fail(v_554) then (v_554,3-proj-3-tuple(v_552),1-proj-3-tuple(v_552)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {252}let v_556: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) in
        {253}let v_557: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_530)) && success?(symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_556),hash(3-proj-3-tuple(v_556),3-proj-3-tuple(v_530))) else fail-any) else fail-any)) in
        {254}let v_558: bitstring = catch-fail((if success?(3-proj-3-tuple(v_530)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if not-caught-fail(v_557) then (v_557,2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_559: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_558),2-proj-7-tuple(v_529),3-proj-7-tuple(v_529),4-proj-7-tuple(v_529),v_532,6-proj-7-tuple(v_529),7-proj-7-tuple(v_529))) in
        {256}let v_560: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_558))) in
        {257}let v_561: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_560),zero)) in
        {258}let v_562: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_560),zero)) in
        {259}let v_563: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_560),zero)) in
        {260}let v_564: bitstring = catch-fail((if success?(2-proj-3-tuple(v_560)) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then (v_561,v_562,v_563) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_565: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_564)) then cipherstatepack(1-proj-3-tuple(v_564),minnonce) else fail-any)) in
        {262}let v_566: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_564)) then cipherstatepack(2-proj-3-tuple(v_564),minnonce) else fail-any)) in
        {263}let v_567: bitstring = catch-fail((if success?(1-proj-3-tuple(v_558)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_566) then (1-proj-3-tuple(v_558),v_565,v_566) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {264}let (hs_568: handshakestate,re_569: key,plaintext_a_570: bitstring,valid_571: bool,cs1_572: cipherstate,cs2_573: cipherstate) = (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-7-tuple(v_529))))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then (if not-caught-fail(v_531) then (if not-caught-fail(v_532) then (if not-caught-fail(v_534) then (if not-caught-fail(v_541) then (if not-caught-fail(v_548) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if (v_531 && 3-proj-3-tuple(v_558)) then (if not-caught-fail(v_559) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (v_559,getpublickey(3-proj-7-tuple(v_529)),2-proj-3-tuple(v_558),true,2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {265}event RecvMsg(bob,charlie,stage_a,plaintext_a_570,valid_571);
        {266}insert statestore(bob,charlie,statepack_b(hs_568));
        {267}event RecvEnd(valid_571)
    ) | (
        {269}event LeakS(phase0,bob);
        {270}out(pub, key_s(bob))
    ) | (
        {271}phase 1;
        {272}event LeakS(phase1,bob);
        {273}out(pub, key_s(bob))
    )
) | (
    {274}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_654,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_654,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 123 rules in the queue.
400 rules inserted. The rule base contains 385 rules. 51 rules in the queue.
600 rules inserted. The rule base contains 580 rules. 68 rules in the queue.
800 rules inserted. The rule base contains 778 rules. 124 rules in the queue.
1000 rules inserted. The rule base contains 951 rules. 113 rules in the queue.
1200 rules inserted. The rule base contains 1026 rules. 58 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_654,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_654,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_654,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_654,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {61}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {63}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {140}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {204}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {205}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {61}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {63}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {140}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {204}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {205}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {64}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {61}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {63}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {140}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {204}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {205}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
