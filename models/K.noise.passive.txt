File "K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "K.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.passive.pv", line 320, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "K.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 342, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 344, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 485, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 478, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 470, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "K.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 528, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 520, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.passive.pv", line 320, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 513, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "K.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 342, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 344, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let v_404: key = catch-fail(dhexp(key_s(alice),g)) in
    {3}let s_405: keypair = (if not-caught-fail(v_404) then keypairpack(v_404,key_s(alice)) else fail-any) in
    {4}out(pub, getpublickey(s_405));
    (
        {5}let e_406: keypair = keypairpack(empty,empty) in
        {6}let v_407: key = catch-fail(dhexp(key_s(bob),g)) in
        {7}let rs_408: key = getpublickey((if not-caught-fail(v_407) then keypairpack(v_407,key_s(bob)) else fail-any)) in
        {8}let re_409: key = empty in
        {9}let v_410: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_411: key = catch-fail(v_410) in
        {11}let v_412: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_413: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_410) then (if not-caught-fail(v_411) then (if not-caught-fail(v_412) then symmetricstatepack(v_412,v_411,v_410) else fail-any) else fail-any) else fail-any))) in
        {13}let v_414: symmetricstate = catch-fail((if success?((if not-caught-fail(v_410) then (if not-caught-fail(v_411) then (if not-caught-fail(v_412) then symmetricstatepack(v_412,v_411,v_410) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_413) && success?(is-true(success?(1-proj-3-tuple(v_413))))) then symmetricstatepack(1-proj-3-tuple(v_413),2-proj-3-tuple(v_413),hash(3-proj-3-tuple(v_413),empty)) else fail-any) else fail-any)) in
        {14}let v_415: bitstring = catch-fail(symmetricstateunpack(v_414)) in
        {15}let v_416: symmetricstate = catch-fail((if success?(getpublickey(s_405)) then (if (not-caught-fail(v_415) && success?(is-true(success?(1-proj-3-tuple(v_415))))) then symmetricstatepack(1-proj-3-tuple(v_415),2-proj-3-tuple(v_415),hash(3-proj-3-tuple(v_415),getpublickey(s_405))) else fail-any) else fail-any)) in
        {16}let v_417: bitstring = catch-fail(symmetricstateunpack(v_416)) in
        {17}let v_418: symmetricstate = catch-fail((if (not-caught-fail(v_417) && success?(is-true(success?(1-proj-3-tuple(v_417))))) then symmetricstatepack(1-proj-3-tuple(v_417),2-proj-3-tuple(v_417),hash(3-proj-3-tuple(v_417),rs_408)) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_414) then (if not-caught-fail(v_416) then (if not-caught-fail(v_418) then handshakestatepack(v_418,s_405,e_406,rs_408,re_409,empty,true) else fail-any) else fail-any) else fail-any) in
        {19}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {56}get statestore(=alice,=bob,statepack_a(hs_419: handshakestate)) in
        {20}let v_420: bitstring = catch-fail(handshakestateunpack(hs_419)) in
        {21}let v_421: bitstring = catch-fail((empty,empty,empty)) in
        {22}let v_422: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {23}let v_423: keypair = catch-fail((if not-caught-fail(v_422) then keypairpack(v_422,key_e(alice,bob)) else fail-any)) in
        {24}let v_424: bitstring = catch-fail(getpublickey(v_423)) in
        {25}let v_425: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_420))) in
        {26}let v_426: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_420)) then (if (not-caught-fail(v_425) && success?(is-true(success?(1-proj-3-tuple(v_425))))) then symmetricstatepack(1-proj-3-tuple(v_425),2-proj-3-tuple(v_425),hash(3-proj-3-tuple(v_425),v_424)) else fail-any) else fail-any)) in
        {27}let v_427: bitstring = catch-fail(keypairunpack(v_423)) in
        {28}let v_428: bitstring = catch-fail(symmetricstateunpack(v_426)) in
        {29}let v_429: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_428),(if success?(4-proj-7-tuple(v_420)) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-2-tuple(v_427))))) then dhexp(2-proj-2-tuple(v_427),4-proj-7-tuple(v_420)) else fail-any) else fail-any))) in
        {30}let v_430: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_428),(if success?(4-proj-7-tuple(v_420)) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-2-tuple(v_427))))) then dhexp(2-proj-2-tuple(v_427),4-proj-7-tuple(v_420)) else fail-any) else fail-any))) in
        {31}let v_431: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_428),(if success?(4-proj-7-tuple(v_420)) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-2-tuple(v_427))))) then dhexp(2-proj-2-tuple(v_427),4-proj-7-tuple(v_420)) else fail-any) else fail-any))) in
        {32}let v_432: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_420)) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-2-tuple(v_427))))) then dhexp(2-proj-2-tuple(v_427),4-proj-7-tuple(v_420)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_428))) then (if not-caught-fail(v_429) then (if not-caught-fail(v_430) then (if not-caught-fail(v_431) then (v_429,v_430,v_431) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {33}let v_433: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_420)) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-2-tuple(v_427))))) then dhexp(2-proj-2-tuple(v_427),4-proj-7-tuple(v_420)) else fail-any) else fail-any)) then (if (not-caught-fail(v_428) && success?(is-true(success?(1-proj-3-tuple(v_428))))) then (if (not-caught-fail(v_432) && success?(is-true(success?(1-proj-3-tuple(v_432))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_432)) then cipherstatepack(2-proj-3-tuple(v_432),minnonce) else fail-any),1-proj-3-tuple(v_432),3-proj-3-tuple(v_428)) else fail-any) else fail-any) else fail-any)) in
        {34}let v_434: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_420))) in
        {35}let v_435: bitstring = catch-fail(symmetricstateunpack(v_433)) in
        {36}let v_436: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_435),(if (success?(4-proj-7-tuple(v_420)) && success?(2-proj-7-tuple(v_420))) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-2-tuple(v_434))))) then dhexp(2-proj-2-tuple(v_434),4-proj-7-tuple(v_420)) else fail-any) else fail-any))) in
        {37}let v_437: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_435),(if (success?(4-proj-7-tuple(v_420)) && success?(2-proj-7-tuple(v_420))) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-2-tuple(v_434))))) then dhexp(2-proj-2-tuple(v_434),4-proj-7-tuple(v_420)) else fail-any) else fail-any))) in
        {38}let v_438: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_435),(if (success?(4-proj-7-tuple(v_420)) && success?(2-proj-7-tuple(v_420))) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-2-tuple(v_434))))) then dhexp(2-proj-2-tuple(v_434),4-proj-7-tuple(v_420)) else fail-any) else fail-any))) in
        {39}let v_439: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_420)) && success?(2-proj-7-tuple(v_420))) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-2-tuple(v_434))))) then dhexp(2-proj-2-tuple(v_434),4-proj-7-tuple(v_420)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_435))) then (if not-caught-fail(v_436) then (if not-caught-fail(v_437) then (if not-caught-fail(v_438) then (v_436,v_437,v_438) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_440: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_420)) && success?(2-proj-7-tuple(v_420))) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-2-tuple(v_434))))) then dhexp(2-proj-2-tuple(v_434),4-proj-7-tuple(v_420)) else fail-any) else fail-any)) then (if (not-caught-fail(v_435) && success?(is-true(success?(1-proj-3-tuple(v_435))))) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-3-tuple(v_439))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_439)) then cipherstatepack(2-proj-3-tuple(v_439),minnonce) else fail-any),1-proj-3-tuple(v_439),3-proj-3-tuple(v_435)) else fail-any) else fail-any) else fail-any)) in
        {41}let v_441: bitstring = catch-fail(symmetricstateunpack(v_440)) in
        {42}let v_442: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_441))) in
        {43}let v_443: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_442),2-proj-2-tuple(v_442),3-proj-3-tuple(v_441),msg_a(alice,bob))) in
        {44}let v_444: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_441))) in
        {45}let v_445: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_442))) && success?(1-proj-3-tuple(v_441))) then (if (not-caught-fail(v_444) && success?(is-true(success?(1-proj-2-tuple(v_444))))) then cipherstatepack(1-proj-2-tuple(v_444),increment_nonce(2-proj-2-tuple(v_442))) else fail-any) else fail-any)) in
        {46}let v_446: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_441)) && success?(1-proj-3-tuple(v_441))) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-2-tuple(v_442))))) then (if not-caught-fail(v_443) then (if not-caught-fail(v_445) then (v_445,v_443) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {47}let v_447: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_446),2-proj-3-tuple(v_441),3-proj-3-tuple(v_441)))) in
        {48}let v_448: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_446)) && success?(symmetricstatepack(1-proj-2-tuple(v_446),2-proj-3-tuple(v_441),3-proj-3-tuple(v_441)))) then (if (not-caught-fail(v_447) && success?(is-true(success?(1-proj-3-tuple(v_447))))) then symmetricstatepack(1-proj-3-tuple(v_447),2-proj-3-tuple(v_447),hash(3-proj-3-tuple(v_447),2-proj-2-tuple(v_446))) else fail-any) else fail-any)) in
        {49}let v_449: bitstring = catch-fail((if (not-caught-fail(v_441) && success?(is-true(success?(1-proj-3-tuple(v_441))))) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-2-tuple(v_446))))) then (if not-caught-fail(v_448) then (v_448,2-proj-2-tuple(v_446)) else fail-any) else fail-any) else fail-any)) in
        {50}let v_450: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_449),2-proj-7-tuple(v_420),v_423,4-proj-7-tuple(v_420),5-proj-7-tuple(v_420),6-proj-7-tuple(v_420),7-proj-7-tuple(v_420))) in
        {51}let v_451: bitstring = catch-fail(concat3(v_424,2-proj-3-tuple(v_421),2-proj-2-tuple(v_449))) in
        {52}let (hs_452: handshakestate,re_453: key,message_a: bitstring) = (if (not-caught-fail(v_420) && success?(is-true(success?(1-proj-7-tuple(v_420))))) then (if (not-caught-fail(v_421) && success?(is-true(success?(1-proj-3-tuple(v_421))))) then (if not-caught-fail(v_423) then (if not-caught-fail(v_424) then (if not-caught-fail(v_426) then (if not-caught-fail(v_433) then (if not-caught-fail(v_440) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-2-tuple(v_449))))) then (if not-caught-fail(v_450) then (if not-caught-fail(v_451) then (v_450,5-proj-7-tuple(v_420),v_451) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {53}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {54}insert statestore(alice,bob,statepack_b(hs_452));
        {55}out(pub, message_a)
    ) | (
        {75}get statestore(=alice,=bob,statepack_b(hs_454: handshakestate)) in
        {57}in(pub, message_b: bitstring);
        {58}let v_455: bitstring = catch-fail(handshakestateunpack(hs_454)) in
        {59}let v_456: bitstring = catch-fail(deconcat3(message_b)) in
        {60}let v_457: bool = catch-fail(true) in
        {61}let v_458: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_455))) in
        {62}let v_459: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_458))) in
        {63}let v_460: aead = catch-fail(decrypt(1-proj-2-tuple(v_459),2-proj-2-tuple(v_459),3-proj-3-tuple(v_458),3-proj-3-tuple(v_456))) in
        {64}let v_461: bitstring = catch-fail(aeadunpack(v_460)) in
        {65}let v_462: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_458))) in
        {66}let v_463: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_459))) && success?(1-proj-3-tuple(v_458))) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-2-tuple(v_462))))) then cipherstatepack(1-proj-2-tuple(v_462),increment_nonce(2-proj-2-tuple(v_459))) else fail-any) else fail-any)) in
        {67}let v_464: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_456)) && (success?(3-proj-3-tuple(v_458)) && success?(1-proj-3-tuple(v_458)))) then (if (not-caught-fail(v_459) && success?(is-true(success?(1-proj-2-tuple(v_459))))) then (if not-caught-fail(v_460) then (if (not-caught-fail(v_461) && success?(is-true(success?(1-proj-3-tuple(v_461))))) then (if not-caught-fail(v_463) then (v_463,3-proj-3-tuple(v_461),1-proj-3-tuple(v_461)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_465: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_464),2-proj-3-tuple(v_458),3-proj-3-tuple(v_458)))) in
        {69}let v_466: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_456)) && success?(symmetricstatepack(1-proj-3-tuple(v_464),2-proj-3-tuple(v_458),3-proj-3-tuple(v_458)))) then (if (not-caught-fail(v_465) && success?(is-true(success?(1-proj-3-tuple(v_465))))) then symmetricstatepack(1-proj-3-tuple(v_465),2-proj-3-tuple(v_465),hash(3-proj-3-tuple(v_465),3-proj-3-tuple(v_456))) else fail-any) else fail-any)) in
        {70}let v_467: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_456)) && success?(1-proj-7-tuple(v_455))) then (if (not-caught-fail(v_458) && success?(is-true(success?(1-proj-3-tuple(v_458))))) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-3-tuple(v_464))))) then (if not-caught-fail(v_466) then (v_466,2-proj-3-tuple(v_464),3-proj-3-tuple(v_464)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_468: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_467),2-proj-7-tuple(v_455),3-proj-7-tuple(v_455),4-proj-7-tuple(v_455),5-proj-7-tuple(v_455),6-proj-7-tuple(v_455),7-proj-7-tuple(v_455))) in
        {72}let (hs_469: handshakestate,re_470: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_455) && success?(is-true(success?(1-proj-7-tuple(v_455))))) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-3-tuple(v_456))))) then (if not-caught-fail(v_457) then (if (not-caught-fail(v_467) && success?(is-true(success?(1-proj-3-tuple(v_467))))) then (if (v_457 && 3-proj-3-tuple(v_467)) then (if not-caught-fail(v_468) then (v_468,getpublickey(3-proj-7-tuple(v_455)),2-proj-3-tuple(v_467),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {73}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {74}insert statestore(alice,bob,statepack_c(hs_469))
    ) | (
        {101}get statestore(=alice,=bob,statepack_c(hs_471: handshakestate)) in
        {76}let v_472: bitstring = catch-fail(handshakestateunpack(hs_471)) in
        {77}let v_473: bitstring = catch-fail((empty,empty,empty)) in
        {78}let v_474: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_472))) in
        {79}let v_475: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_474))) in
        {80}let v_476: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_475),2-proj-2-tuple(v_475),3-proj-3-tuple(v_474),msg_c(alice,bob))) in
        {81}let v_477: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_474))) in
        {82}let v_478: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_475))) && success?(1-proj-3-tuple(v_474))) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-2-tuple(v_477))))) then cipherstatepack(1-proj-2-tuple(v_477),increment_nonce(2-proj-2-tuple(v_475))) else fail-any) else fail-any)) in
        {83}let v_479: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_474)) && success?(1-proj-3-tuple(v_474))) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-2-tuple(v_475))))) then (if not-caught-fail(v_476) then (if not-caught-fail(v_478) then (v_478,v_476) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_480: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_479),2-proj-3-tuple(v_474),3-proj-3-tuple(v_474)))) in
        {85}let v_481: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_479)) && success?(symmetricstatepack(1-proj-2-tuple(v_479),2-proj-3-tuple(v_474),3-proj-3-tuple(v_474)))) then (if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-3-tuple(v_480))))) then symmetricstatepack(1-proj-3-tuple(v_480),2-proj-3-tuple(v_480),hash(3-proj-3-tuple(v_480),2-proj-2-tuple(v_479))) else fail-any) else fail-any)) in
        {86}let v_482: bitstring = catch-fail((if success?(1-proj-7-tuple(v_472)) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-3-tuple(v_474))))) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-2-tuple(v_479))))) then (if not-caught-fail(v_481) then (v_481,2-proj-2-tuple(v_479)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_483: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_482),2-proj-7-tuple(v_472),3-proj-7-tuple(v_472),4-proj-7-tuple(v_472),5-proj-7-tuple(v_472),6-proj-7-tuple(v_472),7-proj-7-tuple(v_472))) in
        {88}let v_484: bitstring = catch-fail(concat3(1-proj-3-tuple(v_473),2-proj-3-tuple(v_473),2-proj-2-tuple(v_482))) in
        {89}let v_485: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_482))) in
        {90}let v_486: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_485),zero)) in
        {91}let v_487: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_485),zero)) in
        {92}let v_488: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_485),zero)) in
        {93}let v_489: bitstring = catch-fail((if success?(2-proj-3-tuple(v_485)) then (if not-caught-fail(v_486) then (if not-caught-fail(v_487) then (if not-caught-fail(v_488) then (v_486,v_487,v_488) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {94}let v_490: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_489)) then cipherstatepack(1-proj-3-tuple(v_489),minnonce) else fail-any)) in
        {95}let v_491: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_489)) then cipherstatepack(2-proj-3-tuple(v_489),minnonce) else fail-any)) in
        {96}let v_492: bitstring = catch-fail((if success?(1-proj-2-tuple(v_482)) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then (if (not-caught-fail(v_489) && success?(is-true(success?(1-proj-3-tuple(v_489))))) then (if not-caught-fail(v_490) then (if not-caught-fail(v_491) then (1-proj-2-tuple(v_482),v_490,v_491) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let (hs_493: handshakestate,re_494: key,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-7-tuple(v_472))))) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-3-tuple(v_473))))) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-2-tuple(v_482))))) then (if not-caught-fail(v_483) then (if not-caught-fail(v_484) then (if (not-caught-fail(v_492) && success?(is-true(success?(1-proj-3-tuple(v_492))))) then (v_483,5-proj-7-tuple(v_472),v_484,2-proj-3-tuple(v_492),3-proj-3-tuple(v_492)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {98}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {99}insert statestore(alice,bob,statepack_d(hs_493));
        {100}out(pub, message_c)
    ) | (
        {102}event LeakS(phase0,alice);
        {103}out(pub, key_s(alice))
    ) | (
        {104}phase 1;
        {105}event LeakS(phase1,alice);
        {106}out(pub, key_s(alice))
    )
) | (
    {107}let v_495: key = catch-fail(dhexp(key_s(alice),g)) in
    {108}let s_496: keypair = (if not-caught-fail(v_495) then keypairpack(v_495,key_s(alice)) else fail-any) in
    {109}out(pub, getpublickey(s_496));
    (
        {110}let e_497: keypair = keypairpack(empty,empty) in
        {111}let v_498: key = catch-fail(dhexp(key_s(charlie),g)) in
        {112}let rs_499: key = getpublickey((if not-caught-fail(v_498) then keypairpack(v_498,key_s(charlie)) else fail-any)) in
        {113}let re_500: key = empty in
        {114}let v_501: bitstring = catch-fail(hash(somename,empty)) in
        {115}let v_502: key = catch-fail(v_501) in
        {116}let v_503: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {117}let v_504: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_501) then (if not-caught-fail(v_502) then (if not-caught-fail(v_503) then symmetricstatepack(v_503,v_502,v_501) else fail-any) else fail-any) else fail-any))) in
        {118}let v_505: symmetricstate = catch-fail((if success?((if not-caught-fail(v_501) then (if not-caught-fail(v_502) then (if not-caught-fail(v_503) then symmetricstatepack(v_503,v_502,v_501) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-3-tuple(v_504))))) then symmetricstatepack(1-proj-3-tuple(v_504),2-proj-3-tuple(v_504),hash(3-proj-3-tuple(v_504),empty)) else fail-any) else fail-any)) in
        {119}let v_506: bitstring = catch-fail(symmetricstateunpack(v_505)) in
        {120}let v_507: symmetricstate = catch-fail((if success?(getpublickey(s_496)) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then symmetricstatepack(1-proj-3-tuple(v_506),2-proj-3-tuple(v_506),hash(3-proj-3-tuple(v_506),getpublickey(s_496))) else fail-any) else fail-any)) in
        {121}let v_508: bitstring = catch-fail(symmetricstateunpack(v_507)) in
        {122}let v_509: symmetricstate = catch-fail((if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then symmetricstatepack(1-proj-3-tuple(v_508),2-proj-3-tuple(v_508),hash(3-proj-3-tuple(v_508),rs_499)) else fail-any)) in
        {123}let hs_510: handshakestate = (if not-caught-fail(v_505) then (if not-caught-fail(v_507) then (if not-caught-fail(v_509) then handshakestatepack(v_509,s_496,e_497,rs_499,re_500,empty,true) else fail-any) else fail-any) else fail-any) in
        {124}insert statestore(alice,charlie,statepack_a(hs_510))
    ) | (
        {161}get statestore(=alice,=charlie,statepack_a(hs_511: handshakestate)) in
        {125}let v_512: bitstring = catch-fail(handshakestateunpack(hs_511)) in
        {126}let v_513: bitstring = catch-fail((empty,empty,empty)) in
        {127}let v_514: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {128}let v_515: keypair = catch-fail((if not-caught-fail(v_514) then keypairpack(v_514,key_e(alice,charlie)) else fail-any)) in
        {129}let v_516: bitstring = catch-fail(getpublickey(v_515)) in
        {130}let v_517: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_512))) in
        {131}let v_518: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_512)) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-3-tuple(v_517))))) then symmetricstatepack(1-proj-3-tuple(v_517),2-proj-3-tuple(v_517),hash(3-proj-3-tuple(v_517),v_516)) else fail-any) else fail-any)) in
        {132}let v_519: bitstring = catch-fail(keypairunpack(v_515)) in
        {133}let v_520: bitstring = catch-fail(symmetricstateunpack(v_518)) in
        {134}let v_521: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_520),(if success?(4-proj-7-tuple(v_512)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),4-proj-7-tuple(v_512)) else fail-any) else fail-any))) in
        {135}let v_522: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_520),(if success?(4-proj-7-tuple(v_512)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),4-proj-7-tuple(v_512)) else fail-any) else fail-any))) in
        {136}let v_523: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_520),(if success?(4-proj-7-tuple(v_512)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),4-proj-7-tuple(v_512)) else fail-any) else fail-any))) in
        {137}let v_524: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_512)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),4-proj-7-tuple(v_512)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_520))) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (v_521,v_522,v_523) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_525: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_512)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),4-proj-7-tuple(v_512)) else fail-any) else fail-any)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_524)) then cipherstatepack(2-proj-3-tuple(v_524),minnonce) else fail-any),1-proj-3-tuple(v_524),3-proj-3-tuple(v_520)) else fail-any) else fail-any) else fail-any)) in
        {139}let v_526: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_512))) in
        {140}let v_527: bitstring = catch-fail(symmetricstateunpack(v_525)) in
        {141}let v_528: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_527),(if (success?(4-proj-7-tuple(v_512)) && success?(2-proj-7-tuple(v_512))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_512)) else fail-any) else fail-any))) in
        {142}let v_529: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_527),(if (success?(4-proj-7-tuple(v_512)) && success?(2-proj-7-tuple(v_512))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_512)) else fail-any) else fail-any))) in
        {143}let v_530: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_527),(if (success?(4-proj-7-tuple(v_512)) && success?(2-proj-7-tuple(v_512))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_512)) else fail-any) else fail-any))) in
        {144}let v_531: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_512)) && success?(2-proj-7-tuple(v_512))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_512)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_527))) then (if not-caught-fail(v_528) then (if not-caught-fail(v_529) then (if not-caught-fail(v_530) then (v_528,v_529,v_530) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {145}let v_532: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_512)) && success?(2-proj-7-tuple(v_512))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then dhexp(2-proj-2-tuple(v_526),4-proj-7-tuple(v_512)) else fail-any) else fail-any)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_531)) then cipherstatepack(2-proj-3-tuple(v_531),minnonce) else fail-any),1-proj-3-tuple(v_531),3-proj-3-tuple(v_527)) else fail-any) else fail-any) else fail-any)) in
        {146}let v_533: bitstring = catch-fail(symmetricstateunpack(v_532)) in
        {147}let v_534: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_533))) in
        {148}let v_535: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_534),2-proj-2-tuple(v_534),3-proj-3-tuple(v_533),msg_a(alice,charlie))) in
        {149}let v_536: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_533))) in
        {150}let v_537: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_534))) && success?(1-proj-3-tuple(v_533))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then cipherstatepack(1-proj-2-tuple(v_536),increment_nonce(2-proj-2-tuple(v_534))) else fail-any) else fail-any)) in
        {151}let v_538: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_533)) && success?(1-proj-3-tuple(v_533))) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-2-tuple(v_534))))) then (if not-caught-fail(v_535) then (if not-caught-fail(v_537) then (v_537,v_535) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {152}let v_539: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_538),2-proj-3-tuple(v_533),3-proj-3-tuple(v_533)))) in
        {153}let v_540: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_538)) && success?(symmetricstatepack(1-proj-2-tuple(v_538),2-proj-3-tuple(v_533),3-proj-3-tuple(v_533)))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),2-proj-2-tuple(v_538))) else fail-any) else fail-any)) in
        {154}let v_541: bitstring = catch-fail((if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then (if not-caught-fail(v_540) then (v_540,2-proj-2-tuple(v_538)) else fail-any) else fail-any) else fail-any)) in
        {155}let v_542: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_541),2-proj-7-tuple(v_512),v_515,4-proj-7-tuple(v_512),5-proj-7-tuple(v_512),6-proj-7-tuple(v_512),7-proj-7-tuple(v_512))) in
        {156}let v_543: bitstring = catch-fail(concat3(v_516,2-proj-3-tuple(v_513),2-proj-2-tuple(v_541))) in
        {157}let (hs_544: handshakestate,re_545: key,message_a_546: bitstring) = (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-7-tuple(v_512))))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-3-tuple(v_513))))) then (if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (if not-caught-fail(v_518) then (if not-caught-fail(v_525) then (if not-caught-fail(v_532) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-2-tuple(v_541))))) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (v_542,5-proj-7-tuple(v_512),v_543) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {158}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {159}insert statestore(alice,charlie,statepack_b(hs_544));
        {160}out(pub, message_a_546)
    ) | (
        {180}get statestore(=alice,=charlie,statepack_b(hs_547: handshakestate)) in
        {162}in(pub, message_b_548: bitstring);
        {163}let v_549: bitstring = catch-fail(handshakestateunpack(hs_547)) in
        {164}let v_550: bitstring = catch-fail(deconcat3(message_b_548)) in
        {165}let v_551: bool = catch-fail(true) in
        {166}let v_552: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_549))) in
        {167}let v_553: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_552))) in
        {168}let v_554: aead = catch-fail(decrypt(1-proj-2-tuple(v_553),2-proj-2-tuple(v_553),3-proj-3-tuple(v_552),3-proj-3-tuple(v_550))) in
        {169}let v_555: bitstring = catch-fail(aeadunpack(v_554)) in
        {170}let v_556: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_552))) in
        {171}let v_557: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_553))) && success?(1-proj-3-tuple(v_552))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then cipherstatepack(1-proj-2-tuple(v_556),increment_nonce(2-proj-2-tuple(v_553))) else fail-any) else fail-any)) in
        {172}let v_558: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_550)) && (success?(3-proj-3-tuple(v_552)) && success?(1-proj-3-tuple(v_552)))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then (if not-caught-fail(v_554) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if not-caught-fail(v_557) then (v_557,3-proj-3-tuple(v_555),1-proj-3-tuple(v_555)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {173}let v_559: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_558),2-proj-3-tuple(v_552),3-proj-3-tuple(v_552)))) in
        {174}let v_560: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_550)) && success?(symmetricstatepack(1-proj-3-tuple(v_558),2-proj-3-tuple(v_552),3-proj-3-tuple(v_552)))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then symmetricstatepack(1-proj-3-tuple(v_559),2-proj-3-tuple(v_559),hash(3-proj-3-tuple(v_559),3-proj-3-tuple(v_550))) else fail-any) else fail-any)) in
        {175}let v_561: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_550)) && success?(1-proj-7-tuple(v_549))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if not-caught-fail(v_560) then (v_560,2-proj-3-tuple(v_558),3-proj-3-tuple(v_558)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {176}let v_562: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_561),2-proj-7-tuple(v_549),3-proj-7-tuple(v_549),4-proj-7-tuple(v_549),5-proj-7-tuple(v_549),6-proj-7-tuple(v_549),7-proj-7-tuple(v_549))) in
        {177}let (hs_563: handshakestate,re_564: key,plaintext_b_565: bitstring,valid_566: bool) = (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-7-tuple(v_549))))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if not-caught-fail(v_551) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if (v_551 && 3-proj-3-tuple(v_561)) then (if not-caught-fail(v_562) then (v_562,getpublickey(3-proj-7-tuple(v_549)),2-proj-3-tuple(v_561),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {178}event RecvMsg(alice,charlie,stage_b,plaintext_b_565,valid_566);
        {179}insert statestore(alice,charlie,statepack_c(hs_563))
    ) | (
        {206}get statestore(=alice,=charlie,statepack_c(hs_567: handshakestate)) in
        {181}let v_568: bitstring = catch-fail(handshakestateunpack(hs_567)) in
        {182}let v_569: bitstring = catch-fail((empty,empty,empty)) in
        {183}let v_570: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_568))) in
        {184}let v_571: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_570))) in
        {185}let v_572: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_571),2-proj-2-tuple(v_571),3-proj-3-tuple(v_570),msg_c(alice,charlie))) in
        {186}let v_573: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_570))) in
        {187}let v_574: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_571))) && success?(1-proj-3-tuple(v_570))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-2-tuple(v_573))))) then cipherstatepack(1-proj-2-tuple(v_573),increment_nonce(2-proj-2-tuple(v_571))) else fail-any) else fail-any)) in
        {188}let v_575: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_570)) && success?(1-proj-3-tuple(v_570))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then (if not-caught-fail(v_572) then (if not-caught-fail(v_574) then (v_574,v_572) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_576: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_575),2-proj-3-tuple(v_570),3-proj-3-tuple(v_570)))) in
        {190}let v_577: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_575)) && success?(symmetricstatepack(1-proj-2-tuple(v_575),2-proj-3-tuple(v_570),3-proj-3-tuple(v_570)))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then symmetricstatepack(1-proj-3-tuple(v_576),2-proj-3-tuple(v_576),hash(3-proj-3-tuple(v_576),2-proj-2-tuple(v_575))) else fail-any) else fail-any)) in
        {191}let v_578: bitstring = catch-fail((if success?(1-proj-7-tuple(v_568)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then (if not-caught-fail(v_577) then (v_577,2-proj-2-tuple(v_575)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {192}let v_579: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_578),2-proj-7-tuple(v_568),3-proj-7-tuple(v_568),4-proj-7-tuple(v_568),5-proj-7-tuple(v_568),6-proj-7-tuple(v_568),7-proj-7-tuple(v_568))) in
        {193}let v_580: bitstring = catch-fail(concat3(1-proj-3-tuple(v_569),2-proj-3-tuple(v_569),2-proj-2-tuple(v_578))) in
        {194}let v_581: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_578))) in
        {195}let v_582: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_581),zero)) in
        {196}let v_583: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_581),zero)) in
        {197}let v_584: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_581),zero)) in
        {198}let v_585: bitstring = catch-fail((if success?(2-proj-3-tuple(v_581)) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (v_582,v_583,v_584) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_586: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_585)) then cipherstatepack(1-proj-3-tuple(v_585),minnonce) else fail-any)) in
        {200}let v_587: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_585)) then cipherstatepack(2-proj-3-tuple(v_585),minnonce) else fail-any)) in
        {201}let v_588: bitstring = catch-fail((if success?(1-proj-2-tuple(v_578)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (1-proj-2-tuple(v_578),v_586,v_587) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let (hs_589: handshakestate,re_590: key,message_c_591: bitstring,cs1_592: cipherstate,cs2_593: cipherstate) = (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-7-tuple(v_568))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-2-tuple(v_578))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (v_579,5-proj-7-tuple(v_568),v_580,2-proj-3-tuple(v_588),3-proj-3-tuple(v_588)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {203}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {204}insert statestore(alice,charlie,statepack_d(hs_589));
        {205}out(pub, message_c_591)
    ) | (
        {207}event LeakS(phase0,alice);
        {208}out(pub, key_s(alice))
    ) | (
        {209}phase 1;
        {210}event LeakS(phase1,alice);
        {211}out(pub, key_s(alice))
    )
) | (
    {212}let v_594: key = catch-fail(dhexp(key_s(bob),g)) in
    {213}let s_595: keypair = (if not-caught-fail(v_594) then keypairpack(v_594,key_s(bob)) else fail-any) in
    {214}out(pub, getpublickey(s_595));
    (
        {215}let e_596: keypair = keypairpack(empty,empty) in
        {216}let v_597: key = catch-fail(dhexp(key_s(alice),g)) in
        {217}let rs_598: key = getpublickey((if not-caught-fail(v_597) then keypairpack(v_597,key_s(alice)) else fail-any)) in
        {218}let re_599: key = empty in
        {219}let v_600: bitstring = catch-fail(hash(somename,empty)) in
        {220}let v_601: key = catch-fail(v_600) in
        {221}let v_602: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {222}let v_603: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then symmetricstatepack(v_602,v_601,v_600) else fail-any) else fail-any) else fail-any))) in
        {223}let v_604: symmetricstate = catch-fail((if success?((if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then symmetricstatepack(v_602,v_601,v_600) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then symmetricstatepack(1-proj-3-tuple(v_603),2-proj-3-tuple(v_603),hash(3-proj-3-tuple(v_603),empty)) else fail-any) else fail-any)) in
        {224}let v_605: bitstring = catch-fail(symmetricstateunpack(v_604)) in
        {225}let v_606: symmetricstate = catch-fail((if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then symmetricstatepack(1-proj-3-tuple(v_605),2-proj-3-tuple(v_605),hash(3-proj-3-tuple(v_605),rs_598)) else fail-any)) in
        {226}let v_607: bitstring = catch-fail(symmetricstateunpack(v_606)) in
        {227}let v_608: symmetricstate = catch-fail((if success?(getpublickey(s_595)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_607),hash(3-proj-3-tuple(v_607),getpublickey(s_595))) else fail-any) else fail-any)) in
        {228}let hs_609: handshakestate = (if not-caught-fail(v_604) then (if not-caught-fail(v_606) then (if not-caught-fail(v_608) then handshakestatepack(v_608,s_595,e_596,rs_598,re_599,empty,false) else fail-any) else fail-any) else fail-any) in
        {229}insert statestore(bob,alice,statepack_a(hs_609))
    ) | (
        {265}get statestore(=bob,=alice,statepack_a(hs_610: handshakestate)) in
        {230}in(pub, message_a_611: bitstring);
        {231}let v_612: bitstring = catch-fail(handshakestateunpack(hs_610)) in
        {232}let v_613: bitstring = catch-fail(deconcat3(message_a_611)) in
        {233}let v_614: bool = catch-fail(true) in
        {234}let v_615: key = catch-fail(1-proj-3-tuple(v_613)) in
        {235}let v_616: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_612))) in
        {236}let v_617: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_612)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack(1-proj-3-tuple(v_616),2-proj-3-tuple(v_616),hash(3-proj-3-tuple(v_616),v_615)) else fail-any) else fail-any)) in
        {237}let v_618: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_612))) in
        {238}let v_619: bitstring = catch-fail(symmetricstateunpack(v_617)) in
        {239}let v_620: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_619),(if success?(2-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any))) in
        {240}let v_621: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_619),(if success?(2-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any))) in
        {241}let v_622: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_619),(if success?(2-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any))) in
        {242}let v_623: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_619))) then (if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (v_620,v_621,v_622) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_624: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_612)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then dhexp(2-proj-2-tuple(v_618),v_615) else fail-any) else fail-any)) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_623)) then cipherstatepack(2-proj-3-tuple(v_623),minnonce) else fail-any),1-proj-3-tuple(v_623),3-proj-3-tuple(v_619)) else fail-any) else fail-any) else fail-any)) in
        {244}let v_625: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_612))) in
        {245}let v_626: bitstring = catch-fail(symmetricstateunpack(v_624)) in
        {246}let v_627: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_626),(if (success?(4-proj-7-tuple(v_612)) && success?(2-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any))) in
        {247}let v_628: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_626),(if (success?(4-proj-7-tuple(v_612)) && success?(2-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any))) in
        {248}let v_629: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_626),(if (success?(4-proj-7-tuple(v_612)) && success?(2-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any))) in
        {249}let v_630: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_612)) && success?(2-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_626))) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (v_627,v_628,v_629) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_631: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_612)) && success?(2-proj-7-tuple(v_612))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),4-proj-7-tuple(v_612)) else fail-any) else fail-any)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_630)) then cipherstatepack(2-proj-3-tuple(v_630),minnonce) else fail-any),1-proj-3-tuple(v_630),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any)) in
        {251}let v_632: bitstring = catch-fail(symmetricstateunpack(v_631)) in
        {252}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_632))) in
        {253}let v_634: aead = catch-fail(decrypt(1-proj-2-tuple(v_633),2-proj-2-tuple(v_633),3-proj-3-tuple(v_632),3-proj-3-tuple(v_613))) in
        {254}let v_635: bitstring = catch-fail(aeadunpack(v_634)) in
        {255}let v_636: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_632))) in
        {256}let v_637: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_633))) && success?(1-proj-3-tuple(v_632))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then cipherstatepack(1-proj-2-tuple(v_636),increment_nonce(2-proj-2-tuple(v_633))) else fail-any) else fail-any)) in
        {257}let v_638: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_613)) && (success?(3-proj-3-tuple(v_632)) && success?(1-proj-3-tuple(v_632)))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then (if not-caught-fail(v_634) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,3-proj-3-tuple(v_635),1-proj-3-tuple(v_635)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {258}let v_639: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_632),3-proj-3-tuple(v_632)))) in
        {259}let v_640: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_613)) && success?(symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_632),3-proj-3-tuple(v_632)))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then symmetricstatepack(1-proj-3-tuple(v_639),2-proj-3-tuple(v_639),hash(3-proj-3-tuple(v_639),3-proj-3-tuple(v_613))) else fail-any) else fail-any)) in
        {260}let v_641: bitstring = catch-fail((if success?(3-proj-3-tuple(v_613)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_640) then (v_640,2-proj-3-tuple(v_638),3-proj-3-tuple(v_638)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_642: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_641),2-proj-7-tuple(v_612),3-proj-7-tuple(v_612),4-proj-7-tuple(v_612),v_615,6-proj-7-tuple(v_612),7-proj-7-tuple(v_612))) in
        {262}let (hs_643: handshakestate,re_644: key,plaintext_a: bitstring,valid_645: bool) = (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-7-tuple(v_612))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then (if not-caught-fail(v_617) then (if not-caught-fail(v_624) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (v_614 && 3-proj-3-tuple(v_641)) then (if not-caught-fail(v_642) then (v_642,getpublickey(3-proj-7-tuple(v_612)),2-proj-3-tuple(v_641),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {263}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_645);
        {264}insert statestore(bob,alice,statepack_b(hs_643))
    ) | (
        {283}get statestore(=bob,=alice,statepack_b(hs_646: handshakestate)) in
        {266}let v_647: bitstring = catch-fail(handshakestateunpack(hs_646)) in
        {267}let v_648: bitstring = catch-fail((empty,empty,empty)) in
        {268}let v_649: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_647))) in
        {269}let v_650: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {270}let v_651: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_650),2-proj-2-tuple(v_650),3-proj-3-tuple(v_649),msg_b(bob,alice))) in
        {271}let v_652: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {272}let v_653: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_650))) && success?(1-proj-3-tuple(v_649))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then cipherstatepack(1-proj-2-tuple(v_652),increment_nonce(2-proj-2-tuple(v_650))) else fail-any) else fail-any)) in
        {273}let v_654: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_649)) && success?(1-proj-3-tuple(v_649))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_651) then (if not-caught-fail(v_653) then (v_653,v_651) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {274}let v_655: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_654),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) in
        {275}let v_656: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_654)) && success?(symmetricstatepack(1-proj-2-tuple(v_654),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_655),hash(3-proj-3-tuple(v_655),2-proj-2-tuple(v_654))) else fail-any) else fail-any)) in
        {276}let v_657: bitstring = catch-fail((if success?(1-proj-7-tuple(v_647)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then (if not-caught-fail(v_656) then (v_656,2-proj-2-tuple(v_654)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_658: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_657),2-proj-7-tuple(v_647),3-proj-7-tuple(v_647),4-proj-7-tuple(v_647),5-proj-7-tuple(v_647),6-proj-7-tuple(v_647),7-proj-7-tuple(v_647))) in
        {278}let v_659: bitstring = catch-fail(concat3(1-proj-3-tuple(v_648),2-proj-3-tuple(v_648),2-proj-2-tuple(v_657))) in
        {279}let (hs_660: handshakestate,re_661: key,message_b_662: bitstring) = (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-7-tuple(v_647))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_658) then (if not-caught-fail(v_659) then (v_658,5-proj-7-tuple(v_647),v_659) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {280}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {281}insert statestore(bob,alice,statepack_c(hs_660));
        {282}out(pub, message_b_662)
    ) | (
        {311}get statestore(=bob,=alice,statepack_c(hs_663: handshakestate)) in
        {284}in(pub, message_c_664: bitstring);
        {285}let v_665: bitstring = catch-fail(handshakestateunpack(hs_663)) in
        {286}let v_666: bitstring = catch-fail(deconcat3(message_c_664)) in
        {287}let v_667: bool = catch-fail(true) in
        {288}let v_668: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_665))) in
        {289}let v_669: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {290}let v_670: aead = catch-fail(decrypt(1-proj-2-tuple(v_669),2-proj-2-tuple(v_669),3-proj-3-tuple(v_668),3-proj-3-tuple(v_666))) in
        {291}let v_671: bitstring = catch-fail(aeadunpack(v_670)) in
        {292}let v_672: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {293}let v_673: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_669))) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-2-tuple(v_672))))) then cipherstatepack(1-proj-2-tuple(v_672),increment_nonce(2-proj-2-tuple(v_669))) else fail-any) else fail-any)) in
        {294}let v_674: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_666)) && (success?(3-proj-3-tuple(v_668)) && success?(1-proj-3-tuple(v_668)))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then (if not-caught-fail(v_670) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if not-caught-fail(v_673) then (v_673,3-proj-3-tuple(v_671),1-proj-3-tuple(v_671)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_675: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) in
        {296}let v_676: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_666)) && success?(symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_675),hash(3-proj-3-tuple(v_675),3-proj-3-tuple(v_666))) else fail-any) else fail-any)) in
        {297}let v_677: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_666)) && success?(1-proj-7-tuple(v_665))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if not-caught-fail(v_676) then (v_676,2-proj-3-tuple(v_674),3-proj-3-tuple(v_674)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let v_678: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_677),2-proj-7-tuple(v_665),3-proj-7-tuple(v_665),4-proj-7-tuple(v_665),5-proj-7-tuple(v_665),6-proj-7-tuple(v_665),7-proj-7-tuple(v_665))) in
        {299}let v_679: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_677))) in
        {300}let v_680: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_679),zero)) in
        {301}let v_681: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_679),zero)) in
        {302}let v_682: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_679),zero)) in
        {303}let v_683: bitstring = catch-fail((if success?(2-proj-3-tuple(v_679)) then (if not-caught-fail(v_680) then (if not-caught-fail(v_681) then (if not-caught-fail(v_682) then (v_680,v_681,v_682) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {304}let v_684: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_683)) then cipherstatepack(1-proj-3-tuple(v_683),minnonce) else fail-any)) in
        {305}let v_685: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_683)) then cipherstatepack(2-proj-3-tuple(v_683),minnonce) else fail-any)) in
        {306}let v_686: bitstring = catch-fail((if success?(1-proj-3-tuple(v_677)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if not-caught-fail(v_684) then (if not-caught-fail(v_685) then (1-proj-3-tuple(v_677),v_684,v_685) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {307}let (hs_687: handshakestate,re_688: key,plaintext_c: bitstring,valid_689: bool,cs1_690: cipherstate,cs2_691: cipherstate) = (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-7-tuple(v_665))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if not-caught-fail(v_667) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if (v_667 && 3-proj-3-tuple(v_677)) then (if not-caught-fail(v_678) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (v_678,getpublickey(3-proj-7-tuple(v_665)),2-proj-3-tuple(v_677),true,2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {308}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_689);
        {309}insert statestore(bob,alice,statepack_d(hs_687));
        {310}event RecvEnd(valid_689)
    ) | (
        {312}event LeakS(phase0,bob);
        {313}out(pub, key_s(bob))
    ) | (
        {314}phase 1;
        {315}event LeakS(phase1,bob);
        {316}out(pub, key_s(bob))
    )
) | (
    {317}let v_692: key = catch-fail(dhexp(key_s(bob),g)) in
    {318}let s_693: keypair = (if not-caught-fail(v_692) then keypairpack(v_692,key_s(bob)) else fail-any) in
    {319}out(pub, getpublickey(s_693));
    (
        {320}let e_694: keypair = keypairpack(empty,empty) in
        {321}let v_695: key = catch-fail(dhexp(key_s(charlie),g)) in
        {322}let rs_696: key = getpublickey((if not-caught-fail(v_695) then keypairpack(v_695,key_s(charlie)) else fail-any)) in
        {323}let re_697: key = empty in
        {324}let v_698: bitstring = catch-fail(hash(somename,empty)) in
        {325}let v_699: key = catch-fail(v_698) in
        {326}let v_700: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {327}let v_701: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then symmetricstatepack(v_700,v_699,v_698) else fail-any) else fail-any) else fail-any))) in
        {328}let v_702: symmetricstate = catch-fail((if success?((if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then symmetricstatepack(v_700,v_699,v_698) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_701),hash(3-proj-3-tuple(v_701),empty)) else fail-any) else fail-any)) in
        {329}let v_703: bitstring = catch-fail(symmetricstateunpack(v_702)) in
        {330}let v_704: symmetricstate = catch-fail((if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then symmetricstatepack(1-proj-3-tuple(v_703),2-proj-3-tuple(v_703),hash(3-proj-3-tuple(v_703),rs_696)) else fail-any)) in
        {331}let v_705: bitstring = catch-fail(symmetricstateunpack(v_704)) in
        {332}let v_706: symmetricstate = catch-fail((if success?(getpublickey(s_693)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then symmetricstatepack(1-proj-3-tuple(v_705),2-proj-3-tuple(v_705),hash(3-proj-3-tuple(v_705),getpublickey(s_693))) else fail-any) else fail-any)) in
        {333}let hs_707: handshakestate = (if not-caught-fail(v_702) then (if not-caught-fail(v_704) then (if not-caught-fail(v_706) then handshakestatepack(v_706,s_693,e_694,rs_696,re_697,empty,false) else fail-any) else fail-any) else fail-any) in
        {334}insert statestore(bob,charlie,statepack_a(hs_707))
    ) | (
        {370}get statestore(=bob,=charlie,statepack_a(hs_708: handshakestate)) in
        {335}in(pub, message_a_709: bitstring);
        {336}let v_710: bitstring = catch-fail(handshakestateunpack(hs_708)) in
        {337}let v_711: bitstring = catch-fail(deconcat3(message_a_709)) in
        {338}let v_712: bool = catch-fail(true) in
        {339}let v_713: key = catch-fail(1-proj-3-tuple(v_711)) in
        {340}let v_714: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_710))) in
        {341}let v_715: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_710)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then symmetricstatepack(1-proj-3-tuple(v_714),2-proj-3-tuple(v_714),hash(3-proj-3-tuple(v_714),v_713)) else fail-any) else fail-any)) in
        {342}let v_716: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_710))) in
        {343}let v_717: bitstring = catch-fail(symmetricstateunpack(v_715)) in
        {344}let v_718: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_717),(if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any))) in
        {345}let v_719: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_717),(if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any))) in
        {346}let v_720: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_717),(if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any))) in
        {347}let v_721: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_717))) then (if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (v_718,v_719,v_720) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_722: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_710)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then dhexp(2-proj-2-tuple(v_716),v_713) else fail-any) else fail-any)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_721)) then cipherstatepack(2-proj-3-tuple(v_721),minnonce) else fail-any),1-proj-3-tuple(v_721),3-proj-3-tuple(v_717)) else fail-any) else fail-any) else fail-any)) in
        {349}let v_723: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_710))) in
        {350}let v_724: bitstring = catch-fail(symmetricstateunpack(v_722)) in
        {351}let v_725: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_724),(if (success?(4-proj-7-tuple(v_710)) && success?(2-proj-7-tuple(v_710))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),4-proj-7-tuple(v_710)) else fail-any) else fail-any))) in
        {352}let v_726: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_724),(if (success?(4-proj-7-tuple(v_710)) && success?(2-proj-7-tuple(v_710))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),4-proj-7-tuple(v_710)) else fail-any) else fail-any))) in
        {353}let v_727: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_724),(if (success?(4-proj-7-tuple(v_710)) && success?(2-proj-7-tuple(v_710))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),4-proj-7-tuple(v_710)) else fail-any) else fail-any))) in
        {354}let v_728: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_710)) && success?(2-proj-7-tuple(v_710))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),4-proj-7-tuple(v_710)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_724))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (v_725,v_726,v_727) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_729: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_710)) && success?(2-proj-7-tuple(v_710))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),4-proj-7-tuple(v_710)) else fail-any) else fail-any)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_728)) then cipherstatepack(2-proj-3-tuple(v_728),minnonce) else fail-any),1-proj-3-tuple(v_728),3-proj-3-tuple(v_724)) else fail-any) else fail-any) else fail-any)) in
        {356}let v_730: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {357}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {358}let v_732: aead = catch-fail(decrypt(1-proj-2-tuple(v_731),2-proj-2-tuple(v_731),3-proj-3-tuple(v_730),3-proj-3-tuple(v_711))) in
        {359}let v_733: bitstring = catch-fail(aeadunpack(v_732)) in
        {360}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {361}let v_735: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_731))) && success?(1-proj-3-tuple(v_730))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then cipherstatepack(1-proj-2-tuple(v_734),increment_nonce(2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {362}let v_736: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_711)) && (success?(3-proj-3-tuple(v_730)) && success?(1-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,3-proj-3-tuple(v_733),1-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {363}let v_737: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) in
        {364}let v_738: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_711)) && success?(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_737),hash(3-proj-3-tuple(v_737),3-proj-3-tuple(v_711))) else fail-any) else fail-any)) in
        {365}let v_739: bitstring = catch-fail((if success?(3-proj-3-tuple(v_711)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if not-caught-fail(v_738) then (v_738,2-proj-3-tuple(v_736),3-proj-3-tuple(v_736)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {366}let v_740: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_739),2-proj-7-tuple(v_710),3-proj-7-tuple(v_710),4-proj-7-tuple(v_710),v_713,6-proj-7-tuple(v_710),7-proj-7-tuple(v_710))) in
        {367}let (hs_741: handshakestate,re_742: key,plaintext_a_743: bitstring,valid_744: bool) = (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-7-tuple(v_710))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_713) then (if not-caught-fail(v_715) then (if not-caught-fail(v_722) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if (v_712 && 3-proj-3-tuple(v_739)) then (if not-caught-fail(v_740) then (v_740,getpublickey(3-proj-7-tuple(v_710)),2-proj-3-tuple(v_739),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {368}event RecvMsg(bob,charlie,stage_a,plaintext_a_743,valid_744);
        {369}insert statestore(bob,charlie,statepack_b(hs_741))
    ) | (
        {388}get statestore(=bob,=charlie,statepack_b(hs_745: handshakestate)) in
        {371}let v_746: bitstring = catch-fail(handshakestateunpack(hs_745)) in
        {372}let v_747: bitstring = catch-fail((empty,empty,empty)) in
        {373}let v_748: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_746))) in
        {374}let v_749: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_748))) in
        {375}let v_750: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_749),2-proj-2-tuple(v_749),3-proj-3-tuple(v_748),msg_b(bob,charlie))) in
        {376}let v_751: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_748))) in
        {377}let v_752: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_749))) && success?(1-proj-3-tuple(v_748))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then cipherstatepack(1-proj-2-tuple(v_751),increment_nonce(2-proj-2-tuple(v_749))) else fail-any) else fail-any)) in
        {378}let v_753: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_748)) && success?(1-proj-3-tuple(v_748))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then (if not-caught-fail(v_750) then (if not-caught-fail(v_752) then (v_752,v_750) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {379}let v_754: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_753),2-proj-3-tuple(v_748),3-proj-3-tuple(v_748)))) in
        {380}let v_755: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_753)) && success?(symmetricstatepack(1-proj-2-tuple(v_753),2-proj-3-tuple(v_748),3-proj-3-tuple(v_748)))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then symmetricstatepack(1-proj-3-tuple(v_754),2-proj-3-tuple(v_754),hash(3-proj-3-tuple(v_754),2-proj-2-tuple(v_753))) else fail-any) else fail-any)) in
        {381}let v_756: bitstring = catch-fail((if success?(1-proj-7-tuple(v_746)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then (if not-caught-fail(v_755) then (v_755,2-proj-2-tuple(v_753)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_757: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_756),2-proj-7-tuple(v_746),3-proj-7-tuple(v_746),4-proj-7-tuple(v_746),5-proj-7-tuple(v_746),6-proj-7-tuple(v_746),7-proj-7-tuple(v_746))) in
        {383}let v_758: bitstring = catch-fail(concat3(1-proj-3-tuple(v_747),2-proj-3-tuple(v_747),2-proj-2-tuple(v_756))) in
        {384}let (hs_759: handshakestate,re_760: key,message_b_761: bitstring) = (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-7-tuple(v_746))))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (v_757,5-proj-7-tuple(v_746),v_758) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {385}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {386}insert statestore(bob,charlie,statepack_c(hs_759));
        {387}out(pub, message_b_761)
    ) | (
        {416}get statestore(=bob,=charlie,statepack_c(hs_762: handshakestate)) in
        {389}in(pub, message_c_763: bitstring);
        {390}let v_764: bitstring = catch-fail(handshakestateunpack(hs_762)) in
        {391}let v_765: bitstring = catch-fail(deconcat3(message_c_763)) in
        {392}let v_766: bool = catch-fail(true) in
        {393}let v_767: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_764))) in
        {394}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {395}let v_769: aead = catch-fail(decrypt(1-proj-2-tuple(v_768),2-proj-2-tuple(v_768),3-proj-3-tuple(v_767),3-proj-3-tuple(v_765))) in
        {396}let v_770: bitstring = catch-fail(aeadunpack(v_769)) in
        {397}let v_771: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {398}let v_772: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_768))) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then cipherstatepack(1-proj-2-tuple(v_771),increment_nonce(2-proj-2-tuple(v_768))) else fail-any) else fail-any)) in
        {399}let v_773: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_765)) && (success?(3-proj-3-tuple(v_767)) && success?(1-proj-3-tuple(v_767)))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_769) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if not-caught-fail(v_772) then (v_772,3-proj-3-tuple(v_770),1-proj-3-tuple(v_770)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let v_774: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_773),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) in
        {401}let v_775: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_765)) && success?(symmetricstatepack(1-proj-3-tuple(v_773),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_774),hash(3-proj-3-tuple(v_774),3-proj-3-tuple(v_765))) else fail-any) else fail-any)) in
        {402}let v_776: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_765)) && success?(1-proj-7-tuple(v_764))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if not-caught-fail(v_775) then (v_775,2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {403}let v_777: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_776),2-proj-7-tuple(v_764),3-proj-7-tuple(v_764),4-proj-7-tuple(v_764),5-proj-7-tuple(v_764),6-proj-7-tuple(v_764),7-proj-7-tuple(v_764))) in
        {404}let v_778: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_776))) in
        {405}let v_779: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_778),zero)) in
        {406}let v_780: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_778),zero)) in
        {407}let v_781: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_778),zero)) in
        {408}let v_782: bitstring = catch-fail((if success?(2-proj-3-tuple(v_778)) then (if not-caught-fail(v_779) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (v_779,v_780,v_781) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {409}let v_783: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_782)) then cipherstatepack(1-proj-3-tuple(v_782),minnonce) else fail-any)) in
        {410}let v_784: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_782)) then cipherstatepack(2-proj-3-tuple(v_782),minnonce) else fail-any)) in
        {411}let v_785: bitstring = catch-fail((if success?(1-proj-3-tuple(v_776)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_783) then (if not-caught-fail(v_784) then (1-proj-3-tuple(v_776),v_783,v_784) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {412}let (hs_786: handshakestate,re_787: key,plaintext_c_788: bitstring,valid_789: bool,cs1_790: cipherstate,cs2_791: cipherstate) = (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-7-tuple(v_764))))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if not-caught-fail(v_766) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if (v_766 && 3-proj-3-tuple(v_776)) then (if not-caught-fail(v_777) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (v_777,getpublickey(3-proj-7-tuple(v_764)),2-proj-3-tuple(v_776),true,2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {413}event RecvMsg(bob,charlie,stage_c,plaintext_c_788,valid_789);
        {414}insert statestore(bob,charlie,statepack_d(hs_786));
        {415}event RecvEnd(valid_789)
    ) | (
        {417}event LeakS(phase0,bob);
        {418}out(pub, key_s(bob))
    ) | (
        {419}phase 1;
        {420}event LeakS(phase1,bob);
        {421}out(pub, key_s(bob))
    )
) | (
    {422}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_872,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_872,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_872,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_872,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_872,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_872,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 139 rules in the queue.
400 rules inserted. The rule base contains 387 rules. 85 rules in the queue.
600 rules inserted. The rule base contains 576 rules. 57 rules in the queue.
800 rules inserted. The rule base contains 768 rules. 106 rules in the queue.
1000 rules inserted. The rule base contains 950 rules. 151 rules in the queue.
1200 rules inserted. The rule base contains 1120 rules. 151 rules in the queue.
1400 rules inserted. The rule base contains 1253 rules. 138 rules in the queue.
1600 rules inserted. The rule base contains 1351 rules. 122 rules in the queue.
1800 rules inserted. The rule base contains 1444 rules. 108 rules in the queue.
2000 rules inserted. The rule base contains 1320 rules. 83 rules in the queue.
2200 rules inserted. The rule base contains 1444 rules. 57 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_872,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_872,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_872,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_872,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_872,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_872,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_872,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_872,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_b(bob,alice))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 3 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 2 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 4 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

7. By 1, the attacker may have the channel pub.
By 6, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

8. By 7, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

9. By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 10 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

12. By 1, the attacker may have the channel pub.
By 11, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

13. By 12, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 12, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

15. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

16. By 1, the attacker may have the channel pub.
By 15, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

17. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

18. By 1, the attacker may have the channel pub.
By 17, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

19. Using the function empty the attacker may obtain empty.
attacker(empty).

20. Using the function somename the attacker may obtain somename.
attacker(somename).

21. By 20, the attacker may know somename.
By 19, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

22. By 21, the attacker may know hash(somename,empty).
By 19, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

23. By 22, the attacker may know hash(hash(somename,empty),empty).
By 18, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

24. By 23, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 16, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

25. By 24, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 14, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

26. By 25, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 13, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

27. By 26, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
So the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

28. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

29. By 28, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

30. By 18, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

31. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

32. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

33. By 31, the attacker may have the channel pub in phase 1.
By 32, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

35. By 14, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

36. By 33, the attacker may know key_s(bob) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

37. By 21, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

38. By 37, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

39. By 38, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 34, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 29, the attacker may know increment_nonce(minnonce) in phase 1.
By 27, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) in phase 1.
By 9, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice) in phase 1.
attacker_p1(msg_b(bob,alice)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_b(bob,alice)) cannot be proved.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_b(bob,alice))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 3 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 2 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 4 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

7. By 1, the attacker may have the channel pub.
By 6, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

8. By 7, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

9. By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 10 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

12. By 1, the attacker may have the channel pub.
By 11, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

13. By 12, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 12, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

15. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

16. By 1, the attacker may have the channel pub.
By 15, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

17. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

18. By 1, the attacker may have the channel pub.
By 17, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

19. Using the function empty the attacker may obtain empty.
attacker(empty).

20. Using the function somename the attacker may obtain somename.
attacker(somename).

21. By 20, the attacker may know somename.
By 19, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

22. By 21, the attacker may know hash(somename,empty).
By 19, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

23. By 22, the attacker may know hash(hash(somename,empty),empty).
By 18, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

24. By 23, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 16, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

25. By 24, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 14, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

26. By 25, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 13, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

27. By 26, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
So the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

28. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

29. By 28, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

30. By 18, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

31. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

32. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

33. By 31, the attacker may have the channel pub in phase 1.
By 32, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

35. By 14, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

36. By 33, the attacker may know key_s(bob) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

37. By 21, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

38. By 37, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

39. By 38, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 34, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 29, the attacker may know increment_nonce(minnonce) in phase 1.
By 27, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) in phase 1.
By 9, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice) in phase 1.
attacker_p1(msg_b(bob,alice)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) cannot be proved.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_b(bob,alice))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 3 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 2 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 4 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

7. By 1, the attacker may have the channel pub.
By 6, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

8. By 7, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

9. By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 10 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

12. By 1, the attacker may have the channel pub.
By 11, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

13. By 12, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 12, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

15. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

16. By 1, the attacker may have the channel pub.
By 15, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

17. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

18. By 1, the attacker may have the channel pub.
By 17, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

19. Using the function empty the attacker may obtain empty.
attacker(empty).

20. Using the function somename the attacker may obtain somename.
attacker(somename).

21. By 20, the attacker may know somename.
By 19, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

22. By 21, the attacker may know hash(somename,empty).
By 19, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

23. By 22, the attacker may know hash(hash(somename,empty),empty).
By 18, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

24. By 23, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 16, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

25. By 24, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 14, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

26. By 25, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 13, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

27. By 26, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
So the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

28. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

29. By 28, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

30. By 18, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

31. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

32. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

33. By 31, the attacker may have the channel pub in phase 1.
By 32, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

35. By 14, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

36. By 33, the attacker may know key_s(bob) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

37. By 21, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

38. By 37, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

39. By 38, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 34, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 29, the attacker may know increment_nonce(minnonce) in phase 1.
By 27, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) in phase 1.
By 9, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice) in phase 1.
attacker_p1(msg_b(bob,alice)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) cannot be proved.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_b(bob,alice))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 3 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 2 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 4 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

7. By 1, the attacker may have the channel pub.
By 6, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

8. By 7, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

9. By 8, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 10 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

12. By 1, the attacker may have the channel pub.
By 11, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

13. By 12, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 12, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

15. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

16. By 1, the attacker may have the channel pub.
By 15, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

17. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

18. By 1, the attacker may have the channel pub.
By 17, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

19. Using the function empty the attacker may obtain empty.
attacker(empty).

20. Using the function somename the attacker may obtain somename.
attacker(somename).

21. By 20, the attacker may know somename.
By 19, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

22. By 21, the attacker may know hash(somename,empty).
By 19, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

23. By 22, the attacker may know hash(hash(somename,empty),empty).
By 18, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

24. By 23, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 16, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

25. By 24, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 14, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

26. By 25, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 13, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

27. By 26, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
So the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

28. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

29. By 28, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

30. By 18, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

31. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

32. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

33. By 31, the attacker may have the channel pub in phase 1.
By 32, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

35. By 14, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

36. By 33, the attacker may know key_s(bob) in phase 1.
By 35, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

37. By 21, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

38. By 37, the attacker may know hash(somename,empty) in phase 1.
By 36, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

39. By 38, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 34, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 29, the attacker may know increment_nonce(minnonce) in phase 1.
By 27, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) in phase 1.
By 9, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_b(bob,alice) in phase 1.
attacker_p1(msg_b(bob,alice)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_872,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_872,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_872,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_872,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_c(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {54}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

6. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 5 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

7. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 4 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 6 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

8. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 7 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

9. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 3 may be read at get {75}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) that may be sent on channel pub by 8 may be received at input {57}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

10. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 9 may be read at get {101}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {98}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on channel pub at output {100}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)))).

11. By 1, the attacker may have the channel pub.
By 10, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)))).

12. By 11, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).

13. By 12, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).

14. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 15 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

17. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 14 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 16 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

18. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 17 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

19. By 1, the attacker may have the channel pub.
By 18, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

20. By 19, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

21. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

22. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 21 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

23. By 1, the attacker may have the channel pub.
By 22, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

24. By 23, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

25. By 23, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

26. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

27. By 1, the attacker may have the channel pub.
By 26, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

28. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

29. By 1, the attacker may have the channel pub.
By 28, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

30. Using the function empty the attacker may obtain empty.
attacker(empty).

31. Using the function somename the attacker may obtain somename.
attacker(somename).

32. By 31, the attacker may know somename.
By 30, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

33. By 32, the attacker may know hash(somename,empty).
By 30, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

34. By 33, the attacker may know hash(hash(somename,empty),empty).
By 29, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

35. By 34, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 27, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

36. By 35, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 25, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

37. By 36, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 24, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

38. By 37, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

39. By 38, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

40. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

41. By 40, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

42. By 41, the attacker may know increment_nonce(minnonce) in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(increment_nonce(minnonce)) in phase 1.
attacker_p1(increment_nonce(increment_nonce(minnonce))).

43. By 29, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

44. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

45. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

46. By 44, the attacker may have the channel pub in phase 1.
By 45, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

47. By 46, the attacker may know key_s(bob) in phase 1.
By 43, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

48. By 25, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

49. By 46, the attacker may know key_s(bob) in phase 1.
By 48, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

50. By 32, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

51. By 50, the attacker may know hash(somename,empty) in phase 1.
By 49, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

52. By 51, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 47, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

53. By 52, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 42, the attacker may know increment_nonce(increment_nonce(minnonce)) in phase 1.
By 39, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) in phase 1.
By 13, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).

54. By 53, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_c(alice,bob) in phase 1.
attacker_p1(msg_c(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_c(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_c(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_c(alice,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_c(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {54}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

6. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 5 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

7. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 4 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 6 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

8. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 7 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

9. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 3 may be read at get {75}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) that may be sent on channel pub by 8 may be received at input {57}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

10. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 9 may be read at get {101}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {98}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on channel pub at output {100}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)))).

11. By 1, the attacker may have the channel pub.
By 10, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)))).

12. By 11, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).

13. By 12, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).

14. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 15 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

17. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 14 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 16 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

18. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 17 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

19. By 1, the attacker may have the channel pub.
By 18, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

20. By 19, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

21. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

22. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 21 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

23. By 1, the attacker may have the channel pub.
By 22, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

24. By 23, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

25. By 23, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

26. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

27. By 1, the attacker may have the channel pub.
By 26, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

28. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

29. By 1, the attacker may have the channel pub.
By 28, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

30. Using the function empty the attacker may obtain empty.
attacker(empty).

31. Using the function somename the attacker may obtain somename.
attacker(somename).

32. By 31, the attacker may know somename.
By 30, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

33. By 32, the attacker may know hash(somename,empty).
By 30, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

34. By 33, the attacker may know hash(hash(somename,empty),empty).
By 29, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

35. By 34, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 27, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

36. By 35, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 25, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

37. By 36, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 24, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

38. By 37, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

39. By 38, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

40. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

41. By 40, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

42. By 41, the attacker may know increment_nonce(minnonce) in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(increment_nonce(minnonce)) in phase 1.
attacker_p1(increment_nonce(increment_nonce(minnonce))).

43. By 29, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

44. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

45. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

46. By 44, the attacker may have the channel pub in phase 1.
By 45, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

47. By 46, the attacker may know key_s(bob) in phase 1.
By 43, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

48. By 25, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

49. By 46, the attacker may know key_s(bob) in phase 1.
By 48, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

50. By 32, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

51. By 50, the attacker may know hash(somename,empty) in phase 1.
By 49, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

52. By 51, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 47, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

53. By 52, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 42, the attacker may know increment_nonce(increment_nonce(minnonce)) in phase 1.
By 39, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) in phase 1.
By 13, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).

54. By 53, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_c(alice,bob) in phase 1.
attacker_p1(msg_c(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_c(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {54}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

6. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 5 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

7. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 4 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 6 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

8. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 7 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

9. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 3 may be read at get {75}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) that may be sent on channel pub by 8 may be received at input {57}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

10. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 9 may be read at get {101}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {98}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on channel pub at output {100}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)))).

11. By 1, the attacker may have the channel pub.
By 10, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)))).

12. By 11, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).

13. By 12, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).

14. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {229}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 15 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

17. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 14 may be read at get {265}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 16 may be received at input {230}.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {264}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

18. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 17 may be read at get {283}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {280}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on channel pub at output {282}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

19. By 1, the attacker may have the channel pub.
By 18, the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) may be sent on this channel.
So the attacker may obtain the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) by listening on this channel.
attacker(concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

20. By 19, the attacker may know concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).

21. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

22. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 21 may be read at get {56}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {53}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {55}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

23. By 1, the attacker may have the channel pub.
By 22, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

24. By 23, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

25. By 23, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

26. The message dhexp(key_s(bob),g) may be sent on channel pub at output {214}.
mess(pub,dhexp(key_s(bob),g)).

27. By 1, the attacker may have the channel pub.
By 26, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

28. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

29. By 1, the attacker may have the channel pub.
By 28, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

30. Using the function empty the attacker may obtain empty.
attacker(empty).

31. Using the function somename the attacker may obtain somename.
attacker(somename).

32. By 31, the attacker may know somename.
By 30, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

33. By 32, the attacker may know hash(somename,empty).
By 30, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

34. By 33, the attacker may know hash(hash(somename,empty),empty).
By 29, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

35. By 34, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 27, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

36. By 35, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 25, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

37. By 36, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 24, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

38. By 37, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
By 20, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
attacker(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

39. By 38, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))).
So the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice)))).

40. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

41. By 40, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

42. By 41, the attacker may know increment_nonce(minnonce) in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(increment_nonce(minnonce)) in phase 1.
attacker_p1(increment_nonce(increment_nonce(minnonce))).

43. By 29, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

44. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

45. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

46. By 44, the attacker may have the channel pub in phase 1.
By 45, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

47. By 46, the attacker may know key_s(bob) in phase 1.
By 43, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

48. By 25, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

49. By 46, the attacker may know key_s(bob) in phase 1.
By 48, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

50. By 32, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

51. By 50, the attacker may know hash(somename,empty) in phase 1.
By 49, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

52. By 51, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 47, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

53. By 52, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 42, the attacker may know increment_nonce(increment_nonce(minnonce)) in phase 1.
By 39, the attacker may know hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))) in phase 1.
By 13, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob))).

54. By 53, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),msg_b(bob,alice))),msg_c(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_c(alice,bob) in phase 1.
attacker_p1(msg_c(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
