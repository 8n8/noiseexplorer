File "X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 292, character 6:
Warning: identifier e rebound.
File "X.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "X.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 297, character 6:
Warning: identifier s rebound.
File "X.noise.passive.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 298, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "X.noise.passive.pv", line 310, characters 6-7:
Warning: identifier re rebound.
File "X.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 314, characters 48-53:
Warning: identifier valid1 rebound.
File "X.noise.passive.pv", line 315, characters 6-7:
Warning: identifier rs rebound.
File "X.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 319, characters 7-8:
Warning: identifier hs rebound.
File "X.noise.passive.pv", line 386, characters 8-9:
Warning: identifier hs rebound.
File "X.noise.passive.pv", line 292, character 6:
Warning: identifier e rebound.
File "X.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "X.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 297, character 6:
Warning: identifier s rebound.
File "X.noise.passive.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 298, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 414, characters 8-9:
Warning: identifier hs rebound.
File "X.noise.passive.pv", line 310, characters 6-7:
Warning: identifier re rebound.
File "X.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 314, characters 48-53:
Warning: identifier valid1 rebound.
File "X.noise.passive.pv", line 315, characters 6-7:
Warning: identifier rs rebound.
File "X.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 319, characters 7-8:
Warning: identifier hs rebound.
File "X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let s_352: keypair = keypairpack(empty,empty) in
    {6}out(pub, getpublickey(s_352));
    (
        {7}let e_353: keypair = keypairpack(empty,empty) in
        {8}let v_354: key = catch-fail(dhexp(key_s(them),g)) in
        {9}let rs_355: key = getpublickey((if not-caught-fail(v_354) then keypairpack(v_354,key_s(them)) else fail-any)) in
        {10}let re_356: key = empty in
        {11}let v_357: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_358: key = catch-fail(v_357) in
        {13}let v_359: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_360: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_357) then (if not-caught-fail(v_358) then (if not-caught-fail(v_359) then symmetricstatepack(v_359,v_358,v_357) else fail-any) else fail-any) else fail-any))) in
        {15}let v_361: symmetricstate = catch-fail((if success?((if not-caught-fail(v_357) then (if not-caught-fail(v_358) then (if not-caught-fail(v_359) then symmetricstatepack(v_359,v_358,v_357) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-3-tuple(v_360))))) then symmetricstatepack(1-proj-3-tuple(v_360),2-proj-3-tuple(v_360),hash(3-proj-3-tuple(v_360),empty)) else fail-any) else fail-any)) in
        {16}let v_362: bitstring = catch-fail(symmetricstateunpack(v_361)) in
        {17}let v_363: symmetricstate = catch-fail((if (not-caught-fail(v_362) && success?(is-true(success?(1-proj-3-tuple(v_362))))) then symmetricstatepack(1-proj-3-tuple(v_362),2-proj-3-tuple(v_362),hash(3-proj-3-tuple(v_362),rs_355)) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_361) then (if not-caught-fail(v_363) then handshakestatepack(v_363,s_352,e_353,rs_355,re_356,empty,true) else fail-any) else fail-any) in
        {19}insert statestore(me,them,statepack_a(hs))
    ) | (
        {76}get statestore(=me,=them,statepack_a(hs_364: handshakestate)) in
        {20}let v_365: bitstring = catch-fail(handshakestateunpack(hs_364)) in
        {21}let v_366: bitstring = catch-fail((empty,empty,empty)) in
        {22}new key_e[me,them]: key;
        {23}let v_367: key = catch-fail(dhexp(key_e,g)) in
        {24}let v_368: keypair = catch-fail((if not-caught-fail(v_367) then keypairpack(v_367,key_e) else fail-any)) in
        {25}let v_369: bitstring = catch-fail(getpublickey(v_368)) in
        {26}let v_370: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_365))) in
        {27}let v_371: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_365)) then (if (not-caught-fail(v_370) && success?(is-true(success?(1-proj-3-tuple(v_370))))) then symmetricstatepack(1-proj-3-tuple(v_370),2-proj-3-tuple(v_370),hash(3-proj-3-tuple(v_370),v_369)) else fail-any) else fail-any)) in
        {28}let v_372: bitstring = catch-fail(keypairunpack(v_368)) in
        {29}let v_373: bitstring = catch-fail(symmetricstateunpack(v_371)) in
        {30}let v_374: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_373),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {31}let v_375: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_373),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {32}let v_376: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_373),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {33}let v_377: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_373))) then (if not-caught-fail(v_374) then (if not-caught-fail(v_375) then (if not-caught-fail(v_376) then (v_374,v_375,v_376) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_378: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then dhexp(2-proj-2-tuple(v_372),4-proj-7-tuple(v_365)) else fail-any) else fail-any)) then (if (not-caught-fail(v_373) && success?(is-true(success?(1-proj-3-tuple(v_373))))) then (if (not-caught-fail(v_377) && success?(is-true(success?(1-proj-3-tuple(v_377))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_377)) then cipherstatepack(2-proj-3-tuple(v_377),minnonce) else fail-any),1-proj-3-tuple(v_377),3-proj-3-tuple(v_373)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_379: key = catch-fail(dhexp(key_s(me),g)) in
        {36}let v_380: keypair = catch-fail((if not-caught-fail(v_379) then keypairpack(v_379,key_s(me)) else fail-any)) in
        {37}let v_381: bitstring = catch-fail(symmetricstateunpack(v_378)) in
        {38}let v_382: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_381))) in
        {39}let v_383: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_382),2-proj-2-tuple(v_382),3-proj-3-tuple(v_381),getpublickey(v_380))) in
        {40}let v_384: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_381))) in
        {41}let v_385: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_382))) && success?(1-proj-3-tuple(v_381))) then (if (not-caught-fail(v_384) && success?(is-true(success?(1-proj-2-tuple(v_384))))) then cipherstatepack(1-proj-2-tuple(v_384),increment_nonce(2-proj-2-tuple(v_382))) else fail-any) else fail-any)) in
        {42}let v_386: bitstring = catch-fail((if (success?(getpublickey(v_380)) && (success?(3-proj-3-tuple(v_381)) && success?(1-proj-3-tuple(v_381)))) then (if (not-caught-fail(v_382) && success?(is-true(success?(1-proj-2-tuple(v_382))))) then (if not-caught-fail(v_383) then (if not-caught-fail(v_385) then (v_385,v_383) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {43}let v_387: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_386),2-proj-3-tuple(v_381),3-proj-3-tuple(v_381)))) in
        {44}let v_388: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_386)) && success?(symmetricstatepack(1-proj-2-tuple(v_386),2-proj-3-tuple(v_381),3-proj-3-tuple(v_381)))) then (if (not-caught-fail(v_387) && success?(is-true(success?(1-proj-3-tuple(v_387))))) then symmetricstatepack(1-proj-3-tuple(v_387),2-proj-3-tuple(v_387),hash(3-proj-3-tuple(v_387),2-proj-2-tuple(v_386))) else fail-any) else fail-any)) in
        {45}let v_389: bitstring = catch-fail((if success?(getpublickey(v_380)) then (if (not-caught-fail(v_381) && success?(is-true(success?(1-proj-3-tuple(v_381))))) then (if (not-caught-fail(v_386) && success?(is-true(success?(1-proj-2-tuple(v_386))))) then (if not-caught-fail(v_388) then (v_388,2-proj-2-tuple(v_386)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {46}let v_390: bitstring = catch-fail(keypairunpack(v_380)) in
        {47}let v_391: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_389))) in
        {48}let v_392: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_391),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {49}let v_393: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_391),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {50}let v_394: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_391),(if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any))) in
        {51}let v_395: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_391))) then (if not-caught-fail(v_392) then (if not-caught-fail(v_393) then (if not-caught-fail(v_394) then (v_392,v_393,v_394) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {52}let v_396: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_365)) then (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-2-tuple(v_390))))) then dhexp(2-proj-2-tuple(v_390),4-proj-7-tuple(v_365)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_389))) then (if (not-caught-fail(v_391) && success?(is-true(success?(1-proj-3-tuple(v_391))))) then (if (not-caught-fail(v_395) && success?(is-true(success?(1-proj-3-tuple(v_395))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_395)) then cipherstatepack(2-proj-3-tuple(v_395),minnonce) else fail-any),1-proj-3-tuple(v_395),3-proj-3-tuple(v_391)) else fail-any) else fail-any) else fail-any)) in
        {53}let v_397: bitstring = catch-fail(symmetricstateunpack(v_396)) in
        {54}let v_398: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_397))) in
        {55}let v_399: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_398),2-proj-2-tuple(v_398),3-proj-3-tuple(v_397),msg_a(me,them))) in
        {56}let v_400: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_397))) in
        {57}let v_401: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_398))) && success?(1-proj-3-tuple(v_397))) then (if (not-caught-fail(v_400) && success?(is-true(success?(1-proj-2-tuple(v_400))))) then cipherstatepack(1-proj-2-tuple(v_400),increment_nonce(2-proj-2-tuple(v_398))) else fail-any) else fail-any)) in
        {58}let v_402: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_397)) && success?(1-proj-3-tuple(v_397))) then (if (not-caught-fail(v_398) && success?(is-true(success?(1-proj-2-tuple(v_398))))) then (if not-caught-fail(v_399) then (if not-caught-fail(v_401) then (v_401,v_399) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {59}let v_403: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_402),2-proj-3-tuple(v_397),3-proj-3-tuple(v_397)))) in
        {60}let v_404: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_402)) && success?(symmetricstatepack(1-proj-2-tuple(v_402),2-proj-3-tuple(v_397),3-proj-3-tuple(v_397)))) then (if (not-caught-fail(v_403) && success?(is-true(success?(1-proj-3-tuple(v_403))))) then symmetricstatepack(1-proj-3-tuple(v_403),2-proj-3-tuple(v_403),hash(3-proj-3-tuple(v_403),2-proj-2-tuple(v_402))) else fail-any) else fail-any)) in
        {61}let v_405: bitstring = catch-fail((if (not-caught-fail(v_397) && success?(is-true(success?(1-proj-3-tuple(v_397))))) then (if (not-caught-fail(v_402) && success?(is-true(success?(1-proj-2-tuple(v_402))))) then (if not-caught-fail(v_404) then (v_404,2-proj-2-tuple(v_402)) else fail-any) else fail-any) else fail-any)) in
        {62}let v_406: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_405),v_380,v_368,4-proj-7-tuple(v_365),5-proj-7-tuple(v_365),6-proj-7-tuple(v_365),7-proj-7-tuple(v_365))) in
        {63}let v_407: bitstring = catch-fail(concat3(v_369,2-proj-2-tuple(v_389),2-proj-2-tuple(v_405))) in
        {64}let v_408: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_405))) in
        {65}let v_409: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_408),zero)) in
        {66}let v_410: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_408),zero)) in
        {67}let v_411: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_408),zero)) in
        {68}let v_412: bitstring = catch-fail((if success?(2-proj-3-tuple(v_408)) then (if not-caught-fail(v_409) then (if not-caught-fail(v_410) then (if not-caught-fail(v_411) then (v_409,v_410,v_411) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {69}let v_413: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_412)) then cipherstatepack(1-proj-3-tuple(v_412),minnonce) else fail-any)) in
        {70}let v_414: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_412)) then cipherstatepack(2-proj-3-tuple(v_412),minnonce) else fail-any)) in
        {71}let v_415: bitstring = catch-fail((if success?(1-proj-2-tuple(v_405)) then (if (not-caught-fail(v_408) && success?(is-true(success?(1-proj-3-tuple(v_408))))) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-3-tuple(v_412))))) then (if not-caught-fail(v_413) then (if not-caught-fail(v_414) then (1-proj-2-tuple(v_405),v_413,v_414) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let (hs_416: handshakestate,re_417: key,message_a: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_365) && success?(is-true(success?(1-proj-7-tuple(v_365))))) then (if (not-caught-fail(v_366) && success?(is-true(success?(1-proj-3-tuple(v_366))))) then (if not-caught-fail(v_368) then (if not-caught-fail(v_369) then (if not-caught-fail(v_371) then (if not-caught-fail(v_378) then (if not-caught-fail(v_380) then (if (not-caught-fail(v_389) && success?(is-true(success?(1-proj-2-tuple(v_389))))) then (if not-caught-fail(v_396) then (if (not-caught-fail(v_405) && success?(is-true(success?(1-proj-2-tuple(v_405))))) then (if not-caught-fail(v_406) then (if not-caught-fail(v_407) then (if (not-caught-fail(v_415) && success?(is-true(success?(1-proj-3-tuple(v_415))))) then (v_406,5-proj-7-tuple(v_365),v_407,2-proj-3-tuple(v_415),3-proj-3-tuple(v_415)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {73}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {74}insert statestore(me,them,statepack_b(hs_416));
        {75}out(pub, message_a)
    ) | (
        {77}event LeakS(phase0,me);
        {78}out(pub, key_s(me))
    ) | (
        {79}phase 1;
        {80}event LeakS(phase1,me);
        {81}out(pub, key_s(me))
    )
) | (
    {82}let them_418: principal = charlie in
    {83}let me_419: principal = alice in
    {84}let s_420: keypair = keypairpack(empty,empty) in
    {85}out(pub, getpublickey(s_420));
    (
        {86}let e_421: keypair = keypairpack(empty,empty) in
        {87}let v_422: key = catch-fail(dhexp(key_s(them_418),g)) in
        {88}let rs_423: key = getpublickey((if not-caught-fail(v_422) then keypairpack(v_422,key_s(them_418)) else fail-any)) in
        {89}let re_424: key = empty in
        {90}let v_425: bitstring = catch-fail(hash(somename,empty)) in
        {91}let v_426: key = catch-fail(v_425) in
        {92}let v_427: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {93}let v_428: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_425) then (if not-caught-fail(v_426) then (if not-caught-fail(v_427) then symmetricstatepack(v_427,v_426,v_425) else fail-any) else fail-any) else fail-any))) in
        {94}let v_429: symmetricstate = catch-fail((if success?((if not-caught-fail(v_425) then (if not-caught-fail(v_426) then (if not-caught-fail(v_427) then symmetricstatepack(v_427,v_426,v_425) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_428) && success?(is-true(success?(1-proj-3-tuple(v_428))))) then symmetricstatepack(1-proj-3-tuple(v_428),2-proj-3-tuple(v_428),hash(3-proj-3-tuple(v_428),empty)) else fail-any) else fail-any)) in
        {95}let v_430: bitstring = catch-fail(symmetricstateunpack(v_429)) in
        {96}let v_431: symmetricstate = catch-fail((if (not-caught-fail(v_430) && success?(is-true(success?(1-proj-3-tuple(v_430))))) then symmetricstatepack(1-proj-3-tuple(v_430),2-proj-3-tuple(v_430),hash(3-proj-3-tuple(v_430),rs_423)) else fail-any)) in
        {97}let hs_432: handshakestate = (if not-caught-fail(v_429) then (if not-caught-fail(v_431) then handshakestatepack(v_431,s_420,e_421,rs_423,re_424,empty,true) else fail-any) else fail-any) in
        {98}insert statestore(me_419,them_418,statepack_a(hs_432))
    ) | (
        {155}get statestore(=me_419,=them_418,statepack_a(hs_433: handshakestate)) in
        {99}let v_434: bitstring = catch-fail(handshakestateunpack(hs_433)) in
        {100}let v_435: bitstring = catch-fail((empty,empty,empty)) in
        {101}new key_e_436[me_419,them_418]: key;
        {102}let v_437: key = catch-fail(dhexp(key_e_436,g)) in
        {103}let v_438: keypair = catch-fail((if not-caught-fail(v_437) then keypairpack(v_437,key_e_436) else fail-any)) in
        {104}let v_439: bitstring = catch-fail(getpublickey(v_438)) in
        {105}let v_440: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_434))) in
        {106}let v_441: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_434)) then (if (not-caught-fail(v_440) && success?(is-true(success?(1-proj-3-tuple(v_440))))) then symmetricstatepack(1-proj-3-tuple(v_440),2-proj-3-tuple(v_440),hash(3-proj-3-tuple(v_440),v_439)) else fail-any) else fail-any)) in
        {107}let v_442: bitstring = catch-fail(keypairunpack(v_438)) in
        {108}let v_443: bitstring = catch-fail(symmetricstateunpack(v_441)) in
        {109}let v_444: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_443),(if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-2-tuple(v_442))))) then dhexp(2-proj-2-tuple(v_442),4-proj-7-tuple(v_434)) else fail-any) else fail-any))) in
        {110}let v_445: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_443),(if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-2-tuple(v_442))))) then dhexp(2-proj-2-tuple(v_442),4-proj-7-tuple(v_434)) else fail-any) else fail-any))) in
        {111}let v_446: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_443),(if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-2-tuple(v_442))))) then dhexp(2-proj-2-tuple(v_442),4-proj-7-tuple(v_434)) else fail-any) else fail-any))) in
        {112}let v_447: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-2-tuple(v_442))))) then dhexp(2-proj-2-tuple(v_442),4-proj-7-tuple(v_434)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_443))) then (if not-caught-fail(v_444) then (if not-caught-fail(v_445) then (if not-caught-fail(v_446) then (v_444,v_445,v_446) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {113}let v_448: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-2-tuple(v_442))))) then dhexp(2-proj-2-tuple(v_442),4-proj-7-tuple(v_434)) else fail-any) else fail-any)) then (if (not-caught-fail(v_443) && success?(is-true(success?(1-proj-3-tuple(v_443))))) then (if (not-caught-fail(v_447) && success?(is-true(success?(1-proj-3-tuple(v_447))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_447)) then cipherstatepack(2-proj-3-tuple(v_447),minnonce) else fail-any),1-proj-3-tuple(v_447),3-proj-3-tuple(v_443)) else fail-any) else fail-any) else fail-any)) in
        {114}let v_449: key = catch-fail(dhexp(key_s(me_419),g)) in
        {115}let v_450: keypair = catch-fail((if not-caught-fail(v_449) then keypairpack(v_449,key_s(me_419)) else fail-any)) in
        {116}let v_451: bitstring = catch-fail(symmetricstateunpack(v_448)) in
        {117}let v_452: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_451))) in
        {118}let v_453: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_452),2-proj-2-tuple(v_452),3-proj-3-tuple(v_451),getpublickey(v_450))) in
        {119}let v_454: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_451))) in
        {120}let v_455: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_452))) && success?(1-proj-3-tuple(v_451))) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-2-tuple(v_454))))) then cipherstatepack(1-proj-2-tuple(v_454),increment_nonce(2-proj-2-tuple(v_452))) else fail-any) else fail-any)) in
        {121}let v_456: bitstring = catch-fail((if (success?(getpublickey(v_450)) && (success?(3-proj-3-tuple(v_451)) && success?(1-proj-3-tuple(v_451)))) then (if (not-caught-fail(v_452) && success?(is-true(success?(1-proj-2-tuple(v_452))))) then (if not-caught-fail(v_453) then (if not-caught-fail(v_455) then (v_455,v_453) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_457: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_456),2-proj-3-tuple(v_451),3-proj-3-tuple(v_451)))) in
        {123}let v_458: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_456)) && success?(symmetricstatepack(1-proj-2-tuple(v_456),2-proj-3-tuple(v_451),3-proj-3-tuple(v_451)))) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-3-tuple(v_457))))) then symmetricstatepack(1-proj-3-tuple(v_457),2-proj-3-tuple(v_457),hash(3-proj-3-tuple(v_457),2-proj-2-tuple(v_456))) else fail-any) else fail-any)) in
        {124}let v_459: bitstring = catch-fail((if success?(getpublickey(v_450)) then (if (not-caught-fail(v_451) && success?(is-true(success?(1-proj-3-tuple(v_451))))) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then (if not-caught-fail(v_458) then (v_458,2-proj-2-tuple(v_456)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {125}let v_460: bitstring = catch-fail(keypairunpack(v_450)) in
        {126}let v_461: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_459))) in
        {127}let v_462: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_461),(if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-2-tuple(v_460))))) then dhexp(2-proj-2-tuple(v_460),4-proj-7-tuple(v_434)) else fail-any) else fail-any))) in
        {128}let v_463: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_461),(if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-2-tuple(v_460))))) then dhexp(2-proj-2-tuple(v_460),4-proj-7-tuple(v_434)) else fail-any) else fail-any))) in
        {129}let v_464: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_461),(if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-2-tuple(v_460))))) then dhexp(2-proj-2-tuple(v_460),4-proj-7-tuple(v_434)) else fail-any) else fail-any))) in
        {130}let v_465: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-2-tuple(v_460))))) then dhexp(2-proj-2-tuple(v_460),4-proj-7-tuple(v_434)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_461))) then (if not-caught-fail(v_462) then (if not-caught-fail(v_463) then (if not-caught-fail(v_464) then (v_462,v_463,v_464) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {131}let v_466: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_434)) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-2-tuple(v_460))))) then dhexp(2-proj-2-tuple(v_460),4-proj-7-tuple(v_434)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_459))) then (if (not-caught-fail(v_461) && success?(is-true(success?(1-proj-3-tuple(v_461))))) then (if (not-caught-fail(v_465) && success?(is-true(success?(1-proj-3-tuple(v_465))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_465)) then cipherstatepack(2-proj-3-tuple(v_465),minnonce) else fail-any),1-proj-3-tuple(v_465),3-proj-3-tuple(v_461)) else fail-any) else fail-any) else fail-any)) in
        {132}let v_467: bitstring = catch-fail(symmetricstateunpack(v_466)) in
        {133}let v_468: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_467))) in
        {134}let v_469: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_468),2-proj-2-tuple(v_468),3-proj-3-tuple(v_467),msg_a(me_419,them_418))) in
        {135}let v_470: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_467))) in
        {136}let v_471: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_468))) && success?(1-proj-3-tuple(v_467))) then (if (not-caught-fail(v_470) && success?(is-true(success?(1-proj-2-tuple(v_470))))) then cipherstatepack(1-proj-2-tuple(v_470),increment_nonce(2-proj-2-tuple(v_468))) else fail-any) else fail-any)) in
        {137}let v_472: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_467)) && success?(1-proj-3-tuple(v_467))) then (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-2-tuple(v_468))))) then (if not-caught-fail(v_469) then (if not-caught-fail(v_471) then (v_471,v_469) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {138}let v_473: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_472),2-proj-3-tuple(v_467),3-proj-3-tuple(v_467)))) in
        {139}let v_474: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_472)) && success?(symmetricstatepack(1-proj-2-tuple(v_472),2-proj-3-tuple(v_467),3-proj-3-tuple(v_467)))) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-3-tuple(v_473))))) then symmetricstatepack(1-proj-3-tuple(v_473),2-proj-3-tuple(v_473),hash(3-proj-3-tuple(v_473),2-proj-2-tuple(v_472))) else fail-any) else fail-any)) in
        {140}let v_475: bitstring = catch-fail((if (not-caught-fail(v_467) && success?(is-true(success?(1-proj-3-tuple(v_467))))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-2-tuple(v_472))))) then (if not-caught-fail(v_474) then (v_474,2-proj-2-tuple(v_472)) else fail-any) else fail-any) else fail-any)) in
        {141}let v_476: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_475),v_450,v_438,4-proj-7-tuple(v_434),5-proj-7-tuple(v_434),6-proj-7-tuple(v_434),7-proj-7-tuple(v_434))) in
        {142}let v_477: bitstring = catch-fail(concat3(v_439,2-proj-2-tuple(v_459),2-proj-2-tuple(v_475))) in
        {143}let v_478: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_475))) in
        {144}let v_479: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_478),zero)) in
        {145}let v_480: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_478),zero)) in
        {146}let v_481: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_478),zero)) in
        {147}let v_482: bitstring = catch-fail((if success?(2-proj-3-tuple(v_478)) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then (if not-caught-fail(v_481) then (v_479,v_480,v_481) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {148}let v_483: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_482)) then cipherstatepack(1-proj-3-tuple(v_482),minnonce) else fail-any)) in
        {149}let v_484: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_482)) then cipherstatepack(2-proj-3-tuple(v_482),minnonce) else fail-any)) in
        {150}let v_485: bitstring = catch-fail((if success?(1-proj-2-tuple(v_475)) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-3-tuple(v_478))))) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-3-tuple(v_482))))) then (if not-caught-fail(v_483) then (if not-caught-fail(v_484) then (1-proj-2-tuple(v_475),v_483,v_484) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {151}let (hs_486: handshakestate,re_487: key,message_a_488: bitstring,cs1_489: cipherstate,cs2_490: cipherstate) = (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-7-tuple(v_434))))) then (if (not-caught-fail(v_435) && success?(is-true(success?(1-proj-3-tuple(v_435))))) then (if not-caught-fail(v_438) then (if not-caught-fail(v_439) then (if not-caught-fail(v_441) then (if not-caught-fail(v_448) then (if not-caught-fail(v_450) then (if (not-caught-fail(v_459) && success?(is-true(success?(1-proj-2-tuple(v_459))))) then (if not-caught-fail(v_466) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-2-tuple(v_475))))) then (if not-caught-fail(v_476) then (if not-caught-fail(v_477) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then (v_476,5-proj-7-tuple(v_434),v_477,2-proj-3-tuple(v_485),3-proj-3-tuple(v_485)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {152}event SendMsg(me_419,them_418,stage_a,msg_a(me_419,them_418),true);
        {153}insert statestore(me_419,them_418,statepack_b(hs_486));
        {154}out(pub, message_a_488)
    ) | (
        {156}event LeakS(phase0,me_419);
        {157}out(pub, key_s(me_419))
    ) | (
        {158}phase 1;
        {159}event LeakS(phase1,me_419);
        {160}out(pub, key_s(me_419))
    )
) | (
    {161}let v_491: key = catch-fail(dhexp(key_s(bob),g)) in
    {162}let s_492: keypair = (if not-caught-fail(v_491) then keypairpack(v_491,key_s(bob)) else fail-any) in
    {163}out(pub, getpublickey(s_492));
    (
        {164}let e_493: keypair = keypairpack(empty,empty) in
        {165}let rs_494: key = empty in
        {166}let re_495: key = empty in
        {167}let v_496: bitstring = catch-fail(hash(somename,empty)) in
        {168}let v_497: key = catch-fail(v_496) in
        {169}let v_498: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {170}let v_499: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_496) then (if not-caught-fail(v_497) then (if not-caught-fail(v_498) then symmetricstatepack(v_498,v_497,v_496) else fail-any) else fail-any) else fail-any))) in
        {171}let v_500: symmetricstate = catch-fail((if success?((if not-caught-fail(v_496) then (if not-caught-fail(v_497) then (if not-caught-fail(v_498) then symmetricstatepack(v_498,v_497,v_496) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-3-tuple(v_499))))) then symmetricstatepack(1-proj-3-tuple(v_499),2-proj-3-tuple(v_499),hash(3-proj-3-tuple(v_499),empty)) else fail-any) else fail-any)) in
        {172}let v_501: bitstring = catch-fail(symmetricstateunpack(v_500)) in
        {173}let v_502: symmetricstate = catch-fail((if success?(getpublickey(s_492)) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-3-tuple(v_501))))) then symmetricstatepack(1-proj-3-tuple(v_501),2-proj-3-tuple(v_501),hash(3-proj-3-tuple(v_501),getpublickey(s_492))) else fail-any) else fail-any)) in
        {174}let hs_503: handshakestate = (if not-caught-fail(v_500) then (if not-caught-fail(v_502) then handshakestatepack(v_502,s_492,e_493,rs_494,re_495,empty,false) else fail-any) else fail-any) in
        {175}insert statestore(bob,alice,statepack_a(hs_503))
    ) | (
        {232}get statestore(=bob,=alice,statepack_a(hs_504: handshakestate)) in
        {176}in(pub, message_a_505: bitstring);
        {177}let v_506: bitstring = catch-fail(handshakestateunpack(hs_504)) in
        {178}let v_507: bitstring = catch-fail(deconcat3(message_a_505)) in
        {179}let v_508: bool = catch-fail(true) in
        {180}let v_509: key = catch-fail(1-proj-3-tuple(v_507)) in
        {181}let v_510: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_506))) in
        {182}let v_511: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_506)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then symmetricstatepack(1-proj-3-tuple(v_510),2-proj-3-tuple(v_510),hash(3-proj-3-tuple(v_510),v_509)) else fail-any) else fail-any)) in
        {183}let v_512: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_506))) in
        {184}let v_513: bitstring = catch-fail(symmetricstateunpack(v_511)) in
        {185}let v_514: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_513),(if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any))) in
        {186}let v_515: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_513),(if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any))) in
        {187}let v_516: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_513),(if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any))) in
        {188}let v_517: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_513))) then (if not-caught-fail(v_514) then (if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (v_514,v_515,v_516) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_518: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-2-tuple(v_512))))) then dhexp(2-proj-2-tuple(v_512),v_509) else fail-any) else fail-any)) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-3-tuple(v_513))))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-3-tuple(v_517))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_517)) then cipherstatepack(2-proj-3-tuple(v_517),minnonce) else fail-any),1-proj-3-tuple(v_517),3-proj-3-tuple(v_513)) else fail-any) else fail-any) else fail-any)) in
        {190}let v_519: bitstring = catch-fail(symmetricstateunpack(v_518)) in
        {191}let v_520: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_519))) in
        {192}let v_521: aead = catch-fail(decrypt(1-proj-2-tuple(v_520),2-proj-2-tuple(v_520),3-proj-3-tuple(v_519),2-proj-3-tuple(v_507))) in
        {193}let v_522: bitstring = catch-fail(aeadunpack(v_521)) in
        {194}let v_523: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_519))) in
        {195}let v_524: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_520))) && success?(1-proj-3-tuple(v_519))) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-2-tuple(v_523))))) then cipherstatepack(1-proj-2-tuple(v_523),increment_nonce(2-proj-2-tuple(v_520))) else fail-any) else fail-any)) in
        {196}let v_525: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_507)) && (success?(3-proj-3-tuple(v_519)) && success?(1-proj-3-tuple(v_519)))) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-2-tuple(v_520))))) then (if not-caught-fail(v_521) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then (if not-caught-fail(v_524) then (v_524,3-proj-3-tuple(v_522),1-proj-3-tuple(v_522)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_526: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_525),2-proj-3-tuple(v_519),3-proj-3-tuple(v_519)))) in
        {198}let v_527: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_507)) && success?(symmetricstatepack(1-proj-3-tuple(v_525),2-proj-3-tuple(v_519),3-proj-3-tuple(v_519)))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then symmetricstatepack(1-proj-3-tuple(v_526),2-proj-3-tuple(v_526),hash(3-proj-3-tuple(v_526),2-proj-3-tuple(v_507))) else fail-any) else fail-any)) in
        {199}let v_528: bitstring = catch-fail((if success?(2-proj-3-tuple(v_507)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then (if not-caught-fail(v_527) then (v_527,2-proj-3-tuple(v_525),3-proj-3-tuple(v_525)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {200}let v_529: key = catch-fail(2-proj-3-tuple(v_528)) in
        {201}let v_530: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_506))) in
        {202}let v_531: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_528))) in
        {203}let v_532: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_531),(if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),v_529) else fail-any) else fail-any))) in
        {204}let v_533: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_531),(if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),v_529) else fail-any) else fail-any))) in
        {205}let v_534: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_531),(if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),v_529) else fail-any) else fail-any))) in
        {206}let v_535: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),v_529) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_531))) then (if not-caught-fail(v_532) then (if not-caught-fail(v_533) then (if not-caught-fail(v_534) then (v_532,v_533,v_534) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {207}let v_536: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_506)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then dhexp(2-proj-2-tuple(v_530),v_529) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_528))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_535)) then cipherstatepack(2-proj-3-tuple(v_535),minnonce) else fail-any),1-proj-3-tuple(v_535),3-proj-3-tuple(v_531)) else fail-any) else fail-any) else fail-any)) in
        {208}let v_537: bitstring = catch-fail(symmetricstateunpack(v_536)) in
        {209}let v_538: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_537))) in
        {210}let v_539: aead = catch-fail(decrypt(1-proj-2-tuple(v_538),2-proj-2-tuple(v_538),3-proj-3-tuple(v_537),3-proj-3-tuple(v_507))) in
        {211}let v_540: bitstring = catch-fail(aeadunpack(v_539)) in
        {212}let v_541: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_537))) in
        {213}let v_542: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_538))) && success?(1-proj-3-tuple(v_537))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-2-tuple(v_541))))) then cipherstatepack(1-proj-2-tuple(v_541),increment_nonce(2-proj-2-tuple(v_538))) else fail-any) else fail-any)) in
        {214}let v_543: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_507)) && (success?(3-proj-3-tuple(v_537)) && success?(1-proj-3-tuple(v_537)))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then (if not-caught-fail(v_539) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then (if not-caught-fail(v_542) then (v_542,3-proj-3-tuple(v_540),1-proj-3-tuple(v_540)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {215}let v_544: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_543),2-proj-3-tuple(v_537),3-proj-3-tuple(v_537)))) in
        {216}let v_545: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_507)) && success?(symmetricstatepack(1-proj-3-tuple(v_543),2-proj-3-tuple(v_537),3-proj-3-tuple(v_537)))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then symmetricstatepack(1-proj-3-tuple(v_544),2-proj-3-tuple(v_544),hash(3-proj-3-tuple(v_544),3-proj-3-tuple(v_507))) else fail-any) else fail-any)) in
        {217}let v_546: bitstring = catch-fail((if success?(3-proj-3-tuple(v_507)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_545) then (v_545,2-proj-3-tuple(v_543),3-proj-3-tuple(v_543)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_547: key = catch-fail(dhexp(key_s(alice),g)) in
        {219}let v_548: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_546),2-proj-7-tuple(v_506),3-proj-7-tuple(v_506),v_529,v_509,6-proj-7-tuple(v_506),7-proj-7-tuple(v_506))) in
        {220}let v_549: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_546))) in
        {221}let v_550: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_549),zero)) in
        {222}let v_551: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_549),zero)) in
        {223}let v_552: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_549),zero)) in
        {224}let v_553: bitstring = catch-fail((if success?(2-proj-3-tuple(v_549)) then (if not-caught-fail(v_550) then (if not-caught-fail(v_551) then (if not-caught-fail(v_552) then (v_550,v_551,v_552) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_554: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_553)) then cipherstatepack(1-proj-3-tuple(v_553),minnonce) else fail-any)) in
        {226}let v_555: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_553)) then cipherstatepack(2-proj-3-tuple(v_553),minnonce) else fail-any)) in
        {227}let v_556: bitstring = catch-fail((if success?(1-proj-3-tuple(v_546)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-3-tuple(v_553))))) then (if not-caught-fail(v_554) then (if not-caught-fail(v_555) then (1-proj-3-tuple(v_546),v_554,v_555) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let (hs_557: handshakestate,re_558: key,plaintext_a: bitstring,valid: bool,cs1_559: cipherstate,cs2_560: cipherstate) = (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-7-tuple(v_506))))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then (if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (if not-caught-fail(v_511) then (if not-caught-fail(v_518) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then (if not-caught-fail(v_529) then (if not-caught-fail(v_536) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then (if ((3-proj-3-tuple(v_528) && 3-proj-3-tuple(v_546)) && (v_529 = getpublickey((if not-caught-fail(v_547) then keypairpack(v_547,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_548) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then (v_548,getpublickey(3-proj-7-tuple(v_506)),2-proj-3-tuple(v_546),true,2-proj-3-tuple(v_556),3-proj-3-tuple(v_556)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {229}event RecvMsg(bob,alice,stage_a,plaintext_a,valid);
        {230}insert statestore(bob,alice,statepack_b(hs_557));
        {231}event RecvEnd(valid)
    ) | (
        {233}event LeakS(phase0,bob);
        {234}out(pub, key_s(bob))
    ) | (
        {235}phase 1;
        {236}event LeakS(phase1,bob);
        {237}out(pub, key_s(bob))
    )
) | (
    {238}let v_561: key = catch-fail(dhexp(key_s(bob),g)) in
    {239}let s_562: keypair = (if not-caught-fail(v_561) then keypairpack(v_561,key_s(bob)) else fail-any) in
    {240}out(pub, getpublickey(s_562));
    (
        {241}let e_563: keypair = keypairpack(empty,empty) in
        {242}let rs_564: key = empty in
        {243}let re_565: key = empty in
        {244}let v_566: bitstring = catch-fail(hash(somename,empty)) in
        {245}let v_567: key = catch-fail(v_566) in
        {246}let v_568: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {247}let v_569: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then symmetricstatepack(v_568,v_567,v_566) else fail-any) else fail-any) else fail-any))) in
        {248}let v_570: symmetricstate = catch-fail((if success?((if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then symmetricstatepack(v_568,v_567,v_566) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_569),hash(3-proj-3-tuple(v_569),empty)) else fail-any) else fail-any)) in
        {249}let v_571: bitstring = catch-fail(symmetricstateunpack(v_570)) in
        {250}let v_572: symmetricstate = catch-fail((if success?(getpublickey(s_562)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack(1-proj-3-tuple(v_571),2-proj-3-tuple(v_571),hash(3-proj-3-tuple(v_571),getpublickey(s_562))) else fail-any) else fail-any)) in
        {251}let hs_573: handshakestate = (if not-caught-fail(v_570) then (if not-caught-fail(v_572) then handshakestatepack(v_572,s_562,e_563,rs_564,re_565,empty,false) else fail-any) else fail-any) in
        {252}insert statestore(bob,charlie,statepack_a(hs_573))
    ) | (
        {309}get statestore(=bob,=charlie,statepack_a(hs_574: handshakestate)) in
        {253}in(pub, message_a_575: bitstring);
        {254}let v_576: bitstring = catch-fail(handshakestateunpack(hs_574)) in
        {255}let v_577: bitstring = catch-fail(deconcat3(message_a_575)) in
        {256}let v_578: bool = catch-fail(true) in
        {257}let v_579: key = catch-fail(1-proj-3-tuple(v_577)) in
        {258}let v_580: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_576))) in
        {259}let v_581: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_576)) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then symmetricstatepack(1-proj-3-tuple(v_580),2-proj-3-tuple(v_580),hash(3-proj-3-tuple(v_580),v_579)) else fail-any) else fail-any)) in
        {260}let v_582: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_576))) in
        {261}let v_583: bitstring = catch-fail(symmetricstateunpack(v_581)) in
        {262}let v_584: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_583),(if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),v_579) else fail-any) else fail-any))) in
        {263}let v_585: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_583),(if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),v_579) else fail-any) else fail-any))) in
        {264}let v_586: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_583),(if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),v_579) else fail-any) else fail-any))) in
        {265}let v_587: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),v_579) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_583))) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (v_584,v_585,v_586) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_588: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),v_579) else fail-any) else fail-any)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_587)) then cipherstatepack(2-proj-3-tuple(v_587),minnonce) else fail-any),1-proj-3-tuple(v_587),3-proj-3-tuple(v_583)) else fail-any) else fail-any) else fail-any)) in
        {267}let v_589: bitstring = catch-fail(symmetricstateunpack(v_588)) in
        {268}let v_590: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_589))) in
        {269}let v_591: aead = catch-fail(decrypt(1-proj-2-tuple(v_590),2-proj-2-tuple(v_590),3-proj-3-tuple(v_589),2-proj-3-tuple(v_577))) in
        {270}let v_592: bitstring = catch-fail(aeadunpack(v_591)) in
        {271}let v_593: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_589))) in
        {272}let v_594: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_590))) && success?(1-proj-3-tuple(v_589))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then cipherstatepack(1-proj-2-tuple(v_593),increment_nonce(2-proj-2-tuple(v_590))) else fail-any) else fail-any)) in
        {273}let v_595: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_577)) && (success?(3-proj-3-tuple(v_589)) && success?(1-proj-3-tuple(v_589)))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then (if not-caught-fail(v_591) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if not-caught-fail(v_594) then (v_594,3-proj-3-tuple(v_592),1-proj-3-tuple(v_592)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {274}let v_596: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_595),2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)))) in
        {275}let v_597: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_577)) && success?(symmetricstatepack(1-proj-3-tuple(v_595),2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_596),hash(3-proj-3-tuple(v_596),2-proj-3-tuple(v_577))) else fail-any) else fail-any)) in
        {276}let v_598: bitstring = catch-fail((if success?(2-proj-3-tuple(v_577)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then (if not-caught-fail(v_597) then (v_597,2-proj-3-tuple(v_595),3-proj-3-tuple(v_595)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_599: key = catch-fail(2-proj-3-tuple(v_598)) in
        {278}let v_600: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_576))) in
        {279}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_598))) in
        {280}let v_602: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_601),(if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),v_599) else fail-any) else fail-any))) in
        {281}let v_603: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_601),(if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),v_599) else fail-any) else fail-any))) in
        {282}let v_604: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_601),(if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),v_599) else fail-any) else fail-any))) in
        {283}let v_605: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),v_599) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_601))) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (v_602,v_603,v_604) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {284}let v_606: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_576)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then dhexp(2-proj-2-tuple(v_600),v_599) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_598))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_605)) then cipherstatepack(2-proj-3-tuple(v_605),minnonce) else fail-any),1-proj-3-tuple(v_605),3-proj-3-tuple(v_601)) else fail-any) else fail-any) else fail-any)) in
        {285}let v_607: bitstring = catch-fail(symmetricstateunpack(v_606)) in
        {286}let v_608: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_607))) in
        {287}let v_609: aead = catch-fail(decrypt(1-proj-2-tuple(v_608),2-proj-2-tuple(v_608),3-proj-3-tuple(v_607),3-proj-3-tuple(v_577))) in
        {288}let v_610: bitstring = catch-fail(aeadunpack(v_609)) in
        {289}let v_611: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_607))) in
        {290}let v_612: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_608))) && success?(1-proj-3-tuple(v_607))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then cipherstatepack(1-proj-2-tuple(v_611),increment_nonce(2-proj-2-tuple(v_608))) else fail-any) else fail-any)) in
        {291}let v_613: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_577)) && (success?(3-proj-3-tuple(v_607)) && success?(1-proj-3-tuple(v_607)))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then (if not-caught-fail(v_609) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if not-caught-fail(v_612) then (v_612,3-proj-3-tuple(v_610),1-proj-3-tuple(v_610)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {292}let v_614: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_613),2-proj-3-tuple(v_607),3-proj-3-tuple(v_607)))) in
        {293}let v_615: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_577)) && success?(symmetricstatepack(1-proj-3-tuple(v_613),2-proj-3-tuple(v_607),3-proj-3-tuple(v_607)))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then symmetricstatepack(1-proj-3-tuple(v_614),2-proj-3-tuple(v_614),hash(3-proj-3-tuple(v_614),3-proj-3-tuple(v_577))) else fail-any) else fail-any)) in
        {294}let v_616: bitstring = catch-fail((if success?(3-proj-3-tuple(v_577)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if not-caught-fail(v_615) then (v_615,2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_617: key = catch-fail(dhexp(key_s(charlie),g)) in
        {296}let v_618: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_616),2-proj-7-tuple(v_576),3-proj-7-tuple(v_576),v_599,v_579,6-proj-7-tuple(v_576),7-proj-7-tuple(v_576))) in
        {297}let v_619: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_616))) in
        {298}let v_620: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_619),zero)) in
        {299}let v_621: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_619),zero)) in
        {300}let v_622: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_619),zero)) in
        {301}let v_623: bitstring = catch-fail((if success?(2-proj-3-tuple(v_619)) then (if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (v_620,v_621,v_622) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {302}let v_624: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_623)) then cipherstatepack(1-proj-3-tuple(v_623),minnonce) else fail-any)) in
        {303}let v_625: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_623)) then cipherstatepack(2-proj-3-tuple(v_623),minnonce) else fail-any)) in
        {304}let v_626: bitstring = catch-fail((if success?(1-proj-3-tuple(v_616)) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (1-proj-3-tuple(v_616),v_624,v_625) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {305}let (hs_627: handshakestate,re_628: key,plaintext_a_629: bitstring,valid_630: bool,cs1_631: cipherstate,cs2_632: cipherstate) = (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-7-tuple(v_576))))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then (if not-caught-fail(v_581) then (if not-caught-fail(v_588) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then (if not-caught-fail(v_599) then (if not-caught-fail(v_606) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if ((3-proj-3-tuple(v_598) && 3-proj-3-tuple(v_616)) && (v_599 = getpublickey((if not-caught-fail(v_617) then keypairpack(v_617,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_618) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (v_618,getpublickey(3-proj-7-tuple(v_576)),2-proj-3-tuple(v_616),true,2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {306}event RecvMsg(bob,charlie,stage_a,plaintext_a_629,valid_630);
        {307}insert statestore(bob,charlie,statepack_b(hs_627));
        {308}event RecvEnd(valid_630)
    ) | (
        {310}event LeakS(phase0,bob);
        {311}out(pub, key_s(bob))
    ) | (
        {312}phase 1;
        {313}event LeakS(phase1,bob);
        {314}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_713,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_713,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 171 rules in the queue.
400 rules inserted. The rule base contains 399 rules. 78 rules in the queue.
600 rules inserted. The rule base contains 571 rules. 52 rules in the queue.
800 rules inserted. The rule base contains 727 rules. 76 rules in the queue.
1000 rules inserted. The rule base contains 886 rules. 91 rules in the queue.
1200 rules inserted. The rule base contains 1030 rules. 132 rules in the queue.
1400 rules inserted. The rule base contains 1111 rules. 135 rules in the queue.
1600 rules inserted. The rule base contains 1162 rules. 69 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_713,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_713,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_713,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_713,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_531275856 = key_e[me = alice,them = bob,!1 = @sid_531275842]
key_531275857 = key_e[me = alice,them = bob,!1 = @sid_531275752]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {76}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {73}.
So the message concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {75}.
mess(pub,concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

8. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 7 may be read at get {76}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {73}.
So the message concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {75}.
mess(pub,concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

9. By 1, the attacker may have the channel pub.
By 8, the message concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

10. By 9, the attacker may know concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))).

11. By 9, the attacker may know concat3(dhexp(key_531275856,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_531275856,g).
attacker(dhexp(key_531275856,g)).

12. The message dhexp(key_s(bob),g) may be sent on channel pub at output {163}.
mess(pub,dhexp(key_s(bob),g)).

13. By 1, the attacker may have the channel pub.
By 12, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 11, the attacker may know dhexp(key_531275856,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)).
By 10, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g)))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

24. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 23 may be read at get {76}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {73}.
So the message concat3(dhexp(key_531275857,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {75}.
mess(pub,concat3(dhexp(key_531275857,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

25. By 1, the attacker may have the channel pub.
By 24, the message concat3(dhexp(key_531275857,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_531275857,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_531275857,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

26. By 25, the attacker may know concat3(dhexp(key_531275857,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))).

27. By 26, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))).

28. By 25, the attacker may know concat3(dhexp(key_531275857,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_531275857,g).
attacker(dhexp(key_531275857,g)).

29. By 28, the attacker may know dhexp(key_531275857,g).
So the attacker may know dhexp(key_531275857,g) in phase 1.
attacker_p1(dhexp(key_531275857,g)).

30. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

31. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

32. The event LeakS(phase1,bob) may be executed at {236}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {237}.
mess_p1(pub,key_s(bob)).

33. By 31, the attacker may have the channel pub in phase 1.
By 32, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

35. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

36. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

37. By 36, the attacker may know somename in phase 1.
By 35, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

38. By 37, the attacker may know hash(somename,empty) in phase 1.
By 35, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

39. By 38, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 34, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

40. By 39, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 29, the attacker may know dhexp(key_531275857,g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g))).

41. By 33, the attacker may know key_s(bob) in phase 1.
By 29, the attacker may know dhexp(key_531275857,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_531275857,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_531275857,dhexp(key_s(bob),g))).

42. By 37, the attacker may know hash(somename,empty) in phase 1.
By 41, the attacker may know dhexp(key_531275857,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g)))).

43. By 42, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 40, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)) in phase 1.
By 27, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275857,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g))).

44. By 43, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275857,g)),dhexp(key_s(alice),g)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

45. By 33, the attacker may know key_s(bob) in phase 1.
By 44, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(dhexp(key_s(bob),dhexp(key_s(alice),g))).

46. By 11, the attacker may know dhexp(key_531275856,g).
So the attacker may know dhexp(key_531275856,g) in phase 1.
attacker_p1(dhexp(key_531275856,g)).

47. By 33, the attacker may know key_s(bob) in phase 1.
By 46, the attacker may know dhexp(key_531275856,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_531275856,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_531275856,dhexp(key_s(bob),g))).

48. By 37, the attacker may know hash(somename,empty) in phase 1.
By 47, the attacker may know dhexp(key_531275856,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g)))).

49. By 48, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))) in phase 1.
By 45, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

50. By 49, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

51. By 50, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531275856,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531275856,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_531276033 = key_e[me = alice,them = bob,!1 = @sid_531276019]
key_531276034 = key_e[me = alice,them = bob,!1 = @sid_531275929]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {76}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {73}.
So the message concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {75}.
mess(pub,concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

8. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 7 may be read at get {76}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {73}.
So the message concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {75}.
mess(pub,concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

9. By 1, the attacker may have the channel pub.
By 8, the message concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

10. By 9, the attacker may know concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))).

11. By 9, the attacker may know concat3(dhexp(key_531276033,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_531276033,g).
attacker(dhexp(key_531276033,g)).

12. The message dhexp(key_s(bob),g) may be sent on channel pub at output {163}.
mess(pub,dhexp(key_s(bob),g)).

13. By 1, the attacker may have the channel pub.
By 12, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 11, the attacker may know dhexp(key_531276033,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)).
By 10, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g)))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

24. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 23 may be read at get {76}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {73}.
So the message concat3(dhexp(key_531276034,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {75}.
mess(pub,concat3(dhexp(key_531276034,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

25. By 1, the attacker may have the channel pub.
By 24, the message concat3(dhexp(key_531276034,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_531276034,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_531276034,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

26. By 25, the attacker may know concat3(dhexp(key_531276034,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))).

27. By 26, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))).

28. By 25, the attacker may know concat3(dhexp(key_531276034,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_531276034,g).
attacker(dhexp(key_531276034,g)).

29. By 28, the attacker may know dhexp(key_531276034,g).
So the attacker may know dhexp(key_531276034,g) in phase 1.
attacker_p1(dhexp(key_531276034,g)).

30. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

31. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

32. The event LeakS(phase1,bob) may be executed at {236}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {237}.
mess_p1(pub,key_s(bob)).

33. By 31, the attacker may have the channel pub in phase 1.
By 32, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

35. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

36. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

37. By 36, the attacker may know somename in phase 1.
By 35, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

38. By 37, the attacker may know hash(somename,empty) in phase 1.
By 35, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

39. By 38, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 34, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

40. By 39, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 29, the attacker may know dhexp(key_531276034,g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g))).

41. By 33, the attacker may know key_s(bob) in phase 1.
By 29, the attacker may know dhexp(key_531276034,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_531276034,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_531276034,dhexp(key_s(bob),g))).

42. By 37, the attacker may know hash(somename,empty) in phase 1.
By 41, the attacker may know dhexp(key_531276034,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g)))).

43. By 42, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 40, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)) in phase 1.
By 27, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276034,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g))).

44. By 43, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276034,g)),dhexp(key_s(alice),g)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

45. By 33, the attacker may know key_s(bob) in phase 1.
By 44, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(dhexp(key_s(bob),dhexp(key_s(alice),g))).

46. By 11, the attacker may know dhexp(key_531276033,g).
So the attacker may know dhexp(key_531276033,g) in phase 1.
attacker_p1(dhexp(key_531276033,g)).

47. By 33, the attacker may know key_s(bob) in phase 1.
By 46, the attacker may know dhexp(key_531276033,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_531276033,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_531276033,dhexp(key_s(bob),g))).

48. By 37, the attacker may know hash(somename,empty) in phase 1.
By 47, the attacker may know dhexp(key_531276033,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g)))).

49. By 48, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))) in phase 1.
By 45, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

50. By 49, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

51. By 50, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276033,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276033,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_531276209 = key_e[me = alice,them = bob,!1 = @sid_531276195]
key_531276210 = key_e[me = alice,them = bob,!1 = @sid_531276105]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {76}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {73}.
So the message concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {75}.
mess(pub,concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

8. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 7 may be read at get {76}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {73}.
So the message concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {75}.
mess(pub,concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

9. By 1, the attacker may have the channel pub.
By 8, the message concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

10. By 9, the attacker may know concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))).

11. By 9, the attacker may know concat3(dhexp(key_531276209,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_531276209,g).
attacker(dhexp(key_531276209,g)).

12. The message dhexp(key_s(bob),g) may be sent on channel pub at output {163}.
mess(pub,dhexp(key_s(bob),g)).

13. By 1, the attacker may have the channel pub.
By 12, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty.
attacker(empty).

15. Using the function somename the attacker may obtain somename.
attacker(somename).

16. By 15, the attacker may know somename.
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty).
By 14, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty).
By 13, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 11, the attacker may know dhexp(key_531276209,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g))).

20. By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)).
By 10, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g)))).

22. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

23. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

24. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 23 may be read at get {76}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {73}.
So the message concat3(dhexp(key_531276210,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {75}.
mess(pub,concat3(dhexp(key_531276210,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

25. By 1, the attacker may have the channel pub.
By 24, the message concat3(dhexp(key_531276210,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_531276210,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_531276210,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

26. By 25, the attacker may know concat3(dhexp(key_531276210,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))).

27. By 26, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))).

28. By 25, the attacker may know concat3(dhexp(key_531276210,g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_531276210,g).
attacker(dhexp(key_531276210,g)).

29. By 28, the attacker may know dhexp(key_531276210,g).
So the attacker may know dhexp(key_531276210,g) in phase 1.
attacker_p1(dhexp(key_531276210,g)).

30. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

31. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

32. The event LeakS(phase1,bob) may be executed at {236}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {237}.
mess_p1(pub,key_s(bob)).

33. By 31, the attacker may have the channel pub in phase 1.
By 32, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

35. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

36. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

37. By 36, the attacker may know somename in phase 1.
By 35, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

38. By 37, the attacker may know hash(somename,empty) in phase 1.
By 35, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

39. By 38, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 34, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

40. By 39, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 29, the attacker may know dhexp(key_531276210,g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g))).

41. By 33, the attacker may know key_s(bob) in phase 1.
By 29, the attacker may know dhexp(key_531276210,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_531276210,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_531276210,dhexp(key_s(bob),g))).

42. By 37, the attacker may know hash(somename,empty) in phase 1.
By 41, the attacker may know dhexp(key_531276210,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g)))).

43. By 42, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 40, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)) in phase 1.
By 27, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276210,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g))).

44. By 43, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276210,g)),dhexp(key_s(alice),g)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

45. By 33, the attacker may know key_s(bob) in phase 1.
By 44, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
attacker_p1(dhexp(key_s(bob),dhexp(key_s(alice),g))).

46. By 11, the attacker may know dhexp(key_531276209,g).
So the attacker may know dhexp(key_531276209,g) in phase 1.
attacker_p1(dhexp(key_531276209,g)).

47. By 33, the attacker may know key_s(bob) in phase 1.
By 46, the attacker may know dhexp(key_531276209,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_531276209,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_531276209,dhexp(key_s(bob),g))).

48. By 37, the attacker may know hash(somename,empty) in phase 1.
By 47, the attacker may know dhexp(key_531276209,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g)))).

49. By 48, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))) in phase 1.
By 45, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

50. By 49, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))) in phase 1.
By 22, the attacker may know minnonce in phase 1.
By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

51. By 50, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_531276209,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_531276209,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
