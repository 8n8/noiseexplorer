File "X1N.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 231, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 232, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 232, character 36:
Warning: identifier h rebound.
File "X1N.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "X1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "X1N.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 275, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 275, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 276, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 283, character 6:
Warning: identifier e rebound.
File "X1N.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ne rebound.
File "X1N.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 288, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 289, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 296, character 6:
Warning: identifier s rebound.
File "X1N.noise.passive.pv", line 297, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 297, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1N.noise.passive.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 298, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 299, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "X1N.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 322, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 330, characters 6-7:
Warning: identifier re rebound.
File "X1N.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 336, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 344, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 344, characters 48-53:
Warning: identifier valid1 rebound.
File "X1N.noise.passive.pv", line 345, characters 6-7:
Warning: identifier rs rebound.
File "X1N.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 348, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 359, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 359, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 497, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 296, character 6:
Warning: identifier s rebound.
File "X1N.noise.passive.pv", line 297, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 297, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1N.noise.passive.pv", line 298, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 298, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 299, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 490, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 330, characters 6-7:
Warning: identifier re rebound.
File "X1N.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 334, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 336, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 482, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "X1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "X1N.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 275, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 275, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 276, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 555, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 548, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 344, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 344, characters 48-53:
Warning: identifier valid1 rebound.
File "X1N.noise.passive.pv", line 345, characters 6-7:
Warning: identifier rs rebound.
File "X1N.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 348, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 540, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 283, character 6:
Warning: identifier e rebound.
File "X1N.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ne rebound.
File "X1N.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 288, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 288, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 289, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 533, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "X1N.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 322, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_495: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_495));
    (
        {6}let e_496: keypair = keypairpack(empty,empty) in
        {7}let rs_497: key = empty in
        {8}let re_498: key = empty in
        {9}let v_499: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_500: key = catch-fail(v_499) in
        {11}let v_501: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_502: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_499) then (if not-caught-fail(v_500) then (if not-caught-fail(v_501) then symmetricstatepack(v_501,v_500,v_499) else fail-any) else fail-any) else fail-any))) in
        {13}let v_503: symmetricstate = catch-fail((if success?((if not-caught-fail(v_499) then (if not-caught-fail(v_500) then (if not-caught-fail(v_501) then symmetricstatepack(v_501,v_500,v_499) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then symmetricstatepack(1-proj-3-tuple(v_502),2-proj-3-tuple(v_502),hash(3-proj-3-tuple(v_502),empty)) else fail-any) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_503) then handshakestatepack(v_503,s_495,e_496,rs_497,re_498,empty,true) else fail-any) in
        {15}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {38}get statestore(=alice,=bob,=sid,statepack_a(hs_504: handshakestate)) in
        {16}let v_505: bitstring = catch-fail(handshakestateunpack(hs_504)) in
        {17}let v_506: bitstring = catch-fail((empty,empty,empty)) in
        {18}let v_507: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {19}let v_508: keypair = catch-fail((if not-caught-fail(v_507) then keypairpack(v_507,key_e(alice,bob,sid)) else fail-any)) in
        {20}let v_509: bitstring = catch-fail(getpublickey(v_508)) in
        {21}let v_510: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_505))) in
        {22}let v_511: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_505)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then symmetricstatepack(1-proj-3-tuple(v_510),2-proj-3-tuple(v_510),hash(3-proj-3-tuple(v_510),v_509)) else fail-any) else fail-any)) in
        {23}let v_512: bitstring = catch-fail(symmetricstateunpack(v_511)) in
        {24}let v_513: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_512))) in
        {25}let v_514: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_513),2-proj-2-tuple(v_513),3-proj-3-tuple(v_512),msg_a(alice,bob,sid))) in
        {26}let v_515: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_512))) in
        {27}let v_516: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_513))) && success?(1-proj-3-tuple(v_512))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-2-tuple(v_515))))) then cipherstatepack(1-proj-2-tuple(v_515),increment_nonce(2-proj-2-tuple(v_513))) else fail-any) else fail-any)) in
        {28}let v_517: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_512)) && success?(1-proj-3-tuple(v_512))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then (if not-caught-fail(v_514) then (if not-caught-fail(v_516) then (v_516,v_514) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_518: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_517),2-proj-3-tuple(v_512),3-proj-3-tuple(v_512)))) in
        {30}let v_519: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_517)) && success?(symmetricstatepack(1-proj-2-tuple(v_517),2-proj-3-tuple(v_512),3-proj-3-tuple(v_512)))) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_518),hash(3-proj-3-tuple(v_518),2-proj-2-tuple(v_517))) else fail-any) else fail-any)) in
        {31}let v_520: bitstring = catch-fail((if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then (if not-caught-fail(v_519) then (v_519,2-proj-2-tuple(v_517)) else fail-any) else fail-any) else fail-any)) in
        {32}let v_521: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_520),2-proj-7-tuple(v_505),v_508,4-proj-7-tuple(v_505),5-proj-7-tuple(v_505),6-proj-7-tuple(v_505),7-proj-7-tuple(v_505))) in
        {33}let v_522: bitstring = catch-fail(concat3(v_509,2-proj-3-tuple(v_506),2-proj-2-tuple(v_520))) in
        {34}let (hs_523: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-7-tuple(v_505))))) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (if not-caught-fail(v_511) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-2-tuple(v_520))))) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then (v_521,v_522) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {35}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {36}insert statestore(alice,bob,sid,statepack_b(hs_523));
        {37}out(pub, message_a)
    ) | (
        {67}get statestore(=alice,=bob,=sid,statepack_b(hs_524: handshakestate)) in
        {39}in(pub, message_b: bitstring);
        {40}let v_525: bitstring = catch-fail(handshakestateunpack(hs_524)) in
        {41}let v_526: bitstring = catch-fail(deconcat3(message_b)) in
        {42}let v_527: bool = catch-fail(true) in
        {43}let v_528: key = catch-fail(1-proj-3-tuple(v_526)) in
        {44}let v_529: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_525))) in
        {45}let v_530: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_525)) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then symmetricstatepack(1-proj-3-tuple(v_529),2-proj-3-tuple(v_529),hash(3-proj-3-tuple(v_529),v_528)) else fail-any) else fail-any)) in
        {46}let v_531: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_525))) in
        {47}let v_532: bitstring = catch-fail(symmetricstateunpack(v_530)) in
        {48}let v_533: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_532),(if success?(3-proj-7-tuple(v_525)) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then dhexp(2-proj-2-tuple(v_531),v_528) else fail-any) else fail-any))) in
        {49}let v_534: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_532),(if success?(3-proj-7-tuple(v_525)) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then dhexp(2-proj-2-tuple(v_531),v_528) else fail-any) else fail-any))) in
        {50}let v_535: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_532),(if success?(3-proj-7-tuple(v_525)) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then dhexp(2-proj-2-tuple(v_531),v_528) else fail-any) else fail-any))) in
        {51}let v_536: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_525)) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then dhexp(2-proj-2-tuple(v_531),v_528) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_532))) then (if not-caught-fail(v_533) then (if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (v_533,v_534,v_535) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {52}let v_537: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_525)) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then dhexp(2-proj-2-tuple(v_531),v_528) else fail-any) else fail-any)) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_536)) then cipherstatepack(2-proj-3-tuple(v_536),minnonce) else fail-any),1-proj-3-tuple(v_536),3-proj-3-tuple(v_532)) else fail-any) else fail-any) else fail-any)) in
        {53}let v_538: bitstring = catch-fail(symmetricstateunpack(v_537)) in
        {54}let v_539: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_538))) in
        {55}let v_540: aead = catch-fail(decrypt(1-proj-2-tuple(v_539),2-proj-2-tuple(v_539),3-proj-3-tuple(v_538),3-proj-3-tuple(v_526))) in
        {56}let v_541: bitstring = catch-fail(aeadunpack(v_540)) in
        {57}let v_542: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_538))) in
        {58}let v_543: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_539))) && success?(1-proj-3-tuple(v_538))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then cipherstatepack(1-proj-2-tuple(v_542),increment_nonce(2-proj-2-tuple(v_539))) else fail-any) else fail-any)) in
        {59}let v_544: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_526)) && (success?(3-proj-3-tuple(v_538)) && success?(1-proj-3-tuple(v_538)))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then (if not-caught-fail(v_540) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then (if not-caught-fail(v_543) then (v_543,3-proj-3-tuple(v_541),1-proj-3-tuple(v_541)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_545: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_544),2-proj-3-tuple(v_538),3-proj-3-tuple(v_538)))) in
        {61}let v_546: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_526)) && success?(symmetricstatepack(1-proj-3-tuple(v_544),2-proj-3-tuple(v_538),3-proj-3-tuple(v_538)))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then symmetricstatepack(1-proj-3-tuple(v_545),2-proj-3-tuple(v_545),hash(3-proj-3-tuple(v_545),3-proj-3-tuple(v_526))) else fail-any) else fail-any)) in
        {62}let v_547: bitstring = catch-fail((if success?(3-proj-3-tuple(v_526)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (if not-caught-fail(v_546) then (v_546,2-proj-3-tuple(v_544),3-proj-3-tuple(v_544)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_548: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_547),2-proj-7-tuple(v_525),3-proj-7-tuple(v_525),4-proj-7-tuple(v_525),v_528,6-proj-7-tuple(v_525),7-proj-7-tuple(v_525))) in
        {64}let (hs_549: handshakestate,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-7-tuple(v_525))))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then (if not-caught-fail(v_527) then (if not-caught-fail(v_528) then (if not-caught-fail(v_530) then (if not-caught-fail(v_537) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then (if (v_527 && 3-proj-3-tuple(v_547)) then (if not-caught-fail(v_548) then (v_548,2-proj-3-tuple(v_547),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {65}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {66}insert statestore(alice,bob,sid,statepack_c(hs_549))
    ) | (
        {96}get statestore(=alice,=bob,=sid,statepack_c(hs_550: handshakestate)) in
        {68}let v_551: bitstring = catch-fail(handshakestateunpack(hs_550)) in
        {69}let v_552: bitstring = catch-fail((empty,empty,empty)) in
        {70}let v_553: key = catch-fail(dhexp(key_s(alice),g)) in
        {71}let v_554: keypair = catch-fail((if not-caught-fail(v_553) then keypairpack(v_553,key_s(alice)) else fail-any)) in
        {72}let v_555: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_551))) in
        {73}let v_556: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_555))) in
        {74}let v_557: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_556),2-proj-2-tuple(v_556),3-proj-3-tuple(v_555),getpublickey(v_554))) in
        {75}let v_558: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_555))) in
        {76}let v_559: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_556))) && success?(1-proj-3-tuple(v_555))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then cipherstatepack(1-proj-2-tuple(v_558),increment_nonce(2-proj-2-tuple(v_556))) else fail-any) else fail-any)) in
        {77}let v_560: bitstring = catch-fail((if (success?(getpublickey(v_554)) && (success?(3-proj-3-tuple(v_555)) && success?(1-proj-3-tuple(v_555)))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then (if not-caught-fail(v_557) then (if not-caught-fail(v_559) then (v_559,v_557) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_561: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_560),2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)))) in
        {79}let v_562: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_560)) && success?(symmetricstatepack(1-proj-2-tuple(v_560),2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then symmetricstatepack(1-proj-3-tuple(v_561),2-proj-3-tuple(v_561),hash(3-proj-3-tuple(v_561),2-proj-2-tuple(v_560))) else fail-any) else fail-any)) in
        {80}let v_563: bitstring = catch-fail((if (success?(getpublickey(v_554)) && success?(1-proj-7-tuple(v_551))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then (if not-caught-fail(v_562) then (v_562,2-proj-2-tuple(v_560)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_564: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_563))) in
        {82}let v_565: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {83}let v_566: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_565),2-proj-2-tuple(v_565),3-proj-3-tuple(v_564),msg_c(alice,bob,sid))) in
        {84}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_564))) in
        {85}let v_568: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_565))) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then cipherstatepack(1-proj-2-tuple(v_567),increment_nonce(2-proj-2-tuple(v_565))) else fail-any) else fail-any)) in
        {86}let v_569: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(1-proj-3-tuple(v_564))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-2-tuple(v_565))))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then (v_568,v_566) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_570: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_569),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) in
        {88}let v_571: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_569)) && success?(symmetricstatepack(1-proj-2-tuple(v_569),2-proj-3-tuple(v_564),3-proj-3-tuple(v_564)))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_570),hash(3-proj-3-tuple(v_570),2-proj-2-tuple(v_569))) else fail-any) else fail-any)) in
        {89}let v_572: bitstring = catch-fail((if success?(1-proj-2-tuple(v_563)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,2-proj-2-tuple(v_569)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let v_573: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_572),v_554,3-proj-7-tuple(v_551),4-proj-7-tuple(v_551),5-proj-7-tuple(v_551),6-proj-7-tuple(v_551),7-proj-7-tuple(v_551))) in
        {91}let v_574: bitstring = catch-fail(concat3(1-proj-3-tuple(v_552),2-proj-2-tuple(v_563),2-proj-2-tuple(v_572))) in
        {92}let (hs_575: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-7-tuple(v_551))))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (if not-caught-fail(v_554) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_573) then (if not-caught-fail(v_574) then (v_573,v_574) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {93}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {94}insert statestore(alice,bob,sid,statepack_d(hs_575));
        {95}out(pub, message_c)
    ) | (
        {130}get statestore(=alice,=bob,=sid,statepack_d(hs_576: handshakestate)) in
        {97}in(pub, message_d: bitstring);
        {98}let v_577: bitstring = catch-fail(handshakestateunpack(hs_576)) in
        {99}let v_578: bitstring = catch-fail(deconcat3(message_d)) in
        {100}let v_579: bool = catch-fail(true) in
        {101}let v_580: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_577))) in
        {102}let v_581: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_577))) in
        {103}let v_582: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_581),(if (success?(5-proj-7-tuple(v_577)) && success?(2-proj-7-tuple(v_577))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_577)) else fail-any) else fail-any))) in
        {104}let v_583: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_581),(if (success?(5-proj-7-tuple(v_577)) && success?(2-proj-7-tuple(v_577))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_577)) else fail-any) else fail-any))) in
        {105}let v_584: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_581),(if (success?(5-proj-7-tuple(v_577)) && success?(2-proj-7-tuple(v_577))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_577)) else fail-any) else fail-any))) in
        {106}let v_585: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_577)) && success?(2-proj-7-tuple(v_577))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_577)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_581))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (v_582,v_583,v_584) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_586: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_577)) && success?(2-proj-7-tuple(v_577))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then dhexp(2-proj-2-tuple(v_580),5-proj-7-tuple(v_577)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_577))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_585)) then cipherstatepack(2-proj-3-tuple(v_585),minnonce) else fail-any),1-proj-3-tuple(v_585),3-proj-3-tuple(v_581)) else fail-any) else fail-any) else fail-any)) in
        {108}let v_587: bitstring = catch-fail(symmetricstateunpack(v_586)) in
        {109}let v_588: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {110}let v_589: aead = catch-fail(decrypt(1-proj-2-tuple(v_588),2-proj-2-tuple(v_588),3-proj-3-tuple(v_587),3-proj-3-tuple(v_578))) in
        {111}let v_590: bitstring = catch-fail(aeadunpack(v_589)) in
        {112}let v_591: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {113}let v_592: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_588))) && success?(1-proj-3-tuple(v_587))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then cipherstatepack(1-proj-2-tuple(v_591),increment_nonce(2-proj-2-tuple(v_588))) else fail-any) else fail-any)) in
        {114}let v_593: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_578)) && (success?(3-proj-3-tuple(v_587)) && success?(1-proj-3-tuple(v_587)))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then (if not-caught-fail(v_589) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if not-caught-fail(v_592) then (v_592,3-proj-3-tuple(v_590),1-proj-3-tuple(v_590)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_594: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) in
        {116}let v_595: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_578)) && success?(symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),3-proj-3-tuple(v_578))) else fail-any) else fail-any)) in
        {117}let v_596: bitstring = catch-fail((if success?(3-proj-3-tuple(v_578)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if not-caught-fail(v_595) then (v_595,2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_597: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_596),2-proj-7-tuple(v_577),3-proj-7-tuple(v_577),4-proj-7-tuple(v_577),5-proj-7-tuple(v_577),6-proj-7-tuple(v_577),7-proj-7-tuple(v_577))) in
        {119}let v_598: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_596))) in
        {120}let v_599: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_598),zero)) in
        {121}let v_600: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_598),zero)) in
        {122}let v_601: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_598),zero)) in
        {123}let v_602: bitstring = catch-fail((if success?(2-proj-3-tuple(v_598)) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (v_599,v_600,v_601) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_603: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_602)) then cipherstatepack(1-proj-3-tuple(v_602),minnonce) else fail-any)) in
        {125}let v_604: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_602)) then cipherstatepack(2-proj-3-tuple(v_602),minnonce) else fail-any)) in
        {126}let v_605: bitstring = catch-fail((if success?(1-proj-3-tuple(v_596)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (1-proj-3-tuple(v_596),v_603,v_604) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let (hs_606: handshakestate,plaintext_d: bitstring,valid_607: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-7-tuple(v_577))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_586) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if (v_579 && 3-proj-3-tuple(v_596)) then (if not-caught-fail(v_597) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (v_597,2-proj-3-tuple(v_596),true,2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {128}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {129}event RecvEnd(valid_607)
    ) | (
        {131}event LeakS(phase0,alice);
        {132}out(pub, key_s(alice))
    ) | (
        {133}phase 1;
        {134}event LeakS(phase1,alice);
        {135}out(pub, key_s(alice))
    )
) | (
    {136}let s_608: keypair = keypairpack(empty,empty) in
    {137}out(pub, getpublickey(s_608));
    (
        {138}let e_609: keypair = keypairpack(empty,empty) in
        {139}let rs_610: key = empty in
        {140}let re_611: key = empty in
        {141}let v_612: bitstring = catch-fail(hash(somename,empty)) in
        {142}let v_613: key = catch-fail(v_612) in
        {143}let v_614: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {144}let v_615: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then symmetricstatepack(v_614,v_613,v_612) else fail-any) else fail-any) else fail-any))) in
        {145}let v_616: symmetricstate = catch-fail((if success?((if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then symmetricstatepack(v_614,v_613,v_612) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then symmetricstatepack(1-proj-3-tuple(v_615),2-proj-3-tuple(v_615),hash(3-proj-3-tuple(v_615),empty)) else fail-any) else fail-any)) in
        {146}let hs_617: handshakestate = (if not-caught-fail(v_616) then handshakestatepack(v_616,s_608,e_609,rs_610,re_611,empty,true) else fail-any) in
        {147}insert statestore(alice,charlie,sid,statepack_a(hs_617))
    ) | (
        {170}get statestore(=alice,=charlie,=sid,statepack_a(hs_618: handshakestate)) in
        {148}let v_619: bitstring = catch-fail(handshakestateunpack(hs_618)) in
        {149}let v_620: bitstring = catch-fail((empty,empty,empty)) in
        {150}let v_621: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {151}let v_622: keypair = catch-fail((if not-caught-fail(v_621) then keypairpack(v_621,key_e(alice,charlie,sid)) else fail-any)) in
        {152}let v_623: bitstring = catch-fail(getpublickey(v_622)) in
        {153}let v_624: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_619))) in
        {154}let v_625: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_619)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then symmetricstatepack(1-proj-3-tuple(v_624),2-proj-3-tuple(v_624),hash(3-proj-3-tuple(v_624),v_623)) else fail-any) else fail-any)) in
        {155}let v_626: bitstring = catch-fail(symmetricstateunpack(v_625)) in
        {156}let v_627: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_626))) in
        {157}let v_628: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_627),2-proj-2-tuple(v_627),3-proj-3-tuple(v_626),msg_a(alice,charlie,sid))) in
        {158}let v_629: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_626))) in
        {159}let v_630: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_627))) && success?(1-proj-3-tuple(v_626))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then cipherstatepack(1-proj-2-tuple(v_629),increment_nonce(2-proj-2-tuple(v_627))) else fail-any) else fail-any)) in
        {160}let v_631: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_626)) && success?(1-proj-3-tuple(v_626))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then (if not-caught-fail(v_628) then (if not-caught-fail(v_630) then (v_630,v_628) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {161}let v_632: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_631),2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)))) in
        {162}let v_633: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_631)) && success?(symmetricstatepack(1-proj-2-tuple(v_631),2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then symmetricstatepack(1-proj-3-tuple(v_632),2-proj-3-tuple(v_632),hash(3-proj-3-tuple(v_632),2-proj-2-tuple(v_631))) else fail-any) else fail-any)) in
        {163}let v_634: bitstring = catch-fail((if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then (if not-caught-fail(v_633) then (v_633,2-proj-2-tuple(v_631)) else fail-any) else fail-any) else fail-any)) in
        {164}let v_635: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_634),2-proj-7-tuple(v_619),v_622,4-proj-7-tuple(v_619),5-proj-7-tuple(v_619),6-proj-7-tuple(v_619),7-proj-7-tuple(v_619))) in
        {165}let v_636: bitstring = catch-fail(concat3(v_623,2-proj-3-tuple(v_620),2-proj-2-tuple(v_634))) in
        {166}let (hs_637: handshakestate,message_a_638: bitstring) = (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-7-tuple(v_619))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if not-caught-fail(v_622) then (if not-caught-fail(v_623) then (if not-caught-fail(v_625) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-2-tuple(v_634))))) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (v_635,v_636) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {167}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {168}insert statestore(alice,charlie,sid,statepack_b(hs_637));
        {169}out(pub, message_a_638)
    ) | (
        {199}get statestore(=alice,=charlie,=sid,statepack_b(hs_639: handshakestate)) in
        {171}in(pub, message_b_640: bitstring);
        {172}let v_641: bitstring = catch-fail(handshakestateunpack(hs_639)) in
        {173}let v_642: bitstring = catch-fail(deconcat3(message_b_640)) in
        {174}let v_643: bool = catch-fail(true) in
        {175}let v_644: key = catch-fail(1-proj-3-tuple(v_642)) in
        {176}let v_645: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_641))) in
        {177}let v_646: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_641)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then symmetricstatepack(1-proj-3-tuple(v_645),2-proj-3-tuple(v_645),hash(3-proj-3-tuple(v_645),v_644)) else fail-any) else fail-any)) in
        {178}let v_647: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_641))) in
        {179}let v_648: bitstring = catch-fail(symmetricstateunpack(v_646)) in
        {180}let v_649: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_648),(if success?(3-proj-7-tuple(v_641)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_644) else fail-any) else fail-any))) in
        {181}let v_650: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_648),(if success?(3-proj-7-tuple(v_641)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_644) else fail-any) else fail-any))) in
        {182}let v_651: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_648),(if success?(3-proj-7-tuple(v_641)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_644) else fail-any) else fail-any))) in
        {183}let v_652: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_641)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_644) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_648))) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then (if not-caught-fail(v_651) then (v_649,v_650,v_651) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {184}let v_653: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_641)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then dhexp(2-proj-2-tuple(v_647),v_644) else fail-any) else fail-any)) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_652)) then cipherstatepack(2-proj-3-tuple(v_652),minnonce) else fail-any),1-proj-3-tuple(v_652),3-proj-3-tuple(v_648)) else fail-any) else fail-any) else fail-any)) in
        {185}let v_654: bitstring = catch-fail(symmetricstateunpack(v_653)) in
        {186}let v_655: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_654))) in
        {187}let v_656: aead = catch-fail(decrypt(1-proj-2-tuple(v_655),2-proj-2-tuple(v_655),3-proj-3-tuple(v_654),3-proj-3-tuple(v_642))) in
        {188}let v_657: bitstring = catch-fail(aeadunpack(v_656)) in
        {189}let v_658: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_654))) in
        {190}let v_659: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_655))) && success?(1-proj-3-tuple(v_654))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-2-tuple(v_658))))) then cipherstatepack(1-proj-2-tuple(v_658),increment_nonce(2-proj-2-tuple(v_655))) else fail-any) else fail-any)) in
        {191}let v_660: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_642)) && (success?(3-proj-3-tuple(v_654)) && success?(1-proj-3-tuple(v_654)))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then (if not-caught-fail(v_656) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if not-caught-fail(v_659) then (v_659,3-proj-3-tuple(v_657),1-proj-3-tuple(v_657)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {192}let v_661: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_660),2-proj-3-tuple(v_654),3-proj-3-tuple(v_654)))) in
        {193}let v_662: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_642)) && success?(symmetricstatepack(1-proj-3-tuple(v_660),2-proj-3-tuple(v_654),3-proj-3-tuple(v_654)))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then symmetricstatepack(1-proj-3-tuple(v_661),2-proj-3-tuple(v_661),hash(3-proj-3-tuple(v_661),3-proj-3-tuple(v_642))) else fail-any) else fail-any)) in
        {194}let v_663: bitstring = catch-fail((if success?(3-proj-3-tuple(v_642)) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if not-caught-fail(v_662) then (v_662,2-proj-3-tuple(v_660),3-proj-3-tuple(v_660)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {195}let v_664: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_663),2-proj-7-tuple(v_641),3-proj-7-tuple(v_641),4-proj-7-tuple(v_641),v_644,6-proj-7-tuple(v_641),7-proj-7-tuple(v_641))) in
        {196}let (hs_665: handshakestate,plaintext_b_666: bitstring,valid_667: bool) = (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-7-tuple(v_641))))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (if not-caught-fail(v_646) then (if not-caught-fail(v_653) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if (v_643 && 3-proj-3-tuple(v_663)) then (if not-caught-fail(v_664) then (v_664,2-proj-3-tuple(v_663),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {197}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_666);
        {198}insert statestore(alice,charlie,sid,statepack_c(hs_665))
    ) | (
        {228}get statestore(=alice,=charlie,=sid,statepack_c(hs_668: handshakestate)) in
        {200}let v_669: bitstring = catch-fail(handshakestateunpack(hs_668)) in
        {201}let v_670: bitstring = catch-fail((empty,empty,empty)) in
        {202}let v_671: key = catch-fail(dhexp(key_s(alice),g)) in
        {203}let v_672: keypair = catch-fail((if not-caught-fail(v_671) then keypairpack(v_671,key_s(alice)) else fail-any)) in
        {204}let v_673: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_669))) in
        {205}let v_674: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_673))) in
        {206}let v_675: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_674),2-proj-2-tuple(v_674),3-proj-3-tuple(v_673),getpublickey(v_672))) in
        {207}let v_676: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_673))) in
        {208}let v_677: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_674))) && success?(1-proj-3-tuple(v_673))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then cipherstatepack(1-proj-2-tuple(v_676),increment_nonce(2-proj-2-tuple(v_674))) else fail-any) else fail-any)) in
        {209}let v_678: bitstring = catch-fail((if (success?(getpublickey(v_672)) && (success?(3-proj-3-tuple(v_673)) && success?(1-proj-3-tuple(v_673)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then (if not-caught-fail(v_675) then (if not-caught-fail(v_677) then (v_677,v_675) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {210}let v_679: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_678),2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)))) in
        {211}let v_680: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_678)) && success?(symmetricstatepack(1-proj-2-tuple(v_678),2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then symmetricstatepack(1-proj-3-tuple(v_679),2-proj-3-tuple(v_679),hash(3-proj-3-tuple(v_679),2-proj-2-tuple(v_678))) else fail-any) else fail-any)) in
        {212}let v_681: bitstring = catch-fail((if (success?(getpublickey(v_672)) && success?(1-proj-7-tuple(v_669))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then (if not-caught-fail(v_680) then (v_680,2-proj-2-tuple(v_678)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {213}let v_682: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_681))) in
        {214}let v_683: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_682))) in
        {215}let v_684: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_683),2-proj-2-tuple(v_683),3-proj-3-tuple(v_682),msg_c(alice,charlie,sid))) in
        {216}let v_685: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_682))) in
        {217}let v_686: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_683))) && success?(1-proj-3-tuple(v_682))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-2-tuple(v_685))))) then cipherstatepack(1-proj-2-tuple(v_685),increment_nonce(2-proj-2-tuple(v_683))) else fail-any) else fail-any)) in
        {218}let v_687: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_682)) && success?(1-proj-3-tuple(v_682))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then (if not-caught-fail(v_684) then (if not-caught-fail(v_686) then (v_686,v_684) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_688: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_687),2-proj-3-tuple(v_682),3-proj-3-tuple(v_682)))) in
        {220}let v_689: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_687)) && success?(symmetricstatepack(1-proj-2-tuple(v_687),2-proj-3-tuple(v_682),3-proj-3-tuple(v_682)))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then symmetricstatepack(1-proj-3-tuple(v_688),2-proj-3-tuple(v_688),hash(3-proj-3-tuple(v_688),2-proj-2-tuple(v_687))) else fail-any) else fail-any)) in
        {221}let v_690: bitstring = catch-fail((if success?(1-proj-2-tuple(v_681)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then (if not-caught-fail(v_689) then (v_689,2-proj-2-tuple(v_687)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {222}let v_691: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_690),v_672,3-proj-7-tuple(v_669),4-proj-7-tuple(v_669),5-proj-7-tuple(v_669),6-proj-7-tuple(v_669),7-proj-7-tuple(v_669))) in
        {223}let v_692: bitstring = catch-fail(concat3(1-proj-3-tuple(v_670),2-proj-2-tuple(v_681),2-proj-2-tuple(v_690))) in
        {224}let (hs_693: handshakestate,message_c_694: bitstring) = (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-7-tuple(v_669))))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if not-caught-fail(v_672) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-2-tuple(v_690))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (v_691,v_692) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {225}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {226}insert statestore(alice,charlie,sid,statepack_d(hs_693));
        {227}out(pub, message_c_694)
    ) | (
        {262}get statestore(=alice,=charlie,=sid,statepack_d(hs_695: handshakestate)) in
        {229}in(pub, message_d_696: bitstring);
        {230}let v_697: bitstring = catch-fail(handshakestateunpack(hs_695)) in
        {231}let v_698: bitstring = catch-fail(deconcat3(message_d_696)) in
        {232}let v_699: bool = catch-fail(true) in
        {233}let v_700: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_697))) in
        {234}let v_701: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_697))) in
        {235}let v_702: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_701),(if (success?(5-proj-7-tuple(v_697)) && success?(2-proj-7-tuple(v_697))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then dhexp(2-proj-2-tuple(v_700),5-proj-7-tuple(v_697)) else fail-any) else fail-any))) in
        {236}let v_703: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_701),(if (success?(5-proj-7-tuple(v_697)) && success?(2-proj-7-tuple(v_697))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then dhexp(2-proj-2-tuple(v_700),5-proj-7-tuple(v_697)) else fail-any) else fail-any))) in
        {237}let v_704: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_701),(if (success?(5-proj-7-tuple(v_697)) && success?(2-proj-7-tuple(v_697))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then dhexp(2-proj-2-tuple(v_700),5-proj-7-tuple(v_697)) else fail-any) else fail-any))) in
        {238}let v_705: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_697)) && success?(2-proj-7-tuple(v_697))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then dhexp(2-proj-2-tuple(v_700),5-proj-7-tuple(v_697)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_701))) then (if not-caught-fail(v_702) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (v_702,v_703,v_704) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_706: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_697)) && success?(2-proj-7-tuple(v_697))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then dhexp(2-proj-2-tuple(v_700),5-proj-7-tuple(v_697)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_697))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_705)) then cipherstatepack(2-proj-3-tuple(v_705),minnonce) else fail-any),1-proj-3-tuple(v_705),3-proj-3-tuple(v_701)) else fail-any) else fail-any) else fail-any)) in
        {240}let v_707: bitstring = catch-fail(symmetricstateunpack(v_706)) in
        {241}let v_708: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_707))) in
        {242}let v_709: aead = catch-fail(decrypt(1-proj-2-tuple(v_708),2-proj-2-tuple(v_708),3-proj-3-tuple(v_707),3-proj-3-tuple(v_698))) in
        {243}let v_710: bitstring = catch-fail(aeadunpack(v_709)) in
        {244}let v_711: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_707))) in
        {245}let v_712: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_708))) && success?(1-proj-3-tuple(v_707))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then cipherstatepack(1-proj-2-tuple(v_711),increment_nonce(2-proj-2-tuple(v_708))) else fail-any) else fail-any)) in
        {246}let v_713: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_698)) && (success?(3-proj-3-tuple(v_707)) && success?(1-proj-3-tuple(v_707)))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then (if not-caught-fail(v_709) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then (if not-caught-fail(v_712) then (v_712,3-proj-3-tuple(v_710),1-proj-3-tuple(v_710)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_714: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_713),2-proj-3-tuple(v_707),3-proj-3-tuple(v_707)))) in
        {248}let v_715: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_698)) && success?(symmetricstatepack(1-proj-3-tuple(v_713),2-proj-3-tuple(v_707),3-proj-3-tuple(v_707)))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then symmetricstatepack(1-proj-3-tuple(v_714),2-proj-3-tuple(v_714),hash(3-proj-3-tuple(v_714),3-proj-3-tuple(v_698))) else fail-any) else fail-any)) in
        {249}let v_716: bitstring = catch-fail((if success?(3-proj-3-tuple(v_698)) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then (if not-caught-fail(v_715) then (v_715,2-proj-3-tuple(v_713),3-proj-3-tuple(v_713)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_717: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_716),2-proj-7-tuple(v_697),3-proj-7-tuple(v_697),4-proj-7-tuple(v_697),5-proj-7-tuple(v_697),6-proj-7-tuple(v_697),7-proj-7-tuple(v_697))) in
        {251}let v_718: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_716))) in
        {252}let v_719: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_718),zero)) in
        {253}let v_720: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_718),zero)) in
        {254}let v_721: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_718),zero)) in
        {255}let v_722: bitstring = catch-fail((if success?(2-proj-3-tuple(v_718)) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (if not-caught-fail(v_721) then (v_719,v_720,v_721) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_723: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_722)) then cipherstatepack(1-proj-3-tuple(v_722),minnonce) else fail-any)) in
        {257}let v_724: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_722)) then cipherstatepack(2-proj-3-tuple(v_722),minnonce) else fail-any)) in
        {258}let v_725: bitstring = catch-fail((if success?(1-proj-3-tuple(v_716)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then (1-proj-3-tuple(v_716),v_723,v_724) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {259}let (hs_726: handshakestate,plaintext_d_727: bitstring,valid_728: bool,cs1_729: cipherstate,cs2_730: cipherstate) = (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-7-tuple(v_697))))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if not-caught-fail(v_699) then (if not-caught-fail(v_706) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if (v_699 && 3-proj-3-tuple(v_716)) then (if not-caught-fail(v_717) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (v_717,2-proj-3-tuple(v_716),true,2-proj-3-tuple(v_725),3-proj-3-tuple(v_725)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {260}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_727);
        {261}event RecvEnd(valid_728)
    ) | (
        {263}event LeakS(phase0,alice);
        {264}out(pub, key_s(alice))
    ) | (
        {265}phase 1;
        {266}event LeakS(phase1,alice);
        {267}out(pub, key_s(alice))
    )
) | (
    {268}let s_731: keypair = keypairpack(empty,empty) in
    (
        {269}let e_732: keypair = keypairpack(empty,empty) in
        {270}let rs_733: key = empty in
        {271}let re_734: key = empty in
        {272}let v_735: bitstring = catch-fail(hash(somename,empty)) in
        {273}let v_736: key = catch-fail(v_735) in
        {274}let v_737: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {275}let v_738: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_735) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then symmetricstatepack(v_737,v_736,v_735) else fail-any) else fail-any) else fail-any))) in
        {276}let v_739: symmetricstate = catch-fail((if success?((if not-caught-fail(v_735) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then symmetricstatepack(v_737,v_736,v_735) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack(1-proj-3-tuple(v_738),2-proj-3-tuple(v_738),hash(3-proj-3-tuple(v_738),empty)) else fail-any) else fail-any)) in
        {277}let hs_740: handshakestate = (if not-caught-fail(v_739) then handshakestatepack(v_739,s_731,e_732,rs_733,re_734,empty,false) else fail-any) in
        {278}insert statestore(bob,alice,sid,statepack_a(hs_740))
    ) | (
        {300}get statestore(=bob,=alice,=sid,statepack_a(hs_741: handshakestate)) in
        {279}in(pub, message_a_742: bitstring);
        {280}let v_743: bitstring = catch-fail(handshakestateunpack(hs_741)) in
        {281}let v_744: bitstring = catch-fail(deconcat3(message_a_742)) in
        {282}let v_745: bool = catch-fail(true) in
        {283}let v_746: key = catch-fail(1-proj-3-tuple(v_744)) in
        {284}let v_747: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_743))) in
        {285}let v_748: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_743)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then symmetricstatepack(1-proj-3-tuple(v_747),2-proj-3-tuple(v_747),hash(3-proj-3-tuple(v_747),v_746)) else fail-any) else fail-any)) in
        {286}let v_749: bitstring = catch-fail(symmetricstateunpack(v_748)) in
        {287}let v_750: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_749))) in
        {288}let v_751: aead = catch-fail(decrypt(1-proj-2-tuple(v_750),2-proj-2-tuple(v_750),3-proj-3-tuple(v_749),3-proj-3-tuple(v_744))) in
        {289}let v_752: bitstring = catch-fail(aeadunpack(v_751)) in
        {290}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_749))) in
        {291}let v_754: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_750))) && success?(1-proj-3-tuple(v_749))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then cipherstatepack(1-proj-2-tuple(v_753),increment_nonce(2-proj-2-tuple(v_750))) else fail-any) else fail-any)) in
        {292}let v_755: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_744)) && (success?(3-proj-3-tuple(v_749)) && success?(1-proj-3-tuple(v_749)))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then (if not-caught-fail(v_751) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if not-caught-fail(v_754) then (v_754,3-proj-3-tuple(v_752),1-proj-3-tuple(v_752)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_756: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_749),3-proj-3-tuple(v_749)))) in
        {294}let v_757: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_744)) && success?(symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_749),3-proj-3-tuple(v_749)))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_756),hash(3-proj-3-tuple(v_756),3-proj-3-tuple(v_744))) else fail-any) else fail-any)) in
        {295}let v_758: bitstring = catch-fail((if success?(3-proj-3-tuple(v_744)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if not-caught-fail(v_757) then (v_757,2-proj-3-tuple(v_755),3-proj-3-tuple(v_755)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_759: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_758),2-proj-7-tuple(v_743),3-proj-7-tuple(v_743),4-proj-7-tuple(v_743),v_746,6-proj-7-tuple(v_743),7-proj-7-tuple(v_743))) in
        {297}let (hs_760: handshakestate,plaintext_a: bitstring,valid_761: bool) = (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-7-tuple(v_743))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (if not-caught-fail(v_748) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if (v_745 && 3-proj-3-tuple(v_758)) then (if not-caught-fail(v_759) then (v_759,2-proj-3-tuple(v_758),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {298}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {299}insert statestore(bob,alice,sid,statepack_b(hs_760))
    ) | (
        {330}get statestore(=bob,=alice,=sid,statepack_b(hs_762: handshakestate)) in
        {301}let v_763: bitstring = catch-fail(handshakestateunpack(hs_762)) in
        {302}let v_764: bitstring = catch-fail((empty,empty,empty)) in
        {303}let v_765: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {304}let v_766: keypair = catch-fail((if not-caught-fail(v_765) then keypairpack(v_765,key_e(bob,alice,sid)) else fail-any)) in
        {305}let v_767: bitstring = catch-fail(getpublickey(v_766)) in
        {306}let v_768: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_763))) in
        {307}let v_769: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_763)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then symmetricstatepack(1-proj-3-tuple(v_768),2-proj-3-tuple(v_768),hash(3-proj-3-tuple(v_768),v_767)) else fail-any) else fail-any)) in
        {308}let v_770: bitstring = catch-fail(keypairunpack(v_766)) in
        {309}let v_771: bitstring = catch-fail(symmetricstateunpack(v_769)) in
        {310}let v_772: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_771),(if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any))) in
        {311}let v_773: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_771),(if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any))) in
        {312}let v_774: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_771),(if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any))) in
        {313}let v_775: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_771))) then (if not-caught-fail(v_772) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (v_772,v_773,v_774) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {314}let v_776: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_763)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_763)) else fail-any) else fail-any)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_775)) then cipherstatepack(2-proj-3-tuple(v_775),minnonce) else fail-any),1-proj-3-tuple(v_775),3-proj-3-tuple(v_771)) else fail-any) else fail-any) else fail-any)) in
        {315}let v_777: bitstring = catch-fail(symmetricstateunpack(v_776)) in
        {316}let v_778: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_777))) in
        {317}let v_779: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_778),2-proj-2-tuple(v_778),3-proj-3-tuple(v_777),msg_b(bob,alice,sid))) in
        {318}let v_780: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_777))) in
        {319}let v_781: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_778))) && success?(1-proj-3-tuple(v_777))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then cipherstatepack(1-proj-2-tuple(v_780),increment_nonce(2-proj-2-tuple(v_778))) else fail-any) else fail-any)) in
        {320}let v_782: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_777)) && success?(1-proj-3-tuple(v_777))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then (if not-caught-fail(v_779) then (if not-caught-fail(v_781) then (v_781,v_779) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {321}let v_783: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_782),2-proj-3-tuple(v_777),3-proj-3-tuple(v_777)))) in
        {322}let v_784: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_782)) && success?(symmetricstatepack(1-proj-2-tuple(v_782),2-proj-3-tuple(v_777),3-proj-3-tuple(v_777)))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then symmetricstatepack(1-proj-3-tuple(v_783),2-proj-3-tuple(v_783),hash(3-proj-3-tuple(v_783),2-proj-2-tuple(v_782))) else fail-any) else fail-any)) in
        {323}let v_785: bitstring = catch-fail((if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then (if not-caught-fail(v_784) then (v_784,2-proj-2-tuple(v_782)) else fail-any) else fail-any) else fail-any)) in
        {324}let v_786: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_785),2-proj-7-tuple(v_763),v_766,4-proj-7-tuple(v_763),5-proj-7-tuple(v_763),6-proj-7-tuple(v_763),7-proj-7-tuple(v_763))) in
        {325}let v_787: bitstring = catch-fail(concat3(v_767,2-proj-3-tuple(v_764),2-proj-2-tuple(v_785))) in
        {326}let (hs_788: handshakestate,message_b_789: bitstring) = (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-7-tuple(v_763))))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (if not-caught-fail(v_769) then (if not-caught-fail(v_776) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then (if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (v_786,v_787) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {327}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {328}insert statestore(bob,alice,sid,statepack_c(hs_788));
        {329}out(pub, message_b_789)
    ) | (
        {361}get statestore(=bob,=alice,=sid,statepack_c(hs_790: handshakestate)) in
        {331}in(pub, message_c_791: bitstring);
        {332}let v_792: bitstring = catch-fail(handshakestateunpack(hs_790)) in
        {333}let v_793: bitstring = catch-fail(deconcat3(message_c_791)) in
        {334}let v_794: bool = catch-fail(true) in
        {335}let v_795: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_792))) in
        {336}let v_796: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_795))) in
        {337}let v_797: aead = catch-fail(decrypt(1-proj-2-tuple(v_796),2-proj-2-tuple(v_796),3-proj-3-tuple(v_795),2-proj-3-tuple(v_793))) in
        {338}let v_798: bitstring = catch-fail(aeadunpack(v_797)) in
        {339}let v_799: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_795))) in
        {340}let v_800: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_796))) && success?(1-proj-3-tuple(v_795))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then cipherstatepack(1-proj-2-tuple(v_799),increment_nonce(2-proj-2-tuple(v_796))) else fail-any) else fail-any)) in
        {341}let v_801: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_793)) && (success?(3-proj-3-tuple(v_795)) && success?(1-proj-3-tuple(v_795)))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then (if not-caught-fail(v_797) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then (if not-caught-fail(v_800) then (v_800,3-proj-3-tuple(v_798),1-proj-3-tuple(v_798)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {342}let v_802: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_801),2-proj-3-tuple(v_795),3-proj-3-tuple(v_795)))) in
        {343}let v_803: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_793)) && success?(symmetricstatepack(1-proj-3-tuple(v_801),2-proj-3-tuple(v_795),3-proj-3-tuple(v_795)))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then symmetricstatepack(1-proj-3-tuple(v_802),2-proj-3-tuple(v_802),hash(3-proj-3-tuple(v_802),2-proj-3-tuple(v_793))) else fail-any) else fail-any)) in
        {344}let v_804: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_793)) && success?(1-proj-7-tuple(v_792))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if not-caught-fail(v_803) then (v_803,2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_805: key = catch-fail(2-proj-3-tuple(v_804)) in
        {346}let v_806: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_804))) in
        {347}let v_807: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_806))) in
        {348}let v_808: aead = catch-fail(decrypt(1-proj-2-tuple(v_807),2-proj-2-tuple(v_807),3-proj-3-tuple(v_806),3-proj-3-tuple(v_793))) in
        {349}let v_809: bitstring = catch-fail(aeadunpack(v_808)) in
        {350}let v_810: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_806))) in
        {351}let v_811: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_807))) && success?(1-proj-3-tuple(v_806))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then cipherstatepack(1-proj-2-tuple(v_810),increment_nonce(2-proj-2-tuple(v_807))) else fail-any) else fail-any)) in
        {352}let v_812: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_793)) && (success?(3-proj-3-tuple(v_806)) && success?(1-proj-3-tuple(v_806)))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then (if not-caught-fail(v_808) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (if not-caught-fail(v_811) then (v_811,3-proj-3-tuple(v_809),1-proj-3-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {353}let v_813: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_812),2-proj-3-tuple(v_806),3-proj-3-tuple(v_806)))) in
        {354}let v_814: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_793)) && success?(symmetricstatepack(1-proj-3-tuple(v_812),2-proj-3-tuple(v_806),3-proj-3-tuple(v_806)))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then symmetricstatepack(1-proj-3-tuple(v_813),2-proj-3-tuple(v_813),hash(3-proj-3-tuple(v_813),3-proj-3-tuple(v_793))) else fail-any) else fail-any)) in
        {355}let v_815: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_793)) && success?(1-proj-3-tuple(v_804))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if not-caught-fail(v_814) then (v_814,2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {356}let v_816: key = catch-fail(dhexp(key_s(alice),g)) in
        {357}let v_817: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_815),2-proj-7-tuple(v_792),3-proj-7-tuple(v_792),v_805,5-proj-7-tuple(v_792),6-proj-7-tuple(v_792),7-proj-7-tuple(v_792))) in
        {358}let (hs_818: handshakestate,plaintext_c: bitstring,valid_819: bool) = (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-7-tuple(v_792))))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if not-caught-fail(v_794) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if not-caught-fail(v_805) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if ((3-proj-3-tuple(v_804) && 3-proj-3-tuple(v_815)) && (v_805 = getpublickey((if not-caught-fail(v_816) then keypairpack(v_816,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_817) then (v_817,2-proj-3-tuple(v_815),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {359}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {360}insert statestore(bob,alice,sid,statepack_d(hs_818))
    ) | (
        {393}get statestore(=bob,=alice,=sid,statepack_d(hs_820: handshakestate)) in
        {362}let v_821: bitstring = catch-fail(handshakestateunpack(hs_820)) in
        {363}let v_822: bitstring = catch-fail((empty,empty,empty)) in
        {364}let v_823: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_821))) in
        {365}let v_824: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_821))) in
        {366}let v_825: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_824),(if (success?(4-proj-7-tuple(v_821)) && success?(3-proj-7-tuple(v_821))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then dhexp(2-proj-2-tuple(v_823),4-proj-7-tuple(v_821)) else fail-any) else fail-any))) in
        {367}let v_826: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_824),(if (success?(4-proj-7-tuple(v_821)) && success?(3-proj-7-tuple(v_821))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then dhexp(2-proj-2-tuple(v_823),4-proj-7-tuple(v_821)) else fail-any) else fail-any))) in
        {368}let v_827: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_824),(if (success?(4-proj-7-tuple(v_821)) && success?(3-proj-7-tuple(v_821))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then dhexp(2-proj-2-tuple(v_823),4-proj-7-tuple(v_821)) else fail-any) else fail-any))) in
        {369}let v_828: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_821)) && success?(3-proj-7-tuple(v_821))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then dhexp(2-proj-2-tuple(v_823),4-proj-7-tuple(v_821)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_824))) then (if not-caught-fail(v_825) then (if not-caught-fail(v_826) then (if not-caught-fail(v_827) then (v_825,v_826,v_827) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {370}let v_829: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_821)) && success?(3-proj-7-tuple(v_821))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then dhexp(2-proj-2-tuple(v_823),4-proj-7-tuple(v_821)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_821))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_828)) then cipherstatepack(2-proj-3-tuple(v_828),minnonce) else fail-any),1-proj-3-tuple(v_828),3-proj-3-tuple(v_824)) else fail-any) else fail-any) else fail-any)) in
        {371}let v_830: bitstring = catch-fail(symmetricstateunpack(v_829)) in
        {372}let v_831: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_830))) in
        {373}let v_832: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_831),2-proj-2-tuple(v_831),3-proj-3-tuple(v_830),msg_d(bob,alice,sid))) in
        {374}let v_833: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_830))) in
        {375}let v_834: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_831))) && success?(1-proj-3-tuple(v_830))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then cipherstatepack(1-proj-2-tuple(v_833),increment_nonce(2-proj-2-tuple(v_831))) else fail-any) else fail-any)) in
        {376}let v_835: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_830)) && success?(1-proj-3-tuple(v_830))) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-2-tuple(v_831))))) then (if not-caught-fail(v_832) then (if not-caught-fail(v_834) then (v_834,v_832) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_836: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_835),2-proj-3-tuple(v_830),3-proj-3-tuple(v_830)))) in
        {378}let v_837: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_835)) && success?(symmetricstatepack(1-proj-2-tuple(v_835),2-proj-3-tuple(v_830),3-proj-3-tuple(v_830)))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then symmetricstatepack(1-proj-3-tuple(v_836),2-proj-3-tuple(v_836),hash(3-proj-3-tuple(v_836),2-proj-2-tuple(v_835))) else fail-any) else fail-any)) in
        {379}let v_838: bitstring = catch-fail((if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then (if not-caught-fail(v_837) then (v_837,2-proj-2-tuple(v_835)) else fail-any) else fail-any) else fail-any)) in
        {380}let v_839: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_838),2-proj-7-tuple(v_821),3-proj-7-tuple(v_821),4-proj-7-tuple(v_821),5-proj-7-tuple(v_821),6-proj-7-tuple(v_821),7-proj-7-tuple(v_821))) in
        {381}let v_840: bitstring = catch-fail(concat3(1-proj-3-tuple(v_822),2-proj-3-tuple(v_822),2-proj-2-tuple(v_838))) in
        {382}let v_841: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_838))) in
        {383}let v_842: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_841),zero)) in
        {384}let v_843: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_841),zero)) in
        {385}let v_844: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_841),zero)) in
        {386}let v_845: bitstring = catch-fail((if success?(2-proj-3-tuple(v_841)) then (if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then (v_842,v_843,v_844) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_846: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_845)) then cipherstatepack(1-proj-3-tuple(v_845),minnonce) else fail-any)) in
        {388}let v_847: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_845)) then cipherstatepack(2-proj-3-tuple(v_845),minnonce) else fail-any)) in
        {389}let v_848: bitstring = catch-fail((if success?(1-proj-2-tuple(v_838)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if not-caught-fail(v_846) then (if not-caught-fail(v_847) then (1-proj-2-tuple(v_838),v_846,v_847) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let (hs_849: handshakestate,message_d_850: bitstring,cs1_851: cipherstate,cs2_852: cipherstate) = (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-7-tuple(v_821))))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if not-caught-fail(v_829) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-2-tuple(v_838))))) then (if not-caught-fail(v_839) then (if not-caught-fail(v_840) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (v_839,v_840,2-proj-3-tuple(v_848),3-proj-3-tuple(v_848)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {391}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {392}out(pub, message_d_850)
    ) | (
        {394}event LeakS(phase0,bob);
        {395}out(pub, key_s(bob))
    ) | (
        {396}phase 1;
        {397}event LeakS(phase1,bob);
        {398}out(pub, key_s(bob))
    )
) | (
    {399}let s_853: keypair = keypairpack(empty,empty) in
    (
        {400}let e_854: keypair = keypairpack(empty,empty) in
        {401}let rs_855: key = empty in
        {402}let re_856: key = empty in
        {403}let v_857: bitstring = catch-fail(hash(somename,empty)) in
        {404}let v_858: key = catch-fail(v_857) in
        {405}let v_859: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {406}let v_860: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then symmetricstatepack(v_859,v_858,v_857) else fail-any) else fail-any) else fail-any))) in
        {407}let v_861: symmetricstate = catch-fail((if success?((if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then symmetricstatepack(v_859,v_858,v_857) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then symmetricstatepack(1-proj-3-tuple(v_860),2-proj-3-tuple(v_860),hash(3-proj-3-tuple(v_860),empty)) else fail-any) else fail-any)) in
        {408}let hs_862: handshakestate = (if not-caught-fail(v_861) then handshakestatepack(v_861,s_853,e_854,rs_855,re_856,empty,false) else fail-any) in
        {409}insert statestore(bob,charlie,sid,statepack_a(hs_862))
    ) | (
        {431}get statestore(=bob,=charlie,=sid,statepack_a(hs_863: handshakestate)) in
        {410}in(pub, message_a_864: bitstring);
        {411}let v_865: bitstring = catch-fail(handshakestateunpack(hs_863)) in
        {412}let v_866: bitstring = catch-fail(deconcat3(message_a_864)) in
        {413}let v_867: bool = catch-fail(true) in
        {414}let v_868: key = catch-fail(1-proj-3-tuple(v_866)) in
        {415}let v_869: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_865))) in
        {416}let v_870: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_865)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_869),hash(3-proj-3-tuple(v_869),v_868)) else fail-any) else fail-any)) in
        {417}let v_871: bitstring = catch-fail(symmetricstateunpack(v_870)) in
        {418}let v_872: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_871))) in
        {419}let v_873: aead = catch-fail(decrypt(1-proj-2-tuple(v_872),2-proj-2-tuple(v_872),3-proj-3-tuple(v_871),3-proj-3-tuple(v_866))) in
        {420}let v_874: bitstring = catch-fail(aeadunpack(v_873)) in
        {421}let v_875: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_871))) in
        {422}let v_876: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_872))) && success?(1-proj-3-tuple(v_871))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-2-tuple(v_875))))) then cipherstatepack(1-proj-2-tuple(v_875),increment_nonce(2-proj-2-tuple(v_872))) else fail-any) else fail-any)) in
        {423}let v_877: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_866)) && (success?(3-proj-3-tuple(v_871)) && success?(1-proj-3-tuple(v_871)))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then (if not-caught-fail(v_873) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if not-caught-fail(v_876) then (v_876,3-proj-3-tuple(v_874),1-proj-3-tuple(v_874)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_878: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_877),2-proj-3-tuple(v_871),3-proj-3-tuple(v_871)))) in
        {425}let v_879: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_866)) && success?(symmetricstatepack(1-proj-3-tuple(v_877),2-proj-3-tuple(v_871),3-proj-3-tuple(v_871)))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then symmetricstatepack(1-proj-3-tuple(v_878),2-proj-3-tuple(v_878),hash(3-proj-3-tuple(v_878),3-proj-3-tuple(v_866))) else fail-any) else fail-any)) in
        {426}let v_880: bitstring = catch-fail((if success?(3-proj-3-tuple(v_866)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if not-caught-fail(v_879) then (v_879,2-proj-3-tuple(v_877),3-proj-3-tuple(v_877)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let v_881: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_880),2-proj-7-tuple(v_865),3-proj-7-tuple(v_865),4-proj-7-tuple(v_865),v_868,6-proj-7-tuple(v_865),7-proj-7-tuple(v_865))) in
        {428}let (hs_882: handshakestate,plaintext_a_883: bitstring,valid_884: bool) = (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-7-tuple(v_865))))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then (if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (if not-caught-fail(v_870) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if (v_867 && 3-proj-3-tuple(v_880)) then (if not-caught-fail(v_881) then (v_881,2-proj-3-tuple(v_880),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {429}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_883);
        {430}insert statestore(bob,charlie,sid,statepack_b(hs_882))
    ) | (
        {461}get statestore(=bob,=charlie,=sid,statepack_b(hs_885: handshakestate)) in
        {432}let v_886: bitstring = catch-fail(handshakestateunpack(hs_885)) in
        {433}let v_887: bitstring = catch-fail((empty,empty,empty)) in
        {434}let v_888: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {435}let v_889: keypair = catch-fail((if not-caught-fail(v_888) then keypairpack(v_888,key_e(bob,charlie,sid)) else fail-any)) in
        {436}let v_890: bitstring = catch-fail(getpublickey(v_889)) in
        {437}let v_891: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_886))) in
        {438}let v_892: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_886)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then symmetricstatepack(1-proj-3-tuple(v_891),2-proj-3-tuple(v_891),hash(3-proj-3-tuple(v_891),v_890)) else fail-any) else fail-any)) in
        {439}let v_893: bitstring = catch-fail(keypairunpack(v_889)) in
        {440}let v_894: bitstring = catch-fail(symmetricstateunpack(v_892)) in
        {441}let v_895: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_894),(if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),5-proj-7-tuple(v_886)) else fail-any) else fail-any))) in
        {442}let v_896: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_894),(if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),5-proj-7-tuple(v_886)) else fail-any) else fail-any))) in
        {443}let v_897: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_894),(if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),5-proj-7-tuple(v_886)) else fail-any) else fail-any))) in
        {444}let v_898: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),5-proj-7-tuple(v_886)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_894))) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (v_895,v_896,v_897) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_899: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_886)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then dhexp(2-proj-2-tuple(v_893),5-proj-7-tuple(v_886)) else fail-any) else fail-any)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_898)) then cipherstatepack(2-proj-3-tuple(v_898),minnonce) else fail-any),1-proj-3-tuple(v_898),3-proj-3-tuple(v_894)) else fail-any) else fail-any) else fail-any)) in
        {446}let v_900: bitstring = catch-fail(symmetricstateunpack(v_899)) in
        {447}let v_901: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {448}let v_902: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_901),2-proj-2-tuple(v_901),3-proj-3-tuple(v_900),msg_b(bob,charlie,sid))) in
        {449}let v_903: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {450}let v_904: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_901))) && success?(1-proj-3-tuple(v_900))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then cipherstatepack(1-proj-2-tuple(v_903),increment_nonce(2-proj-2-tuple(v_901))) else fail-any) else fail-any)) in
        {451}let v_905: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_900)) && success?(1-proj-3-tuple(v_900))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then (if not-caught-fail(v_902) then (if not-caught-fail(v_904) then (v_904,v_902) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {452}let v_906: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_905),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) in
        {453}let v_907: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_905)) && success?(symmetricstatepack(1-proj-2-tuple(v_905),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_906),hash(3-proj-3-tuple(v_906),2-proj-2-tuple(v_905))) else fail-any) else fail-any)) in
        {454}let v_908: bitstring = catch-fail((if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-2-tuple(v_905))))) then (if not-caught-fail(v_907) then (v_907,2-proj-2-tuple(v_905)) else fail-any) else fail-any) else fail-any)) in
        {455}let v_909: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_908),2-proj-7-tuple(v_886),v_889,4-proj-7-tuple(v_886),5-proj-7-tuple(v_886),6-proj-7-tuple(v_886),7-proj-7-tuple(v_886))) in
        {456}let v_910: bitstring = catch-fail(concat3(v_890,2-proj-3-tuple(v_887),2-proj-2-tuple(v_908))) in
        {457}let (hs_911: handshakestate,message_b_912: bitstring) = (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-7-tuple(v_886))))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if not-caught-fail(v_889) then (if not-caught-fail(v_890) then (if not-caught-fail(v_892) then (if not-caught-fail(v_899) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-2-tuple(v_908))))) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (v_909,v_910) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {458}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {459}insert statestore(bob,charlie,sid,statepack_c(hs_911));
        {460}out(pub, message_b_912)
    ) | (
        {492}get statestore(=bob,=charlie,=sid,statepack_c(hs_913: handshakestate)) in
        {462}in(pub, message_c_914: bitstring);
        {463}let v_915: bitstring = catch-fail(handshakestateunpack(hs_913)) in
        {464}let v_916: bitstring = catch-fail(deconcat3(message_c_914)) in
        {465}let v_917: bool = catch-fail(true) in
        {466}let v_918: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_915))) in
        {467}let v_919: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_918))) in
        {468}let v_920: aead = catch-fail(decrypt(1-proj-2-tuple(v_919),2-proj-2-tuple(v_919),3-proj-3-tuple(v_918),2-proj-3-tuple(v_916))) in
        {469}let v_921: bitstring = catch-fail(aeadunpack(v_920)) in
        {470}let v_922: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_918))) in
        {471}let v_923: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_919))) && success?(1-proj-3-tuple(v_918))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then cipherstatepack(1-proj-2-tuple(v_922),increment_nonce(2-proj-2-tuple(v_919))) else fail-any) else fail-any)) in
        {472}let v_924: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_916)) && (success?(3-proj-3-tuple(v_918)) && success?(1-proj-3-tuple(v_918)))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-2-tuple(v_919))))) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if not-caught-fail(v_923) then (v_923,3-proj-3-tuple(v_921),1-proj-3-tuple(v_921)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {473}let v_925: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_924),2-proj-3-tuple(v_918),3-proj-3-tuple(v_918)))) in
        {474}let v_926: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_916)) && success?(symmetricstatepack(1-proj-3-tuple(v_924),2-proj-3-tuple(v_918),3-proj-3-tuple(v_918)))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then symmetricstatepack(1-proj-3-tuple(v_925),2-proj-3-tuple(v_925),hash(3-proj-3-tuple(v_925),2-proj-3-tuple(v_916))) else fail-any) else fail-any)) in
        {475}let v_927: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_916)) && success?(1-proj-7-tuple(v_915))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if not-caught-fail(v_926) then (v_926,2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_928: key = catch-fail(2-proj-3-tuple(v_927)) in
        {477}let v_929: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_927))) in
        {478}let v_930: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {479}let v_931: aead = catch-fail(decrypt(1-proj-2-tuple(v_930),2-proj-2-tuple(v_930),3-proj-3-tuple(v_929),3-proj-3-tuple(v_916))) in
        {480}let v_932: bitstring = catch-fail(aeadunpack(v_931)) in
        {481}let v_933: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {482}let v_934: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_930))) && success?(1-proj-3-tuple(v_929))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-2-tuple(v_933))))) then cipherstatepack(1-proj-2-tuple(v_933),increment_nonce(2-proj-2-tuple(v_930))) else fail-any) else fail-any)) in
        {483}let v_935: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_916)) && (success?(3-proj-3-tuple(v_929)) && success?(1-proj-3-tuple(v_929)))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then (if not-caught-fail(v_931) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if not-caught-fail(v_934) then (v_934,3-proj-3-tuple(v_932),1-proj-3-tuple(v_932)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {484}let v_936: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) in
        {485}let v_937: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_916)) && success?(symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_936),hash(3-proj-3-tuple(v_936),3-proj-3-tuple(v_916))) else fail-any) else fail-any)) in
        {486}let v_938: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_916)) && success?(1-proj-3-tuple(v_927))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if not-caught-fail(v_937) then (v_937,2-proj-3-tuple(v_935),3-proj-3-tuple(v_935)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {487}let v_939: key = catch-fail(dhexp(key_s(charlie),g)) in
        {488}let v_940: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_938),2-proj-7-tuple(v_915),3-proj-7-tuple(v_915),v_928,5-proj-7-tuple(v_915),6-proj-7-tuple(v_915),7-proj-7-tuple(v_915))) in
        {489}let (hs_941: handshakestate,plaintext_c_942: bitstring,valid_943: bool) = (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-7-tuple(v_915))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_917) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if not-caught-fail(v_928) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if ((3-proj-3-tuple(v_927) && 3-proj-3-tuple(v_938)) && (v_928 = getpublickey((if not-caught-fail(v_939) then keypairpack(v_939,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_940) then (v_940,2-proj-3-tuple(v_938),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {490}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_942);
        {491}insert statestore(bob,charlie,sid,statepack_d(hs_941))
    ) | (
        {524}get statestore(=bob,=charlie,=sid,statepack_d(hs_944: handshakestate)) in
        {493}let v_945: bitstring = catch-fail(handshakestateunpack(hs_944)) in
        {494}let v_946: bitstring = catch-fail((empty,empty,empty)) in
        {495}let v_947: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_945))) in
        {496}let v_948: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_945))) in
        {497}let v_949: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_948),(if (success?(4-proj-7-tuple(v_945)) && success?(3-proj-7-tuple(v_945))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_945)) else fail-any) else fail-any))) in
        {498}let v_950: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_948),(if (success?(4-proj-7-tuple(v_945)) && success?(3-proj-7-tuple(v_945))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_945)) else fail-any) else fail-any))) in
        {499}let v_951: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_948),(if (success?(4-proj-7-tuple(v_945)) && success?(3-proj-7-tuple(v_945))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_945)) else fail-any) else fail-any))) in
        {500}let v_952: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_945)) && success?(3-proj-7-tuple(v_945))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_945)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_948))) then (if not-caught-fail(v_949) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then (v_949,v_950,v_951) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_953: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_945)) && success?(3-proj-7-tuple(v_945))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then dhexp(2-proj-2-tuple(v_947),4-proj-7-tuple(v_945)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_945))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_952)) then cipherstatepack(2-proj-3-tuple(v_952),minnonce) else fail-any),1-proj-3-tuple(v_952),3-proj-3-tuple(v_948)) else fail-any) else fail-any) else fail-any)) in
        {502}let v_954: bitstring = catch-fail(symmetricstateunpack(v_953)) in
        {503}let v_955: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_954))) in
        {504}let v_956: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_955),2-proj-2-tuple(v_955),3-proj-3-tuple(v_954),msg_d(bob,charlie,sid))) in
        {505}let v_957: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_954))) in
        {506}let v_958: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_955))) && success?(1-proj-3-tuple(v_954))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then cipherstatepack(1-proj-2-tuple(v_957),increment_nonce(2-proj-2-tuple(v_955))) else fail-any) else fail-any)) in
        {507}let v_959: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_954)) && success?(1-proj-3-tuple(v_954))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then (if not-caught-fail(v_956) then (if not-caught-fail(v_958) then (v_958,v_956) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {508}let v_960: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_959),2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)))) in
        {509}let v_961: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_959)) && success?(symmetricstatepack(1-proj-2-tuple(v_959),2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then symmetricstatepack(1-proj-3-tuple(v_960),2-proj-3-tuple(v_960),hash(3-proj-3-tuple(v_960),2-proj-2-tuple(v_959))) else fail-any) else fail-any)) in
        {510}let v_962: bitstring = catch-fail((if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then (if not-caught-fail(v_961) then (v_961,2-proj-2-tuple(v_959)) else fail-any) else fail-any) else fail-any)) in
        {511}let v_963: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_962),2-proj-7-tuple(v_945),3-proj-7-tuple(v_945),4-proj-7-tuple(v_945),5-proj-7-tuple(v_945),6-proj-7-tuple(v_945),7-proj-7-tuple(v_945))) in
        {512}let v_964: bitstring = catch-fail(concat3(1-proj-3-tuple(v_946),2-proj-3-tuple(v_946),2-proj-2-tuple(v_962))) in
        {513}let v_965: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_962))) in
        {514}let v_966: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_965),zero)) in
        {515}let v_967: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_965),zero)) in
        {516}let v_968: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_965),zero)) in
        {517}let v_969: bitstring = catch-fail((if success?(2-proj-3-tuple(v_965)) then (if not-caught-fail(v_966) then (if not-caught-fail(v_967) then (if not-caught-fail(v_968) then (v_966,v_967,v_968) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {518}let v_970: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_969)) then cipherstatepack(1-proj-3-tuple(v_969),minnonce) else fail-any)) in
        {519}let v_971: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_969)) then cipherstatepack(2-proj-3-tuple(v_969),minnonce) else fail-any)) in
        {520}let v_972: bitstring = catch-fail((if success?(1-proj-2-tuple(v_962)) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (if not-caught-fail(v_970) then (if not-caught-fail(v_971) then (1-proj-2-tuple(v_962),v_970,v_971) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {521}let (hs_973: handshakestate,message_d_974: bitstring,cs1_975: cipherstate,cs2_976: cipherstate) = (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-7-tuple(v_945))))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then (if not-caught-fail(v_953) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-2-tuple(v_962))))) then (if not-caught-fail(v_963) then (if not-caught-fail(v_964) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (v_963,v_964,2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {522}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {523}out(pub, message_d_974)
    ) | (
        {525}event LeakS(phase0,bob);
        {526}out(pub, key_s(bob))
    ) | (
        {527}phase 1;
        {528}event LeakS(phase1,bob);
        {529}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 74 rules in the queue.
400 rules inserted. The rule base contains 381 rules. 56 rules in the queue.
600 rules inserted. The rule base contains 553 rules. 116 rules in the queue.
800 rules inserted. The rule base contains 708 rules. 101 rules in the queue.
1000 rules inserted. The rule base contains 832 rules. 146 rules in the queue.
1200 rules inserted. The rule base contains 988 rules. 185 rules in the queue.
1400 rules inserted. The rule base contains 1103 rules. 202 rules in the queue.
1600 rules inserted. The rule base contains 1179 rules. 202 rules in the queue.
1800 rules inserted. The rule base contains 1261 rules. 180 rules in the queue.
2000 rules inserted. The rule base contains 1369 rules. 166 rules in the queue.
2200 rules inserted. The rule base contains 1504 rules. 183 rules in the queue.
2400 rules inserted. The rule base contains 1615 rules. 156 rules in the queue.
2600 rules inserted. The rule base contains 1711 rules. 134 rules in the queue.
2800 rules inserted. The rule base contains 1836 rules. 98 rules in the queue.
3000 rules inserted. The rule base contains 1932 rules. 109 rules in the queue.
3200 rules inserted. The rule base contains 2069 rules. 106 rules in the queue.
3400 rules inserted. The rule base contains 2217 rules. 76 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35314217]),msg_a(alice,charlie,sid[!1 = @sid_35314217]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_35314218]),msg_a(alice,charlie,sid[!1 = @sid_35314217])))
Abbreviations:
sid_35314253 = sid[!1 = @sid_35314243]
sid_35314254 = sid[!1 = @sid_35314225]

1. The entry statestore(bob,alice,sid_35314253,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,sid_35314253,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_35314254,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {147}.
table(statestore(alice,charlie,sid_35314254,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_35314254,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {170}.
The event SendMsg(alice,charlie,stagepack_a(sid_35314254),msg_a(alice,charlie,sid_35314254)) may be executed at {167}.
So the message concat3(dhexp(key_e(alice,charlie,sid_35314254),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35314254),g)),msg_a(alice,charlie,sid_35314254))) may be sent on channel pub at output {169}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_35314254),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35314254),g)),msg_a(alice,charlie,sid_35314254)))).

4. The entry statestore(bob,alice,sid_35314253,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie,sid_35314254),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35314254),g)),msg_a(alice,charlie,sid_35314254))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie,sid_35314254),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_35314253),msg_a(alice,charlie,sid_35314254)) may be executed at {298}.
end(RecvMsg(bob,alice,stagepack_a(sid_35314253),msg_a(alice,charlie,sid_35314254))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314257]),msg_a(alice,bob,sid[!1 = @sid_35314257]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_35314258]),msg_a(alice,bob,sid[!1 = @sid_35314257])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35314261]),msg_a(alice,charlie,sid[!1 = @sid_35314261]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_35314262]),msg_a(alice,charlie,sid[!1 = @sid_35314261])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314271]),msg_a(alice,bob,sid[!1 = @sid_35314271]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_35314272]),msg_a(alice,bob,sid[!1 = @sid_35314271])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35314275]),msg_a(alice,charlie,sid[!1 = @sid_35314275]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_35314276]),msg_a(alice,charlie,sid[!1 = @sid_35314275])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35314289]),msg_a(alice,charlie,sid[!1 = @sid_35314289]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_35314290]),msg_a(alice,charlie,sid[!1 = @sid_35314289])))
Abbreviations:
sid_35314325 = sid[!1 = @sid_35314315]
sid_35314326 = sid[!1 = @sid_35314297]

1. The entry statestore(bob,alice,sid_35314325,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,sid_35314325,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_35314326,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {147}.
table(statestore(alice,charlie,sid_35314326,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_35314326,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {170}.
The event SendMsg(alice,charlie,stagepack_a(sid_35314326),msg_a(alice,charlie,sid_35314326)) may be executed at {167}.
So the message concat3(dhexp(key_e(alice,charlie,sid_35314326),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35314326),g)),msg_a(alice,charlie,sid_35314326))) may be sent on channel pub at output {169}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_35314326),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35314326),g)),msg_a(alice,charlie,sid_35314326)))).

4. The entry statestore(bob,alice,sid_35314325,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie,sid_35314326),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35314326),g)),msg_a(alice,charlie,sid_35314326))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie,sid_35314326),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_35314325),msg_a(alice,charlie,sid_35314326)) may be executed at {298}.
end(RecvMsg(bob,alice,stagepack_a(sid_35314325),msg_a(alice,charlie,sid_35314326))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35314333]),msg_a(alice,charlie,sid[!1 = @sid_35314333]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_35314334]),msg_a(alice,charlie,sid[!1 = @sid_35314333])))
Abbreviations:
sid_35314369 = sid[!1 = @sid_35314359]
sid_35314370 = sid[!1 = @sid_35314341]

1. The entry statestore(bob,alice,sid_35314369,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,sid_35314369,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_35314370,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {147}.
table(statestore(alice,charlie,sid_35314370,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_35314370,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {170}.
The event SendMsg(alice,charlie,stagepack_a(sid_35314370),msg_a(alice,charlie,sid_35314370)) may be executed at {167}.
So the message concat3(dhexp(key_e(alice,charlie,sid_35314370),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35314370),g)),msg_a(alice,charlie,sid_35314370))) may be sent on channel pub at output {169}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_35314370),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35314370),g)),msg_a(alice,charlie,sid_35314370)))).

4. The entry statestore(bob,alice,sid_35314369,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie,sid_35314370),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35314370),g)),msg_a(alice,charlie,sid_35314370))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie,sid_35314370),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_35314369),msg_a(alice,charlie,sid_35314370)) may be executed at {298}.
end(RecvMsg(bob,alice,stagepack_a(sid_35314369),msg_a(alice,charlie,sid_35314370))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314373]),msg_a(alice,bob,sid[!1 = @sid_35314373]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_35314373]))
Abbreviations:
sid_35314425 = sid[!1 = @sid_35314400]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_35314425,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_35314425,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_35314425,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314425),msg_a(alice,bob,sid_35314425)) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob,sid_35314425),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_35314425),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_35314425),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_35314425),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_35314425),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_35314425),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_35314425),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_35314425),g).
attacker(dhexp(key_e(alice,bob,sid_35314425),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_35314425),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314425),g)),msg_a(alice,bob,sid_35314425)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_35314425).
attacker(msg_a(alice,bob,sid_35314425)).

15. By 14, the attacker may know msg_a(alice,bob,sid_35314425).
So the attacker may know msg_a(alice,bob,sid_35314425) in phase 1.
attacker_p1(msg_a(alice,bob,sid_35314425)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314428]),msg_a(alice,bob,sid[!1 = @sid_35314428]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_35314428]))
Abbreviations:
sid_35314480 = sid[!1 = @sid_35314455]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_35314480,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_35314480,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_35314480,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314480),msg_a(alice,bob,sid_35314480)) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob,sid_35314480),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_35314480),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_35314480),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_35314480),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_35314480),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_35314480),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_35314480),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_35314480),g).
attacker(dhexp(key_e(alice,bob,sid_35314480),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_35314480),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314480),g)),msg_a(alice,bob,sid_35314480)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_35314480).
attacker(msg_a(alice,bob,sid_35314480)).

15. By 14, the attacker may know msg_a(alice,bob,sid_35314480).
So the attacker may know msg_a(alice,bob,sid_35314480) in phase 1.
attacker_p1(msg_a(alice,bob,sid_35314480)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314483]),msg_a(alice,bob,sid[!1 = @sid_35314483]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_35314483]))
Abbreviations:
sid_35314536 = sid[!1 = @sid_35314511]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_35314536,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_35314536,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_35314536,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314536),msg_a(alice,bob,sid_35314536)) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob,sid_35314536),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_35314536),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_35314536),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_35314536),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_35314536),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_35314536),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_35314536),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_35314536),g).
attacker(dhexp(key_e(alice,bob,sid_35314536),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_35314536),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314536),g)),msg_a(alice,bob,sid_35314536)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_35314536).
attacker(msg_a(alice,bob,sid_35314536)).

15. By 14, the attacker may know msg_a(alice,bob,sid_35314536).
So the attacker may know msg_a(alice,bob,sid_35314536) in phase 1.
attacker_p1(msg_a(alice,bob,sid_35314536)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314539]),msg_a(alice,bob,sid[!1 = @sid_35314539]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_35314539]))
Abbreviations:
sid_35314591 = sid[!1 = @sid_35314566]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_35314591,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_35314591,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_35314591,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314591),msg_a(alice,bob,sid_35314591)) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob,sid_35314591),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_35314591),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_35314591),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_35314591),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_35314591),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_35314591),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_35314591),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_35314591),g).
attacker(dhexp(key_e(alice,bob,sid_35314591),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob,sid_35314591),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314591),g)),msg_a(alice,bob,sid_35314591)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_35314591).
attacker(msg_a(alice,bob,sid_35314591)).

15. By 14, the attacker may know msg_a(alice,bob,sid_35314591).
So the attacker may know msg_a(alice,bob,sid_35314591) in phase 1.
attacker_p1(msg_a(alice,bob,sid_35314591)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_35314594]),msg_b(bob,charlie,sid[!1 = @sid_35314594]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314595]),msg_a(alice,bob,sid[!1 = @sid_35314595]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_35314595]),msg_b(bob,charlie,sid[!1 = @sid_35314594])))
Abbreviations:
sid_35314670 = sid[!1 = @sid_35314660]
sid_35314671 = sid[!1 = @sid_35314632]

1. The entry statestore(alice,bob,sid_35314670,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_35314670,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,sid_35314670,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314670),msg_a(alice,bob,sid_35314670)) may be executed at {35}.
So the entry statestore(alice,bob,sid_35314670,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35314670),g),key_e(alice,bob,sid_35314670)),empty,empty,empty,true))) may be inserted in a table at insert {36}.
table(statestore(alice,bob,sid_35314670,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35314670),g),key_e(alice,bob,sid_35314670)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_35314671,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {409}.
table(statestore(bob,charlie,sid_35314671,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_35314670,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314670),msg_a(alice,bob,sid_35314670)) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob,sid_35314670),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_35314670),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670)))).

5. The entry statestore(bob,charlie,sid_35314671,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {431}.
The message concat3(dhexp(key_e(alice,bob,sid_35314670),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670))) that may be sent on channel pub by 4 may be received at input {410}.
We have dhexp(key_e(alice,bob,sid_35314670),g) <> caught-fail.
So the entry statestore(bob,charlie,sid_35314671,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35314670),g),empty,false))) may be inserted in a table at insert {430}.
table(statestore(bob,charlie,sid_35314671,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35314670),g),empty,false)))).

6. The entry statestore(bob,charlie,sid_35314671,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35314670),g),empty,false))) that may be in a table by 5 may be read at get {461}.
The event SendMsg(bob,charlie,stagepack_b(sid_35314671),msg_b(bob,charlie,sid_35314671)) may be executed at {458}.
So the message concat3(dhexp(key_e(bob,charlie,sid_35314671),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35314670),dhexp(key_e(bob,charlie,sid_35314671),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670))),dhexp(key_e(bob,charlie,sid_35314671),g)),msg_b(bob,charlie,sid_35314671))) may be sent on channel pub at output {460}.
mess(pub,concat3(dhexp(key_e(bob,charlie,sid_35314671),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35314670),dhexp(key_e(bob,charlie,sid_35314671),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670))),dhexp(key_e(bob,charlie,sid_35314671),g)),msg_b(bob,charlie,sid_35314671)))).

7. The entry statestore(alice,bob,sid_35314670,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35314670),g),key_e(alice,bob,sid_35314670)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {67}.
The message concat3(dhexp(key_e(bob,charlie,sid_35314671),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35314670),dhexp(key_e(bob,charlie,sid_35314671),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314670),g)),msg_a(alice,bob,sid_35314670))),dhexp(key_e(bob,charlie,sid_35314671),g)),msg_b(bob,charlie,sid_35314671))) that may be sent on channel pub by 6 may be received at input {39}.
We have dhexp(key_e(bob,charlie,sid_35314671),g) <> caught-fail.
So event RecvMsg(alice,bob,stagepack_b(sid_35314670),msg_b(bob,charlie,sid_35314671)) may be executed at {65}.
end(RecvMsg(alice,bob,stagepack_b(sid_35314670),msg_b(bob,charlie,sid_35314671))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_35314674]),msg_b(bob,charlie,sid[!1 = @sid_35314674]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314675]),msg_a(alice,bob,sid[!1 = @sid_35314675]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_35314675]),msg_b(bob,charlie,sid[!1 = @sid_35314674])))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35314678]),msg_b(bob,alice,sid[!1 = @sid_35314678]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314679]),msg_a(alice,bob,sid[!1 = @sid_35314679]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_35314679]),msg_b(bob,alice,sid[!1 = @sid_35314678])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_35314688]),msg_b(bob,charlie,sid[!1 = @sid_35314688]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314689]),msg_a(alice,bob,sid[!1 = @sid_35314689]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_35314689]),msg_b(bob,charlie,sid[!1 = @sid_35314688])))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35314692]),msg_b(bob,alice,sid[!1 = @sid_35314692]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314693]),msg_a(alice,bob,sid[!1 = @sid_35314693]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_35314693]),msg_b(bob,alice,sid[!1 = @sid_35314692])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_35314702]),msg_b(bob,charlie,sid[!1 = @sid_35314702]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314703]),msg_a(alice,bob,sid[!1 = @sid_35314703]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_35314703]),msg_b(bob,charlie,sid[!1 = @sid_35314702])))
Abbreviations:
sid_35314778 = sid[!1 = @sid_35314768]
sid_35314779 = sid[!1 = @sid_35314740]

1. The entry statestore(alice,bob,sid_35314778,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_35314778,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,sid_35314778,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314778),msg_a(alice,bob,sid_35314778)) may be executed at {35}.
So the entry statestore(alice,bob,sid_35314778,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35314778),g),key_e(alice,bob,sid_35314778)),empty,empty,empty,true))) may be inserted in a table at insert {36}.
table(statestore(alice,bob,sid_35314778,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35314778),g),key_e(alice,bob,sid_35314778)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_35314779,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {409}.
table(statestore(bob,charlie,sid_35314779,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_35314778,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314778),msg_a(alice,bob,sid_35314778)) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob,sid_35314778),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_35314778),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778)))).

5. The entry statestore(bob,charlie,sid_35314779,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {431}.
The message concat3(dhexp(key_e(alice,bob,sid_35314778),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778))) that may be sent on channel pub by 4 may be received at input {410}.
We have dhexp(key_e(alice,bob,sid_35314778),g) <> caught-fail.
So the entry statestore(bob,charlie,sid_35314779,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35314778),g),empty,false))) may be inserted in a table at insert {430}.
table(statestore(bob,charlie,sid_35314779,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35314778),g),empty,false)))).

6. The entry statestore(bob,charlie,sid_35314779,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35314778),g),empty,false))) that may be in a table by 5 may be read at get {461}.
The event SendMsg(bob,charlie,stagepack_b(sid_35314779),msg_b(bob,charlie,sid_35314779)) may be executed at {458}.
So the message concat3(dhexp(key_e(bob,charlie,sid_35314779),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35314778),dhexp(key_e(bob,charlie,sid_35314779),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778))),dhexp(key_e(bob,charlie,sid_35314779),g)),msg_b(bob,charlie,sid_35314779))) may be sent on channel pub at output {460}.
mess(pub,concat3(dhexp(key_e(bob,charlie,sid_35314779),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35314778),dhexp(key_e(bob,charlie,sid_35314779),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778))),dhexp(key_e(bob,charlie,sid_35314779),g)),msg_b(bob,charlie,sid_35314779)))).

7. The entry statestore(alice,bob,sid_35314778,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35314778),g),key_e(alice,bob,sid_35314778)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {67}.
The message concat3(dhexp(key_e(bob,charlie,sid_35314779),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35314778),dhexp(key_e(bob,charlie,sid_35314779),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314778),g)),msg_a(alice,bob,sid_35314778))),dhexp(key_e(bob,charlie,sid_35314779),g)),msg_b(bob,charlie,sid_35314779))) that may be sent on channel pub by 6 may be received at input {39}.
We have dhexp(key_e(bob,charlie,sid_35314779),g) <> caught-fail.
So event RecvMsg(alice,bob,stagepack_b(sid_35314778),msg_b(bob,charlie,sid_35314779)) may be executed at {65}.
end(RecvMsg(alice,bob,stagepack_b(sid_35314778),msg_b(bob,charlie,sid_35314779))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stagepack_b(sid[!1 = @sid_35314782]),msg_b(bob,charlie,sid[!1 = @sid_35314782]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35314783]),msg_a(alice,bob,sid[!1 = @sid_35314783]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_35314783]),msg_b(bob,charlie,sid[!1 = @sid_35314782])))
Abbreviations:
sid_35314858 = sid[!1 = @sid_35314848]
sid_35314859 = sid[!1 = @sid_35314820]

1. The entry statestore(alice,bob,sid_35314858,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_35314858,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,sid_35314858,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314858),msg_a(alice,bob,sid_35314858)) may be executed at {35}.
So the entry statestore(alice,bob,sid_35314858,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35314858),g),key_e(alice,bob,sid_35314858)),empty,empty,empty,true))) may be inserted in a table at insert {36}.
table(statestore(alice,bob,sid_35314858,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35314858),g),key_e(alice,bob,sid_35314858)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,sid_35314859,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {409}.
table(statestore(bob,charlie,sid_35314859,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_35314858,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35314858),msg_a(alice,bob,sid_35314858)) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob,sid_35314858),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_35314858),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858)))).

5. The entry statestore(bob,charlie,sid_35314859,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {431}.
The message concat3(dhexp(key_e(alice,bob,sid_35314858),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858))) that may be sent on channel pub by 4 may be received at input {410}.
We have dhexp(key_e(alice,bob,sid_35314858),g) <> caught-fail.
So the entry statestore(bob,charlie,sid_35314859,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35314858),g),empty,false))) may be inserted in a table at insert {430}.
table(statestore(bob,charlie,sid_35314859,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35314858),g),empty,false)))).

6. The entry statestore(bob,charlie,sid_35314859,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35314858),g),empty,false))) that may be in a table by 5 may be read at get {461}.
The event SendMsg(bob,charlie,stagepack_b(sid_35314859),msg_b(bob,charlie,sid_35314859)) may be executed at {458}.
So the message concat3(dhexp(key_e(bob,charlie,sid_35314859),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35314858),dhexp(key_e(bob,charlie,sid_35314859),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858))),dhexp(key_e(bob,charlie,sid_35314859),g)),msg_b(bob,charlie,sid_35314859))) may be sent on channel pub at output {460}.
mess(pub,concat3(dhexp(key_e(bob,charlie,sid_35314859),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35314858),dhexp(key_e(bob,charlie,sid_35314859),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858))),dhexp(key_e(bob,charlie,sid_35314859),g)),msg_b(bob,charlie,sid_35314859)))).

7. The entry statestore(alice,bob,sid_35314858,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35314858),g),key_e(alice,bob,sid_35314858)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {67}.
The message concat3(dhexp(key_e(bob,charlie,sid_35314859),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35314858),dhexp(key_e(bob,charlie,sid_35314859),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35314858),g)),msg_a(alice,bob,sid_35314858))),dhexp(key_e(bob,charlie,sid_35314859),g)),msg_b(bob,charlie,sid_35314859))) that may be sent on channel pub by 6 may be received at input {39}.
We have dhexp(key_e(bob,charlie,sid_35314859),g) <> caught-fail.
So event RecvMsg(alice,bob,stagepack_b(sid_35314858),msg_b(bob,charlie,sid_35314859)) may be executed at {65}.
end(RecvMsg(alice,bob,stagepack_b(sid_35314858),msg_b(bob,charlie,sid_35314859))).


RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_35314879]),msg_c(alice,charlie,sid[!1 = @sid_35314879]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35314880]),msg_b(bob,alice,sid[!1 = @sid_35314880]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35314879]),msg_a(alice,charlie,sid[!1 = @sid_35314879]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_35314880]),msg_c(alice,charlie,sid[!1 = @sid_35314879])))
Abbreviations:
sid_35315012 = sid[!1 = @sid_35314950]
sid_35315013 = sid[!1 = @sid_35314986]

1. The entry statestore(bob,alice,sid_35315012,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,sid_35315012,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_35315013,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {147}.
table(statestore(alice,charlie,sid_35315013,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_35315013,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {170}.
The event SendMsg(alice,charlie,stagepack_a(sid_35315013),msg_a(alice,charlie,sid_35315013)) may be executed at {167}.
So the message concat3(dhexp(key_e(alice,charlie,sid_35315013),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))) may be sent on channel pub at output {169}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_35315013),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013)))).

4. The entry statestore(bob,alice,sid_35315012,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie,sid_35315013),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie,sid_35315013),g) <> caught-fail.
So the entry statestore(bob,alice,sid_35315012,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315013),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,sid_35315012,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315013),g),empty,false)))).

5. The entry statestore(bob,alice,sid_35315012,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315013),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stagepack_b(sid_35315012),msg_b(bob,alice,sid_35315012)) may be executed at {327}.
So the entry statestore(bob,alice,sid_35315012,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315012),dhexp(key_e(alice,charlie,sid_35315013),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315012),g),key_e(bob,alice,sid_35315012)),empty,dhexp(key_e(alice,charlie,sid_35315013),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,sid_35315012,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315012),dhexp(key_e(alice,charlie,sid_35315013),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315012),g),key_e(bob,alice,sid_35315012)),empty,dhexp(key_e(alice,charlie,sid_35315013),g),empty,false)))).

6. The entry statestore(alice,charlie,sid_35315013,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {170}.
The event SendMsg(alice,charlie,stagepack_a(sid_35315013),msg_a(alice,charlie,sid_35315013)) may be executed at {167}.
So the entry statestore(alice,charlie,sid_35315013,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315013),g),key_e(alice,charlie,sid_35315013)),empty,empty,empty,true))) may be inserted in a table at insert {168}.
table(statestore(alice,charlie,sid_35315013,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315013),g),key_e(alice,charlie,sid_35315013)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_35315012,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315013),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stagepack_b(sid_35315012),msg_b(bob,alice,sid_35315012)) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice,sid_35315012),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_35315012),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012)))).

8. The entry statestore(alice,charlie,sid_35315013,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315013),g),key_e(alice,charlie,sid_35315013)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {199}.
The message concat3(dhexp(key_e(bob,alice,sid_35315012),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))) that may be sent on channel pub by 7 may be received at input {171}.
We have dhexp(key_e(bob,alice,sid_35315012),g) <> caught-fail.
So the entry statestore(alice,charlie,sid_35315013,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315013),g),key_e(alice,charlie,sid_35315013)),empty,dhexp(key_e(bob,alice,sid_35315012),g),empty,true))) may be inserted in a table at insert {198}.
table(statestore(alice,charlie,sid_35315013,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315013),g),key_e(alice,charlie,sid_35315013)),empty,dhexp(key_e(bob,alice,sid_35315012),g),empty,true)))).

9. The entry statestore(alice,charlie,sid_35315013,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315013),g),key_e(alice,charlie,sid_35315013)),empty,dhexp(key_e(bob,alice,sid_35315012),g),empty,true))) that may be in a table by 8 may be read at get {228}.
The event SendMsg(alice,charlie,stagepack_c(sid_35315013),msg_c(alice,charlie,sid_35315013)) may be executed at {225}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))),dhexp(key_s(alice),g))),msg_c(alice,charlie,sid_35315013))) may be sent on channel pub at output {227}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))),dhexp(key_s(alice),g))),msg_c(alice,charlie,sid_35315013)))).

10. The entry statestore(bob,alice,sid_35315012,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315012),dhexp(key_e(alice,charlie,sid_35315013),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315012),g),key_e(bob,alice,sid_35315012)),empty,dhexp(key_e(alice,charlie,sid_35315013),g),empty,false))) that may be in a table by 5 may be read at get {361}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315013),dhexp(key_e(bob,alice,sid_35315012),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315013),g)),msg_a(alice,charlie,sid_35315013))),dhexp(key_e(bob,alice,sid_35315012),g)),msg_b(bob,alice,sid_35315012))),dhexp(key_s(alice),g))),msg_c(alice,charlie,sid_35315013))) that may be sent on channel pub by 9 may be received at input {331}.
So event RecvMsg(bob,alice,stagepack_c(sid_35315012),msg_c(alice,charlie,sid_35315013)) may be executed at {359}.
end(RecvMsg(bob,alice,stagepack_c(sid_35315012),msg_c(alice,charlie,sid_35315013))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_35315016]),msg_c(alice,bob,sid[!1 = @sid_35315016]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315017]),msg_b(bob,alice,sid[!1 = @sid_35315017]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35315016]),msg_a(alice,bob,sid[!1 = @sid_35315016]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_35315017]),msg_c(alice,bob,sid[!1 = @sid_35315016])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_35315020]),msg_c(alice,charlie,sid[!1 = @sid_35315020]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315021]),msg_b(bob,alice,sid[!1 = @sid_35315021]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35315020]),msg_a(alice,charlie,sid[!1 = @sid_35315020]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_35315021]),msg_c(alice,charlie,sid[!1 = @sid_35315020])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_35315030]),msg_c(alice,bob,sid[!1 = @sid_35315030]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315031]),msg_b(bob,alice,sid[!1 = @sid_35315031]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35315030]),msg_a(alice,bob,sid[!1 = @sid_35315030]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_35315031]),msg_c(alice,bob,sid[!1 = @sid_35315030])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_35315034]),msg_c(alice,charlie,sid[!1 = @sid_35315034]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315035]),msg_b(bob,alice,sid[!1 = @sid_35315035]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35315034]),msg_a(alice,charlie,sid[!1 = @sid_35315034]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_35315035]),msg_c(alice,charlie,sid[!1 = @sid_35315034])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1079,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_35315048]),msg_c(alice,charlie,sid[!1 = @sid_35315048]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315049]),msg_b(bob,alice,sid[!1 = @sid_35315049]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35315048]),msg_a(alice,charlie,sid[!1 = @sid_35315048]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_35315049]),msg_c(alice,charlie,sid[!1 = @sid_35315048])))
Abbreviations:
sid_35315181 = sid[!1 = @sid_35315119]
sid_35315182 = sid[!1 = @sid_35315155]

1. The entry statestore(bob,alice,sid_35315181,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,sid_35315181,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_35315182,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {147}.
table(statestore(alice,charlie,sid_35315182,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_35315182,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {170}.
The event SendMsg(alice,charlie,stagepack_a(sid_35315182),msg_a(alice,charlie,sid_35315182)) may be executed at {167}.
So the message concat3(dhexp(key_e(alice,charlie,sid_35315182),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))) may be sent on channel pub at output {169}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_35315182),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182)))).

4. The entry statestore(bob,alice,sid_35315181,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie,sid_35315182),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie,sid_35315182),g) <> caught-fail.
So the entry statestore(bob,alice,sid_35315181,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315182),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,sid_35315181,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315182),g),empty,false)))).

5. The entry statestore(bob,alice,sid_35315181,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315182),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stagepack_b(sid_35315181),msg_b(bob,alice,sid_35315181)) may be executed at {327}.
So the entry statestore(bob,alice,sid_35315181,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315181),dhexp(key_e(alice,charlie,sid_35315182),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315181),g),key_e(bob,alice,sid_35315181)),empty,dhexp(key_e(alice,charlie,sid_35315182),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,sid_35315181,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315181),dhexp(key_e(alice,charlie,sid_35315182),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315181),g),key_e(bob,alice,sid_35315181)),empty,dhexp(key_e(alice,charlie,sid_35315182),g),empty,false)))).

6. The entry statestore(alice,charlie,sid_35315182,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {170}.
The event SendMsg(alice,charlie,stagepack_a(sid_35315182),msg_a(alice,charlie,sid_35315182)) may be executed at {167}.
So the entry statestore(alice,charlie,sid_35315182,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315182),g),key_e(alice,charlie,sid_35315182)),empty,empty,empty,true))) may be inserted in a table at insert {168}.
table(statestore(alice,charlie,sid_35315182,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315182),g),key_e(alice,charlie,sid_35315182)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_35315181,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315182),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stagepack_b(sid_35315181),msg_b(bob,alice,sid_35315181)) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice,sid_35315181),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_35315181),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181)))).

8. The entry statestore(alice,charlie,sid_35315182,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315182),g),key_e(alice,charlie,sid_35315182)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {199}.
The message concat3(dhexp(key_e(bob,alice,sid_35315181),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))) that may be sent on channel pub by 7 may be received at input {171}.
We have dhexp(key_e(bob,alice,sid_35315181),g) <> caught-fail.
So the entry statestore(alice,charlie,sid_35315182,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315182),g),key_e(alice,charlie,sid_35315182)),empty,dhexp(key_e(bob,alice,sid_35315181),g),empty,true))) may be inserted in a table at insert {198}.
table(statestore(alice,charlie,sid_35315182,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315182),g),key_e(alice,charlie,sid_35315182)),empty,dhexp(key_e(bob,alice,sid_35315181),g),empty,true)))).

9. The entry statestore(alice,charlie,sid_35315182,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315182),g),key_e(alice,charlie,sid_35315182)),empty,dhexp(key_e(bob,alice,sid_35315181),g),empty,true))) that may be in a table by 8 may be read at get {228}.
The event SendMsg(alice,charlie,stagepack_c(sid_35315182),msg_c(alice,charlie,sid_35315182)) may be executed at {225}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))),dhexp(key_s(alice),g))),msg_c(alice,charlie,sid_35315182))) may be sent on channel pub at output {227}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))),dhexp(key_s(alice),g))),msg_c(alice,charlie,sid_35315182)))).

10. The entry statestore(bob,alice,sid_35315181,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315181),dhexp(key_e(alice,charlie,sid_35315182),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315181),g),key_e(bob,alice,sid_35315181)),empty,dhexp(key_e(alice,charlie,sid_35315182),g),empty,false))) that may be in a table by 5 may be read at get {361}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315182),dhexp(key_e(bob,alice,sid_35315181),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315182),g)),msg_a(alice,charlie,sid_35315182))),dhexp(key_e(bob,alice,sid_35315181),g)),msg_b(bob,alice,sid_35315181))),dhexp(key_s(alice),g))),msg_c(alice,charlie,sid_35315182))) that may be sent on channel pub by 9 may be received at input {331}.
So event RecvMsg(bob,alice,stagepack_c(sid_35315181),msg_c(alice,charlie,sid_35315182)) may be executed at {359}.
end(RecvMsg(bob,alice,stagepack_c(sid_35315181),msg_c(alice,charlie,sid_35315182))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_35315189]),msg_c(alice,charlie,sid[!1 = @sid_35315189]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315190]),msg_b(bob,alice,sid[!1 = @sid_35315190]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_35315189]),msg_a(alice,charlie,sid[!1 = @sid_35315189]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_35315190]),msg_c(alice,charlie,sid[!1 = @sid_35315189])))
Abbreviations:
sid_35315322 = sid[!1 = @sid_35315260]
sid_35315323 = sid[!1 = @sid_35315296]

1. The entry statestore(bob,alice,sid_35315322,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,sid_35315322,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_35315323,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {147}.
table(statestore(alice,charlie,sid_35315323,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_35315323,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {170}.
The event SendMsg(alice,charlie,stagepack_a(sid_35315323),msg_a(alice,charlie,sid_35315323)) may be executed at {167}.
So the message concat3(dhexp(key_e(alice,charlie,sid_35315323),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))) may be sent on channel pub at output {169}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_35315323),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323)))).

4. The entry statestore(bob,alice,sid_35315322,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie,sid_35315323),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie,sid_35315323),g) <> caught-fail.
So the entry statestore(bob,alice,sid_35315322,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315323),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,sid_35315322,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315323),g),empty,false)))).

5. The entry statestore(bob,alice,sid_35315322,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315323),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stagepack_b(sid_35315322),msg_b(bob,alice,sid_35315322)) may be executed at {327}.
So the entry statestore(bob,alice,sid_35315322,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315322),dhexp(key_e(alice,charlie,sid_35315323),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315322),g),key_e(bob,alice,sid_35315322)),empty,dhexp(key_e(alice,charlie,sid_35315323),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,sid_35315322,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315322),dhexp(key_e(alice,charlie,sid_35315323),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315322),g),key_e(bob,alice,sid_35315322)),empty,dhexp(key_e(alice,charlie,sid_35315323),g),empty,false)))).

6. The entry statestore(alice,charlie,sid_35315323,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {170}.
The event SendMsg(alice,charlie,stagepack_a(sid_35315323),msg_a(alice,charlie,sid_35315323)) may be executed at {167}.
So the entry statestore(alice,charlie,sid_35315323,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315323),g),key_e(alice,charlie,sid_35315323)),empty,empty,empty,true))) may be inserted in a table at insert {168}.
table(statestore(alice,charlie,sid_35315323,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315323),g),key_e(alice,charlie,sid_35315323)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_35315322,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie,sid_35315323),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stagepack_b(sid_35315322),msg_b(bob,alice,sid_35315322)) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice,sid_35315322),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_35315322),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322)))).

8. The entry statestore(alice,charlie,sid_35315323,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315323),g),key_e(alice,charlie,sid_35315323)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {199}.
The message concat3(dhexp(key_e(bob,alice,sid_35315322),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))) that may be sent on channel pub by 7 may be received at input {171}.
We have dhexp(key_e(bob,alice,sid_35315322),g) <> caught-fail.
So the entry statestore(alice,charlie,sid_35315323,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315323),g),key_e(alice,charlie,sid_35315323)),empty,dhexp(key_e(bob,alice,sid_35315322),g),empty,true))) may be inserted in a table at insert {198}.
table(statestore(alice,charlie,sid_35315323,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315323),g),key_e(alice,charlie,sid_35315323)),empty,dhexp(key_e(bob,alice,sid_35315322),g),empty,true)))).

9. The entry statestore(alice,charlie,sid_35315323,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie,sid_35315323),g),key_e(alice,charlie,sid_35315323)),empty,dhexp(key_e(bob,alice,sid_35315322),g),empty,true))) that may be in a table by 8 may be read at get {228}.
The event SendMsg(alice,charlie,stagepack_c(sid_35315323),msg_c(alice,charlie,sid_35315323)) may be executed at {225}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))),dhexp(key_s(alice),g))),msg_c(alice,charlie,sid_35315323))) may be sent on channel pub at output {227}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))),dhexp(key_s(alice),g))),msg_c(alice,charlie,sid_35315323)))).

10. The entry statestore(bob,alice,sid_35315322,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315322),dhexp(key_e(alice,charlie,sid_35315323),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315322),g),key_e(bob,alice,sid_35315322)),empty,dhexp(key_e(alice,charlie,sid_35315323),g),empty,false))) that may be in a table by 5 may be read at get {361}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie,sid_35315323),dhexp(key_e(bob,alice,sid_35315322),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_35315323),g)),msg_a(alice,charlie,sid_35315323))),dhexp(key_e(bob,alice,sid_35315322),g)),msg_b(bob,alice,sid_35315322))),dhexp(key_s(alice),g))),msg_c(alice,charlie,sid_35315323))) that may be sent on channel pub by 9 may be received at input {331}.
So event RecvMsg(bob,alice,stagepack_c(sid_35315322),msg_c(alice,charlie,sid_35315323)) may be executed at {359}.
end(RecvMsg(bob,alice,stagepack_c(sid_35315322),msg_c(alice,charlie,sid_35315323))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_35315339]),msg_d(bob,alice,sid[!1 = @sid_35315339]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_35315340]),msg_c(alice,bob,sid[!1 = @sid_35315340]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315339]),msg_b(bob,alice,sid[!1 = @sid_35315339]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35315340]),msg_a(alice,bob,sid[!1 = @sid_35315340]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_35315340]),msg_d(bob,alice,sid[!1 = @sid_35315339])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_35315348]),msg_d(bob,alice,sid[!1 = @sid_35315348]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_35315349]),msg_c(alice,bob,sid[!1 = @sid_35315349]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315348]),msg_b(bob,alice,sid[!1 = @sid_35315348]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35315349]),msg_a(alice,bob,sid[!1 = @sid_35315349]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_35315349]),msg_d(bob,alice,sid[!1 = @sid_35315348])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_35315358]),msg_d(bob,alice,sid[!1 = @sid_35315358]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_35315359]),msg_c(alice,bob,sid[!1 = @sid_35315359]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315358]),msg_b(bob,alice,sid[!1 = @sid_35315358]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35315359]),msg_a(alice,bob,sid[!1 = @sid_35315359]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_35315359]),msg_d(bob,alice,sid[!1 = @sid_35315358])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1079,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_35315368]),msg_d(bob,alice,sid[!1 = @sid_35315368]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_35315369]),msg_c(alice,bob,sid[!1 = @sid_35315369]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315368]),msg_b(bob,alice,sid[!1 = @sid_35315368]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35315369]),msg_a(alice,bob,sid[!1 = @sid_35315369]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_35315369]),msg_d(bob,alice,sid[!1 = @sid_35315368])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_35315377]),msg_d(bob,alice,sid[!1 = @sid_35315377]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_35315378]),msg_c(alice,bob,sid[!1 = @sid_35315378]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315377]),msg_b(bob,alice,sid[!1 = @sid_35315377]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35315378]),msg_a(alice,bob,sid[!1 = @sid_35315378]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_35315378]),msg_d(bob,alice,sid[!1 = @sid_35315377])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_35315397]),msg_d(bob,alice,sid[!1 = @sid_35315397]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_35315398]),msg_c(alice,bob,sid[!1 = @sid_35315398]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_35315397]),msg_b(bob,alice,sid[!1 = @sid_35315397]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_35315398]),msg_a(alice,bob,sid[!1 = @sid_35315398]))) -> end(RecvEnd(true))
Abbreviations:
sid_35315632 = sid[!1 = @sid_35315583]
sid_35315633 = sid[!1 = @sid_35315625]

1. The entry statestore(alice,bob,sid_35315633,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_35315633,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,sid_35315633,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35315633),msg_a(alice,bob,sid_35315633)) may be executed at {35}.
So the entry statestore(alice,bob,sid_35315633,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,empty,empty,true))) may be inserted in a table at insert {36}.
table(statestore(alice,bob,sid_35315633,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,sid_35315632,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,sid_35315632,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,sid_35315633,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {38}.
The event SendMsg(alice,bob,stagepack_a(sid_35315633),msg_a(alice,bob,sid_35315633)) may be executed at {35}.
So the message concat3(dhexp(key_e(alice,bob,sid_35315633),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))) may be sent on channel pub at output {37}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_35315633),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633)))).

5. The entry statestore(bob,alice,sid_35315632,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {300}.
The message concat3(dhexp(key_e(alice,bob,sid_35315633),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))) that may be sent on channel pub by 4 may be received at input {279}.
We have dhexp(key_e(alice,bob,sid_35315633),g) <> caught-fail.
So the entry statestore(bob,alice,sid_35315632,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35315633),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,sid_35315632,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35315633),g),empty,false)))).

6. The entry statestore(bob,alice,sid_35315632,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35315633),g),empty,false))) that may be in a table by 5 may be read at get {330}.
The event SendMsg(bob,alice,stagepack_b(sid_35315632),msg_b(bob,alice,sid_35315632)) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice,sid_35315632),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_35315632),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))).

7. The entry statestore(alice,bob,sid_35315633,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {67}.
The message concat3(dhexp(key_e(bob,alice,sid_35315632),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))) that may be sent on channel pub by 6 may be received at input {39}.
So the entry statestore(alice,bob,sid_35315633,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,dhexp(key_e(bob,alice,sid_35315632),g),empty,true))) may be inserted in a table at insert {66}.
table(statestore(alice,bob,sid_35315633,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,dhexp(key_e(bob,alice,sid_35315632),g),empty,true)))).

8. The entry statestore(alice,bob,sid_35315633,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,dhexp(key_e(bob,alice,sid_35315632),g),empty,true))) that may be in a table by 7 may be read at get {96}.
The event SendMsg(alice,bob,stagepack_c(sid_35315633),msg_c(alice,bob,sid_35315633)) may be executed at {93}.
So the entry statestore(alice,bob,sid_35315633,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,dhexp(key_e(bob,alice,sid_35315632),g),empty,true))) may be inserted in a table at insert {94}.
table(statestore(alice,bob,sid_35315633,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,dhexp(key_e(bob,alice,sid_35315632),g),empty,true)))).

9. The entry statestore(bob,alice,sid_35315632,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob,sid_35315633),g),empty,false))) that may be in a table by 5 may be read at get {330}.
The event SendMsg(bob,alice,stagepack_b(sid_35315632),msg_b(bob,alice,sid_35315632)) may be executed at {327}.
So the entry statestore(bob,alice,sid_35315632,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315632),g),key_e(bob,alice,sid_35315632)),empty,dhexp(key_e(alice,bob,sid_35315633),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,sid_35315632,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315632),g),key_e(bob,alice,sid_35315632)),empty,dhexp(key_e(alice,bob,sid_35315633),g),empty,false)))).

10. The entry statestore(alice,bob,sid_35315633,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {67}.
The message concat3(dhexp(key_e(bob,alice,sid_35315632),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))) that may be sent on channel pub by 6 may be received at input {39}.
We have dhexp(key_e(bob,alice,sid_35315632),g) <> caught-fail.
So the entry statestore(alice,bob,sid_35315633,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,dhexp(key_e(bob,alice,sid_35315632),g),empty,true))) may be inserted in a table at insert {66}.
table(statestore(alice,bob,sid_35315633,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,dhexp(key_e(bob,alice,sid_35315632),g),empty,true)))).

11. The entry statestore(alice,bob,sid_35315633,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,dhexp(key_e(bob,alice,sid_35315632),g),empty,true))) that may be in a table by 10 may be read at get {96}.
The event SendMsg(alice,bob,stagepack_c(sid_35315633),msg_c(alice,bob,sid_35315633)) may be executed at {93}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633))) may be sent on channel pub at output {95}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633)))).

12. The entry statestore(bob,alice,sid_35315632,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315632),g),key_e(bob,alice,sid_35315632)),empty,dhexp(key_e(alice,bob,sid_35315633),g),empty,false))) that may be in a table by 9 may be read at get {361}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633))) that may be sent on channel pub by 11 may be received at input {331}.
So the entry statestore(bob,alice,sid_35315632,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315632),g),key_e(bob,alice,sid_35315632)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_35315633),g),empty,false))) may be inserted in a table at insert {360}.
table(statestore(bob,alice,sid_35315632,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315632),g),key_e(bob,alice,sid_35315632)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_35315633),g),empty,false)))).

13. The entry statestore(bob,alice,sid_35315632,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_35315632),g),key_e(bob,alice,sid_35315632)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob,sid_35315633),g),empty,false))) that may be in a table by 12 may be read at get {393}.
The event SendMsg(bob,alice,stagepack_d(sid_35315632),msg_d(bob,alice,sid_35315632)) may be executed at {391}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633))),msg_d(bob,alice,sid_35315632))) may be sent on channel pub at output {392}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633))),msg_d(bob,alice,sid_35315632)))).

14. The entry statestore(alice,bob,sid_35315633,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(increment_nonce(minnonce)))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob,sid_35315633),g),key_e(alice,bob,sid_35315633)),empty,dhexp(key_e(bob,alice,sid_35315632),g),empty,true))) that may be in a table by 8 may be read at get {130}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice,sid_35315632),dhexp(key_e(alice,bob,sid_35315633),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob,sid_35315633),dhexp(key_e(bob,alice,sid_35315632),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_35315633),g)),msg_a(alice,bob,sid_35315633))),dhexp(key_e(bob,alice,sid_35315632),g)),msg_b(bob,alice,sid_35315632))),dhexp(key_s(alice),g))),msg_c(alice,bob,sid_35315633))),msg_d(bob,alice,sid_35315632))) that may be sent on channel pub by 13 may be received at input {97}.
So event RecvEnd(true) may be executed at {129}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
