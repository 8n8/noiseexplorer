File "X1N.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "X1N.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "X1N.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "X1N.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "X1N.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "X1N.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 316, character 6:
Warning: identifier s rebound.
File "X1N.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 317, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1N.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 318, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "X1N.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 342, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "X1N.noise.passive.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 364, characters 48-53:
Warning: identifier valid1 rebound.
File "X1N.noise.passive.pv", line 365, characters 6-7:
Warning: identifier rs rebound.
File "X1N.noise.passive.pv", line 366, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 368, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 524, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 516, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 316, character 6:
Warning: identifier s rebound.
File "X1N.noise.passive.pv", line 317, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 317, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1N.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 318, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 509, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "X1N.noise.passive.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 501, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "X1N.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "X1N.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 294, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 294, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 295, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 364, characters 48-53:
Warning: identifier valid1 rebound.
File "X1N.noise.passive.pv", line 365, characters 6-7:
Warning: identifier rs rebound.
File "X1N.noise.passive.pv", line 366, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 368, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "X1N.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "X1N.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1N.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1N.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "X1N.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "X1N.noise.passive.pv", line 342, characters 7-8:
Warning: identifier hs rebound.
File "X1N.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1N.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let s_468: keypair = keypairpack(empty,empty) in
    {6}out(pub, getpublickey(s_468));
    (
        {7}let e_469: keypair = keypairpack(empty,empty) in
        {8}let rs_470: key = empty in
        {9}let re_471: key = empty in
        {10}let v_472: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_473: key = catch-fail(v_472) in
        {12}let v_474: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_475: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_472) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then symmetricstatepack(v_474,v_473,v_472) else fail-any) else fail-any) else fail-any))) in
        {14}let v_476: symmetricstate = catch-fail((if success?((if not-caught-fail(v_472) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then symmetricstatepack(v_474,v_473,v_472) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then symmetricstatepack(1-proj-3-tuple(v_475),2-proj-3-tuple(v_475),hash(3-proj-3-tuple(v_475),empty)) else fail-any) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_476) then handshakestatepack(v_476,s_468,e_469,rs_470,re_471,empty,true) else fail-any) in
        {16}insert statestore(me,them,statepack_a(hs))
    ) | (
        {40}get statestore(=me,=them,statepack_a(hs_477: handshakestate)) in
        {17}let v_478: bitstring = catch-fail(handshakestateunpack(hs_477)) in
        {18}let v_479: bitstring = catch-fail((empty,empty,empty)) in
        {19}new key_e[me,them]: key;
        {20}let v_480: key = catch-fail(dhexp(key_e,g)) in
        {21}let v_481: keypair = catch-fail((if not-caught-fail(v_480) then keypairpack(v_480,key_e) else fail-any)) in
        {22}let v_482: bitstring = catch-fail(getpublickey(v_481)) in
        {23}let v_483: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_478))) in
        {24}let v_484: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_478)) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack(1-proj-3-tuple(v_483),2-proj-3-tuple(v_483),hash(3-proj-3-tuple(v_483),v_482)) else fail-any) else fail-any)) in
        {25}let v_485: bitstring = catch-fail(symmetricstateunpack(v_484)) in
        {26}let v_486: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_485))) in
        {27}let v_487: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_486),2-proj-2-tuple(v_486),3-proj-3-tuple(v_485),msg_a(me,them))) in
        {28}let v_488: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_485))) in
        {29}let v_489: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_486))) && success?(1-proj-3-tuple(v_485))) then (if (not-caught-fail(v_488) && success?(is-true(success?(1-proj-2-tuple(v_488))))) then cipherstatepack(1-proj-2-tuple(v_488),increment_nonce(2-proj-2-tuple(v_486))) else fail-any) else fail-any)) in
        {30}let v_490: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_485)) && success?(1-proj-3-tuple(v_485))) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then (if not-caught-fail(v_487) then (if not-caught-fail(v_489) then (v_489,v_487) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_491: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_490),2-proj-3-tuple(v_485),3-proj-3-tuple(v_485)))) in
        {32}let v_492: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_490)) && success?(symmetricstatepack(1-proj-2-tuple(v_490),2-proj-3-tuple(v_485),3-proj-3-tuple(v_485)))) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then symmetricstatepack(1-proj-3-tuple(v_491),2-proj-3-tuple(v_491),hash(3-proj-3-tuple(v_491),2-proj-2-tuple(v_490))) else fail-any) else fail-any)) in
        {33}let v_493: bitstring = catch-fail((if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-2-tuple(v_490))))) then (if not-caught-fail(v_492) then (v_492,2-proj-2-tuple(v_490)) else fail-any) else fail-any) else fail-any)) in
        {34}let v_494: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_493),2-proj-7-tuple(v_478),v_481,4-proj-7-tuple(v_478),5-proj-7-tuple(v_478),6-proj-7-tuple(v_478),7-proj-7-tuple(v_478))) in
        {35}let v_495: bitstring = catch-fail(concat3(v_482,2-proj-3-tuple(v_479),2-proj-2-tuple(v_493))) in
        {36}let (hs_496: handshakestate,re_497: key,message_a: bitstring) = (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-7-tuple(v_478))))) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then (if not-caught-fail(v_481) then (if not-caught-fail(v_482) then (if not-caught-fail(v_484) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then (if not-caught-fail(v_494) then (if not-caught-fail(v_495) then (v_494,5-proj-7-tuple(v_478),v_495) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {37}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {38}insert statestore(me,them,statepack_b(hs_496));
        {39}out(pub, message_a)
    ) | (
        {69}get statestore(=me,=them,statepack_b(hs_498: handshakestate)) in
        {41}in(pub, message_b: bitstring);
        {42}let v_499: bitstring = catch-fail(handshakestateunpack(hs_498)) in
        {43}let v_500: bitstring = catch-fail(deconcat3(message_b)) in
        {44}let v_501: bool = catch-fail(true) in
        {45}let v_502: key = catch-fail(1-proj-3-tuple(v_500)) in
        {46}let v_503: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_499))) in
        {47}let v_504: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_499)) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-3-tuple(v_503))))) then symmetricstatepack(1-proj-3-tuple(v_503),2-proj-3-tuple(v_503),hash(3-proj-3-tuple(v_503),v_502)) else fail-any) else fail-any)) in
        {48}let v_505: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_499))) in
        {49}let v_506: bitstring = catch-fail(symmetricstateunpack(v_504)) in
        {50}let v_507: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_506),(if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any))) in
        {51}let v_508: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_506),(if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any))) in
        {52}let v_509: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_506),(if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any))) in
        {53}let v_510: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_506))) then (if not-caught-fail(v_507) then (if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (v_507,v_508,v_509) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {54}let v_511: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any)) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_510)) then cipherstatepack(2-proj-3-tuple(v_510),minnonce) else fail-any),1-proj-3-tuple(v_510),3-proj-3-tuple(v_506)) else fail-any) else fail-any) else fail-any)) in
        {55}let v_512: bitstring = catch-fail(symmetricstateunpack(v_511)) in
        {56}let v_513: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_512))) in
        {57}let v_514: aead = catch-fail(decrypt(1-proj-2-tuple(v_513),2-proj-2-tuple(v_513),3-proj-3-tuple(v_512),3-proj-3-tuple(v_500))) in
        {58}let v_515: bitstring = catch-fail(aeadunpack(v_514)) in
        {59}let v_516: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_512))) in
        {60}let v_517: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_513))) && success?(1-proj-3-tuple(v_512))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then cipherstatepack(1-proj-2-tuple(v_516),increment_nonce(2-proj-2-tuple(v_513))) else fail-any) else fail-any)) in
        {61}let v_518: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_500)) && (success?(3-proj-3-tuple(v_512)) && success?(1-proj-3-tuple(v_512)))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then (if not-caught-fail(v_514) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-3-tuple(v_515))))) then (if not-caught-fail(v_517) then (v_517,3-proj-3-tuple(v_515),1-proj-3-tuple(v_515)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_519: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_512),3-proj-3-tuple(v_512)))) in
        {63}let v_520: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_500)) && success?(symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_512),3-proj-3-tuple(v_512)))) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then symmetricstatepack(1-proj-3-tuple(v_519),2-proj-3-tuple(v_519),hash(3-proj-3-tuple(v_519),3-proj-3-tuple(v_500))) else fail-any) else fail-any)) in
        {64}let v_521: bitstring = catch-fail((if success?(3-proj-3-tuple(v_500)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then (if not-caught-fail(v_520) then (v_520,2-proj-3-tuple(v_518),3-proj-3-tuple(v_518)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_522: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_521),2-proj-7-tuple(v_499),3-proj-7-tuple(v_499),4-proj-7-tuple(v_499),v_502,6-proj-7-tuple(v_499),7-proj-7-tuple(v_499))) in
        {66}let (hs_523: handshakestate,re_524: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-7-tuple(v_499))))) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then (if not-caught-fail(v_501) then (if not-caught-fail(v_502) then (if not-caught-fail(v_504) then (if not-caught-fail(v_511) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (v_501 && 3-proj-3-tuple(v_521)) then (if not-caught-fail(v_522) then (v_522,getpublickey(3-proj-7-tuple(v_499)),2-proj-3-tuple(v_521),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {67}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {68}insert statestore(me,them,statepack_c(hs_523))
    ) | (
        {98}get statestore(=me,=them,statepack_c(hs_525: handshakestate)) in
        {70}let v_526: bitstring = catch-fail(handshakestateunpack(hs_525)) in
        {71}let v_527: bitstring = catch-fail((empty,empty,empty)) in
        {72}let v_528: key = catch-fail(dhexp(key_s(me),g)) in
        {73}let v_529: keypair = catch-fail((if not-caught-fail(v_528) then keypairpack(v_528,key_s(me)) else fail-any)) in
        {74}let v_530: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_526))) in
        {75}let v_531: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {76}let v_532: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_531),2-proj-2-tuple(v_531),3-proj-3-tuple(v_530),getpublickey(v_529))) in
        {77}let v_533: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {78}let v_534: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_531))) && success?(1-proj-3-tuple(v_530))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then cipherstatepack(1-proj-2-tuple(v_533),increment_nonce(2-proj-2-tuple(v_531))) else fail-any) else fail-any)) in
        {79}let v_535: bitstring = catch-fail((if (success?(getpublickey(v_529)) && (success?(3-proj-3-tuple(v_530)) && success?(1-proj-3-tuple(v_530)))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then (if not-caught-fail(v_532) then (if not-caught-fail(v_534) then (v_534,v_532) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_536: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_535),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) in
        {81}let v_537: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_535)) && success?(symmetricstatepack(1-proj-2-tuple(v_535),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then symmetricstatepack(1-proj-3-tuple(v_536),2-proj-3-tuple(v_536),hash(3-proj-3-tuple(v_536),2-proj-2-tuple(v_535))) else fail-any) else fail-any)) in
        {82}let v_538: bitstring = catch-fail((if (success?(getpublickey(v_529)) && success?(1-proj-7-tuple(v_526))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then (if not-caught-fail(v_537) then (v_537,2-proj-2-tuple(v_535)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_539: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_538))) in
        {84}let v_540: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_539))) in
        {85}let v_541: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_540),2-proj-2-tuple(v_540),3-proj-3-tuple(v_539),msg_c(me,them))) in
        {86}let v_542: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_539))) in
        {87}let v_543: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_540))) && success?(1-proj-3-tuple(v_539))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then cipherstatepack(1-proj-2-tuple(v_542),increment_nonce(2-proj-2-tuple(v_540))) else fail-any) else fail-any)) in
        {88}let v_544: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_539)) && success?(1-proj-3-tuple(v_539))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then (if not-caught-fail(v_541) then (if not-caught-fail(v_543) then (v_543,v_541) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_545: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_544),2-proj-3-tuple(v_539),3-proj-3-tuple(v_539)))) in
        {90}let v_546: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_544)) && success?(symmetricstatepack(1-proj-2-tuple(v_544),2-proj-3-tuple(v_539),3-proj-3-tuple(v_539)))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then symmetricstatepack(1-proj-3-tuple(v_545),2-proj-3-tuple(v_545),hash(3-proj-3-tuple(v_545),2-proj-2-tuple(v_544))) else fail-any) else fail-any)) in
        {91}let v_547: bitstring = catch-fail((if success?(1-proj-2-tuple(v_538)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then (if not-caught-fail(v_546) then (v_546,2-proj-2-tuple(v_544)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_548: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_547),v_529,3-proj-7-tuple(v_526),4-proj-7-tuple(v_526),5-proj-7-tuple(v_526),6-proj-7-tuple(v_526),7-proj-7-tuple(v_526))) in
        {93}let v_549: bitstring = catch-fail(concat3(1-proj-3-tuple(v_527),2-proj-2-tuple(v_538),2-proj-2-tuple(v_547))) in
        {94}let (hs_550: handshakestate,re_551: key,message_c: bitstring) = (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-7-tuple(v_526))))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then (if not-caught-fail(v_529) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then (if not-caught-fail(v_548) then (if not-caught-fail(v_549) then (v_548,5-proj-7-tuple(v_526),v_549) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {95}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {96}insert statestore(me,them,statepack_d(hs_550));
        {97}out(pub, message_c)
    ) | (
        {133}get statestore(=me,=them,statepack_d(hs_552: handshakestate)) in
        {99}in(pub, message_d: bitstring);
        {100}let v_553: bitstring = catch-fail(handshakestateunpack(hs_552)) in
        {101}let v_554: bitstring = catch-fail(deconcat3(message_d)) in
        {102}let v_555: bool = catch-fail(true) in
        {103}let v_556: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_553))) in
        {104}let v_557: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_553))) in
        {105}let v_558: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_557),(if (success?(5-proj-7-tuple(v_553)) && success?(2-proj-7-tuple(v_553))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),5-proj-7-tuple(v_553)) else fail-any) else fail-any))) in
        {106}let v_559: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_557),(if (success?(5-proj-7-tuple(v_553)) && success?(2-proj-7-tuple(v_553))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),5-proj-7-tuple(v_553)) else fail-any) else fail-any))) in
        {107}let v_560: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_557),(if (success?(5-proj-7-tuple(v_553)) && success?(2-proj-7-tuple(v_553))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),5-proj-7-tuple(v_553)) else fail-any) else fail-any))) in
        {108}let v_561: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_553)) && success?(2-proj-7-tuple(v_553))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),5-proj-7-tuple(v_553)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_557))) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (v_558,v_559,v_560) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {109}let v_562: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_553)) && success?(2-proj-7-tuple(v_553))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then dhexp(2-proj-2-tuple(v_556),5-proj-7-tuple(v_553)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_553))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_561)) then cipherstatepack(2-proj-3-tuple(v_561),minnonce) else fail-any),1-proj-3-tuple(v_561),3-proj-3-tuple(v_557)) else fail-any) else fail-any) else fail-any)) in
        {110}let v_563: bitstring = catch-fail(symmetricstateunpack(v_562)) in
        {111}let v_564: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {112}let v_565: aead = catch-fail(decrypt(1-proj-2-tuple(v_564),2-proj-2-tuple(v_564),3-proj-3-tuple(v_563),3-proj-3-tuple(v_554))) in
        {113}let v_566: bitstring = catch-fail(aeadunpack(v_565)) in
        {114}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {115}let v_568: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_564))) && success?(1-proj-3-tuple(v_563))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then cipherstatepack(1-proj-2-tuple(v_567),increment_nonce(2-proj-2-tuple(v_564))) else fail-any) else fail-any)) in
        {116}let v_569: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_554)) && (success?(3-proj-3-tuple(v_563)) && success?(1-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then (if not-caught-fail(v_565) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if not-caught-fail(v_568) then (v_568,3-proj-3-tuple(v_566),1-proj-3-tuple(v_566)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let v_570: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) in
        {118}let v_571: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_554)) && success?(symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_570),hash(3-proj-3-tuple(v_570),3-proj-3-tuple(v_554))) else fail-any) else fail-any)) in
        {119}let v_572: bitstring = catch-fail((if success?(3-proj-3-tuple(v_554)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,2-proj-3-tuple(v_569),3-proj-3-tuple(v_569)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {120}let v_573: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_572),2-proj-7-tuple(v_553),3-proj-7-tuple(v_553),4-proj-7-tuple(v_553),5-proj-7-tuple(v_553),6-proj-7-tuple(v_553),7-proj-7-tuple(v_553))) in
        {121}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_572))) in
        {122}let v_575: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_574),zero)) in
        {123}let v_576: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_574),zero)) in
        {124}let v_577: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_574),zero)) in
        {125}let v_578: bitstring = catch-fail((if success?(2-proj-3-tuple(v_574)) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (v_575,v_576,v_577) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_579: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_578)) then cipherstatepack(1-proj-3-tuple(v_578),minnonce) else fail-any)) in
        {127}let v_580: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_578)) then cipherstatepack(2-proj-3-tuple(v_578),minnonce) else fail-any)) in
        {128}let v_581: bitstring = catch-fail((if success?(1-proj-3-tuple(v_572)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (1-proj-3-tuple(v_572),v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {129}let (hs_582: handshakestate,re_583: key,plaintext_d: bitstring,valid_584: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-7-tuple(v_553))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then (if not-caught-fail(v_555) then (if not-caught-fail(v_562) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if (v_555 && 3-proj-3-tuple(v_572)) then (if not-caught-fail(v_573) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (v_573,getpublickey(3-proj-7-tuple(v_553)),2-proj-3-tuple(v_572),true,2-proj-3-tuple(v_581),3-proj-3-tuple(v_581)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {130}event RecvMsg(me,them,stage_d,plaintext_d,valid_584);
        {131}insert statestore(me,them,statepack_e(hs_582));
        {132}event RecvEnd(valid_584)
    ) | (
        {134}event LeakS(phase0,me);
        {135}out(pub, key_s(me))
    ) | (
        {136}phase 1;
        {137}event LeakS(phase1,me);
        {138}out(pub, key_s(me))
    )
) | (
    {139}let them_585: principal = charlie in
    {140}let me_586: principal = alice in
    {141}let s_587: keypair = keypairpack(empty,empty) in
    {142}out(pub, getpublickey(s_587));
    (
        {143}let e_588: keypair = keypairpack(empty,empty) in
        {144}let rs_589: key = empty in
        {145}let re_590: key = empty in
        {146}let v_591: bitstring = catch-fail(hash(somename,empty)) in
        {147}let v_592: key = catch-fail(v_591) in
        {148}let v_593: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {149}let v_594: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then symmetricstatepack(v_593,v_592,v_591) else fail-any) else fail-any) else fail-any))) in
        {150}let v_595: symmetricstate = catch-fail((if success?((if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then symmetricstatepack(v_593,v_592,v_591) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),empty)) else fail-any) else fail-any)) in
        {151}let hs_596: handshakestate = (if not-caught-fail(v_595) then handshakestatepack(v_595,s_587,e_588,rs_589,re_590,empty,true) else fail-any) in
        {152}insert statestore(me_586,them_585,statepack_a(hs_596))
    ) | (
        {176}get statestore(=me_586,=them_585,statepack_a(hs_597: handshakestate)) in
        {153}let v_598: bitstring = catch-fail(handshakestateunpack(hs_597)) in
        {154}let v_599: bitstring = catch-fail((empty,empty,empty)) in
        {155}new key_e_600[me_586,them_585]: key;
        {156}let v_601: key = catch-fail(dhexp(key_e_600,g)) in
        {157}let v_602: keypair = catch-fail((if not-caught-fail(v_601) then keypairpack(v_601,key_e_600) else fail-any)) in
        {158}let v_603: bitstring = catch-fail(getpublickey(v_602)) in
        {159}let v_604: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_598))) in
        {160}let v_605: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_598)) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then symmetricstatepack(1-proj-3-tuple(v_604),2-proj-3-tuple(v_604),hash(3-proj-3-tuple(v_604),v_603)) else fail-any) else fail-any)) in
        {161}let v_606: bitstring = catch-fail(symmetricstateunpack(v_605)) in
        {162}let v_607: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_606))) in
        {163}let v_608: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_607),2-proj-2-tuple(v_607),3-proj-3-tuple(v_606),msg_a(me_586,them_585))) in
        {164}let v_609: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_606))) in
        {165}let v_610: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_607))) && success?(1-proj-3-tuple(v_606))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then cipherstatepack(1-proj-2-tuple(v_609),increment_nonce(2-proj-2-tuple(v_607))) else fail-any) else fail-any)) in
        {166}let v_611: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_606)) && success?(1-proj-3-tuple(v_606))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then (if not-caught-fail(v_608) then (if not-caught-fail(v_610) then (v_610,v_608) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {167}let v_612: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_611),2-proj-3-tuple(v_606),3-proj-3-tuple(v_606)))) in
        {168}let v_613: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_611)) && success?(symmetricstatepack(1-proj-2-tuple(v_611),2-proj-3-tuple(v_606),3-proj-3-tuple(v_606)))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then symmetricstatepack(1-proj-3-tuple(v_612),2-proj-3-tuple(v_612),hash(3-proj-3-tuple(v_612),2-proj-2-tuple(v_611))) else fail-any) else fail-any)) in
        {169}let v_614: bitstring = catch-fail((if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then (if not-caught-fail(v_613) then (v_613,2-proj-2-tuple(v_611)) else fail-any) else fail-any) else fail-any)) in
        {170}let v_615: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_614),2-proj-7-tuple(v_598),v_602,4-proj-7-tuple(v_598),5-proj-7-tuple(v_598),6-proj-7-tuple(v_598),7-proj-7-tuple(v_598))) in
        {171}let v_616: bitstring = catch-fail(concat3(v_603,2-proj-3-tuple(v_599),2-proj-2-tuple(v_614))) in
        {172}let (hs_617: handshakestate,re_618: key,message_a_619: bitstring) = (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-7-tuple(v_598))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_605) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_616) then (v_615,5-proj-7-tuple(v_598),v_616) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {173}event SendMsg(me_586,them_585,stage_a,msg_a(me_586,them_585),true);
        {174}insert statestore(me_586,them_585,statepack_b(hs_617));
        {175}out(pub, message_a_619)
    ) | (
        {205}get statestore(=me_586,=them_585,statepack_b(hs_620: handshakestate)) in
        {177}in(pub, message_b_621: bitstring);
        {178}let v_622: bitstring = catch-fail(handshakestateunpack(hs_620)) in
        {179}let v_623: bitstring = catch-fail(deconcat3(message_b_621)) in
        {180}let v_624: bool = catch-fail(true) in
        {181}let v_625: key = catch-fail(1-proj-3-tuple(v_623)) in
        {182}let v_626: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_622))) in
        {183}let v_627: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_622)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_626),hash(3-proj-3-tuple(v_626),v_625)) else fail-any) else fail-any)) in
        {184}let v_628: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_622))) in
        {185}let v_629: bitstring = catch-fail(symmetricstateunpack(v_627)) in
        {186}let v_630: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_629),(if success?(3-proj-7-tuple(v_622)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_625) else fail-any) else fail-any))) in
        {187}let v_631: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_629),(if success?(3-proj-7-tuple(v_622)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_625) else fail-any) else fail-any))) in
        {188}let v_632: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_629),(if success?(3-proj-7-tuple(v_622)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_625) else fail-any) else fail-any))) in
        {189}let v_633: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_622)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_625) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_629))) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (v_630,v_631,v_632) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_634: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_622)) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then dhexp(2-proj-2-tuple(v_628),v_625) else fail-any) else fail-any)) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_633)) then cipherstatepack(2-proj-3-tuple(v_633),minnonce) else fail-any),1-proj-3-tuple(v_633),3-proj-3-tuple(v_629)) else fail-any) else fail-any) else fail-any)) in
        {191}let v_635: bitstring = catch-fail(symmetricstateunpack(v_634)) in
        {192}let v_636: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {193}let v_637: aead = catch-fail(decrypt(1-proj-2-tuple(v_636),2-proj-2-tuple(v_636),3-proj-3-tuple(v_635),3-proj-3-tuple(v_623))) in
        {194}let v_638: bitstring = catch-fail(aeadunpack(v_637)) in
        {195}let v_639: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {196}let v_640: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_636))) && success?(1-proj-3-tuple(v_635))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then cipherstatepack(1-proj-2-tuple(v_639),increment_nonce(2-proj-2-tuple(v_636))) else fail-any) else fail-any)) in
        {197}let v_641: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_623)) && (success?(3-proj-3-tuple(v_635)) && success?(1-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then (if not-caught-fail(v_637) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_640) then (v_640,3-proj-3-tuple(v_638),1-proj-3-tuple(v_638)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {198}let v_642: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) in
        {199}let v_643: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_623)) && success?(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then symmetricstatepack(1-proj-3-tuple(v_642),2-proj-3-tuple(v_642),hash(3-proj-3-tuple(v_642),3-proj-3-tuple(v_623))) else fail-any) else fail-any)) in
        {200}let v_644: bitstring = catch-fail((if success?(3-proj-3-tuple(v_623)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if not-caught-fail(v_643) then (v_643,2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {201}let v_645: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_644),2-proj-7-tuple(v_622),3-proj-7-tuple(v_622),4-proj-7-tuple(v_622),v_625,6-proj-7-tuple(v_622),7-proj-7-tuple(v_622))) in
        {202}let (hs_646: handshakestate,re_647: key,plaintext_b_648: bitstring,valid_649: bool) = (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-7-tuple(v_622))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (if not-caught-fail(v_627) then (if not-caught-fail(v_634) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if (v_624 && 3-proj-3-tuple(v_644)) then (if not-caught-fail(v_645) then (v_645,getpublickey(3-proj-7-tuple(v_622)),2-proj-3-tuple(v_644),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {203}event RecvMsg(me_586,them_585,stage_b,plaintext_b_648,valid_649);
        {204}insert statestore(me_586,them_585,statepack_c(hs_646))
    ) | (
        {234}get statestore(=me_586,=them_585,statepack_c(hs_650: handshakestate)) in
        {206}let v_651: bitstring = catch-fail(handshakestateunpack(hs_650)) in
        {207}let v_652: bitstring = catch-fail((empty,empty,empty)) in
        {208}let v_653: key = catch-fail(dhexp(key_s(me_586),g)) in
        {209}let v_654: keypair = catch-fail((if not-caught-fail(v_653) then keypairpack(v_653,key_s(me_586)) else fail-any)) in
        {210}let v_655: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_651))) in
        {211}let v_656: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_655))) in
        {212}let v_657: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_656),2-proj-2-tuple(v_656),3-proj-3-tuple(v_655),getpublickey(v_654))) in
        {213}let v_658: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_655))) in
        {214}let v_659: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_656))) && success?(1-proj-3-tuple(v_655))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-2-tuple(v_658))))) then cipherstatepack(1-proj-2-tuple(v_658),increment_nonce(2-proj-2-tuple(v_656))) else fail-any) else fail-any)) in
        {215}let v_660: bitstring = catch-fail((if (success?(getpublickey(v_654)) && (success?(3-proj-3-tuple(v_655)) && success?(1-proj-3-tuple(v_655)))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-2-tuple(v_656))))) then (if not-caught-fail(v_657) then (if not-caught-fail(v_659) then (v_659,v_657) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {216}let v_661: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_660),2-proj-3-tuple(v_655),3-proj-3-tuple(v_655)))) in
        {217}let v_662: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_660)) && success?(symmetricstatepack(1-proj-2-tuple(v_660),2-proj-3-tuple(v_655),3-proj-3-tuple(v_655)))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then symmetricstatepack(1-proj-3-tuple(v_661),2-proj-3-tuple(v_661),hash(3-proj-3-tuple(v_661),2-proj-2-tuple(v_660))) else fail-any) else fail-any)) in
        {218}let v_663: bitstring = catch-fail((if (success?(getpublickey(v_654)) && success?(1-proj-7-tuple(v_651))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then (if not-caught-fail(v_662) then (v_662,2-proj-2-tuple(v_660)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_664: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_663))) in
        {220}let v_665: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_664))) in
        {221}let v_666: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_665),2-proj-2-tuple(v_665),3-proj-3-tuple(v_664),msg_c(me_586,them_585))) in
        {222}let v_667: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_664))) in
        {223}let v_668: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_665))) && success?(1-proj-3-tuple(v_664))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then cipherstatepack(1-proj-2-tuple(v_667),increment_nonce(2-proj-2-tuple(v_665))) else fail-any) else fail-any)) in
        {224}let v_669: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_664)) && success?(1-proj-3-tuple(v_664))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-2-tuple(v_665))))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_668) then (v_668,v_666) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_670: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_669),2-proj-3-tuple(v_664),3-proj-3-tuple(v_664)))) in
        {226}let v_671: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_669)) && success?(symmetricstatepack(1-proj-2-tuple(v_669),2-proj-3-tuple(v_664),3-proj-3-tuple(v_664)))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then symmetricstatepack(1-proj-3-tuple(v_670),2-proj-3-tuple(v_670),hash(3-proj-3-tuple(v_670),2-proj-2-tuple(v_669))) else fail-any) else fail-any)) in
        {227}let v_672: bitstring = catch-fail((if success?(1-proj-2-tuple(v_663)) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then (if not-caught-fail(v_671) then (v_671,2-proj-2-tuple(v_669)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_673: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_672),v_654,3-proj-7-tuple(v_651),4-proj-7-tuple(v_651),5-proj-7-tuple(v_651),6-proj-7-tuple(v_651),7-proj-7-tuple(v_651))) in
        {229}let v_674: bitstring = catch-fail(concat3(1-proj-3-tuple(v_652),2-proj-2-tuple(v_663),2-proj-2-tuple(v_672))) in
        {230}let (hs_675: handshakestate,re_676: key,message_c_677: bitstring) = (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-7-tuple(v_651))))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if not-caught-fail(v_654) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-2-tuple(v_672))))) then (if not-caught-fail(v_673) then (if not-caught-fail(v_674) then (v_673,5-proj-7-tuple(v_651),v_674) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {231}event SendMsg(me_586,them_585,stage_c,msg_c(me_586,them_585),true);
        {232}insert statestore(me_586,them_585,statepack_d(hs_675));
        {233}out(pub, message_c_677)
    ) | (
        {269}get statestore(=me_586,=them_585,statepack_d(hs_678: handshakestate)) in
        {235}in(pub, message_d_679: bitstring);
        {236}let v_680: bitstring = catch-fail(handshakestateunpack(hs_678)) in
        {237}let v_681: bitstring = catch-fail(deconcat3(message_d_679)) in
        {238}let v_682: bool = catch-fail(true) in
        {239}let v_683: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_680))) in
        {240}let v_684: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_680))) in
        {241}let v_685: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_684),(if (success?(5-proj-7-tuple(v_680)) && success?(2-proj-7-tuple(v_680))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),5-proj-7-tuple(v_680)) else fail-any) else fail-any))) in
        {242}let v_686: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_684),(if (success?(5-proj-7-tuple(v_680)) && success?(2-proj-7-tuple(v_680))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),5-proj-7-tuple(v_680)) else fail-any) else fail-any))) in
        {243}let v_687: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_684),(if (success?(5-proj-7-tuple(v_680)) && success?(2-proj-7-tuple(v_680))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),5-proj-7-tuple(v_680)) else fail-any) else fail-any))) in
        {244}let v_688: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_680)) && success?(2-proj-7-tuple(v_680))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),5-proj-7-tuple(v_680)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_684))) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (if not-caught-fail(v_687) then (v_685,v_686,v_687) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_689: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_680)) && success?(2-proj-7-tuple(v_680))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),5-proj-7-tuple(v_680)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_680))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_688)) then cipherstatepack(2-proj-3-tuple(v_688),minnonce) else fail-any),1-proj-3-tuple(v_688),3-proj-3-tuple(v_684)) else fail-any) else fail-any) else fail-any)) in
        {246}let v_690: bitstring = catch-fail(symmetricstateunpack(v_689)) in
        {247}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_690))) in
        {248}let v_692: aead = catch-fail(decrypt(1-proj-2-tuple(v_691),2-proj-2-tuple(v_691),3-proj-3-tuple(v_690),3-proj-3-tuple(v_681))) in
        {249}let v_693: bitstring = catch-fail(aeadunpack(v_692)) in
        {250}let v_694: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_690))) in
        {251}let v_695: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_691))) && success?(1-proj-3-tuple(v_690))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then cipherstatepack(1-proj-2-tuple(v_694),increment_nonce(2-proj-2-tuple(v_691))) else fail-any) else fail-any)) in
        {252}let v_696: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_681)) && (success?(3-proj-3-tuple(v_690)) && success?(1-proj-3-tuple(v_690)))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then (if not-caught-fail(v_692) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,3-proj-3-tuple(v_693),1-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_697: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_696),2-proj-3-tuple(v_690),3-proj-3-tuple(v_690)))) in
        {254}let v_698: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_681)) && success?(symmetricstatepack(1-proj-3-tuple(v_696),2-proj-3-tuple(v_690),3-proj-3-tuple(v_690)))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then symmetricstatepack(1-proj-3-tuple(v_697),2-proj-3-tuple(v_697),hash(3-proj-3-tuple(v_697),3-proj-3-tuple(v_681))) else fail-any) else fail-any)) in
        {255}let v_699: bitstring = catch-fail((if success?(3-proj-3-tuple(v_681)) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if not-caught-fail(v_698) then (v_698,2-proj-3-tuple(v_696),3-proj-3-tuple(v_696)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_700: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_699),2-proj-7-tuple(v_680),3-proj-7-tuple(v_680),4-proj-7-tuple(v_680),5-proj-7-tuple(v_680),6-proj-7-tuple(v_680),7-proj-7-tuple(v_680))) in
        {257}let v_701: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_699))) in
        {258}let v_702: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_701),zero)) in
        {259}let v_703: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_701),zero)) in
        {260}let v_704: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_701),zero)) in
        {261}let v_705: bitstring = catch-fail((if success?(2-proj-3-tuple(v_701)) then (if not-caught-fail(v_702) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (v_702,v_703,v_704) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_706: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_705)) then cipherstatepack(1-proj-3-tuple(v_705),minnonce) else fail-any)) in
        {263}let v_707: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_705)) then cipherstatepack(2-proj-3-tuple(v_705),minnonce) else fail-any)) in
        {264}let v_708: bitstring = catch-fail((if success?(1-proj-3-tuple(v_699)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (1-proj-3-tuple(v_699),v_706,v_707) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {265}let (hs_709: handshakestate,re_710: key,plaintext_d_711: bitstring,valid_712: bool,cs1_713: cipherstate,cs2_714: cipherstate) = (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-7-tuple(v_680))))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if not-caught-fail(v_682) then (if not-caught-fail(v_689) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then (if (v_682 && 3-proj-3-tuple(v_699)) then (if not-caught-fail(v_700) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (v_700,getpublickey(3-proj-7-tuple(v_680)),2-proj-3-tuple(v_699),true,2-proj-3-tuple(v_708),3-proj-3-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {266}event RecvMsg(me_586,them_585,stage_d,plaintext_d_711,valid_712);
        {267}insert statestore(me_586,them_585,statepack_e(hs_709));
        {268}event RecvEnd(valid_712)
    ) | (
        {270}event LeakS(phase0,me_586);
        {271}out(pub, key_s(me_586))
    ) | (
        {272}phase 1;
        {273}event LeakS(phase1,me_586);
        {274}out(pub, key_s(me_586))
    )
) | (
    {275}let them_715: principal = alice in
    {276}let me_716: principal = bob in
    {277}let s_717: keypair = keypairpack(empty,empty) in
    (
        {278}let e_718: keypair = keypairpack(empty,empty) in
        {279}let rs_719: key = empty in
        {280}let re_720: key = empty in
        {281}let v_721: bitstring = catch-fail(hash(somename,empty)) in
        {282}let v_722: key = catch-fail(v_721) in
        {283}let v_723: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {284}let v_724: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then symmetricstatepack(v_723,v_722,v_721) else fail-any) else fail-any) else fail-any))) in
        {285}let v_725: symmetricstate = catch-fail((if success?((if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then symmetricstatepack(v_723,v_722,v_721) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then symmetricstatepack(1-proj-3-tuple(v_724),2-proj-3-tuple(v_724),hash(3-proj-3-tuple(v_724),empty)) else fail-any) else fail-any)) in
        {286}let hs_726: handshakestate = (if not-caught-fail(v_725) then handshakestatepack(v_725,s_717,e_718,rs_719,re_720,empty,false) else fail-any) in
        {287}insert statestore(me_716,them_715,statepack_a(hs_726))
    ) | (
        {309}get statestore(=me_716,=them_715,statepack_a(hs_727: handshakestate)) in
        {288}in(pub, message_a_728: bitstring);
        {289}let v_729: bitstring = catch-fail(handshakestateunpack(hs_727)) in
        {290}let v_730: bitstring = catch-fail(deconcat3(message_a_728)) in
        {291}let v_731: bool = catch-fail(true) in
        {292}let v_732: key = catch-fail(1-proj-3-tuple(v_730)) in
        {293}let v_733: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_729))) in
        {294}let v_734: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_729)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_733),hash(3-proj-3-tuple(v_733),v_732)) else fail-any) else fail-any)) in
        {295}let v_735: bitstring = catch-fail(symmetricstateunpack(v_734)) in
        {296}let v_736: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_735))) in
        {297}let v_737: aead = catch-fail(decrypt(1-proj-2-tuple(v_736),2-proj-2-tuple(v_736),3-proj-3-tuple(v_735),3-proj-3-tuple(v_730))) in
        {298}let v_738: bitstring = catch-fail(aeadunpack(v_737)) in
        {299}let v_739: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_735))) in
        {300}let v_740: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_736))) && success?(1-proj-3-tuple(v_735))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then cipherstatepack(1-proj-2-tuple(v_739),increment_nonce(2-proj-2-tuple(v_736))) else fail-any) else fail-any)) in
        {301}let v_741: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_730)) && (success?(3-proj-3-tuple(v_735)) && success?(1-proj-3-tuple(v_735)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then (if not-caught-fail(v_737) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if not-caught-fail(v_740) then (v_740,3-proj-3-tuple(v_738),1-proj-3-tuple(v_738)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {302}let v_742: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)))) in
        {303}let v_743: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_730)) && success?(symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then symmetricstatepack(1-proj-3-tuple(v_742),2-proj-3-tuple(v_742),hash(3-proj-3-tuple(v_742),3-proj-3-tuple(v_730))) else fail-any) else fail-any)) in
        {304}let v_744: bitstring = catch-fail((if success?(3-proj-3-tuple(v_730)) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_743) then (v_743,2-proj-3-tuple(v_741),3-proj-3-tuple(v_741)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {305}let v_745: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_744),2-proj-7-tuple(v_729),3-proj-7-tuple(v_729),4-proj-7-tuple(v_729),v_732,6-proj-7-tuple(v_729),7-proj-7-tuple(v_729))) in
        {306}let (hs_746: handshakestate,re_747: key,plaintext_a: bitstring,valid_748: bool) = (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-7-tuple(v_729))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_731) then (if not-caught-fail(v_732) then (if not-caught-fail(v_734) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (v_731 && 3-proj-3-tuple(v_744)) then (if not-caught-fail(v_745) then (v_745,getpublickey(3-proj-7-tuple(v_729)),2-proj-3-tuple(v_744),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {307}event RecvMsg(me_716,them_715,stage_a,plaintext_a,valid_748);
        {308}insert statestore(me_716,them_715,statepack_b(hs_746))
    ) | (
        {340}get statestore(=me_716,=them_715,statepack_b(hs_749: handshakestate)) in
        {310}let v_750: bitstring = catch-fail(handshakestateunpack(hs_749)) in
        {311}let v_751: bitstring = catch-fail((empty,empty,empty)) in
        {312}new key_e_752[me_716,them_715]: key;
        {313}let v_753: key = catch-fail(dhexp(key_e_752,g)) in
        {314}let v_754: keypair = catch-fail((if not-caught-fail(v_753) then keypairpack(v_753,key_e_752) else fail-any)) in
        {315}let v_755: bitstring = catch-fail(getpublickey(v_754)) in
        {316}let v_756: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_750))) in
        {317}let v_757: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_750)) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_756),hash(3-proj-3-tuple(v_756),v_755)) else fail-any) else fail-any)) in
        {318}let v_758: bitstring = catch-fail(keypairunpack(v_754)) in
        {319}let v_759: bitstring = catch-fail(symmetricstateunpack(v_757)) in
        {320}let v_760: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_759),(if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_750)) else fail-any) else fail-any))) in
        {321}let v_761: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_759),(if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_750)) else fail-any) else fail-any))) in
        {322}let v_762: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_759),(if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_750)) else fail-any) else fail-any))) in
        {323}let v_763: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_750)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_759))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (v_760,v_761,v_762) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {324}let v_764: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_750)) else fail-any) else fail-any)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_763)) then cipherstatepack(2-proj-3-tuple(v_763),minnonce) else fail-any),1-proj-3-tuple(v_763),3-proj-3-tuple(v_759)) else fail-any) else fail-any) else fail-any)) in
        {325}let v_765: bitstring = catch-fail(symmetricstateunpack(v_764)) in
        {326}let v_766: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {327}let v_767: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_766),2-proj-2-tuple(v_766),3-proj-3-tuple(v_765),msg_b(me_716,them_715))) in
        {328}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {329}let v_769: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_766))) && success?(1-proj-3-tuple(v_765))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then cipherstatepack(1-proj-2-tuple(v_768),increment_nonce(2-proj-2-tuple(v_766))) else fail-any) else fail-any)) in
        {330}let v_770: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_765)) && success?(1-proj-3-tuple(v_765))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then (if not-caught-fail(v_767) then (if not-caught-fail(v_769) then (v_769,v_767) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {331}let v_771: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_770),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) in
        {332}let v_772: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_770)) && success?(symmetricstatepack(1-proj-2-tuple(v_770),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_771),hash(3-proj-3-tuple(v_771),2-proj-2-tuple(v_770))) else fail-any) else fail-any)) in
        {333}let v_773: bitstring = catch-fail((if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then (if not-caught-fail(v_772) then (v_772,2-proj-2-tuple(v_770)) else fail-any) else fail-any) else fail-any)) in
        {334}let v_774: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_773),2-proj-7-tuple(v_750),v_754,4-proj-7-tuple(v_750),5-proj-7-tuple(v_750),6-proj-7-tuple(v_750),7-proj-7-tuple(v_750))) in
        {335}let v_775: bitstring = catch-fail(concat3(v_755,2-proj-3-tuple(v_751),2-proj-2-tuple(v_773))) in
        {336}let (hs_776: handshakestate,re_777: key,message_b_778: bitstring) = (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-7-tuple(v_750))))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_755) then (if not-caught-fail(v_757) then (if not-caught-fail(v_764) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-2-tuple(v_773))))) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (v_774,5-proj-7-tuple(v_750),v_775) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {337}event SendMsg(me_716,them_715,stage_b,msg_b(me_716,them_715),true);
        {338}insert statestore(me_716,them_715,statepack_c(hs_776));
        {339}out(pub, message_b_778)
    ) | (
        {371}get statestore(=me_716,=them_715,statepack_c(hs_779: handshakestate)) in
        {341}in(pub, message_c_780: bitstring);
        {342}let v_781: bitstring = catch-fail(handshakestateunpack(hs_779)) in
        {343}let v_782: bitstring = catch-fail(deconcat3(message_c_780)) in
        {344}let v_783: bool = catch-fail(true) in
        {345}let v_784: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_781))) in
        {346}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {347}let v_786: aead = catch-fail(decrypt(1-proj-2-tuple(v_785),2-proj-2-tuple(v_785),3-proj-3-tuple(v_784),2-proj-3-tuple(v_782))) in
        {348}let v_787: bitstring = catch-fail(aeadunpack(v_786)) in
        {349}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {350}let v_789: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_785))) && success?(1-proj-3-tuple(v_784))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then cipherstatepack(1-proj-2-tuple(v_788),increment_nonce(2-proj-2-tuple(v_785))) else fail-any) else fail-any)) in
        {351}let v_790: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_782)) && (success?(3-proj-3-tuple(v_784)) && success?(1-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_789) then (v_789,3-proj-3-tuple(v_787),1-proj-3-tuple(v_787)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_791: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) in
        {353}let v_792: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_782)) && success?(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_791),hash(3-proj-3-tuple(v_791),2-proj-3-tuple(v_782))) else fail-any) else fail-any)) in
        {354}let v_793: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_782)) && success?(1-proj-7-tuple(v_781))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_792) then (v_792,2-proj-3-tuple(v_790),3-proj-3-tuple(v_790)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_794: key = catch-fail(2-proj-3-tuple(v_793)) in
        {356}let v_795: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_793))) in
        {357}let v_796: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_795))) in
        {358}let v_797: aead = catch-fail(decrypt(1-proj-2-tuple(v_796),2-proj-2-tuple(v_796),3-proj-3-tuple(v_795),3-proj-3-tuple(v_782))) in
        {359}let v_798: bitstring = catch-fail(aeadunpack(v_797)) in
        {360}let v_799: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_795))) in
        {361}let v_800: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_796))) && success?(1-proj-3-tuple(v_795))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then cipherstatepack(1-proj-2-tuple(v_799),increment_nonce(2-proj-2-tuple(v_796))) else fail-any) else fail-any)) in
        {362}let v_801: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && (success?(3-proj-3-tuple(v_795)) && success?(1-proj-3-tuple(v_795)))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then (if not-caught-fail(v_797) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then (if not-caught-fail(v_800) then (v_800,3-proj-3-tuple(v_798),1-proj-3-tuple(v_798)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {363}let v_802: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_801),2-proj-3-tuple(v_795),3-proj-3-tuple(v_795)))) in
        {364}let v_803: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(symmetricstatepack(1-proj-3-tuple(v_801),2-proj-3-tuple(v_795),3-proj-3-tuple(v_795)))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then symmetricstatepack(1-proj-3-tuple(v_802),2-proj-3-tuple(v_802),hash(3-proj-3-tuple(v_802),3-proj-3-tuple(v_782))) else fail-any) else fail-any)) in
        {365}let v_804: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(1-proj-3-tuple(v_793))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if not-caught-fail(v_803) then (v_803,2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {366}let v_805: key = catch-fail(dhexp(key_s(them_715),g)) in
        {367}let v_806: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_804),2-proj-7-tuple(v_781),3-proj-7-tuple(v_781),v_794,5-proj-7-tuple(v_781),6-proj-7-tuple(v_781),7-proj-7-tuple(v_781))) in
        {368}let (hs_807: handshakestate,re_808: key,plaintext_c: bitstring,valid_809: bool) = (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-7-tuple(v_781))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_783) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if not-caught-fail(v_794) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if ((3-proj-3-tuple(v_793) && 3-proj-3-tuple(v_804)) && (v_794 = getpublickey((if not-caught-fail(v_805) then keypairpack(v_805,key_s(them_715)) else fail-any)))) then (if not-caught-fail(v_806) then (v_806,getpublickey(3-proj-7-tuple(v_781)),2-proj-3-tuple(v_804),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {369}event RecvMsg(me_716,them_715,stage_c,plaintext_c,valid_809);
        {370}insert statestore(me_716,them_715,statepack_d(hs_807))
    ) | (
        {404}get statestore(=me_716,=them_715,statepack_d(hs_810: handshakestate)) in
        {372}let v_811: bitstring = catch-fail(handshakestateunpack(hs_810)) in
        {373}let v_812: bitstring = catch-fail((empty,empty,empty)) in
        {374}let v_813: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_811))) in
        {375}let v_814: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_811))) in
        {376}let v_815: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_814),(if (success?(4-proj-7-tuple(v_811)) && success?(3-proj-7-tuple(v_811))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),4-proj-7-tuple(v_811)) else fail-any) else fail-any))) in
        {377}let v_816: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_814),(if (success?(4-proj-7-tuple(v_811)) && success?(3-proj-7-tuple(v_811))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),4-proj-7-tuple(v_811)) else fail-any) else fail-any))) in
        {378}let v_817: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_814),(if (success?(4-proj-7-tuple(v_811)) && success?(3-proj-7-tuple(v_811))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),4-proj-7-tuple(v_811)) else fail-any) else fail-any))) in
        {379}let v_818: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_811)) && success?(3-proj-7-tuple(v_811))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),4-proj-7-tuple(v_811)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_814))) then (if not-caught-fail(v_815) then (if not-caught-fail(v_816) then (if not-caught-fail(v_817) then (v_815,v_816,v_817) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_819: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_811)) && success?(3-proj-7-tuple(v_811))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),4-proj-7-tuple(v_811)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_811))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_818)) then cipherstatepack(2-proj-3-tuple(v_818),minnonce) else fail-any),1-proj-3-tuple(v_818),3-proj-3-tuple(v_814)) else fail-any) else fail-any) else fail-any)) in
        {381}let v_820: bitstring = catch-fail(symmetricstateunpack(v_819)) in
        {382}let v_821: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {383}let v_822: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_821),2-proj-2-tuple(v_821),3-proj-3-tuple(v_820),msg_d(me_716,them_715))) in
        {384}let v_823: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {385}let v_824: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_821))) && success?(1-proj-3-tuple(v_820))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then cipherstatepack(1-proj-2-tuple(v_823),increment_nonce(2-proj-2-tuple(v_821))) else fail-any) else fail-any)) in
        {386}let v_825: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_820)) && success?(1-proj-3-tuple(v_820))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then (if not-caught-fail(v_822) then (if not-caught-fail(v_824) then (v_824,v_822) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_826: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_825),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) in
        {388}let v_827: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_825)) && success?(symmetricstatepack(1-proj-2-tuple(v_825),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_826),hash(3-proj-3-tuple(v_826),2-proj-2-tuple(v_825))) else fail-any) else fail-any)) in
        {389}let v_828: bitstring = catch-fail((if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then (if not-caught-fail(v_827) then (v_827,2-proj-2-tuple(v_825)) else fail-any) else fail-any) else fail-any)) in
        {390}let v_829: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_828),2-proj-7-tuple(v_811),3-proj-7-tuple(v_811),4-proj-7-tuple(v_811),5-proj-7-tuple(v_811),6-proj-7-tuple(v_811),7-proj-7-tuple(v_811))) in
        {391}let v_830: bitstring = catch-fail(concat3(1-proj-3-tuple(v_812),2-proj-3-tuple(v_812),2-proj-2-tuple(v_828))) in
        {392}let v_831: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_828))) in
        {393}let v_832: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_831),zero)) in
        {394}let v_833: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_831),zero)) in
        {395}let v_834: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_831),zero)) in
        {396}let v_835: bitstring = catch-fail((if success?(2-proj-3-tuple(v_831)) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (v_832,v_833,v_834) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {397}let v_836: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_835)) then cipherstatepack(1-proj-3-tuple(v_835),minnonce) else fail-any)) in
        {398}let v_837: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_835)) then cipherstatepack(2-proj-3-tuple(v_835),minnonce) else fail-any)) in
        {399}let v_838: bitstring = catch-fail((if success?(1-proj-2-tuple(v_828)) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_836) then (if not-caught-fail(v_837) then (1-proj-2-tuple(v_828),v_836,v_837) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let (hs_839: handshakestate,re_840: key,message_d_841: bitstring,cs1_842: cipherstate,cs2_843: cipherstate) = (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-7-tuple(v_811))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if not-caught-fail(v_819) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-2-tuple(v_828))))) then (if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (v_829,5-proj-7-tuple(v_811),v_830,2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {401}event SendMsg(me_716,them_715,stage_d,msg_d(me_716,them_715),true);
        {402}insert statestore(me_716,them_715,statepack_e(hs_839));
        {403}out(pub, message_d_841)
    ) | (
        {405}event LeakS(phase0,me_716);
        {406}out(pub, key_s(me_716))
    ) | (
        {407}phase 1;
        {408}event LeakS(phase1,me_716);
        {409}out(pub, key_s(me_716))
    )
) | (
    {410}let them_844: principal = charlie in
    {411}let me_845: principal = bob in
    {412}let s_846: keypair = keypairpack(empty,empty) in
    (
        {413}let e_847: keypair = keypairpack(empty,empty) in
        {414}let rs_848: key = empty in
        {415}let re_849: key = empty in
        {416}let v_850: bitstring = catch-fail(hash(somename,empty)) in
        {417}let v_851: key = catch-fail(v_850) in
        {418}let v_852: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {419}let v_853: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_850) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then symmetricstatepack(v_852,v_851,v_850) else fail-any) else fail-any) else fail-any))) in
        {420}let v_854: symmetricstate = catch-fail((if success?((if not-caught-fail(v_850) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then symmetricstatepack(v_852,v_851,v_850) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then symmetricstatepack(1-proj-3-tuple(v_853),2-proj-3-tuple(v_853),hash(3-proj-3-tuple(v_853),empty)) else fail-any) else fail-any)) in
        {421}let hs_855: handshakestate = (if not-caught-fail(v_854) then handshakestatepack(v_854,s_846,e_847,rs_848,re_849,empty,false) else fail-any) in
        {422}insert statestore(me_845,them_844,statepack_a(hs_855))
    ) | (
        {444}get statestore(=me_845,=them_844,statepack_a(hs_856: handshakestate)) in
        {423}in(pub, message_a_857: bitstring);
        {424}let v_858: bitstring = catch-fail(handshakestateunpack(hs_856)) in
        {425}let v_859: bitstring = catch-fail(deconcat3(message_a_857)) in
        {426}let v_860: bool = catch-fail(true) in
        {427}let v_861: key = catch-fail(1-proj-3-tuple(v_859)) in
        {428}let v_862: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_858))) in
        {429}let v_863: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_858)) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then symmetricstatepack(1-proj-3-tuple(v_862),2-proj-3-tuple(v_862),hash(3-proj-3-tuple(v_862),v_861)) else fail-any) else fail-any)) in
        {430}let v_864: bitstring = catch-fail(symmetricstateunpack(v_863)) in
        {431}let v_865: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {432}let v_866: aead = catch-fail(decrypt(1-proj-2-tuple(v_865),2-proj-2-tuple(v_865),3-proj-3-tuple(v_864),3-proj-3-tuple(v_859))) in
        {433}let v_867: bitstring = catch-fail(aeadunpack(v_866)) in
        {434}let v_868: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {435}let v_869: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_865))) && success?(1-proj-3-tuple(v_864))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-2-tuple(v_868))))) then cipherstatepack(1-proj-2-tuple(v_868),increment_nonce(2-proj-2-tuple(v_865))) else fail-any) else fail-any)) in
        {436}let v_870: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_859)) && (success?(3-proj-3-tuple(v_864)) && success?(1-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then (if not-caught-fail(v_866) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if not-caught-fail(v_869) then (v_869,3-proj-3-tuple(v_867),1-proj-3-tuple(v_867)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {437}let v_871: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) in
        {438}let v_872: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_859)) && success?(symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then symmetricstatepack(1-proj-3-tuple(v_871),2-proj-3-tuple(v_871),hash(3-proj-3-tuple(v_871),3-proj-3-tuple(v_859))) else fail-any) else fail-any)) in
        {439}let v_873: bitstring = catch-fail((if success?(3-proj-3-tuple(v_859)) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if not-caught-fail(v_872) then (v_872,2-proj-3-tuple(v_870),3-proj-3-tuple(v_870)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {440}let v_874: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_873),2-proj-7-tuple(v_858),3-proj-7-tuple(v_858),4-proj-7-tuple(v_858),v_861,6-proj-7-tuple(v_858),7-proj-7-tuple(v_858))) in
        {441}let (hs_875: handshakestate,re_876: key,plaintext_a_877: bitstring,valid_878: bool) = (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-7-tuple(v_858))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (if not-caught-fail(v_863) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if (v_860 && 3-proj-3-tuple(v_873)) then (if not-caught-fail(v_874) then (v_874,getpublickey(3-proj-7-tuple(v_858)),2-proj-3-tuple(v_873),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {442}event RecvMsg(me_845,them_844,stage_a,plaintext_a_877,valid_878);
        {443}insert statestore(me_845,them_844,statepack_b(hs_875))
    ) | (
        {475}get statestore(=me_845,=them_844,statepack_b(hs_879: handshakestate)) in
        {445}let v_880: bitstring = catch-fail(handshakestateunpack(hs_879)) in
        {446}let v_881: bitstring = catch-fail((empty,empty,empty)) in
        {447}new key_e_882[me_845,them_844]: key;
        {448}let v_883: key = catch-fail(dhexp(key_e_882,g)) in
        {449}let v_884: keypair = catch-fail((if not-caught-fail(v_883) then keypairpack(v_883,key_e_882) else fail-any)) in
        {450}let v_885: bitstring = catch-fail(getpublickey(v_884)) in
        {451}let v_886: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_880))) in
        {452}let v_887: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_880)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then symmetricstatepack(1-proj-3-tuple(v_886),2-proj-3-tuple(v_886),hash(3-proj-3-tuple(v_886),v_885)) else fail-any) else fail-any)) in
        {453}let v_888: bitstring = catch-fail(keypairunpack(v_884)) in
        {454}let v_889: bitstring = catch-fail(symmetricstateunpack(v_887)) in
        {455}let v_890: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_889),(if success?(5-proj-7-tuple(v_880)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_880)) else fail-any) else fail-any))) in
        {456}let v_891: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_889),(if success?(5-proj-7-tuple(v_880)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_880)) else fail-any) else fail-any))) in
        {457}let v_892: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_889),(if success?(5-proj-7-tuple(v_880)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_880)) else fail-any) else fail-any))) in
        {458}let v_893: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_880)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_880)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_889))) then (if not-caught-fail(v_890) then (if not-caught-fail(v_891) then (if not-caught-fail(v_892) then (v_890,v_891,v_892) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_894: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_880)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_880)) else fail-any) else fail-any)) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_893)) then cipherstatepack(2-proj-3-tuple(v_893),minnonce) else fail-any),1-proj-3-tuple(v_893),3-proj-3-tuple(v_889)) else fail-any) else fail-any) else fail-any)) in
        {460}let v_895: bitstring = catch-fail(symmetricstateunpack(v_894)) in
        {461}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {462}let v_897: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_896),2-proj-2-tuple(v_896),3-proj-3-tuple(v_895),msg_b(me_845,them_844))) in
        {463}let v_898: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {464}let v_899: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_896))) && success?(1-proj-3-tuple(v_895))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then cipherstatepack(1-proj-2-tuple(v_898),increment_nonce(2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {465}let v_900: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_895)) && success?(1-proj-3-tuple(v_895))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_899) then (v_899,v_897) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {466}let v_901: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_900),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) in
        {467}let v_902: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_900)) && success?(symmetricstatepack(1-proj-2-tuple(v_900),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_901),hash(3-proj-3-tuple(v_901),2-proj-2-tuple(v_900))) else fail-any) else fail-any)) in
        {468}let v_903: bitstring = catch-fail((if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then (if not-caught-fail(v_902) then (v_902,2-proj-2-tuple(v_900)) else fail-any) else fail-any) else fail-any)) in
        {469}let v_904: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_903),2-proj-7-tuple(v_880),v_884,4-proj-7-tuple(v_880),5-proj-7-tuple(v_880),6-proj-7-tuple(v_880),7-proj-7-tuple(v_880))) in
        {470}let v_905: bitstring = catch-fail(concat3(v_885,2-proj-3-tuple(v_881),2-proj-2-tuple(v_903))) in
        {471}let (hs_906: handshakestate,re_907: key,message_b_908: bitstring) = (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-7-tuple(v_880))))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if not-caught-fail(v_884) then (if not-caught-fail(v_885) then (if not-caught-fail(v_887) then (if not-caught-fail(v_894) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then (if not-caught-fail(v_904) then (if not-caught-fail(v_905) then (v_904,5-proj-7-tuple(v_880),v_905) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {472}event SendMsg(me_845,them_844,stage_b,msg_b(me_845,them_844),true);
        {473}insert statestore(me_845,them_844,statepack_c(hs_906));
        {474}out(pub, message_b_908)
    ) | (
        {506}get statestore(=me_845,=them_844,statepack_c(hs_909: handshakestate)) in
        {476}in(pub, message_c_910: bitstring);
        {477}let v_911: bitstring = catch-fail(handshakestateunpack(hs_909)) in
        {478}let v_912: bitstring = catch-fail(deconcat3(message_c_910)) in
        {479}let v_913: bool = catch-fail(true) in
        {480}let v_914: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_911))) in
        {481}let v_915: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_914))) in
        {482}let v_916: aead = catch-fail(decrypt(1-proj-2-tuple(v_915),2-proj-2-tuple(v_915),3-proj-3-tuple(v_914),2-proj-3-tuple(v_912))) in
        {483}let v_917: bitstring = catch-fail(aeadunpack(v_916)) in
        {484}let v_918: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_914))) in
        {485}let v_919: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_915))) && success?(1-proj-3-tuple(v_914))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-2-tuple(v_918))))) then cipherstatepack(1-proj-2-tuple(v_918),increment_nonce(2-proj-2-tuple(v_915))) else fail-any) else fail-any)) in
        {486}let v_920: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_912)) && (success?(3-proj-3-tuple(v_914)) && success?(1-proj-3-tuple(v_914)))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then (if not-caught-fail(v_916) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if not-caught-fail(v_919) then (v_919,3-proj-3-tuple(v_917),1-proj-3-tuple(v_917)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {487}let v_921: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_920),2-proj-3-tuple(v_914),3-proj-3-tuple(v_914)))) in
        {488}let v_922: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_912)) && success?(symmetricstatepack(1-proj-3-tuple(v_920),2-proj-3-tuple(v_914),3-proj-3-tuple(v_914)))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then symmetricstatepack(1-proj-3-tuple(v_921),2-proj-3-tuple(v_921),hash(3-proj-3-tuple(v_921),2-proj-3-tuple(v_912))) else fail-any) else fail-any)) in
        {489}let v_923: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_912)) && success?(1-proj-7-tuple(v_911))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then (if not-caught-fail(v_922) then (v_922,2-proj-3-tuple(v_920),3-proj-3-tuple(v_920)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {490}let v_924: key = catch-fail(2-proj-3-tuple(v_923)) in
        {491}let v_925: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_923))) in
        {492}let v_926: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_925))) in
        {493}let v_927: aead = catch-fail(decrypt(1-proj-2-tuple(v_926),2-proj-2-tuple(v_926),3-proj-3-tuple(v_925),3-proj-3-tuple(v_912))) in
        {494}let v_928: bitstring = catch-fail(aeadunpack(v_927)) in
        {495}let v_929: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_925))) in
        {496}let v_930: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_926))) && success?(1-proj-3-tuple(v_925))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then cipherstatepack(1-proj-2-tuple(v_929),increment_nonce(2-proj-2-tuple(v_926))) else fail-any) else fail-any)) in
        {497}let v_931: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_912)) && (success?(3-proj-3-tuple(v_925)) && success?(1-proj-3-tuple(v_925)))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-2-tuple(v_926))))) then (if not-caught-fail(v_927) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if not-caught-fail(v_930) then (v_930,3-proj-3-tuple(v_928),1-proj-3-tuple(v_928)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_932: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_931),2-proj-3-tuple(v_925),3-proj-3-tuple(v_925)))) in
        {499}let v_933: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_912)) && success?(symmetricstatepack(1-proj-3-tuple(v_931),2-proj-3-tuple(v_925),3-proj-3-tuple(v_925)))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then symmetricstatepack(1-proj-3-tuple(v_932),2-proj-3-tuple(v_932),hash(3-proj-3-tuple(v_932),3-proj-3-tuple(v_912))) else fail-any) else fail-any)) in
        {500}let v_934: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_912)) && success?(1-proj-3-tuple(v_923))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if not-caught-fail(v_933) then (v_933,2-proj-3-tuple(v_931),3-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_935: key = catch-fail(dhexp(key_s(them_844),g)) in
        {502}let v_936: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_934),2-proj-7-tuple(v_911),3-proj-7-tuple(v_911),v_924,5-proj-7-tuple(v_911),6-proj-7-tuple(v_911),7-proj-7-tuple(v_911))) in
        {503}let (hs_937: handshakestate,re_938: key,plaintext_c_939: bitstring,valid_940: bool) = (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-7-tuple(v_911))))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then (if not-caught-fail(v_913) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (if not-caught-fail(v_924) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if ((3-proj-3-tuple(v_923) && 3-proj-3-tuple(v_934)) && (v_924 = getpublickey((if not-caught-fail(v_935) then keypairpack(v_935,key_s(them_844)) else fail-any)))) then (if not-caught-fail(v_936) then (v_936,getpublickey(3-proj-7-tuple(v_911)),2-proj-3-tuple(v_934),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {504}event RecvMsg(me_845,them_844,stage_c,plaintext_c_939,valid_940);
        {505}insert statestore(me_845,them_844,statepack_d(hs_937))
    ) | (
        {539}get statestore(=me_845,=them_844,statepack_d(hs_941: handshakestate)) in
        {507}let v_942: bitstring = catch-fail(handshakestateunpack(hs_941)) in
        {508}let v_943: bitstring = catch-fail((empty,empty,empty)) in
        {509}let v_944: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_942))) in
        {510}let v_945: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_942))) in
        {511}let v_946: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_945),(if (success?(4-proj-7-tuple(v_942)) && success?(3-proj-7-tuple(v_942))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_942)) else fail-any) else fail-any))) in
        {512}let v_947: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_945),(if (success?(4-proj-7-tuple(v_942)) && success?(3-proj-7-tuple(v_942))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_942)) else fail-any) else fail-any))) in
        {513}let v_948: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_945),(if (success?(4-proj-7-tuple(v_942)) && success?(3-proj-7-tuple(v_942))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_942)) else fail-any) else fail-any))) in
        {514}let v_949: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_942)) && success?(3-proj-7-tuple(v_942))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_942)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_945))) then (if not-caught-fail(v_946) then (if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (v_946,v_947,v_948) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {515}let v_950: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_942)) && success?(3-proj-7-tuple(v_942))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then dhexp(2-proj-2-tuple(v_944),4-proj-7-tuple(v_942)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_942))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_949)) then cipherstatepack(2-proj-3-tuple(v_949),minnonce) else fail-any),1-proj-3-tuple(v_949),3-proj-3-tuple(v_945)) else fail-any) else fail-any) else fail-any)) in
        {516}let v_951: bitstring = catch-fail(symmetricstateunpack(v_950)) in
        {517}let v_952: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_951))) in
        {518}let v_953: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_952),2-proj-2-tuple(v_952),3-proj-3-tuple(v_951),msg_d(me_845,them_844))) in
        {519}let v_954: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_951))) in
        {520}let v_955: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_952))) && success?(1-proj-3-tuple(v_951))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-2-tuple(v_954))))) then cipherstatepack(1-proj-2-tuple(v_954),increment_nonce(2-proj-2-tuple(v_952))) else fail-any) else fail-any)) in
        {521}let v_956: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_951)) && success?(1-proj-3-tuple(v_951))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then (if not-caught-fail(v_953) then (if not-caught-fail(v_955) then (v_955,v_953) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {522}let v_957: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_956),2-proj-3-tuple(v_951),3-proj-3-tuple(v_951)))) in
        {523}let v_958: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_956)) && success?(symmetricstatepack(1-proj-2-tuple(v_956),2-proj-3-tuple(v_951),3-proj-3-tuple(v_951)))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then symmetricstatepack(1-proj-3-tuple(v_957),2-proj-3-tuple(v_957),hash(3-proj-3-tuple(v_957),2-proj-2-tuple(v_956))) else fail-any) else fail-any)) in
        {524}let v_959: bitstring = catch-fail((if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then (if not-caught-fail(v_958) then (v_958,2-proj-2-tuple(v_956)) else fail-any) else fail-any) else fail-any)) in
        {525}let v_960: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_959),2-proj-7-tuple(v_942),3-proj-7-tuple(v_942),4-proj-7-tuple(v_942),5-proj-7-tuple(v_942),6-proj-7-tuple(v_942),7-proj-7-tuple(v_942))) in
        {526}let v_961: bitstring = catch-fail(concat3(1-proj-3-tuple(v_943),2-proj-3-tuple(v_943),2-proj-2-tuple(v_959))) in
        {527}let v_962: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_959))) in
        {528}let v_963: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_962),zero)) in
        {529}let v_964: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_962),zero)) in
        {530}let v_965: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_962),zero)) in
        {531}let v_966: bitstring = catch-fail((if success?(2-proj-3-tuple(v_962)) then (if not-caught-fail(v_963) then (if not-caught-fail(v_964) then (if not-caught-fail(v_965) then (v_963,v_964,v_965) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_967: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_966)) then cipherstatepack(1-proj-3-tuple(v_966),minnonce) else fail-any)) in
        {533}let v_968: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_966)) then cipherstatepack(2-proj-3-tuple(v_966),minnonce) else fail-any)) in
        {534}let v_969: bitstring = catch-fail((if success?(1-proj-2-tuple(v_959)) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if not-caught-fail(v_967) then (if not-caught-fail(v_968) then (1-proj-2-tuple(v_959),v_967,v_968) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let (hs_970: handshakestate,re_971: key,message_d_972: bitstring,cs1_973: cipherstate,cs2_974: cipherstate) = (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-7-tuple(v_942))))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then (if not-caught-fail(v_950) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then (if not-caught-fail(v_960) then (if not-caught-fail(v_961) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (v_960,5-proj-7-tuple(v_942),v_961,2-proj-3-tuple(v_969),3-proj-3-tuple(v_969)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {536}event SendMsg(me_845,them_844,stage_d,msg_d(me_845,them_844),true);
        {537}insert statestore(me_845,them_844,statepack_e(hs_970));
        {538}out(pub, message_d_972)
    ) | (
        {540}event LeakS(phase0,me_845);
        {541}out(pub, key_s(me_845))
    ) | (
        {542}phase 1;
        {543}event LeakS(phase1,me_845);
        {544}out(pub, key_s(me_845))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 138 rules in the queue.
400 rules inserted. The rule base contains 391 rules. 63 rules in the queue.
600 rules inserted. The rule base contains 566 rules. 175 rules in the queue.
800 rules inserted. The rule base contains 728 rules. 115 rules in the queue.
1000 rules inserted. The rule base contains 882 rules. 151 rules in the queue.
1200 rules inserted. The rule base contains 1041 rules. 146 rules in the queue.
1400 rules inserted. The rule base contains 1195 rules. 176 rules in the queue.
1600 rules inserted. The rule base contains 1329 rules. 204 rules in the queue.
1800 rules inserted. The rule base contains 1395 rules. 168 rules in the queue.
2000 rules inserted. The rule base contains 1480 rules. 173 rules in the queue.
2200 rules inserted. The rule base contains 1584 rules. 166 rules in the queue.
2400 rules inserted. The rule base contains 1717 rules. 171 rules in the queue.
2600 rules inserted. The rule base contains 1835 rules. 148 rules in the queue.
2800 rules inserted. The rule base contains 1927 rules. 143 rules in the queue.
3000 rules inserted. The rule base contains 2017 rules. 111 rules in the queue.
3200 rules inserted. The rule base contains 2111 rules. 94 rules in the queue.
3400 rules inserted. The rule base contains 2245 rules. 118 rules in the queue.
3600 rules inserted. The rule base contains 2380 rules. 123 rules in the queue.
3800 rules inserted. The rule base contains 2529 rules. 46 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_36731149 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_36731131]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the message concat3(dhexp(key_e_36731149,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731149,g)),msg_a(alice,charlie))) may be sent on channel pub at output {175}.
mess(pub,concat3(dhexp(key_e_36731149,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731149,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {309}.
The message concat3(dhexp(key_e_36731149,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731149,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_36731149,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {307}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_36731187 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_36731169]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the message concat3(dhexp(key_e_36731187,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731187,g)),msg_a(alice,charlie))) may be sent on channel pub at output {175}.
mess(pub,concat3(dhexp(key_e_36731187,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731187,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {309}.
The message concat3(dhexp(key_e_36731187,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731187,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_36731187,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {307}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_36731219 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_36731201]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the message concat3(dhexp(key_e_36731219,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731219,g)),msg_a(alice,charlie))) may be sent on channel pub at output {175}.
mess(pub,concat3(dhexp(key_e_36731219,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731219,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {309}.
The message concat3(dhexp(key_e_36731219,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731219,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_36731219,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {307}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_36731269 = key_e[me = alice,them = bob,!1 = @sid_36731255]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_36731269,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_36731269,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_36731269,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_36731269,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_36731269,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_36731269,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_36731269,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_36731269,g).
attacker(dhexp(key_36731269,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_36731269,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731269,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_36731319 = key_e[me = alice,them = bob,!1 = @sid_36731305]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_36731319,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_36731319,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_36731319,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_36731319,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_36731319,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_36731319,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_36731319,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_36731319,g).
attacker(dhexp(key_36731319,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_36731319,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731319,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_36731370 = key_e[me = alice,them = bob,!1 = @sid_36731356]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_36731370,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_36731370,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_36731370,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_36731370,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_36731370,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_36731370,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_36731370,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_36731370,g).
attacker(dhexp(key_36731370,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_36731370,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731370,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_36731420 = key_e[me = alice,them = bob,!1 = @sid_36731406]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_36731420,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_36731420,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_36731420,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_36731420,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_36731420,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_36731420,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_36731420,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_36731420,g).
attacker(dhexp(key_36731420,g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_36731420,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_36731420,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_36731488 = key_e_882[me_845 = bob,them_844 = charlie,!1 = @sid_36731472]
key_36731489 = key_e[me = alice,them = bob,!1 = @sid_36731446]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_36731489,g),key_36731489),empty,empty,empty,true))) may be inserted in a table at insert {38}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_36731489,g),key_36731489),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {422}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_36731489,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_36731489,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {444}.
The message concat3(dhexp(key_36731489,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {423}.
We have dhexp(key_36731489,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_36731489,g),empty,false))) may be inserted in a table at insert {443}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_36731489,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_36731489,g),empty,false))) that may be in a table by 6 may be read at get {475}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {472}.
So the message concat3(dhexp(key_e_36731488,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_36731489,dhexp(key_e_36731488,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob))),dhexp(key_e_36731488,g)),msg_b(bob,charlie))) may be sent on channel pub at output {474}.
mess(pub,concat3(dhexp(key_e_36731488,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_36731489,dhexp(key_e_36731488,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob))),dhexp(key_e_36731488,g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_36731489,g),key_36731489),empty,empty,empty,true))) that may be in a table by 2 may be read at get {69}.
The message concat3(dhexp(key_e_36731488,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_36731489,dhexp(key_e_36731488,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731489,g)),msg_a(alice,bob))),dhexp(key_e_36731488,g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {41}.
We have dhexp(key_e_36731488,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {67}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_36731563 = key_e_882[me_845 = bob,them_844 = charlie,!1 = @sid_36731547]
key_36731564 = key_e[me = alice,them = bob,!1 = @sid_36731521]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_36731564,g),key_36731564),empty,empty,empty,true))) may be inserted in a table at insert {38}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_36731564,g),key_36731564),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {422}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_36731564,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_36731564,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {444}.
The message concat3(dhexp(key_36731564,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {423}.
We have dhexp(key_36731564,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_36731564,g),empty,false))) may be inserted in a table at insert {443}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_36731564,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_36731564,g),empty,false))) that may be in a table by 6 may be read at get {475}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {472}.
So the message concat3(dhexp(key_e_36731563,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_36731564,dhexp(key_e_36731563,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob))),dhexp(key_e_36731563,g)),msg_b(bob,charlie))) may be sent on channel pub at output {474}.
mess(pub,concat3(dhexp(key_e_36731563,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_36731564,dhexp(key_e_36731563,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob))),dhexp(key_e_36731563,g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_36731564,g),key_36731564),empty,empty,empty,true))) that may be in a table by 2 may be read at get {69}.
The message concat3(dhexp(key_e_36731563,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_36731564,dhexp(key_e_36731563,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731564,g)),msg_a(alice,bob))),dhexp(key_e_36731563,g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {41}.
We have dhexp(key_e_36731563,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {67}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_36731632 = key_e_882[me_845 = bob,them_844 = charlie,!1 = @sid_36731616]
key_36731633 = key_e[me = alice,them = bob,!1 = @sid_36731590]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_36731633,g),key_36731633),empty,empty,empty,true))) may be inserted in a table at insert {38}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_36731633,g),key_36731633),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {422}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {40}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {37}.
So the message concat3(dhexp(key_36731633,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob))) may be sent on channel pub at output {39}.
mess(pub,concat3(dhexp(key_36731633,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {444}.
The message concat3(dhexp(key_36731633,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {423}.
We have dhexp(key_36731633,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_36731633,g),empty,false))) may be inserted in a table at insert {443}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_36731633,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_36731633,g),empty,false))) that may be in a table by 6 may be read at get {475}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {472}.
So the message concat3(dhexp(key_e_36731632,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_36731633,dhexp(key_e_36731632,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob))),dhexp(key_e_36731632,g)),msg_b(bob,charlie))) may be sent on channel pub at output {474}.
mess(pub,concat3(dhexp(key_e_36731632,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_36731633,dhexp(key_e_36731632,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob))),dhexp(key_e_36731632,g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_36731633,g),key_36731633),empty,empty,empty,true))) that may be in a table by 2 may be read at get {69}.
The message concat3(dhexp(key_e_36731632,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_36731633,dhexp(key_e_36731632,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_36731633,g)),msg_a(alice,bob))),dhexp(key_e_36731632,g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {41}.
We have dhexp(key_e_36731632,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {67}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
Abbreviations:
key_e_36731765 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_36731698]
key_e_36731766 = key_e_752[me_716 = bob,them_715 = alice,!1 = @sid_36731724]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the message concat3(dhexp(key_e_36731765,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))) may be sent on channel pub at output {175}.
mess(pub,concat3(dhexp(key_e_36731765,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {309}.
The message concat3(dhexp(key_e_36731765,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_36731765,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731765,g),empty,false))) may be inserted in a table at insert {308}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731765,g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731765,g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {337}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731766,dhexp(key_e_36731765,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731766,g),key_e_36731766),empty,dhexp(key_e_36731765,g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731766,dhexp(key_e_36731765,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731766,g),key_e_36731766),empty,dhexp(key_e_36731765,g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731765,g),key_e_36731765),empty,empty,empty,true))) may be inserted in a table at insert {174}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731765,g),key_e_36731765),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the message concat3(dhexp(key_e_36731765,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))) may be sent on channel pub at output {175}.
mess(pub,concat3(dhexp(key_e_36731765,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {309}.
The message concat3(dhexp(key_e_36731765,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {288}.
We have dhexp(key_e_36731765,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731765,g),empty,false))) may be inserted in a table at insert {308}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731765,g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731765,g),empty,false))) that may be in a table by 11 may be read at get {340}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {337}.
So the message concat3(dhexp(key_e_36731766,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))) may be sent on channel pub at output {339}.
mess(pub,concat3(dhexp(key_e_36731766,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731765,g),key_e_36731765),empty,empty,empty,true))) that may be in a table by 7 may be read at get {205}.
The message concat3(dhexp(key_e_36731766,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {177}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731766,dhexp(key_e_36731765,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731765,g),key_e_36731765),empty,dhexp(key_e_36731766,g),empty,true))) may be inserted in a table at insert {204}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731766,dhexp(key_e_36731765,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731765,g),key_e_36731765),empty,dhexp(key_e_36731766,g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731766,dhexp(key_e_36731765,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731765,g),key_e_36731765),empty,dhexp(key_e_36731766,g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731766,dhexp(key_e_36731765,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731766,g),key_e_36731766),empty,dhexp(key_e_36731765,g),empty,false))) that may be in a table by 5 may be read at get {371}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731765,dhexp(key_e_36731766,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731765,g)),msg_a(alice,charlie))),dhexp(key_e_36731766,g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {341}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {369}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
Abbreviations:
key_e_36731903 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_36731836]
key_e_36731904 = key_e_752[me_716 = bob,them_715 = alice,!1 = @sid_36731862]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the message concat3(dhexp(key_e_36731903,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))) may be sent on channel pub at output {175}.
mess(pub,concat3(dhexp(key_e_36731903,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {309}.
The message concat3(dhexp(key_e_36731903,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_36731903,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731903,g),empty,false))) may be inserted in a table at insert {308}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731903,g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731903,g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {337}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731904,dhexp(key_e_36731903,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731904,g),key_e_36731904),empty,dhexp(key_e_36731903,g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731904,dhexp(key_e_36731903,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731904,g),key_e_36731904),empty,dhexp(key_e_36731903,g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731903,g),key_e_36731903),empty,empty,empty,true))) may be inserted in a table at insert {174}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731903,g),key_e_36731903),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the message concat3(dhexp(key_e_36731903,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))) may be sent on channel pub at output {175}.
mess(pub,concat3(dhexp(key_e_36731903,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {309}.
The message concat3(dhexp(key_e_36731903,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {288}.
We have dhexp(key_e_36731903,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731903,g),empty,false))) may be inserted in a table at insert {308}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731903,g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36731903,g),empty,false))) that may be in a table by 11 may be read at get {340}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {337}.
So the message concat3(dhexp(key_e_36731904,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))) may be sent on channel pub at output {339}.
mess(pub,concat3(dhexp(key_e_36731904,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731903,g),key_e_36731903),empty,empty,empty,true))) that may be in a table by 7 may be read at get {205}.
The message concat3(dhexp(key_e_36731904,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {177}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731904,dhexp(key_e_36731903,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731903,g),key_e_36731903),empty,dhexp(key_e_36731904,g),empty,true))) may be inserted in a table at insert {204}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731904,dhexp(key_e_36731903,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731903,g),key_e_36731903),empty,dhexp(key_e_36731904,g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731904,dhexp(key_e_36731903,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731903,g),key_e_36731903),empty,dhexp(key_e_36731904,g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36731904,dhexp(key_e_36731903,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36731904,g),key_e_36731904),empty,dhexp(key_e_36731903,g),empty,false))) that may be in a table by 5 may be read at get {371}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36731903,dhexp(key_e_36731904,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36731903,g)),msg_a(alice,charlie))),dhexp(key_e_36731904,g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {341}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {369}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
Abbreviations:
key_e_36732035 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_36731968]
key_e_36732036 = key_e_752[me_716 = bob,them_715 = alice,!1 = @sid_36731994]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the message concat3(dhexp(key_e_36732035,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))) may be sent on channel pub at output {175}.
mess(pub,concat3(dhexp(key_e_36732035,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {309}.
The message concat3(dhexp(key_e_36732035,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_36732035,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36732035,g),empty,false))) may be inserted in a table at insert {308}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36732035,g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36732035,g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {337}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36732036,dhexp(key_e_36732035,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36732036,g),key_e_36732036),empty,dhexp(key_e_36732035,g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36732036,dhexp(key_e_36732035,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36732036,g),key_e_36732036),empty,dhexp(key_e_36732035,g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36732035,g),key_e_36732035),empty,empty,empty,true))) may be inserted in a table at insert {174}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36732035,g),key_e_36732035),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {176}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {173}.
So the message concat3(dhexp(key_e_36732035,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))) may be sent on channel pub at output {175}.
mess(pub,concat3(dhexp(key_e_36732035,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {309}.
The message concat3(dhexp(key_e_36732035,g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {288}.
We have dhexp(key_e_36732035,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36732035,g),empty,false))) may be inserted in a table at insert {308}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36732035,g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e_36732035,g),empty,false))) that may be in a table by 11 may be read at get {340}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {337}.
So the message concat3(dhexp(key_e_36732036,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))) may be sent on channel pub at output {339}.
mess(pub,concat3(dhexp(key_e_36732036,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36732035,g),key_e_36732035),empty,empty,empty,true))) that may be in a table by 7 may be read at get {205}.
The message concat3(dhexp(key_e_36732036,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {177}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36732036,dhexp(key_e_36732035,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36732035,g),key_e_36732035),empty,dhexp(key_e_36732036,g),empty,true))) may be inserted in a table at insert {204}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36732036,dhexp(key_e_36732035,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36732035,g),key_e_36732035),empty,dhexp(key_e_36732036,g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36732036,dhexp(key_e_36732035,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36732035,g),key_e_36732035),empty,dhexp(key_e_36732036,g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e_36732036,dhexp(key_e_36732035,g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_36732036,g),key_e_36732036),empty,dhexp(key_e_36732035,g),empty,false))) that may be in a table by 5 may be read at get {371}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e_36732035,dhexp(key_e_36732036,g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_36732035,g)),msg_a(alice,charlie))),dhexp(key_e_36732036,g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {341}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {369}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
