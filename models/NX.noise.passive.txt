File "NX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 274, character 7 - line 274, character 8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 275, character 7 - line 275, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 275, character 36 - line 275, character 36:
Warning: identifier h rebound.
File "NX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 314, character 6 - line 314, character 6:
Warning: identifier e rebound.
File "NX.noise.passive.pv", line 315, character 6 - line 315, character 7:
Warning: identifier ne rebound.
File "NX.noise.passive.pv", line 316, character 6 - line 316, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 318, character 7 - line 318, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 318, character 26 - line 318, character 36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 319, character 6 - line 319, character 7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 326, character 6 - line 326, character 6:
Warning: identifier e rebound.
File "NX.noise.passive.pv", line 327, character 6 - line 327, character 7:
Warning: identifier ne rebound.
File "NX.noise.passive.pv", line 328, character 6 - line 328, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 331, character 6 - line 331, character 6:
Warning: identifier s rebound.
File "NX.noise.passive.pv", line 332, character 7 - line 332, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 332, character 26 - line 332, character 36:
Warning: identifier ciphertext1 rebound.
File "NX.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 334, character 7 - line 334, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 334, character 26 - line 334, character 36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 335, character 6 - line 335, character 7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 342, character 7 - line 342, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 342, character 26 - line 342, character 36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 343, character 6 - line 343, character 7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 352, character 6 - line 352, character 7:
Warning: identifier re rebound.
File "NX.noise.passive.pv", line 353, character 6 - line 353, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 355, character 7 - line 355, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 357, character 7 - line 357, character 8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 365, character 6 - line 365, character 7:
Warning: identifier re rebound.
File "NX.noise.passive.pv", line 366, character 6 - line 366, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 368, character 6 - line 368, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 369, character 7 - line 369, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 369, character 48 - line 369, character 53:
Warning: identifier valid1 rebound.
File "NX.noise.passive.pv", line 370, character 6 - line 370, character 7:
Warning: identifier rs rebound.
File "NX.noise.passive.pv", line 371, character 6 - line 371, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 372, character 7 - line 372, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 374, character 7 - line 374, character 8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 382, character 7 - line 382, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 384, character 7 - line 384, character 8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 503, character 8 - line 503, character 9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 342, character 7 - line 342, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 342, character 26 - line 342, character 36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 343, character 6 - line 343, character 7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 496, character 8 - line 496, character 9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 365, character 6 - line 365, character 7:
Warning: identifier re rebound.
File "NX.noise.passive.pv", line 366, character 6 - line 366, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 368, character 6 - line 368, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 369, character 7 - line 369, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 369, character 48 - line 369, character 53:
Warning: identifier valid1 rebound.
File "NX.noise.passive.pv", line 370, character 6 - line 370, character 7:
Warning: identifier rs rebound.
File "NX.noise.passive.pv", line 371, character 6 - line 371, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 372, character 7 - line 372, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 374, character 7 - line 374, character 8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 488, character 8 - line 488, character 9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 314, character 6 - line 314, character 6:
Warning: identifier e rebound.
File "NX.noise.passive.pv", line 315, character 6 - line 315, character 7:
Warning: identifier ne rebound.
File "NX.noise.passive.pv", line 316, character 6 - line 316, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 318, character 7 - line 318, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 318, character 26 - line 318, character 36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 319, character 6 - line 319, character 7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 546, character 8 - line 546, character 9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 382, character 7 - line 382, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 384, character 7 - line 384, character 8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 538, character 8 - line 538, character 9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 326, character 6 - line 326, character 6:
Warning: identifier e rebound.
File "NX.noise.passive.pv", line 327, character 6 - line 327, character 7:
Warning: identifier ne rebound.
File "NX.noise.passive.pv", line 328, character 6 - line 328, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 331, character 6 - line 331, character 6:
Warning: identifier s rebound.
File "NX.noise.passive.pv", line 332, character 7 - line 332, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 332, character 26 - line 332, character 36:
Warning: identifier ciphertext1 rebound.
File "NX.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 334, character 7 - line 334, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 334, character 26 - line 334, character 36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 335, character 6 - line 335, character 7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 531, character 8 - line 531, character 9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 352, character 6 - line 352, character 7:
Warning: identifier re rebound.
File "NX.noise.passive.pv", line 353, character 6 - line 353, character 7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 355, character 7 - line 355, character 8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 357, character 7 - line 357, character 8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_509: keypair = keypairpack(empty,empty) in
    (
        {3}let e_510: keypair = keypairpack(empty,empty) in
        {4}let rs_511: key = empty in
        {5}let re_512: key = empty in
        {6}let v_513: bitstring = catch-fail(hash(somename,empty)) in
        {7}let v_514: key = catch-fail(v_513) in
        {8}let v_515: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {9}let v_516: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_513) then (if not-caught-fail(v_514) then (if not-caught-fail(v_515) then symmetricstatepack(v_515,v_514,v_513) else fail-any) else fail-any) else fail-any))) in
        {10}let v_517: symmetricstate = catch-fail((if success?((if not-caught-fail(v_513) then (if not-caught-fail(v_514) then (if not-caught-fail(v_515) then symmetricstatepack(v_515,v_514,v_513) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then symmetricstatepack(1-proj-3-tuple(v_516),2-proj-3-tuple(v_516),hash(3-proj-3-tuple(v_516),empty)) else fail-any) else fail-any)) in
        {11}let hs: handshakestate = (if not-caught-fail(v_517) then handshakestatepack(v_517,s_509,e_510,rs_511,re_512,empty,true) else fail-any) in
        {12}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {35}get statestore(=alice,=bob,statepack_a(hs_518: handshakestate)) in
        {13}let v_519: bitstring = catch-fail(handshakestateunpack(hs_518)) in
        {14}let v_520: bitstring = catch-fail((empty,empty,empty)) in
        {15}let v_521: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {16}let v_522: keypair = catch-fail((if not-caught-fail(v_521) then keypairpack(v_521,key_e(alice,bob)) else fail-any)) in
        {17}let v_523: bitstring = catch-fail(getpublickey(v_522)) in
        {18}let v_524: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_519))) in
        {19}let v_525: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_519)) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then symmetricstatepack(1-proj-3-tuple(v_524),2-proj-3-tuple(v_524),hash(3-proj-3-tuple(v_524),v_523)) else fail-any) else fail-any)) in
        {20}let v_526: bitstring = catch-fail(symmetricstateunpack(v_525)) in
        {21}let v_527: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_526))) in
        {22}let v_528: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_527),2-proj-2-tuple(v_527),3-proj-3-tuple(v_526),msg_a(alice,bob))) in
        {23}let v_529: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_526))) in
        {24}let v_530: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_527))) && success?(1-proj-3-tuple(v_526))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-2-tuple(v_529))))) then cipherstatepack(1-proj-2-tuple(v_529),increment_nonce(2-proj-2-tuple(v_527))) else fail-any) else fail-any)) in
        {25}let v_531: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_526)) && success?(1-proj-3-tuple(v_526))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then (if not-caught-fail(v_528) then (if not-caught-fail(v_530) then (v_530,v_528) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {26}let v_532: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_531),2-proj-3-tuple(v_526),3-proj-3-tuple(v_526)))) in
        {27}let v_533: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_531)) && success?(symmetricstatepack(1-proj-2-tuple(v_531),2-proj-3-tuple(v_526),3-proj-3-tuple(v_526)))) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then symmetricstatepack(1-proj-3-tuple(v_532),2-proj-3-tuple(v_532),hash(3-proj-3-tuple(v_532),2-proj-2-tuple(v_531))) else fail-any) else fail-any)) in
        {28}let v_534: bitstring = catch-fail((if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then (if not-caught-fail(v_533) then (v_533,2-proj-2-tuple(v_531)) else fail-any) else fail-any) else fail-any)) in
        {29}let v_535: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_534),2-proj-7-tuple(v_519),v_522,4-proj-7-tuple(v_519),5-proj-7-tuple(v_519),6-proj-7-tuple(v_519),7-proj-7-tuple(v_519))) in
        {30}let v_536: bitstring = catch-fail(concat3(v_523,2-proj-3-tuple(v_520),2-proj-2-tuple(v_534))) in
        {31}let (hs_537: handshakestate,re_538: key,message_a: bitstring) = (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-7-tuple(v_519))))) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_525) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-2-tuple(v_534))))) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then (v_535,5-proj-7-tuple(v_519),v_536) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {32}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {33}insert statestore(alice,bob,statepack_b(hs_537));
        {34}out(pub, message_a)
    ) | (
        {83}get statestore(=alice,=bob,statepack_b(hs_539: handshakestate)) in
        {36}in(pub, message_b: bitstring);
        {37}let v_540: bitstring = catch-fail(handshakestateunpack(hs_539)) in
        {38}let v_541: bitstring = catch-fail(deconcat3(message_b)) in
        {39}let v_542: bool = catch-fail(true) in
        {40}let v_543: key = catch-fail(1-proj-3-tuple(v_541)) in
        {41}let v_544: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_540))) in
        {42}let v_545: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_540)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then symmetricstatepack(1-proj-3-tuple(v_544),2-proj-3-tuple(v_544),hash(3-proj-3-tuple(v_544),v_543)) else fail-any) else fail-any)) in
        {43}let v_546: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_540))) in
        {44}let v_547: bitstring = catch-fail(symmetricstateunpack(v_545)) in
        {45}let v_548: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_547),(if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),v_543) else fail-any) else fail-any))) in
        {46}let v_549: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_547),(if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),v_543) else fail-any) else fail-any))) in
        {47}let v_550: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_547),(if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),v_543) else fail-any) else fail-any))) in
        {48}let v_551: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),v_543) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_547))) then (if not-caught-fail(v_548) then (if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (v_548,v_549,v_550) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {49}let v_552: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),v_543) else fail-any) else fail-any)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_551)) then cipherstatepack(2-proj-3-tuple(v_551),minnonce) else fail-any),1-proj-3-tuple(v_551),3-proj-3-tuple(v_547)) else fail-any) else fail-any) else fail-any)) in
        {50}let v_553: bitstring = catch-fail(symmetricstateunpack(v_552)) in
        {51}let v_554: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_553))) in
        {52}let v_555: aead = catch-fail(decrypt(1-proj-2-tuple(v_554),2-proj-2-tuple(v_554),3-proj-3-tuple(v_553),2-proj-3-tuple(v_541))) in
        {53}let v_556: bitstring = catch-fail(aeadunpack(v_555)) in
        {54}let v_557: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_553))) in
        {55}let v_558: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_554))) && success?(1-proj-3-tuple(v_553))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then cipherstatepack(1-proj-2-tuple(v_557),increment_nonce(2-proj-2-tuple(v_554))) else fail-any) else fail-any)) in
        {56}let v_559: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_541)) && (success?(3-proj-3-tuple(v_553)) && success?(1-proj-3-tuple(v_553)))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then (if not-caught-fail(v_555) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then (if not-caught-fail(v_558) then (v_558,3-proj-3-tuple(v_556),1-proj-3-tuple(v_556)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {57}let v_560: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_559),2-proj-3-tuple(v_553),3-proj-3-tuple(v_553)))) in
        {58}let v_561: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_541)) && success?(symmetricstatepack(1-proj-3-tuple(v_559),2-proj-3-tuple(v_553),3-proj-3-tuple(v_553)))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then symmetricstatepack(1-proj-3-tuple(v_560),2-proj-3-tuple(v_560),hash(3-proj-3-tuple(v_560),2-proj-3-tuple(v_541))) else fail-any) else fail-any)) in
        {59}let v_562: bitstring = catch-fail((if success?(2-proj-3-tuple(v_541)) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-3-tuple(v_553))))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if not-caught-fail(v_561) then (v_561,2-proj-3-tuple(v_559),3-proj-3-tuple(v_559)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_563: key = catch-fail(2-proj-3-tuple(v_562)) in
        {61}let v_564: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_540))) in
        {62}let v_565: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_562))) in
        {63}let v_566: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_565),(if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_563) else fail-any) else fail-any))) in
        {64}let v_567: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_565),(if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_563) else fail-any) else fail-any))) in
        {65}let v_568: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_565),(if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_563) else fail-any) else fail-any))) in
        {66}let v_569: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_563) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_565))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then (v_566,v_567,v_568) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {67}let v_570: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_540)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_563) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_562))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_569)) then cipherstatepack(2-proj-3-tuple(v_569),minnonce) else fail-any),1-proj-3-tuple(v_569),3-proj-3-tuple(v_565)) else fail-any) else fail-any) else fail-any)) in
        {68}let v_571: bitstring = catch-fail(symmetricstateunpack(v_570)) in
        {69}let v_572: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {70}let v_573: aead = catch-fail(decrypt(1-proj-2-tuple(v_572),2-proj-2-tuple(v_572),3-proj-3-tuple(v_571),3-proj-3-tuple(v_541))) in
        {71}let v_574: bitstring = catch-fail(aeadunpack(v_573)) in
        {72}let v_575: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {73}let v_576: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_572))) && success?(1-proj-3-tuple(v_571))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then cipherstatepack(1-proj-2-tuple(v_575),increment_nonce(2-proj-2-tuple(v_572))) else fail-any) else fail-any)) in
        {74}let v_577: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_541)) && (success?(3-proj-3-tuple(v_571)) && success?(1-proj-3-tuple(v_571)))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_573) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if not-caught-fail(v_576) then (v_576,3-proj-3-tuple(v_574),1-proj-3-tuple(v_574)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {75}let v_578: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) in
        {76}let v_579: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_541)) && success?(symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then symmetricstatepack(1-proj-3-tuple(v_578),2-proj-3-tuple(v_578),hash(3-proj-3-tuple(v_578),3-proj-3-tuple(v_541))) else fail-any) else fail-any)) in
        {77}let v_580: bitstring = catch-fail((if success?(3-proj-3-tuple(v_541)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if not-caught-fail(v_579) then (v_579,2-proj-3-tuple(v_577),3-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_581: key = catch-fail(dhexp(key_s(bob),g)) in
        {79}let v_582: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_580),2-proj-7-tuple(v_540),3-proj-7-tuple(v_540),v_563,v_543,6-proj-7-tuple(v_540),7-proj-7-tuple(v_540))) in
        {80}let (hs_583: handshakestate,re_584: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-7-tuple(v_540))))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (if not-caught-fail(v_545) then (if not-caught-fail(v_552) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then (if not-caught-fail(v_563) then (if not-caught-fail(v_570) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if ((3-proj-3-tuple(v_562) && 3-proj-3-tuple(v_580)) && (v_563 = getpublickey((if not-caught-fail(v_581) then keypairpack(v_581,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_582) then (v_582,getpublickey(3-proj-7-tuple(v_540)),2-proj-3-tuple(v_580),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {81}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {82}insert statestore(alice,bob,statepack_c(hs_583))
    ) | (
        {109}get statestore(=alice,=bob,statepack_c(hs_585: handshakestate)) in
        {84}let v_586: bitstring = catch-fail(handshakestateunpack(hs_585)) in
        {85}let v_587: bitstring = catch-fail((empty,empty,empty)) in
        {86}let v_588: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_586))) in
        {87}let v_589: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_588))) in
        {88}let v_590: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_589),2-proj-2-tuple(v_589),3-proj-3-tuple(v_588),msg_c(alice,bob))) in
        {89}let v_591: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_588))) in
        {90}let v_592: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_589))) && success?(1-proj-3-tuple(v_588))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then cipherstatepack(1-proj-2-tuple(v_591),increment_nonce(2-proj-2-tuple(v_589))) else fail-any) else fail-any)) in
        {91}let v_593: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_588)) && success?(1-proj-3-tuple(v_588))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then (if not-caught-fail(v_590) then (if not-caught-fail(v_592) then (v_592,v_590) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_594: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_593),2-proj-3-tuple(v_588),3-proj-3-tuple(v_588)))) in
        {93}let v_595: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_593)) && success?(symmetricstatepack(1-proj-2-tuple(v_593),2-proj-3-tuple(v_588),3-proj-3-tuple(v_588)))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),2-proj-2-tuple(v_593))) else fail-any) else fail-any)) in
        {94}let v_596: bitstring = catch-fail((if success?(1-proj-7-tuple(v_586)) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then (if not-caught-fail(v_595) then (v_595,2-proj-2-tuple(v_593)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_597: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_596),2-proj-7-tuple(v_586),3-proj-7-tuple(v_586),4-proj-7-tuple(v_586),5-proj-7-tuple(v_586),6-proj-7-tuple(v_586),7-proj-7-tuple(v_586))) in
        {96}let v_598: bitstring = catch-fail(concat3(1-proj-3-tuple(v_587),2-proj-3-tuple(v_587),2-proj-2-tuple(v_596))) in
        {97}let v_599: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_596))) in
        {98}let v_600: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_599),zero)) in
        {99}let v_601: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_599),zero)) in
        {100}let v_602: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_599),zero)) in
        {101}let v_603: bitstring = catch-fail((if success?(2-proj-3-tuple(v_599)) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (v_600,v_601,v_602) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_604: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_603)) then cipherstatepack(1-proj-3-tuple(v_603),minnonce) else fail-any)) in
        {103}let v_605: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_603)) then cipherstatepack(2-proj-3-tuple(v_603),minnonce) else fail-any)) in
        {104}let v_606: bitstring = catch-fail((if success?(1-proj-2-tuple(v_596)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (1-proj-2-tuple(v_596),v_604,v_605) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {105}let (hs_607: handshakestate,re_608: key,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-7-tuple(v_586))))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (v_597,5-proj-7-tuple(v_586),v_598,2-proj-3-tuple(v_606),3-proj-3-tuple(v_606)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {106}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {107}insert statestore(alice,bob,statepack_d(hs_607));
        {108}out(pub, message_c)
    ) | (
        {110}event LeakS(phase0,alice);
        {111}out(pub, key_s(alice))
    ) | (
        {112}phase 1;
        {113}event LeakS(phase1,alice);
        {114}out(pub, key_s(alice))
    )
) | (
    {115}let s_609: keypair = keypairpack(empty,empty) in
    (
        {116}let e_610: keypair = keypairpack(empty,empty) in
        {117}let rs_611: key = empty in
        {118}let re_612: key = empty in
        {119}let v_613: bitstring = catch-fail(hash(somename,empty)) in
        {120}let v_614: key = catch-fail(v_613) in
        {121}let v_615: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {122}let v_616: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then symmetricstatepack(v_615,v_614,v_613) else fail-any) else fail-any) else fail-any))) in
        {123}let v_617: symmetricstate = catch-fail((if success?((if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then symmetricstatepack(v_615,v_614,v_613) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack(1-proj-3-tuple(v_616),2-proj-3-tuple(v_616),hash(3-proj-3-tuple(v_616),empty)) else fail-any) else fail-any)) in
        {124}let hs_618: handshakestate = (if not-caught-fail(v_617) then handshakestatepack(v_617,s_609,e_610,rs_611,re_612,empty,true) else fail-any) in
        {125}insert statestore(alice,charlie,statepack_a(hs_618))
    ) | (
        {148}get statestore(=alice,=charlie,statepack_a(hs_619: handshakestate)) in
        {126}let v_620: bitstring = catch-fail(handshakestateunpack(hs_619)) in
        {127}let v_621: bitstring = catch-fail((empty,empty,empty)) in
        {128}let v_622: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {129}let v_623: keypair = catch-fail((if not-caught-fail(v_622) then keypairpack(v_622,key_e(alice,charlie)) else fail-any)) in
        {130}let v_624: bitstring = catch-fail(getpublickey(v_623)) in
        {131}let v_625: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_620))) in
        {132}let v_626: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_620)) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then symmetricstatepack(1-proj-3-tuple(v_625),2-proj-3-tuple(v_625),hash(3-proj-3-tuple(v_625),v_624)) else fail-any) else fail-any)) in
        {133}let v_627: bitstring = catch-fail(symmetricstateunpack(v_626)) in
        {134}let v_628: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_627))) in
        {135}let v_629: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_628),2-proj-2-tuple(v_628),3-proj-3-tuple(v_627),msg_a(alice,charlie))) in
        {136}let v_630: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_627))) in
        {137}let v_631: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_628))) && success?(1-proj-3-tuple(v_627))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-2-tuple(v_630))))) then cipherstatepack(1-proj-2-tuple(v_630),increment_nonce(2-proj-2-tuple(v_628))) else fail-any) else fail-any)) in
        {138}let v_632: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_627)) && success?(1-proj-3-tuple(v_627))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then (if not-caught-fail(v_629) then (if not-caught-fail(v_631) then (v_631,v_629) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_633: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_632),2-proj-3-tuple(v_627),3-proj-3-tuple(v_627)))) in
        {140}let v_634: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_632)) && success?(symmetricstatepack(1-proj-2-tuple(v_632),2-proj-3-tuple(v_627),3-proj-3-tuple(v_627)))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then symmetricstatepack(1-proj-3-tuple(v_633),2-proj-3-tuple(v_633),hash(3-proj-3-tuple(v_633),2-proj-2-tuple(v_632))) else fail-any) else fail-any)) in
        {141}let v_635: bitstring = catch-fail((if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then (if not-caught-fail(v_634) then (v_634,2-proj-2-tuple(v_632)) else fail-any) else fail-any) else fail-any)) in
        {142}let v_636: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_635),2-proj-7-tuple(v_620),v_623,4-proj-7-tuple(v_620),5-proj-7-tuple(v_620),6-proj-7-tuple(v_620),7-proj-7-tuple(v_620))) in
        {143}let v_637: bitstring = catch-fail(concat3(v_624,2-proj-3-tuple(v_621),2-proj-2-tuple(v_635))) in
        {144}let (hs_638: handshakestate,re_639: key,message_a_640: bitstring) = (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-7-tuple(v_620))))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if not-caught-fail(v_623) then (if not-caught-fail(v_624) then (if not-caught-fail(v_626) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then (if not-caught-fail(v_636) then (if not-caught-fail(v_637) then (v_636,5-proj-7-tuple(v_620),v_637) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {145}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {146}insert statestore(alice,charlie,statepack_b(hs_638));
        {147}out(pub, message_a_640)
    ) | (
        {196}get statestore(=alice,=charlie,statepack_b(hs_641: handshakestate)) in
        {149}in(pub, message_b_642: bitstring);
        {150}let v_643: bitstring = catch-fail(handshakestateunpack(hs_641)) in
        {151}let v_644: bitstring = catch-fail(deconcat3(message_b_642)) in
        {152}let v_645: bool = catch-fail(true) in
        {153}let v_646: key = catch-fail(1-proj-3-tuple(v_644)) in
        {154}let v_647: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_643))) in
        {155}let v_648: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_643)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),v_646)) else fail-any) else fail-any)) in
        {156}let v_649: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_643))) in
        {157}let v_650: bitstring = catch-fail(symmetricstateunpack(v_648)) in
        {158}let v_651: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_650),(if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),v_646) else fail-any) else fail-any))) in
        {159}let v_652: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_650),(if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),v_646) else fail-any) else fail-any))) in
        {160}let v_653: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_650),(if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),v_646) else fail-any) else fail-any))) in
        {161}let v_654: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),v_646) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_650))) then (if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (v_651,v_652,v_653) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {162}let v_655: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),v_646) else fail-any) else fail-any)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_654)) then cipherstatepack(2-proj-3-tuple(v_654),minnonce) else fail-any),1-proj-3-tuple(v_654),3-proj-3-tuple(v_650)) else fail-any) else fail-any) else fail-any)) in
        {163}let v_656: bitstring = catch-fail(symmetricstateunpack(v_655)) in
        {164}let v_657: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_656))) in
        {165}let v_658: aead = catch-fail(decrypt(1-proj-2-tuple(v_657),2-proj-2-tuple(v_657),3-proj-3-tuple(v_656),2-proj-3-tuple(v_644))) in
        {166}let v_659: bitstring = catch-fail(aeadunpack(v_658)) in
        {167}let v_660: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_656))) in
        {168}let v_661: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_657))) && success?(1-proj-3-tuple(v_656))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then cipherstatepack(1-proj-2-tuple(v_660),increment_nonce(2-proj-2-tuple(v_657))) else fail-any) else fail-any)) in
        {169}let v_662: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_644)) && (success?(3-proj-3-tuple(v_656)) && success?(1-proj-3-tuple(v_656)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_658) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if not-caught-fail(v_661) then (v_661,3-proj-3-tuple(v_659),1-proj-3-tuple(v_659)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {170}let v_663: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_662),2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)))) in
        {171}let v_664: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_644)) && success?(symmetricstatepack(1-proj-3-tuple(v_662),2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then symmetricstatepack(1-proj-3-tuple(v_663),2-proj-3-tuple(v_663),hash(3-proj-3-tuple(v_663),2-proj-3-tuple(v_644))) else fail-any) else fail-any)) in
        {172}let v_665: bitstring = catch-fail((if success?(2-proj-3-tuple(v_644)) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if not-caught-fail(v_664) then (v_664,2-proj-3-tuple(v_662),3-proj-3-tuple(v_662)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {173}let v_666: key = catch-fail(2-proj-3-tuple(v_665)) in
        {174}let v_667: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_643))) in
        {175}let v_668: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_665))) in
        {176}let v_669: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_668),(if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then dhexp(2-proj-2-tuple(v_667),v_666) else fail-any) else fail-any))) in
        {177}let v_670: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_668),(if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then dhexp(2-proj-2-tuple(v_667),v_666) else fail-any) else fail-any))) in
        {178}let v_671: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_668),(if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then dhexp(2-proj-2-tuple(v_667),v_666) else fail-any) else fail-any))) in
        {179}let v_672: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then dhexp(2-proj-2-tuple(v_667),v_666) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_668))) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (if not-caught-fail(v_671) then (v_669,v_670,v_671) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {180}let v_673: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_643)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then dhexp(2-proj-2-tuple(v_667),v_666) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_665))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_672)) then cipherstatepack(2-proj-3-tuple(v_672),minnonce) else fail-any),1-proj-3-tuple(v_672),3-proj-3-tuple(v_668)) else fail-any) else fail-any) else fail-any)) in
        {181}let v_674: bitstring = catch-fail(symmetricstateunpack(v_673)) in
        {182}let v_675: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_674))) in
        {183}let v_676: aead = catch-fail(decrypt(1-proj-2-tuple(v_675),2-proj-2-tuple(v_675),3-proj-3-tuple(v_674),3-proj-3-tuple(v_644))) in
        {184}let v_677: bitstring = catch-fail(aeadunpack(v_676)) in
        {185}let v_678: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_674))) in
        {186}let v_679: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_675))) && success?(1-proj-3-tuple(v_674))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then cipherstatepack(1-proj-2-tuple(v_678),increment_nonce(2-proj-2-tuple(v_675))) else fail-any) else fail-any)) in
        {187}let v_680: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_644)) && (success?(3-proj-3-tuple(v_674)) && success?(1-proj-3-tuple(v_674)))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then (if not-caught-fail(v_676) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if not-caught-fail(v_679) then (v_679,3-proj-3-tuple(v_677),1-proj-3-tuple(v_677)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {188}let v_681: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_680),2-proj-3-tuple(v_674),3-proj-3-tuple(v_674)))) in
        {189}let v_682: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_644)) && success?(symmetricstatepack(1-proj-3-tuple(v_680),2-proj-3-tuple(v_674),3-proj-3-tuple(v_674)))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_681),hash(3-proj-3-tuple(v_681),3-proj-3-tuple(v_644))) else fail-any) else fail-any)) in
        {190}let v_683: bitstring = catch-fail((if success?(3-proj-3-tuple(v_644)) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if not-caught-fail(v_682) then (v_682,2-proj-3-tuple(v_680),3-proj-3-tuple(v_680)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {191}let v_684: key = catch-fail(dhexp(key_s(charlie),g)) in
        {192}let v_685: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_683),2-proj-7-tuple(v_643),3-proj-7-tuple(v_643),v_666,v_646,6-proj-7-tuple(v_643),7-proj-7-tuple(v_643))) in
        {193}let (hs_686: handshakestate,re_687: key,plaintext_b_688: bitstring,valid_689: bool) = (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-7-tuple(v_643))))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (if not-caught-fail(v_648) then (if not-caught-fail(v_655) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_673) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if ((3-proj-3-tuple(v_665) && 3-proj-3-tuple(v_683)) && (v_666 = getpublickey((if not-caught-fail(v_684) then keypairpack(v_684,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_685) then (v_685,getpublickey(3-proj-7-tuple(v_643)),2-proj-3-tuple(v_683),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {194}event RecvMsg(alice,charlie,stage_b,plaintext_b_688,valid_689);
        {195}insert statestore(alice,charlie,statepack_c(hs_686))
    ) | (
        {222}get statestore(=alice,=charlie,statepack_c(hs_690: handshakestate)) in
        {197}let v_691: bitstring = catch-fail(handshakestateunpack(hs_690)) in
        {198}let v_692: bitstring = catch-fail((empty,empty,empty)) in
        {199}let v_693: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_691))) in
        {200}let v_694: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_693))) in
        {201}let v_695: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_694),2-proj-2-tuple(v_694),3-proj-3-tuple(v_693),msg_c(alice,charlie))) in
        {202}let v_696: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_693))) in
        {203}let v_697: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_694))) && success?(1-proj-3-tuple(v_693))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then cipherstatepack(1-proj-2-tuple(v_696),increment_nonce(2-proj-2-tuple(v_694))) else fail-any) else fail-any)) in
        {204}let v_698: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_693)) && success?(1-proj-3-tuple(v_693))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_697) then (v_697,v_695) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {205}let v_699: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_698),2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)))) in
        {206}let v_700: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_698)) && success?(symmetricstatepack(1-proj-2-tuple(v_698),2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_699),hash(3-proj-3-tuple(v_699),2-proj-2-tuple(v_698))) else fail-any) else fail-any)) in
        {207}let v_701: bitstring = catch-fail((if success?(1-proj-7-tuple(v_691)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then (if not-caught-fail(v_700) then (v_700,2-proj-2-tuple(v_698)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let v_702: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_701),2-proj-7-tuple(v_691),3-proj-7-tuple(v_691),4-proj-7-tuple(v_691),5-proj-7-tuple(v_691),6-proj-7-tuple(v_691),7-proj-7-tuple(v_691))) in
        {209}let v_703: bitstring = catch-fail(concat3(1-proj-3-tuple(v_692),2-proj-3-tuple(v_692),2-proj-2-tuple(v_701))) in
        {210}let v_704: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_701))) in
        {211}let v_705: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_704),zero)) in
        {212}let v_706: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_704),zero)) in
        {213}let v_707: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_704),zero)) in
        {214}let v_708: bitstring = catch-fail((if success?(2-proj-3-tuple(v_704)) then (if not-caught-fail(v_705) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (v_705,v_706,v_707) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {215}let v_709: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_708)) then cipherstatepack(1-proj-3-tuple(v_708),minnonce) else fail-any)) in
        {216}let v_710: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_708)) then cipherstatepack(2-proj-3-tuple(v_708),minnonce) else fail-any)) in
        {217}let v_711: bitstring = catch-fail((if success?(1-proj-2-tuple(v_701)) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_709) then (if not-caught-fail(v_710) then (1-proj-2-tuple(v_701),v_709,v_710) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let (hs_712: handshakestate,re_713: key,message_c_714: bitstring,cs1_715: cipherstate,cs2_716: cipherstate) = (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-7-tuple(v_691))))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then (if not-caught-fail(v_702) then (if not-caught-fail(v_703) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (v_702,5-proj-7-tuple(v_691),v_703,2-proj-3-tuple(v_711),3-proj-3-tuple(v_711)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {219}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {220}insert statestore(alice,charlie,statepack_d(hs_712));
        {221}out(pub, message_c_714)
    ) | (
        {223}event LeakS(phase0,alice);
        {224}out(pub, key_s(alice))
    ) | (
        {225}phase 1;
        {226}event LeakS(phase1,alice);
        {227}out(pub, key_s(alice))
    )
) | (
    {228}let s_717: keypair = keypairpack(empty,empty) in
    {229}out(pub, getpublickey(s_717));
    (
        {230}let e_718: keypair = keypairpack(empty,empty) in
        {231}let rs_719: key = empty in
        {232}let re_720: key = empty in
        {233}let v_721: bitstring = catch-fail(hash(somename,empty)) in
        {234}let v_722: key = catch-fail(v_721) in
        {235}let v_723: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {236}let v_724: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then symmetricstatepack(v_723,v_722,v_721) else fail-any) else fail-any) else fail-any))) in
        {237}let v_725: symmetricstate = catch-fail((if success?((if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then symmetricstatepack(v_723,v_722,v_721) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then symmetricstatepack(1-proj-3-tuple(v_724),2-proj-3-tuple(v_724),hash(3-proj-3-tuple(v_724),empty)) else fail-any) else fail-any)) in
        {238}let hs_726: handshakestate = (if not-caught-fail(v_725) then handshakestatepack(v_725,s_717,e_718,rs_719,re_720,empty,false) else fail-any) in
        {239}insert statestore(bob,alice,statepack_a(hs_726))
    ) | (
        {261}get statestore(=bob,=alice,statepack_a(hs_727: handshakestate)) in
        {240}in(pub, message_a_728: bitstring);
        {241}let v_729: bitstring = catch-fail(handshakestateunpack(hs_727)) in
        {242}let v_730: bitstring = catch-fail(deconcat3(message_a_728)) in
        {243}let v_731: bool = catch-fail(true) in
        {244}let v_732: key = catch-fail(1-proj-3-tuple(v_730)) in
        {245}let v_733: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_729))) in
        {246}let v_734: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_729)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_733),hash(3-proj-3-tuple(v_733),v_732)) else fail-any) else fail-any)) in
        {247}let v_735: bitstring = catch-fail(symmetricstateunpack(v_734)) in
        {248}let v_736: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_735))) in
        {249}let v_737: aead = catch-fail(decrypt(1-proj-2-tuple(v_736),2-proj-2-tuple(v_736),3-proj-3-tuple(v_735),3-proj-3-tuple(v_730))) in
        {250}let v_738: bitstring = catch-fail(aeadunpack(v_737)) in
        {251}let v_739: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_735))) in
        {252}let v_740: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_736))) && success?(1-proj-3-tuple(v_735))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then cipherstatepack(1-proj-2-tuple(v_739),increment_nonce(2-proj-2-tuple(v_736))) else fail-any) else fail-any)) in
        {253}let v_741: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_730)) && (success?(3-proj-3-tuple(v_735)) && success?(1-proj-3-tuple(v_735)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then (if not-caught-fail(v_737) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if not-caught-fail(v_740) then (v_740,3-proj-3-tuple(v_738),1-proj-3-tuple(v_738)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {254}let v_742: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)))) in
        {255}let v_743: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_730)) && success?(symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then symmetricstatepack(1-proj-3-tuple(v_742),2-proj-3-tuple(v_742),hash(3-proj-3-tuple(v_742),3-proj-3-tuple(v_730))) else fail-any) else fail-any)) in
        {256}let v_744: bitstring = catch-fail((if success?(3-proj-3-tuple(v_730)) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_743) then (v_743,2-proj-3-tuple(v_741),3-proj-3-tuple(v_741)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {257}let v_745: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_744),2-proj-7-tuple(v_729),3-proj-7-tuple(v_729),4-proj-7-tuple(v_729),v_732,6-proj-7-tuple(v_729),7-proj-7-tuple(v_729))) in
        {258}let (hs_746: handshakestate,re_747: key,plaintext_a: bitstring,valid_748: bool) = (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-7-tuple(v_729))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_731) then (if not-caught-fail(v_732) then (if not-caught-fail(v_734) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (v_731 && 3-proj-3-tuple(v_744)) then (if not-caught-fail(v_745) then (v_745,getpublickey(3-proj-7-tuple(v_729)),2-proj-3-tuple(v_744),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {259}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_748);
        {260}insert statestore(bob,alice,statepack_b(hs_746))
    ) | (
        {309}get statestore(=bob,=alice,statepack_b(hs_749: handshakestate)) in
        {262}let v_750: bitstring = catch-fail(handshakestateunpack(hs_749)) in
        {263}let v_751: bitstring = catch-fail((empty,empty,empty)) in
        {264}let v_752: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {265}let v_753: keypair = catch-fail((if not-caught-fail(v_752) then keypairpack(v_752,key_e(bob,alice)) else fail-any)) in
        {266}let v_754: bitstring = catch-fail(getpublickey(v_753)) in
        {267}let v_755: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_750))) in
        {268}let v_756: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_750)) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_755),hash(3-proj-3-tuple(v_755),v_754)) else fail-any) else fail-any)) in
        {269}let v_757: bitstring = catch-fail(keypairunpack(v_753)) in
        {270}let v_758: bitstring = catch-fail(symmetricstateunpack(v_756)) in
        {271}let v_759: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_758),(if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),5-proj-7-tuple(v_750)) else fail-any) else fail-any))) in
        {272}let v_760: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_758),(if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),5-proj-7-tuple(v_750)) else fail-any) else fail-any))) in
        {273}let v_761: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_758),(if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),5-proj-7-tuple(v_750)) else fail-any) else fail-any))) in
        {274}let v_762: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),5-proj-7-tuple(v_750)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_758))) then (if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (v_759,v_760,v_761) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {275}let v_763: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then dhexp(2-proj-2-tuple(v_757),5-proj-7-tuple(v_750)) else fail-any) else fail-any)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_762)) then cipherstatepack(2-proj-3-tuple(v_762),minnonce) else fail-any),1-proj-3-tuple(v_762),3-proj-3-tuple(v_758)) else fail-any) else fail-any) else fail-any)) in
        {276}let v_764: key = catch-fail(dhexp(key_s(bob),g)) in
        {277}let v_765: keypair = catch-fail((if not-caught-fail(v_764) then keypairpack(v_764,key_s(bob)) else fail-any)) in
        {278}let v_766: bitstring = catch-fail(symmetricstateunpack(v_763)) in
        {279}let v_767: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_766))) in
        {280}let v_768: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_767),2-proj-2-tuple(v_767),3-proj-3-tuple(v_766),getpublickey(v_765))) in
        {281}let v_769: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_766))) in
        {282}let v_770: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_767))) && success?(1-proj-3-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then cipherstatepack(1-proj-2-tuple(v_769),increment_nonce(2-proj-2-tuple(v_767))) else fail-any) else fail-any)) in
        {283}let v_771: bitstring = catch-fail((if (success?(getpublickey(v_765)) && (success?(3-proj-3-tuple(v_766)) && success?(1-proj-3-tuple(v_766)))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then (if not-caught-fail(v_768) then (if not-caught-fail(v_770) then (v_770,v_768) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {284}let v_772: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_771),2-proj-3-tuple(v_766),3-proj-3-tuple(v_766)))) in
        {285}let v_773: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_771)) && success?(symmetricstatepack(1-proj-2-tuple(v_771),2-proj-3-tuple(v_766),3-proj-3-tuple(v_766)))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then symmetricstatepack(1-proj-3-tuple(v_772),2-proj-3-tuple(v_772),hash(3-proj-3-tuple(v_772),2-proj-2-tuple(v_771))) else fail-any) else fail-any)) in
        {286}let v_774: bitstring = catch-fail((if success?(getpublickey(v_765)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then (if not-caught-fail(v_773) then (v_773,2-proj-2-tuple(v_771)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {287}let v_775: bitstring = catch-fail(keypairunpack(v_765)) in
        {288}let v_776: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_774))) in
        {289}let v_777: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_776),(if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then dhexp(2-proj-2-tuple(v_775),5-proj-7-tuple(v_750)) else fail-any) else fail-any))) in
        {290}let v_778: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_776),(if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then dhexp(2-proj-2-tuple(v_775),5-proj-7-tuple(v_750)) else fail-any) else fail-any))) in
        {291}let v_779: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_776),(if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then dhexp(2-proj-2-tuple(v_775),5-proj-7-tuple(v_750)) else fail-any) else fail-any))) in
        {292}let v_780: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then dhexp(2-proj-2-tuple(v_775),5-proj-7-tuple(v_750)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_776))) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (if not-caught-fail(v_779) then (v_777,v_778,v_779) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_781: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_750)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then dhexp(2-proj-2-tuple(v_775),5-proj-7-tuple(v_750)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_774))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_780)) then cipherstatepack(2-proj-3-tuple(v_780),minnonce) else fail-any),1-proj-3-tuple(v_780),3-proj-3-tuple(v_776)) else fail-any) else fail-any) else fail-any)) in
        {294}let v_782: bitstring = catch-fail(symmetricstateunpack(v_781)) in
        {295}let v_783: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_782))) in
        {296}let v_784: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_783),2-proj-2-tuple(v_783),3-proj-3-tuple(v_782),msg_b(bob,alice))) in
        {297}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_782))) in
        {298}let v_786: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_783))) && success?(1-proj-3-tuple(v_782))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then cipherstatepack(1-proj-2-tuple(v_785),increment_nonce(2-proj-2-tuple(v_783))) else fail-any) else fail-any)) in
        {299}let v_787: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(1-proj-3-tuple(v_782))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then (if not-caught-fail(v_784) then (if not-caught-fail(v_786) then (v_786,v_784) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_788: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_787),2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)))) in
        {301}let v_789: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_787)) && success?(symmetricstatepack(1-proj-2-tuple(v_787),2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then symmetricstatepack(1-proj-3-tuple(v_788),2-proj-3-tuple(v_788),hash(3-proj-3-tuple(v_788),2-proj-2-tuple(v_787))) else fail-any) else fail-any)) in
        {302}let v_790: bitstring = catch-fail((if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then (if not-caught-fail(v_789) then (v_789,2-proj-2-tuple(v_787)) else fail-any) else fail-any) else fail-any)) in
        {303}let v_791: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_790),v_765,v_753,4-proj-7-tuple(v_750),5-proj-7-tuple(v_750),6-proj-7-tuple(v_750),7-proj-7-tuple(v_750))) in
        {304}let v_792: bitstring = catch-fail(concat3(v_754,2-proj-2-tuple(v_774),2-proj-2-tuple(v_790))) in
        {305}let (hs_793: handshakestate,re_794: key,message_b_795: bitstring) = (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-7-tuple(v_750))))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if not-caught-fail(v_753) then (if not-caught-fail(v_754) then (if not-caught-fail(v_756) then (if not-caught-fail(v_763) then (if not-caught-fail(v_765) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_781) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then (v_791,5-proj-7-tuple(v_750),v_792) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {306}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {307}insert statestore(bob,alice,statepack_c(hs_793));
        {308}out(pub, message_b_795)
    ) | (
        {337}get statestore(=bob,=alice,statepack_c(hs_796: handshakestate)) in
        {310}in(pub, message_c_797: bitstring);
        {311}let v_798: bitstring = catch-fail(handshakestateunpack(hs_796)) in
        {312}let v_799: bitstring = catch-fail(deconcat3(message_c_797)) in
        {313}let v_800: bool = catch-fail(true) in
        {314}let v_801: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_798))) in
        {315}let v_802: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {316}let v_803: aead = catch-fail(decrypt(1-proj-2-tuple(v_802),2-proj-2-tuple(v_802),3-proj-3-tuple(v_801),3-proj-3-tuple(v_799))) in
        {317}let v_804: bitstring = catch-fail(aeadunpack(v_803)) in
        {318}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {319}let v_806: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_802))) && success?(1-proj-3-tuple(v_801))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then cipherstatepack(1-proj-2-tuple(v_805),increment_nonce(2-proj-2-tuple(v_802))) else fail-any) else fail-any)) in
        {320}let v_807: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_799)) && (success?(3-proj-3-tuple(v_801)) && success?(1-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then (if not-caught-fail(v_803) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if not-caught-fail(v_806) then (v_806,3-proj-3-tuple(v_804),1-proj-3-tuple(v_804)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {321}let v_808: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) in
        {322}let v_809: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_799)) && success?(symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),hash(3-proj-3-tuple(v_808),3-proj-3-tuple(v_799))) else fail-any) else fail-any)) in
        {323}let v_810: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_799)) && success?(1-proj-7-tuple(v_798))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if not-caught-fail(v_809) then (v_809,2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {324}let v_811: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_810),2-proj-7-tuple(v_798),3-proj-7-tuple(v_798),4-proj-7-tuple(v_798),5-proj-7-tuple(v_798),6-proj-7-tuple(v_798),7-proj-7-tuple(v_798))) in
        {325}let v_812: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_810))) in
        {326}let v_813: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_812),zero)) in
        {327}let v_814: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_812),zero)) in
        {328}let v_815: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_812),zero)) in
        {329}let v_816: bitstring = catch-fail((if success?(2-proj-3-tuple(v_812)) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_813,v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {330}let v_817: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_816)) then cipherstatepack(1-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {331}let v_818: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_816)) then cipherstatepack(2-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {332}let v_819: bitstring = catch-fail((if success?(1-proj-3-tuple(v_810)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (1-proj-3-tuple(v_810),v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let (hs_820: handshakestate,re_821: key,plaintext_c: bitstring,valid_822: bool,cs1_823: cipherstate,cs2_824: cipherstate) = (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-7-tuple(v_798))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then (if not-caught-fail(v_800) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if (v_800 && 3-proj-3-tuple(v_810)) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (v_811,getpublickey(3-proj-7-tuple(v_798)),2-proj-3-tuple(v_810),true,2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {334}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_822);
        {335}insert statestore(bob,alice,statepack_d(hs_820));
        {336}event RecvEnd(valid_822)
    ) | (
        {338}event LeakS(phase0,bob);
        {339}out(pub, key_s(bob))
    ) | (
        {340}phase 1;
        {341}event LeakS(phase1,bob);
        {342}out(pub, key_s(bob))
    )
) | (
    {343}let s_825: keypair = keypairpack(empty,empty) in
    {344}out(pub, getpublickey(s_825));
    (
        {345}let e_826: keypair = keypairpack(empty,empty) in
        {346}let rs_827: key = empty in
        {347}let re_828: key = empty in
        {348}let v_829: bitstring = catch-fail(hash(somename,empty)) in
        {349}let v_830: key = catch-fail(v_829) in
        {350}let v_831: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {351}let v_832: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then symmetricstatepack(v_831,v_830,v_829) else fail-any) else fail-any) else fail-any))) in
        {352}let v_833: symmetricstate = catch-fail((if success?((if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then symmetricstatepack(v_831,v_830,v_829) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then symmetricstatepack(1-proj-3-tuple(v_832),2-proj-3-tuple(v_832),hash(3-proj-3-tuple(v_832),empty)) else fail-any) else fail-any)) in
        {353}let hs_834: handshakestate = (if not-caught-fail(v_833) then handshakestatepack(v_833,s_825,e_826,rs_827,re_828,empty,false) else fail-any) in
        {354}insert statestore(bob,charlie,statepack_a(hs_834))
    ) | (
        {376}get statestore(=bob,=charlie,statepack_a(hs_835: handshakestate)) in
        {355}in(pub, message_a_836: bitstring);
        {356}let v_837: bitstring = catch-fail(handshakestateunpack(hs_835)) in
        {357}let v_838: bitstring = catch-fail(deconcat3(message_a_836)) in
        {358}let v_839: bool = catch-fail(true) in
        {359}let v_840: key = catch-fail(1-proj-3-tuple(v_838)) in
        {360}let v_841: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_837))) in
        {361}let v_842: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_837)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then symmetricstatepack(1-proj-3-tuple(v_841),2-proj-3-tuple(v_841),hash(3-proj-3-tuple(v_841),v_840)) else fail-any) else fail-any)) in
        {362}let v_843: bitstring = catch-fail(symmetricstateunpack(v_842)) in
        {363}let v_844: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_843))) in
        {364}let v_845: aead = catch-fail(decrypt(1-proj-2-tuple(v_844),2-proj-2-tuple(v_844),3-proj-3-tuple(v_843),3-proj-3-tuple(v_838))) in
        {365}let v_846: bitstring = catch-fail(aeadunpack(v_845)) in
        {366}let v_847: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_843))) in
        {367}let v_848: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_844))) && success?(1-proj-3-tuple(v_843))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then cipherstatepack(1-proj-2-tuple(v_847),increment_nonce(2-proj-2-tuple(v_844))) else fail-any) else fail-any)) in
        {368}let v_849: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_838)) && (success?(3-proj-3-tuple(v_843)) && success?(1-proj-3-tuple(v_843)))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then (if not-caught-fail(v_845) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then (if not-caught-fail(v_848) then (v_848,3-proj-3-tuple(v_846),1-proj-3-tuple(v_846)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_850: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_849),2-proj-3-tuple(v_843),3-proj-3-tuple(v_843)))) in
        {370}let v_851: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_838)) && success?(symmetricstatepack(1-proj-3-tuple(v_849),2-proj-3-tuple(v_843),3-proj-3-tuple(v_843)))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then symmetricstatepack(1-proj-3-tuple(v_850),2-proj-3-tuple(v_850),hash(3-proj-3-tuple(v_850),3-proj-3-tuple(v_838))) else fail-any) else fail-any)) in
        {371}let v_852: bitstring = catch-fail((if success?(3-proj-3-tuple(v_838)) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then (if not-caught-fail(v_851) then (v_851,2-proj-3-tuple(v_849),3-proj-3-tuple(v_849)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_853: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_852),2-proj-7-tuple(v_837),3-proj-7-tuple(v_837),4-proj-7-tuple(v_837),v_840,6-proj-7-tuple(v_837),7-proj-7-tuple(v_837))) in
        {373}let (hs_854: handshakestate,re_855: key,plaintext_a_856: bitstring,valid_857: bool) = (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-7-tuple(v_837))))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (if not-caught-fail(v_839) then (if not-caught-fail(v_840) then (if not-caught-fail(v_842) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if (v_839 && 3-proj-3-tuple(v_852)) then (if not-caught-fail(v_853) then (v_853,getpublickey(3-proj-7-tuple(v_837)),2-proj-3-tuple(v_852),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {374}event RecvMsg(bob,charlie,stage_a,plaintext_a_856,valid_857);
        {375}insert statestore(bob,charlie,statepack_b(hs_854))
    ) | (
        {424}get statestore(=bob,=charlie,statepack_b(hs_858: handshakestate)) in
        {377}let v_859: bitstring = catch-fail(handshakestateunpack(hs_858)) in
        {378}let v_860: bitstring = catch-fail((empty,empty,empty)) in
        {379}let v_861: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {380}let v_862: keypair = catch-fail((if not-caught-fail(v_861) then keypairpack(v_861,key_e(bob,charlie)) else fail-any)) in
        {381}let v_863: bitstring = catch-fail(getpublickey(v_862)) in
        {382}let v_864: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_859))) in
        {383}let v_865: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_859)) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then symmetricstatepack(1-proj-3-tuple(v_864),2-proj-3-tuple(v_864),hash(3-proj-3-tuple(v_864),v_863)) else fail-any) else fail-any)) in
        {384}let v_866: bitstring = catch-fail(keypairunpack(v_862)) in
        {385}let v_867: bitstring = catch-fail(symmetricstateunpack(v_865)) in
        {386}let v_868: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_867),(if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then dhexp(2-proj-2-tuple(v_866),5-proj-7-tuple(v_859)) else fail-any) else fail-any))) in
        {387}let v_869: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_867),(if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then dhexp(2-proj-2-tuple(v_866),5-proj-7-tuple(v_859)) else fail-any) else fail-any))) in
        {388}let v_870: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_867),(if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then dhexp(2-proj-2-tuple(v_866),5-proj-7-tuple(v_859)) else fail-any) else fail-any))) in
        {389}let v_871: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then dhexp(2-proj-2-tuple(v_866),5-proj-7-tuple(v_859)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_867))) then (if not-caught-fail(v_868) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (v_868,v_869,v_870) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let v_872: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then dhexp(2-proj-2-tuple(v_866),5-proj-7-tuple(v_859)) else fail-any) else fail-any)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_871)) then cipherstatepack(2-proj-3-tuple(v_871),minnonce) else fail-any),1-proj-3-tuple(v_871),3-proj-3-tuple(v_867)) else fail-any) else fail-any) else fail-any)) in
        {391}let v_873: key = catch-fail(dhexp(key_s(bob),g)) in
        {392}let v_874: keypair = catch-fail((if not-caught-fail(v_873) then keypairpack(v_873,key_s(bob)) else fail-any)) in
        {393}let v_875: bitstring = catch-fail(symmetricstateunpack(v_872)) in
        {394}let v_876: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_875))) in
        {395}let v_877: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_876),2-proj-2-tuple(v_876),3-proj-3-tuple(v_875),getpublickey(v_874))) in
        {396}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_875))) in
        {397}let v_879: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_876))) && success?(1-proj-3-tuple(v_875))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then cipherstatepack(1-proj-2-tuple(v_878),increment_nonce(2-proj-2-tuple(v_876))) else fail-any) else fail-any)) in
        {398}let v_880: bitstring = catch-fail((if (success?(getpublickey(v_874)) && (success?(3-proj-3-tuple(v_875)) && success?(1-proj-3-tuple(v_875)))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then (if not-caught-fail(v_877) then (if not-caught-fail(v_879) then (v_879,v_877) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_881: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_880),2-proj-3-tuple(v_875),3-proj-3-tuple(v_875)))) in
        {400}let v_882: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_880)) && success?(symmetricstatepack(1-proj-2-tuple(v_880),2-proj-3-tuple(v_875),3-proj-3-tuple(v_875)))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack(1-proj-3-tuple(v_881),2-proj-3-tuple(v_881),hash(3-proj-3-tuple(v_881),2-proj-2-tuple(v_880))) else fail-any) else fail-any)) in
        {401}let v_883: bitstring = catch-fail((if success?(getpublickey(v_874)) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then (if not-caught-fail(v_882) then (v_882,2-proj-2-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {402}let v_884: bitstring = catch-fail(keypairunpack(v_874)) in
        {403}let v_885: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_883))) in
        {404}let v_886: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_885),(if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_859)) else fail-any) else fail-any))) in
        {405}let v_887: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_885),(if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_859)) else fail-any) else fail-any))) in
        {406}let v_888: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_885),(if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_859)) else fail-any) else fail-any))) in
        {407}let v_889: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_859)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_885))) then (if not-caught-fail(v_886) then (if not-caught-fail(v_887) then (if not-caught-fail(v_888) then (v_886,v_887,v_888) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {408}let v_890: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_859)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_859)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_883))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_889)) then cipherstatepack(2-proj-3-tuple(v_889),minnonce) else fail-any),1-proj-3-tuple(v_889),3-proj-3-tuple(v_885)) else fail-any) else fail-any) else fail-any)) in
        {409}let v_891: bitstring = catch-fail(symmetricstateunpack(v_890)) in
        {410}let v_892: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {411}let v_893: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_892),2-proj-2-tuple(v_892),3-proj-3-tuple(v_891),msg_b(bob,charlie))) in
        {412}let v_894: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {413}let v_895: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_892))) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then cipherstatepack(1-proj-2-tuple(v_894),increment_nonce(2-proj-2-tuple(v_892))) else fail-any) else fail-any)) in
        {414}let v_896: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_891)) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_895) then (v_895,v_893) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {415}let v_897: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) in
        {416}let v_898: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_896)) && success?(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_897),hash(3-proj-3-tuple(v_897),2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {417}let v_899: bitstring = catch-fail((if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_898) then (v_898,2-proj-2-tuple(v_896)) else fail-any) else fail-any) else fail-any)) in
        {418}let v_900: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_899),v_874,v_862,4-proj-7-tuple(v_859),5-proj-7-tuple(v_859),6-proj-7-tuple(v_859),7-proj-7-tuple(v_859))) in
        {419}let v_901: bitstring = catch-fail(concat3(v_863,2-proj-2-tuple(v_883),2-proj-2-tuple(v_899))) in
        {420}let (hs_902: handshakestate,re_903: key,message_b_904: bitstring) = (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-7-tuple(v_859))))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if not-caught-fail(v_862) then (if not-caught-fail(v_863) then (if not-caught-fail(v_865) then (if not-caught-fail(v_872) then (if not-caught-fail(v_874) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-2-tuple(v_883))))) then (if not-caught-fail(v_890) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (v_900,5-proj-7-tuple(v_859),v_901) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {421}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {422}insert statestore(bob,charlie,statepack_c(hs_902));
        {423}out(pub, message_b_904)
    ) | (
        {452}get statestore(=bob,=charlie,statepack_c(hs_905: handshakestate)) in
        {425}in(pub, message_c_906: bitstring);
        {426}let v_907: bitstring = catch-fail(handshakestateunpack(hs_905)) in
        {427}let v_908: bitstring = catch-fail(deconcat3(message_c_906)) in
        {428}let v_909: bool = catch-fail(true) in
        {429}let v_910: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
        {430}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {431}let v_912: aead = catch-fail(decrypt(1-proj-2-tuple(v_911),2-proj-2-tuple(v_911),3-proj-3-tuple(v_910),3-proj-3-tuple(v_908))) in
        {432}let v_913: bitstring = catch-fail(aeadunpack(v_912)) in
        {433}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {434}let v_915: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_911))) && success?(1-proj-3-tuple(v_910))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then cipherstatepack(1-proj-2-tuple(v_914),increment_nonce(2-proj-2-tuple(v_911))) else fail-any) else fail-any)) in
        {435}let v_916: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_910)) && success?(1-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if not-caught-fail(v_915) then (v_915,3-proj-3-tuple(v_913),1-proj-3-tuple(v_913)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_917: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) in
        {437}let v_918: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then symmetricstatepack(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),hash(3-proj-3-tuple(v_917),3-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {438}let v_919: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(1-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_920: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_919),2-proj-7-tuple(v_907),3-proj-7-tuple(v_907),4-proj-7-tuple(v_907),5-proj-7-tuple(v_907),6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
        {440}let v_921: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_919))) in
        {441}let v_922: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_921),zero)) in
        {442}let v_923: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_921),zero)) in
        {443}let v_924: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_921),zero)) in
        {444}let v_925: bitstring = catch-fail((if success?(2-proj-3-tuple(v_921)) then (if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (v_922,v_923,v_924) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_926: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_925)) then cipherstatepack(1-proj-3-tuple(v_925),minnonce) else fail-any)) in
        {446}let v_927: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_925)) then cipherstatepack(2-proj-3-tuple(v_925),minnonce) else fail-any)) in
        {447}let v_928: bitstring = catch-fail((if success?(1-proj-3-tuple(v_919)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then (if not-caught-fail(v_926) then (if not-caught-fail(v_927) then (1-proj-3-tuple(v_919),v_926,v_927) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {448}let (hs_929: handshakestate,re_930: key,plaintext_c_931: bitstring,valid_932: bool,cs1_933: cipherstate,cs2_934: cipherstate) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_909) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if (v_909 && 3-proj-3-tuple(v_919)) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (v_920,getpublickey(3-proj-7-tuple(v_907)),2-proj-3-tuple(v_919),true,2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {449}event RecvMsg(bob,charlie,stage_c,plaintext_c_931,valid_932);
        {450}insert statestore(bob,charlie,statepack_d(hs_929));
        {451}event RecvEnd(valid_932)
    ) | (
        {453}event LeakS(phase0,bob);
        {454}out(pub, key_s(bob))
    ) | (
        {455}phase 1;
        {456}event LeakS(phase1,bob);
        {457}out(pub, key_s(bob))
    )
) | (
    {458}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 208 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 27 rules in the queue.
600 rules inserted. The rule base contains 583 rules. 280 rules in the queue.
800 rules inserted. The rule base contains 755 rules. 124 rules in the queue.
1000 rules inserted. The rule base contains 941 rules. 189 rules in the queue.
1200 rules inserted. The rule base contains 1119 rules. 210 rules in the queue.
1400 rules inserted. The rule base contains 1240 rules. 151 rules in the queue.
1600 rules inserted. The rule base contains 1380 rules. 144 rules in the queue.
1800 rules inserted. The rule base contains 1531 rules. 197 rules in the queue.
2000 rules inserted. The rule base contains 1679 rules. 238 rules in the queue.
2200 rules inserted. The rule base contains 1813 rules. 264 rules in the queue.
2400 rules inserted. The rule base contains 1914 rules. 258 rules in the queue.
2600 rules inserted. The rule base contains 2028 rules. 241 rules in the queue.
2800 rules inserted. The rule base contains 2186 rules. 254 rules in the queue.
3000 rules inserted. The rule base contains 2330 rules. 295 rules in the queue.
3200 rules inserted. The rule base contains 2503 rules. 320 rules in the queue.
3400 rules inserted. The rule base contains 2647 rules. 316 rules in the queue.
3600 rules inserted. The rule base contains 2769 rules. 300 rules in the queue.
3800 rules inserted. The rule base contains 2858 rules. 267 rules in the queue.
4000 rules inserted. The rule base contains 2896 rules. 194 rules in the queue.
4200 rules inserted. The rule base contains 2995 rules. 157 rules in the queue.
4400 rules inserted. The rule base contains 3080 rules. 152 rules in the queue.
4600 rules inserted. The rule base contains 3197 rules. 122 rules in the queue.
4800 rules inserted. The rule base contains 3261 rules. 25 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {239}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {125}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {148}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {145}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {147}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {261}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {240}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {259}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {239}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {125}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {148}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {145}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {147}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {261}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {240}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {259}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {239}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {125}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {148}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {145}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {147}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {261}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {240}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {259}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {33}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {354}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {376}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {355}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {375}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {424}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {421}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {423}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {36}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {81}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {33}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {354}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {376}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {355}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {375}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {424}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {421}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {423}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {36}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {81}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {33}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {354}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {376}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {355}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {375}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {424}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {421}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {423}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {36}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {81}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {354}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {376}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 3 may be received at input {355}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {375}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

5. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 4 may be read at get {424}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {421}.
So the entry statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,charlie),g),key_e(bob,charlie)),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {422}.
table(statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,charlie),g),key_e(bob,charlie)),empty,dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {33}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

8. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {354}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

11. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {376}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 10 may be received at input {355}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {375}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

12. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 11 may be read at get {424}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {421}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {423}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

13. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 12 may be received at input {36}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,charlie),g),empty,true))) may be inserted in a table at insert {82}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,charlie),g),empty,true)))).

14. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,charlie),g),empty,true))) that may be in a table by 13 may be read at get {109}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {106}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))) may be sent on channel pub at output {108}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob)))).

15. The entry statestore(bob,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,charlie),g),key_e(bob,charlie)),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {452}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))),msg_c(alice,bob))) that may be sent on channel pub by 14 may be received at input {425}.
So event RecvEnd(true) may be executed at {451}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
