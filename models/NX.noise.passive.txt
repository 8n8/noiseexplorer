File "NX.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "NX.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "NX.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "NX.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 313, character 6:
Warning: identifier e rebound.
File "NX.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ne rebound.
File "NX.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 318, character 6:
Warning: identifier s rebound.
File "NX.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "NX.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 339, characters 6-7:
Warning: identifier re rebound.
File "NX.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 342, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 344, characters 7-8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 352, characters 6-7:
Warning: identifier re rebound.
File "NX.noise.passive.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 355, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 356, characters 48-53:
Warning: identifier valid1 rebound.
File "NX.noise.passive.pv", line 357, characters 6-7:
Warning: identifier rs rebound.
File "NX.noise.passive.pv", line 358, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 359, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 361, characters 7-8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 489, characters 8-9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 482, characters 8-9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 352, characters 6-7:
Warning: identifier re rebound.
File "NX.noise.passive.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 355, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 356, characters 48-53:
Warning: identifier valid1 rebound.
File "NX.noise.passive.pv", line 357, characters 6-7:
Warning: identifier rs rebound.
File "NX.noise.passive.pv", line 358, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 359, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 361, characters 7-8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 474, characters 8-9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "NX.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "NX.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 532, characters 8-9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 524, characters 8-9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 313, character 6:
Warning: identifier e rebound.
File "NX.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ne rebound.
File "NX.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 318, character 6:
Warning: identifier s rebound.
File "NX.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "NX.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NX.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NX.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 517, characters 8-9:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 339, characters 6-7:
Warning: identifier re rebound.
File "NX.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 342, characters 7-8:
Warning: identifier ss rebound.
File "NX.noise.passive.pv", line 344, characters 7-8:
Warning: identifier hs rebound.
File "NX.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "NX.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_431: keypair = keypairpack(empty,empty) in
    (
        {3}let e_432: keypair = keypairpack(empty,empty) in
        {4}let rs_433: key = empty in
        {5}let re_434: key = empty in
        {6}let v_435: bitstring = catch-fail(hash(somename,empty)) in
        {7}let v_436: key = catch-fail(v_435) in
        {8}let v_437: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {9}let v_438: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_435) then (if not-caught-fail(v_436) then (if not-caught-fail(v_437) then symmetricstatepack(v_437,v_436,v_435) else fail-any) else fail-any) else fail-any))) in
        {10}let v_439: symmetricstate = catch-fail((if success?((if not-caught-fail(v_435) then (if not-caught-fail(v_436) then (if not-caught-fail(v_437) then symmetricstatepack(v_437,v_436,v_435) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_438) && success?(is-true(success?(1-proj-3-tuple(v_438))))) then symmetricstatepack(1-proj-3-tuple(v_438),2-proj-3-tuple(v_438),hash(3-proj-3-tuple(v_438),empty)) else fail-any) else fail-any)) in
        {11}let hs: handshakestate = (if not-caught-fail(v_439) then handshakestatepack(v_439,s_431,e_432,rs_433,re_434,empty,true) else fail-any) in
        {12}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {35}get statestore(=alice,=bob,statepack_a(hs_440: handshakestate)) in
        {13}let v_441: bitstring = catch-fail(handshakestateunpack(hs_440)) in
        {14}let v_442: bitstring = catch-fail((empty,empty,empty)) in
        {15}let v_443: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {16}let v_444: keypair = catch-fail((if not-caught-fail(v_443) then keypairpack(v_443,key_e(alice,bob)) else fail-any)) in
        {17}let v_445: bitstring = catch-fail(getpublickey(v_444)) in
        {18}let v_446: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_441))) in
        {19}let v_447: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_441)) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-3-tuple(v_446))))) then symmetricstatepack(1-proj-3-tuple(v_446),2-proj-3-tuple(v_446),hash(3-proj-3-tuple(v_446),v_445)) else fail-any) else fail-any)) in
        {20}let v_448: bitstring = catch-fail(symmetricstateunpack(v_447)) in
        {21}let v_449: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_448))) in
        {22}let v_450: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_449),2-proj-2-tuple(v_449),3-proj-3-tuple(v_448),msg_a(alice,bob))) in
        {23}let v_451: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_448))) in
        {24}let v_452: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_449))) && success?(1-proj-3-tuple(v_448))) then (if (not-caught-fail(v_451) && success?(is-true(success?(1-proj-2-tuple(v_451))))) then cipherstatepack(1-proj-2-tuple(v_451),increment_nonce(2-proj-2-tuple(v_449))) else fail-any) else fail-any)) in
        {25}let v_453: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_448)) && success?(1-proj-3-tuple(v_448))) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-2-tuple(v_449))))) then (if not-caught-fail(v_450) then (if not-caught-fail(v_452) then (v_452,v_450) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {26}let v_454: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_453),2-proj-3-tuple(v_448),3-proj-3-tuple(v_448)))) in
        {27}let v_455: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_453)) && success?(symmetricstatepack(1-proj-2-tuple(v_453),2-proj-3-tuple(v_448),3-proj-3-tuple(v_448)))) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-3-tuple(v_454))))) then symmetricstatepack(1-proj-3-tuple(v_454),2-proj-3-tuple(v_454),hash(3-proj-3-tuple(v_454),2-proj-2-tuple(v_453))) else fail-any) else fail-any)) in
        {28}let v_456: bitstring = catch-fail((if (not-caught-fail(v_448) && success?(is-true(success?(1-proj-3-tuple(v_448))))) then (if (not-caught-fail(v_453) && success?(is-true(success?(1-proj-2-tuple(v_453))))) then (if not-caught-fail(v_455) then (v_455,2-proj-2-tuple(v_453)) else fail-any) else fail-any) else fail-any)) in
        {29}let v_457: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_456),2-proj-7-tuple(v_441),v_444,4-proj-7-tuple(v_441),5-proj-7-tuple(v_441),6-proj-7-tuple(v_441),7-proj-7-tuple(v_441))) in
        {30}let v_458: bitstring = catch-fail(concat3(v_445,2-proj-3-tuple(v_442),2-proj-2-tuple(v_456))) in
        {31}let (hs_459: handshakestate,re_460: key,message_a: bitstring) = (if (not-caught-fail(v_441) && success?(is-true(success?(1-proj-7-tuple(v_441))))) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-3-tuple(v_442))))) then (if not-caught-fail(v_444) then (if not-caught-fail(v_445) then (if not-caught-fail(v_447) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then (if not-caught-fail(v_457) then (if not-caught-fail(v_458) then (v_457,5-proj-7-tuple(v_441),v_458) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {32}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {33}insert statestore(alice,bob,statepack_b(hs_459));
        {34}out(pub, message_a)
    ) | (
        {83}get statestore(=alice,=bob,statepack_b(hs_461: handshakestate)) in
        {36}in(pub, message_b: bitstring);
        {37}let v_462: bitstring = catch-fail(handshakestateunpack(hs_461)) in
        {38}let v_463: bitstring = catch-fail(deconcat3(message_b)) in
        {39}let v_464: bool = catch-fail(true) in
        {40}let v_465: key = catch-fail(1-proj-3-tuple(v_463)) in
        {41}let v_466: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_462))) in
        {42}let v_467: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_462)) then (if (not-caught-fail(v_466) && success?(is-true(success?(1-proj-3-tuple(v_466))))) then symmetricstatepack(1-proj-3-tuple(v_466),2-proj-3-tuple(v_466),hash(3-proj-3-tuple(v_466),v_465)) else fail-any) else fail-any)) in
        {43}let v_468: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_462))) in
        {44}let v_469: bitstring = catch-fail(symmetricstateunpack(v_467)) in
        {45}let v_470: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_469),(if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-2-tuple(v_468))))) then dhexp(2-proj-2-tuple(v_468),v_465) else fail-any) else fail-any))) in
        {46}let v_471: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_469),(if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-2-tuple(v_468))))) then dhexp(2-proj-2-tuple(v_468),v_465) else fail-any) else fail-any))) in
        {47}let v_472: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_469),(if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-2-tuple(v_468))))) then dhexp(2-proj-2-tuple(v_468),v_465) else fail-any) else fail-any))) in
        {48}let v_473: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-2-tuple(v_468))))) then dhexp(2-proj-2-tuple(v_468),v_465) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_469))) then (if not-caught-fail(v_470) then (if not-caught-fail(v_471) then (if not-caught-fail(v_472) then (v_470,v_471,v_472) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {49}let v_474: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-2-tuple(v_468))))) then dhexp(2-proj-2-tuple(v_468),v_465) else fail-any) else fail-any)) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-3-tuple(v_469))))) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-3-tuple(v_473))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_473)) then cipherstatepack(2-proj-3-tuple(v_473),minnonce) else fail-any),1-proj-3-tuple(v_473),3-proj-3-tuple(v_469)) else fail-any) else fail-any) else fail-any)) in
        {50}let v_475: bitstring = catch-fail(symmetricstateunpack(v_474)) in
        {51}let v_476: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_475))) in
        {52}let v_477: aead = catch-fail(decrypt(1-proj-2-tuple(v_476),2-proj-2-tuple(v_476),3-proj-3-tuple(v_475),2-proj-3-tuple(v_463))) in
        {53}let v_478: bitstring = catch-fail(aeadunpack(v_477)) in
        {54}let v_479: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_475))) in
        {55}let v_480: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_476))) && success?(1-proj-3-tuple(v_475))) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-2-tuple(v_479))))) then cipherstatepack(1-proj-2-tuple(v_479),increment_nonce(2-proj-2-tuple(v_476))) else fail-any) else fail-any)) in
        {56}let v_481: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_463)) && (success?(3-proj-3-tuple(v_475)) && success?(1-proj-3-tuple(v_475)))) then (if (not-caught-fail(v_476) && success?(is-true(success?(1-proj-2-tuple(v_476))))) then (if not-caught-fail(v_477) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-3-tuple(v_478))))) then (if not-caught-fail(v_480) then (v_480,3-proj-3-tuple(v_478),1-proj-3-tuple(v_478)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {57}let v_482: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_481),2-proj-3-tuple(v_475),3-proj-3-tuple(v_475)))) in
        {58}let v_483: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_463)) && success?(symmetricstatepack(1-proj-3-tuple(v_481),2-proj-3-tuple(v_475),3-proj-3-tuple(v_475)))) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-3-tuple(v_482))))) then symmetricstatepack(1-proj-3-tuple(v_482),2-proj-3-tuple(v_482),hash(3-proj-3-tuple(v_482),2-proj-3-tuple(v_463))) else fail-any) else fail-any)) in
        {59}let v_484: bitstring = catch-fail((if success?(2-proj-3-tuple(v_463)) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then (if not-caught-fail(v_483) then (v_483,2-proj-3-tuple(v_481),3-proj-3-tuple(v_481)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_485: key = catch-fail(2-proj-3-tuple(v_484)) in
        {61}let v_486: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_462))) in
        {62}let v_487: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_484))) in
        {63}let v_488: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_487),(if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_485) else fail-any) else fail-any))) in
        {64}let v_489: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_487),(if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_485) else fail-any) else fail-any))) in
        {65}let v_490: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_487),(if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_485) else fail-any) else fail-any))) in
        {66}let v_491: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_485) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_487))) then (if not-caught-fail(v_488) then (if not-caught-fail(v_489) then (if not-caught-fail(v_490) then (v_488,v_489,v_490) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {67}let v_492: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_462)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_485) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_484))) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_491)) then cipherstatepack(2-proj-3-tuple(v_491),minnonce) else fail-any),1-proj-3-tuple(v_491),3-proj-3-tuple(v_487)) else fail-any) else fail-any) else fail-any)) in
        {68}let v_493: bitstring = catch-fail(symmetricstateunpack(v_492)) in
        {69}let v_494: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {70}let v_495: aead = catch-fail(decrypt(1-proj-2-tuple(v_494),2-proj-2-tuple(v_494),3-proj-3-tuple(v_493),3-proj-3-tuple(v_463))) in
        {71}let v_496: bitstring = catch-fail(aeadunpack(v_495)) in
        {72}let v_497: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {73}let v_498: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_494))) && success?(1-proj-3-tuple(v_493))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then cipherstatepack(1-proj-2-tuple(v_497),increment_nonce(2-proj-2-tuple(v_494))) else fail-any) else fail-any)) in
        {74}let v_499: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_463)) && (success?(3-proj-3-tuple(v_493)) && success?(1-proj-3-tuple(v_493)))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-2-tuple(v_494))))) then (if not-caught-fail(v_495) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-3-tuple(v_496))))) then (if not-caught-fail(v_498) then (v_498,3-proj-3-tuple(v_496),1-proj-3-tuple(v_496)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {75}let v_500: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_499),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) in
        {76}let v_501: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_463)) && success?(symmetricstatepack(1-proj-3-tuple(v_499),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then symmetricstatepack(1-proj-3-tuple(v_500),2-proj-3-tuple(v_500),hash(3-proj-3-tuple(v_500),3-proj-3-tuple(v_463))) else fail-any) else fail-any)) in
        {77}let v_502: bitstring = catch-fail((if success?(3-proj-3-tuple(v_463)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-3-tuple(v_493))))) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-3-tuple(v_499))))) then (if not-caught-fail(v_501) then (v_501,2-proj-3-tuple(v_499),3-proj-3-tuple(v_499)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_503: key = catch-fail(dhexp(key_s(bob),g)) in
        {79}let v_504: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_502),2-proj-7-tuple(v_462),3-proj-7-tuple(v_462),v_485,v_465,6-proj-7-tuple(v_462),7-proj-7-tuple(v_462))) in
        {80}let (hs_505: handshakestate,re_506: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-7-tuple(v_462))))) then (if (not-caught-fail(v_463) && success?(is-true(success?(1-proj-3-tuple(v_463))))) then (if not-caught-fail(v_464) then (if not-caught-fail(v_465) then (if not-caught-fail(v_467) then (if not-caught-fail(v_474) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-3-tuple(v_484))))) then (if not-caught-fail(v_485) then (if not-caught-fail(v_492) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then (if ((3-proj-3-tuple(v_484) && 3-proj-3-tuple(v_502)) && (v_485 = getpublickey((if not-caught-fail(v_503) then keypairpack(v_503,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_504) then (v_504,getpublickey(3-proj-7-tuple(v_462)),2-proj-3-tuple(v_502),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {81}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {82}insert statestore(alice,bob,statepack_c(hs_505))
    ) | (
        {109}get statestore(=alice,=bob,statepack_c(hs_507: handshakestate)) in
        {84}let v_508: bitstring = catch-fail(handshakestateunpack(hs_507)) in
        {85}let v_509: bitstring = catch-fail((empty,empty,empty)) in
        {86}let v_510: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_508))) in
        {87}let v_511: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_510))) in
        {88}let v_512: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_511),2-proj-2-tuple(v_511),3-proj-3-tuple(v_510),msg_c(alice,bob))) in
        {89}let v_513: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_510))) in
        {90}let v_514: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_511))) && success?(1-proj-3-tuple(v_510))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then cipherstatepack(1-proj-2-tuple(v_513),increment_nonce(2-proj-2-tuple(v_511))) else fail-any) else fail-any)) in
        {91}let v_515: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_510)) && success?(1-proj-3-tuple(v_510))) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-2-tuple(v_511))))) then (if not-caught-fail(v_512) then (if not-caught-fail(v_514) then (v_514,v_512) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_516: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_515),2-proj-3-tuple(v_510),3-proj-3-tuple(v_510)))) in
        {93}let v_517: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_515)) && success?(symmetricstatepack(1-proj-2-tuple(v_515),2-proj-3-tuple(v_510),3-proj-3-tuple(v_510)))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then symmetricstatepack(1-proj-3-tuple(v_516),2-proj-3-tuple(v_516),hash(3-proj-3-tuple(v_516),2-proj-2-tuple(v_515))) else fail-any) else fail-any)) in
        {94}let v_518: bitstring = catch-fail((if success?(1-proj-7-tuple(v_508)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-2-tuple(v_515))))) then (if not-caught-fail(v_517) then (v_517,2-proj-2-tuple(v_515)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_519: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_518),2-proj-7-tuple(v_508),3-proj-7-tuple(v_508),4-proj-7-tuple(v_508),5-proj-7-tuple(v_508),6-proj-7-tuple(v_508),7-proj-7-tuple(v_508))) in
        {96}let v_520: bitstring = catch-fail(concat3(1-proj-3-tuple(v_509),2-proj-3-tuple(v_509),2-proj-2-tuple(v_518))) in
        {97}let v_521: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_518))) in
        {98}let v_522: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_521),zero)) in
        {99}let v_523: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_521),zero)) in
        {100}let v_524: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_521),zero)) in
        {101}let v_525: bitstring = catch-fail((if success?(2-proj-3-tuple(v_521)) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then (v_522,v_523,v_524) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_526: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_525)) then cipherstatepack(1-proj-3-tuple(v_525),minnonce) else fail-any)) in
        {103}let v_527: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_525)) then cipherstatepack(2-proj-3-tuple(v_525),minnonce) else fail-any)) in
        {104}let v_528: bitstring = catch-fail((if success?(1-proj-2-tuple(v_518)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then (if not-caught-fail(v_526) then (if not-caught-fail(v_527) then (1-proj-2-tuple(v_518),v_526,v_527) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {105}let (hs_529: handshakestate,re_530: key,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-7-tuple(v_508))))) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-3-tuple(v_509))))) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-2-tuple(v_518))))) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then (v_519,5-proj-7-tuple(v_508),v_520,2-proj-3-tuple(v_528),3-proj-3-tuple(v_528)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {106}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {107}insert statestore(alice,bob,statepack_d(hs_529));
        {108}out(pub, message_c)
    ) | (
        {110}event LeakS(phase0,alice);
        {111}out(pub, key_s(alice))
    ) | (
        {112}phase 1;
        {113}event LeakS(phase1,alice);
        {114}out(pub, key_s(alice))
    )
) | (
    {115}let s_531: keypair = keypairpack(empty,empty) in
    (
        {116}let e_532: keypair = keypairpack(empty,empty) in
        {117}let rs_533: key = empty in
        {118}let re_534: key = empty in
        {119}let v_535: bitstring = catch-fail(hash(somename,empty)) in
        {120}let v_536: key = catch-fail(v_535) in
        {121}let v_537: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {122}let v_538: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_535) then (if not-caught-fail(v_536) then (if not-caught-fail(v_537) then symmetricstatepack(v_537,v_536,v_535) else fail-any) else fail-any) else fail-any))) in
        {123}let v_539: symmetricstate = catch-fail((if success?((if not-caught-fail(v_535) then (if not-caught-fail(v_536) then (if not-caught-fail(v_537) then symmetricstatepack(v_537,v_536,v_535) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then symmetricstatepack(1-proj-3-tuple(v_538),2-proj-3-tuple(v_538),hash(3-proj-3-tuple(v_538),empty)) else fail-any) else fail-any)) in
        {124}let hs_540: handshakestate = (if not-caught-fail(v_539) then handshakestatepack(v_539,s_531,e_532,rs_533,re_534,empty,true) else fail-any) in
        {125}insert statestore(alice,charlie,statepack_a(hs_540))
    ) | (
        {148}get statestore(=alice,=charlie,statepack_a(hs_541: handshakestate)) in
        {126}let v_542: bitstring = catch-fail(handshakestateunpack(hs_541)) in
        {127}let v_543: bitstring = catch-fail((empty,empty,empty)) in
        {128}let v_544: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {129}let v_545: keypair = catch-fail((if not-caught-fail(v_544) then keypairpack(v_544,key_e(alice,charlie)) else fail-any)) in
        {130}let v_546: bitstring = catch-fail(getpublickey(v_545)) in
        {131}let v_547: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_542))) in
        {132}let v_548: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_542)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),v_546)) else fail-any) else fail-any)) in
        {133}let v_549: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {134}let v_550: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {135}let v_551: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_550),2-proj-2-tuple(v_550),3-proj-3-tuple(v_549),msg_a(alice,charlie))) in
        {136}let v_552: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {137}let v_553: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_550))) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then cipherstatepack(1-proj-2-tuple(v_552),increment_nonce(2-proj-2-tuple(v_550))) else fail-any) else fail-any)) in
        {138}let v_554: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_549)) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_553) then (v_553,v_551) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_555: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) in
        {140}let v_556: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_554)) && success?(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_555),hash(3-proj-3-tuple(v_555),2-proj-2-tuple(v_554))) else fail-any) else fail-any)) in
        {141}let v_557: bitstring = catch-fail((if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then (if not-caught-fail(v_556) then (v_556,2-proj-2-tuple(v_554)) else fail-any) else fail-any) else fail-any)) in
        {142}let v_558: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_557),2-proj-7-tuple(v_542),v_545,4-proj-7-tuple(v_542),5-proj-7-tuple(v_542),6-proj-7-tuple(v_542),7-proj-7-tuple(v_542))) in
        {143}let v_559: bitstring = catch-fail(concat3(v_546,2-proj-3-tuple(v_543),2-proj-2-tuple(v_557))) in
        {144}let (hs_560: handshakestate,re_561: key,message_a_562: bitstring) = (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-7-tuple(v_542))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (v_558,5-proj-7-tuple(v_542),v_559) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {145}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {146}insert statestore(alice,charlie,statepack_b(hs_560));
        {147}out(pub, message_a_562)
    ) | (
        {196}get statestore(=alice,=charlie,statepack_b(hs_563: handshakestate)) in
        {149}in(pub, message_b_564: bitstring);
        {150}let v_565: bitstring = catch-fail(handshakestateunpack(hs_563)) in
        {151}let v_566: bitstring = catch-fail(deconcat3(message_b_564)) in
        {152}let v_567: bool = catch-fail(true) in
        {153}let v_568: key = catch-fail(1-proj-3-tuple(v_566)) in
        {154}let v_569: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_565))) in
        {155}let v_570: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_565)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_569),hash(3-proj-3-tuple(v_569),v_568)) else fail-any) else fail-any)) in
        {156}let v_571: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_565))) in
        {157}let v_572: bitstring = catch-fail(symmetricstateunpack(v_570)) in
        {158}let v_573: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_572),(if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_568) else fail-any) else fail-any))) in
        {159}let v_574: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_572),(if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_568) else fail-any) else fail-any))) in
        {160}let v_575: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_572),(if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_568) else fail-any) else fail-any))) in
        {161}let v_576: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_568) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_572))) then (if not-caught-fail(v_573) then (if not-caught-fail(v_574) then (if not-caught-fail(v_575) then (v_573,v_574,v_575) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {162}let v_577: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_568) else fail-any) else fail-any)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_576)) then cipherstatepack(2-proj-3-tuple(v_576),minnonce) else fail-any),1-proj-3-tuple(v_576),3-proj-3-tuple(v_572)) else fail-any) else fail-any) else fail-any)) in
        {163}let v_578: bitstring = catch-fail(symmetricstateunpack(v_577)) in
        {164}let v_579: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_578))) in
        {165}let v_580: aead = catch-fail(decrypt(1-proj-2-tuple(v_579),2-proj-2-tuple(v_579),3-proj-3-tuple(v_578),2-proj-3-tuple(v_566))) in
        {166}let v_581: bitstring = catch-fail(aeadunpack(v_580)) in
        {167}let v_582: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_578))) in
        {168}let v_583: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_579))) && success?(1-proj-3-tuple(v_578))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then cipherstatepack(1-proj-2-tuple(v_582),increment_nonce(2-proj-2-tuple(v_579))) else fail-any) else fail-any)) in
        {169}let v_584: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_566)) && (success?(3-proj-3-tuple(v_578)) && success?(1-proj-3-tuple(v_578)))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then (if not-caught-fail(v_580) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if not-caught-fail(v_583) then (v_583,3-proj-3-tuple(v_581),1-proj-3-tuple(v_581)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {170}let v_585: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_584),2-proj-3-tuple(v_578),3-proj-3-tuple(v_578)))) in
        {171}let v_586: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_566)) && success?(symmetricstatepack(1-proj-3-tuple(v_584),2-proj-3-tuple(v_578),3-proj-3-tuple(v_578)))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack(1-proj-3-tuple(v_585),2-proj-3-tuple(v_585),hash(3-proj-3-tuple(v_585),2-proj-3-tuple(v_566))) else fail-any) else fail-any)) in
        {172}let v_587: bitstring = catch-fail((if success?(2-proj-3-tuple(v_566)) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if not-caught-fail(v_586) then (v_586,2-proj-3-tuple(v_584),3-proj-3-tuple(v_584)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {173}let v_588: key = catch-fail(2-proj-3-tuple(v_587)) in
        {174}let v_589: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_565))) in
        {175}let v_590: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_587))) in
        {176}let v_591: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_590),(if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),v_588) else fail-any) else fail-any))) in
        {177}let v_592: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_590),(if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),v_588) else fail-any) else fail-any))) in
        {178}let v_593: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_590),(if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),v_588) else fail-any) else fail-any))) in
        {179}let v_594: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),v_588) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_590))) then (if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then (v_591,v_592,v_593) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {180}let v_595: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_565)) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-2-tuple(v_589))))) then dhexp(2-proj-2-tuple(v_589),v_588) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_587))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_594)) then cipherstatepack(2-proj-3-tuple(v_594),minnonce) else fail-any),1-proj-3-tuple(v_594),3-proj-3-tuple(v_590)) else fail-any) else fail-any) else fail-any)) in
        {181}let v_596: bitstring = catch-fail(symmetricstateunpack(v_595)) in
        {182}let v_597: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_596))) in
        {183}let v_598: aead = catch-fail(decrypt(1-proj-2-tuple(v_597),2-proj-2-tuple(v_597),3-proj-3-tuple(v_596),3-proj-3-tuple(v_566))) in
        {184}let v_599: bitstring = catch-fail(aeadunpack(v_598)) in
        {185}let v_600: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_596))) in
        {186}let v_601: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_597))) && success?(1-proj-3-tuple(v_596))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then cipherstatepack(1-proj-2-tuple(v_600),increment_nonce(2-proj-2-tuple(v_597))) else fail-any) else fail-any)) in
        {187}let v_602: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_566)) && (success?(3-proj-3-tuple(v_596)) && success?(1-proj-3-tuple(v_596)))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then (if not-caught-fail(v_598) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if not-caught-fail(v_601) then (v_601,3-proj-3-tuple(v_599),1-proj-3-tuple(v_599)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {188}let v_603: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_602),2-proj-3-tuple(v_596),3-proj-3-tuple(v_596)))) in
        {189}let v_604: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_566)) && success?(symmetricstatepack(1-proj-3-tuple(v_602),2-proj-3-tuple(v_596),3-proj-3-tuple(v_596)))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then symmetricstatepack(1-proj-3-tuple(v_603),2-proj-3-tuple(v_603),hash(3-proj-3-tuple(v_603),3-proj-3-tuple(v_566))) else fail-any) else fail-any)) in
        {190}let v_605: bitstring = catch-fail((if success?(3-proj-3-tuple(v_566)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if not-caught-fail(v_604) then (v_604,2-proj-3-tuple(v_602),3-proj-3-tuple(v_602)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {191}let v_606: key = catch-fail(dhexp(key_s(charlie),g)) in
        {192}let v_607: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_605),2-proj-7-tuple(v_565),3-proj-7-tuple(v_565),v_588,v_568,6-proj-7-tuple(v_565),7-proj-7-tuple(v_565))) in
        {193}let (hs_608: handshakestate,re_609: key,plaintext_b_610: bitstring,valid_611: bool) = (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-7-tuple(v_565))))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then (if not-caught-fail(v_570) then (if not-caught-fail(v_577) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if not-caught-fail(v_588) then (if not-caught-fail(v_595) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if ((3-proj-3-tuple(v_587) && 3-proj-3-tuple(v_605)) && (v_588 = getpublickey((if not-caught-fail(v_606) then keypairpack(v_606,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_607) then (v_607,getpublickey(3-proj-7-tuple(v_565)),2-proj-3-tuple(v_605),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {194}event RecvMsg(alice,charlie,stage_b,plaintext_b_610,valid_611);
        {195}insert statestore(alice,charlie,statepack_c(hs_608))
    ) | (
        {222}get statestore(=alice,=charlie,statepack_c(hs_612: handshakestate)) in
        {197}let v_613: bitstring = catch-fail(handshakestateunpack(hs_612)) in
        {198}let v_614: bitstring = catch-fail((empty,empty,empty)) in
        {199}let v_615: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_613))) in
        {200}let v_616: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_615))) in
        {201}let v_617: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_616),2-proj-2-tuple(v_616),3-proj-3-tuple(v_615),msg_c(alice,charlie))) in
        {202}let v_618: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_615))) in
        {203}let v_619: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_616))) && success?(1-proj-3-tuple(v_615))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then cipherstatepack(1-proj-2-tuple(v_618),increment_nonce(2-proj-2-tuple(v_616))) else fail-any) else fail-any)) in
        {204}let v_620: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_615)) && success?(1-proj-3-tuple(v_615))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then (if not-caught-fail(v_617) then (if not-caught-fail(v_619) then (v_619,v_617) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {205}let v_621: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_620),2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)))) in
        {206}let v_622: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_620)) && success?(symmetricstatepack(1-proj-2-tuple(v_620),2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then symmetricstatepack(1-proj-3-tuple(v_621),2-proj-3-tuple(v_621),hash(3-proj-3-tuple(v_621),2-proj-2-tuple(v_620))) else fail-any) else fail-any)) in
        {207}let v_623: bitstring = catch-fail((if success?(1-proj-7-tuple(v_613)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then (if not-caught-fail(v_622) then (v_622,2-proj-2-tuple(v_620)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let v_624: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_623),2-proj-7-tuple(v_613),3-proj-7-tuple(v_613),4-proj-7-tuple(v_613),5-proj-7-tuple(v_613),6-proj-7-tuple(v_613),7-proj-7-tuple(v_613))) in
        {209}let v_625: bitstring = catch-fail(concat3(1-proj-3-tuple(v_614),2-proj-3-tuple(v_614),2-proj-2-tuple(v_623))) in
        {210}let v_626: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_623))) in
        {211}let v_627: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_626),zero)) in
        {212}let v_628: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_626),zero)) in
        {213}let v_629: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_626),zero)) in
        {214}let v_630: bitstring = catch-fail((if success?(2-proj-3-tuple(v_626)) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (v_627,v_628,v_629) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {215}let v_631: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_630)) then cipherstatepack(1-proj-3-tuple(v_630),minnonce) else fail-any)) in
        {216}let v_632: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_630)) then cipherstatepack(2-proj-3-tuple(v_630),minnonce) else fail-any)) in
        {217}let v_633: bitstring = catch-fail((if success?(1-proj-2-tuple(v_623)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (1-proj-2-tuple(v_623),v_631,v_632) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let (hs_634: handshakestate,re_635: key,message_c_636: bitstring,cs1_637: cipherstate,cs2_638: cipherstate) = (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-7-tuple(v_613))))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (v_624,5-proj-7-tuple(v_613),v_625,2-proj-3-tuple(v_633),3-proj-3-tuple(v_633)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {219}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {220}insert statestore(alice,charlie,statepack_d(hs_634));
        {221}out(pub, message_c_636)
    ) | (
        {223}event LeakS(phase0,alice);
        {224}out(pub, key_s(alice))
    ) | (
        {225}phase 1;
        {226}event LeakS(phase1,alice);
        {227}out(pub, key_s(alice))
    )
) | (
    {228}let s_639: keypair = keypairpack(empty,empty) in
    {229}out(pub, getpublickey(s_639));
    (
        {230}let e_640: keypair = keypairpack(empty,empty) in
        {231}let rs_641: key = empty in
        {232}let re_642: key = empty in
        {233}let v_643: bitstring = catch-fail(hash(somename,empty)) in
        {234}let v_644: key = catch-fail(v_643) in
        {235}let v_645: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {236}let v_646: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (if not-caught-fail(v_645) then symmetricstatepack(v_645,v_644,v_643) else fail-any) else fail-any) else fail-any))) in
        {237}let v_647: symmetricstate = catch-fail((if success?((if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (if not-caught-fail(v_645) then symmetricstatepack(v_645,v_644,v_643) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_646),hash(3-proj-3-tuple(v_646),empty)) else fail-any) else fail-any)) in
        {238}let hs_648: handshakestate = (if not-caught-fail(v_647) then handshakestatepack(v_647,s_639,e_640,rs_641,re_642,empty,false) else fail-any) in
        {239}insert statestore(bob,alice,statepack_a(hs_648))
    ) | (
        {261}get statestore(=bob,=alice,statepack_a(hs_649: handshakestate)) in
        {240}in(pub, message_a_650: bitstring);
        {241}let v_651: bitstring = catch-fail(handshakestateunpack(hs_649)) in
        {242}let v_652: bitstring = catch-fail(deconcat3(message_a_650)) in
        {243}let v_653: bool = catch-fail(true) in
        {244}let v_654: key = catch-fail(1-proj-3-tuple(v_652)) in
        {245}let v_655: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_651))) in
        {246}let v_656: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_651)) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_655),hash(3-proj-3-tuple(v_655),v_654)) else fail-any) else fail-any)) in
        {247}let v_657: bitstring = catch-fail(symmetricstateunpack(v_656)) in
        {248}let v_658: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_657))) in
        {249}let v_659: aead = catch-fail(decrypt(1-proj-2-tuple(v_658),2-proj-2-tuple(v_658),3-proj-3-tuple(v_657),3-proj-3-tuple(v_652))) in
        {250}let v_660: bitstring = catch-fail(aeadunpack(v_659)) in
        {251}let v_661: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_657))) in
        {252}let v_662: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_658))) && success?(1-proj-3-tuple(v_657))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then cipherstatepack(1-proj-2-tuple(v_661),increment_nonce(2-proj-2-tuple(v_658))) else fail-any) else fail-any)) in
        {253}let v_663: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_652)) && (success?(3-proj-3-tuple(v_657)) && success?(1-proj-3-tuple(v_657)))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-2-tuple(v_658))))) then (if not-caught-fail(v_659) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if not-caught-fail(v_662) then (v_662,3-proj-3-tuple(v_660),1-proj-3-tuple(v_660)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {254}let v_664: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_663),2-proj-3-tuple(v_657),3-proj-3-tuple(v_657)))) in
        {255}let v_665: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_652)) && success?(symmetricstatepack(1-proj-3-tuple(v_663),2-proj-3-tuple(v_657),3-proj-3-tuple(v_657)))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then symmetricstatepack(1-proj-3-tuple(v_664),2-proj-3-tuple(v_664),hash(3-proj-3-tuple(v_664),3-proj-3-tuple(v_652))) else fail-any) else fail-any)) in
        {256}let v_666: bitstring = catch-fail((if success?(3-proj-3-tuple(v_652)) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if not-caught-fail(v_665) then (v_665,2-proj-3-tuple(v_663),3-proj-3-tuple(v_663)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {257}let v_667: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_666),2-proj-7-tuple(v_651),3-proj-7-tuple(v_651),4-proj-7-tuple(v_651),v_654,6-proj-7-tuple(v_651),7-proj-7-tuple(v_651))) in
        {258}let (hs_668: handshakestate,re_669: key,plaintext_a: bitstring,valid_670: bool) = (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-7-tuple(v_651))))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (if not-caught-fail(v_656) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if (v_653 && 3-proj-3-tuple(v_666)) then (if not-caught-fail(v_667) then (v_667,getpublickey(3-proj-7-tuple(v_651)),2-proj-3-tuple(v_666),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {259}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_670);
        {260}insert statestore(bob,alice,statepack_b(hs_668))
    ) | (
        {309}get statestore(=bob,=alice,statepack_b(hs_671: handshakestate)) in
        {262}let v_672: bitstring = catch-fail(handshakestateunpack(hs_671)) in
        {263}let v_673: bitstring = catch-fail((empty,empty,empty)) in
        {264}let v_674: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {265}let v_675: keypair = catch-fail((if not-caught-fail(v_674) then keypairpack(v_674,key_e(bob,alice)) else fail-any)) in
        {266}let v_676: bitstring = catch-fail(getpublickey(v_675)) in
        {267}let v_677: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_672))) in
        {268}let v_678: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_672)) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then symmetricstatepack(1-proj-3-tuple(v_677),2-proj-3-tuple(v_677),hash(3-proj-3-tuple(v_677),v_676)) else fail-any) else fail-any)) in
        {269}let v_679: bitstring = catch-fail(keypairunpack(v_675)) in
        {270}let v_680: bitstring = catch-fail(symmetricstateunpack(v_678)) in
        {271}let v_681: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_680),(if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then dhexp(2-proj-2-tuple(v_679),5-proj-7-tuple(v_672)) else fail-any) else fail-any))) in
        {272}let v_682: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_680),(if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then dhexp(2-proj-2-tuple(v_679),5-proj-7-tuple(v_672)) else fail-any) else fail-any))) in
        {273}let v_683: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_680),(if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then dhexp(2-proj-2-tuple(v_679),5-proj-7-tuple(v_672)) else fail-any) else fail-any))) in
        {274}let v_684: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then dhexp(2-proj-2-tuple(v_679),5-proj-7-tuple(v_672)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_680))) then (if not-caught-fail(v_681) then (if not-caught-fail(v_682) then (if not-caught-fail(v_683) then (v_681,v_682,v_683) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {275}let v_685: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then dhexp(2-proj-2-tuple(v_679),5-proj-7-tuple(v_672)) else fail-any) else fail-any)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_684)) then cipherstatepack(2-proj-3-tuple(v_684),minnonce) else fail-any),1-proj-3-tuple(v_684),3-proj-3-tuple(v_680)) else fail-any) else fail-any) else fail-any)) in
        {276}let v_686: key = catch-fail(dhexp(key_s(bob),g)) in
        {277}let v_687: keypair = catch-fail((if not-caught-fail(v_686) then keypairpack(v_686,key_s(bob)) else fail-any)) in
        {278}let v_688: bitstring = catch-fail(symmetricstateunpack(v_685)) in
        {279}let v_689: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {280}let v_690: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_689),2-proj-2-tuple(v_689),3-proj-3-tuple(v_688),getpublickey(v_687))) in
        {281}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {282}let v_692: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_689))) && success?(1-proj-3-tuple(v_688))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then cipherstatepack(1-proj-2-tuple(v_691),increment_nonce(2-proj-2-tuple(v_689))) else fail-any) else fail-any)) in
        {283}let v_693: bitstring = catch-fail((if (success?(getpublickey(v_687)) && (success?(3-proj-3-tuple(v_688)) && success?(1-proj-3-tuple(v_688)))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then (if not-caught-fail(v_690) then (if not-caught-fail(v_692) then (v_692,v_690) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {284}let v_694: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) in
        {285}let v_695: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_693)) && success?(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then symmetricstatepack(1-proj-3-tuple(v_694),2-proj-3-tuple(v_694),hash(3-proj-3-tuple(v_694),2-proj-2-tuple(v_693))) else fail-any) else fail-any)) in
        {286}let v_696: bitstring = catch-fail((if success?(getpublickey(v_687)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,2-proj-2-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {287}let v_697: bitstring = catch-fail(keypairunpack(v_687)) in
        {288}let v_698: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_696))) in
        {289}let v_699: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_698),(if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then dhexp(2-proj-2-tuple(v_697),5-proj-7-tuple(v_672)) else fail-any) else fail-any))) in
        {290}let v_700: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_698),(if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then dhexp(2-proj-2-tuple(v_697),5-proj-7-tuple(v_672)) else fail-any) else fail-any))) in
        {291}let v_701: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_698),(if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then dhexp(2-proj-2-tuple(v_697),5-proj-7-tuple(v_672)) else fail-any) else fail-any))) in
        {292}let v_702: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then dhexp(2-proj-2-tuple(v_697),5-proj-7-tuple(v_672)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_698))) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then (if not-caught-fail(v_701) then (v_699,v_700,v_701) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_703: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_672)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then dhexp(2-proj-2-tuple(v_697),5-proj-7-tuple(v_672)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_696))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_702)) then cipherstatepack(2-proj-3-tuple(v_702),minnonce) else fail-any),1-proj-3-tuple(v_702),3-proj-3-tuple(v_698)) else fail-any) else fail-any) else fail-any)) in
        {294}let v_704: bitstring = catch-fail(symmetricstateunpack(v_703)) in
        {295}let v_705: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_704))) in
        {296}let v_706: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_705),2-proj-2-tuple(v_705),3-proj-3-tuple(v_704),msg_b(bob,alice))) in
        {297}let v_707: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_704))) in
        {298}let v_708: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_705))) && success?(1-proj-3-tuple(v_704))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-2-tuple(v_707))))) then cipherstatepack(1-proj-2-tuple(v_707),increment_nonce(2-proj-2-tuple(v_705))) else fail-any) else fail-any)) in
        {299}let v_709: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_704)) && success?(1-proj-3-tuple(v_704))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then (if not-caught-fail(v_706) then (if not-caught-fail(v_708) then (v_708,v_706) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_710: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_709),2-proj-3-tuple(v_704),3-proj-3-tuple(v_704)))) in
        {301}let v_711: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_709)) && success?(symmetricstatepack(1-proj-2-tuple(v_709),2-proj-3-tuple(v_704),3-proj-3-tuple(v_704)))) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then symmetricstatepack(1-proj-3-tuple(v_710),2-proj-3-tuple(v_710),hash(3-proj-3-tuple(v_710),2-proj-2-tuple(v_709))) else fail-any) else fail-any)) in
        {302}let v_712: bitstring = catch-fail((if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-2-tuple(v_709))))) then (if not-caught-fail(v_711) then (v_711,2-proj-2-tuple(v_709)) else fail-any) else fail-any) else fail-any)) in
        {303}let v_713: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_712),v_687,v_675,4-proj-7-tuple(v_672),5-proj-7-tuple(v_672),6-proj-7-tuple(v_672),7-proj-7-tuple(v_672))) in
        {304}let v_714: bitstring = catch-fail(concat3(v_676,2-proj-2-tuple(v_696),2-proj-2-tuple(v_712))) in
        {305}let (hs_715: handshakestate,re_716: key,message_b_717: bitstring) = (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-7-tuple(v_672))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if not-caught-fail(v_675) then (if not-caught-fail(v_676) then (if not-caught-fail(v_678) then (if not-caught-fail(v_685) then (if not-caught-fail(v_687) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then (if not-caught-fail(v_703) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-2-tuple(v_712))))) then (if not-caught-fail(v_713) then (if not-caught-fail(v_714) then (v_713,5-proj-7-tuple(v_672),v_714) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {306}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {307}insert statestore(bob,alice,statepack_c(hs_715));
        {308}out(pub, message_b_717)
    ) | (
        {337}get statestore(=bob,=alice,statepack_c(hs_718: handshakestate)) in
        {310}in(pub, message_c_719: bitstring);
        {311}let v_720: bitstring = catch-fail(handshakestateunpack(hs_718)) in
        {312}let v_721: bitstring = catch-fail(deconcat3(message_c_719)) in
        {313}let v_722: bool = catch-fail(true) in
        {314}let v_723: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_720))) in
        {315}let v_724: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_723))) in
        {316}let v_725: aead = catch-fail(decrypt(1-proj-2-tuple(v_724),2-proj-2-tuple(v_724),3-proj-3-tuple(v_723),3-proj-3-tuple(v_721))) in
        {317}let v_726: bitstring = catch-fail(aeadunpack(v_725)) in
        {318}let v_727: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_723))) in
        {319}let v_728: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_724))) && success?(1-proj-3-tuple(v_723))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-2-tuple(v_727))))) then cipherstatepack(1-proj-2-tuple(v_727),increment_nonce(2-proj-2-tuple(v_724))) else fail-any) else fail-any)) in
        {320}let v_729: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_721)) && (success?(3-proj-3-tuple(v_723)) && success?(1-proj-3-tuple(v_723)))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then (if not-caught-fail(v_725) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if not-caught-fail(v_728) then (v_728,3-proj-3-tuple(v_726),1-proj-3-tuple(v_726)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {321}let v_730: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_729),2-proj-3-tuple(v_723),3-proj-3-tuple(v_723)))) in
        {322}let v_731: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_721)) && success?(symmetricstatepack(1-proj-3-tuple(v_729),2-proj-3-tuple(v_723),3-proj-3-tuple(v_723)))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then symmetricstatepack(1-proj-3-tuple(v_730),2-proj-3-tuple(v_730),hash(3-proj-3-tuple(v_730),3-proj-3-tuple(v_721))) else fail-any) else fail-any)) in
        {323}let v_732: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_721)) && success?(1-proj-7-tuple(v_720))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if not-caught-fail(v_731) then (v_731,2-proj-3-tuple(v_729),3-proj-3-tuple(v_729)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {324}let v_733: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_732),2-proj-7-tuple(v_720),3-proj-7-tuple(v_720),4-proj-7-tuple(v_720),5-proj-7-tuple(v_720),6-proj-7-tuple(v_720),7-proj-7-tuple(v_720))) in
        {325}let v_734: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_732))) in
        {326}let v_735: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_734),zero)) in
        {327}let v_736: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_734),zero)) in
        {328}let v_737: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_734),zero)) in
        {329}let v_738: bitstring = catch-fail((if success?(2-proj-3-tuple(v_734)) then (if not-caught-fail(v_735) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then (v_735,v_736,v_737) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {330}let v_739: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_738)) then cipherstatepack(1-proj-3-tuple(v_738),minnonce) else fail-any)) in
        {331}let v_740: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_738)) then cipherstatepack(2-proj-3-tuple(v_738),minnonce) else fail-any)) in
        {332}let v_741: bitstring = catch-fail((if success?(1-proj-3-tuple(v_732)) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (1-proj-3-tuple(v_732),v_739,v_740) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let (hs_742: handshakestate,re_743: key,plaintext_c: bitstring,valid_744: bool,cs1_745: cipherstate,cs2_746: cipherstate) = (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-7-tuple(v_720))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if not-caught-fail(v_722) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if (v_722 && 3-proj-3-tuple(v_732)) then (if not-caught-fail(v_733) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (v_733,getpublickey(3-proj-7-tuple(v_720)),2-proj-3-tuple(v_732),true,2-proj-3-tuple(v_741),3-proj-3-tuple(v_741)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {334}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_744);
        {335}insert statestore(bob,alice,statepack_d(hs_742));
        {336}event RecvEnd(valid_744)
    ) | (
        {338}event LeakS(phase0,bob);
        {339}out(pub, key_s(bob))
    ) | (
        {340}phase 1;
        {341}event LeakS(phase1,bob);
        {342}out(pub, key_s(bob))
    )
) | (
    {343}let s_747: keypair = keypairpack(empty,empty) in
    {344}out(pub, getpublickey(s_747));
    (
        {345}let e_748: keypair = keypairpack(empty,empty) in
        {346}let rs_749: key = empty in
        {347}let re_750: key = empty in
        {348}let v_751: bitstring = catch-fail(hash(somename,empty)) in
        {349}let v_752: key = catch-fail(v_751) in
        {350}let v_753: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {351}let v_754: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_751) then (if not-caught-fail(v_752) then (if not-caught-fail(v_753) then symmetricstatepack(v_753,v_752,v_751) else fail-any) else fail-any) else fail-any))) in
        {352}let v_755: symmetricstate = catch-fail((if success?((if not-caught-fail(v_751) then (if not-caught-fail(v_752) then (if not-caught-fail(v_753) then symmetricstatepack(v_753,v_752,v_751) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then symmetricstatepack(1-proj-3-tuple(v_754),2-proj-3-tuple(v_754),hash(3-proj-3-tuple(v_754),empty)) else fail-any) else fail-any)) in
        {353}let hs_756: handshakestate = (if not-caught-fail(v_755) then handshakestatepack(v_755,s_747,e_748,rs_749,re_750,empty,false) else fail-any) in
        {354}insert statestore(bob,charlie,statepack_a(hs_756))
    ) | (
        {376}get statestore(=bob,=charlie,statepack_a(hs_757: handshakestate)) in
        {355}in(pub, message_a_758: bitstring);
        {356}let v_759: bitstring = catch-fail(handshakestateunpack(hs_757)) in
        {357}let v_760: bitstring = catch-fail(deconcat3(message_a_758)) in
        {358}let v_761: bool = catch-fail(true) in
        {359}let v_762: key = catch-fail(1-proj-3-tuple(v_760)) in
        {360}let v_763: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_759))) in
        {361}let v_764: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_759)) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack(1-proj-3-tuple(v_763),2-proj-3-tuple(v_763),hash(3-proj-3-tuple(v_763),v_762)) else fail-any) else fail-any)) in
        {362}let v_765: bitstring = catch-fail(symmetricstateunpack(v_764)) in
        {363}let v_766: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {364}let v_767: aead = catch-fail(decrypt(1-proj-2-tuple(v_766),2-proj-2-tuple(v_766),3-proj-3-tuple(v_765),3-proj-3-tuple(v_760))) in
        {365}let v_768: bitstring = catch-fail(aeadunpack(v_767)) in
        {366}let v_769: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {367}let v_770: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_766))) && success?(1-proj-3-tuple(v_765))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then cipherstatepack(1-proj-2-tuple(v_769),increment_nonce(2-proj-2-tuple(v_766))) else fail-any) else fail-any)) in
        {368}let v_771: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_760)) && (success?(3-proj-3-tuple(v_765)) && success?(1-proj-3-tuple(v_765)))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then (if not-caught-fail(v_767) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if not-caught-fail(v_770) then (v_770,3-proj-3-tuple(v_768),1-proj-3-tuple(v_768)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_772: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) in
        {370}let v_773: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_760)) && success?(symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then symmetricstatepack(1-proj-3-tuple(v_772),2-proj-3-tuple(v_772),hash(3-proj-3-tuple(v_772),3-proj-3-tuple(v_760))) else fail-any) else fail-any)) in
        {371}let v_774: bitstring = catch-fail((if success?(3-proj-3-tuple(v_760)) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if not-caught-fail(v_773) then (v_773,2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_775: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_774),2-proj-7-tuple(v_759),3-proj-7-tuple(v_759),4-proj-7-tuple(v_759),v_762,6-proj-7-tuple(v_759),7-proj-7-tuple(v_759))) in
        {373}let (hs_776: handshakestate,re_777: key,plaintext_a_778: bitstring,valid_779: bool) = (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-7-tuple(v_759))))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (if not-caught-fail(v_764) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if (v_761 && 3-proj-3-tuple(v_774)) then (if not-caught-fail(v_775) then (v_775,getpublickey(3-proj-7-tuple(v_759)),2-proj-3-tuple(v_774),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {374}event RecvMsg(bob,charlie,stage_a,plaintext_a_778,valid_779);
        {375}insert statestore(bob,charlie,statepack_b(hs_776))
    ) | (
        {424}get statestore(=bob,=charlie,statepack_b(hs_780: handshakestate)) in
        {377}let v_781: bitstring = catch-fail(handshakestateunpack(hs_780)) in
        {378}let v_782: bitstring = catch-fail((empty,empty,empty)) in
        {379}let v_783: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {380}let v_784: keypair = catch-fail((if not-caught-fail(v_783) then keypairpack(v_783,key_e(bob,charlie)) else fail-any)) in
        {381}let v_785: bitstring = catch-fail(getpublickey(v_784)) in
        {382}let v_786: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_781))) in
        {383}let v_787: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_781)) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then symmetricstatepack(1-proj-3-tuple(v_786),2-proj-3-tuple(v_786),hash(3-proj-3-tuple(v_786),v_785)) else fail-any) else fail-any)) in
        {384}let v_788: bitstring = catch-fail(keypairunpack(v_784)) in
        {385}let v_789: bitstring = catch-fail(symmetricstateunpack(v_787)) in
        {386}let v_790: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_789),(if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_781)) else fail-any) else fail-any))) in
        {387}let v_791: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_789),(if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_781)) else fail-any) else fail-any))) in
        {388}let v_792: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_789),(if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_781)) else fail-any) else fail-any))) in
        {389}let v_793: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_781)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_789))) then (if not-caught-fail(v_790) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then (v_790,v_791,v_792) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let v_794: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then dhexp(2-proj-2-tuple(v_788),5-proj-7-tuple(v_781)) else fail-any) else fail-any)) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_793)) then cipherstatepack(2-proj-3-tuple(v_793),minnonce) else fail-any),1-proj-3-tuple(v_793),3-proj-3-tuple(v_789)) else fail-any) else fail-any) else fail-any)) in
        {391}let v_795: key = catch-fail(dhexp(key_s(bob),g)) in
        {392}let v_796: keypair = catch-fail((if not-caught-fail(v_795) then keypairpack(v_795,key_s(bob)) else fail-any)) in
        {393}let v_797: bitstring = catch-fail(symmetricstateunpack(v_794)) in
        {394}let v_798: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_797))) in
        {395}let v_799: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_798),2-proj-2-tuple(v_798),3-proj-3-tuple(v_797),getpublickey(v_796))) in
        {396}let v_800: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_797))) in
        {397}let v_801: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_798))) && success?(1-proj-3-tuple(v_797))) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-2-tuple(v_800))))) then cipherstatepack(1-proj-2-tuple(v_800),increment_nonce(2-proj-2-tuple(v_798))) else fail-any) else fail-any)) in
        {398}let v_802: bitstring = catch-fail((if (success?(getpublickey(v_796)) && (success?(3-proj-3-tuple(v_797)) && success?(1-proj-3-tuple(v_797)))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then (if not-caught-fail(v_799) then (if not-caught-fail(v_801) then (v_801,v_799) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_803: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_802),2-proj-3-tuple(v_797),3-proj-3-tuple(v_797)))) in
        {400}let v_804: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_802)) && success?(symmetricstatepack(1-proj-2-tuple(v_802),2-proj-3-tuple(v_797),3-proj-3-tuple(v_797)))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then symmetricstatepack(1-proj-3-tuple(v_803),2-proj-3-tuple(v_803),hash(3-proj-3-tuple(v_803),2-proj-2-tuple(v_802))) else fail-any) else fail-any)) in
        {401}let v_805: bitstring = catch-fail((if success?(getpublickey(v_796)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then (if not-caught-fail(v_804) then (v_804,2-proj-2-tuple(v_802)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {402}let v_806: bitstring = catch-fail(keypairunpack(v_796)) in
        {403}let v_807: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_805))) in
        {404}let v_808: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_807),(if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then dhexp(2-proj-2-tuple(v_806),5-proj-7-tuple(v_781)) else fail-any) else fail-any))) in
        {405}let v_809: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_807),(if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then dhexp(2-proj-2-tuple(v_806),5-proj-7-tuple(v_781)) else fail-any) else fail-any))) in
        {406}let v_810: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_807),(if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then dhexp(2-proj-2-tuple(v_806),5-proj-7-tuple(v_781)) else fail-any) else fail-any))) in
        {407}let v_811: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then dhexp(2-proj-2-tuple(v_806),5-proj-7-tuple(v_781)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_807))) then (if not-caught-fail(v_808) then (if not-caught-fail(v_809) then (if not-caught-fail(v_810) then (v_808,v_809,v_810) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {408}let v_812: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_781)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then dhexp(2-proj-2-tuple(v_806),5-proj-7-tuple(v_781)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_805))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_811)) then cipherstatepack(2-proj-3-tuple(v_811),minnonce) else fail-any),1-proj-3-tuple(v_811),3-proj-3-tuple(v_807)) else fail-any) else fail-any) else fail-any)) in
        {409}let v_813: bitstring = catch-fail(symmetricstateunpack(v_812)) in
        {410}let v_814: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_813))) in
        {411}let v_815: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_814),2-proj-2-tuple(v_814),3-proj-3-tuple(v_813),msg_b(bob,charlie))) in
        {412}let v_816: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_813))) in
        {413}let v_817: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_814))) && success?(1-proj-3-tuple(v_813))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then cipherstatepack(1-proj-2-tuple(v_816),increment_nonce(2-proj-2-tuple(v_814))) else fail-any) else fail-any)) in
        {414}let v_818: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_813)) && success?(1-proj-3-tuple(v_813))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then (if not-caught-fail(v_815) then (if not-caught-fail(v_817) then (v_817,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {415}let v_819: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_818),2-proj-3-tuple(v_813),3-proj-3-tuple(v_813)))) in
        {416}let v_820: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_818)) && success?(symmetricstatepack(1-proj-2-tuple(v_818),2-proj-3-tuple(v_813),3-proj-3-tuple(v_813)))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),hash(3-proj-3-tuple(v_819),2-proj-2-tuple(v_818))) else fail-any) else fail-any)) in
        {417}let v_821: bitstring = catch-fail((if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-2-tuple(v_818))))) then (if not-caught-fail(v_820) then (v_820,2-proj-2-tuple(v_818)) else fail-any) else fail-any) else fail-any)) in
        {418}let v_822: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_821),v_796,v_784,4-proj-7-tuple(v_781),5-proj-7-tuple(v_781),6-proj-7-tuple(v_781),7-proj-7-tuple(v_781))) in
        {419}let v_823: bitstring = catch-fail(concat3(v_785,2-proj-2-tuple(v_805),2-proj-2-tuple(v_821))) in
        {420}let (hs_824: handshakestate,re_825: key,message_b_826: bitstring) = (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-7-tuple(v_781))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_784) then (if not-caught-fail(v_785) then (if not-caught-fail(v_787) then (if not-caught-fail(v_794) then (if not-caught-fail(v_796) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then (if not-caught-fail(v_812) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then (if not-caught-fail(v_822) then (if not-caught-fail(v_823) then (v_822,5-proj-7-tuple(v_781),v_823) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {421}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {422}insert statestore(bob,charlie,statepack_c(hs_824));
        {423}out(pub, message_b_826)
    ) | (
        {452}get statestore(=bob,=charlie,statepack_c(hs_827: handshakestate)) in
        {425}in(pub, message_c_828: bitstring);
        {426}let v_829: bitstring = catch-fail(handshakestateunpack(hs_827)) in
        {427}let v_830: bitstring = catch-fail(deconcat3(message_c_828)) in
        {428}let v_831: bool = catch-fail(true) in
        {429}let v_832: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_829))) in
        {430}let v_833: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
        {431}let v_834: aead = catch-fail(decrypt(1-proj-2-tuple(v_833),2-proj-2-tuple(v_833),3-proj-3-tuple(v_832),3-proj-3-tuple(v_830))) in
        {432}let v_835: bitstring = catch-fail(aeadunpack(v_834)) in
        {433}let v_836: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
        {434}let v_837: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_833))) && success?(1-proj-3-tuple(v_832))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then cipherstatepack(1-proj-2-tuple(v_836),increment_nonce(2-proj-2-tuple(v_833))) else fail-any) else fail-any)) in
        {435}let v_838: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_830)) && (success?(3-proj-3-tuple(v_832)) && success?(1-proj-3-tuple(v_832)))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then (if not-caught-fail(v_834) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_837) then (v_837,3-proj-3-tuple(v_835),1-proj-3-tuple(v_835)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_839: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) in
        {437}let v_840: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_830)) && success?(symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then symmetricstatepack(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),hash(3-proj-3-tuple(v_839),3-proj-3-tuple(v_830))) else fail-any) else fail-any)) in
        {438}let v_841: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_830)) && success?(1-proj-7-tuple(v_829))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (if not-caught-fail(v_840) then (v_840,2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_842: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_841),2-proj-7-tuple(v_829),3-proj-7-tuple(v_829),4-proj-7-tuple(v_829),5-proj-7-tuple(v_829),6-proj-7-tuple(v_829),7-proj-7-tuple(v_829))) in
        {440}let v_843: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_841))) in
        {441}let v_844: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_843),zero)) in
        {442}let v_845: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_843),zero)) in
        {443}let v_846: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_843),zero)) in
        {444}let v_847: bitstring = catch-fail((if success?(2-proj-3-tuple(v_843)) then (if not-caught-fail(v_844) then (if not-caught-fail(v_845) then (if not-caught-fail(v_846) then (v_844,v_845,v_846) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_848: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_847)) then cipherstatepack(1-proj-3-tuple(v_847),minnonce) else fail-any)) in
        {446}let v_849: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_847)) then cipherstatepack(2-proj-3-tuple(v_847),minnonce) else fail-any)) in
        {447}let v_850: bitstring = catch-fail((if success?(1-proj-3-tuple(v_841)) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then (if not-caught-fail(v_848) then (if not-caught-fail(v_849) then (1-proj-3-tuple(v_841),v_848,v_849) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {448}let (hs_851: handshakestate,re_852: key,plaintext_c_853: bitstring,valid_854: bool,cs1_855: cipherstate,cs2_856: cipherstate) = (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-7-tuple(v_829))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if not-caught-fail(v_831) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (v_831 && 3-proj-3-tuple(v_841)) then (if not-caught-fail(v_842) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (v_842,getpublickey(3-proj-7-tuple(v_829)),2-proj-3-tuple(v_841),true,2-proj-3-tuple(v_850),3-proj-3-tuple(v_850)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {449}event RecvMsg(bob,charlie,stage_c,plaintext_c_853,valid_854);
        {450}insert statestore(bob,charlie,statepack_d(hs_851));
        {451}event RecvEnd(valid_854)
    ) | (
        {453}event LeakS(phase0,bob);
        {454}out(pub, key_s(bob))
    ) | (
        {455}phase 1;
        {456}event LeakS(phase1,bob);
        {457}out(pub, key_s(bob))
    )
) | (
    {458}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 186 rules in the queue.
400 rules inserted. The rule base contains 398 rules. 21 rules in the queue.
600 rules inserted. The rule base contains 580 rules. 229 rules in the queue.
800 rules inserted. The rule base contains 745 rules. 92 rules in the queue.
1000 rules inserted. The rule base contains 941 rules. 197 rules in the queue.
1200 rules inserted. The rule base contains 1109 rules. 209 rules in the queue.
1400 rules inserted. The rule base contains 1213 rules. 120 rules in the queue.
1600 rules inserted. The rule base contains 1372 rules. 168 rules in the queue.
1800 rules inserted. The rule base contains 1508 rules. 201 rules in the queue.
2000 rules inserted. The rule base contains 1669 rules. 248 rules in the queue.
2200 rules inserted. The rule base contains 1791 rules. 268 rules in the queue.
2400 rules inserted. The rule base contains 1882 rules. 252 rules in the queue.
2600 rules inserted. The rule base contains 2016 rules. 240 rules in the queue.
2800 rules inserted. The rule base contains 2164 rules. 259 rules in the queue.
3000 rules inserted. The rule base contains 2323 rules. 306 rules in the queue.
3200 rules inserted. The rule base contains 2491 rules. 314 rules in the queue.
3400 rules inserted. The rule base contains 2625 rules. 307 rules in the queue.
3600 rules inserted. The rule base contains 2738 rules. 293 rules in the queue.
3800 rules inserted. The rule base contains 2829 rules. 252 rules in the queue.
4000 rules inserted. The rule base contains 2861 rules. 187 rules in the queue.
4200 rules inserted. The rule base contains 2959 rules. 151 rules in the queue.
4400 rules inserted. The rule base contains 3055 rules. 141 rules in the queue.
4600 rules inserted. The rule base contains 3174 rules. 86 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {239}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {125}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {148}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {145}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {147}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {261}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {240}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {259}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_937,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {239}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {125}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {148}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {145}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {147}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {261}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {240}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {259}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {239}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {125}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {148}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {145}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {147}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {261}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {240}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {259}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {33}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {354}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {376}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {355}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {375}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {424}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {421}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {423}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {36}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {81}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_937,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {33}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {354}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {376}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {355}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {375}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {424}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {421}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {423}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {36}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {81}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {33}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {354}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {12}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {35}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {32}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {34}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {376}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {355}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {375}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {424}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {421}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {423}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {83}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {36}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {81}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_937,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
