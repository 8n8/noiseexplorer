File "KNpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "KNpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 278, character 6:
Warning: identifier e rebound.
File "KNpsk0.noise.passive.pv", line 279, characters 6-7:
Warning: identifier ne rebound.
File "KNpsk0.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 282, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 282, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KNpsk0.noise.passive.pv", line 283, characters 6-7:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "KNpsk0.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "KNpsk0.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KNpsk0.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KNpsk0.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KNpsk0.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 323, characters 6-7:
Warning: identifier re rebound.
File "KNpsk0.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 326, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 328, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 336, characters 6-7:
Warning: identifier re rebound.
File "KNpsk0.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 522, characters 8-9:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 364, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 513, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 514, characters 8-9:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KNpsk0.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 336, characters 6-7:
Warning: identifier re rebound.
File "KNpsk0.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 343, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 500, characters 8-9:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 278, character 6:
Warning: identifier e rebound.
File "KNpsk0.noise.passive.pv", line 279, characters 6-7:
Warning: identifier ne rebound.
File "KNpsk0.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 282, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 282, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KNpsk0.noise.passive.pv", line 283, characters 6-7:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "KNpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 574, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 575, characters 8-9:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KNpsk0.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 566, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 568, characters 8-9:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "KNpsk0.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "KNpsk0.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KNpsk0.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 323, characters 6-7:
Warning: identifier re rebound.
File "KNpsk0.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 326, characters 7-8:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 328, characters 7-8:
Warning: identifier hs rebound.
File "KNpsk0.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "KNpsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "KNpsk0.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "KNpsk0.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "KNpsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Completing equations...
Completed equations:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_531: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_532: keypair = (if not-caught-fail(v_531) then keypairpack(validkey(v_531),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_532));
    (
        {7}let e_533: keypair = keypairpack(empty,empty) in
        {8}let rs_534: key = empty in
        {9}let re_535: key = empty in
        {10}let v_536: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_537: key = catch-fail(v_536) in
        {12}let v_538: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_539: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (if not-caught-fail(v_538) then symmetricstatepack(v_538,v_537,v_536) else fail-any) else fail-any) else fail-any))) in
        {14}let v_540: symmetricstate = catch-fail((if success?((if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (if not-caught-fail(v_538) then symmetricstatepack(v_538,v_537,v_536) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),empty)) else fail-any) else fail-any)) in
        {15}let v_541: bitstring = catch-fail(symmetricstateunpack(v_540)) in
        {16}let v_542: symmetricstate = catch-fail((if success?(getpublickey(s_532)) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack(1-proj-3-tuple(v_541),2-proj-3-tuple(v_541),hash(3-proj-3-tuple(v_541),getpublickey(s_532))) else fail-any) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_540) then (if not-caught-fail(v_542) then handshakestatepack(v_542,s_532,e_533,rs_534,re_535,key_psk(alice,bob),true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {55}get statestore(=alice,=bob,=sid,statepack_a(hs_543: handshakestate)) in
        {19}let v_544: bitstring = catch-fail(handshakestateunpack(hs_543)) in
        {20}let v_545: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_546: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_544))) in
        {22}let v_547: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_546),6-proj-7-tuple(v_544))) in
        {23}let v_548: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_546),6-proj-7-tuple(v_544))) in
        {24}let v_549: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_546),6-proj-7-tuple(v_544))) in
        {25}let v_550: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_544)) && success?(2-proj-3-tuple(v_546))) then (if not-caught-fail(v_547) then (if not-caught-fail(v_548) then (if not-caught-fail(v_549) then (v_547,v_548,v_549) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {26}let v_551: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_546),1-proj-3-tuple(v_550),3-proj-3-tuple(v_546)))) in
        {27}let v_552: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_550)) && success?(symmetricstatepack(1-proj-3-tuple(v_546),1-proj-3-tuple(v_550),3-proj-3-tuple(v_546)))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then symmetricstatepack(1-proj-3-tuple(v_551),2-proj-3-tuple(v_551),hash(3-proj-3-tuple(v_551),2-proj-3-tuple(v_550))) else fail-any) else fail-any))) in
        {28}let v_553: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_544)) && success?(1-proj-7-tuple(v_544))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_550)) then cipherstatepack(3-proj-3-tuple(v_550),minnonce) else fail-any),1-proj-3-tuple(v_550),3-proj-3-tuple(v_552)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_554: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {30}let v_555: keypair = catch-fail((if not-caught-fail(v_554) then keypairpack(validkey(v_554),key_e(alice,bob,sid)) else fail-any)) in
        {31}let v_556: bitstring = catch-fail(getpublickey(v_555)) in
        {32}let v_557: bitstring = catch-fail(symmetricstateunpack(v_553)) in
        {33}let v_558: symmetricstate = catch-fail((if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack(1-proj-3-tuple(v_557),2-proj-3-tuple(v_557),hash(3-proj-3-tuple(v_557),v_556)) else fail-any)) in
        {34}let v_559: bitstring = catch-fail(symmetricstateunpack(v_558)) in
        {35}let v_560: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_559),getpublickey(v_555))) in
        {36}let v_561: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_559),getpublickey(v_555))) in
        {37}let v_562: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_559),getpublickey(v_555))) in
        {38}let v_563: bitstring = catch-fail((if (success?(getpublickey(v_555)) && success?(2-proj-3-tuple(v_559))) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (v_560,v_561,v_562) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {39}let v_564: symmetricstate = catch-fail((if success?(getpublickey(v_555)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_563)) then cipherstatepack(2-proj-3-tuple(v_563),minnonce) else fail-any),1-proj-3-tuple(v_563),3-proj-3-tuple(v_559)) else fail-any) else fail-any) else fail-any)) in
        {40}let v_565: bitstring = catch-fail(symmetricstateunpack(v_564)) in
        {41}let v_566: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_565))) in
        {42}let v_567: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_566),2-proj-2-tuple(v_566),3-proj-3-tuple(v_565),msg_a(alice,bob,sid))) in
        {43}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_565))) in
        {44}let v_569: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_566))) && success?(1-proj-3-tuple(v_565))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then cipherstatepack(1-proj-2-tuple(v_568),increment_nonce(2-proj-2-tuple(v_566))) else fail-any) else fail-any)) in
        {45}let v_570: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_565)) && success?(1-proj-3-tuple(v_565))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then (if not-caught-fail(v_567) then (if not-caught-fail(v_569) then (v_569,v_567) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {46}let v_571: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_570),2-proj-3-tuple(v_565),3-proj-3-tuple(v_565)))) in
        {47}let v_572: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_570)) && success?(symmetricstatepack(1-proj-2-tuple(v_570),2-proj-3-tuple(v_565),3-proj-3-tuple(v_565)))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack(1-proj-3-tuple(v_571),2-proj-3-tuple(v_571),hash(3-proj-3-tuple(v_571),2-proj-2-tuple(v_570))) else fail-any) else fail-any)) in
        {48}let v_573: bitstring = catch-fail((if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then (if not-caught-fail(v_572) then (v_572,2-proj-2-tuple(v_570)) else fail-any) else fail-any) else fail-any)) in
        {49}let v_574: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_573),2-proj-7-tuple(v_544),v_555,4-proj-7-tuple(v_544),5-proj-7-tuple(v_544),6-proj-7-tuple(v_544),7-proj-7-tuple(v_544))) in
        {50}let v_575: bitstring = catch-fail(concat3(v_556,2-proj-3-tuple(v_545),2-proj-2-tuple(v_573))) in
        {51}let (hs_576: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-7-tuple(v_544))))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if not-caught-fail(v_553) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (if not-caught-fail(v_558) then (if not-caught-fail(v_564) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-2-tuple(v_573))))) then (if not-caught-fail(v_574) then (if not-caught-fail(v_575) then (v_574,v_575) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {52}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {53}insert statestore(alice,bob,sid,statepack_b(hs_576));
        {54}out(pub, message_a)
    ) | (
        {105}get statestore(=alice,=bob,=sid,statepack_b(hs_577: handshakestate)) in
        {56}in(pub, message_b: bitstring);
        {57}let v_578: bitstring = catch-fail(handshakestateunpack(hs_577)) in
        {58}let v_579: bitstring = catch-fail(deconcat3(message_b)) in
        {59}let v_580: bool = catch-fail(true) in
        {60}let v_581: key = catch-fail(1-proj-3-tuple(v_579)) in
        {61}let v_582: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_578))) in
        {62}let v_583: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_578)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),v_581)) else fail-any) else fail-any)) in
        {63}let v_584: bitstring = catch-fail(symmetricstateunpack(v_583)) in
        {64}let v_585: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_584),v_581)) in
        {65}let v_586: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_584),v_581)) in
        {66}let v_587: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_584),v_581)) in
        {67}let v_588: bitstring = catch-fail((if success?(2-proj-3-tuple(v_584)) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (v_585,v_586,v_587) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_589: symmetricstate = catch-fail((if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_588)) then cipherstatepack(2-proj-3-tuple(v_588),minnonce) else fail-any),1-proj-3-tuple(v_588),3-proj-3-tuple(v_584)) else fail-any) else fail-any)) in
        {69}let v_590: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_578))) in
        {70}let v_591: bitstring = catch-fail(symmetricstateunpack(v_589)) in
        {71}let v_592: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_591),(if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_581) else fail-any) else fail-any))) in
        {72}let v_593: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_591),(if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_581) else fail-any) else fail-any))) in
        {73}let v_594: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_591),(if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_581) else fail-any) else fail-any))) in
        {74}let v_595: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_581) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_591))) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then (if not-caught-fail(v_594) then (v_592,v_593,v_594) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {75}let v_596: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_578)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),v_581) else fail-any) else fail-any)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_595)) then cipherstatepack(2-proj-3-tuple(v_595),minnonce) else fail-any),1-proj-3-tuple(v_595),3-proj-3-tuple(v_591)) else fail-any) else fail-any) else fail-any)) in
        {76}let v_597: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_578))) in
        {77}let v_598: bitstring = catch-fail(symmetricstateunpack(v_596)) in
        {78}let v_599: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_598),(if success?(2-proj-7-tuple(v_578)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_581) else fail-any) else fail-any))) in
        {79}let v_600: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_598),(if success?(2-proj-7-tuple(v_578)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_581) else fail-any) else fail-any))) in
        {80}let v_601: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_598),(if success?(2-proj-7-tuple(v_578)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_581) else fail-any) else fail-any))) in
        {81}let v_602: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_578)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_581) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_598))) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (v_599,v_600,v_601) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {82}let v_603: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_578)) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then dhexp(2-proj-2-tuple(v_597),v_581) else fail-any) else fail-any)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_602)) then cipherstatepack(2-proj-3-tuple(v_602),minnonce) else fail-any),1-proj-3-tuple(v_602),3-proj-3-tuple(v_598)) else fail-any) else fail-any) else fail-any)) in
        {83}let v_604: bitstring = catch-fail(symmetricstateunpack(v_603)) in
        {84}let v_605: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {85}let v_606: aead = catch-fail(decrypt(1-proj-2-tuple(v_605),2-proj-2-tuple(v_605),3-proj-3-tuple(v_604),3-proj-3-tuple(v_579))) in
        {86}let v_607: bitstring = catch-fail(aeadunpack(v_606)) in
        {87}let v_608: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_604))) in
        {88}let v_609: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_605))) && success?(1-proj-3-tuple(v_604))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then cipherstatepack(1-proj-2-tuple(v_608),increment_nonce(2-proj-2-tuple(v_605))) else fail-any) else fail-any)) in
        {89}let v_610: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_579)) && (success?(3-proj-3-tuple(v_604)) && success?(1-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then (if not-caught-fail(v_606) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if not-caught-fail(v_609) then (v_609,3-proj-3-tuple(v_607),1-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let v_611: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) in
        {91}let v_612: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_579)) && success?(symmetricstatepack(1-proj-3-tuple(v_610),2-proj-3-tuple(v_604),3-proj-3-tuple(v_604)))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),3-proj-3-tuple(v_579))) else fail-any) else fail-any)) in
        {92}let v_613: bitstring = catch-fail((if success?(3-proj-3-tuple(v_579)) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if not-caught-fail(v_612) then (v_612,2-proj-3-tuple(v_610),3-proj-3-tuple(v_610)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {93}let v_614: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_613),2-proj-7-tuple(v_578),3-proj-7-tuple(v_578),4-proj-7-tuple(v_578),v_581,6-proj-7-tuple(v_578),7-proj-7-tuple(v_578))) in
        {94}let v_615: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_613))) in
        {95}let v_616: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_615),zero)) in
        {96}let v_617: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_615),zero)) in
        {97}let v_618: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_615),zero)) in
        {98}let v_619: bitstring = catch-fail((if success?(2-proj-3-tuple(v_615)) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then (v_616,v_617,v_618) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_620: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_619)) then cipherstatepack(1-proj-3-tuple(v_619),minnonce) else fail-any)) in
        {100}let v_621: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_619)) then cipherstatepack(2-proj-3-tuple(v_619),minnonce) else fail-any)) in
        {101}let v_622: bitstring = catch-fail((if success?(1-proj-3-tuple(v_613)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then (if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (1-proj-3-tuple(v_613),v_620,v_621) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let (hs_623: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-7-tuple(v_578))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then (if not-caught-fail(v_583) then (if not-caught-fail(v_589) then (if not-caught-fail(v_596) then (if not-caught-fail(v_603) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if (v_580 && 3-proj-3-tuple(v_613)) then (if not-caught-fail(v_614) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (v_614,2-proj-3-tuple(v_613),true,2-proj-3-tuple(v_622),3-proj-3-tuple(v_622)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {103}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {104}insert statestore(alice,bob,sid,statepack_c(hs_623,cs1,cs2))
    ) | (
        {106}!
        {125}get statestore(=alice,=bob,=sid,statepack_c(hs_624: handshakestate,cs1_625: cipherstate,cs2_626: cipherstate)) in
        {107}let hs_627: handshakestate = handshakestatesetcs(hs_624,cs1_625) in
        {108}let v_628: bitstring = catch-fail(handshakestateunpack(hs_627)) in
        {109}let v_629: bitstring = catch-fail((empty,empty,empty)) in
        {110}let v_630: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_628))) in
        {111}let v_631: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_630))) in
        {112}let v_632: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_631),2-proj-2-tuple(v_631),3-proj-3-tuple(v_630),msg_c(alice,bob,sid))) in
        {113}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_630))) in
        {114}let v_634: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_631))) && success?(1-proj-3-tuple(v_630))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then cipherstatepack(1-proj-2-tuple(v_633),increment_nonce(2-proj-2-tuple(v_631))) else fail-any) else fail-any)) in
        {115}let v_635: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_630)) && success?(1-proj-3-tuple(v_630))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then (if not-caught-fail(v_632) then (if not-caught-fail(v_634) then (v_634,v_632) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_636: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_635),2-proj-3-tuple(v_630),3-proj-3-tuple(v_630)))) in
        {117}let v_637: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_635)) && success?(symmetricstatepack(1-proj-2-tuple(v_635),2-proj-3-tuple(v_630),3-proj-3-tuple(v_630)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then symmetricstatepack(1-proj-3-tuple(v_636),2-proj-3-tuple(v_636),hash(3-proj-3-tuple(v_636),2-proj-2-tuple(v_635))) else fail-any) else fail-any)) in
        {118}let v_638: bitstring = catch-fail((if success?(1-proj-7-tuple(v_628)) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,2-proj-2-tuple(v_635)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let v_639: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_638),2-proj-7-tuple(v_628),3-proj-7-tuple(v_628),4-proj-7-tuple(v_628),5-proj-7-tuple(v_628),6-proj-7-tuple(v_628),7-proj-7-tuple(v_628))) in
        {120}let v_640: bitstring = catch-fail(concat3(1-proj-3-tuple(v_629),2-proj-3-tuple(v_629),2-proj-2-tuple(v_638))) in
        {121}let (hs_641: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-7-tuple(v_628))))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then (v_639,v_640) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {122}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {123}insert statestore(alice,bob,sid,statepack_d(hs_641,handshakestategetcs(hs_641),cs2_626));
        {124}out(pub, message_c)
    ) | (
        {126}!
        {146}get statestore(=alice,=bob,=sid,statepack_d(hs_642: handshakestate,cs1_643: cipherstate,cs2_644: cipherstate)) in
        {127}let hs_645: handshakestate = handshakestatesetcs(hs_642,cs2_644) in
        {128}in(pub, message_d: bitstring);
        {129}let v_646: bitstring = catch-fail(handshakestateunpack(hs_645)) in
        {130}let v_647: bitstring = catch-fail(deconcat3(message_d)) in
        {131}let v_648: bool = catch-fail(true) in
        {132}let v_649: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_646))) in
        {133}let v_650: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {134}let v_651: aead = catch-fail(decrypt(1-proj-2-tuple(v_650),2-proj-2-tuple(v_650),3-proj-3-tuple(v_649),3-proj-3-tuple(v_647))) in
        {135}let v_652: bitstring = catch-fail(aeadunpack(v_651)) in
        {136}let v_653: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {137}let v_654: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_650))) && success?(1-proj-3-tuple(v_649))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then cipherstatepack(1-proj-2-tuple(v_653),increment_nonce(2-proj-2-tuple(v_650))) else fail-any) else fail-any)) in
        {138}let v_655: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_647)) && (success?(3-proj-3-tuple(v_649)) && success?(1-proj-3-tuple(v_649)))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_651) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if not-caught-fail(v_654) then (v_654,3-proj-3-tuple(v_652),1-proj-3-tuple(v_652)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_656: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) in
        {140}let v_657: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_647)) && success?(symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_656),hash(3-proj-3-tuple(v_656),3-proj-3-tuple(v_647))) else fail-any) else fail-any)) in
        {141}let v_658: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_647)) && success?(1-proj-7-tuple(v_646))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if not-caught-fail(v_657) then (v_657,2-proj-3-tuple(v_655),3-proj-3-tuple(v_655)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {142}let v_659: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_658),2-proj-7-tuple(v_646),3-proj-7-tuple(v_646),4-proj-7-tuple(v_646),5-proj-7-tuple(v_646),6-proj-7-tuple(v_646),7-proj-7-tuple(v_646))) in
        {143}let (hs_660: handshakestate,plaintext_d: bitstring,valid_661: bool) = (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-7-tuple(v_646))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if not-caught-fail(v_648) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if (v_648 && 3-proj-3-tuple(v_658)) then (if not-caught-fail(v_659) then (v_659,2-proj-3-tuple(v_658),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {144}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {145}event RecvEnd(valid_661)
    ) | (
        {147}event LeakPsk(phase0,alice,bob);
        {148}out(pub, key_psk(alice,bob))
    ) | (
        {149}phase 1;
        {150}event LeakPsk(phase1,alice,bob);
        {151}out(pub, key_psk(alice,bob))
    ) | (
        {152}event LeakS(phase0,alice);
        {153}out(pub, key_s(alice))
    ) | (
        {154}phase 1;
        {155}event LeakS(phase1,alice);
        {156}out(pub, key_s(alice))
    )
) | (
    {157}let v_662: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {158}let s_663: keypair = (if not-caught-fail(v_662) then keypairpack(validkey(v_662),key_s(alice)) else fail-any) in
    {159}out(pub, getpublickey(s_663));
    (
        {160}let e_664: keypair = keypairpack(empty,empty) in
        {161}let rs_665: key = empty in
        {162}let re_666: key = empty in
        {163}let v_667: bitstring = catch-fail(hash(somename,empty)) in
        {164}let v_668: key = catch-fail(v_667) in
        {165}let v_669: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {166}let v_670: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then symmetricstatepack(v_669,v_668,v_667) else fail-any) else fail-any) else fail-any))) in
        {167}let v_671: symmetricstate = catch-fail((if success?((if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then symmetricstatepack(v_669,v_668,v_667) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then symmetricstatepack(1-proj-3-tuple(v_670),2-proj-3-tuple(v_670),hash(3-proj-3-tuple(v_670),empty)) else fail-any) else fail-any)) in
        {168}let v_672: bitstring = catch-fail(symmetricstateunpack(v_671)) in
        {169}let v_673: symmetricstate = catch-fail((if success?(getpublickey(s_663)) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then symmetricstatepack(1-proj-3-tuple(v_672),2-proj-3-tuple(v_672),hash(3-proj-3-tuple(v_672),getpublickey(s_663))) else fail-any) else fail-any)) in
        {170}let hs_674: handshakestate = (if not-caught-fail(v_671) then (if not-caught-fail(v_673) then handshakestatepack(v_673,s_663,e_664,rs_665,re_666,key_psk(alice,charlie),true) else fail-any) else fail-any) in
        {171}insert statestore(alice,charlie,sid,statepack_a(hs_674))
    ) | (
        {208}get statestore(=alice,=charlie,=sid,statepack_a(hs_675: handshakestate)) in
        {172}let v_676: bitstring = catch-fail(handshakestateunpack(hs_675)) in
        {173}let v_677: bitstring = catch-fail((empty,empty,empty)) in
        {174}let v_678: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_676))) in
        {175}let v_679: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_678),6-proj-7-tuple(v_676))) in
        {176}let v_680: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_678),6-proj-7-tuple(v_676))) in
        {177}let v_681: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_678),6-proj-7-tuple(v_676))) in
        {178}let v_682: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_676)) && success?(2-proj-3-tuple(v_678))) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (if not-caught-fail(v_681) then (v_679,v_680,v_681) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {179}let v_683: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_678),1-proj-3-tuple(v_682),3-proj-3-tuple(v_678)))) in
        {180}let v_684: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_682)) && success?(symmetricstatepack(1-proj-3-tuple(v_678),1-proj-3-tuple(v_682),3-proj-3-tuple(v_678)))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_683),hash(3-proj-3-tuple(v_683),2-proj-3-tuple(v_682))) else fail-any) else fail-any))) in
        {181}let v_685: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_676)) && success?(1-proj-7-tuple(v_676))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_682)) then cipherstatepack(3-proj-3-tuple(v_682),minnonce) else fail-any),1-proj-3-tuple(v_682),3-proj-3-tuple(v_684)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {182}let v_686: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {183}let v_687: keypair = catch-fail((if not-caught-fail(v_686) then keypairpack(validkey(v_686),key_e(alice,charlie,sid)) else fail-any)) in
        {184}let v_688: bitstring = catch-fail(getpublickey(v_687)) in
        {185}let v_689: bitstring = catch-fail(symmetricstateunpack(v_685)) in
        {186}let v_690: symmetricstate = catch-fail((if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then symmetricstatepack(1-proj-3-tuple(v_689),2-proj-3-tuple(v_689),hash(3-proj-3-tuple(v_689),v_688)) else fail-any)) in
        {187}let v_691: bitstring = catch-fail(symmetricstateunpack(v_690)) in
        {188}let v_692: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_691),getpublickey(v_687))) in
        {189}let v_693: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_691),getpublickey(v_687))) in
        {190}let v_694: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_691),getpublickey(v_687))) in
        {191}let v_695: bitstring = catch-fail((if (success?(getpublickey(v_687)) && success?(2-proj-3-tuple(v_691))) then (if not-caught-fail(v_692) then (if not-caught-fail(v_693) then (if not-caught-fail(v_694) then (v_692,v_693,v_694) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {192}let v_696: symmetricstate = catch-fail((if success?(getpublickey(v_687)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_695)) then cipherstatepack(2-proj-3-tuple(v_695),minnonce) else fail-any),1-proj-3-tuple(v_695),3-proj-3-tuple(v_691)) else fail-any) else fail-any) else fail-any)) in
        {193}let v_697: bitstring = catch-fail(symmetricstateunpack(v_696)) in
        {194}let v_698: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_697))) in
        {195}let v_699: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_698),2-proj-2-tuple(v_698),3-proj-3-tuple(v_697),msg_a(alice,charlie,sid))) in
        {196}let v_700: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_697))) in
        {197}let v_701: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_698))) && success?(1-proj-3-tuple(v_697))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then cipherstatepack(1-proj-2-tuple(v_700),increment_nonce(2-proj-2-tuple(v_698))) else fail-any) else fail-any)) in
        {198}let v_702: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_697)) && success?(1-proj-3-tuple(v_697))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then (if not-caught-fail(v_699) then (if not-caught-fail(v_701) then (v_701,v_699) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_703: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_702),2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)))) in
        {200}let v_704: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_702)) && success?(symmetricstatepack(1-proj-2-tuple(v_702),2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then symmetricstatepack(1-proj-3-tuple(v_703),2-proj-3-tuple(v_703),hash(3-proj-3-tuple(v_703),2-proj-2-tuple(v_702))) else fail-any) else fail-any)) in
        {201}let v_705: bitstring = catch-fail((if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-2-tuple(v_702))))) then (if not-caught-fail(v_704) then (v_704,2-proj-2-tuple(v_702)) else fail-any) else fail-any) else fail-any)) in
        {202}let v_706: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_705),2-proj-7-tuple(v_676),v_687,4-proj-7-tuple(v_676),5-proj-7-tuple(v_676),6-proj-7-tuple(v_676),7-proj-7-tuple(v_676))) in
        {203}let v_707: bitstring = catch-fail(concat3(v_688,2-proj-3-tuple(v_677),2-proj-2-tuple(v_705))) in
        {204}let (hs_708: handshakestate,message_a_709: bitstring) = (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-7-tuple(v_676))))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if not-caught-fail(v_685) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then (if not-caught-fail(v_690) then (if not-caught-fail(v_696) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (v_706,v_707) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {205}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {206}insert statestore(alice,charlie,sid,statepack_b(hs_708));
        {207}out(pub, message_a_709)
    ) | (
        {258}get statestore(=alice,=charlie,=sid,statepack_b(hs_710: handshakestate)) in
        {209}in(pub, message_b_711: bitstring);
        {210}let v_712: bitstring = catch-fail(handshakestateunpack(hs_710)) in
        {211}let v_713: bitstring = catch-fail(deconcat3(message_b_711)) in
        {212}let v_714: bool = catch-fail(true) in
        {213}let v_715: key = catch-fail(1-proj-3-tuple(v_713)) in
        {214}let v_716: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_712))) in
        {215}let v_717: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_712)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then symmetricstatepack(1-proj-3-tuple(v_716),2-proj-3-tuple(v_716),hash(3-proj-3-tuple(v_716),v_715)) else fail-any) else fail-any)) in
        {216}let v_718: bitstring = catch-fail(symmetricstateunpack(v_717)) in
        {217}let v_719: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_718),v_715)) in
        {218}let v_720: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_718),v_715)) in
        {219}let v_721: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_718),v_715)) in
        {220}let v_722: bitstring = catch-fail((if success?(2-proj-3-tuple(v_718)) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (if not-caught-fail(v_721) then (v_719,v_720,v_721) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {221}let v_723: symmetricstate = catch-fail((if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_722)) then cipherstatepack(2-proj-3-tuple(v_722),minnonce) else fail-any),1-proj-3-tuple(v_722),3-proj-3-tuple(v_718)) else fail-any) else fail-any)) in
        {222}let v_724: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_712))) in
        {223}let v_725: bitstring = catch-fail(symmetricstateunpack(v_723)) in
        {224}let v_726: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_725),(if success?(3-proj-7-tuple(v_712)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_715) else fail-any) else fail-any))) in
        {225}let v_727: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_725),(if success?(3-proj-7-tuple(v_712)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_715) else fail-any) else fail-any))) in
        {226}let v_728: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_725),(if success?(3-proj-7-tuple(v_712)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_715) else fail-any) else fail-any))) in
        {227}let v_729: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_712)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_715) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_725))) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (if not-caught-fail(v_728) then (v_726,v_727,v_728) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_730: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_712)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),v_715) else fail-any) else fail-any)) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_729)) then cipherstatepack(2-proj-3-tuple(v_729),minnonce) else fail-any),1-proj-3-tuple(v_729),3-proj-3-tuple(v_725)) else fail-any) else fail-any) else fail-any)) in
        {229}let v_731: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_712))) in
        {230}let v_732: bitstring = catch-fail(symmetricstateunpack(v_730)) in
        {231}let v_733: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_732),(if success?(2-proj-7-tuple(v_712)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_715) else fail-any) else fail-any))) in
        {232}let v_734: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_732),(if success?(2-proj-7-tuple(v_712)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_715) else fail-any) else fail-any))) in
        {233}let v_735: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_732),(if success?(2-proj-7-tuple(v_712)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_715) else fail-any) else fail-any))) in
        {234}let v_736: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_712)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_715) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_732))) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (v_733,v_734,v_735) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {235}let v_737: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_712)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),v_715) else fail-any) else fail-any)) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_736)) then cipherstatepack(2-proj-3-tuple(v_736),minnonce) else fail-any),1-proj-3-tuple(v_736),3-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any)) in
        {236}let v_738: bitstring = catch-fail(symmetricstateunpack(v_737)) in
        {237}let v_739: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_738))) in
        {238}let v_740: aead = catch-fail(decrypt(1-proj-2-tuple(v_739),2-proj-2-tuple(v_739),3-proj-3-tuple(v_738),3-proj-3-tuple(v_713))) in
        {239}let v_741: bitstring = catch-fail(aeadunpack(v_740)) in
        {240}let v_742: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_738))) in
        {241}let v_743: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_739))) && success?(1-proj-3-tuple(v_738))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then cipherstatepack(1-proj-2-tuple(v_742),increment_nonce(2-proj-2-tuple(v_739))) else fail-any) else fail-any)) in
        {242}let v_744: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_713)) && (success?(3-proj-3-tuple(v_738)) && success?(1-proj-3-tuple(v_738)))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then (if not-caught-fail(v_740) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_743) then (v_743,3-proj-3-tuple(v_741),1-proj-3-tuple(v_741)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_745: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_744),2-proj-3-tuple(v_738),3-proj-3-tuple(v_738)))) in
        {244}let v_746: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_713)) && success?(symmetricstatepack(1-proj-3-tuple(v_744),2-proj-3-tuple(v_738),3-proj-3-tuple(v_738)))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then symmetricstatepack(1-proj-3-tuple(v_745),2-proj-3-tuple(v_745),hash(3-proj-3-tuple(v_745),3-proj-3-tuple(v_713))) else fail-any) else fail-any)) in
        {245}let v_747: bitstring = catch-fail((if success?(3-proj-3-tuple(v_713)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if not-caught-fail(v_746) then (v_746,2-proj-3-tuple(v_744),3-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_748: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_747),2-proj-7-tuple(v_712),3-proj-7-tuple(v_712),4-proj-7-tuple(v_712),v_715,6-proj-7-tuple(v_712),7-proj-7-tuple(v_712))) in
        {247}let v_749: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_747))) in
        {248}let v_750: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_749),zero)) in
        {249}let v_751: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_749),zero)) in
        {250}let v_752: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_749),zero)) in
        {251}let v_753: bitstring = catch-fail((if success?(2-proj-3-tuple(v_749)) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then (v_750,v_751,v_752) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {252}let v_754: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_753)) then cipherstatepack(1-proj-3-tuple(v_753),minnonce) else fail-any)) in
        {253}let v_755: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_753)) then cipherstatepack(2-proj-3-tuple(v_753),minnonce) else fail-any)) in
        {254}let v_756: bitstring = catch-fail((if success?(1-proj-3-tuple(v_747)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_755) then (1-proj-3-tuple(v_747),v_754,v_755) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let (hs_757: handshakestate,plaintext_b_758: bitstring,valid_759: bool,cs1_760: cipherstate,cs2_761: cipherstate) = (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-7-tuple(v_712))))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then (if not-caught-fail(v_714) then (if not-caught-fail(v_715) then (if not-caught-fail(v_717) then (if not-caught-fail(v_723) then (if not-caught-fail(v_730) then (if not-caught-fail(v_737) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if (v_714 && 3-proj-3-tuple(v_747)) then (if not-caught-fail(v_748) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (v_748,2-proj-3-tuple(v_747),true,2-proj-3-tuple(v_756),3-proj-3-tuple(v_756)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {256}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_758);
        {257}insert statestore(alice,charlie,sid,statepack_c(hs_757,cs1_760,cs2_761))
    ) | (
        {259}!
        {278}get statestore(=alice,=charlie,=sid,statepack_c(hs_762: handshakestate,cs1_763: cipherstate,cs2_764: cipherstate)) in
        {260}let hs_765: handshakestate = handshakestatesetcs(hs_762,cs1_763) in
        {261}let v_766: bitstring = catch-fail(handshakestateunpack(hs_765)) in
        {262}let v_767: bitstring = catch-fail((empty,empty,empty)) in
        {263}let v_768: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_766))) in
        {264}let v_769: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_768))) in
        {265}let v_770: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_769),2-proj-2-tuple(v_769),3-proj-3-tuple(v_768),msg_c(alice,charlie,sid))) in
        {266}let v_771: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_768))) in
        {267}let v_772: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_769))) && success?(1-proj-3-tuple(v_768))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then cipherstatepack(1-proj-2-tuple(v_771),increment_nonce(2-proj-2-tuple(v_769))) else fail-any) else fail-any)) in
        {268}let v_773: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_768)) && success?(1-proj-3-tuple(v_768))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then (if not-caught-fail(v_770) then (if not-caught-fail(v_772) then (v_772,v_770) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {269}let v_774: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_773),2-proj-3-tuple(v_768),3-proj-3-tuple(v_768)))) in
        {270}let v_775: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_773)) && success?(symmetricstatepack(1-proj-2-tuple(v_773),2-proj-3-tuple(v_768),3-proj-3-tuple(v_768)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_774),hash(3-proj-3-tuple(v_774),2-proj-2-tuple(v_773))) else fail-any) else fail-any)) in
        {271}let v_776: bitstring = catch-fail((if success?(1-proj-7-tuple(v_766)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-2-tuple(v_773))))) then (if not-caught-fail(v_775) then (v_775,2-proj-2-tuple(v_773)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {272}let v_777: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_776),2-proj-7-tuple(v_766),3-proj-7-tuple(v_766),4-proj-7-tuple(v_766),5-proj-7-tuple(v_766),6-proj-7-tuple(v_766),7-proj-7-tuple(v_766))) in
        {273}let v_778: bitstring = catch-fail(concat3(1-proj-3-tuple(v_767),2-proj-3-tuple(v_767),2-proj-2-tuple(v_776))) in
        {274}let (hs_779: handshakestate,message_c_780: bitstring) = (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-7-tuple(v_766))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (v_777,v_778) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {275}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {276}insert statestore(alice,charlie,sid,statepack_d(hs_779,handshakestategetcs(hs_779),cs2_764));
        {277}out(pub, message_c_780)
    ) | (
        {279}!
        {299}get statestore(=alice,=charlie,=sid,statepack_d(hs_781: handshakestate,cs1_782: cipherstate,cs2_783: cipherstate)) in
        {280}let hs_784: handshakestate = handshakestatesetcs(hs_781,cs2_783) in
        {281}in(pub, message_d_785: bitstring);
        {282}let v_786: bitstring = catch-fail(handshakestateunpack(hs_784)) in
        {283}let v_787: bitstring = catch-fail(deconcat3(message_d_785)) in
        {284}let v_788: bool = catch-fail(true) in
        {285}let v_789: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_786))) in
        {286}let v_790: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_789))) in
        {287}let v_791: aead = catch-fail(decrypt(1-proj-2-tuple(v_790),2-proj-2-tuple(v_790),3-proj-3-tuple(v_789),3-proj-3-tuple(v_787))) in
        {288}let v_792: bitstring = catch-fail(aeadunpack(v_791)) in
        {289}let v_793: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_789))) in
        {290}let v_794: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_790))) && success?(1-proj-3-tuple(v_789))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-2-tuple(v_793))))) then cipherstatepack(1-proj-2-tuple(v_793),increment_nonce(2-proj-2-tuple(v_790))) else fail-any) else fail-any)) in
        {291}let v_795: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_787)) && (success?(3-proj-3-tuple(v_789)) && success?(1-proj-3-tuple(v_789)))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then (if not-caught-fail(v_791) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then (if not-caught-fail(v_794) then (v_794,3-proj-3-tuple(v_792),1-proj-3-tuple(v_792)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {292}let v_796: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_789),3-proj-3-tuple(v_789)))) in
        {293}let v_797: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_787)) && success?(symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_789),3-proj-3-tuple(v_789)))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then symmetricstatepack(1-proj-3-tuple(v_796),2-proj-3-tuple(v_796),hash(3-proj-3-tuple(v_796),3-proj-3-tuple(v_787))) else fail-any) else fail-any)) in
        {294}let v_798: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_787)) && success?(1-proj-7-tuple(v_786))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if not-caught-fail(v_797) then (v_797,2-proj-3-tuple(v_795),3-proj-3-tuple(v_795)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_799: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_798),2-proj-7-tuple(v_786),3-proj-7-tuple(v_786),4-proj-7-tuple(v_786),5-proj-7-tuple(v_786),6-proj-7-tuple(v_786),7-proj-7-tuple(v_786))) in
        {296}let (hs_800: handshakestate,plaintext_d_801: bitstring,valid_802: bool) = (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-7-tuple(v_786))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_788) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then (if (v_788 && 3-proj-3-tuple(v_798)) then (if not-caught-fail(v_799) then (v_799,2-proj-3-tuple(v_798),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {297}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_801);
        {298}event RecvEnd(valid_802)
    ) | (
        {300}event LeakPsk(phase0,alice,charlie);
        {301}out(pub, key_psk(alice,charlie))
    ) | (
        {302}phase 1;
        {303}event LeakPsk(phase1,alice,charlie);
        {304}out(pub, key_psk(alice,charlie))
    ) | (
        {305}event LeakS(phase0,alice);
        {306}out(pub, key_s(alice))
    ) | (
        {307}phase 1;
        {308}event LeakS(phase1,alice);
        {309}out(pub, key_s(alice))
    )
) | (
    {310}let s_803: keypair = keypairpack(empty,empty) in
    (
        {311}let e_804: keypair = keypairpack(empty,empty) in
        {312}let v_805: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {313}let rs_806: key = getpublickey((if not-caught-fail(v_805) then keypairpack(validkey(v_805),key_s(alice)) else fail-any)) in
        {314}let re_807: key = empty in
        {315}let v_808: bitstring = catch-fail(hash(somename,empty)) in
        {316}let v_809: key = catch-fail(v_808) in
        {317}let v_810: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {318}let v_811: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_808) then (if not-caught-fail(v_809) then (if not-caught-fail(v_810) then symmetricstatepack(v_810,v_809,v_808) else fail-any) else fail-any) else fail-any))) in
        {319}let v_812: symmetricstate = catch-fail((if success?((if not-caught-fail(v_808) then (if not-caught-fail(v_809) then (if not-caught-fail(v_810) then symmetricstatepack(v_810,v_809,v_808) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then symmetricstatepack(1-proj-3-tuple(v_811),2-proj-3-tuple(v_811),hash(3-proj-3-tuple(v_811),empty)) else fail-any) else fail-any)) in
        {320}let v_813: bitstring = catch-fail(symmetricstateunpack(v_812)) in
        {321}let v_814: symmetricstate = catch-fail((if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then symmetricstatepack(1-proj-3-tuple(v_813),2-proj-3-tuple(v_813),hash(3-proj-3-tuple(v_813),rs_806)) else fail-any)) in
        {322}let hs_815: handshakestate = (if not-caught-fail(v_812) then (if not-caught-fail(v_814) then handshakestatepack(v_814,s_803,e_804,rs_806,re_807,key_psk(alice,bob),false) else fail-any) else fail-any) in
        {323}insert statestore(bob,alice,sid,statepack_a(hs_815))
    ) | (
        {359}get statestore(=bob,=alice,=sid,statepack_a(hs_816: handshakestate)) in
        {324}in(pub, message_a_817: bitstring);
        {325}let v_818: bitstring = catch-fail(handshakestateunpack(hs_816)) in
        {326}let v_819: bitstring = catch-fail(deconcat3(message_a_817)) in
        {327}let v_820: bool = catch-fail(true) in
        {328}let v_821: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_818))) in
        {329}let v_822: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_821),6-proj-7-tuple(v_818))) in
        {330}let v_823: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_821),6-proj-7-tuple(v_818))) in
        {331}let v_824: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_821),6-proj-7-tuple(v_818))) in
        {332}let v_825: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_818)) && success?(2-proj-3-tuple(v_821))) then (if not-caught-fail(v_822) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (v_822,v_823,v_824) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let v_826: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_821),1-proj-3-tuple(v_825),3-proj-3-tuple(v_821)))) in
        {334}let v_827: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_825)) && success?(symmetricstatepack(1-proj-3-tuple(v_821),1-proj-3-tuple(v_825),3-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_826),hash(3-proj-3-tuple(v_826),2-proj-3-tuple(v_825))) else fail-any) else fail-any))) in
        {335}let v_828: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_818)) && success?(1-proj-7-tuple(v_818))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_825)) then cipherstatepack(3-proj-3-tuple(v_825),minnonce) else fail-any),1-proj-3-tuple(v_825),3-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {336}let v_829: key = catch-fail(1-proj-3-tuple(v_819)) in
        {337}let v_830: bitstring = catch-fail(symmetricstateunpack(v_828)) in
        {338}let v_831: symmetricstate = catch-fail((if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then symmetricstatepack(1-proj-3-tuple(v_830),2-proj-3-tuple(v_830),hash(3-proj-3-tuple(v_830),v_829)) else fail-any)) in
        {339}let v_832: bitstring = catch-fail(symmetricstateunpack(v_831)) in
        {340}let v_833: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_832),v_829)) in
        {341}let v_834: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_832),v_829)) in
        {342}let v_835: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_832),v_829)) in
        {343}let v_836: bitstring = catch-fail((if success?(2-proj-3-tuple(v_832)) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then (v_833,v_834,v_835) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {344}let v_837: symmetricstate = catch-fail((if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_836)) then cipherstatepack(2-proj-3-tuple(v_836),minnonce) else fail-any),1-proj-3-tuple(v_836),3-proj-3-tuple(v_832)) else fail-any) else fail-any)) in
        {345}let v_838: bitstring = catch-fail(symmetricstateunpack(v_837)) in
        {346}let v_839: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_838))) in
        {347}let v_840: aead = catch-fail(decrypt(1-proj-2-tuple(v_839),2-proj-2-tuple(v_839),3-proj-3-tuple(v_838),3-proj-3-tuple(v_819))) in
        {348}let v_841: bitstring = catch-fail(aeadunpack(v_840)) in
        {349}let v_842: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_838))) in
        {350}let v_843: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_839))) && success?(1-proj-3-tuple(v_838))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then cipherstatepack(1-proj-2-tuple(v_842),increment_nonce(2-proj-2-tuple(v_839))) else fail-any) else fail-any)) in
        {351}let v_844: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_819)) && (success?(3-proj-3-tuple(v_838)) && success?(1-proj-3-tuple(v_838)))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-2-tuple(v_839))))) then (if not-caught-fail(v_840) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if not-caught-fail(v_843) then (v_843,3-proj-3-tuple(v_841),1-proj-3-tuple(v_841)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_845: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_844),2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)))) in
        {353}let v_846: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_819)) && success?(symmetricstatepack(1-proj-3-tuple(v_844),2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),3-proj-3-tuple(v_819))) else fail-any) else fail-any)) in
        {354}let v_847: bitstring = catch-fail((if success?(3-proj-3-tuple(v_819)) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then (if not-caught-fail(v_846) then (v_846,2-proj-3-tuple(v_844),3-proj-3-tuple(v_844)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_848: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_847),2-proj-7-tuple(v_818),3-proj-7-tuple(v_818),4-proj-7-tuple(v_818),v_829,6-proj-7-tuple(v_818),7-proj-7-tuple(v_818))) in
        {356}let (hs_849: handshakestate,plaintext_a: bitstring,valid_850: bool) = (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-7-tuple(v_818))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if not-caught-fail(v_820) then (if not-caught-fail(v_828) then (if not-caught-fail(v_829) then (if not-caught-fail(v_831) then (if not-caught-fail(v_837) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then (if (v_820 && 3-proj-3-tuple(v_847)) then (if not-caught-fail(v_848) then (v_848,2-proj-3-tuple(v_847),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {357}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {358}insert statestore(bob,alice,sid,statepack_b(hs_849))
    ) | (
        {410}get statestore(=bob,=alice,=sid,statepack_b(hs_851: handshakestate)) in
        {360}let v_852: bitstring = catch-fail(handshakestateunpack(hs_851)) in
        {361}let v_853: bitstring = catch-fail((empty,empty,empty)) in
        {362}let v_854: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {363}let v_855: keypair = catch-fail((if not-caught-fail(v_854) then keypairpack(validkey(v_854),key_e(bob,alice,sid)) else fail-any)) in
        {364}let v_856: bitstring = catch-fail(getpublickey(v_855)) in
        {365}let v_857: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_852))) in
        {366}let v_858: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_852)) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then symmetricstatepack(1-proj-3-tuple(v_857),2-proj-3-tuple(v_857),hash(3-proj-3-tuple(v_857),v_856)) else fail-any) else fail-any)) in
        {367}let v_859: bitstring = catch-fail(symmetricstateunpack(v_858)) in
        {368}let v_860: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_859),getpublickey(v_855))) in
        {369}let v_861: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_859),getpublickey(v_855))) in
        {370}let v_862: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_859),getpublickey(v_855))) in
        {371}let v_863: bitstring = catch-fail((if (success?(getpublickey(v_855)) && success?(2-proj-3-tuple(v_859))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (if not-caught-fail(v_862) then (v_860,v_861,v_862) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_864: symmetricstate = catch-fail((if success?(getpublickey(v_855)) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_863)) then cipherstatepack(2-proj-3-tuple(v_863),minnonce) else fail-any),1-proj-3-tuple(v_863),3-proj-3-tuple(v_859)) else fail-any) else fail-any) else fail-any)) in
        {373}let v_865: bitstring = catch-fail(keypairunpack(v_855)) in
        {374}let v_866: bitstring = catch-fail(symmetricstateunpack(v_864)) in
        {375}let v_867: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_866),(if success?(5-proj-7-tuple(v_852)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),5-proj-7-tuple(v_852)) else fail-any) else fail-any))) in
        {376}let v_868: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_866),(if success?(5-proj-7-tuple(v_852)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),5-proj-7-tuple(v_852)) else fail-any) else fail-any))) in
        {377}let v_869: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_866),(if success?(5-proj-7-tuple(v_852)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),5-proj-7-tuple(v_852)) else fail-any) else fail-any))) in
        {378}let v_870: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_852)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),5-proj-7-tuple(v_852)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_866))) then (if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (if not-caught-fail(v_869) then (v_867,v_868,v_869) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {379}let v_871: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_852)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),5-proj-7-tuple(v_852)) else fail-any) else fail-any)) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_870)) then cipherstatepack(2-proj-3-tuple(v_870),minnonce) else fail-any),1-proj-3-tuple(v_870),3-proj-3-tuple(v_866)) else fail-any) else fail-any) else fail-any)) in
        {380}let v_872: bitstring = catch-fail(keypairunpack(v_855)) in
        {381}let v_873: bitstring = catch-fail(symmetricstateunpack(v_871)) in
        {382}let v_874: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_873),(if success?(4-proj-7-tuple(v_852)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),4-proj-7-tuple(v_852)) else fail-any) else fail-any))) in
        {383}let v_875: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_873),(if success?(4-proj-7-tuple(v_852)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),4-proj-7-tuple(v_852)) else fail-any) else fail-any))) in
        {384}let v_876: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_873),(if success?(4-proj-7-tuple(v_852)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),4-proj-7-tuple(v_852)) else fail-any) else fail-any))) in
        {385}let v_877: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_852)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),4-proj-7-tuple(v_852)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_873))) then (if not-caught-fail(v_874) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (v_874,v_875,v_876) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {386}let v_878: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_852)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then dhexp(2-proj-2-tuple(v_872),4-proj-7-tuple(v_852)) else fail-any) else fail-any)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_877)) then cipherstatepack(2-proj-3-tuple(v_877),minnonce) else fail-any),1-proj-3-tuple(v_877),3-proj-3-tuple(v_873)) else fail-any) else fail-any) else fail-any)) in
        {387}let v_879: bitstring = catch-fail(symmetricstateunpack(v_878)) in
        {388}let v_880: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_879))) in
        {389}let v_881: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_880),2-proj-2-tuple(v_880),3-proj-3-tuple(v_879),msg_b(bob,alice,sid))) in
        {390}let v_882: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_879))) in
        {391}let v_883: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_880))) && success?(1-proj-3-tuple(v_879))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-2-tuple(v_882))))) then cipherstatepack(1-proj-2-tuple(v_882),increment_nonce(2-proj-2-tuple(v_880))) else fail-any) else fail-any)) in
        {392}let v_884: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_879)) && success?(1-proj-3-tuple(v_879))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then (if not-caught-fail(v_881) then (if not-caught-fail(v_883) then (v_883,v_881) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {393}let v_885: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_884),2-proj-3-tuple(v_879),3-proj-3-tuple(v_879)))) in
        {394}let v_886: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_884)) && success?(symmetricstatepack(1-proj-2-tuple(v_884),2-proj-3-tuple(v_879),3-proj-3-tuple(v_879)))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then symmetricstatepack(1-proj-3-tuple(v_885),2-proj-3-tuple(v_885),hash(3-proj-3-tuple(v_885),2-proj-2-tuple(v_884))) else fail-any) else fail-any)) in
        {395}let v_887: bitstring = catch-fail((if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then (if not-caught-fail(v_886) then (v_886,2-proj-2-tuple(v_884)) else fail-any) else fail-any) else fail-any)) in
        {396}let v_888: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_887),2-proj-7-tuple(v_852),v_855,4-proj-7-tuple(v_852),5-proj-7-tuple(v_852),6-proj-7-tuple(v_852),7-proj-7-tuple(v_852))) in
        {397}let v_889: bitstring = catch-fail(concat3(v_856,2-proj-3-tuple(v_853),2-proj-2-tuple(v_887))) in
        {398}let v_890: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_887))) in
        {399}let v_891: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_890),zero)) in
        {400}let v_892: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_890),zero)) in
        {401}let v_893: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_890),zero)) in
        {402}let v_894: bitstring = catch-fail((if success?(2-proj-3-tuple(v_890)) then (if not-caught-fail(v_891) then (if not-caught-fail(v_892) then (if not-caught-fail(v_893) then (v_891,v_892,v_893) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {403}let v_895: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_894)) then cipherstatepack(1-proj-3-tuple(v_894),minnonce) else fail-any)) in
        {404}let v_896: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_894)) then cipherstatepack(2-proj-3-tuple(v_894),minnonce) else fail-any)) in
        {405}let v_897: bitstring = catch-fail((if success?(1-proj-2-tuple(v_887)) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (1-proj-2-tuple(v_887),v_895,v_896) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {406}let (hs_898: handshakestate,message_b_899: bitstring,cs1_900: cipherstate,cs2_901: cipherstate) = (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-7-tuple(v_852))))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then (if not-caught-fail(v_855) then (if not-caught-fail(v_856) then (if not-caught-fail(v_858) then (if not-caught-fail(v_864) then (if not-caught-fail(v_871) then (if not-caught-fail(v_878) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-2-tuple(v_887))))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (v_888,v_889,2-proj-3-tuple(v_897),3-proj-3-tuple(v_897)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {407}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {408}insert statestore(bob,alice,sid,statepack_c(hs_898,cs1_900,cs2_901));
        {409}out(pub, message_b_899)
    ) | (
        {411}!
        {431}get statestore(=bob,=alice,=sid,statepack_c(hs_902: handshakestate,cs1_903: cipherstate,cs2_904: cipherstate)) in
        {412}let hs_905: handshakestate = handshakestatesetcs(hs_902,cs1_903) in
        {413}in(pub, message_c_906: bitstring);
        {414}let v_907: bitstring = catch-fail(handshakestateunpack(hs_905)) in
        {415}let v_908: bitstring = catch-fail(deconcat3(message_c_906)) in
        {416}let v_909: bool = catch-fail(true) in
        {417}let v_910: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
        {418}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {419}let v_912: aead = catch-fail(decrypt(1-proj-2-tuple(v_911),2-proj-2-tuple(v_911),3-proj-3-tuple(v_910),3-proj-3-tuple(v_908))) in
        {420}let v_913: bitstring = catch-fail(aeadunpack(v_912)) in
        {421}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {422}let v_915: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_911))) && success?(1-proj-3-tuple(v_910))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then cipherstatepack(1-proj-2-tuple(v_914),increment_nonce(2-proj-2-tuple(v_911))) else fail-any) else fail-any)) in
        {423}let v_916: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_910)) && success?(1-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if not-caught-fail(v_915) then (v_915,3-proj-3-tuple(v_913),1-proj-3-tuple(v_913)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_917: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) in
        {425}let v_918: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then symmetricstatepack(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),hash(3-proj-3-tuple(v_917),3-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {426}let v_919: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(1-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let v_920: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_919),2-proj-7-tuple(v_907),3-proj-7-tuple(v_907),4-proj-7-tuple(v_907),5-proj-7-tuple(v_907),6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
        {428}let (hs_921: handshakestate,plaintext_c: bitstring,valid_922: bool) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_909) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if (v_909 && 3-proj-3-tuple(v_919)) then (if not-caught-fail(v_920) then (v_920,2-proj-3-tuple(v_919),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {429}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {430}insert statestore(bob,alice,sid,statepack_d(hs_921,handshakestategetcs(hs_921),cs2_904))
    ) | (
        {432}!
        {450}get statestore(=bob,=alice,=sid,statepack_d(hs_923: handshakestate,cs1_924: cipherstate,cs2_925: cipherstate)) in
        {433}let hs_926: handshakestate = handshakestatesetcs(hs_923,cs2_925) in
        {434}let v_927: bitstring = catch-fail(handshakestateunpack(hs_926)) in
        {435}let v_928: bitstring = catch-fail((empty,empty,empty)) in
        {436}let v_929: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_927))) in
        {437}let v_930: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {438}let v_931: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_930),2-proj-2-tuple(v_930),3-proj-3-tuple(v_929),msg_d(bob,alice,sid))) in
        {439}let v_932: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {440}let v_933: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_930))) && success?(1-proj-3-tuple(v_929))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then cipherstatepack(1-proj-2-tuple(v_932),increment_nonce(2-proj-2-tuple(v_930))) else fail-any) else fail-any)) in
        {441}let v_934: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_929)) && success?(1-proj-3-tuple(v_929))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then (if not-caught-fail(v_931) then (if not-caught-fail(v_933) then (v_933,v_931) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {442}let v_935: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_934),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) in
        {443}let v_936: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_934)) && success?(symmetricstatepack(1-proj-2-tuple(v_934),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_935),hash(3-proj-3-tuple(v_935),2-proj-2-tuple(v_934))) else fail-any) else fail-any)) in
        {444}let v_937: bitstring = catch-fail((if success?(1-proj-7-tuple(v_927)) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then (if not-caught-fail(v_936) then (v_936,2-proj-2-tuple(v_934)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_938: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_937),2-proj-7-tuple(v_927),3-proj-7-tuple(v_927),4-proj-7-tuple(v_927),5-proj-7-tuple(v_927),6-proj-7-tuple(v_927),7-proj-7-tuple(v_927))) in
        {446}let v_939: bitstring = catch-fail(concat3(1-proj-3-tuple(v_928),2-proj-3-tuple(v_928),2-proj-2-tuple(v_937))) in
        {447}let (hs_940: handshakestate,message_d_941: bitstring) = (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-7-tuple(v_927))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then (if not-caught-fail(v_938) then (if not-caught-fail(v_939) then (v_938,v_939) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {448}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {449}out(pub, message_d_941)
    ) | (
        {451}event LeakPsk(phase0,alice,bob);
        {452}out(pub, key_psk(alice,bob))
    ) | (
        {453}phase 1;
        {454}event LeakPsk(phase1,alice,bob);
        {455}out(pub, key_psk(alice,bob))
    ) | (
        0
    )
) | (
    {456}let s_942: keypair = keypairpack(empty,empty) in
    (
        {457}let e_943: keypair = keypairpack(empty,empty) in
        {458}let v_944: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {459}let rs_945: key = getpublickey((if not-caught-fail(v_944) then keypairpack(validkey(v_944),key_s(charlie)) else fail-any)) in
        {460}let re_946: key = empty in
        {461}let v_947: bitstring = catch-fail(hash(somename,empty)) in
        {462}let v_948: key = catch-fail(v_947) in
        {463}let v_949: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {464}let v_950: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then symmetricstatepack(v_949,v_948,v_947) else fail-any) else fail-any) else fail-any))) in
        {465}let v_951: symmetricstate = catch-fail((if success?((if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (if not-caught-fail(v_949) then symmetricstatepack(v_949,v_948,v_947) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then symmetricstatepack(1-proj-3-tuple(v_950),2-proj-3-tuple(v_950),hash(3-proj-3-tuple(v_950),empty)) else fail-any) else fail-any)) in
        {466}let v_952: bitstring = catch-fail(symmetricstateunpack(v_951)) in
        {467}let v_953: symmetricstate = catch-fail((if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_952),hash(3-proj-3-tuple(v_952),rs_945)) else fail-any)) in
        {468}let hs_954: handshakestate = (if not-caught-fail(v_951) then (if not-caught-fail(v_953) then handshakestatepack(v_953,s_942,e_943,rs_945,re_946,key_psk(charlie,bob),false) else fail-any) else fail-any) in
        {469}insert statestore(bob,charlie,sid,statepack_a(hs_954))
    ) | (
        {505}get statestore(=bob,=charlie,=sid,statepack_a(hs_955: handshakestate)) in
        {470}in(pub, message_a_956: bitstring);
        {471}let v_957: bitstring = catch-fail(handshakestateunpack(hs_955)) in
        {472}let v_958: bitstring = catch-fail(deconcat3(message_a_956)) in
        {473}let v_959: bool = catch-fail(true) in
        {474}let v_960: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_957))) in
        {475}let v_961: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_960),6-proj-7-tuple(v_957))) in
        {476}let v_962: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_960),6-proj-7-tuple(v_957))) in
        {477}let v_963: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_960),6-proj-7-tuple(v_957))) in
        {478}let v_964: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_957)) && success?(2-proj-3-tuple(v_960))) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (v_961,v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {479}let v_965: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_960),1-proj-3-tuple(v_964),3-proj-3-tuple(v_960)))) in
        {480}let v_966: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_964)) && success?(symmetricstatepack(1-proj-3-tuple(v_960),1-proj-3-tuple(v_964),3-proj-3-tuple(v_960)))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then symmetricstatepack(1-proj-3-tuple(v_965),2-proj-3-tuple(v_965),hash(3-proj-3-tuple(v_965),2-proj-3-tuple(v_964))) else fail-any) else fail-any))) in
        {481}let v_967: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_957)) && success?(1-proj-7-tuple(v_957))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_964)) then cipherstatepack(3-proj-3-tuple(v_964),minnonce) else fail-any),1-proj-3-tuple(v_964),3-proj-3-tuple(v_966)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {482}let v_968: key = catch-fail(1-proj-3-tuple(v_958)) in
        {483}let v_969: bitstring = catch-fail(symmetricstateunpack(v_967)) in
        {484}let v_970: symmetricstate = catch-fail((if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then symmetricstatepack(1-proj-3-tuple(v_969),2-proj-3-tuple(v_969),hash(3-proj-3-tuple(v_969),v_968)) else fail-any)) in
        {485}let v_971: bitstring = catch-fail(symmetricstateunpack(v_970)) in
        {486}let v_972: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_971),v_968)) in
        {487}let v_973: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_971),v_968)) in
        {488}let v_974: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_971),v_968)) in
        {489}let v_975: bitstring = catch-fail((if success?(2-proj-3-tuple(v_971)) then (if not-caught-fail(v_972) then (if not-caught-fail(v_973) then (if not-caught-fail(v_974) then (v_972,v_973,v_974) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {490}let v_976: symmetricstate = catch-fail((if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_975)) then cipherstatepack(2-proj-3-tuple(v_975),minnonce) else fail-any),1-proj-3-tuple(v_975),3-proj-3-tuple(v_971)) else fail-any) else fail-any)) in
        {491}let v_977: bitstring = catch-fail(symmetricstateunpack(v_976)) in
        {492}let v_978: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_977))) in
        {493}let v_979: aead = catch-fail(decrypt(1-proj-2-tuple(v_978),2-proj-2-tuple(v_978),3-proj-3-tuple(v_977),3-proj-3-tuple(v_958))) in
        {494}let v_980: bitstring = catch-fail(aeadunpack(v_979)) in
        {495}let v_981: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_977))) in
        {496}let v_982: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_978))) && success?(1-proj-3-tuple(v_977))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-2-tuple(v_981))))) then cipherstatepack(1-proj-2-tuple(v_981),increment_nonce(2-proj-2-tuple(v_978))) else fail-any) else fail-any)) in
        {497}let v_983: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_958)) && (success?(3-proj-3-tuple(v_977)) && success?(1-proj-3-tuple(v_977)))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then (if not-caught-fail(v_979) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-3-tuple(v_980))))) then (if not-caught-fail(v_982) then (v_982,3-proj-3-tuple(v_980),1-proj-3-tuple(v_980)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_984: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_983),2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)))) in
        {499}let v_985: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_958)) && success?(symmetricstatepack(1-proj-3-tuple(v_983),2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)))) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-3-tuple(v_984))))) then symmetricstatepack(1-proj-3-tuple(v_984),2-proj-3-tuple(v_984),hash(3-proj-3-tuple(v_984),3-proj-3-tuple(v_958))) else fail-any) else fail-any)) in
        {500}let v_986: bitstring = catch-fail((if success?(3-proj-3-tuple(v_958)) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if not-caught-fail(v_985) then (v_985,2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_987: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_986),2-proj-7-tuple(v_957),3-proj-7-tuple(v_957),4-proj-7-tuple(v_957),v_968,6-proj-7-tuple(v_957),7-proj-7-tuple(v_957))) in
        {502}let (hs_988: handshakestate,plaintext_a_989: bitstring,valid_990: bool) = (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-7-tuple(v_957))))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if not-caught-fail(v_959) then (if not-caught-fail(v_967) then (if not-caught-fail(v_968) then (if not-caught-fail(v_970) then (if not-caught-fail(v_976) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then (if (v_959 && 3-proj-3-tuple(v_986)) then (if not-caught-fail(v_987) then (v_987,2-proj-3-tuple(v_986),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {503}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_989);
        {504}insert statestore(bob,charlie,sid,statepack_b(hs_988))
    ) | (
        {556}get statestore(=bob,=charlie,=sid,statepack_b(hs_991: handshakestate)) in
        {506}let v_992: bitstring = catch-fail(handshakestateunpack(hs_991)) in
        {507}let v_993: bitstring = catch-fail((empty,empty,empty)) in
        {508}let v_994: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {509}let v_995: keypair = catch-fail((if not-caught-fail(v_994) then keypairpack(validkey(v_994),key_e(bob,charlie,sid)) else fail-any)) in
        {510}let v_996: bitstring = catch-fail(getpublickey(v_995)) in
        {511}let v_997: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_992))) in
        {512}let v_998: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_992)) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack(1-proj-3-tuple(v_997),2-proj-3-tuple(v_997),hash(3-proj-3-tuple(v_997),v_996)) else fail-any) else fail-any)) in
        {513}let v_999: bitstring = catch-fail(symmetricstateunpack(v_998)) in
        {514}let v_1000: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_999),getpublickey(v_995))) in
        {515}let v_1001: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_999),getpublickey(v_995))) in
        {516}let v_1002: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_999),getpublickey(v_995))) in
        {517}let v_1003: bitstring = catch-fail((if (success?(getpublickey(v_995)) && success?(2-proj-3-tuple(v_999))) then (if not-caught-fail(v_1000) then (if not-caught-fail(v_1001) then (if not-caught-fail(v_1002) then (v_1000,v_1001,v_1002) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {518}let v_1004: symmetricstate = catch-fail((if success?(getpublickey(v_995)) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1003)) then cipherstatepack(2-proj-3-tuple(v_1003),minnonce) else fail-any),1-proj-3-tuple(v_1003),3-proj-3-tuple(v_999)) else fail-any) else fail-any) else fail-any)) in
        {519}let v_1005: bitstring = catch-fail(keypairunpack(v_995)) in
        {520}let v_1006: bitstring = catch-fail(symmetricstateunpack(v_1004)) in
        {521}let v_1007: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1006),(if success?(5-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-2-tuple(v_1005))))) then dhexp(2-proj-2-tuple(v_1005),5-proj-7-tuple(v_992)) else fail-any) else fail-any))) in
        {522}let v_1008: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1006),(if success?(5-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-2-tuple(v_1005))))) then dhexp(2-proj-2-tuple(v_1005),5-proj-7-tuple(v_992)) else fail-any) else fail-any))) in
        {523}let v_1009: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1006),(if success?(5-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-2-tuple(v_1005))))) then dhexp(2-proj-2-tuple(v_1005),5-proj-7-tuple(v_992)) else fail-any) else fail-any))) in
        {524}let v_1010: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-2-tuple(v_1005))))) then dhexp(2-proj-2-tuple(v_1005),5-proj-7-tuple(v_992)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1006))) then (if not-caught-fail(v_1007) then (if not-caught-fail(v_1008) then (if not-caught-fail(v_1009) then (v_1007,v_1008,v_1009) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {525}let v_1011: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-2-tuple(v_1005))))) then dhexp(2-proj-2-tuple(v_1005),5-proj-7-tuple(v_992)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1010)) then cipherstatepack(2-proj-3-tuple(v_1010),minnonce) else fail-any),1-proj-3-tuple(v_1010),3-proj-3-tuple(v_1006)) else fail-any) else fail-any) else fail-any)) in
        {526}let v_1012: bitstring = catch-fail(keypairunpack(v_995)) in
        {527}let v_1013: bitstring = catch-fail(symmetricstateunpack(v_1011)) in
        {528}let v_1014: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1013),(if success?(4-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_992)) else fail-any) else fail-any))) in
        {529}let v_1015: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1013),(if success?(4-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_992)) else fail-any) else fail-any))) in
        {530}let v_1016: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1013),(if success?(4-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_992)) else fail-any) else fail-any))) in
        {531}let v_1017: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_992)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1013))) then (if not-caught-fail(v_1014) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then (v_1014,v_1015,v_1016) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1018: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_992)) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_992)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-3-tuple(v_1013))))) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1017)) then cipherstatepack(2-proj-3-tuple(v_1017),minnonce) else fail-any),1-proj-3-tuple(v_1017),3-proj-3-tuple(v_1013)) else fail-any) else fail-any) else fail-any)) in
        {533}let v_1019: bitstring = catch-fail(symmetricstateunpack(v_1018)) in
        {534}let v_1020: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1019))) in
        {535}let v_1021: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1020),2-proj-2-tuple(v_1020),3-proj-3-tuple(v_1019),msg_b(bob,charlie,sid))) in
        {536}let v_1022: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1019))) in
        {537}let v_1023: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1020))) && success?(1-proj-3-tuple(v_1019))) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-2-tuple(v_1022))))) then cipherstatepack(1-proj-2-tuple(v_1022),increment_nonce(2-proj-2-tuple(v_1020))) else fail-any) else fail-any)) in
        {538}let v_1024: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1019)) && success?(1-proj-3-tuple(v_1019))) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-2-tuple(v_1020))))) then (if not-caught-fail(v_1021) then (if not-caught-fail(v_1023) then (v_1023,v_1021) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {539}let v_1025: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1024),2-proj-3-tuple(v_1019),3-proj-3-tuple(v_1019)))) in
        {540}let v_1026: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1024)) && success?(symmetricstatepack(1-proj-2-tuple(v_1024),2-proj-3-tuple(v_1019),3-proj-3-tuple(v_1019)))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then symmetricstatepack(1-proj-3-tuple(v_1025),2-proj-3-tuple(v_1025),hash(3-proj-3-tuple(v_1025),2-proj-2-tuple(v_1024))) else fail-any) else fail-any)) in
        {541}let v_1027: bitstring = catch-fail((if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-2-tuple(v_1024))))) then (if not-caught-fail(v_1026) then (v_1026,2-proj-2-tuple(v_1024)) else fail-any) else fail-any) else fail-any)) in
        {542}let v_1028: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1027),2-proj-7-tuple(v_992),v_995,4-proj-7-tuple(v_992),5-proj-7-tuple(v_992),6-proj-7-tuple(v_992),7-proj-7-tuple(v_992))) in
        {543}let v_1029: bitstring = catch-fail(concat3(v_996,2-proj-3-tuple(v_993),2-proj-2-tuple(v_1027))) in
        {544}let v_1030: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1027))) in
        {545}let v_1031: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1030),zero)) in
        {546}let v_1032: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1030),zero)) in
        {547}let v_1033: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1030),zero)) in
        {548}let v_1034: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1030)) then (if not-caught-fail(v_1031) then (if not-caught-fail(v_1032) then (if not-caught-fail(v_1033) then (v_1031,v_1032,v_1033) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {549}let v_1035: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1034)) then cipherstatepack(1-proj-3-tuple(v_1034),minnonce) else fail-any)) in
        {550}let v_1036: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1034)) then cipherstatepack(2-proj-3-tuple(v_1034),minnonce) else fail-any)) in
        {551}let v_1037: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1027)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-3-tuple(v_1034))))) then (if not-caught-fail(v_1035) then (if not-caught-fail(v_1036) then (1-proj-2-tuple(v_1027),v_1035,v_1036) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {552}let (hs_1038: handshakestate,message_b_1039: bitstring,cs1_1040: cipherstate,cs2_1041: cipherstate) = (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-7-tuple(v_992))))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then (if not-caught-fail(v_995) then (if not-caught-fail(v_996) then (if not-caught-fail(v_998) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1011) then (if not-caught-fail(v_1018) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-2-tuple(v_1027))))) then (if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then (v_1028,v_1029,2-proj-3-tuple(v_1037),3-proj-3-tuple(v_1037)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {553}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {554}insert statestore(bob,charlie,sid,statepack_c(hs_1038,cs1_1040,cs2_1041));
        {555}out(pub, message_b_1039)
    ) | (
        {557}!
        {577}get statestore(=bob,=charlie,=sid,statepack_c(hs_1042: handshakestate,cs1_1043: cipherstate,cs2_1044: cipherstate)) in
        {558}let hs_1045: handshakestate = handshakestatesetcs(hs_1042,cs1_1043) in
        {559}in(pub, message_c_1046: bitstring);
        {560}let v_1047: bitstring = catch-fail(handshakestateunpack(hs_1045)) in
        {561}let v_1048: bitstring = catch-fail(deconcat3(message_c_1046)) in
        {562}let v_1049: bool = catch-fail(true) in
        {563}let v_1050: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1047))) in
        {564}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {565}let v_1052: aead = catch-fail(decrypt(1-proj-2-tuple(v_1051),2-proj-2-tuple(v_1051),3-proj-3-tuple(v_1050),3-proj-3-tuple(v_1048))) in
        {566}let v_1053: bitstring = catch-fail(aeadunpack(v_1052)) in
        {567}let v_1054: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {568}let v_1055: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1051))) && success?(1-proj-3-tuple(v_1050))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then cipherstatepack(1-proj-2-tuple(v_1054),increment_nonce(2-proj-2-tuple(v_1051))) else fail-any) else fail-any)) in
        {569}let v_1056: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1048)) && (success?(3-proj-3-tuple(v_1050)) && success?(1-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then (if not-caught-fail(v_1052) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if not-caught-fail(v_1055) then (v_1055,3-proj-3-tuple(v_1053),1-proj-3-tuple(v_1053)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {570}let v_1057: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) in
        {571}let v_1058: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1048)) && success?(symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then symmetricstatepack(1-proj-3-tuple(v_1057),2-proj-3-tuple(v_1057),hash(3-proj-3-tuple(v_1057),3-proj-3-tuple(v_1048))) else fail-any) else fail-any)) in
        {572}let v_1059: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1048)) && success?(1-proj-7-tuple(v_1047))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if not-caught-fail(v_1058) then (v_1058,2-proj-3-tuple(v_1056),3-proj-3-tuple(v_1056)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {573}let v_1060: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1059),2-proj-7-tuple(v_1047),3-proj-7-tuple(v_1047),4-proj-7-tuple(v_1047),5-proj-7-tuple(v_1047),6-proj-7-tuple(v_1047),7-proj-7-tuple(v_1047))) in
        {574}let (hs_1061: handshakestate,plaintext_c_1062: bitstring,valid_1063: bool) = (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-7-tuple(v_1047))))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if not-caught-fail(v_1049) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then (if (v_1049 && 3-proj-3-tuple(v_1059)) then (if not-caught-fail(v_1060) then (v_1060,2-proj-3-tuple(v_1059),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {575}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1062);
        {576}insert statestore(bob,charlie,sid,statepack_d(hs_1061,handshakestategetcs(hs_1061),cs2_1044))
    ) | (
        {578}!
        {596}get statestore(=bob,=charlie,=sid,statepack_d(hs_1064: handshakestate,cs1_1065: cipherstate,cs2_1066: cipherstate)) in
        {579}let hs_1067: handshakestate = handshakestatesetcs(hs_1064,cs2_1066) in
        {580}let v_1068: bitstring = catch-fail(handshakestateunpack(hs_1067)) in
        {581}let v_1069: bitstring = catch-fail((empty,empty,empty)) in
        {582}let v_1070: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1068))) in
        {583}let v_1071: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1070))) in
        {584}let v_1072: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1071),2-proj-2-tuple(v_1071),3-proj-3-tuple(v_1070),msg_d(bob,charlie,sid))) in
        {585}let v_1073: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1070))) in
        {586}let v_1074: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1071))) && success?(1-proj-3-tuple(v_1070))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then cipherstatepack(1-proj-2-tuple(v_1073),increment_nonce(2-proj-2-tuple(v_1071))) else fail-any) else fail-any)) in
        {587}let v_1075: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1070)) && success?(1-proj-3-tuple(v_1070))) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1074) then (v_1074,v_1072) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {588}let v_1076: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1075),2-proj-3-tuple(v_1070),3-proj-3-tuple(v_1070)))) in
        {589}let v_1077: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1075)) && success?(symmetricstatepack(1-proj-2-tuple(v_1075),2-proj-3-tuple(v_1070),3-proj-3-tuple(v_1070)))) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then symmetricstatepack(1-proj-3-tuple(v_1076),2-proj-3-tuple(v_1076),hash(3-proj-3-tuple(v_1076),2-proj-2-tuple(v_1075))) else fail-any) else fail-any)) in
        {590}let v_1078: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1068)) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then (if not-caught-fail(v_1077) then (v_1077,2-proj-2-tuple(v_1075)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {591}let v_1079: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1078),2-proj-7-tuple(v_1068),3-proj-7-tuple(v_1068),4-proj-7-tuple(v_1068),5-proj-7-tuple(v_1068),6-proj-7-tuple(v_1068),7-proj-7-tuple(v_1068))) in
        {592}let v_1080: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1069),2-proj-3-tuple(v_1069),2-proj-2-tuple(v_1078))) in
        {593}let (hs_1081: handshakestate,message_d_1082: bitstring) = (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-7-tuple(v_1068))))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then (if not-caught-fail(v_1079) then (if not-caught-fail(v_1080) then (v_1079,v_1080) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {594}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {595}out(pub, message_d_1082)
    ) | (
        {597}event LeakPsk(phase0,charlie,bob);
        {598}out(pub, key_psk(charlie,bob))
    ) | (
        {599}phase 1;
        {600}event LeakPsk(phase1,charlie,bob);
        {601}out(pub, key_psk(charlie,bob))
    ) | (
        0
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 138 rules in the queue.
400 rules inserted. The rule base contains 382 rules. 34 rules in the queue.
600 rules inserted. The rule base contains 569 rules. 53 rules in the queue.
800 rules inserted. The rule base contains 705 rules. 85 rules in the queue.
1000 rules inserted. The rule base contains 841 rules. 97 rules in the queue.
1200 rules inserted. The rule base contains 1001 rules. 104 rules in the queue.
1400 rules inserted. The rule base contains 1170 rules. 116 rules in the queue.
1600 rules inserted. The rule base contains 1333 rules. 147 rules in the queue.
1800 rules inserted. The rule base contains 1476 rules. 154 rules in the queue.
2000 rules inserted. The rule base contains 1584 rules. 148 rules in the queue.
2200 rules inserted. The rule base contains 1730 rules. 161 rules in the queue.
2400 rules inserted. The rule base contains 1855 rules. 176 rules in the queue.
2600 rules inserted. The rule base contains 1981 rules. 155 rules in the queue.
2800 rules inserted. The rule base contains 2091 rules. 160 rules in the queue.
3000 rules inserted. The rule base contains 2178 rules. 138 rules in the queue.
3200 rules inserted. The rule base contains 2272 rules. 122 rules in the queue.
3400 rules inserted. The rule base contains 2349 rules. 95 rules in the queue.
3600 rules inserted. The rule base contains 2373 rules. 19 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100161]),msg_a(alice,bob,sid[!1 = @sid_766100161]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_766100162]),msg_a(alice,bob,sid[!1 = @sid_766100161])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100170]),msg_a(alice,bob,sid[!1 = @sid_766100170]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_766100171]),msg_a(alice,bob,sid[!1 = @sid_766100170])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100180]),msg_a(alice,bob,sid[!1 = @sid_766100180]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_766100181]),msg_a(alice,bob,sid[!1 = @sid_766100180])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100190]),msg_a(alice,bob,sid[!1 = @sid_766100190]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_766100191]),msg_a(alice,bob,sid[!1 = @sid_766100190])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100199]),msg_a(alice,bob,sid[!1 = @sid_766100199]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_766100200]),msg_a(alice,bob,sid[!1 = @sid_766100199])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100207]),msg_a(alice,bob,sid[!1 = @sid_766100207]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_766100207]))
Abbreviations:
sid_766100280 = sid[!1 = @sid_766100256]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_766100280,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_766100280,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_766100280,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {55}.
The event SendMsg(alice,bob,stagepack_a(sid_766100280),msg_a(alice,bob,sid_766100280)) may be executed at {52}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280))) may be sent on channel pub at output {54}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {150}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {151}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g)))).

26. By 25, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280))).

27. By 26, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100280),g))),msg_a(alice,bob,sid_766100280)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_766100280) in phase 1.
attacker_p1(msg_a(alice,bob,sid_766100280)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100282]),msg_a(alice,bob,sid[!1 = @sid_766100282]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_766100282]))
goal reachable: begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100285]),msg_a(alice,bob,sid[!1 = @sid_766100285]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_766100285]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100291]),msg_a(alice,bob,sid[!1 = @sid_766100291]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_766100291]))
Abbreviations:
sid_766100365 = sid[!1 = @sid_766100341]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_766100365,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_766100365,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_766100365,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {55}.
The event SendMsg(alice,bob,stagepack_a(sid_766100365),msg_a(alice,bob,sid_766100365)) may be executed at {52}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365))) may be sent on channel pub at output {54}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {150}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {151}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g)))).

26. By 25, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365))).

27. By 26, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100365),g))),msg_a(alice,bob,sid_766100365)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_766100365) in phase 1.
attacker_p1(msg_a(alice,bob,sid_766100365)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob))
goal reachable: begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100367]),msg_a(alice,bob,sid[!1 = @sid_766100367]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_766100367]))
Abbreviations:
sid_766100440 = sid[!1 = @sid_766100416]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_766100440,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_766100440,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_766100440,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {55}.
The event SendMsg(alice,bob,stagepack_a(sid_766100440),msg_a(alice,bob,sid_766100440)) may be executed at {52}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440))) may be sent on channel pub at output {54}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {150}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {151}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g)))).

26. By 25, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440))).

27. By 26, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100440),g))),msg_a(alice,bob,sid_766100440)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_766100440) in phase 1.
attacker_p1(msg_a(alice,bob,sid_766100440)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100443]),msg_b(bob,alice,sid[!1 = @sid_766100443]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100444]),msg_a(alice,bob,sid[!1 = @sid_766100444]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_766100444]),msg_b(bob,alice,sid[!1 = @sid_766100443])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100452]),msg_b(bob,alice,sid[!1 = @sid_766100452]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100453]),msg_a(alice,bob,sid[!1 = @sid_766100453]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_766100453]),msg_b(bob,alice,sid[!1 = @sid_766100452])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100462]),msg_b(bob,alice,sid[!1 = @sid_766100462]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100463]),msg_a(alice,bob,sid[!1 = @sid_766100463]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_766100463]),msg_b(bob,alice,sid[!1 = @sid_766100462])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100472]),msg_b(bob,alice,sid[!1 = @sid_766100472]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100473]),msg_a(alice,bob,sid[!1 = @sid_766100473]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_766100473]),msg_b(bob,alice,sid[!1 = @sid_766100472])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100481]),msg_b(bob,alice,sid[!1 = @sid_766100481]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100482]),msg_a(alice,bob,sid[!1 = @sid_766100482]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_766100482]),msg_b(bob,alice,sid[!1 = @sid_766100481])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100502]),msg_c(alice,bob,sid[!1 = @sid_766100502]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100503]),msg_b(bob,alice,sid[!1 = @sid_766100503]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100502]),msg_a(alice,bob,sid[!1 = @sid_766100502]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_766100503]),msg_c(alice,bob,sid[!1 = @sid_766100502])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100511]),msg_c(alice,bob,sid[!1 = @sid_766100511]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100512]),msg_b(bob,alice,sid[!1 = @sid_766100512]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100511]),msg_a(alice,bob,sid[!1 = @sid_766100511]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_766100512]),msg_c(alice,bob,sid[!1 = @sid_766100511])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100521]),msg_c(alice,bob,sid[!1 = @sid_766100521]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100522]),msg_b(bob,alice,sid[!1 = @sid_766100522]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100521]),msg_a(alice,bob,sid[!1 = @sid_766100521]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_766100522]),msg_c(alice,bob,sid[!1 = @sid_766100521])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1200,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100531]),msg_c(alice,bob,sid[!1 = @sid_766100531]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100532]),msg_b(bob,alice,sid[!1 = @sid_766100532]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100531]),msg_a(alice,bob,sid[!1 = @sid_766100531]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_766100532]),msg_c(alice,bob,sid[!1 = @sid_766100531])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100540]),msg_c(alice,bob,sid[!1 = @sid_766100540]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100541]),msg_b(bob,alice,sid[!1 = @sid_766100541]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100540]),msg_a(alice,bob,sid[!1 = @sid_766100540]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_766100541]),msg_c(alice,bob,sid[!1 = @sid_766100540])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakPsk(phase0,alice,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_766100562]),msg_d(bob,alice,sid[!1 = @sid_766100562]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100563]),msg_c(alice,bob,sid[!1 = @sid_766100563]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100562]),msg_b(bob,alice,sid[!1 = @sid_766100562]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100563]),msg_a(alice,bob,sid[!1 = @sid_766100563]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_766100563]),msg_d(bob,alice,sid[!1 = @sid_766100562])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_766100571]),msg_d(bob,alice,sid[!1 = @sid_766100571]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100572]),msg_c(alice,bob,sid[!1 = @sid_766100572]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100571]),msg_b(bob,alice,sid[!1 = @sid_766100571]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100572]),msg_a(alice,bob,sid[!1 = @sid_766100572]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_766100572]),msg_d(bob,alice,sid[!1 = @sid_766100571])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_766100581]),msg_d(bob,alice,sid[!1 = @sid_766100581]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100582]),msg_c(alice,bob,sid[!1 = @sid_766100582]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100581]),msg_b(bob,alice,sid[!1 = @sid_766100581]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100582]),msg_a(alice,bob,sid[!1 = @sid_766100582]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_766100582]),msg_d(bob,alice,sid[!1 = @sid_766100581])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1200,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_766100591]),msg_d(bob,alice,sid[!1 = @sid_766100591]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100592]),msg_c(alice,bob,sid[!1 = @sid_766100592]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100591]),msg_b(bob,alice,sid[!1 = @sid_766100591]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100592]),msg_a(alice,bob,sid[!1 = @sid_766100592]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_766100592]),msg_d(bob,alice,sid[!1 = @sid_766100591])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_766100600]),msg_d(bob,alice,sid[!1 = @sid_766100600]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100601]),msg_c(alice,bob,sid[!1 = @sid_766100601]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100600]),msg_b(bob,alice,sid[!1 = @sid_766100600]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100601]),msg_a(alice,bob,sid[!1 = @sid_766100601]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_766100601]),msg_d(bob,alice,sid[!1 = @sid_766100600])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_766100619]),msg_d(bob,alice,sid[!1 = @sid_766100619]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_766100620]),msg_c(alice,bob,sid[!1 = @sid_766100620]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_766100619]),msg_b(bob,alice,sid[!1 = @sid_766100619]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_766100620]),msg_a(alice,bob,sid[!1 = @sid_766100620]))) -> end(RecvEnd(true))
Abbreviations:
sid_766100856 = sid[!1 = @sid_766100845]
sid_766100857 = sid[!1 = @sid_766100800]

1. The entry statestore(alice,bob,sid_766100856,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {18}.
table(statestore(alice,bob,sid_766100856,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_766100856,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {55}.
The event SendMsg(alice,bob,stagepack_a(sid_766100856),msg_a(alice,bob,sid_766100856)) may be executed at {52}.
So the entry statestore(alice,bob,sid_766100856,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {53}.
table(statestore(alice,bob,sid_766100856,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_766100857,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {323}.
table(statestore(bob,alice,sid_766100857,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_766100856,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {55}.
The event SendMsg(alice,bob,stagepack_a(sid_766100856),msg_a(alice,bob,sid_766100856)) may be executed at {52}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))) may be sent on channel pub at output {54}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856)))).

5. The entry statestore(bob,alice,sid_766100857,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {359}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))) that may be sent on channel pub by 4 may be received at input {324}.
We have validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_766100857,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {358}.
table(statestore(bob,alice,sid_766100857,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_766100857,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {410}.
The event SendMsg(bob,alice,stagepack_b(sid_766100857),msg_b(bob,alice,sid_766100857)) may be executed at {407}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))) may be sent on channel pub at output {409}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857)))).

7. The entry statestore(alice,bob,sid_766100856,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {105}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))) that may be sent on channel pub by 6 may be received at input {56}.
So the entry statestore(alice,bob,sid_766100856,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce))) may be inserted in a table at insert {104}.
table(statestore(alice,bob,sid_766100856,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_766100856,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce))) that may be in a table by 7 may be read at get {125}.
The event SendMsg(alice,bob,stagepack_c(sid_766100856),msg_c(alice,bob,sid_766100856)) may be executed at {122}.
So the entry statestore(alice,bob,sid_766100856,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce))) may be inserted in a table at insert {123}.
table(statestore(alice,bob,sid_766100856,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_766100857,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {410}.
The event SendMsg(bob,alice,stagepack_b(sid_766100857),msg_b(bob,alice,sid_766100857)) may be executed at {407}.
So the entry statestore(bob,alice,sid_766100857,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_e(bob,alice,sid_766100857)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce))) may be inserted in a table at insert {408}.
table(statestore(bob,alice,sid_766100857,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_e(bob,alice,sid_766100857)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_766100856,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce))) that may be in a table by 7 may be read at get {125}.
The event SendMsg(alice,bob,stagepack_c(sid_766100856),msg_c(alice,bob,sid_766100856)) may be executed at {122}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856))) may be sent on channel pub at output {124}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856)))).

11. The entry statestore(bob,alice,sid_766100857,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_e(bob,alice,sid_766100857)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce))) that may be in a table by 9 may be read at get {431}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856))) that may be sent on channel pub by 10 may be received at input {413}.
So the entry statestore(bob,alice,sid_766100857,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_e(bob,alice,sid_766100857)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce))) may be inserted in a table at insert {430}.
table(statestore(bob,alice,sid_766100857,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_e(bob,alice,sid_766100857)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_766100857,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_e(bob,alice,sid_766100857)),validkey(dhexp_real(key_s(alice),g)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce))) that may be in a table by 11 may be read at get {450}.
The event SendMsg(bob,alice,stagepack_d(sid_766100857),msg_d(bob,alice,sid_766100857)) may be executed at {448}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856))),msg_d(bob,alice,sid_766100857))) may be sent on channel pub at output {449}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856))),msg_d(bob,alice,sid_766100857)))).

13. The entry statestore(alice,bob,sid_766100856,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_766100856),g)),key_e(alice,bob,sid_766100856)),empty,validkey(dhexp_real(key_e(bob,alice,sid_766100857),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce))) that may be in a table by 8 may be read at get {146}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_s(alice),dhexp_real(key_e(bob,alice,sid_766100857),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_e(alice,bob,sid_766100856),g))),dhexp_real(key_e(bob,alice,sid_766100857),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_766100856),g))),msg_a(alice,bob,sid_766100856))),validkey(dhexp_real(key_e(bob,alice,sid_766100857),g))),msg_b(bob,alice,sid_766100857))),msg_c(alice,bob,sid_766100856))),msg_d(bob,alice,sid_766100857))) that may be sent on channel pub by 12 may be received at input {128}.
So event RecvEnd(true) may be executed at {145}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
