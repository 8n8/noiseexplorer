File "K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.active.pv", line 250, character 36:
Warning: identifier h rebound.
File "K.noise.active.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 294, character 6:
Warning: identifier e rebound.
File "K.noise.active.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "K.noise.active.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.active.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 310, characters 6-7:
Warning: identifier re rebound.
File "K.noise.active.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 315, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 317, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 385, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 294, character 6:
Warning: identifier e rebound.
File "K.noise.active.pv", line 295, characters 6-7:
Warning: identifier ne rebound.
File "K.noise.active.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K.noise.active.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.active.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 413, characters 8-9:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 310, characters 6-7:
Warning: identifier re rebound.
File "K.noise.active.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 315, characters 7-8:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 317, characters 7-8:
Warning: identifier hs rebound.
File "K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K.noise.active.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "K.noise.active.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let v_330: key = catch-fail(dhexp(key_s(me),g)) in
    {6}let s_331: keypair = (if not-caught-fail(v_330) then keypairpack(v_330,key_s(me)) else fail-any) in
    {7}out(pub, getpublickey(s_331));
    (
        {8}let e_332: keypair = keypairpack(empty,empty) in
        {9}let v_333: key = catch-fail(dhexp(key_s(them),g)) in
        {10}let rs_334: key = getpublickey((if not-caught-fail(v_333) then keypairpack(v_333,key_s(them)) else fail-any)) in
        {11}let re_335: key = empty in
        {12}let v_336: bitstring = catch-fail(hash(somename,empty)) in
        {13}let v_337: key = catch-fail(v_336) in
        {14}let v_338: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {15}let v_339: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_336) then (if not-caught-fail(v_337) then (if not-caught-fail(v_338) then symmetricstatepack(v_338,v_337,v_336) else fail-any) else fail-any) else fail-any))) in
        {16}let v_340: symmetricstate = catch-fail((if success?((if not-caught-fail(v_336) then (if not-caught-fail(v_337) then (if not-caught-fail(v_338) then symmetricstatepack(v_338,v_337,v_336) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_339) && success?(is-true(success?(1-proj-3-tuple(v_339))))) then symmetricstatepack(1-proj-3-tuple(v_339),2-proj-3-tuple(v_339),hash(3-proj-3-tuple(v_339),empty)) else fail-any) else fail-any)) in
        {17}let v_341: bitstring = catch-fail(symmetricstateunpack(v_340)) in
        {18}let v_342: symmetricstate = catch-fail((if success?(getpublickey(s_331)) then (if (not-caught-fail(v_341) && success?(is-true(success?(1-proj-3-tuple(v_341))))) then symmetricstatepack(1-proj-3-tuple(v_341),2-proj-3-tuple(v_341),hash(3-proj-3-tuple(v_341),getpublickey(s_331))) else fail-any) else fail-any)) in
        {19}let v_343: bitstring = catch-fail(symmetricstateunpack(v_342)) in
        {20}let v_344: symmetricstate = catch-fail((if (not-caught-fail(v_343) && success?(is-true(success?(1-proj-3-tuple(v_343))))) then symmetricstatepack(1-proj-3-tuple(v_343),2-proj-3-tuple(v_343),hash(3-proj-3-tuple(v_343),rs_334)) else fail-any)) in
        {21}let hs: handshakestate = (if not-caught-fail(v_340) then (if not-caught-fail(v_342) then (if not-caught-fail(v_344) then handshakestatepack(v_344,s_331,e_332,rs_334,re_335,empty,true) else fail-any) else fail-any) else fail-any) in
        {22}insert statestore(me,them,statepack_a(hs))
    ) | (
        {68}get statestore(=me,=them,statepack_a(hs_345: handshakestate)) in
        {23}let v_346: bitstring = catch-fail(handshakestateunpack(hs_345)) in
        {24}let v_347: bitstring = catch-fail((empty,empty,empty)) in
        {25}new key_e[me,them]: key;
        {26}let v_348: key = catch-fail(dhexp(key_e,g)) in
        {27}let v_349: keypair = catch-fail((if not-caught-fail(v_348) then keypairpack(v_348,key_e) else fail-any)) in
        {28}let v_350: bitstring = catch-fail(getpublickey(v_349)) in
        {29}let v_351: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_346))) in
        {30}let v_352: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_346)) then (if (not-caught-fail(v_351) && success?(is-true(success?(1-proj-3-tuple(v_351))))) then symmetricstatepack(1-proj-3-tuple(v_351),2-proj-3-tuple(v_351),hash(3-proj-3-tuple(v_351),v_350)) else fail-any) else fail-any)) in
        {31}let v_353: bitstring = catch-fail(keypairunpack(v_349)) in
        {32}let v_354: bitstring = catch-fail(symmetricstateunpack(v_352)) in
        {33}let v_355: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_354),(if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {34}let v_356: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_354),(if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {35}let v_357: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_354),(if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {36}let v_358: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_354))) then (if not-caught-fail(v_355) then (if not-caught-fail(v_356) then (if not-caught-fail(v_357) then (v_355,v_356,v_357) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {37}let v_359: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_346)) then (if (not-caught-fail(v_353) && success?(is-true(success?(1-proj-2-tuple(v_353))))) then dhexp(2-proj-2-tuple(v_353),4-proj-7-tuple(v_346)) else fail-any) else fail-any)) then (if (not-caught-fail(v_354) && success?(is-true(success?(1-proj-3-tuple(v_354))))) then (if (not-caught-fail(v_358) && success?(is-true(success?(1-proj-3-tuple(v_358))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_358)) then cipherstatepack(2-proj-3-tuple(v_358),minnonce) else fail-any),1-proj-3-tuple(v_358),3-proj-3-tuple(v_354)) else fail-any) else fail-any) else fail-any)) in
        {38}let v_360: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_346))) in
        {39}let v_361: bitstring = catch-fail(symmetricstateunpack(v_359)) in
        {40}let v_362: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_361),(if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {41}let v_363: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_361),(if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {42}let v_364: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_361),(if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any))) in
        {43}let v_365: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_361))) then (if not-caught-fail(v_362) then (if not-caught-fail(v_363) then (if not-caught-fail(v_364) then (v_362,v_363,v_364) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {44}let v_366: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_346)) && success?(2-proj-7-tuple(v_346))) then (if (not-caught-fail(v_360) && success?(is-true(success?(1-proj-2-tuple(v_360))))) then dhexp(2-proj-2-tuple(v_360),4-proj-7-tuple(v_346)) else fail-any) else fail-any)) then (if (not-caught-fail(v_361) && success?(is-true(success?(1-proj-3-tuple(v_361))))) then (if (not-caught-fail(v_365) && success?(is-true(success?(1-proj-3-tuple(v_365))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_365)) then cipherstatepack(2-proj-3-tuple(v_365),minnonce) else fail-any),1-proj-3-tuple(v_365),3-proj-3-tuple(v_361)) else fail-any) else fail-any) else fail-any)) in
        {45}let v_367: bitstring = catch-fail(symmetricstateunpack(v_366)) in
        {46}let v_368: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_367))) in
        {47}let v_369: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_368),2-proj-2-tuple(v_368),3-proj-3-tuple(v_367),msg_a(me,them))) in
        {48}let v_370: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_367))) in
        {49}let v_371: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_368))) && success?(1-proj-3-tuple(v_367))) then (if (not-caught-fail(v_370) && success?(is-true(success?(1-proj-2-tuple(v_370))))) then cipherstatepack(1-proj-2-tuple(v_370),increment_nonce(2-proj-2-tuple(v_368))) else fail-any) else fail-any)) in
        {50}let v_372: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_367)) && success?(1-proj-3-tuple(v_367))) then (if (not-caught-fail(v_368) && success?(is-true(success?(1-proj-2-tuple(v_368))))) then (if not-caught-fail(v_369) then (if not-caught-fail(v_371) then (v_371,v_369) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {51}let v_373: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_372),2-proj-3-tuple(v_367),3-proj-3-tuple(v_367)))) in
        {52}let v_374: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_372)) && success?(symmetricstatepack(1-proj-2-tuple(v_372),2-proj-3-tuple(v_367),3-proj-3-tuple(v_367)))) then (if (not-caught-fail(v_373) && success?(is-true(success?(1-proj-3-tuple(v_373))))) then symmetricstatepack(1-proj-3-tuple(v_373),2-proj-3-tuple(v_373),hash(3-proj-3-tuple(v_373),2-proj-2-tuple(v_372))) else fail-any) else fail-any)) in
        {53}let v_375: bitstring = catch-fail((if (not-caught-fail(v_367) && success?(is-true(success?(1-proj-3-tuple(v_367))))) then (if (not-caught-fail(v_372) && success?(is-true(success?(1-proj-2-tuple(v_372))))) then (if not-caught-fail(v_374) then (v_374,2-proj-2-tuple(v_372)) else fail-any) else fail-any) else fail-any)) in
        {54}let v_376: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_375),2-proj-7-tuple(v_346),v_349,4-proj-7-tuple(v_346),5-proj-7-tuple(v_346),6-proj-7-tuple(v_346),7-proj-7-tuple(v_346))) in
        {55}let v_377: bitstring = catch-fail(concat3(v_350,2-proj-3-tuple(v_347),2-proj-2-tuple(v_375))) in
        {56}let v_378: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_375))) in
        {57}let v_379: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_378),zero)) in
        {58}let v_380: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_378),zero)) in
        {59}let v_381: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_378),zero)) in
        {60}let v_382: bitstring = catch-fail((if success?(2-proj-3-tuple(v_378)) then (if not-caught-fail(v_379) then (if not-caught-fail(v_380) then (if not-caught-fail(v_381) then (v_379,v_380,v_381) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_383: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_382)) then cipherstatepack(1-proj-3-tuple(v_382),minnonce) else fail-any)) in
        {62}let v_384: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_382)) then cipherstatepack(2-proj-3-tuple(v_382),minnonce) else fail-any)) in
        {63}let v_385: bitstring = catch-fail((if success?(1-proj-2-tuple(v_375)) then (if (not-caught-fail(v_378) && success?(is-true(success?(1-proj-3-tuple(v_378))))) then (if (not-caught-fail(v_382) && success?(is-true(success?(1-proj-3-tuple(v_382))))) then (if not-caught-fail(v_383) then (if not-caught-fail(v_384) then (1-proj-2-tuple(v_375),v_383,v_384) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {64}let (hs_386: handshakestate,re_387: key,message_a: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_346) && success?(is-true(success?(1-proj-7-tuple(v_346))))) then (if (not-caught-fail(v_347) && success?(is-true(success?(1-proj-3-tuple(v_347))))) then (if not-caught-fail(v_349) then (if not-caught-fail(v_350) then (if not-caught-fail(v_352) then (if not-caught-fail(v_359) then (if not-caught-fail(v_366) then (if (not-caught-fail(v_375) && success?(is-true(success?(1-proj-2-tuple(v_375))))) then (if not-caught-fail(v_376) then (if not-caught-fail(v_377) then (if (not-caught-fail(v_385) && success?(is-true(success?(1-proj-3-tuple(v_385))))) then (v_376,5-proj-7-tuple(v_346),v_377,2-proj-3-tuple(v_385),3-proj-3-tuple(v_385)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {65}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {66}insert statestore(me,them,statepack_b(hs_386));
        {67}out(pub, message_a)
    ) | (
        {69}event LeakS(phase0,me);
        {70}out(pub, key_s(me))
    ) | (
        {71}phase 1;
        {72}event LeakS(phase1,me);
        {73}out(pub, key_s(me))
    )
) | (
    {74}let them_388: principal = charlie in
    {75}let me_389: principal = alice in
    {76}let v_390: key = catch-fail(dhexp(key_s(me_389),g)) in
    {77}let s_391: keypair = (if not-caught-fail(v_390) then keypairpack(v_390,key_s(me_389)) else fail-any) in
    {78}out(pub, getpublickey(s_391));
    (
        {79}let e_392: keypair = keypairpack(empty,empty) in
        {80}let v_393: key = catch-fail(dhexp(key_s(them_388),g)) in
        {81}let rs_394: key = getpublickey((if not-caught-fail(v_393) then keypairpack(v_393,key_s(them_388)) else fail-any)) in
        {82}let re_395: key = empty in
        {83}let v_396: bitstring = catch-fail(hash(somename,empty)) in
        {84}let v_397: key = catch-fail(v_396) in
        {85}let v_398: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {86}let v_399: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_396) then (if not-caught-fail(v_397) then (if not-caught-fail(v_398) then symmetricstatepack(v_398,v_397,v_396) else fail-any) else fail-any) else fail-any))) in
        {87}let v_400: symmetricstate = catch-fail((if success?((if not-caught-fail(v_396) then (if not-caught-fail(v_397) then (if not-caught-fail(v_398) then symmetricstatepack(v_398,v_397,v_396) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_399) && success?(is-true(success?(1-proj-3-tuple(v_399))))) then symmetricstatepack(1-proj-3-tuple(v_399),2-proj-3-tuple(v_399),hash(3-proj-3-tuple(v_399),empty)) else fail-any) else fail-any)) in
        {88}let v_401: bitstring = catch-fail(symmetricstateunpack(v_400)) in
        {89}let v_402: symmetricstate = catch-fail((if success?(getpublickey(s_391)) then (if (not-caught-fail(v_401) && success?(is-true(success?(1-proj-3-tuple(v_401))))) then symmetricstatepack(1-proj-3-tuple(v_401),2-proj-3-tuple(v_401),hash(3-proj-3-tuple(v_401),getpublickey(s_391))) else fail-any) else fail-any)) in
        {90}let v_403: bitstring = catch-fail(symmetricstateunpack(v_402)) in
        {91}let v_404: symmetricstate = catch-fail((if (not-caught-fail(v_403) && success?(is-true(success?(1-proj-3-tuple(v_403))))) then symmetricstatepack(1-proj-3-tuple(v_403),2-proj-3-tuple(v_403),hash(3-proj-3-tuple(v_403),rs_394)) else fail-any)) in
        {92}let hs_405: handshakestate = (if not-caught-fail(v_400) then (if not-caught-fail(v_402) then (if not-caught-fail(v_404) then handshakestatepack(v_404,s_391,e_392,rs_394,re_395,empty,true) else fail-any) else fail-any) else fail-any) in
        {93}insert statestore(me_389,them_388,statepack_a(hs_405))
    ) | (
        {139}get statestore(=me_389,=them_388,statepack_a(hs_406: handshakestate)) in
        {94}let v_407: bitstring = catch-fail(handshakestateunpack(hs_406)) in
        {95}let v_408: bitstring = catch-fail((empty,empty,empty)) in
        {96}new key_e_409[me_389,them_388]: key;
        {97}let v_410: key = catch-fail(dhexp(key_e_409,g)) in
        {98}let v_411: keypair = catch-fail((if not-caught-fail(v_410) then keypairpack(v_410,key_e_409) else fail-any)) in
        {99}let v_412: bitstring = catch-fail(getpublickey(v_411)) in
        {100}let v_413: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_407))) in
        {101}let v_414: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_407)) then (if (not-caught-fail(v_413) && success?(is-true(success?(1-proj-3-tuple(v_413))))) then symmetricstatepack(1-proj-3-tuple(v_413),2-proj-3-tuple(v_413),hash(3-proj-3-tuple(v_413),v_412)) else fail-any) else fail-any)) in
        {102}let v_415: bitstring = catch-fail(keypairunpack(v_411)) in
        {103}let v_416: bitstring = catch-fail(symmetricstateunpack(v_414)) in
        {104}let v_417: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_416),(if success?(4-proj-7-tuple(v_407)) then (if (not-caught-fail(v_415) && success?(is-true(success?(1-proj-2-tuple(v_415))))) then dhexp(2-proj-2-tuple(v_415),4-proj-7-tuple(v_407)) else fail-any) else fail-any))) in
        {105}let v_418: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_416),(if success?(4-proj-7-tuple(v_407)) then (if (not-caught-fail(v_415) && success?(is-true(success?(1-proj-2-tuple(v_415))))) then dhexp(2-proj-2-tuple(v_415),4-proj-7-tuple(v_407)) else fail-any) else fail-any))) in
        {106}let v_419: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_416),(if success?(4-proj-7-tuple(v_407)) then (if (not-caught-fail(v_415) && success?(is-true(success?(1-proj-2-tuple(v_415))))) then dhexp(2-proj-2-tuple(v_415),4-proj-7-tuple(v_407)) else fail-any) else fail-any))) in
        {107}let v_420: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_407)) then (if (not-caught-fail(v_415) && success?(is-true(success?(1-proj-2-tuple(v_415))))) then dhexp(2-proj-2-tuple(v_415),4-proj-7-tuple(v_407)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_416))) then (if not-caught-fail(v_417) then (if not-caught-fail(v_418) then (if not-caught-fail(v_419) then (v_417,v_418,v_419) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_421: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_407)) then (if (not-caught-fail(v_415) && success?(is-true(success?(1-proj-2-tuple(v_415))))) then dhexp(2-proj-2-tuple(v_415),4-proj-7-tuple(v_407)) else fail-any) else fail-any)) then (if (not-caught-fail(v_416) && success?(is-true(success?(1-proj-3-tuple(v_416))))) then (if (not-caught-fail(v_420) && success?(is-true(success?(1-proj-3-tuple(v_420))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_420)) then cipherstatepack(2-proj-3-tuple(v_420),minnonce) else fail-any),1-proj-3-tuple(v_420),3-proj-3-tuple(v_416)) else fail-any) else fail-any) else fail-any)) in
        {109}let v_422: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_407))) in
        {110}let v_423: bitstring = catch-fail(symmetricstateunpack(v_421)) in
        {111}let v_424: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_423),(if (success?(4-proj-7-tuple(v_407)) && success?(2-proj-7-tuple(v_407))) then (if (not-caught-fail(v_422) && success?(is-true(success?(1-proj-2-tuple(v_422))))) then dhexp(2-proj-2-tuple(v_422),4-proj-7-tuple(v_407)) else fail-any) else fail-any))) in
        {112}let v_425: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_423),(if (success?(4-proj-7-tuple(v_407)) && success?(2-proj-7-tuple(v_407))) then (if (not-caught-fail(v_422) && success?(is-true(success?(1-proj-2-tuple(v_422))))) then dhexp(2-proj-2-tuple(v_422),4-proj-7-tuple(v_407)) else fail-any) else fail-any))) in
        {113}let v_426: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_423),(if (success?(4-proj-7-tuple(v_407)) && success?(2-proj-7-tuple(v_407))) then (if (not-caught-fail(v_422) && success?(is-true(success?(1-proj-2-tuple(v_422))))) then dhexp(2-proj-2-tuple(v_422),4-proj-7-tuple(v_407)) else fail-any) else fail-any))) in
        {114}let v_427: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_407)) && success?(2-proj-7-tuple(v_407))) then (if (not-caught-fail(v_422) && success?(is-true(success?(1-proj-2-tuple(v_422))))) then dhexp(2-proj-2-tuple(v_422),4-proj-7-tuple(v_407)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_423))) then (if not-caught-fail(v_424) then (if not-caught-fail(v_425) then (if not-caught-fail(v_426) then (v_424,v_425,v_426) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_428: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_407)) && success?(2-proj-7-tuple(v_407))) then (if (not-caught-fail(v_422) && success?(is-true(success?(1-proj-2-tuple(v_422))))) then dhexp(2-proj-2-tuple(v_422),4-proj-7-tuple(v_407)) else fail-any) else fail-any)) then (if (not-caught-fail(v_423) && success?(is-true(success?(1-proj-3-tuple(v_423))))) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-3-tuple(v_427))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_427)) then cipherstatepack(2-proj-3-tuple(v_427),minnonce) else fail-any),1-proj-3-tuple(v_427),3-proj-3-tuple(v_423)) else fail-any) else fail-any) else fail-any)) in
        {116}let v_429: bitstring = catch-fail(symmetricstateunpack(v_428)) in
        {117}let v_430: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_429))) in
        {118}let v_431: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_430),2-proj-2-tuple(v_430),3-proj-3-tuple(v_429),msg_a(me_389,them_388))) in
        {119}let v_432: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_429))) in
        {120}let v_433: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_430))) && success?(1-proj-3-tuple(v_429))) then (if (not-caught-fail(v_432) && success?(is-true(success?(1-proj-2-tuple(v_432))))) then cipherstatepack(1-proj-2-tuple(v_432),increment_nonce(2-proj-2-tuple(v_430))) else fail-any) else fail-any)) in
        {121}let v_434: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_429)) && success?(1-proj-3-tuple(v_429))) then (if (not-caught-fail(v_430) && success?(is-true(success?(1-proj-2-tuple(v_430))))) then (if not-caught-fail(v_431) then (if not-caught-fail(v_433) then (v_433,v_431) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_435: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_434),2-proj-3-tuple(v_429),3-proj-3-tuple(v_429)))) in
        {123}let v_436: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_434)) && success?(symmetricstatepack(1-proj-2-tuple(v_434),2-proj-3-tuple(v_429),3-proj-3-tuple(v_429)))) then (if (not-caught-fail(v_435) && success?(is-true(success?(1-proj-3-tuple(v_435))))) then symmetricstatepack(1-proj-3-tuple(v_435),2-proj-3-tuple(v_435),hash(3-proj-3-tuple(v_435),2-proj-2-tuple(v_434))) else fail-any) else fail-any)) in
        {124}let v_437: bitstring = catch-fail((if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-3-tuple(v_429))))) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-2-tuple(v_434))))) then (if not-caught-fail(v_436) then (v_436,2-proj-2-tuple(v_434)) else fail-any) else fail-any) else fail-any)) in
        {125}let v_438: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_437),2-proj-7-tuple(v_407),v_411,4-proj-7-tuple(v_407),5-proj-7-tuple(v_407),6-proj-7-tuple(v_407),7-proj-7-tuple(v_407))) in
        {126}let v_439: bitstring = catch-fail(concat3(v_412,2-proj-3-tuple(v_408),2-proj-2-tuple(v_437))) in
        {127}let v_440: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_437))) in
        {128}let v_441: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_440),zero)) in
        {129}let v_442: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_440),zero)) in
        {130}let v_443: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_440),zero)) in
        {131}let v_444: bitstring = catch-fail((if success?(2-proj-3-tuple(v_440)) then (if not-caught-fail(v_441) then (if not-caught-fail(v_442) then (if not-caught-fail(v_443) then (v_441,v_442,v_443) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_445: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_444)) then cipherstatepack(1-proj-3-tuple(v_444),minnonce) else fail-any)) in
        {133}let v_446: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_444)) then cipherstatepack(2-proj-3-tuple(v_444),minnonce) else fail-any)) in
        {134}let v_447: bitstring = catch-fail((if success?(1-proj-2-tuple(v_437)) then (if (not-caught-fail(v_440) && success?(is-true(success?(1-proj-3-tuple(v_440))))) then (if (not-caught-fail(v_444) && success?(is-true(success?(1-proj-3-tuple(v_444))))) then (if not-caught-fail(v_445) then (if not-caught-fail(v_446) then (1-proj-2-tuple(v_437),v_445,v_446) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let (hs_448: handshakestate,re_449: key,message_a_450: bitstring,cs1_451: cipherstate,cs2_452: cipherstate) = (if (not-caught-fail(v_407) && success?(is-true(success?(1-proj-7-tuple(v_407))))) then (if (not-caught-fail(v_408) && success?(is-true(success?(1-proj-3-tuple(v_408))))) then (if not-caught-fail(v_411) then (if not-caught-fail(v_412) then (if not-caught-fail(v_414) then (if not-caught-fail(v_421) then (if not-caught-fail(v_428) then (if (not-caught-fail(v_437) && success?(is-true(success?(1-proj-2-tuple(v_437))))) then (if not-caught-fail(v_438) then (if not-caught-fail(v_439) then (if (not-caught-fail(v_447) && success?(is-true(success?(1-proj-3-tuple(v_447))))) then (v_438,5-proj-7-tuple(v_407),v_439,2-proj-3-tuple(v_447),3-proj-3-tuple(v_447)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {136}event SendMsg(me_389,them_388,stage_a,msg_a(me_389,them_388),true);
        {137}insert statestore(me_389,them_388,statepack_b(hs_448));
        {138}out(pub, message_a_450)
    ) | (
        {140}event LeakS(phase0,me_389);
        {141}out(pub, key_s(me_389))
    ) | (
        {142}phase 1;
        {143}event LeakS(phase1,me_389);
        {144}out(pub, key_s(me_389))
    )
) | (
    {145}let v_453: key = catch-fail(dhexp(key_s(bob),g)) in
    {146}let s_454: keypair = (if not-caught-fail(v_453) then keypairpack(v_453,key_s(bob)) else fail-any) in
    {147}out(pub, getpublickey(s_454));
    (
        {148}let e_455: keypair = keypairpack(empty,empty) in
        {149}let v_456: key = catch-fail(dhexp(key_s(alice),g)) in
        {150}let rs_457: key = getpublickey((if not-caught-fail(v_456) then keypairpack(v_456,key_s(alice)) else fail-any)) in
        {151}let re_458: key = empty in
        {152}let v_459: bitstring = catch-fail(hash(somename,empty)) in
        {153}let v_460: key = catch-fail(v_459) in
        {154}let v_461: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {155}let v_462: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_459) then (if not-caught-fail(v_460) then (if not-caught-fail(v_461) then symmetricstatepack(v_461,v_460,v_459) else fail-any) else fail-any) else fail-any))) in
        {156}let v_463: symmetricstate = catch-fail((if success?((if not-caught-fail(v_459) then (if not-caught-fail(v_460) then (if not-caught-fail(v_461) then symmetricstatepack(v_461,v_460,v_459) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-3-tuple(v_462))))) then symmetricstatepack(1-proj-3-tuple(v_462),2-proj-3-tuple(v_462),hash(3-proj-3-tuple(v_462),empty)) else fail-any) else fail-any)) in
        {157}let v_464: bitstring = catch-fail(symmetricstateunpack(v_463)) in
        {158}let v_465: symmetricstate = catch-fail((if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-3-tuple(v_464))))) then symmetricstatepack(1-proj-3-tuple(v_464),2-proj-3-tuple(v_464),hash(3-proj-3-tuple(v_464),rs_457)) else fail-any)) in
        {159}let v_466: bitstring = catch-fail(symmetricstateunpack(v_465)) in
        {160}let v_467: symmetricstate = catch-fail((if success?(getpublickey(s_454)) then (if (not-caught-fail(v_466) && success?(is-true(success?(1-proj-3-tuple(v_466))))) then symmetricstatepack(1-proj-3-tuple(v_466),2-proj-3-tuple(v_466),hash(3-proj-3-tuple(v_466),getpublickey(s_454))) else fail-any) else fail-any)) in
        {161}let hs_468: handshakestate = (if not-caught-fail(v_463) then (if not-caught-fail(v_465) then (if not-caught-fail(v_467) then handshakestatepack(v_467,s_454,e_455,rs_457,re_458,empty,false) else fail-any) else fail-any) else fail-any) in
        {162}insert statestore(bob,alice,statepack_a(hs_468))
    ) | (
        {207}get statestore(=bob,=alice,statepack_a(hs_469: handshakestate)) in
        {163}in(pub, message_a_470: bitstring);
        {164}let v_471: bitstring = catch-fail(handshakestateunpack(hs_469)) in
        {165}let v_472: bitstring = catch-fail(deconcat3(message_a_470)) in
        {166}let v_473: bool = catch-fail(true) in
        {167}let v_474: key = catch-fail(1-proj-3-tuple(v_472)) in
        {168}let v_475: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_471))) in
        {169}let v_476: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_471)) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then symmetricstatepack(1-proj-3-tuple(v_475),2-proj-3-tuple(v_475),hash(3-proj-3-tuple(v_475),v_474)) else fail-any) else fail-any)) in
        {170}let v_477: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_471))) in
        {171}let v_478: bitstring = catch-fail(symmetricstateunpack(v_476)) in
        {172}let v_479: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_478),(if success?(2-proj-7-tuple(v_471)) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-2-tuple(v_477))))) then dhexp(2-proj-2-tuple(v_477),v_474) else fail-any) else fail-any))) in
        {173}let v_480: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_478),(if success?(2-proj-7-tuple(v_471)) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-2-tuple(v_477))))) then dhexp(2-proj-2-tuple(v_477),v_474) else fail-any) else fail-any))) in
        {174}let v_481: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_478),(if success?(2-proj-7-tuple(v_471)) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-2-tuple(v_477))))) then dhexp(2-proj-2-tuple(v_477),v_474) else fail-any) else fail-any))) in
        {175}let v_482: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_471)) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-2-tuple(v_477))))) then dhexp(2-proj-2-tuple(v_477),v_474) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_478))) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then (if not-caught-fail(v_481) then (v_479,v_480,v_481) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {176}let v_483: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_471)) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-2-tuple(v_477))))) then dhexp(2-proj-2-tuple(v_477),v_474) else fail-any) else fail-any)) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-3-tuple(v_478))))) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-3-tuple(v_482))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_482)) then cipherstatepack(2-proj-3-tuple(v_482),minnonce) else fail-any),1-proj-3-tuple(v_482),3-proj-3-tuple(v_478)) else fail-any) else fail-any) else fail-any)) in
        {177}let v_484: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_471))) in
        {178}let v_485: bitstring = catch-fail(symmetricstateunpack(v_483)) in
        {179}let v_486: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_485),(if (success?(4-proj-7-tuple(v_471)) && success?(2-proj-7-tuple(v_471))) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-2-tuple(v_484))))) then dhexp(2-proj-2-tuple(v_484),4-proj-7-tuple(v_471)) else fail-any) else fail-any))) in
        {180}let v_487: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_485),(if (success?(4-proj-7-tuple(v_471)) && success?(2-proj-7-tuple(v_471))) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-2-tuple(v_484))))) then dhexp(2-proj-2-tuple(v_484),4-proj-7-tuple(v_471)) else fail-any) else fail-any))) in
        {181}let v_488: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_485),(if (success?(4-proj-7-tuple(v_471)) && success?(2-proj-7-tuple(v_471))) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-2-tuple(v_484))))) then dhexp(2-proj-2-tuple(v_484),4-proj-7-tuple(v_471)) else fail-any) else fail-any))) in
        {182}let v_489: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_471)) && success?(2-proj-7-tuple(v_471))) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-2-tuple(v_484))))) then dhexp(2-proj-2-tuple(v_484),4-proj-7-tuple(v_471)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_485))) then (if not-caught-fail(v_486) then (if not-caught-fail(v_487) then (if not-caught-fail(v_488) then (v_486,v_487,v_488) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {183}let v_490: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_471)) && success?(2-proj-7-tuple(v_471))) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-2-tuple(v_484))))) then dhexp(2-proj-2-tuple(v_484),4-proj-7-tuple(v_471)) else fail-any) else fail-any)) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then (if (not-caught-fail(v_489) && success?(is-true(success?(1-proj-3-tuple(v_489))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_489)) then cipherstatepack(2-proj-3-tuple(v_489),minnonce) else fail-any),1-proj-3-tuple(v_489),3-proj-3-tuple(v_485)) else fail-any) else fail-any) else fail-any)) in
        {184}let v_491: bitstring = catch-fail(symmetricstateunpack(v_490)) in
        {185}let v_492: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_491))) in
        {186}let v_493: aead = catch-fail(decrypt(1-proj-2-tuple(v_492),2-proj-2-tuple(v_492),3-proj-3-tuple(v_491),3-proj-3-tuple(v_472))) in
        {187}let v_494: bitstring = catch-fail(aeadunpack(v_493)) in
        {188}let v_495: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_491))) in
        {189}let v_496: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_492))) && success?(1-proj-3-tuple(v_491))) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-2-tuple(v_495))))) then cipherstatepack(1-proj-2-tuple(v_495),increment_nonce(2-proj-2-tuple(v_492))) else fail-any) else fail-any)) in
        {190}let v_497: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_472)) && (success?(3-proj-3-tuple(v_491)) && success?(1-proj-3-tuple(v_491)))) then (if (not-caught-fail(v_492) && success?(is-true(success?(1-proj-2-tuple(v_492))))) then (if not-caught-fail(v_493) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-3-tuple(v_494))))) then (if not-caught-fail(v_496) then (v_496,3-proj-3-tuple(v_494),1-proj-3-tuple(v_494)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {191}let v_498: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_497),2-proj-3-tuple(v_491),3-proj-3-tuple(v_491)))) in
        {192}let v_499: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_472)) && success?(symmetricstatepack(1-proj-3-tuple(v_497),2-proj-3-tuple(v_491),3-proj-3-tuple(v_491)))) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-3-tuple(v_498))))) then symmetricstatepack(1-proj-3-tuple(v_498),2-proj-3-tuple(v_498),hash(3-proj-3-tuple(v_498),3-proj-3-tuple(v_472))) else fail-any) else fail-any)) in
        {193}let v_500: bitstring = catch-fail((if success?(3-proj-3-tuple(v_472)) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-3-tuple(v_497))))) then (if not-caught-fail(v_499) then (v_499,2-proj-3-tuple(v_497),3-proj-3-tuple(v_497)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_501: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_500),2-proj-7-tuple(v_471),3-proj-7-tuple(v_471),4-proj-7-tuple(v_471),v_474,6-proj-7-tuple(v_471),7-proj-7-tuple(v_471))) in
        {195}let v_502: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_500))) in
        {196}let v_503: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_502),zero)) in
        {197}let v_504: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_502),zero)) in
        {198}let v_505: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_502),zero)) in
        {199}let v_506: bitstring = catch-fail((if success?(2-proj-3-tuple(v_502)) then (if not-caught-fail(v_503) then (if not-caught-fail(v_504) then (if not-caught-fail(v_505) then (v_503,v_504,v_505) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {200}let v_507: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_506)) then cipherstatepack(1-proj-3-tuple(v_506),minnonce) else fail-any)) in
        {201}let v_508: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_506)) then cipherstatepack(2-proj-3-tuple(v_506),minnonce) else fail-any)) in
        {202}let v_509: bitstring = catch-fail((if success?(1-proj-3-tuple(v_500)) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (if not-caught-fail(v_507) then (if not-caught-fail(v_508) then (1-proj-3-tuple(v_500),v_507,v_508) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {203}let (hs_510: handshakestate,re_511: key,plaintext_a: bitstring,valid: bool,cs1_512: cipherstate,cs2_513: cipherstate) = (if (not-caught-fail(v_471) && success?(is-true(success?(1-proj-7-tuple(v_471))))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-3-tuple(v_472))))) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then (if not-caught-fail(v_476) then (if not-caught-fail(v_483) then (if not-caught-fail(v_490) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then (if (v_473 && 3-proj-3-tuple(v_500)) then (if not-caught-fail(v_501) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-3-tuple(v_509))))) then (v_501,getpublickey(3-proj-7-tuple(v_471)),2-proj-3-tuple(v_500),true,2-proj-3-tuple(v_509),3-proj-3-tuple(v_509)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {204}event RecvMsg(bob,alice,stage_a,plaintext_a,valid);
        {205}insert statestore(bob,alice,statepack_b(hs_510));
        {206}event RecvEnd(valid)
    ) | (
        {208}event LeakS(phase0,bob);
        {209}out(pub, key_s(bob))
    ) | (
        {210}phase 1;
        {211}event LeakS(phase1,bob);
        {212}out(pub, key_s(bob))
    )
) | (
    {213}let v_514: key = catch-fail(dhexp(key_s(bob),g)) in
    {214}let s_515: keypair = (if not-caught-fail(v_514) then keypairpack(v_514,key_s(bob)) else fail-any) in
    {215}out(pub, getpublickey(s_515));
    (
        {216}let e_516: keypair = keypairpack(empty,empty) in
        {217}let v_517: key = catch-fail(dhexp(key_s(charlie),g)) in
        {218}let rs_518: key = getpublickey((if not-caught-fail(v_517) then keypairpack(v_517,key_s(charlie)) else fail-any)) in
        {219}let re_519: key = empty in
        {220}let v_520: bitstring = catch-fail(hash(somename,empty)) in
        {221}let v_521: key = catch-fail(v_520) in
        {222}let v_522: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {223}let v_523: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_520) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then symmetricstatepack(v_522,v_521,v_520) else fail-any) else fail-any) else fail-any))) in
        {224}let v_524: symmetricstate = catch-fail((if success?((if not-caught-fail(v_520) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then symmetricstatepack(v_522,v_521,v_520) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then symmetricstatepack(1-proj-3-tuple(v_523),2-proj-3-tuple(v_523),hash(3-proj-3-tuple(v_523),empty)) else fail-any) else fail-any)) in
        {225}let v_525: bitstring = catch-fail(symmetricstateunpack(v_524)) in
        {226}let v_526: symmetricstate = catch-fail((if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then symmetricstatepack(1-proj-3-tuple(v_525),2-proj-3-tuple(v_525),hash(3-proj-3-tuple(v_525),rs_518)) else fail-any)) in
        {227}let v_527: bitstring = catch-fail(symmetricstateunpack(v_526)) in
        {228}let v_528: symmetricstate = catch-fail((if success?(getpublickey(s_515)) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack(1-proj-3-tuple(v_527),2-proj-3-tuple(v_527),hash(3-proj-3-tuple(v_527),getpublickey(s_515))) else fail-any) else fail-any)) in
        {229}let hs_529: handshakestate = (if not-caught-fail(v_524) then (if not-caught-fail(v_526) then (if not-caught-fail(v_528) then handshakestatepack(v_528,s_515,e_516,rs_518,re_519,empty,false) else fail-any) else fail-any) else fail-any) in
        {230}insert statestore(bob,charlie,statepack_a(hs_529))
    ) | (
        {275}get statestore(=bob,=charlie,statepack_a(hs_530: handshakestate)) in
        {231}in(pub, message_a_531: bitstring);
        {232}let v_532: bitstring = catch-fail(handshakestateunpack(hs_530)) in
        {233}let v_533: bitstring = catch-fail(deconcat3(message_a_531)) in
        {234}let v_534: bool = catch-fail(true) in
        {235}let v_535: key = catch-fail(1-proj-3-tuple(v_533)) in
        {236}let v_536: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_532))) in
        {237}let v_537: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_532)) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then symmetricstatepack(1-proj-3-tuple(v_536),2-proj-3-tuple(v_536),hash(3-proj-3-tuple(v_536),v_535)) else fail-any) else fail-any)) in
        {238}let v_538: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_532))) in
        {239}let v_539: bitstring = catch-fail(symmetricstateunpack(v_537)) in
        {240}let v_540: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_539),(if success?(2-proj-7-tuple(v_532)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_535) else fail-any) else fail-any))) in
        {241}let v_541: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_539),(if success?(2-proj-7-tuple(v_532)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_535) else fail-any) else fail-any))) in
        {242}let v_542: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_539),(if success?(2-proj-7-tuple(v_532)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_535) else fail-any) else fail-any))) in
        {243}let v_543: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_532)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_535) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_539))) then (if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then (v_540,v_541,v_542) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_544: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_532)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_535) else fail-any) else fail-any)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_543)) then cipherstatepack(2-proj-3-tuple(v_543),minnonce) else fail-any),1-proj-3-tuple(v_543),3-proj-3-tuple(v_539)) else fail-any) else fail-any) else fail-any)) in
        {245}let v_545: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_532))) in
        {246}let v_546: bitstring = catch-fail(symmetricstateunpack(v_544)) in
        {247}let v_547: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_546),(if (success?(4-proj-7-tuple(v_532)) && success?(2-proj-7-tuple(v_532))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then dhexp(2-proj-2-tuple(v_545),4-proj-7-tuple(v_532)) else fail-any) else fail-any))) in
        {248}let v_548: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_546),(if (success?(4-proj-7-tuple(v_532)) && success?(2-proj-7-tuple(v_532))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then dhexp(2-proj-2-tuple(v_545),4-proj-7-tuple(v_532)) else fail-any) else fail-any))) in
        {249}let v_549: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_546),(if (success?(4-proj-7-tuple(v_532)) && success?(2-proj-7-tuple(v_532))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then dhexp(2-proj-2-tuple(v_545),4-proj-7-tuple(v_532)) else fail-any) else fail-any))) in
        {250}let v_550: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_532)) && success?(2-proj-7-tuple(v_532))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then dhexp(2-proj-2-tuple(v_545),4-proj-7-tuple(v_532)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_546))) then (if not-caught-fail(v_547) then (if not-caught-fail(v_548) then (if not-caught-fail(v_549) then (v_547,v_548,v_549) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_551: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_532)) && success?(2-proj-7-tuple(v_532))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then dhexp(2-proj-2-tuple(v_545),4-proj-7-tuple(v_532)) else fail-any) else fail-any)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_550)) then cipherstatepack(2-proj-3-tuple(v_550),minnonce) else fail-any),1-proj-3-tuple(v_550),3-proj-3-tuple(v_546)) else fail-any) else fail-any) else fail-any)) in
        {252}let v_552: bitstring = catch-fail(symmetricstateunpack(v_551)) in
        {253}let v_553: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_552))) in
        {254}let v_554: aead = catch-fail(decrypt(1-proj-2-tuple(v_553),2-proj-2-tuple(v_553),3-proj-3-tuple(v_552),3-proj-3-tuple(v_533))) in
        {255}let v_555: bitstring = catch-fail(aeadunpack(v_554)) in
        {256}let v_556: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_552))) in
        {257}let v_557: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_553))) && success?(1-proj-3-tuple(v_552))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then cipherstatepack(1-proj-2-tuple(v_556),increment_nonce(2-proj-2-tuple(v_553))) else fail-any) else fail-any)) in
        {258}let v_558: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_533)) && (success?(3-proj-3-tuple(v_552)) && success?(1-proj-3-tuple(v_552)))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then (if not-caught-fail(v_554) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if not-caught-fail(v_557) then (v_557,3-proj-3-tuple(v_555),1-proj-3-tuple(v_555)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {259}let v_559: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_558),2-proj-3-tuple(v_552),3-proj-3-tuple(v_552)))) in
        {260}let v_560: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_533)) && success?(symmetricstatepack(1-proj-3-tuple(v_558),2-proj-3-tuple(v_552),3-proj-3-tuple(v_552)))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then symmetricstatepack(1-proj-3-tuple(v_559),2-proj-3-tuple(v_559),hash(3-proj-3-tuple(v_559),3-proj-3-tuple(v_533))) else fail-any) else fail-any)) in
        {261}let v_561: bitstring = catch-fail((if success?(3-proj-3-tuple(v_533)) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if not-caught-fail(v_560) then (v_560,2-proj-3-tuple(v_558),3-proj-3-tuple(v_558)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_562: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_561),2-proj-7-tuple(v_532),3-proj-7-tuple(v_532),4-proj-7-tuple(v_532),v_535,6-proj-7-tuple(v_532),7-proj-7-tuple(v_532))) in
        {263}let v_563: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_561))) in
        {264}let v_564: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_563),zero)) in
        {265}let v_565: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_563),zero)) in
        {266}let v_566: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_563),zero)) in
        {267}let v_567: bitstring = catch-fail((if success?(2-proj-3-tuple(v_563)) then (if not-caught-fail(v_564) then (if not-caught-fail(v_565) then (if not-caught-fail(v_566) then (v_564,v_565,v_566) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {268}let v_568: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_567)) then cipherstatepack(1-proj-3-tuple(v_567),minnonce) else fail-any)) in
        {269}let v_569: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_567)) then cipherstatepack(2-proj-3-tuple(v_567),minnonce) else fail-any)) in
        {270}let v_570: bitstring = catch-fail((if success?(1-proj-3-tuple(v_561)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (1-proj-3-tuple(v_561),v_568,v_569) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {271}let (hs_571: handshakestate,re_572: key,plaintext_a_573: bitstring,valid_574: bool,cs1_575: cipherstate,cs2_576: cipherstate) = (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-7-tuple(v_532))))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then (if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_537) then (if not-caught-fail(v_544) then (if not-caught-fail(v_551) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if (v_534 && 3-proj-3-tuple(v_561)) then (if not-caught-fail(v_562) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (v_562,getpublickey(3-proj-7-tuple(v_532)),2-proj-3-tuple(v_561),true,2-proj-3-tuple(v_570),3-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {272}event RecvMsg(bob,charlie,stage_a,plaintext_a_573,valid_574);
        {273}insert statestore(bob,charlie,statepack_b(hs_571));
        {274}event RecvEnd(valid_574)
    ) | (
        {276}event LeakS(phase0,bob);
        {277}out(pub, key_s(bob))
    ) | (
        {278}phase 1;
        {279}event LeakS(phase1,bob);
        {280}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_657,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_657,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 125 rules in the queue.
400 rules inserted. The rule base contains 390 rules. 88 rules in the queue.
600 rules inserted. The rule base contains 582 rules. 55 rules in the queue.
800 rules inserted. The rule base contains 782 rules. 104 rules in the queue.
1000 rules inserted. The rule base contains 960 rules. 194 rules in the queue.
1200 rules inserted. The rule base contains 1084 rules. 198 rules in the queue.
1400 rules inserted. The rule base contains 1204 rules. 176 rules in the queue.
1600 rules inserted. The rule base contains 1227 rules. 135 rules in the queue.
1800 rules inserted. The rule base contains 1240 rules. 103 rules in the queue.
2000 rules inserted. The rule base contains 1296 rules. 51 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_628995590) -> end(RecvMsg(bob,alice,stage_a,m_628995590,true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {162}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_628995650).

3. Using the function g the attacker may obtain g.
attacker(g).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The message dhexp(key_s(bob),g) may be sent on channel pub at output {147}.
mess(pub,dhexp(key_s(bob),g)).

6. By 4, the attacker may have the channel pub.
By 5, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

8. By 4, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 3, the attacker may know g.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g)).

16. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

17. The event LeakS(phase0,bob) may be executed at {208}.
So the message key_s(bob) may be sent on channel pub at output {209}.
mess(pub,key_s(bob)).

18. By 4, the attacker may have the channel pub.
By 17, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

19. By 18, the attacker may know key_s(bob).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)).
attacker(dhexp(key_s(bob),dhexp(key_s(alice),g))).

20. By 11, the attacker may know hash(somename,empty).
By 6, the attacker may know dhexp(key_s(bob),g).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
attacker(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g))).

21. By 20, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
By 19, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

22. By 21, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
By 16, the attacker may know minnonce.
By 15, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g).
By 2, the attacker may know m_628995650.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995650).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995650)).

23. The attacker has some term b_628995636.
attacker(b_628995636).

24. By 3, the attacker may know g.
By 23, the attacker may know b_628995636.
By 22, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995650).
Using the function concat3 the attacker may obtain concat3(g,b_628995636,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995650)).
attacker(concat3(g,b_628995636,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995650))).

25. By 4, the attacker may have the channel pub.
By 24, the attacker may have the message concat3(g,b_628995636,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995650)).
So the attacker may send this message on this channel.
mess(pub,concat3(g,b_628995636,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995650))).

26. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {207}.
The message concat3(g,b_628995636,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995650)) that may be sent on channel pub by 25 may be received at input {163}.
We have g <> caught-fail.
So event RecvMsg(bob,alice,stage_a,m_628995650,true) may be executed at {204}.
end(RecvMsg(bob,alice,stage_a,m_628995650,true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_657,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_628995652) -> end(RecvMsg(bob,alice,stage_a,m_628995652,true))
goal reachable: begin(LeakS(phase0,alice)) && attacker(m_628995654) -> end(RecvMsg(bob,alice,stage_a,m_628995654,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_657,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_657,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_628995661) -> end(RecvMsg(bob,alice,stage_a,m_628995661,true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {162}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_628995722).

3. Using the function g the attacker may obtain g.
attacker(g).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The message dhexp(key_s(bob),g) may be sent on channel pub at output {147}.
mess(pub,dhexp(key_s(bob),g)).

6. By 4, the attacker may have the channel pub.
By 5, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

8. By 4, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 3, the attacker may know g.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g)).

16. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

17. The event LeakS(phase0,bob) may be executed at {208}.
So the message key_s(bob) may be sent on channel pub at output {209}.
mess(pub,key_s(bob)).

18. By 4, the attacker may have the channel pub.
By 17, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

19. By 18, the attacker may know key_s(bob).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)).
attacker(dhexp(key_s(bob),dhexp(key_s(alice),g))).

20. By 11, the attacker may know hash(somename,empty).
By 6, the attacker may know dhexp(key_s(bob),g).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
attacker(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g))).

21. By 20, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
By 19, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

22. By 21, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
By 16, the attacker may know minnonce.
By 15, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g).
By 2, the attacker may know m_628995722.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995722).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995722)).

23. The attacker has some term b_628995708.
attacker(b_628995708).

24. By 3, the attacker may know g.
By 23, the attacker may know b_628995708.
By 22, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995722).
Using the function concat3 the attacker may obtain concat3(g,b_628995708,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995722)).
attacker(concat3(g,b_628995708,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995722))).

25. By 4, the attacker may have the channel pub.
By 24, the attacker may have the message concat3(g,b_628995708,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995722)).
So the attacker may send this message on this channel.
mess(pub,concat3(g,b_628995708,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995722))).

26. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {207}.
The message concat3(g,b_628995708,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995722)) that may be sent on channel pub by 25 may be received at input {163}.
We have g <> caught-fail.
So event RecvMsg(bob,alice,stage_a,m_628995722,true) may be executed at {204}.
end(RecvMsg(bob,alice,stage_a,m_628995722,true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_657,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_628995724) -> end(RecvMsg(bob,alice,stage_a,m_628995724,true))
goal reachable: begin(LeakS(phase0,alice)) && attacker(m_628995726) -> end(RecvMsg(bob,alice,stage_a,m_628995726,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(LeakS(phase0,bob)) && attacker(m_628995732) -> end(RecvMsg(bob,alice,stage_a,m_628995732,true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {162}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. We assume as hypothesis that
attacker(m_628995792).

3. Using the function g the attacker may obtain g.
attacker(g).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The message dhexp(key_s(bob),g) may be sent on channel pub at output {147}.
mess(pub,dhexp(key_s(bob),g)).

6. By 4, the attacker may have the channel pub.
By 5, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

8. By 4, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 3, the attacker may know g.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g)).

16. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

17. The event LeakS(phase0,bob) may be executed at {208}.
So the message key_s(bob) may be sent on channel pub at output {209}.
mess(pub,key_s(bob)).

18. By 4, the attacker may have the channel pub.
By 17, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

19. By 18, the attacker may know key_s(bob).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function dhexp the attacker may obtain dhexp(key_s(bob),dhexp(key_s(alice),g)).
attacker(dhexp(key_s(bob),dhexp(key_s(alice),g))).

20. By 11, the attacker may know hash(somename,empty).
By 6, the attacker may know dhexp(key_s(bob),g).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
attacker(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g))).

21. By 20, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)).
By 19, the attacker may know dhexp(key_s(bob),dhexp(key_s(alice),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
attacker(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g)))).

22. By 21, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))).
By 16, the attacker may know minnonce.
By 15, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g).
By 2, the attacker may know m_628995792.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995792).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995792)).

23. The attacker has some term b_628995778.
attacker(b_628995778).

24. By 3, the attacker may know g.
By 23, the attacker may know b_628995778.
By 22, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995792).
Using the function concat3 the attacker may obtain concat3(g,b_628995778,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995792)).
attacker(concat3(g,b_628995778,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995792))).

25. By 4, the attacker may have the channel pub.
By 24, the attacker may have the message concat3(g,b_628995778,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995792)).
So the attacker may send this message on this channel.
mess(pub,concat3(g,b_628995778,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995792))).

26. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {207}.
The message concat3(g,b_628995778,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),g)),dhexp(key_s(bob),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),g),m_628995792)) that may be sent on channel pub by 25 may be received at input {163}.
We have g <> caught-fail.
So event RecvMsg(bob,alice,stage_a,m_628995792,true) may be executed at {204}.
end(RecvMsg(bob,alice,stage_a,m_628995792,true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_628995886 = key_e[me = alice,them = bob,!1 = @sid_628995872]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {65}.
So the message concat3(dhexp(key_628995886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob))) may be sent on channel pub at output {67}.
mess(pub,concat3(dhexp(key_628995886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_628995886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_628995886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_628995886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_628995886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_628995886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_628995886,g).
attacker(dhexp(key_628995886,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {147}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_628995886,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {211}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {212}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_628995886,g).
So the attacker may know dhexp(key_628995886,g) in phase 1.
attacker_p1(dhexp(key_628995886,g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_628995886,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_628995886,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_628995886,dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_628995886,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995886,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995886,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_628995981 = key_e[me = alice,them = bob,!1 = @sid_628995967]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {65}.
So the message concat3(dhexp(key_628995981,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob))) may be sent on channel pub at output {67}.
mess(pub,concat3(dhexp(key_628995981,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_628995981,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_628995981,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_628995981,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_628995981,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_628995981,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_628995981,g).
attacker(dhexp(key_628995981,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {147}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_628995981,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {211}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {212}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_628995981,g).
So the attacker may know dhexp(key_628995981,g) in phase 1.
attacker_p1(dhexp(key_628995981,g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_628995981,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_628995981,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_628995981,dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_628995981,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628995981,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628995981,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_628996075 = key_e[me = alice,them = bob,!1 = @sid_628996061]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {22}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {65}.
So the message concat3(dhexp(key_628996075,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob))) may be sent on channel pub at output {67}.
mess(pub,concat3(dhexp(key_628996075,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_628996075,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_628996075,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_628996075,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_628996075,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_628996075,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_628996075,g).
attacker(dhexp(key_628996075,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {147}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_628996075,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 11, the attacker may know dhexp(key_s(alice),g).
So the attacker may know dhexp(key_s(alice),g) in phase 1.
attacker_p1(dhexp(key_s(alice),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {211}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {212}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_s(alice),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_s(alice),dhexp(key_s(bob),g))).

26. By 7, the attacker may know dhexp(key_628996075,g).
So the attacker may know dhexp(key_628996075,g) in phase 1.
attacker_p1(dhexp(key_628996075,g)).

27. By 24, the attacker may know key_s(bob) in phase 1.
By 26, the attacker may know dhexp(key_628996075,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_628996075,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_628996075,dhexp(key_s(bob),g))).

28. By 14, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

29. By 28, the attacker may know hash(somename,empty) in phase 1.
By 27, the attacker may know dhexp(key_628996075,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g)))).

30. By 29, the attacker may know hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))) in phase 1.
By 25, the attacker may know dhexp(key_s(alice),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_628996075,dhexp(key_s(bob),g))),dhexp(key_s(alice),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_628996075,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
