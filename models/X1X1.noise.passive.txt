File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "X1X1.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "X1X1.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 313, character 6:
Warning: identifier e rebound.
File "X1X1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ne rebound.
File "X1X1.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 318, character 6:
Warning: identifier s rebound.
File "X1X1.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X1.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "X1X1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X1.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 356, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 357, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier re rebound.
File "X1X1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 379, characters 6-7:
Warning: identifier re rebound.
File "X1X1.noise.passive.pv", line 380, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 382, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 383, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X1.noise.passive.pv", line 384, characters 6-7:
Warning: identifier rs rebound.
File "X1X1.noise.passive.pv", line 385, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 387, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 395, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 396, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 396, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X1.noise.passive.pv", line 397, characters 6-7:
Warning: identifier rs rebound.
File "X1X1.noise.passive.pv", line 398, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 400, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 408, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 419, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 421, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 429, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 431, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 629, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 429, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 431, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 621, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 614, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 408, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 606, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "X1X1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X1.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 599, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 379, characters 6-7:
Warning: identifier re rebound.
File "X1X1.noise.passive.pv", line 380, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 382, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 383, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X1.noise.passive.pv", line 384, characters 6-7:
Warning: identifier rs rebound.
File "X1X1.noise.passive.pv", line 385, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 387, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 591, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "X1X1.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "X1X1.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 694, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 356, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 357, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 687, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 419, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 421, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 679, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 672, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 395, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 396, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 396, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X1.noise.passive.pv", line 397, characters 6-7:
Warning: identifier rs rebound.
File "X1X1.noise.passive.pv", line 398, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 400, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 664, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 313, character 6:
Warning: identifier e rebound.
File "X1X1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ne rebound.
File "X1X1.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 318, character 6:
Warning: identifier s rebound.
File "X1X1.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X1.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 657, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier re rebound.
File "X1X1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_585: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_585));
    (
        {4}let e_586: keypair = keypairpack(empty,empty) in
        {5}let rs_587: key = empty in
        {6}let re_588: key = empty in
        {7}let v_589: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_590: key = catch-fail(v_589) in
        {9}let v_591: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_592: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any))) in
        {11}let v_593: symmetricstate = catch-fail((if success?((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_592),hash(3-proj-3-tuple(v_592),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_593) then handshakestatepack(v_593,s_585,e_586,rs_587,re_588,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {36}get statestore(=alice,=bob,statepack_a(hs_594: handshakestate)) in
        {14}let v_595: bitstring = catch-fail(handshakestateunpack(hs_594)) in
        {15}let v_596: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_597: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_598: keypair = catch-fail((if not-caught-fail(v_597) then keypairpack(v_597,key_e(alice,bob)) else fail-any)) in
        {18}let v_599: bitstring = catch-fail(getpublickey(v_598)) in
        {19}let v_600: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_595))) in
        {20}let v_601: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_595)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_600),hash(3-proj-3-tuple(v_600),v_599)) else fail-any) else fail-any)) in
        {21}let v_602: bitstring = catch-fail(symmetricstateunpack(v_601)) in
        {22}let v_603: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_602))) in
        {23}let v_604: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_603),2-proj-2-tuple(v_603),3-proj-3-tuple(v_602),msg_a(alice,bob))) in
        {24}let v_605: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_602))) in
        {25}let v_606: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_603))) && success?(1-proj-3-tuple(v_602))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then cipherstatepack(1-proj-2-tuple(v_605),increment_nonce(2-proj-2-tuple(v_603))) else fail-any) else fail-any)) in
        {26}let v_607: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_602)) && success?(1-proj-3-tuple(v_602))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-2-tuple(v_603))))) then (if not-caught-fail(v_604) then (if not-caught-fail(v_606) then (v_606,v_604) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {27}let v_608: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_607),2-proj-3-tuple(v_602),3-proj-3-tuple(v_602)))) in
        {28}let v_609: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_607)) && success?(symmetricstatepack(1-proj-2-tuple(v_607),2-proj-3-tuple(v_602),3-proj-3-tuple(v_602)))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then symmetricstatepack(1-proj-3-tuple(v_608),2-proj-3-tuple(v_608),hash(3-proj-3-tuple(v_608),2-proj-2-tuple(v_607))) else fail-any) else fail-any)) in
        {29}let v_610: bitstring = catch-fail((if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then (if not-caught-fail(v_609) then (v_609,2-proj-2-tuple(v_607)) else fail-any) else fail-any) else fail-any)) in
        {30}let v_611: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_610),2-proj-7-tuple(v_595),v_598,4-proj-7-tuple(v_595),5-proj-7-tuple(v_595),6-proj-7-tuple(v_595),7-proj-7-tuple(v_595))) in
        {31}let v_612: bitstring = catch-fail(concat3(v_599,2-proj-3-tuple(v_596),2-proj-2-tuple(v_610))) in
        {32}let (hs_613: handshakestate,re_614: key,message_a: bitstring) = (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-7-tuple(v_595))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (if not-caught-fail(v_601) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then (if not-caught-fail(v_611) then (if not-caught-fail(v_612) then (v_611,5-proj-7-tuple(v_595),v_612) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {33}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {34}insert statestore(alice,bob,statepack_b(hs_613));
        {35}out(pub, message_a)
    ) | (
        {77}get statestore(=alice,=bob,statepack_b(hs_615: handshakestate)) in
        {37}in(pub, message_b: bitstring);
        {38}let v_616: bitstring = catch-fail(handshakestateunpack(hs_615)) in
        {39}let v_617: bitstring = catch-fail(deconcat3(message_b)) in
        {40}let v_618: bool = catch-fail(true) in
        {41}let v_619: key = catch-fail(1-proj-3-tuple(v_617)) in
        {42}let v_620: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_616))) in
        {43}let v_621: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_616)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack(1-proj-3-tuple(v_620),2-proj-3-tuple(v_620),hash(3-proj-3-tuple(v_620),v_619)) else fail-any) else fail-any)) in
        {44}let v_622: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_616))) in
        {45}let v_623: bitstring = catch-fail(symmetricstateunpack(v_621)) in
        {46}let v_624: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_623),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any))) in
        {47}let v_625: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_623),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any))) in
        {48}let v_626: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_623),(if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any))) in
        {49}let v_627: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_623))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (v_624,v_625,v_626) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_628: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_616)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then dhexp(2-proj-2-tuple(v_622),v_619) else fail-any) else fail-any)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_627)) then cipherstatepack(2-proj-3-tuple(v_627),minnonce) else fail-any),1-proj-3-tuple(v_627),3-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any)) in
        {51}let v_629: bitstring = catch-fail(symmetricstateunpack(v_628)) in
        {52}let v_630: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_629))) in
        {53}let v_631: aead = catch-fail(decrypt(1-proj-2-tuple(v_630),2-proj-2-tuple(v_630),3-proj-3-tuple(v_629),2-proj-3-tuple(v_617))) in
        {54}let v_632: bitstring = catch-fail(aeadunpack(v_631)) in
        {55}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_629))) in
        {56}let v_634: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_630))) && success?(1-proj-3-tuple(v_629))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then cipherstatepack(1-proj-2-tuple(v_633),increment_nonce(2-proj-2-tuple(v_630))) else fail-any) else fail-any)) in
        {57}let v_635: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_617)) && (success?(3-proj-3-tuple(v_629)) && success?(1-proj-3-tuple(v_629)))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-2-tuple(v_630))))) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_634) then (v_634,3-proj-3-tuple(v_632),1-proj-3-tuple(v_632)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {58}let v_636: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_629),3-proj-3-tuple(v_629)))) in
        {59}let v_637: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_617)) && success?(symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_629),3-proj-3-tuple(v_629)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then symmetricstatepack(1-proj-3-tuple(v_636),2-proj-3-tuple(v_636),hash(3-proj-3-tuple(v_636),2-proj-3-tuple(v_617))) else fail-any) else fail-any)) in
        {60}let v_638: bitstring = catch-fail((if success?(2-proj-3-tuple(v_617)) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_639: key = catch-fail(2-proj-3-tuple(v_638)) in
        {62}let v_640: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_638))) in
        {63}let v_641: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {64}let v_642: aead = catch-fail(decrypt(1-proj-2-tuple(v_641),2-proj-2-tuple(v_641),3-proj-3-tuple(v_640),3-proj-3-tuple(v_617))) in
        {65}let v_643: bitstring = catch-fail(aeadunpack(v_642)) in
        {66}let v_644: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {67}let v_645: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_641))) && success?(1-proj-3-tuple(v_640))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then cipherstatepack(1-proj-2-tuple(v_644),increment_nonce(2-proj-2-tuple(v_641))) else fail-any) else fail-any)) in
        {68}let v_646: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && (success?(3-proj-3-tuple(v_640)) && success?(1-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-2-tuple(v_641))))) then (if not-caught-fail(v_642) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if not-caught-fail(v_645) then (v_645,3-proj-3-tuple(v_643),1-proj-3-tuple(v_643)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {69}let v_647: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) in
        {70}let v_648: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),3-proj-3-tuple(v_617))) else fail-any) else fail-any)) in
        {71}let v_649: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(1-proj-3-tuple(v_638))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if not-caught-fail(v_648) then (v_648,2-proj-3-tuple(v_646),3-proj-3-tuple(v_646)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_650: key = catch-fail(dhexp(key_s(bob),g)) in
        {73}let v_651: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_649),2-proj-7-tuple(v_616),3-proj-7-tuple(v_616),v_639,v_619,6-proj-7-tuple(v_616),7-proj-7-tuple(v_616))) in
        {74}let (hs_652: handshakestate,re_653: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-7-tuple(v_616))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then (if not-caught-fail(v_628) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_639) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if ((3-proj-3-tuple(v_638) && 3-proj-3-tuple(v_649)) && (v_639 = getpublickey((if not-caught-fail(v_650) then keypairpack(v_650,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_651) then (v_651,getpublickey(3-proj-7-tuple(v_616)),2-proj-3-tuple(v_649),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {75}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {76}insert statestore(alice,bob,statepack_c(hs_652))
    ) | (
        {113}get statestore(=alice,=bob,statepack_c(hs_654: handshakestate)) in
        {78}let v_655: bitstring = catch-fail(handshakestateunpack(hs_654)) in
        {79}let v_656: bitstring = catch-fail((empty,empty,empty)) in
        {80}let v_657: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_655))) in
        {81}let v_658: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_655))) in
        {82}let v_659: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_658),(if (success?(4-proj-7-tuple(v_655)) && success?(3-proj-7-tuple(v_655))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then dhexp(2-proj-2-tuple(v_657),4-proj-7-tuple(v_655)) else fail-any) else fail-any))) in
        {83}let v_660: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_658),(if (success?(4-proj-7-tuple(v_655)) && success?(3-proj-7-tuple(v_655))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then dhexp(2-proj-2-tuple(v_657),4-proj-7-tuple(v_655)) else fail-any) else fail-any))) in
        {84}let v_661: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_658),(if (success?(4-proj-7-tuple(v_655)) && success?(3-proj-7-tuple(v_655))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then dhexp(2-proj-2-tuple(v_657),4-proj-7-tuple(v_655)) else fail-any) else fail-any))) in
        {85}let v_662: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_655)) && success?(3-proj-7-tuple(v_655))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then dhexp(2-proj-2-tuple(v_657),4-proj-7-tuple(v_655)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_658))) then (if not-caught-fail(v_659) then (if not-caught-fail(v_660) then (if not-caught-fail(v_661) then (v_659,v_660,v_661) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_663: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_655)) && success?(3-proj-7-tuple(v_655))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then dhexp(2-proj-2-tuple(v_657),4-proj-7-tuple(v_655)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_655))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_662)) then cipherstatepack(2-proj-3-tuple(v_662),minnonce) else fail-any),1-proj-3-tuple(v_662),3-proj-3-tuple(v_658)) else fail-any) else fail-any) else fail-any)) in
        {87}let v_664: key = catch-fail(dhexp(key_s(alice),g)) in
        {88}let v_665: keypair = catch-fail((if not-caught-fail(v_664) then keypairpack(v_664,key_s(alice)) else fail-any)) in
        {89}let v_666: bitstring = catch-fail(symmetricstateunpack(v_663)) in
        {90}let v_667: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_666))) in
        {91}let v_668: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_667),2-proj-2-tuple(v_667),3-proj-3-tuple(v_666),getpublickey(v_665))) in
        {92}let v_669: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_666))) in
        {93}let v_670: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_667))) && success?(1-proj-3-tuple(v_666))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then cipherstatepack(1-proj-2-tuple(v_669),increment_nonce(2-proj-2-tuple(v_667))) else fail-any) else fail-any)) in
        {94}let v_671: bitstring = catch-fail((if (success?(getpublickey(v_665)) && (success?(3-proj-3-tuple(v_666)) && success?(1-proj-3-tuple(v_666)))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-2-tuple(v_667))))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_670) then (v_670,v_668) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_672: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_671),2-proj-3-tuple(v_666),3-proj-3-tuple(v_666)))) in
        {96}let v_673: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_671)) && success?(symmetricstatepack(1-proj-2-tuple(v_671),2-proj-3-tuple(v_666),3-proj-3-tuple(v_666)))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then symmetricstatepack(1-proj-3-tuple(v_672),2-proj-3-tuple(v_672),hash(3-proj-3-tuple(v_672),2-proj-2-tuple(v_671))) else fail-any) else fail-any)) in
        {97}let v_674: bitstring = catch-fail((if success?(getpublickey(v_665)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then (if not-caught-fail(v_673) then (v_673,2-proj-2-tuple(v_671)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_675: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_674))) in
        {99}let v_676: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {100}let v_677: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_676),2-proj-2-tuple(v_676),3-proj-3-tuple(v_675),msg_c(alice,bob))) in
        {101}let v_678: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {102}let v_679: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_676))) && success?(1-proj-3-tuple(v_675))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then cipherstatepack(1-proj-2-tuple(v_678),increment_nonce(2-proj-2-tuple(v_676))) else fail-any) else fail-any)) in
        {103}let v_680: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_675)) && success?(1-proj-3-tuple(v_675))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_679) then (v_679,v_677) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_681: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_680),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) in
        {105}let v_682: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_680)) && success?(symmetricstatepack(1-proj-2-tuple(v_680),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_681),hash(3-proj-3-tuple(v_681),2-proj-2-tuple(v_680))) else fail-any) else fail-any)) in
        {106}let v_683: bitstring = catch-fail((if success?(1-proj-2-tuple(v_674)) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then (if not-caught-fail(v_682) then (v_682,2-proj-2-tuple(v_680)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_684: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_683),v_665,3-proj-7-tuple(v_655),4-proj-7-tuple(v_655),5-proj-7-tuple(v_655),6-proj-7-tuple(v_655),7-proj-7-tuple(v_655))) in
        {108}let v_685: bitstring = catch-fail(concat3(1-proj-3-tuple(v_656),2-proj-2-tuple(v_674),2-proj-2-tuple(v_683))) in
        {109}let (hs_686: handshakestate,re_687: key,message_c: bitstring) = (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-7-tuple(v_655))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if not-caught-fail(v_663) then (if not-caught-fail(v_665) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then (if not-caught-fail(v_684) then (if not-caught-fail(v_685) then (v_684,5-proj-7-tuple(v_655),v_685) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {110}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {111}insert statestore(alice,bob,statepack_d(hs_686));
        {112}out(pub, message_c)
    ) | (
        {139}get statestore(=alice,=bob,statepack_d(hs_688: handshakestate)) in
        {114}in(pub, message_d: bitstring);
        {115}let v_689: bitstring = catch-fail(handshakestateunpack(hs_688)) in
        {116}let v_690: bitstring = catch-fail(deconcat3(message_d)) in
        {117}let v_691: bool = catch-fail(true) in
        {118}let v_692: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_689))) in
        {119}let v_693: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_689))) in
        {120}let v_694: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_693),(if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any))) in
        {121}let v_695: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_693),(if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any))) in
        {122}let v_696: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_693),(if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any))) in
        {123}let v_697: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_693))) then (if not-caught-fail(v_694) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (v_694,v_695,v_696) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_698: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_689)) && success?(2-proj-7-tuple(v_689))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then dhexp(2-proj-2-tuple(v_692),5-proj-7-tuple(v_689)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_689))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_697)) then cipherstatepack(2-proj-3-tuple(v_697),minnonce) else fail-any),1-proj-3-tuple(v_697),3-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any)) in
        {125}let v_699: bitstring = catch-fail(symmetricstateunpack(v_698)) in
        {126}let v_700: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_699))) in
        {127}let v_701: aead = catch-fail(decrypt(1-proj-2-tuple(v_700),2-proj-2-tuple(v_700),3-proj-3-tuple(v_699),3-proj-3-tuple(v_690))) in
        {128}let v_702: bitstring = catch-fail(aeadunpack(v_701)) in
        {129}let v_703: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_699))) in
        {130}let v_704: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_700))) && success?(1-proj-3-tuple(v_699))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then cipherstatepack(1-proj-2-tuple(v_703),increment_nonce(2-proj-2-tuple(v_700))) else fail-any) else fail-any)) in
        {131}let v_705: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_690)) && (success?(3-proj-3-tuple(v_699)) && success?(1-proj-3-tuple(v_699)))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then (if not-caught-fail(v_701) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if not-caught-fail(v_704) then (v_704,3-proj-3-tuple(v_702),1-proj-3-tuple(v_702)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_706: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_705),2-proj-3-tuple(v_699),3-proj-3-tuple(v_699)))) in
        {133}let v_707: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_690)) && success?(symmetricstatepack(1-proj-3-tuple(v_705),2-proj-3-tuple(v_699),3-proj-3-tuple(v_699)))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_706),hash(3-proj-3-tuple(v_706),3-proj-3-tuple(v_690))) else fail-any) else fail-any)) in
        {134}let v_708: bitstring = catch-fail((if success?(3-proj-3-tuple(v_690)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if not-caught-fail(v_707) then (v_707,2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_709: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_708),2-proj-7-tuple(v_689),3-proj-7-tuple(v_689),4-proj-7-tuple(v_689),5-proj-7-tuple(v_689),6-proj-7-tuple(v_689),7-proj-7-tuple(v_689))) in
        {136}let (hs_710: handshakestate,re_711: key,plaintext_d: bitstring,valid_712: bool) = (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-7-tuple(v_689))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_698) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if (v_691 && 3-proj-3-tuple(v_708)) then (if not-caught-fail(v_709) then (v_709,getpublickey(3-proj-7-tuple(v_689)),2-proj-3-tuple(v_708),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {137}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_712);
        {138}insert statestore(alice,bob,statepack_e(hs_710))
    ) | (
        {157}get statestore(=alice,=bob,statepack_e(hs_713: handshakestate)) in
        {140}let v_714: bitstring = catch-fail(handshakestateunpack(hs_713)) in
        {141}let v_715: bitstring = catch-fail((empty,empty,empty)) in
        {142}let v_716: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_714))) in
        {143}let v_717: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_716))) in
        {144}let v_718: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_717),2-proj-2-tuple(v_717),3-proj-3-tuple(v_716),msg_e(alice,bob))) in
        {145}let v_719: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_716))) in
        {146}let v_720: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_717))) && success?(1-proj-3-tuple(v_716))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then cipherstatepack(1-proj-2-tuple(v_719),increment_nonce(2-proj-2-tuple(v_717))) else fail-any) else fail-any)) in
        {147}let v_721: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_716)) && success?(1-proj-3-tuple(v_716))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then (if not-caught-fail(v_718) then (if not-caught-fail(v_720) then (v_720,v_718) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {148}let v_722: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_721),2-proj-3-tuple(v_716),3-proj-3-tuple(v_716)))) in
        {149}let v_723: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_721)) && success?(symmetricstatepack(1-proj-2-tuple(v_721),2-proj-3-tuple(v_716),3-proj-3-tuple(v_716)))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),hash(3-proj-3-tuple(v_722),2-proj-2-tuple(v_721))) else fail-any) else fail-any)) in
        {150}let v_724: bitstring = catch-fail((if success?(1-proj-7-tuple(v_714)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then (if not-caught-fail(v_723) then (v_723,2-proj-2-tuple(v_721)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {151}let v_725: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_724),2-proj-7-tuple(v_714),3-proj-7-tuple(v_714),4-proj-7-tuple(v_714),5-proj-7-tuple(v_714),6-proj-7-tuple(v_714),7-proj-7-tuple(v_714))) in
        {152}let v_726: bitstring = catch-fail(concat3(1-proj-3-tuple(v_715),2-proj-3-tuple(v_715),2-proj-2-tuple(v_724))) in
        {153}let (hs_727: handshakestate,re_728: key,message_e: bitstring) = (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-7-tuple(v_714))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (v_725,5-proj-7-tuple(v_714),v_726) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {154}event SendMsg(alice,bob,stage_e,msg_e(alice,bob),true);
        {155}insert statestore(alice,bob,statepack_f(hs_727));
        {156}out(pub, message_e)
    ) | (
        {185}get statestore(=alice,=bob,statepack_f(hs_729: handshakestate)) in
        {158}in(pub, message_f: bitstring);
        {159}let v_730: bitstring = catch-fail(handshakestateunpack(hs_729)) in
        {160}let v_731: bitstring = catch-fail(deconcat3(message_f)) in
        {161}let v_732: bool = catch-fail(true) in
        {162}let v_733: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_730))) in
        {163}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {164}let v_735: aead = catch-fail(decrypt(1-proj-2-tuple(v_734),2-proj-2-tuple(v_734),3-proj-3-tuple(v_733),3-proj-3-tuple(v_731))) in
        {165}let v_736: bitstring = catch-fail(aeadunpack(v_735)) in
        {166}let v_737: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {167}let v_738: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_734))) && success?(1-proj-3-tuple(v_733))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then cipherstatepack(1-proj-2-tuple(v_737),increment_nonce(2-proj-2-tuple(v_734))) else fail-any) else fail-any)) in
        {168}let v_739: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_731)) && (success?(3-proj-3-tuple(v_733)) && success?(1-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then (if not-caught-fail(v_735) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if not-caught-fail(v_738) then (v_738,3-proj-3-tuple(v_736),1-proj-3-tuple(v_736)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {169}let v_740: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) in
        {170}let v_741: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_731)) && success?(symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then symmetricstatepack(1-proj-3-tuple(v_740),2-proj-3-tuple(v_740),hash(3-proj-3-tuple(v_740),3-proj-3-tuple(v_731))) else fail-any) else fail-any)) in
        {171}let v_742: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_731)) && success?(1-proj-7-tuple(v_730))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if not-caught-fail(v_741) then (v_741,2-proj-3-tuple(v_739),3-proj-3-tuple(v_739)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {172}let v_743: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_742),2-proj-7-tuple(v_730),3-proj-7-tuple(v_730),4-proj-7-tuple(v_730),5-proj-7-tuple(v_730),6-proj-7-tuple(v_730),7-proj-7-tuple(v_730))) in
        {173}let v_744: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_742))) in
        {174}let v_745: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_744),zero)) in
        {175}let v_746: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_744),zero)) in
        {176}let v_747: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_744),zero)) in
        {177}let v_748: bitstring = catch-fail((if success?(2-proj-3-tuple(v_744)) then (if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (v_745,v_746,v_747) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {178}let v_749: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_748)) then cipherstatepack(1-proj-3-tuple(v_748),minnonce) else fail-any)) in
        {179}let v_750: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_748)) then cipherstatepack(2-proj-3-tuple(v_748),minnonce) else fail-any)) in
        {180}let v_751: bitstring = catch-fail((if success?(1-proj-3-tuple(v_742)) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (1-proj-3-tuple(v_742),v_749,v_750) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {181}let (hs_752: handshakestate,re_753: key,plaintext_f: bitstring,valid_754: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-7-tuple(v_730))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if (v_732 && 3-proj-3-tuple(v_742)) then (if not-caught-fail(v_743) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (v_743,getpublickey(3-proj-7-tuple(v_730)),2-proj-3-tuple(v_742),true,2-proj-3-tuple(v_751),3-proj-3-tuple(v_751)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {182}event RecvMsg(alice,bob,stage_f,plaintext_f,valid_754);
        {183}insert statestore(alice,bob,statepack_g(hs_752));
        {184}event RecvEnd(valid_754)
    ) | (
        {186}event LeakS(phase0,alice);
        {187}out(pub, key_s(alice))
    ) | (
        {188}phase 1;
        {189}event LeakS(phase1,alice);
        {190}out(pub, key_s(alice))
    )
) | (
    {191}let s_755: keypair = keypairpack(empty,empty) in
    {192}out(pub, getpublickey(s_755));
    (
        {193}let e_756: keypair = keypairpack(empty,empty) in
        {194}let rs_757: key = empty in
        {195}let re_758: key = empty in
        {196}let v_759: bitstring = catch-fail(hash(somename,empty)) in
        {197}let v_760: key = catch-fail(v_759) in
        {198}let v_761: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {199}let v_762: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then symmetricstatepack(v_761,v_760,v_759) else fail-any) else fail-any) else fail-any))) in
        {200}let v_763: symmetricstate = catch-fail((if success?((if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then symmetricstatepack(v_761,v_760,v_759) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_762),hash(3-proj-3-tuple(v_762),empty)) else fail-any) else fail-any)) in
        {201}let hs_764: handshakestate = (if not-caught-fail(v_763) then handshakestatepack(v_763,s_755,e_756,rs_757,re_758,empty,true) else fail-any) in
        {202}insert statestore(alice,charlie,statepack_a(hs_764))
    ) | (
        {225}get statestore(=alice,=charlie,statepack_a(hs_765: handshakestate)) in
        {203}let v_766: bitstring = catch-fail(handshakestateunpack(hs_765)) in
        {204}let v_767: bitstring = catch-fail((empty,empty,empty)) in
        {205}let v_768: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {206}let v_769: keypair = catch-fail((if not-caught-fail(v_768) then keypairpack(v_768,key_e(alice,charlie)) else fail-any)) in
        {207}let v_770: bitstring = catch-fail(getpublickey(v_769)) in
        {208}let v_771: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_766))) in
        {209}let v_772: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_766)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_771),hash(3-proj-3-tuple(v_771),v_770)) else fail-any) else fail-any)) in
        {210}let v_773: bitstring = catch-fail(symmetricstateunpack(v_772)) in
        {211}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {212}let v_775: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_774),2-proj-2-tuple(v_774),3-proj-3-tuple(v_773),msg_a(alice,charlie))) in
        {213}let v_776: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {214}let v_777: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_774))) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then cipherstatepack(1-proj-2-tuple(v_776),increment_nonce(2-proj-2-tuple(v_774))) else fail-any) else fail-any)) in
        {215}let v_778: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_773)) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_775) then (if not-caught-fail(v_777) then (v_777,v_775) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {216}let v_779: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_778),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) in
        {217}let v_780: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_778)) && success?(symmetricstatepack(1-proj-2-tuple(v_778),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_779),hash(3-proj-3-tuple(v_779),2-proj-2-tuple(v_778))) else fail-any) else fail-any)) in
        {218}let v_781: bitstring = catch-fail((if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then (if not-caught-fail(v_780) then (v_780,2-proj-2-tuple(v_778)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_782: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_781),2-proj-7-tuple(v_766),v_769,4-proj-7-tuple(v_766),5-proj-7-tuple(v_766),6-proj-7-tuple(v_766),7-proj-7-tuple(v_766))) in
        {220}let v_783: bitstring = catch-fail(concat3(v_770,2-proj-3-tuple(v_767),2-proj-2-tuple(v_781))) in
        {221}let (hs_784: handshakestate,re_785: key,message_a_786: bitstring) = (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-7-tuple(v_766))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (if not-caught-fail(v_772) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-2-tuple(v_781))))) then (if not-caught-fail(v_782) then (if not-caught-fail(v_783) then (v_782,5-proj-7-tuple(v_766),v_783) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {222}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {223}insert statestore(alice,charlie,statepack_b(hs_784));
        {224}out(pub, message_a_786)
    ) | (
        {266}get statestore(=alice,=charlie,statepack_b(hs_787: handshakestate)) in
        {226}in(pub, message_b_788: bitstring);
        {227}let v_789: bitstring = catch-fail(handshakestateunpack(hs_787)) in
        {228}let v_790: bitstring = catch-fail(deconcat3(message_b_788)) in
        {229}let v_791: bool = catch-fail(true) in
        {230}let v_792: key = catch-fail(1-proj-3-tuple(v_790)) in
        {231}let v_793: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_789))) in
        {232}let v_794: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_789)) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_793),hash(3-proj-3-tuple(v_793),v_792)) else fail-any) else fail-any)) in
        {233}let v_795: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_789))) in
        {234}let v_796: bitstring = catch-fail(symmetricstateunpack(v_794)) in
        {235}let v_797: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_796),(if success?(3-proj-7-tuple(v_789)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),v_792) else fail-any) else fail-any))) in
        {236}let v_798: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_796),(if success?(3-proj-7-tuple(v_789)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),v_792) else fail-any) else fail-any))) in
        {237}let v_799: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_796),(if success?(3-proj-7-tuple(v_789)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),v_792) else fail-any) else fail-any))) in
        {238}let v_800: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_789)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),v_792) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_796))) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then (v_797,v_798,v_799) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_801: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_789)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),v_792) else fail-any) else fail-any)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_800)) then cipherstatepack(2-proj-3-tuple(v_800),minnonce) else fail-any),1-proj-3-tuple(v_800),3-proj-3-tuple(v_796)) else fail-any) else fail-any) else fail-any)) in
        {240}let v_802: bitstring = catch-fail(symmetricstateunpack(v_801)) in
        {241}let v_803: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {242}let v_804: aead = catch-fail(decrypt(1-proj-2-tuple(v_803),2-proj-2-tuple(v_803),3-proj-3-tuple(v_802),2-proj-3-tuple(v_790))) in
        {243}let v_805: bitstring = catch-fail(aeadunpack(v_804)) in
        {244}let v_806: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {245}let v_807: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_803))) && success?(1-proj-3-tuple(v_802))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then cipherstatepack(1-proj-2-tuple(v_806),increment_nonce(2-proj-2-tuple(v_803))) else fail-any) else fail-any)) in
        {246}let v_808: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_790)) && (success?(3-proj-3-tuple(v_802)) && success?(1-proj-3-tuple(v_802)))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-2-tuple(v_803))))) then (if not-caught-fail(v_804) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if not-caught-fail(v_807) then (v_807,3-proj-3-tuple(v_805),1-proj-3-tuple(v_805)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_809: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) in
        {248}let v_810: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_790)) && success?(symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_809),hash(3-proj-3-tuple(v_809),2-proj-3-tuple(v_790))) else fail-any) else fail-any)) in
        {249}let v_811: bitstring = catch-fail((if success?(2-proj-3-tuple(v_790)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if not-caught-fail(v_810) then (v_810,2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_812: key = catch-fail(2-proj-3-tuple(v_811)) in
        {251}let v_813: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_811))) in
        {252}let v_814: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_813))) in
        {253}let v_815: aead = catch-fail(decrypt(1-proj-2-tuple(v_814),2-proj-2-tuple(v_814),3-proj-3-tuple(v_813),3-proj-3-tuple(v_790))) in
        {254}let v_816: bitstring = catch-fail(aeadunpack(v_815)) in
        {255}let v_817: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_813))) in
        {256}let v_818: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_814))) && success?(1-proj-3-tuple(v_813))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-2-tuple(v_817))))) then cipherstatepack(1-proj-2-tuple(v_817),increment_nonce(2-proj-2-tuple(v_814))) else fail-any) else fail-any)) in
        {257}let v_819: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_790)) && (success?(3-proj-3-tuple(v_813)) && success?(1-proj-3-tuple(v_813)))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then (if not-caught-fail(v_815) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if not-caught-fail(v_818) then (v_818,3-proj-3-tuple(v_816),1-proj-3-tuple(v_816)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {258}let v_820: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_813),3-proj-3-tuple(v_813)))) in
        {259}let v_821: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_790)) && success?(symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_813),3-proj-3-tuple(v_813)))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then symmetricstatepack(1-proj-3-tuple(v_820),2-proj-3-tuple(v_820),hash(3-proj-3-tuple(v_820),3-proj-3-tuple(v_790))) else fail-any) else fail-any)) in
        {260}let v_822: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_790)) && success?(1-proj-3-tuple(v_811))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if not-caught-fail(v_821) then (v_821,2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_823: key = catch-fail(dhexp(key_s(charlie),g)) in
        {262}let v_824: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_822),2-proj-7-tuple(v_789),3-proj-7-tuple(v_789),v_812,v_792,6-proj-7-tuple(v_789),7-proj-7-tuple(v_789))) in
        {263}let (hs_825: handshakestate,re_826: key,plaintext_b_827: bitstring,valid_828: bool) = (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-7-tuple(v_789))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then (if not-caught-fail(v_794) then (if not-caught-fail(v_801) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if not-caught-fail(v_812) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if ((3-proj-3-tuple(v_811) && 3-proj-3-tuple(v_822)) && (v_812 = getpublickey((if not-caught-fail(v_823) then keypairpack(v_823,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_824) then (v_824,getpublickey(3-proj-7-tuple(v_789)),2-proj-3-tuple(v_822),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {264}event RecvMsg(alice,charlie,stage_b,plaintext_b_827,valid_828);
        {265}insert statestore(alice,charlie,statepack_c(hs_825))
    ) | (
        {302}get statestore(=alice,=charlie,statepack_c(hs_829: handshakestate)) in
        {267}let v_830: bitstring = catch-fail(handshakestateunpack(hs_829)) in
        {268}let v_831: bitstring = catch-fail((empty,empty,empty)) in
        {269}let v_832: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_830))) in
        {270}let v_833: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_830))) in
        {271}let v_834: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_833),(if (success?(4-proj-7-tuple(v_830)) && success?(3-proj-7-tuple(v_830))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),4-proj-7-tuple(v_830)) else fail-any) else fail-any))) in
        {272}let v_835: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_833),(if (success?(4-proj-7-tuple(v_830)) && success?(3-proj-7-tuple(v_830))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),4-proj-7-tuple(v_830)) else fail-any) else fail-any))) in
        {273}let v_836: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_833),(if (success?(4-proj-7-tuple(v_830)) && success?(3-proj-7-tuple(v_830))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),4-proj-7-tuple(v_830)) else fail-any) else fail-any))) in
        {274}let v_837: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_830)) && success?(3-proj-7-tuple(v_830))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),4-proj-7-tuple(v_830)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_833))) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then (if not-caught-fail(v_836) then (v_834,v_835,v_836) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {275}let v_838: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_830)) && success?(3-proj-7-tuple(v_830))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),4-proj-7-tuple(v_830)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_830))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_837)) then cipherstatepack(2-proj-3-tuple(v_837),minnonce) else fail-any),1-proj-3-tuple(v_837),3-proj-3-tuple(v_833)) else fail-any) else fail-any) else fail-any)) in
        {276}let v_839: key = catch-fail(dhexp(key_s(alice),g)) in
        {277}let v_840: keypair = catch-fail((if not-caught-fail(v_839) then keypairpack(v_839,key_s(alice)) else fail-any)) in
        {278}let v_841: bitstring = catch-fail(symmetricstateunpack(v_838)) in
        {279}let v_842: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_841))) in
        {280}let v_843: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_842),2-proj-2-tuple(v_842),3-proj-3-tuple(v_841),getpublickey(v_840))) in
        {281}let v_844: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_841))) in
        {282}let v_845: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_842))) && success?(1-proj-3-tuple(v_841))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then cipherstatepack(1-proj-2-tuple(v_844),increment_nonce(2-proj-2-tuple(v_842))) else fail-any) else fail-any)) in
        {283}let v_846: bitstring = catch-fail((if (success?(getpublickey(v_840)) && (success?(3-proj-3-tuple(v_841)) && success?(1-proj-3-tuple(v_841)))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then (if not-caught-fail(v_843) then (if not-caught-fail(v_845) then (v_845,v_843) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {284}let v_847: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_846),2-proj-3-tuple(v_841),3-proj-3-tuple(v_841)))) in
        {285}let v_848: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_846)) && success?(symmetricstatepack(1-proj-2-tuple(v_846),2-proj-3-tuple(v_841),3-proj-3-tuple(v_841)))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then symmetricstatepack(1-proj-3-tuple(v_847),2-proj-3-tuple(v_847),hash(3-proj-3-tuple(v_847),2-proj-2-tuple(v_846))) else fail-any) else fail-any)) in
        {286}let v_849: bitstring = catch-fail((if success?(getpublickey(v_840)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then (if not-caught-fail(v_848) then (v_848,2-proj-2-tuple(v_846)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {287}let v_850: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_849))) in
        {288}let v_851: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_850))) in
        {289}let v_852: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_851),2-proj-2-tuple(v_851),3-proj-3-tuple(v_850),msg_c(alice,charlie))) in
        {290}let v_853: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_850))) in
        {291}let v_854: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_851))) && success?(1-proj-3-tuple(v_850))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then cipherstatepack(1-proj-2-tuple(v_853),increment_nonce(2-proj-2-tuple(v_851))) else fail-any) else fail-any)) in
        {292}let v_855: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_850)) && success?(1-proj-3-tuple(v_850))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then (if not-caught-fail(v_852) then (if not-caught-fail(v_854) then (v_854,v_852) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_856: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_855),2-proj-3-tuple(v_850),3-proj-3-tuple(v_850)))) in
        {294}let v_857: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_855)) && success?(symmetricstatepack(1-proj-2-tuple(v_855),2-proj-3-tuple(v_850),3-proj-3-tuple(v_850)))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then symmetricstatepack(1-proj-3-tuple(v_856),2-proj-3-tuple(v_856),hash(3-proj-3-tuple(v_856),2-proj-2-tuple(v_855))) else fail-any) else fail-any)) in
        {295}let v_858: bitstring = catch-fail((if success?(1-proj-2-tuple(v_849)) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then (if not-caught-fail(v_857) then (v_857,2-proj-2-tuple(v_855)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_859: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_858),v_840,3-proj-7-tuple(v_830),4-proj-7-tuple(v_830),5-proj-7-tuple(v_830),6-proj-7-tuple(v_830),7-proj-7-tuple(v_830))) in
        {297}let v_860: bitstring = catch-fail(concat3(1-proj-3-tuple(v_831),2-proj-2-tuple(v_849),2-proj-2-tuple(v_858))) in
        {298}let (hs_861: handshakestate,re_862: key,message_c_863: bitstring) = (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-7-tuple(v_830))))) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if not-caught-fail(v_838) then (if not-caught-fail(v_840) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-2-tuple(v_849))))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then (v_859,5-proj-7-tuple(v_830),v_860) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {299}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {300}insert statestore(alice,charlie,statepack_d(hs_861));
        {301}out(pub, message_c_863)
    ) | (
        {328}get statestore(=alice,=charlie,statepack_d(hs_864: handshakestate)) in
        {303}in(pub, message_d_865: bitstring);
        {304}let v_866: bitstring = catch-fail(handshakestateunpack(hs_864)) in
        {305}let v_867: bitstring = catch-fail(deconcat3(message_d_865)) in
        {306}let v_868: bool = catch-fail(true) in
        {307}let v_869: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_866))) in
        {308}let v_870: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_866))) in
        {309}let v_871: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_870),(if (success?(5-proj-7-tuple(v_866)) && success?(2-proj-7-tuple(v_866))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {310}let v_872: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_870),(if (success?(5-proj-7-tuple(v_866)) && success?(2-proj-7-tuple(v_866))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {311}let v_873: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_870),(if (success?(5-proj-7-tuple(v_866)) && success?(2-proj-7-tuple(v_866))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {312}let v_874: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_866)) && success?(2-proj-7-tuple(v_866))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_866)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_870))) then (if not-caught-fail(v_871) then (if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (v_871,v_872,v_873) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {313}let v_875: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_866)) && success?(2-proj-7-tuple(v_866))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_866)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_866))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_874)) then cipherstatepack(2-proj-3-tuple(v_874),minnonce) else fail-any),1-proj-3-tuple(v_874),3-proj-3-tuple(v_870)) else fail-any) else fail-any) else fail-any)) in
        {314}let v_876: bitstring = catch-fail(symmetricstateunpack(v_875)) in
        {315}let v_877: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_876))) in
        {316}let v_878: aead = catch-fail(decrypt(1-proj-2-tuple(v_877),2-proj-2-tuple(v_877),3-proj-3-tuple(v_876),3-proj-3-tuple(v_867))) in
        {317}let v_879: bitstring = catch-fail(aeadunpack(v_878)) in
        {318}let v_880: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_876))) in
        {319}let v_881: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_877))) && success?(1-proj-3-tuple(v_876))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then cipherstatepack(1-proj-2-tuple(v_880),increment_nonce(2-proj-2-tuple(v_877))) else fail-any) else fail-any)) in
        {320}let v_882: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_867)) && (success?(3-proj-3-tuple(v_876)) && success?(1-proj-3-tuple(v_876)))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-2-tuple(v_877))))) then (if not-caught-fail(v_878) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if not-caught-fail(v_881) then (v_881,3-proj-3-tuple(v_879),1-proj-3-tuple(v_879)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {321}let v_883: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_882),2-proj-3-tuple(v_876),3-proj-3-tuple(v_876)))) in
        {322}let v_884: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_867)) && success?(symmetricstatepack(1-proj-3-tuple(v_882),2-proj-3-tuple(v_876),3-proj-3-tuple(v_876)))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_883),hash(3-proj-3-tuple(v_883),3-proj-3-tuple(v_867))) else fail-any) else fail-any)) in
        {323}let v_885: bitstring = catch-fail((if success?(3-proj-3-tuple(v_867)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (if not-caught-fail(v_884) then (v_884,2-proj-3-tuple(v_882),3-proj-3-tuple(v_882)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {324}let v_886: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_885),2-proj-7-tuple(v_866),3-proj-7-tuple(v_866),4-proj-7-tuple(v_866),5-proj-7-tuple(v_866),6-proj-7-tuple(v_866),7-proj-7-tuple(v_866))) in
        {325}let (hs_887: handshakestate,re_888: key,plaintext_d_889: bitstring,valid_890: bool) = (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-7-tuple(v_866))))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if not-caught-fail(v_868) then (if not-caught-fail(v_875) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if (v_868 && 3-proj-3-tuple(v_885)) then (if not-caught-fail(v_886) then (v_886,getpublickey(3-proj-7-tuple(v_866)),2-proj-3-tuple(v_885),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {326}event RecvMsg(alice,charlie,stage_d,plaintext_d_889,valid_890);
        {327}insert statestore(alice,charlie,statepack_e(hs_887))
    ) | (
        {346}get statestore(=alice,=charlie,statepack_e(hs_891: handshakestate)) in
        {329}let v_892: bitstring = catch-fail(handshakestateunpack(hs_891)) in
        {330}let v_893: bitstring = catch-fail((empty,empty,empty)) in
        {331}let v_894: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_892))) in
        {332}let v_895: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_894))) in
        {333}let v_896: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_895),2-proj-2-tuple(v_895),3-proj-3-tuple(v_894),msg_e(alice,charlie))) in
        {334}let v_897: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_894))) in
        {335}let v_898: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_895))) && success?(1-proj-3-tuple(v_894))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then cipherstatepack(1-proj-2-tuple(v_897),increment_nonce(2-proj-2-tuple(v_895))) else fail-any) else fail-any)) in
        {336}let v_899: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_894)) && success?(1-proj-3-tuple(v_894))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then (if not-caught-fail(v_896) then (if not-caught-fail(v_898) then (v_898,v_896) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {337}let v_900: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_899),2-proj-3-tuple(v_894),3-proj-3-tuple(v_894)))) in
        {338}let v_901: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_899)) && success?(symmetricstatepack(1-proj-2-tuple(v_899),2-proj-3-tuple(v_894),3-proj-3-tuple(v_894)))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then symmetricstatepack(1-proj-3-tuple(v_900),2-proj-3-tuple(v_900),hash(3-proj-3-tuple(v_900),2-proj-2-tuple(v_899))) else fail-any) else fail-any)) in
        {339}let v_902: bitstring = catch-fail((if success?(1-proj-7-tuple(v_892)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then (if not-caught-fail(v_901) then (v_901,2-proj-2-tuple(v_899)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {340}let v_903: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_902),2-proj-7-tuple(v_892),3-proj-7-tuple(v_892),4-proj-7-tuple(v_892),5-proj-7-tuple(v_892),6-proj-7-tuple(v_892),7-proj-7-tuple(v_892))) in
        {341}let v_904: bitstring = catch-fail(concat3(1-proj-3-tuple(v_893),2-proj-3-tuple(v_893),2-proj-2-tuple(v_902))) in
        {342}let (hs_905: handshakestate,re_906: key,message_e_907: bitstring) = (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-7-tuple(v_892))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-2-tuple(v_902))))) then (if not-caught-fail(v_903) then (if not-caught-fail(v_904) then (v_903,5-proj-7-tuple(v_892),v_904) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {343}event SendMsg(alice,charlie,stage_e,msg_e(alice,charlie),true);
        {344}insert statestore(alice,charlie,statepack_f(hs_905));
        {345}out(pub, message_e_907)
    ) | (
        {374}get statestore(=alice,=charlie,statepack_f(hs_908: handshakestate)) in
        {347}in(pub, message_f_909: bitstring);
        {348}let v_910: bitstring = catch-fail(handshakestateunpack(hs_908)) in
        {349}let v_911: bitstring = catch-fail(deconcat3(message_f_909)) in
        {350}let v_912: bool = catch-fail(true) in
        {351}let v_913: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_910))) in
        {352}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {353}let v_915: aead = catch-fail(decrypt(1-proj-2-tuple(v_914),2-proj-2-tuple(v_914),3-proj-3-tuple(v_913),3-proj-3-tuple(v_911))) in
        {354}let v_916: bitstring = catch-fail(aeadunpack(v_915)) in
        {355}let v_917: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {356}let v_918: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_914))) && success?(1-proj-3-tuple(v_913))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then cipherstatepack(1-proj-2-tuple(v_917),increment_nonce(2-proj-2-tuple(v_914))) else fail-any) else fail-any)) in
        {357}let v_919: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_911)) && (success?(3-proj-3-tuple(v_913)) && success?(1-proj-3-tuple(v_913)))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then (if not-caught-fail(v_915) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,3-proj-3-tuple(v_916),1-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {358}let v_920: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) in
        {359}let v_921: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_911)) && success?(symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then symmetricstatepack(1-proj-3-tuple(v_920),2-proj-3-tuple(v_920),hash(3-proj-3-tuple(v_920),3-proj-3-tuple(v_911))) else fail-any) else fail-any)) in
        {360}let v_922: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_911)) && success?(1-proj-7-tuple(v_910))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if not-caught-fail(v_921) then (v_921,2-proj-3-tuple(v_919),3-proj-3-tuple(v_919)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let v_923: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_922),2-proj-7-tuple(v_910),3-proj-7-tuple(v_910),4-proj-7-tuple(v_910),5-proj-7-tuple(v_910),6-proj-7-tuple(v_910),7-proj-7-tuple(v_910))) in
        {362}let v_924: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_922))) in
        {363}let v_925: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_924),zero)) in
        {364}let v_926: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_924),zero)) in
        {365}let v_927: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_924),zero)) in
        {366}let v_928: bitstring = catch-fail((if success?(2-proj-3-tuple(v_924)) then (if not-caught-fail(v_925) then (if not-caught-fail(v_926) then (if not-caught-fail(v_927) then (v_925,v_926,v_927) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {367}let v_929: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_928)) then cipherstatepack(1-proj-3-tuple(v_928),minnonce) else fail-any)) in
        {368}let v_930: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_928)) then cipherstatepack(2-proj-3-tuple(v_928),minnonce) else fail-any)) in
        {369}let v_931: bitstring = catch-fail((if success?(1-proj-3-tuple(v_922)) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if not-caught-fail(v_929) then (if not-caught-fail(v_930) then (1-proj-3-tuple(v_922),v_929,v_930) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {370}let (hs_932: handshakestate,re_933: key,plaintext_f_934: bitstring,valid_935: bool,cs1_936: cipherstate,cs2_937: cipherstate) = (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-7-tuple(v_910))))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if (v_912 && 3-proj-3-tuple(v_922)) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (v_923,getpublickey(3-proj-7-tuple(v_910)),2-proj-3-tuple(v_922),true,2-proj-3-tuple(v_931),3-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {371}event RecvMsg(alice,charlie,stage_f,plaintext_f_934,valid_935);
        {372}insert statestore(alice,charlie,statepack_g(hs_932));
        {373}event RecvEnd(valid_935)
    ) | (
        {375}event LeakS(phase0,alice);
        {376}out(pub, key_s(alice))
    ) | (
        {377}phase 1;
        {378}event LeakS(phase1,alice);
        {379}out(pub, key_s(alice))
    )
) | (
    {380}let s_938: keypair = keypairpack(empty,empty) in
    {381}out(pub, getpublickey(s_938));
    (
        {382}let e_939: keypair = keypairpack(empty,empty) in
        {383}let rs_940: key = empty in
        {384}let re_941: key = empty in
        {385}let v_942: bitstring = catch-fail(hash(somename,empty)) in
        {386}let v_943: key = catch-fail(v_942) in
        {387}let v_944: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {388}let v_945: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_942) then (if not-caught-fail(v_943) then (if not-caught-fail(v_944) then symmetricstatepack(v_944,v_943,v_942) else fail-any) else fail-any) else fail-any))) in
        {389}let v_946: symmetricstate = catch-fail((if success?((if not-caught-fail(v_942) then (if not-caught-fail(v_943) then (if not-caught-fail(v_944) then symmetricstatepack(v_944,v_943,v_942) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then symmetricstatepack(1-proj-3-tuple(v_945),2-proj-3-tuple(v_945),hash(3-proj-3-tuple(v_945),empty)) else fail-any) else fail-any)) in
        {390}let hs_947: handshakestate = (if not-caught-fail(v_946) then handshakestatepack(v_946,s_938,e_939,rs_940,re_941,empty,false) else fail-any) in
        {391}insert statestore(bob,alice,statepack_a(hs_947))
    ) | (
        {413}get statestore(=bob,=alice,statepack_a(hs_948: handshakestate)) in
        {392}in(pub, message_a_949: bitstring);
        {393}let v_950: bitstring = catch-fail(handshakestateunpack(hs_948)) in
        {394}let v_951: bitstring = catch-fail(deconcat3(message_a_949)) in
        {395}let v_952: bool = catch-fail(true) in
        {396}let v_953: key = catch-fail(1-proj-3-tuple(v_951)) in
        {397}let v_954: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_950))) in
        {398}let v_955: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_950)) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then symmetricstatepack(1-proj-3-tuple(v_954),2-proj-3-tuple(v_954),hash(3-proj-3-tuple(v_954),v_953)) else fail-any) else fail-any)) in
        {399}let v_956: bitstring = catch-fail(symmetricstateunpack(v_955)) in
        {400}let v_957: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_956))) in
        {401}let v_958: aead = catch-fail(decrypt(1-proj-2-tuple(v_957),2-proj-2-tuple(v_957),3-proj-3-tuple(v_956),3-proj-3-tuple(v_951))) in
        {402}let v_959: bitstring = catch-fail(aeadunpack(v_958)) in
        {403}let v_960: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_956))) in
        {404}let v_961: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_957))) && success?(1-proj-3-tuple(v_956))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-2-tuple(v_960))))) then cipherstatepack(1-proj-2-tuple(v_960),increment_nonce(2-proj-2-tuple(v_957))) else fail-any) else fail-any)) in
        {405}let v_962: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_951)) && (success?(3-proj-3-tuple(v_956)) && success?(1-proj-3-tuple(v_956)))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then (if not-caught-fail(v_958) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then (if not-caught-fail(v_961) then (v_961,3-proj-3-tuple(v_959),1-proj-3-tuple(v_959)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {406}let v_963: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_962),2-proj-3-tuple(v_956),3-proj-3-tuple(v_956)))) in
        {407}let v_964: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_951)) && success?(symmetricstatepack(1-proj-3-tuple(v_962),2-proj-3-tuple(v_956),3-proj-3-tuple(v_956)))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then symmetricstatepack(1-proj-3-tuple(v_963),2-proj-3-tuple(v_963),hash(3-proj-3-tuple(v_963),3-proj-3-tuple(v_951))) else fail-any) else fail-any)) in
        {408}let v_965: bitstring = catch-fail((if success?(3-proj-3-tuple(v_951)) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then (if not-caught-fail(v_964) then (v_964,2-proj-3-tuple(v_962),3-proj-3-tuple(v_962)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {409}let v_966: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_965),2-proj-7-tuple(v_950),3-proj-7-tuple(v_950),4-proj-7-tuple(v_950),v_953,6-proj-7-tuple(v_950),7-proj-7-tuple(v_950))) in
        {410}let (hs_967: handshakestate,re_968: key,plaintext_a: bitstring,valid_969: bool) = (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-7-tuple(v_950))))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if not-caught-fail(v_952) then (if not-caught-fail(v_953) then (if not-caught-fail(v_955) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then (if (v_952 && 3-proj-3-tuple(v_965)) then (if not-caught-fail(v_966) then (v_966,getpublickey(3-proj-7-tuple(v_950)),2-proj-3-tuple(v_965),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {411}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_969);
        {412}insert statestore(bob,alice,statepack_b(hs_967))
    ) | (
        {454}get statestore(=bob,=alice,statepack_b(hs_970: handshakestate)) in
        {414}let v_971: bitstring = catch-fail(handshakestateunpack(hs_970)) in
        {415}let v_972: bitstring = catch-fail((empty,empty,empty)) in
        {416}let v_973: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {417}let v_974: keypair = catch-fail((if not-caught-fail(v_973) then keypairpack(v_973,key_e(bob,alice)) else fail-any)) in
        {418}let v_975: bitstring = catch-fail(getpublickey(v_974)) in
        {419}let v_976: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_971))) in
        {420}let v_977: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_971)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then symmetricstatepack(1-proj-3-tuple(v_976),2-proj-3-tuple(v_976),hash(3-proj-3-tuple(v_976),v_975)) else fail-any) else fail-any)) in
        {421}let v_978: bitstring = catch-fail(keypairunpack(v_974)) in
        {422}let v_979: bitstring = catch-fail(symmetricstateunpack(v_977)) in
        {423}let v_980: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {424}let v_981: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {425}let v_982: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_979),(if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any))) in
        {426}let v_983: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_979))) then (if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (if not-caught-fail(v_982) then (v_980,v_981,v_982) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {427}let v_984: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_971)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then dhexp(2-proj-2-tuple(v_978),5-proj-7-tuple(v_971)) else fail-any) else fail-any)) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_983)) then cipherstatepack(2-proj-3-tuple(v_983),minnonce) else fail-any),1-proj-3-tuple(v_983),3-proj-3-tuple(v_979)) else fail-any) else fail-any) else fail-any)) in
        {428}let v_985: key = catch-fail(dhexp(key_s(bob),g)) in
        {429}let v_986: keypair = catch-fail((if not-caught-fail(v_985) then keypairpack(v_985,key_s(bob)) else fail-any)) in
        {430}let v_987: bitstring = catch-fail(symmetricstateunpack(v_984)) in
        {431}let v_988: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_987))) in
        {432}let v_989: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_988),2-proj-2-tuple(v_988),3-proj-3-tuple(v_987),getpublickey(v_986))) in
        {433}let v_990: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_987))) in
        {434}let v_991: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_988))) && success?(1-proj-3-tuple(v_987))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-2-tuple(v_990))))) then cipherstatepack(1-proj-2-tuple(v_990),increment_nonce(2-proj-2-tuple(v_988))) else fail-any) else fail-any)) in
        {435}let v_992: bitstring = catch-fail((if (success?(getpublickey(v_986)) && (success?(3-proj-3-tuple(v_987)) && success?(1-proj-3-tuple(v_987)))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-2-tuple(v_988))))) then (if not-caught-fail(v_989) then (if not-caught-fail(v_991) then (v_991,v_989) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_993: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_992),2-proj-3-tuple(v_987),3-proj-3-tuple(v_987)))) in
        {437}let v_994: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_992)) && success?(symmetricstatepack(1-proj-2-tuple(v_992),2-proj-3-tuple(v_987),3-proj-3-tuple(v_987)))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then symmetricstatepack(1-proj-3-tuple(v_993),2-proj-3-tuple(v_993),hash(3-proj-3-tuple(v_993),2-proj-2-tuple(v_992))) else fail-any) else fail-any)) in
        {438}let v_995: bitstring = catch-fail((if success?(getpublickey(v_986)) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-3-tuple(v_987))))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then (if not-caught-fail(v_994) then (v_994,2-proj-2-tuple(v_992)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_996: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_995))) in
        {440}let v_997: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {441}let v_998: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_997),2-proj-2-tuple(v_997),3-proj-3-tuple(v_996),msg_b(bob,alice))) in
        {442}let v_999: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_996))) in
        {443}let v_1000: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_997))) && success?(1-proj-3-tuple(v_996))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then cipherstatepack(1-proj-2-tuple(v_999),increment_nonce(2-proj-2-tuple(v_997))) else fail-any) else fail-any)) in
        {444}let v_1001: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_996)) && success?(1-proj-3-tuple(v_996))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-2-tuple(v_997))))) then (if not-caught-fail(v_998) then (if not-caught-fail(v_1000) then (v_1000,v_998) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_1002: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1001),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) in
        {446}let v_1003: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1001)) && success?(symmetricstatepack(1-proj-2-tuple(v_1001),2-proj-3-tuple(v_996),3-proj-3-tuple(v_996)))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then symmetricstatepack(1-proj-3-tuple(v_1002),2-proj-3-tuple(v_1002),hash(3-proj-3-tuple(v_1002),2-proj-2-tuple(v_1001))) else fail-any) else fail-any)) in
        {447}let v_1004: bitstring = catch-fail((if success?(1-proj-2-tuple(v_995)) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-2-tuple(v_1001))))) then (if not-caught-fail(v_1003) then (v_1003,2-proj-2-tuple(v_1001)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {448}let v_1005: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1004),v_986,v_974,4-proj-7-tuple(v_971),5-proj-7-tuple(v_971),6-proj-7-tuple(v_971),7-proj-7-tuple(v_971))) in
        {449}let v_1006: bitstring = catch-fail(concat3(v_975,2-proj-2-tuple(v_995),2-proj-2-tuple(v_1004))) in
        {450}let (hs_1007: handshakestate,re_1008: key,message_b_1009: bitstring) = (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-7-tuple(v_971))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_974) then (if not-caught-fail(v_975) then (if not-caught-fail(v_977) then (if not-caught-fail(v_984) then (if not-caught-fail(v_986) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-2-tuple(v_995))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-2-tuple(v_1004))))) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1006) then (v_1005,5-proj-7-tuple(v_971),v_1006) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {451}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {452}insert statestore(bob,alice,statepack_c(hs_1007));
        {453}out(pub, message_b_1009)
    ) | (
        {492}get statestore(=bob,=alice,statepack_c(hs_1010: handshakestate)) in
        {455}in(pub, message_c_1011: bitstring);
        {456}let v_1012: bitstring = catch-fail(handshakestateunpack(hs_1010)) in
        {457}let v_1013: bitstring = catch-fail(deconcat3(message_c_1011)) in
        {458}let v_1014: bool = catch-fail(true) in
        {459}let v_1015: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1012))) in
        {460}let v_1016: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1012))) in
        {461}let v_1017: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1016),(if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any))) in
        {462}let v_1018: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1016),(if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any))) in
        {463}let v_1019: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1016),(if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any))) in
        {464}let v_1020: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1016))) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1019) then (v_1017,v_1018,v_1019) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {465}let v_1021: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1012)) && success?(2-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then dhexp(2-proj-2-tuple(v_1015),5-proj-7-tuple(v_1012)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1012))) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-3-tuple(v_1016))))) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1020)) then cipherstatepack(2-proj-3-tuple(v_1020),minnonce) else fail-any),1-proj-3-tuple(v_1020),3-proj-3-tuple(v_1016)) else fail-any) else fail-any) else fail-any)) in
        {466}let v_1022: bitstring = catch-fail(symmetricstateunpack(v_1021)) in
        {467}let v_1023: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1022))) in
        {468}let v_1024: aead = catch-fail(decrypt(1-proj-2-tuple(v_1023),2-proj-2-tuple(v_1023),3-proj-3-tuple(v_1022),2-proj-3-tuple(v_1013))) in
        {469}let v_1025: bitstring = catch-fail(aeadunpack(v_1024)) in
        {470}let v_1026: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1022))) in
        {471}let v_1027: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1023))) && success?(1-proj-3-tuple(v_1022))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-2-tuple(v_1026))))) then cipherstatepack(1-proj-2-tuple(v_1026),increment_nonce(2-proj-2-tuple(v_1023))) else fail-any) else fail-any)) in
        {472}let v_1028: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1013)) && (success?(3-proj-3-tuple(v_1022)) && success?(1-proj-3-tuple(v_1022)))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then (if not-caught-fail(v_1024) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then (if not-caught-fail(v_1027) then (v_1027,3-proj-3-tuple(v_1025),1-proj-3-tuple(v_1025)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {473}let v_1029: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1022),3-proj-3-tuple(v_1022)))) in
        {474}let v_1030: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1013)) && success?(symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1022),3-proj-3-tuple(v_1022)))) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-3-tuple(v_1029))))) then symmetricstatepack(1-proj-3-tuple(v_1029),2-proj-3-tuple(v_1029),hash(3-proj-3-tuple(v_1029),2-proj-3-tuple(v_1013))) else fail-any) else fail-any)) in
        {475}let v_1031: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1013)) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if not-caught-fail(v_1030) then (v_1030,2-proj-3-tuple(v_1028),3-proj-3-tuple(v_1028)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_1032: key = catch-fail(2-proj-3-tuple(v_1031)) in
        {477}let v_1033: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1031))) in
        {478}let v_1034: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1033))) in
        {479}let v_1035: aead = catch-fail(decrypt(1-proj-2-tuple(v_1034),2-proj-2-tuple(v_1034),3-proj-3-tuple(v_1033),3-proj-3-tuple(v_1013))) in
        {480}let v_1036: bitstring = catch-fail(aeadunpack(v_1035)) in
        {481}let v_1037: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1033))) in
        {482}let v_1038: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1034))) && success?(1-proj-3-tuple(v_1033))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-2-tuple(v_1037))))) then cipherstatepack(1-proj-2-tuple(v_1037),increment_nonce(2-proj-2-tuple(v_1034))) else fail-any) else fail-any)) in
        {483}let v_1039: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1013)) && (success?(3-proj-3-tuple(v_1033)) && success?(1-proj-3-tuple(v_1033)))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-2-tuple(v_1034))))) then (if not-caught-fail(v_1035) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if not-caught-fail(v_1038) then (v_1038,3-proj-3-tuple(v_1036),1-proj-3-tuple(v_1036)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {484}let v_1040: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1033),3-proj-3-tuple(v_1033)))) in
        {485}let v_1041: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1013)) && success?(symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1033),3-proj-3-tuple(v_1033)))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then symmetricstatepack(1-proj-3-tuple(v_1040),2-proj-3-tuple(v_1040),hash(3-proj-3-tuple(v_1040),3-proj-3-tuple(v_1013))) else fail-any) else fail-any)) in
        {486}let v_1042: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1013)) && success?(1-proj-3-tuple(v_1031))) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if not-caught-fail(v_1041) then (v_1041,2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {487}let v_1043: key = catch-fail(dhexp(key_s(alice),g)) in
        {488}let v_1044: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1042),2-proj-7-tuple(v_1012),3-proj-7-tuple(v_1012),v_1032,5-proj-7-tuple(v_1012),6-proj-7-tuple(v_1012),7-proj-7-tuple(v_1012))) in
        {489}let (hs_1045: handshakestate,re_1046: key,plaintext_c: bitstring,valid_1047: bool) = (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-7-tuple(v_1012))))) then (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-3-tuple(v_1013))))) then (if not-caught-fail(v_1014) then (if not-caught-fail(v_1021) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then (if not-caught-fail(v_1032) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then (if ((3-proj-3-tuple(v_1031) && 3-proj-3-tuple(v_1042)) && (v_1032 = getpublickey((if not-caught-fail(v_1043) then keypairpack(v_1043,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_1044) then (v_1044,getpublickey(3-proj-7-tuple(v_1012)),2-proj-3-tuple(v_1042),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {490}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_1047);
        {491}insert statestore(bob,alice,statepack_d(hs_1045))
    ) | (
        {517}get statestore(=bob,=alice,statepack_d(hs_1048: handshakestate)) in
        {493}let v_1049: bitstring = catch-fail(handshakestateunpack(hs_1048)) in
        {494}let v_1050: bitstring = catch-fail((empty,empty,empty)) in
        {495}let v_1051: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1049))) in
        {496}let v_1052: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1049))) in
        {497}let v_1053: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1052),(if (success?(4-proj-7-tuple(v_1049)) && success?(3-proj-7-tuple(v_1049))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then dhexp(2-proj-2-tuple(v_1051),4-proj-7-tuple(v_1049)) else fail-any) else fail-any))) in
        {498}let v_1054: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1052),(if (success?(4-proj-7-tuple(v_1049)) && success?(3-proj-7-tuple(v_1049))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then dhexp(2-proj-2-tuple(v_1051),4-proj-7-tuple(v_1049)) else fail-any) else fail-any))) in
        {499}let v_1055: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1052),(if (success?(4-proj-7-tuple(v_1049)) && success?(3-proj-7-tuple(v_1049))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then dhexp(2-proj-2-tuple(v_1051),4-proj-7-tuple(v_1049)) else fail-any) else fail-any))) in
        {500}let v_1056: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1049)) && success?(3-proj-7-tuple(v_1049))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then dhexp(2-proj-2-tuple(v_1051),4-proj-7-tuple(v_1049)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1052))) then (if not-caught-fail(v_1053) then (if not-caught-fail(v_1054) then (if not-caught-fail(v_1055) then (v_1053,v_1054,v_1055) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_1057: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1049)) && success?(3-proj-7-tuple(v_1049))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then dhexp(2-proj-2-tuple(v_1051),4-proj-7-tuple(v_1049)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1049))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1056)) then cipherstatepack(2-proj-3-tuple(v_1056),minnonce) else fail-any),1-proj-3-tuple(v_1056),3-proj-3-tuple(v_1052)) else fail-any) else fail-any) else fail-any)) in
        {502}let v_1058: bitstring = catch-fail(symmetricstateunpack(v_1057)) in
        {503}let v_1059: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1058))) in
        {504}let v_1060: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1059),2-proj-2-tuple(v_1059),3-proj-3-tuple(v_1058),msg_d(bob,alice))) in
        {505}let v_1061: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1058))) in
        {506}let v_1062: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1059))) && success?(1-proj-3-tuple(v_1058))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then cipherstatepack(1-proj-2-tuple(v_1061),increment_nonce(2-proj-2-tuple(v_1059))) else fail-any) else fail-any)) in
        {507}let v_1063: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1058)) && success?(1-proj-3-tuple(v_1058))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then (if not-caught-fail(v_1060) then (if not-caught-fail(v_1062) then (v_1062,v_1060) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {508}let v_1064: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1063),2-proj-3-tuple(v_1058),3-proj-3-tuple(v_1058)))) in
        {509}let v_1065: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1063)) && success?(symmetricstatepack(1-proj-2-tuple(v_1063),2-proj-3-tuple(v_1058),3-proj-3-tuple(v_1058)))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then symmetricstatepack(1-proj-3-tuple(v_1064),2-proj-3-tuple(v_1064),hash(3-proj-3-tuple(v_1064),2-proj-2-tuple(v_1063))) else fail-any) else fail-any)) in
        {510}let v_1066: bitstring = catch-fail((if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then (if not-caught-fail(v_1065) then (v_1065,2-proj-2-tuple(v_1063)) else fail-any) else fail-any) else fail-any)) in
        {511}let v_1067: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1066),2-proj-7-tuple(v_1049),3-proj-7-tuple(v_1049),4-proj-7-tuple(v_1049),5-proj-7-tuple(v_1049),6-proj-7-tuple(v_1049),7-proj-7-tuple(v_1049))) in
        {512}let v_1068: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1050),2-proj-2-tuple(v_1066))) in
        {513}let (hs_1069: handshakestate,re_1070: key,message_d_1071: bitstring) = (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-7-tuple(v_1049))))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if not-caught-fail(v_1057) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-2-tuple(v_1066))))) then (if not-caught-fail(v_1067) then (if not-caught-fail(v_1068) then (v_1067,5-proj-7-tuple(v_1049),v_1068) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {514}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {515}insert statestore(bob,alice,statepack_e(hs_1069));
        {516}out(pub, message_d_1071)
    ) | (
        {536}get statestore(=bob,=alice,statepack_e(hs_1072: handshakestate)) in
        {518}in(pub, message_e_1073: bitstring);
        {519}let v_1074: bitstring = catch-fail(handshakestateunpack(hs_1072)) in
        {520}let v_1075: bitstring = catch-fail(deconcat3(message_e_1073)) in
        {521}let v_1076: bool = catch-fail(true) in
        {522}let v_1077: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1074))) in
        {523}let v_1078: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1077))) in
        {524}let v_1079: aead = catch-fail(decrypt(1-proj-2-tuple(v_1078),2-proj-2-tuple(v_1078),3-proj-3-tuple(v_1077),3-proj-3-tuple(v_1075))) in
        {525}let v_1080: bitstring = catch-fail(aeadunpack(v_1079)) in
        {526}let v_1081: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1077))) in
        {527}let v_1082: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1078))) && success?(1-proj-3-tuple(v_1077))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-2-tuple(v_1081))))) then cipherstatepack(1-proj-2-tuple(v_1081),increment_nonce(2-proj-2-tuple(v_1078))) else fail-any) else fail-any)) in
        {528}let v_1083: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1075)) && (success?(3-proj-3-tuple(v_1077)) && success?(1-proj-3-tuple(v_1077)))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then (if not-caught-fail(v_1079) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if not-caught-fail(v_1082) then (v_1082,3-proj-3-tuple(v_1080),1-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1084: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)))) in
        {530}let v_1085: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1075)) && success?(symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then symmetricstatepack(1-proj-3-tuple(v_1084),2-proj-3-tuple(v_1084),hash(3-proj-3-tuple(v_1084),3-proj-3-tuple(v_1075))) else fail-any) else fail-any)) in
        {531}let v_1086: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1075)) && success?(1-proj-7-tuple(v_1074))) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if not-caught-fail(v_1085) then (v_1085,2-proj-3-tuple(v_1083),3-proj-3-tuple(v_1083)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1087: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1086),2-proj-7-tuple(v_1074),3-proj-7-tuple(v_1074),4-proj-7-tuple(v_1074),5-proj-7-tuple(v_1074),6-proj-7-tuple(v_1074),7-proj-7-tuple(v_1074))) in
        {533}let (hs_1088: handshakestate,re_1089: key,plaintext_e: bitstring,valid_1090: bool) = (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-7-tuple(v_1074))))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-3-tuple(v_1075))))) then (if not-caught-fail(v_1076) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if (v_1076 && 3-proj-3-tuple(v_1086)) then (if not-caught-fail(v_1087) then (v_1087,getpublickey(3-proj-7-tuple(v_1074)),2-proj-3-tuple(v_1086),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {534}event RecvMsg(bob,alice,stage_e,plaintext_e,valid_1090);
        {535}insert statestore(bob,alice,statepack_f(hs_1088))
    ) | (
        {562}get statestore(=bob,=alice,statepack_f(hs_1091: handshakestate)) in
        {537}let v_1092: bitstring = catch-fail(handshakestateunpack(hs_1091)) in
        {538}let v_1093: bitstring = catch-fail((empty,empty,empty)) in
        {539}let v_1094: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1092))) in
        {540}let v_1095: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1094))) in
        {541}let v_1096: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1095),2-proj-2-tuple(v_1095),3-proj-3-tuple(v_1094),msg_f(bob,alice))) in
        {542}let v_1097: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1094))) in
        {543}let v_1098: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1095))) && success?(1-proj-3-tuple(v_1094))) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-2-tuple(v_1097))))) then cipherstatepack(1-proj-2-tuple(v_1097),increment_nonce(2-proj-2-tuple(v_1095))) else fail-any) else fail-any)) in
        {544}let v_1099: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1094)) && success?(1-proj-3-tuple(v_1094))) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-2-tuple(v_1095))))) then (if not-caught-fail(v_1096) then (if not-caught-fail(v_1098) then (v_1098,v_1096) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {545}let v_1100: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1099),2-proj-3-tuple(v_1094),3-proj-3-tuple(v_1094)))) in
        {546}let v_1101: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1099)) && success?(symmetricstatepack(1-proj-2-tuple(v_1099),2-proj-3-tuple(v_1094),3-proj-3-tuple(v_1094)))) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-3-tuple(v_1100))))) then symmetricstatepack(1-proj-3-tuple(v_1100),2-proj-3-tuple(v_1100),hash(3-proj-3-tuple(v_1100),2-proj-2-tuple(v_1099))) else fail-any) else fail-any)) in
        {547}let v_1102: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1092)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-2-tuple(v_1099))))) then (if not-caught-fail(v_1101) then (v_1101,2-proj-2-tuple(v_1099)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {548}let v_1103: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1102),2-proj-7-tuple(v_1092),3-proj-7-tuple(v_1092),4-proj-7-tuple(v_1092),5-proj-7-tuple(v_1092),6-proj-7-tuple(v_1092),7-proj-7-tuple(v_1092))) in
        {549}let v_1104: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1093),2-proj-3-tuple(v_1093),2-proj-2-tuple(v_1102))) in
        {550}let v_1105: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1102))) in
        {551}let v_1106: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1105),zero)) in
        {552}let v_1107: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1105),zero)) in
        {553}let v_1108: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1105),zero)) in
        {554}let v_1109: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1105)) then (if not-caught-fail(v_1106) then (if not-caught-fail(v_1107) then (if not-caught-fail(v_1108) then (v_1106,v_1107,v_1108) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {555}let v_1110: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1109)) then cipherstatepack(1-proj-3-tuple(v_1109),minnonce) else fail-any)) in
        {556}let v_1111: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1109)) then cipherstatepack(2-proj-3-tuple(v_1109),minnonce) else fail-any)) in
        {557}let v_1112: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1102)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-3-tuple(v_1105))))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then (if not-caught-fail(v_1110) then (if not-caught-fail(v_1111) then (1-proj-2-tuple(v_1102),v_1110,v_1111) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let (hs_1113: handshakestate,re_1114: key,message_f_1115: bitstring,cs1_1116: cipherstate,cs2_1117: cipherstate) = (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-7-tuple(v_1092))))) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-3-tuple(v_1093))))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then (if not-caught-fail(v_1103) then (if not-caught-fail(v_1104) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (v_1103,5-proj-7-tuple(v_1092),v_1104,2-proj-3-tuple(v_1112),3-proj-3-tuple(v_1112)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {559}event SendMsg(bob,alice,stage_f,msg_f(bob,alice),true);
        {560}insert statestore(bob,alice,statepack_g(hs_1113));
        {561}out(pub, message_f_1115)
    ) | (
        {563}event LeakS(phase0,bob);
        {564}out(pub, key_s(bob))
    ) | (
        {565}phase 1;
        {566}event LeakS(phase1,bob);
        {567}out(pub, key_s(bob))
    )
) | (
    {568}let s_1118: keypair = keypairpack(empty,empty) in
    {569}out(pub, getpublickey(s_1118));
    (
        {570}let e_1119: keypair = keypairpack(empty,empty) in
        {571}let rs_1120: key = empty in
        {572}let re_1121: key = empty in
        {573}let v_1122: bitstring = catch-fail(hash(somename,empty)) in
        {574}let v_1123: key = catch-fail(v_1122) in
        {575}let v_1124: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {576}let v_1125: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1122) then (if not-caught-fail(v_1123) then (if not-caught-fail(v_1124) then symmetricstatepack(v_1124,v_1123,v_1122) else fail-any) else fail-any) else fail-any))) in
        {577}let v_1126: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1122) then (if not-caught-fail(v_1123) then (if not-caught-fail(v_1124) then symmetricstatepack(v_1124,v_1123,v_1122) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then symmetricstatepack(1-proj-3-tuple(v_1125),2-proj-3-tuple(v_1125),hash(3-proj-3-tuple(v_1125),empty)) else fail-any) else fail-any)) in
        {578}let hs_1127: handshakestate = (if not-caught-fail(v_1126) then handshakestatepack(v_1126,s_1118,e_1119,rs_1120,re_1121,empty,false) else fail-any) in
        {579}insert statestore(bob,charlie,statepack_a(hs_1127))
    ) | (
        {601}get statestore(=bob,=charlie,statepack_a(hs_1128: handshakestate)) in
        {580}in(pub, message_a_1129: bitstring);
        {581}let v_1130: bitstring = catch-fail(handshakestateunpack(hs_1128)) in
        {582}let v_1131: bitstring = catch-fail(deconcat3(message_a_1129)) in
        {583}let v_1132: bool = catch-fail(true) in
        {584}let v_1133: key = catch-fail(1-proj-3-tuple(v_1131)) in
        {585}let v_1134: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1130))) in
        {586}let v_1135: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1130)) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then symmetricstatepack(1-proj-3-tuple(v_1134),2-proj-3-tuple(v_1134),hash(3-proj-3-tuple(v_1134),v_1133)) else fail-any) else fail-any)) in
        {587}let v_1136: bitstring = catch-fail(symmetricstateunpack(v_1135)) in
        {588}let v_1137: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1136))) in
        {589}let v_1138: aead = catch-fail(decrypt(1-proj-2-tuple(v_1137),2-proj-2-tuple(v_1137),3-proj-3-tuple(v_1136),3-proj-3-tuple(v_1131))) in
        {590}let v_1139: bitstring = catch-fail(aeadunpack(v_1138)) in
        {591}let v_1140: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1136))) in
        {592}let v_1141: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1137))) && success?(1-proj-3-tuple(v_1136))) then (if (not-caught-fail(v_1140) && success?(is-true(success?(1-proj-2-tuple(v_1140))))) then cipherstatepack(1-proj-2-tuple(v_1140),increment_nonce(2-proj-2-tuple(v_1137))) else fail-any) else fail-any)) in
        {593}let v_1142: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1131)) && (success?(3-proj-3-tuple(v_1136)) && success?(1-proj-3-tuple(v_1136)))) then (if (not-caught-fail(v_1137) && success?(is-true(success?(1-proj-2-tuple(v_1137))))) then (if not-caught-fail(v_1138) then (if (not-caught-fail(v_1139) && success?(is-true(success?(1-proj-3-tuple(v_1139))))) then (if not-caught-fail(v_1141) then (v_1141,3-proj-3-tuple(v_1139),1-proj-3-tuple(v_1139)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {594}let v_1143: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1142),2-proj-3-tuple(v_1136),3-proj-3-tuple(v_1136)))) in
        {595}let v_1144: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1131)) && success?(symmetricstatepack(1-proj-3-tuple(v_1142),2-proj-3-tuple(v_1136),3-proj-3-tuple(v_1136)))) then (if (not-caught-fail(v_1143) && success?(is-true(success?(1-proj-3-tuple(v_1143))))) then symmetricstatepack(1-proj-3-tuple(v_1143),2-proj-3-tuple(v_1143),hash(3-proj-3-tuple(v_1143),3-proj-3-tuple(v_1131))) else fail-any) else fail-any)) in
        {596}let v_1145: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1131)) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-3-tuple(v_1136))))) then (if (not-caught-fail(v_1142) && success?(is-true(success?(1-proj-3-tuple(v_1142))))) then (if not-caught-fail(v_1144) then (v_1144,2-proj-3-tuple(v_1142),3-proj-3-tuple(v_1142)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {597}let v_1146: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1145),2-proj-7-tuple(v_1130),3-proj-7-tuple(v_1130),4-proj-7-tuple(v_1130),v_1133,6-proj-7-tuple(v_1130),7-proj-7-tuple(v_1130))) in
        {598}let (hs_1147: handshakestate,re_1148: key,plaintext_a_1149: bitstring,valid_1150: bool) = (if (not-caught-fail(v_1130) && success?(is-true(success?(1-proj-7-tuple(v_1130))))) then (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-3-tuple(v_1131))))) then (if not-caught-fail(v_1132) then (if not-caught-fail(v_1133) then (if not-caught-fail(v_1135) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-3-tuple(v_1145))))) then (if (v_1132 && 3-proj-3-tuple(v_1145)) then (if not-caught-fail(v_1146) then (v_1146,getpublickey(3-proj-7-tuple(v_1130)),2-proj-3-tuple(v_1145),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {599}event RecvMsg(bob,charlie,stage_a,plaintext_a_1149,valid_1150);
        {600}insert statestore(bob,charlie,statepack_b(hs_1147))
    ) | (
        {642}get statestore(=bob,=charlie,statepack_b(hs_1151: handshakestate)) in
        {602}let v_1152: bitstring = catch-fail(handshakestateunpack(hs_1151)) in
        {603}let v_1153: bitstring = catch-fail((empty,empty,empty)) in
        {604}let v_1154: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {605}let v_1155: keypair = catch-fail((if not-caught-fail(v_1154) then keypairpack(v_1154,key_e(bob,charlie)) else fail-any)) in
        {606}let v_1156: bitstring = catch-fail(getpublickey(v_1155)) in
        {607}let v_1157: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1152))) in
        {608}let v_1158: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1152)) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-3-tuple(v_1157))))) then symmetricstatepack(1-proj-3-tuple(v_1157),2-proj-3-tuple(v_1157),hash(3-proj-3-tuple(v_1157),v_1156)) else fail-any) else fail-any)) in
        {609}let v_1159: bitstring = catch-fail(keypairunpack(v_1155)) in
        {610}let v_1160: bitstring = catch-fail(symmetricstateunpack(v_1158)) in
        {611}let v_1161: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1160),(if success?(5-proj-7-tuple(v_1152)) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-2-tuple(v_1159))))) then dhexp(2-proj-2-tuple(v_1159),5-proj-7-tuple(v_1152)) else fail-any) else fail-any))) in
        {612}let v_1162: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1160),(if success?(5-proj-7-tuple(v_1152)) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-2-tuple(v_1159))))) then dhexp(2-proj-2-tuple(v_1159),5-proj-7-tuple(v_1152)) else fail-any) else fail-any))) in
        {613}let v_1163: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1160),(if success?(5-proj-7-tuple(v_1152)) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-2-tuple(v_1159))))) then dhexp(2-proj-2-tuple(v_1159),5-proj-7-tuple(v_1152)) else fail-any) else fail-any))) in
        {614}let v_1164: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1152)) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-2-tuple(v_1159))))) then dhexp(2-proj-2-tuple(v_1159),5-proj-7-tuple(v_1152)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1160))) then (if not-caught-fail(v_1161) then (if not-caught-fail(v_1162) then (if not-caught-fail(v_1163) then (v_1161,v_1162,v_1163) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {615}let v_1165: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1152)) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-2-tuple(v_1159))))) then dhexp(2-proj-2-tuple(v_1159),5-proj-7-tuple(v_1152)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-3-tuple(v_1160))))) then (if (not-caught-fail(v_1164) && success?(is-true(success?(1-proj-3-tuple(v_1164))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1164)) then cipherstatepack(2-proj-3-tuple(v_1164),minnonce) else fail-any),1-proj-3-tuple(v_1164),3-proj-3-tuple(v_1160)) else fail-any) else fail-any) else fail-any)) in
        {616}let v_1166: key = catch-fail(dhexp(key_s(bob),g)) in
        {617}let v_1167: keypair = catch-fail((if not-caught-fail(v_1166) then keypairpack(v_1166,key_s(bob)) else fail-any)) in
        {618}let v_1168: bitstring = catch-fail(symmetricstateunpack(v_1165)) in
        {619}let v_1169: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1168))) in
        {620}let v_1170: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1169),2-proj-2-tuple(v_1169),3-proj-3-tuple(v_1168),getpublickey(v_1167))) in
        {621}let v_1171: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1168))) in
        {622}let v_1172: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1169))) && success?(1-proj-3-tuple(v_1168))) then (if (not-caught-fail(v_1171) && success?(is-true(success?(1-proj-2-tuple(v_1171))))) then cipherstatepack(1-proj-2-tuple(v_1171),increment_nonce(2-proj-2-tuple(v_1169))) else fail-any) else fail-any)) in
        {623}let v_1173: bitstring = catch-fail((if (success?(getpublickey(v_1167)) && (success?(3-proj-3-tuple(v_1168)) && success?(1-proj-3-tuple(v_1168)))) then (if (not-caught-fail(v_1169) && success?(is-true(success?(1-proj-2-tuple(v_1169))))) then (if not-caught-fail(v_1170) then (if not-caught-fail(v_1172) then (v_1172,v_1170) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {624}let v_1174: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1173),2-proj-3-tuple(v_1168),3-proj-3-tuple(v_1168)))) in
        {625}let v_1175: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1173)) && success?(symmetricstatepack(1-proj-2-tuple(v_1173),2-proj-3-tuple(v_1168),3-proj-3-tuple(v_1168)))) then (if (not-caught-fail(v_1174) && success?(is-true(success?(1-proj-3-tuple(v_1174))))) then symmetricstatepack(1-proj-3-tuple(v_1174),2-proj-3-tuple(v_1174),hash(3-proj-3-tuple(v_1174),2-proj-2-tuple(v_1173))) else fail-any) else fail-any)) in
        {626}let v_1176: bitstring = catch-fail((if success?(getpublickey(v_1167)) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-3-tuple(v_1168))))) then (if (not-caught-fail(v_1173) && success?(is-true(success?(1-proj-2-tuple(v_1173))))) then (if not-caught-fail(v_1175) then (v_1175,2-proj-2-tuple(v_1173)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {627}let v_1177: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1176))) in
        {628}let v_1178: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1177))) in
        {629}let v_1179: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1178),2-proj-2-tuple(v_1178),3-proj-3-tuple(v_1177),msg_b(bob,charlie))) in
        {630}let v_1180: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1177))) in
        {631}let v_1181: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1178))) && success?(1-proj-3-tuple(v_1177))) then (if (not-caught-fail(v_1180) && success?(is-true(success?(1-proj-2-tuple(v_1180))))) then cipherstatepack(1-proj-2-tuple(v_1180),increment_nonce(2-proj-2-tuple(v_1178))) else fail-any) else fail-any)) in
        {632}let v_1182: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1177)) && success?(1-proj-3-tuple(v_1177))) then (if (not-caught-fail(v_1178) && success?(is-true(success?(1-proj-2-tuple(v_1178))))) then (if not-caught-fail(v_1179) then (if not-caught-fail(v_1181) then (v_1181,v_1179) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {633}let v_1183: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1182),2-proj-3-tuple(v_1177),3-proj-3-tuple(v_1177)))) in
        {634}let v_1184: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1182)) && success?(symmetricstatepack(1-proj-2-tuple(v_1182),2-proj-3-tuple(v_1177),3-proj-3-tuple(v_1177)))) then (if (not-caught-fail(v_1183) && success?(is-true(success?(1-proj-3-tuple(v_1183))))) then symmetricstatepack(1-proj-3-tuple(v_1183),2-proj-3-tuple(v_1183),hash(3-proj-3-tuple(v_1183),2-proj-2-tuple(v_1182))) else fail-any) else fail-any)) in
        {635}let v_1185: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1176)) then (if (not-caught-fail(v_1177) && success?(is-true(success?(1-proj-3-tuple(v_1177))))) then (if (not-caught-fail(v_1182) && success?(is-true(success?(1-proj-2-tuple(v_1182))))) then (if not-caught-fail(v_1184) then (v_1184,2-proj-2-tuple(v_1182)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {636}let v_1186: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1185),v_1167,v_1155,4-proj-7-tuple(v_1152),5-proj-7-tuple(v_1152),6-proj-7-tuple(v_1152),7-proj-7-tuple(v_1152))) in
        {637}let v_1187: bitstring = catch-fail(concat3(v_1156,2-proj-2-tuple(v_1176),2-proj-2-tuple(v_1185))) in
        {638}let (hs_1188: handshakestate,re_1189: key,message_b_1190: bitstring) = (if (not-caught-fail(v_1152) && success?(is-true(success?(1-proj-7-tuple(v_1152))))) then (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-3-tuple(v_1153))))) then (if not-caught-fail(v_1155) then (if not-caught-fail(v_1156) then (if not-caught-fail(v_1158) then (if not-caught-fail(v_1165) then (if not-caught-fail(v_1167) then (if (not-caught-fail(v_1176) && success?(is-true(success?(1-proj-2-tuple(v_1176))))) then (if (not-caught-fail(v_1185) && success?(is-true(success?(1-proj-2-tuple(v_1185))))) then (if not-caught-fail(v_1186) then (if not-caught-fail(v_1187) then (v_1186,5-proj-7-tuple(v_1152),v_1187) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {639}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {640}insert statestore(bob,charlie,statepack_c(hs_1188));
        {641}out(pub, message_b_1190)
    ) | (
        {680}get statestore(=bob,=charlie,statepack_c(hs_1191: handshakestate)) in
        {643}in(pub, message_c_1192: bitstring);
        {644}let v_1193: bitstring = catch-fail(handshakestateunpack(hs_1191)) in
        {645}let v_1194: bitstring = catch-fail(deconcat3(message_c_1192)) in
        {646}let v_1195: bool = catch-fail(true) in
        {647}let v_1196: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1193))) in
        {648}let v_1197: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1193))) in
        {649}let v_1198: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1197),(if (success?(5-proj-7-tuple(v_1193)) && success?(2-proj-7-tuple(v_1193))) then (if (not-caught-fail(v_1196) && success?(is-true(success?(1-proj-2-tuple(v_1196))))) then dhexp(2-proj-2-tuple(v_1196),5-proj-7-tuple(v_1193)) else fail-any) else fail-any))) in
        {650}let v_1199: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1197),(if (success?(5-proj-7-tuple(v_1193)) && success?(2-proj-7-tuple(v_1193))) then (if (not-caught-fail(v_1196) && success?(is-true(success?(1-proj-2-tuple(v_1196))))) then dhexp(2-proj-2-tuple(v_1196),5-proj-7-tuple(v_1193)) else fail-any) else fail-any))) in
        {651}let v_1200: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1197),(if (success?(5-proj-7-tuple(v_1193)) && success?(2-proj-7-tuple(v_1193))) then (if (not-caught-fail(v_1196) && success?(is-true(success?(1-proj-2-tuple(v_1196))))) then dhexp(2-proj-2-tuple(v_1196),5-proj-7-tuple(v_1193)) else fail-any) else fail-any))) in
        {652}let v_1201: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1193)) && success?(2-proj-7-tuple(v_1193))) then (if (not-caught-fail(v_1196) && success?(is-true(success?(1-proj-2-tuple(v_1196))))) then dhexp(2-proj-2-tuple(v_1196),5-proj-7-tuple(v_1193)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1197))) then (if not-caught-fail(v_1198) then (if not-caught-fail(v_1199) then (if not-caught-fail(v_1200) then (v_1198,v_1199,v_1200) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {653}let v_1202: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1193)) && success?(2-proj-7-tuple(v_1193))) then (if (not-caught-fail(v_1196) && success?(is-true(success?(1-proj-2-tuple(v_1196))))) then dhexp(2-proj-2-tuple(v_1196),5-proj-7-tuple(v_1193)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1193))) then (if (not-caught-fail(v_1197) && success?(is-true(success?(1-proj-3-tuple(v_1197))))) then (if (not-caught-fail(v_1201) && success?(is-true(success?(1-proj-3-tuple(v_1201))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1201)) then cipherstatepack(2-proj-3-tuple(v_1201),minnonce) else fail-any),1-proj-3-tuple(v_1201),3-proj-3-tuple(v_1197)) else fail-any) else fail-any) else fail-any)) in
        {654}let v_1203: bitstring = catch-fail(symmetricstateunpack(v_1202)) in
        {655}let v_1204: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1203))) in
        {656}let v_1205: aead = catch-fail(decrypt(1-proj-2-tuple(v_1204),2-proj-2-tuple(v_1204),3-proj-3-tuple(v_1203),2-proj-3-tuple(v_1194))) in
        {657}let v_1206: bitstring = catch-fail(aeadunpack(v_1205)) in
        {658}let v_1207: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1203))) in
        {659}let v_1208: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1204))) && success?(1-proj-3-tuple(v_1203))) then (if (not-caught-fail(v_1207) && success?(is-true(success?(1-proj-2-tuple(v_1207))))) then cipherstatepack(1-proj-2-tuple(v_1207),increment_nonce(2-proj-2-tuple(v_1204))) else fail-any) else fail-any)) in
        {660}let v_1209: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1194)) && (success?(3-proj-3-tuple(v_1203)) && success?(1-proj-3-tuple(v_1203)))) then (if (not-caught-fail(v_1204) && success?(is-true(success?(1-proj-2-tuple(v_1204))))) then (if not-caught-fail(v_1205) then (if (not-caught-fail(v_1206) && success?(is-true(success?(1-proj-3-tuple(v_1206))))) then (if not-caught-fail(v_1208) then (v_1208,3-proj-3-tuple(v_1206),1-proj-3-tuple(v_1206)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {661}let v_1210: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1209),2-proj-3-tuple(v_1203),3-proj-3-tuple(v_1203)))) in
        {662}let v_1211: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1194)) && success?(symmetricstatepack(1-proj-3-tuple(v_1209),2-proj-3-tuple(v_1203),3-proj-3-tuple(v_1203)))) then (if (not-caught-fail(v_1210) && success?(is-true(success?(1-proj-3-tuple(v_1210))))) then symmetricstatepack(1-proj-3-tuple(v_1210),2-proj-3-tuple(v_1210),hash(3-proj-3-tuple(v_1210),2-proj-3-tuple(v_1194))) else fail-any) else fail-any)) in
        {663}let v_1212: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1194)) then (if (not-caught-fail(v_1203) && success?(is-true(success?(1-proj-3-tuple(v_1203))))) then (if (not-caught-fail(v_1209) && success?(is-true(success?(1-proj-3-tuple(v_1209))))) then (if not-caught-fail(v_1211) then (v_1211,2-proj-3-tuple(v_1209),3-proj-3-tuple(v_1209)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {664}let v_1213: key = catch-fail(2-proj-3-tuple(v_1212)) in
        {665}let v_1214: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1212))) in
        {666}let v_1215: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1214))) in
        {667}let v_1216: aead = catch-fail(decrypt(1-proj-2-tuple(v_1215),2-proj-2-tuple(v_1215),3-proj-3-tuple(v_1214),3-proj-3-tuple(v_1194))) in
        {668}let v_1217: bitstring = catch-fail(aeadunpack(v_1216)) in
        {669}let v_1218: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1214))) in
        {670}let v_1219: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1215))) && success?(1-proj-3-tuple(v_1214))) then (if (not-caught-fail(v_1218) && success?(is-true(success?(1-proj-2-tuple(v_1218))))) then cipherstatepack(1-proj-2-tuple(v_1218),increment_nonce(2-proj-2-tuple(v_1215))) else fail-any) else fail-any)) in
        {671}let v_1220: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1194)) && (success?(3-proj-3-tuple(v_1214)) && success?(1-proj-3-tuple(v_1214)))) then (if (not-caught-fail(v_1215) && success?(is-true(success?(1-proj-2-tuple(v_1215))))) then (if not-caught-fail(v_1216) then (if (not-caught-fail(v_1217) && success?(is-true(success?(1-proj-3-tuple(v_1217))))) then (if not-caught-fail(v_1219) then (v_1219,3-proj-3-tuple(v_1217),1-proj-3-tuple(v_1217)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {672}let v_1221: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1220),2-proj-3-tuple(v_1214),3-proj-3-tuple(v_1214)))) in
        {673}let v_1222: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1194)) && success?(symmetricstatepack(1-proj-3-tuple(v_1220),2-proj-3-tuple(v_1214),3-proj-3-tuple(v_1214)))) then (if (not-caught-fail(v_1221) && success?(is-true(success?(1-proj-3-tuple(v_1221))))) then symmetricstatepack(1-proj-3-tuple(v_1221),2-proj-3-tuple(v_1221),hash(3-proj-3-tuple(v_1221),3-proj-3-tuple(v_1194))) else fail-any) else fail-any)) in
        {674}let v_1223: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1194)) && success?(1-proj-3-tuple(v_1212))) then (if (not-caught-fail(v_1214) && success?(is-true(success?(1-proj-3-tuple(v_1214))))) then (if (not-caught-fail(v_1220) && success?(is-true(success?(1-proj-3-tuple(v_1220))))) then (if not-caught-fail(v_1222) then (v_1222,2-proj-3-tuple(v_1220),3-proj-3-tuple(v_1220)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {675}let v_1224: key = catch-fail(dhexp(key_s(charlie),g)) in
        {676}let v_1225: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1223),2-proj-7-tuple(v_1193),3-proj-7-tuple(v_1193),v_1213,5-proj-7-tuple(v_1193),6-proj-7-tuple(v_1193),7-proj-7-tuple(v_1193))) in
        {677}let (hs_1226: handshakestate,re_1227: key,plaintext_c_1228: bitstring,valid_1229: bool) = (if (not-caught-fail(v_1193) && success?(is-true(success?(1-proj-7-tuple(v_1193))))) then (if (not-caught-fail(v_1194) && success?(is-true(success?(1-proj-3-tuple(v_1194))))) then (if not-caught-fail(v_1195) then (if not-caught-fail(v_1202) then (if (not-caught-fail(v_1212) && success?(is-true(success?(1-proj-3-tuple(v_1212))))) then (if not-caught-fail(v_1213) then (if (not-caught-fail(v_1223) && success?(is-true(success?(1-proj-3-tuple(v_1223))))) then (if ((3-proj-3-tuple(v_1212) && 3-proj-3-tuple(v_1223)) && (v_1213 = getpublickey((if not-caught-fail(v_1224) then keypairpack(v_1224,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1225) then (v_1225,getpublickey(3-proj-7-tuple(v_1193)),2-proj-3-tuple(v_1223),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {678}event RecvMsg(bob,charlie,stage_c,plaintext_c_1228,valid_1229);
        {679}insert statestore(bob,charlie,statepack_d(hs_1226))
    ) | (
        {705}get statestore(=bob,=charlie,statepack_d(hs_1230: handshakestate)) in
        {681}let v_1231: bitstring = catch-fail(handshakestateunpack(hs_1230)) in
        {682}let v_1232: bitstring = catch-fail((empty,empty,empty)) in
        {683}let v_1233: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1231))) in
        {684}let v_1234: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1231))) in
        {685}let v_1235: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1234),(if (success?(4-proj-7-tuple(v_1231)) && success?(3-proj-7-tuple(v_1231))) then (if (not-caught-fail(v_1233) && success?(is-true(success?(1-proj-2-tuple(v_1233))))) then dhexp(2-proj-2-tuple(v_1233),4-proj-7-tuple(v_1231)) else fail-any) else fail-any))) in
        {686}let v_1236: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1234),(if (success?(4-proj-7-tuple(v_1231)) && success?(3-proj-7-tuple(v_1231))) then (if (not-caught-fail(v_1233) && success?(is-true(success?(1-proj-2-tuple(v_1233))))) then dhexp(2-proj-2-tuple(v_1233),4-proj-7-tuple(v_1231)) else fail-any) else fail-any))) in
        {687}let v_1237: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1234),(if (success?(4-proj-7-tuple(v_1231)) && success?(3-proj-7-tuple(v_1231))) then (if (not-caught-fail(v_1233) && success?(is-true(success?(1-proj-2-tuple(v_1233))))) then dhexp(2-proj-2-tuple(v_1233),4-proj-7-tuple(v_1231)) else fail-any) else fail-any))) in
        {688}let v_1238: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1231)) && success?(3-proj-7-tuple(v_1231))) then (if (not-caught-fail(v_1233) && success?(is-true(success?(1-proj-2-tuple(v_1233))))) then dhexp(2-proj-2-tuple(v_1233),4-proj-7-tuple(v_1231)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1234))) then (if not-caught-fail(v_1235) then (if not-caught-fail(v_1236) then (if not-caught-fail(v_1237) then (v_1235,v_1236,v_1237) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {689}let v_1239: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1231)) && success?(3-proj-7-tuple(v_1231))) then (if (not-caught-fail(v_1233) && success?(is-true(success?(1-proj-2-tuple(v_1233))))) then dhexp(2-proj-2-tuple(v_1233),4-proj-7-tuple(v_1231)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1231))) then (if (not-caught-fail(v_1234) && success?(is-true(success?(1-proj-3-tuple(v_1234))))) then (if (not-caught-fail(v_1238) && success?(is-true(success?(1-proj-3-tuple(v_1238))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1238)) then cipherstatepack(2-proj-3-tuple(v_1238),minnonce) else fail-any),1-proj-3-tuple(v_1238),3-proj-3-tuple(v_1234)) else fail-any) else fail-any) else fail-any)) in
        {690}let v_1240: bitstring = catch-fail(symmetricstateunpack(v_1239)) in
        {691}let v_1241: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1240))) in
        {692}let v_1242: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1241),2-proj-2-tuple(v_1241),3-proj-3-tuple(v_1240),msg_d(bob,charlie))) in
        {693}let v_1243: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1240))) in
        {694}let v_1244: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1241))) && success?(1-proj-3-tuple(v_1240))) then (if (not-caught-fail(v_1243) && success?(is-true(success?(1-proj-2-tuple(v_1243))))) then cipherstatepack(1-proj-2-tuple(v_1243),increment_nonce(2-proj-2-tuple(v_1241))) else fail-any) else fail-any)) in
        {695}let v_1245: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1240)) && success?(1-proj-3-tuple(v_1240))) then (if (not-caught-fail(v_1241) && success?(is-true(success?(1-proj-2-tuple(v_1241))))) then (if not-caught-fail(v_1242) then (if not-caught-fail(v_1244) then (v_1244,v_1242) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {696}let v_1246: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1245),2-proj-3-tuple(v_1240),3-proj-3-tuple(v_1240)))) in
        {697}let v_1247: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1245)) && success?(symmetricstatepack(1-proj-2-tuple(v_1245),2-proj-3-tuple(v_1240),3-proj-3-tuple(v_1240)))) then (if (not-caught-fail(v_1246) && success?(is-true(success?(1-proj-3-tuple(v_1246))))) then symmetricstatepack(1-proj-3-tuple(v_1246),2-proj-3-tuple(v_1246),hash(3-proj-3-tuple(v_1246),2-proj-2-tuple(v_1245))) else fail-any) else fail-any)) in
        {698}let v_1248: bitstring = catch-fail((if (not-caught-fail(v_1240) && success?(is-true(success?(1-proj-3-tuple(v_1240))))) then (if (not-caught-fail(v_1245) && success?(is-true(success?(1-proj-2-tuple(v_1245))))) then (if not-caught-fail(v_1247) then (v_1247,2-proj-2-tuple(v_1245)) else fail-any) else fail-any) else fail-any)) in
        {699}let v_1249: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1248),2-proj-7-tuple(v_1231),3-proj-7-tuple(v_1231),4-proj-7-tuple(v_1231),5-proj-7-tuple(v_1231),6-proj-7-tuple(v_1231),7-proj-7-tuple(v_1231))) in
        {700}let v_1250: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1232),2-proj-3-tuple(v_1232),2-proj-2-tuple(v_1248))) in
        {701}let (hs_1251: handshakestate,re_1252: key,message_d_1253: bitstring) = (if (not-caught-fail(v_1231) && success?(is-true(success?(1-proj-7-tuple(v_1231))))) then (if (not-caught-fail(v_1232) && success?(is-true(success?(1-proj-3-tuple(v_1232))))) then (if not-caught-fail(v_1239) then (if (not-caught-fail(v_1248) && success?(is-true(success?(1-proj-2-tuple(v_1248))))) then (if not-caught-fail(v_1249) then (if not-caught-fail(v_1250) then (v_1249,5-proj-7-tuple(v_1231),v_1250) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {702}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {703}insert statestore(bob,charlie,statepack_e(hs_1251));
        {704}out(pub, message_d_1253)
    ) | (
        {724}get statestore(=bob,=charlie,statepack_e(hs_1254: handshakestate)) in
        {706}in(pub, message_e_1255: bitstring);
        {707}let v_1256: bitstring = catch-fail(handshakestateunpack(hs_1254)) in
        {708}let v_1257: bitstring = catch-fail(deconcat3(message_e_1255)) in
        {709}let v_1258: bool = catch-fail(true) in
        {710}let v_1259: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1256))) in
        {711}let v_1260: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1259))) in
        {712}let v_1261: aead = catch-fail(decrypt(1-proj-2-tuple(v_1260),2-proj-2-tuple(v_1260),3-proj-3-tuple(v_1259),3-proj-3-tuple(v_1257))) in
        {713}let v_1262: bitstring = catch-fail(aeadunpack(v_1261)) in
        {714}let v_1263: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1259))) in
        {715}let v_1264: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1260))) && success?(1-proj-3-tuple(v_1259))) then (if (not-caught-fail(v_1263) && success?(is-true(success?(1-proj-2-tuple(v_1263))))) then cipherstatepack(1-proj-2-tuple(v_1263),increment_nonce(2-proj-2-tuple(v_1260))) else fail-any) else fail-any)) in
        {716}let v_1265: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1257)) && (success?(3-proj-3-tuple(v_1259)) && success?(1-proj-3-tuple(v_1259)))) then (if (not-caught-fail(v_1260) && success?(is-true(success?(1-proj-2-tuple(v_1260))))) then (if not-caught-fail(v_1261) then (if (not-caught-fail(v_1262) && success?(is-true(success?(1-proj-3-tuple(v_1262))))) then (if not-caught-fail(v_1264) then (v_1264,3-proj-3-tuple(v_1262),1-proj-3-tuple(v_1262)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {717}let v_1266: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1265),2-proj-3-tuple(v_1259),3-proj-3-tuple(v_1259)))) in
        {718}let v_1267: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1257)) && success?(symmetricstatepack(1-proj-3-tuple(v_1265),2-proj-3-tuple(v_1259),3-proj-3-tuple(v_1259)))) then (if (not-caught-fail(v_1266) && success?(is-true(success?(1-proj-3-tuple(v_1266))))) then symmetricstatepack(1-proj-3-tuple(v_1266),2-proj-3-tuple(v_1266),hash(3-proj-3-tuple(v_1266),3-proj-3-tuple(v_1257))) else fail-any) else fail-any)) in
        {719}let v_1268: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1257)) && success?(1-proj-7-tuple(v_1256))) then (if (not-caught-fail(v_1259) && success?(is-true(success?(1-proj-3-tuple(v_1259))))) then (if (not-caught-fail(v_1265) && success?(is-true(success?(1-proj-3-tuple(v_1265))))) then (if not-caught-fail(v_1267) then (v_1267,2-proj-3-tuple(v_1265),3-proj-3-tuple(v_1265)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {720}let v_1269: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1268),2-proj-7-tuple(v_1256),3-proj-7-tuple(v_1256),4-proj-7-tuple(v_1256),5-proj-7-tuple(v_1256),6-proj-7-tuple(v_1256),7-proj-7-tuple(v_1256))) in
        {721}let (hs_1270: handshakestate,re_1271: key,plaintext_e_1272: bitstring,valid_1273: bool) = (if (not-caught-fail(v_1256) && success?(is-true(success?(1-proj-7-tuple(v_1256))))) then (if (not-caught-fail(v_1257) && success?(is-true(success?(1-proj-3-tuple(v_1257))))) then (if not-caught-fail(v_1258) then (if (not-caught-fail(v_1268) && success?(is-true(success?(1-proj-3-tuple(v_1268))))) then (if (v_1258 && 3-proj-3-tuple(v_1268)) then (if not-caught-fail(v_1269) then (v_1269,getpublickey(3-proj-7-tuple(v_1256)),2-proj-3-tuple(v_1268),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {722}event RecvMsg(bob,charlie,stage_e,plaintext_e_1272,valid_1273);
        {723}insert statestore(bob,charlie,statepack_f(hs_1270))
    ) | (
        {750}get statestore(=bob,=charlie,statepack_f(hs_1274: handshakestate)) in
        {725}let v_1275: bitstring = catch-fail(handshakestateunpack(hs_1274)) in
        {726}let v_1276: bitstring = catch-fail((empty,empty,empty)) in
        {727}let v_1277: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1275))) in
        {728}let v_1278: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1277))) in
        {729}let v_1279: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1278),2-proj-2-tuple(v_1278),3-proj-3-tuple(v_1277),msg_f(bob,charlie))) in
        {730}let v_1280: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1277))) in
        {731}let v_1281: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1278))) && success?(1-proj-3-tuple(v_1277))) then (if (not-caught-fail(v_1280) && success?(is-true(success?(1-proj-2-tuple(v_1280))))) then cipherstatepack(1-proj-2-tuple(v_1280),increment_nonce(2-proj-2-tuple(v_1278))) else fail-any) else fail-any)) in
        {732}let v_1282: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1277)) && success?(1-proj-3-tuple(v_1277))) then (if (not-caught-fail(v_1278) && success?(is-true(success?(1-proj-2-tuple(v_1278))))) then (if not-caught-fail(v_1279) then (if not-caught-fail(v_1281) then (v_1281,v_1279) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {733}let v_1283: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1282),2-proj-3-tuple(v_1277),3-proj-3-tuple(v_1277)))) in
        {734}let v_1284: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1282)) && success?(symmetricstatepack(1-proj-2-tuple(v_1282),2-proj-3-tuple(v_1277),3-proj-3-tuple(v_1277)))) then (if (not-caught-fail(v_1283) && success?(is-true(success?(1-proj-3-tuple(v_1283))))) then symmetricstatepack(1-proj-3-tuple(v_1283),2-proj-3-tuple(v_1283),hash(3-proj-3-tuple(v_1283),2-proj-2-tuple(v_1282))) else fail-any) else fail-any)) in
        {735}let v_1285: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1275)) then (if (not-caught-fail(v_1277) && success?(is-true(success?(1-proj-3-tuple(v_1277))))) then (if (not-caught-fail(v_1282) && success?(is-true(success?(1-proj-2-tuple(v_1282))))) then (if not-caught-fail(v_1284) then (v_1284,2-proj-2-tuple(v_1282)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {736}let v_1286: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1285),2-proj-7-tuple(v_1275),3-proj-7-tuple(v_1275),4-proj-7-tuple(v_1275),5-proj-7-tuple(v_1275),6-proj-7-tuple(v_1275),7-proj-7-tuple(v_1275))) in
        {737}let v_1287: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1276),2-proj-3-tuple(v_1276),2-proj-2-tuple(v_1285))) in
        {738}let v_1288: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1285))) in
        {739}let v_1289: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1288),zero)) in
        {740}let v_1290: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1288),zero)) in
        {741}let v_1291: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1288),zero)) in
        {742}let v_1292: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1288)) then (if not-caught-fail(v_1289) then (if not-caught-fail(v_1290) then (if not-caught-fail(v_1291) then (v_1289,v_1290,v_1291) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {743}let v_1293: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1292)) then cipherstatepack(1-proj-3-tuple(v_1292),minnonce) else fail-any)) in
        {744}let v_1294: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1292)) then cipherstatepack(2-proj-3-tuple(v_1292),minnonce) else fail-any)) in
        {745}let v_1295: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1285)) then (if (not-caught-fail(v_1288) && success?(is-true(success?(1-proj-3-tuple(v_1288))))) then (if (not-caught-fail(v_1292) && success?(is-true(success?(1-proj-3-tuple(v_1292))))) then (if not-caught-fail(v_1293) then (if not-caught-fail(v_1294) then (1-proj-2-tuple(v_1285),v_1293,v_1294) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {746}let (hs_1296: handshakestate,re_1297: key,message_f_1298: bitstring,cs1_1299: cipherstate,cs2_1300: cipherstate) = (if (not-caught-fail(v_1275) && success?(is-true(success?(1-proj-7-tuple(v_1275))))) then (if (not-caught-fail(v_1276) && success?(is-true(success?(1-proj-3-tuple(v_1276))))) then (if (not-caught-fail(v_1285) && success?(is-true(success?(1-proj-2-tuple(v_1285))))) then (if not-caught-fail(v_1286) then (if not-caught-fail(v_1287) then (if (not-caught-fail(v_1295) && success?(is-true(success?(1-proj-3-tuple(v_1295))))) then (v_1286,5-proj-7-tuple(v_1275),v_1287,2-proj-3-tuple(v_1295),3-proj-3-tuple(v_1295)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {747}event SendMsg(bob,charlie,stage_f,msg_f(bob,charlie),true);
        {748}insert statestore(bob,charlie,statepack_g(hs_1296));
        {749}out(pub, message_f_1298)
    ) | (
        {751}event LeakS(phase0,bob);
        {752}out(pub, key_s(bob))
    ) | (
        {753}phase 1;
        {754}event LeakS(phase1,bob);
        {755}out(pub, key_s(bob))
    )
) | (
    {756}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1381,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1381,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1381,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1381,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1381,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1381,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1381,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1381,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1381,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1381,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1381,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1381,stage_f,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_f(bob,alice)); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 170 rules in the queue.
400 rules inserted. The rule base contains 390 rules. 17 rules in the queue.
600 rules inserted. The rule base contains 565 rules. 249 rules in the queue.
800 rules inserted. The rule base contains 736 rules. 289 rules in the queue.
1000 rules inserted. The rule base contains 916 rules. 141 rules in the queue.
1200 rules inserted. The rule base contains 1059 rules. 288 rules in the queue.
1400 rules inserted. The rule base contains 1233 rules. 413 rules in the queue.
1600 rules inserted. The rule base contains 1401 rules. 385 rules in the queue.
1800 rules inserted. The rule base contains 1562 rules. 410 rules in the queue.
2000 rules inserted. The rule base contains 1724 rules. 499 rules in the queue.
2200 rules inserted. The rule base contains 1849 rules. 518 rules in the queue.
2400 rules inserted. The rule base contains 2020 rules. 501 rules in the queue.
2600 rules inserted. The rule base contains 2189 rules. 493 rules in the queue.
2800 rules inserted. The rule base contains 2352 rules. 525 rules in the queue.
3000 rules inserted. The rule base contains 2524 rules. 574 rules in the queue.
3200 rules inserted. The rule base contains 2676 rules. 594 rules in the queue.
3400 rules inserted. The rule base contains 2776 rules. 541 rules in the queue.
3600 rules inserted. The rule base contains 2888 rules. 503 rules in the queue.
3800 rules inserted. The rule base contains 3006 rules. 467 rules in the queue.
4000 rules inserted. The rule base contains 3164 rules. 456 rules in the queue.
4200 rules inserted. The rule base contains 3278 rules. 454 rules in the queue.
4400 rules inserted. The rule base contains 3378 rules. 471 rules in the queue.
4600 rules inserted. The rule base contains 3469 rules. 457 rules in the queue.
4800 rules inserted. The rule base contains 3559 rules. 434 rules in the queue.
5000 rules inserted. The rule base contains 3635 rules. 410 rules in the queue.
5200 rules inserted. The rule base contains 3705 rules. 410 rules in the queue.
5400 rules inserted. The rule base contains 3801 rules. 394 rules in the queue.
5600 rules inserted. The rule base contains 3893 rules. 360 rules in the queue.
5800 rules inserted. The rule base contains 4004 rules. 366 rules in the queue.
6000 rules inserted. The rule base contains 4120 rules. 395 rules in the queue.
6200 rules inserted. The rule base contains 4226 rules. 400 rules in the queue.
6400 rules inserted. The rule base contains 4365 rules. 399 rules in the queue.
6600 rules inserted. The rule base contains 4493 rules. 387 rules in the queue.
6800 rules inserted. The rule base contains 4621 rules. 376 rules in the queue.
7000 rules inserted. The rule base contains 4760 rules. 391 rules in the queue.
7200 rules inserted. The rule base contains 4860 rules. 353 rules in the queue.
7400 rules inserted. The rule base contains 4990 rules. 325 rules in the queue.
7600 rules inserted. The rule base contains 5107 rules. 311 rules in the queue.
7800 rules inserted. The rule base contains 5252 rules. 349 rules in the queue.
8000 rules inserted. The rule base contains 5381 rules. 312 rules in the queue.
8200 rules inserted. The rule base contains 5488 rules. 270 rules in the queue.
8400 rules inserted. The rule base contains 5603 rules. 242 rules in the queue.
8600 rules inserted. The rule base contains 5718 rules. 262 rules in the queue.
8800 rules inserted. The rule base contains 5788 rules. 271 rules in the queue.
9000 rules inserted. The rule base contains 5961 rules. 267 rules in the queue.
9200 rules inserted. The rule base contains 6084 rules. 298 rules in the queue.
9400 rules inserted. The rule base contains 6219 rules. 332 rules in the queue.
9600 rules inserted. The rule base contains 6359 rules. 313 rules in the queue.
9800 rules inserted. The rule base contains 6508 rules. 334 rules in the queue.
10000 rules inserted. The rule base contains 6656 rules. 316 rules in the queue.
10200 rules inserted. The rule base contains 6792 rules. 292 rules in the queue.
10400 rules inserted. The rule base contains 6926 rules. 267 rules in the queue.
10600 rules inserted. The rule base contains 7047 rules. 265 rules in the queue.
10800 rules inserted. The rule base contains 7174 rules. 299 rules in the queue.
11000 rules inserted. The rule base contains 7323 rules. 315 rules in the queue.
11200 rules inserted. The rule base contains 7449 rules. 301 rules in the queue.
11400 rules inserted. The rule base contains 7556 rules. 272 rules in the queue.
11600 rules inserted. The rule base contains 7636 rules. 223 rules in the queue.
11800 rules inserted. The rule base contains 7755 rules. 182 rules in the queue.
12000 rules inserted. The rule base contains 7853 rules. 172 rules in the queue.
12200 rules inserted. The rule base contains 7975 rules. 163 rules in the queue.
12400 rules inserted. The rule base contains 8103 rules. 99 rules in the queue.
12600 rules inserted. The rule base contains 8153 rules. 43 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {391}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {202}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {225}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {222}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {224}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {413}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {392}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {411}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1381,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1381,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1381,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1381,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {391}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {202}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {225}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {222}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {224}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {413}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {392}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {411}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {391}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {202}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {225}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {222}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {224}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {413}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {392}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {411}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {579}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {601}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {580}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {600}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {642}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {639}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {641}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {75}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1381,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1381,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1381,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1381,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {579}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {601}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {580}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {600}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {642}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {639}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {641}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {75}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {579}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {601}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {580}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {600}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {642}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {639}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {641}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {75}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1381,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1381,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1381,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1381,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1381,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1381,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1381,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1381,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1381,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1381,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1381,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1381,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1381,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1381,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1381,stage_f,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1381,stage_f,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_f(bob,alice))
RESULT not attacker_p1(msg_f(bob,alice)) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
