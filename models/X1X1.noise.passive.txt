File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "X1X1.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "X1X1.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 313, character 6:
Warning: identifier e rebound.
File "X1X1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ne rebound.
File "X1X1.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 318, character 6:
Warning: identifier s rebound.
File "X1X1.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X1.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "X1X1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X1.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 339, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 347, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 348, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 357, characters 6-7:
Warning: identifier re rebound.
File "X1X1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 370, characters 6-7:
Warning: identifier re rebound.
File "X1X1.noise.passive.pv", line 371, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 373, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 374, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 374, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X1.noise.passive.pv", line 375, characters 6-7:
Warning: identifier rs rebound.
File "X1X1.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 386, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 387, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X1.noise.passive.pv", line 388, characters 6-7:
Warning: identifier rs rebound.
File "X1X1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 582, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 347, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 348, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 575, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "X1X1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X1.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 560, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 370, characters 6-7:
Warning: identifier re rebound.
File "X1X1.noise.passive.pv", line 371, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 373, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 374, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 374, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X1.noise.passive.pv", line 375, characters 6-7:
Warning: identifier rs rebound.
File "X1X1.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "X1X1.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "X1X1.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 640, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 632, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 339, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 625, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 386, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 387, characters 48-53:
Warning: identifier valid1 rebound.
File "X1X1.noise.passive.pv", line 388, characters 6-7:
Warning: identifier rs rebound.
File "X1X1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 617, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 313, character 6:
Warning: identifier e rebound.
File "X1X1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ne rebound.
File "X1X1.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 318, character 6:
Warning: identifier s rebound.
File "X1X1.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1X1.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1X1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 610, characters 8-9:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 357, characters 6-7:
Warning: identifier re rebound.
File "X1X1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "X1X1.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "X1X1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1X1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_532: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_532));
    (
        {4}let e_533: keypair = keypairpack(empty,empty) in
        {5}let rs_534: key = empty in
        {6}let re_535: key = empty in
        {7}let v_536: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_537: key = catch-fail(v_536) in
        {9}let v_538: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_539: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (if not-caught-fail(v_538) then symmetricstatepack(v_538,v_537,v_536) else fail-any) else fail-any) else fail-any))) in
        {11}let v_540: symmetricstate = catch-fail((if success?((if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (if not-caught-fail(v_538) then symmetricstatepack(v_538,v_537,v_536) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_540) then handshakestatepack(v_540,s_532,e_533,rs_534,re_535,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {36}get statestore(=alice,=bob,statepack_a(hs_541: handshakestate)) in
        {14}let v_542: bitstring = catch-fail(handshakestateunpack(hs_541)) in
        {15}let v_543: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_544: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_545: keypair = catch-fail((if not-caught-fail(v_544) then keypairpack(v_544,key_e(alice,bob)) else fail-any)) in
        {18}let v_546: bitstring = catch-fail(getpublickey(v_545)) in
        {19}let v_547: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_542))) in
        {20}let v_548: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_542)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),v_546)) else fail-any) else fail-any)) in
        {21}let v_549: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {22}let v_550: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {23}let v_551: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_550),2-proj-2-tuple(v_550),3-proj-3-tuple(v_549),msg_a(alice,bob))) in
        {24}let v_552: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {25}let v_553: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_550))) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then cipherstatepack(1-proj-2-tuple(v_552),increment_nonce(2-proj-2-tuple(v_550))) else fail-any) else fail-any)) in
        {26}let v_554: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_549)) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_553) then (v_553,v_551) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {27}let v_555: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) in
        {28}let v_556: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_554)) && success?(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_555),hash(3-proj-3-tuple(v_555),2-proj-2-tuple(v_554))) else fail-any) else fail-any)) in
        {29}let v_557: bitstring = catch-fail((if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then (if not-caught-fail(v_556) then (v_556,2-proj-2-tuple(v_554)) else fail-any) else fail-any) else fail-any)) in
        {30}let v_558: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_557),2-proj-7-tuple(v_542),v_545,4-proj-7-tuple(v_542),5-proj-7-tuple(v_542),6-proj-7-tuple(v_542),7-proj-7-tuple(v_542))) in
        {31}let v_559: bitstring = catch-fail(concat3(v_546,2-proj-3-tuple(v_543),2-proj-2-tuple(v_557))) in
        {32}let (hs_560: handshakestate,re_561: key,message_a: bitstring) = (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-7-tuple(v_542))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (v_558,5-proj-7-tuple(v_542),v_559) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {33}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {34}insert statestore(alice,bob,statepack_b(hs_560));
        {35}out(pub, message_a)
    ) | (
        {77}get statestore(=alice,=bob,statepack_b(hs_562: handshakestate)) in
        {37}in(pub, message_b: bitstring);
        {38}let v_563: bitstring = catch-fail(handshakestateunpack(hs_562)) in
        {39}let v_564: bitstring = catch-fail(deconcat3(message_b)) in
        {40}let v_565: bool = catch-fail(true) in
        {41}let v_566: key = catch-fail(1-proj-3-tuple(v_564)) in
        {42}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_563))) in
        {43}let v_568: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_563)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then symmetricstatepack(1-proj-3-tuple(v_567),2-proj-3-tuple(v_567),hash(3-proj-3-tuple(v_567),v_566)) else fail-any) else fail-any)) in
        {44}let v_569: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_563))) in
        {45}let v_570: bitstring = catch-fail(symmetricstateunpack(v_568)) in
        {46}let v_571: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {47}let v_572: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {48}let v_573: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {49}let v_574: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_570))) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (v_571,v_572,v_573) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_575: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_574)) then cipherstatepack(2-proj-3-tuple(v_574),minnonce) else fail-any),1-proj-3-tuple(v_574),3-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any)) in
        {51}let v_576: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {52}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {53}let v_578: aead = catch-fail(decrypt(1-proj-2-tuple(v_577),2-proj-2-tuple(v_577),3-proj-3-tuple(v_576),2-proj-3-tuple(v_564))) in
        {54}let v_579: bitstring = catch-fail(aeadunpack(v_578)) in
        {55}let v_580: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {56}let v_581: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_577))) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then cipherstatepack(1-proj-2-tuple(v_580),increment_nonce(2-proj-2-tuple(v_577))) else fail-any) else fail-any)) in
        {57}let v_582: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_564)) && (success?(3-proj-3-tuple(v_576)) && success?(1-proj-3-tuple(v_576)))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then (if not-caught-fail(v_578) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_581) then (v_581,3-proj-3-tuple(v_579),1-proj-3-tuple(v_579)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {58}let v_583: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) in
        {59}let v_584: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_564)) && success?(symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then symmetricstatepack(1-proj-3-tuple(v_583),2-proj-3-tuple(v_583),hash(3-proj-3-tuple(v_583),2-proj-3-tuple(v_564))) else fail-any) else fail-any)) in
        {60}let v_585: bitstring = catch-fail((if success?(2-proj-3-tuple(v_564)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if not-caught-fail(v_584) then (v_584,2-proj-3-tuple(v_582),3-proj-3-tuple(v_582)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_586: key = catch-fail(2-proj-3-tuple(v_585)) in
        {62}let v_587: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_585))) in
        {63}let v_588: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {64}let v_589: aead = catch-fail(decrypt(1-proj-2-tuple(v_588),2-proj-2-tuple(v_588),3-proj-3-tuple(v_587),3-proj-3-tuple(v_564))) in
        {65}let v_590: bitstring = catch-fail(aeadunpack(v_589)) in
        {66}let v_591: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_587))) in
        {67}let v_592: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_588))) && success?(1-proj-3-tuple(v_587))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then cipherstatepack(1-proj-2-tuple(v_591),increment_nonce(2-proj-2-tuple(v_588))) else fail-any) else fail-any)) in
        {68}let v_593: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && (success?(3-proj-3-tuple(v_587)) && success?(1-proj-3-tuple(v_587)))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then (if not-caught-fail(v_589) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if not-caught-fail(v_592) then (v_592,3-proj-3-tuple(v_590),1-proj-3-tuple(v_590)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {69}let v_594: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) in
        {70}let v_595: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(symmetricstatepack(1-proj-3-tuple(v_593),2-proj-3-tuple(v_587),3-proj-3-tuple(v_587)))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),3-proj-3-tuple(v_564))) else fail-any) else fail-any)) in
        {71}let v_596: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(1-proj-3-tuple(v_585))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if not-caught-fail(v_595) then (v_595,2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_597: key = catch-fail(dhexp(key_s(bob),g)) in
        {73}let v_598: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_596),2-proj-7-tuple(v_563),3-proj-7-tuple(v_563),v_586,v_566,6-proj-7-tuple(v_563),7-proj-7-tuple(v_563))) in
        {74}let (hs_599: handshakestate,re_600: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-7-tuple(v_563))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then (if not-caught-fail(v_575) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if not-caught-fail(v_586) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if ((3-proj-3-tuple(v_585) && 3-proj-3-tuple(v_596)) && (v_586 = getpublickey((if not-caught-fail(v_597) then keypairpack(v_597,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_598) then (v_598,getpublickey(3-proj-7-tuple(v_563)),2-proj-3-tuple(v_596),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {75}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {76}insert statestore(alice,bob,statepack_c(hs_599))
    ) | (
        {113}get statestore(=alice,=bob,statepack_c(hs_601: handshakestate)) in
        {78}let v_602: bitstring = catch-fail(handshakestateunpack(hs_601)) in
        {79}let v_603: bitstring = catch-fail((empty,empty,empty)) in
        {80}let v_604: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_602))) in
        {81}let v_605: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_602))) in
        {82}let v_606: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_605),(if (success?(4-proj-7-tuple(v_602)) && success?(3-proj-7-tuple(v_602))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_602)) else fail-any) else fail-any))) in
        {83}let v_607: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_605),(if (success?(4-proj-7-tuple(v_602)) && success?(3-proj-7-tuple(v_602))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_602)) else fail-any) else fail-any))) in
        {84}let v_608: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_605),(if (success?(4-proj-7-tuple(v_602)) && success?(3-proj-7-tuple(v_602))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_602)) else fail-any) else fail-any))) in
        {85}let v_609: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_602)) && success?(3-proj-7-tuple(v_602))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_602)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_605))) then (if not-caught-fail(v_606) then (if not-caught-fail(v_607) then (if not-caught-fail(v_608) then (v_606,v_607,v_608) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_610: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_602)) && success?(3-proj-7-tuple(v_602))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then dhexp(2-proj-2-tuple(v_604),4-proj-7-tuple(v_602)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_602))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_609)) then cipherstatepack(2-proj-3-tuple(v_609),minnonce) else fail-any),1-proj-3-tuple(v_609),3-proj-3-tuple(v_605)) else fail-any) else fail-any) else fail-any)) in
        {87}let v_611: key = catch-fail(dhexp(key_s(alice),g)) in
        {88}let v_612: keypair = catch-fail((if not-caught-fail(v_611) then keypairpack(v_611,key_s(alice)) else fail-any)) in
        {89}let v_613: bitstring = catch-fail(symmetricstateunpack(v_610)) in
        {90}let v_614: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_613))) in
        {91}let v_615: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_614),2-proj-2-tuple(v_614),3-proj-3-tuple(v_613),getpublickey(v_612))) in
        {92}let v_616: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_613))) in
        {93}let v_617: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_614))) && success?(1-proj-3-tuple(v_613))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then cipherstatepack(1-proj-2-tuple(v_616),increment_nonce(2-proj-2-tuple(v_614))) else fail-any) else fail-any)) in
        {94}let v_618: bitstring = catch-fail((if (success?(getpublickey(v_612)) && (success?(3-proj-3-tuple(v_613)) && success?(1-proj-3-tuple(v_613)))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_617) then (v_617,v_615) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_619: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_618),2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)))) in
        {96}let v_620: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_618)) && success?(symmetricstatepack(1-proj-2-tuple(v_618),2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then symmetricstatepack(1-proj-3-tuple(v_619),2-proj-3-tuple(v_619),hash(3-proj-3-tuple(v_619),2-proj-2-tuple(v_618))) else fail-any) else fail-any)) in
        {97}let v_621: bitstring = catch-fail((if success?(getpublickey(v_612)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_620) then (v_620,2-proj-2-tuple(v_618)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_622: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_621))) in
        {99}let v_623: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_622))) in
        {100}let v_624: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_623),2-proj-2-tuple(v_623),3-proj-3-tuple(v_622),msg_c(alice,bob))) in
        {101}let v_625: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_622))) in
        {102}let v_626: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_623))) && success?(1-proj-3-tuple(v_622))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then cipherstatepack(1-proj-2-tuple(v_625),increment_nonce(2-proj-2-tuple(v_623))) else fail-any) else fail-any)) in
        {103}let v_627: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_622)) && success?(1-proj-3-tuple(v_622))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_626) then (v_626,v_624) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_628: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_627),2-proj-3-tuple(v_622),3-proj-3-tuple(v_622)))) in
        {105}let v_629: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_627)) && success?(symmetricstatepack(1-proj-2-tuple(v_627),2-proj-3-tuple(v_622),3-proj-3-tuple(v_622)))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then symmetricstatepack(1-proj-3-tuple(v_628),2-proj-3-tuple(v_628),hash(3-proj-3-tuple(v_628),2-proj-2-tuple(v_627))) else fail-any) else fail-any)) in
        {106}let v_630: bitstring = catch-fail((if success?(1-proj-2-tuple(v_621)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then (if not-caught-fail(v_629) then (v_629,2-proj-2-tuple(v_627)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_631: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_630),v_612,3-proj-7-tuple(v_602),4-proj-7-tuple(v_602),5-proj-7-tuple(v_602),6-proj-7-tuple(v_602),7-proj-7-tuple(v_602))) in
        {108}let v_632: bitstring = catch-fail(concat3(1-proj-3-tuple(v_603),2-proj-2-tuple(v_621),2-proj-2-tuple(v_630))) in
        {109}let (hs_633: handshakestate,re_634: key,message_c: bitstring) = (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-7-tuple(v_602))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_612) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-2-tuple(v_630))))) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (v_631,5-proj-7-tuple(v_602),v_632) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {110}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {111}insert statestore(alice,bob,statepack_d(hs_633));
        {112}out(pub, message_c)
    ) | (
        {132}get statestore(=alice,=bob,statepack_d(hs_635: handshakestate)) in
        {114}in(pub, message_d: bitstring);
        {115}let v_636: bitstring = catch-fail(handshakestateunpack(hs_635)) in
        {116}let v_637: bitstring = catch-fail(deconcat3(message_d)) in
        {117}let v_638: bool = catch-fail(true) in
        {118}let v_639: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_636))) in
        {119}let v_640: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_639))) in
        {120}let v_641: aead = catch-fail(decrypt(1-proj-2-tuple(v_640),2-proj-2-tuple(v_640),3-proj-3-tuple(v_639),3-proj-3-tuple(v_637))) in
        {121}let v_642: bitstring = catch-fail(aeadunpack(v_641)) in
        {122}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_639))) in
        {123}let v_644: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_640))) && success?(1-proj-3-tuple(v_639))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then cipherstatepack(1-proj-2-tuple(v_643),increment_nonce(2-proj-2-tuple(v_640))) else fail-any) else fail-any)) in
        {124}let v_645: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_637)) && (success?(3-proj-3-tuple(v_639)) && success?(1-proj-3-tuple(v_639)))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then (if not-caught-fail(v_641) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if not-caught-fail(v_644) then (v_644,3-proj-3-tuple(v_642),1-proj-3-tuple(v_642)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {125}let v_646: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_645),2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)))) in
        {126}let v_647: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_637)) && success?(symmetricstatepack(1-proj-3-tuple(v_645),2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_646),hash(3-proj-3-tuple(v_646),3-proj-3-tuple(v_637))) else fail-any) else fail-any)) in
        {127}let v_648: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_637)) && success?(1-proj-7-tuple(v_636))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then (if not-caught-fail(v_647) then (v_647,2-proj-3-tuple(v_645),3-proj-3-tuple(v_645)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {128}let v_649: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_648),2-proj-7-tuple(v_636),3-proj-7-tuple(v_636),4-proj-7-tuple(v_636),5-proj-7-tuple(v_636),6-proj-7-tuple(v_636),7-proj-7-tuple(v_636))) in
        {129}let (hs_650: handshakestate,re_651: key,plaintext_d: bitstring,valid_652: bool) = (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-7-tuple(v_636))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_638) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if (v_638 && 3-proj-3-tuple(v_648)) then (if not-caught-fail(v_649) then (v_649,getpublickey(3-proj-7-tuple(v_636)),2-proj-3-tuple(v_648),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {130}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_652);
        {131}insert statestore(alice,bob,statepack_e(hs_650))
    ) | (
        {158}get statestore(=alice,=bob,statepack_e(hs_653: handshakestate)) in
        {133}let v_654: bitstring = catch-fail(handshakestateunpack(hs_653)) in
        {134}let v_655: bitstring = catch-fail((empty,empty,empty)) in
        {135}let v_656: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_654))) in
        {136}let v_657: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_656))) in
        {137}let v_658: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_657),2-proj-2-tuple(v_657),3-proj-3-tuple(v_656),msg_e(alice,bob))) in
        {138}let v_659: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_656))) in
        {139}let v_660: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_657))) && success?(1-proj-3-tuple(v_656))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then cipherstatepack(1-proj-2-tuple(v_659),increment_nonce(2-proj-2-tuple(v_657))) else fail-any) else fail-any)) in
        {140}let v_661: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_656)) && success?(1-proj-3-tuple(v_656))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_658) then (if not-caught-fail(v_660) then (v_660,v_658) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {141}let v_662: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_661),2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)))) in
        {142}let v_663: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_661)) && success?(symmetricstatepack(1-proj-2-tuple(v_661),2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then symmetricstatepack(1-proj-3-tuple(v_662),2-proj-3-tuple(v_662),hash(3-proj-3-tuple(v_662),2-proj-2-tuple(v_661))) else fail-any) else fail-any)) in
        {143}let v_664: bitstring = catch-fail((if success?(1-proj-7-tuple(v_654)) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then (if not-caught-fail(v_663) then (v_663,2-proj-2-tuple(v_661)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {144}let v_665: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_664),2-proj-7-tuple(v_654),3-proj-7-tuple(v_654),4-proj-7-tuple(v_654),5-proj-7-tuple(v_654),6-proj-7-tuple(v_654),7-proj-7-tuple(v_654))) in
        {145}let v_666: bitstring = catch-fail(concat3(1-proj-3-tuple(v_655),2-proj-3-tuple(v_655),2-proj-2-tuple(v_664))) in
        {146}let v_667: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_664))) in
        {147}let v_668: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_667),zero)) in
        {148}let v_669: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_667),zero)) in
        {149}let v_670: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_667),zero)) in
        {150}let v_671: bitstring = catch-fail((if success?(2-proj-3-tuple(v_667)) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (v_668,v_669,v_670) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {151}let v_672: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_671)) then cipherstatepack(1-proj-3-tuple(v_671),minnonce) else fail-any)) in
        {152}let v_673: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_671)) then cipherstatepack(2-proj-3-tuple(v_671),minnonce) else fail-any)) in
        {153}let v_674: bitstring = catch-fail((if success?(1-proj-2-tuple(v_664)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if not-caught-fail(v_672) then (if not-caught-fail(v_673) then (1-proj-2-tuple(v_664),v_672,v_673) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {154}let (hs_675: handshakestate,re_676: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-7-tuple(v_654))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (v_665,5-proj-7-tuple(v_654),v_666,2-proj-3-tuple(v_674),3-proj-3-tuple(v_674)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {155}event SendMsg(alice,bob,stage_e,msg_e(alice,bob),true);
        {156}insert statestore(alice,bob,statepack_f(hs_675));
        {157}out(pub, message_e)
    ) | (
        {159}event LeakS(phase0,alice);
        {160}out(pub, key_s(alice))
    ) | (
        {161}phase 1;
        {162}event LeakS(phase1,alice);
        {163}out(pub, key_s(alice))
    )
) | (
    {164}let s_677: keypair = keypairpack(empty,empty) in
    {165}out(pub, getpublickey(s_677));
    (
        {166}let e_678: keypair = keypairpack(empty,empty) in
        {167}let rs_679: key = empty in
        {168}let re_680: key = empty in
        {169}let v_681: bitstring = catch-fail(hash(somename,empty)) in
        {170}let v_682: key = catch-fail(v_681) in
        {171}let v_683: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {172}let v_684: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_681) then (if not-caught-fail(v_682) then (if not-caught-fail(v_683) then symmetricstatepack(v_683,v_682,v_681) else fail-any) else fail-any) else fail-any))) in
        {173}let v_685: symmetricstate = catch-fail((if success?((if not-caught-fail(v_681) then (if not-caught-fail(v_682) then (if not-caught-fail(v_683) then symmetricstatepack(v_683,v_682,v_681) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_684),hash(3-proj-3-tuple(v_684),empty)) else fail-any) else fail-any)) in
        {174}let hs_686: handshakestate = (if not-caught-fail(v_685) then handshakestatepack(v_685,s_677,e_678,rs_679,re_680,empty,true) else fail-any) in
        {175}insert statestore(alice,charlie,statepack_a(hs_686))
    ) | (
        {198}get statestore(=alice,=charlie,statepack_a(hs_687: handshakestate)) in
        {176}let v_688: bitstring = catch-fail(handshakestateunpack(hs_687)) in
        {177}let v_689: bitstring = catch-fail((empty,empty,empty)) in
        {178}let v_690: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {179}let v_691: keypair = catch-fail((if not-caught-fail(v_690) then keypairpack(v_690,key_e(alice,charlie)) else fail-any)) in
        {180}let v_692: bitstring = catch-fail(getpublickey(v_691)) in
        {181}let v_693: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_688))) in
        {182}let v_694: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_688)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_693),hash(3-proj-3-tuple(v_693),v_692)) else fail-any) else fail-any)) in
        {183}let v_695: bitstring = catch-fail(symmetricstateunpack(v_694)) in
        {184}let v_696: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_695))) in
        {185}let v_697: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_696),2-proj-2-tuple(v_696),3-proj-3-tuple(v_695),msg_a(alice,charlie))) in
        {186}let v_698: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_695))) in
        {187}let v_699: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_696))) && success?(1-proj-3-tuple(v_695))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then cipherstatepack(1-proj-2-tuple(v_698),increment_nonce(2-proj-2-tuple(v_696))) else fail-any) else fail-any)) in
        {188}let v_700: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_695)) && success?(1-proj-3-tuple(v_695))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_699) then (v_699,v_697) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_701: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_700),2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)))) in
        {190}let v_702: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_700)) && success?(symmetricstatepack(1-proj-2-tuple(v_700),2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_701),hash(3-proj-3-tuple(v_701),2-proj-2-tuple(v_700))) else fail-any) else fail-any)) in
        {191}let v_703: bitstring = catch-fail((if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then (if not-caught-fail(v_702) then (v_702,2-proj-2-tuple(v_700)) else fail-any) else fail-any) else fail-any)) in
        {192}let v_704: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_703),2-proj-7-tuple(v_688),v_691,4-proj-7-tuple(v_688),5-proj-7-tuple(v_688),6-proj-7-tuple(v_688),7-proj-7-tuple(v_688))) in
        {193}let v_705: bitstring = catch-fail(concat3(v_692,2-proj-3-tuple(v_689),2-proj-2-tuple(v_703))) in
        {194}let (hs_706: handshakestate,re_707: key,message_a_708: bitstring) = (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-7-tuple(v_688))))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (if not-caught-fail(v_694) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (v_704,5-proj-7-tuple(v_688),v_705) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {195}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {196}insert statestore(alice,charlie,statepack_b(hs_706));
        {197}out(pub, message_a_708)
    ) | (
        {239}get statestore(=alice,=charlie,statepack_b(hs_709: handshakestate)) in
        {199}in(pub, message_b_710: bitstring);
        {200}let v_711: bitstring = catch-fail(handshakestateunpack(hs_709)) in
        {201}let v_712: bitstring = catch-fail(deconcat3(message_b_710)) in
        {202}let v_713: bool = catch-fail(true) in
        {203}let v_714: key = catch-fail(1-proj-3-tuple(v_712)) in
        {204}let v_715: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_711))) in
        {205}let v_716: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_711)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then symmetricstatepack(1-proj-3-tuple(v_715),2-proj-3-tuple(v_715),hash(3-proj-3-tuple(v_715),v_714)) else fail-any) else fail-any)) in
        {206}let v_717: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_711))) in
        {207}let v_718: bitstring = catch-fail(symmetricstateunpack(v_716)) in
        {208}let v_719: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_718),(if success?(3-proj-7-tuple(v_711)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),v_714) else fail-any) else fail-any))) in
        {209}let v_720: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_718),(if success?(3-proj-7-tuple(v_711)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),v_714) else fail-any) else fail-any))) in
        {210}let v_721: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_718),(if success?(3-proj-7-tuple(v_711)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),v_714) else fail-any) else fail-any))) in
        {211}let v_722: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_711)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),v_714) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_718))) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (if not-caught-fail(v_721) then (v_719,v_720,v_721) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_723: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_711)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),v_714) else fail-any) else fail-any)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_722)) then cipherstatepack(2-proj-3-tuple(v_722),minnonce) else fail-any),1-proj-3-tuple(v_722),3-proj-3-tuple(v_718)) else fail-any) else fail-any) else fail-any)) in
        {213}let v_724: bitstring = catch-fail(symmetricstateunpack(v_723)) in
        {214}let v_725: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_724))) in
        {215}let v_726: aead = catch-fail(decrypt(1-proj-2-tuple(v_725),2-proj-2-tuple(v_725),3-proj-3-tuple(v_724),2-proj-3-tuple(v_712))) in
        {216}let v_727: bitstring = catch-fail(aeadunpack(v_726)) in
        {217}let v_728: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_724))) in
        {218}let v_729: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_725))) && success?(1-proj-3-tuple(v_724))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-2-tuple(v_728))))) then cipherstatepack(1-proj-2-tuple(v_728),increment_nonce(2-proj-2-tuple(v_725))) else fail-any) else fail-any)) in
        {219}let v_730: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_712)) && (success?(3-proj-3-tuple(v_724)) && success?(1-proj-3-tuple(v_724)))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-2-tuple(v_725))))) then (if not-caught-fail(v_726) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if not-caught-fail(v_729) then (v_729,3-proj-3-tuple(v_727),1-proj-3-tuple(v_727)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {220}let v_731: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_730),2-proj-3-tuple(v_724),3-proj-3-tuple(v_724)))) in
        {221}let v_732: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_712)) && success?(symmetricstatepack(1-proj-3-tuple(v_730),2-proj-3-tuple(v_724),3-proj-3-tuple(v_724)))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then symmetricstatepack(1-proj-3-tuple(v_731),2-proj-3-tuple(v_731),hash(3-proj-3-tuple(v_731),2-proj-3-tuple(v_712))) else fail-any) else fail-any)) in
        {222}let v_733: bitstring = catch-fail((if success?(2-proj-3-tuple(v_712)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_732) then (v_732,2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {223}let v_734: key = catch-fail(2-proj-3-tuple(v_733)) in
        {224}let v_735: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_733))) in
        {225}let v_736: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_735))) in
        {226}let v_737: aead = catch-fail(decrypt(1-proj-2-tuple(v_736),2-proj-2-tuple(v_736),3-proj-3-tuple(v_735),3-proj-3-tuple(v_712))) in
        {227}let v_738: bitstring = catch-fail(aeadunpack(v_737)) in
        {228}let v_739: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_735))) in
        {229}let v_740: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_736))) && success?(1-proj-3-tuple(v_735))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then cipherstatepack(1-proj-2-tuple(v_739),increment_nonce(2-proj-2-tuple(v_736))) else fail-any) else fail-any)) in
        {230}let v_741: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_712)) && (success?(3-proj-3-tuple(v_735)) && success?(1-proj-3-tuple(v_735)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then (if not-caught-fail(v_737) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if not-caught-fail(v_740) then (v_740,3-proj-3-tuple(v_738),1-proj-3-tuple(v_738)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {231}let v_742: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)))) in
        {232}let v_743: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_712)) && success?(symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then symmetricstatepack(1-proj-3-tuple(v_742),2-proj-3-tuple(v_742),hash(3-proj-3-tuple(v_742),3-proj-3-tuple(v_712))) else fail-any) else fail-any)) in
        {233}let v_744: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_712)) && success?(1-proj-3-tuple(v_733))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_743) then (v_743,2-proj-3-tuple(v_741),3-proj-3-tuple(v_741)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {234}let v_745: key = catch-fail(dhexp(key_s(charlie),g)) in
        {235}let v_746: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_744),2-proj-7-tuple(v_711),3-proj-7-tuple(v_711),v_734,v_714,6-proj-7-tuple(v_711),7-proj-7-tuple(v_711))) in
        {236}let (hs_747: handshakestate,re_748: key,plaintext_b_749: bitstring,valid_750: bool) = (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-7-tuple(v_711))))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if not-caught-fail(v_713) then (if not-caught-fail(v_714) then (if not-caught-fail(v_716) then (if not-caught-fail(v_723) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_734) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if ((3-proj-3-tuple(v_733) && 3-proj-3-tuple(v_744)) && (v_734 = getpublickey((if not-caught-fail(v_745) then keypairpack(v_745,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_746) then (v_746,getpublickey(3-proj-7-tuple(v_711)),2-proj-3-tuple(v_744),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {237}event RecvMsg(alice,charlie,stage_b,plaintext_b_749,valid_750);
        {238}insert statestore(alice,charlie,statepack_c(hs_747))
    ) | (
        {275}get statestore(=alice,=charlie,statepack_c(hs_751: handshakestate)) in
        {240}let v_752: bitstring = catch-fail(handshakestateunpack(hs_751)) in
        {241}let v_753: bitstring = catch-fail((empty,empty,empty)) in
        {242}let v_754: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_752))) in
        {243}let v_755: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_752))) in
        {244}let v_756: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_755),(if (success?(4-proj-7-tuple(v_752)) && success?(3-proj-7-tuple(v_752))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_752)) else fail-any) else fail-any))) in
        {245}let v_757: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_755),(if (success?(4-proj-7-tuple(v_752)) && success?(3-proj-7-tuple(v_752))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_752)) else fail-any) else fail-any))) in
        {246}let v_758: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_755),(if (success?(4-proj-7-tuple(v_752)) && success?(3-proj-7-tuple(v_752))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_752)) else fail-any) else fail-any))) in
        {247}let v_759: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_752)) && success?(3-proj-7-tuple(v_752))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_752)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_755))) then (if not-caught-fail(v_756) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (v_756,v_757,v_758) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let v_760: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_752)) && success?(3-proj-7-tuple(v_752))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),4-proj-7-tuple(v_752)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_752))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_759)) then cipherstatepack(2-proj-3-tuple(v_759),minnonce) else fail-any),1-proj-3-tuple(v_759),3-proj-3-tuple(v_755)) else fail-any) else fail-any) else fail-any)) in
        {249}let v_761: key = catch-fail(dhexp(key_s(alice),g)) in
        {250}let v_762: keypair = catch-fail((if not-caught-fail(v_761) then keypairpack(v_761,key_s(alice)) else fail-any)) in
        {251}let v_763: bitstring = catch-fail(symmetricstateunpack(v_760)) in
        {252}let v_764: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_763))) in
        {253}let v_765: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_764),2-proj-2-tuple(v_764),3-proj-3-tuple(v_763),getpublickey(v_762))) in
        {254}let v_766: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_763))) in
        {255}let v_767: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_764))) && success?(1-proj-3-tuple(v_763))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then cipherstatepack(1-proj-2-tuple(v_766),increment_nonce(2-proj-2-tuple(v_764))) else fail-any) else fail-any)) in
        {256}let v_768: bitstring = catch-fail((if (success?(getpublickey(v_762)) && (success?(3-proj-3-tuple(v_763)) && success?(1-proj-3-tuple(v_763)))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then (if not-caught-fail(v_765) then (if not-caught-fail(v_767) then (v_767,v_765) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {257}let v_769: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_768),2-proj-3-tuple(v_763),3-proj-3-tuple(v_763)))) in
        {258}let v_770: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_768)) && success?(symmetricstatepack(1-proj-2-tuple(v_768),2-proj-3-tuple(v_763),3-proj-3-tuple(v_763)))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then symmetricstatepack(1-proj-3-tuple(v_769),2-proj-3-tuple(v_769),hash(3-proj-3-tuple(v_769),2-proj-2-tuple(v_768))) else fail-any) else fail-any)) in
        {259}let v_771: bitstring = catch-fail((if success?(getpublickey(v_762)) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_770) then (v_770,2-proj-2-tuple(v_768)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let v_772: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_771))) in
        {261}let v_773: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_772))) in
        {262}let v_774: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_773),2-proj-2-tuple(v_773),3-proj-3-tuple(v_772),msg_c(alice,charlie))) in
        {263}let v_775: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_772))) in
        {264}let v_776: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_773))) && success?(1-proj-3-tuple(v_772))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then cipherstatepack(1-proj-2-tuple(v_775),increment_nonce(2-proj-2-tuple(v_773))) else fail-any) else fail-any)) in
        {265}let v_777: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_772)) && success?(1-proj-3-tuple(v_772))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-2-tuple(v_773))))) then (if not-caught-fail(v_774) then (if not-caught-fail(v_776) then (v_776,v_774) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_778: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_777),2-proj-3-tuple(v_772),3-proj-3-tuple(v_772)))) in
        {267}let v_779: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_777)) && success?(symmetricstatepack(1-proj-2-tuple(v_777),2-proj-3-tuple(v_772),3-proj-3-tuple(v_772)))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then symmetricstatepack(1-proj-3-tuple(v_778),2-proj-3-tuple(v_778),hash(3-proj-3-tuple(v_778),2-proj-2-tuple(v_777))) else fail-any) else fail-any)) in
        {268}let v_780: bitstring = catch-fail((if success?(1-proj-2-tuple(v_771)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then (if not-caught-fail(v_779) then (v_779,2-proj-2-tuple(v_777)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {269}let v_781: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_780),v_762,3-proj-7-tuple(v_752),4-proj-7-tuple(v_752),5-proj-7-tuple(v_752),6-proj-7-tuple(v_752),7-proj-7-tuple(v_752))) in
        {270}let v_782: bitstring = catch-fail(concat3(1-proj-3-tuple(v_753),2-proj-2-tuple(v_771),2-proj-2-tuple(v_780))) in
        {271}let (hs_783: handshakestate,re_784: key,message_c_785: bitstring) = (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-7-tuple(v_752))))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_762) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then (if not-caught-fail(v_781) then (if not-caught-fail(v_782) then (v_781,5-proj-7-tuple(v_752),v_782) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {272}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {273}insert statestore(alice,charlie,statepack_d(hs_783));
        {274}out(pub, message_c_785)
    ) | (
        {294}get statestore(=alice,=charlie,statepack_d(hs_786: handshakestate)) in
        {276}in(pub, message_d_787: bitstring);
        {277}let v_788: bitstring = catch-fail(handshakestateunpack(hs_786)) in
        {278}let v_789: bitstring = catch-fail(deconcat3(message_d_787)) in
        {279}let v_790: bool = catch-fail(true) in
        {280}let v_791: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_788))) in
        {281}let v_792: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {282}let v_793: aead = catch-fail(decrypt(1-proj-2-tuple(v_792),2-proj-2-tuple(v_792),3-proj-3-tuple(v_791),3-proj-3-tuple(v_789))) in
        {283}let v_794: bitstring = catch-fail(aeadunpack(v_793)) in
        {284}let v_795: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {285}let v_796: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_792))) && success?(1-proj-3-tuple(v_791))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then cipherstatepack(1-proj-2-tuple(v_795),increment_nonce(2-proj-2-tuple(v_792))) else fail-any) else fail-any)) in
        {286}let v_797: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_789)) && (success?(3-proj-3-tuple(v_791)) && success?(1-proj-3-tuple(v_791)))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then (if not-caught-fail(v_793) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (if not-caught-fail(v_796) then (v_796,3-proj-3-tuple(v_794),1-proj-3-tuple(v_794)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {287}let v_798: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) in
        {288}let v_799: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_789)) && success?(symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then symmetricstatepack(1-proj-3-tuple(v_798),2-proj-3-tuple(v_798),hash(3-proj-3-tuple(v_798),3-proj-3-tuple(v_789))) else fail-any) else fail-any)) in
        {289}let v_800: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_789)) && success?(1-proj-7-tuple(v_788))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then (if not-caught-fail(v_799) then (v_799,2-proj-3-tuple(v_797),3-proj-3-tuple(v_797)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {290}let v_801: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_800),2-proj-7-tuple(v_788),3-proj-7-tuple(v_788),4-proj-7-tuple(v_788),5-proj-7-tuple(v_788),6-proj-7-tuple(v_788),7-proj-7-tuple(v_788))) in
        {291}let (hs_802: handshakestate,re_803: key,plaintext_d_804: bitstring,valid_805: bool) = (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-7-tuple(v_788))))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if not-caught-fail(v_790) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then (if (v_790 && 3-proj-3-tuple(v_800)) then (if not-caught-fail(v_801) then (v_801,getpublickey(3-proj-7-tuple(v_788)),2-proj-3-tuple(v_800),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {292}event RecvMsg(alice,charlie,stage_d,plaintext_d_804,valid_805);
        {293}insert statestore(alice,charlie,statepack_e(hs_802))
    ) | (
        {320}get statestore(=alice,=charlie,statepack_e(hs_806: handshakestate)) in
        {295}let v_807: bitstring = catch-fail(handshakestateunpack(hs_806)) in
        {296}let v_808: bitstring = catch-fail((empty,empty,empty)) in
        {297}let v_809: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_807))) in
        {298}let v_810: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_809))) in
        {299}let v_811: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_810),2-proj-2-tuple(v_810),3-proj-3-tuple(v_809),msg_e(alice,charlie))) in
        {300}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_809))) in
        {301}let v_813: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_810))) && success?(1-proj-3-tuple(v_809))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then cipherstatepack(1-proj-2-tuple(v_812),increment_nonce(2-proj-2-tuple(v_810))) else fail-any) else fail-any)) in
        {302}let v_814: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_809)) && success?(1-proj-3-tuple(v_809))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_811) then (if not-caught-fail(v_813) then (v_813,v_811) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_815: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_814),2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)))) in
        {304}let v_816: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_814)) && success?(symmetricstatepack(1-proj-2-tuple(v_814),2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_815),hash(3-proj-3-tuple(v_815),2-proj-2-tuple(v_814))) else fail-any) else fail-any)) in
        {305}let v_817: bitstring = catch-fail((if success?(1-proj-7-tuple(v_807)) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then (if not-caught-fail(v_816) then (v_816,2-proj-2-tuple(v_814)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_818: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_817),2-proj-7-tuple(v_807),3-proj-7-tuple(v_807),4-proj-7-tuple(v_807),5-proj-7-tuple(v_807),6-proj-7-tuple(v_807),7-proj-7-tuple(v_807))) in
        {307}let v_819: bitstring = catch-fail(concat3(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),2-proj-2-tuple(v_817))) in
        {308}let v_820: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_817))) in
        {309}let v_821: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_820),zero)) in
        {310}let v_822: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_820),zero)) in
        {311}let v_823: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_820),zero)) in
        {312}let v_824: bitstring = catch-fail((if success?(2-proj-3-tuple(v_820)) then (if not-caught-fail(v_821) then (if not-caught-fail(v_822) then (if not-caught-fail(v_823) then (v_821,v_822,v_823) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {313}let v_825: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_824)) then cipherstatepack(1-proj-3-tuple(v_824),minnonce) else fail-any)) in
        {314}let v_826: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_824)) then cipherstatepack(2-proj-3-tuple(v_824),minnonce) else fail-any)) in
        {315}let v_827: bitstring = catch-fail((if success?(1-proj-2-tuple(v_817)) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if not-caught-fail(v_825) then (if not-caught-fail(v_826) then (1-proj-2-tuple(v_817),v_825,v_826) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let (hs_828: handshakestate,re_829: key,message_e_830: bitstring,cs1_831: cipherstate,cs2_832: cipherstate) = (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-7-tuple(v_807))))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-2-tuple(v_817))))) then (if not-caught-fail(v_818) then (if not-caught-fail(v_819) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (v_818,5-proj-7-tuple(v_807),v_819,2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {317}event SendMsg(alice,charlie,stage_e,msg_e(alice,charlie),true);
        {318}insert statestore(alice,charlie,statepack_f(hs_828));
        {319}out(pub, message_e_830)
    ) | (
        {321}event LeakS(phase0,alice);
        {322}out(pub, key_s(alice))
    ) | (
        {323}phase 1;
        {324}event LeakS(phase1,alice);
        {325}out(pub, key_s(alice))
    )
) | (
    {326}let s_833: keypair = keypairpack(empty,empty) in
    {327}out(pub, getpublickey(s_833));
    (
        {328}let e_834: keypair = keypairpack(empty,empty) in
        {329}let rs_835: key = empty in
        {330}let re_836: key = empty in
        {331}let v_837: bitstring = catch-fail(hash(somename,empty)) in
        {332}let v_838: key = catch-fail(v_837) in
        {333}let v_839: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {334}let v_840: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (if not-caught-fail(v_839) then symmetricstatepack(v_839,v_838,v_837) else fail-any) else fail-any) else fail-any))) in
        {335}let v_841: symmetricstate = catch-fail((if success?((if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (if not-caught-fail(v_839) then symmetricstatepack(v_839,v_838,v_837) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then symmetricstatepack(1-proj-3-tuple(v_840),2-proj-3-tuple(v_840),hash(3-proj-3-tuple(v_840),empty)) else fail-any) else fail-any)) in
        {336}let hs_842: handshakestate = (if not-caught-fail(v_841) then handshakestatepack(v_841,s_833,e_834,rs_835,re_836,empty,false) else fail-any) in
        {337}insert statestore(bob,alice,statepack_a(hs_842))
    ) | (
        {359}get statestore(=bob,=alice,statepack_a(hs_843: handshakestate)) in
        {338}in(pub, message_a_844: bitstring);
        {339}let v_845: bitstring = catch-fail(handshakestateunpack(hs_843)) in
        {340}let v_846: bitstring = catch-fail(deconcat3(message_a_844)) in
        {341}let v_847: bool = catch-fail(true) in
        {342}let v_848: key = catch-fail(1-proj-3-tuple(v_846)) in
        {343}let v_849: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_845))) in
        {344}let v_850: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_845)) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then symmetricstatepack(1-proj-3-tuple(v_849),2-proj-3-tuple(v_849),hash(3-proj-3-tuple(v_849),v_848)) else fail-any) else fail-any)) in
        {345}let v_851: bitstring = catch-fail(symmetricstateunpack(v_850)) in
        {346}let v_852: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
        {347}let v_853: aead = catch-fail(decrypt(1-proj-2-tuple(v_852),2-proj-2-tuple(v_852),3-proj-3-tuple(v_851),3-proj-3-tuple(v_846))) in
        {348}let v_854: bitstring = catch-fail(aeadunpack(v_853)) in
        {349}let v_855: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
        {350}let v_856: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_852))) && success?(1-proj-3-tuple(v_851))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then cipherstatepack(1-proj-2-tuple(v_855),increment_nonce(2-proj-2-tuple(v_852))) else fail-any) else fail-any)) in
        {351}let v_857: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_846)) && (success?(3-proj-3-tuple(v_851)) && success?(1-proj-3-tuple(v_851)))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then (if not-caught-fail(v_853) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if not-caught-fail(v_856) then (v_856,3-proj-3-tuple(v_854),1-proj-3-tuple(v_854)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_858: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_857),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) in
        {353}let v_859: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_846)) && success?(symmetricstatepack(1-proj-3-tuple(v_857),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_858),hash(3-proj-3-tuple(v_858),3-proj-3-tuple(v_846))) else fail-any) else fail-any)) in
        {354}let v_860: bitstring = catch-fail((if success?(3-proj-3-tuple(v_846)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if not-caught-fail(v_859) then (v_859,2-proj-3-tuple(v_857),3-proj-3-tuple(v_857)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_861: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_860),2-proj-7-tuple(v_845),3-proj-7-tuple(v_845),4-proj-7-tuple(v_845),v_848,6-proj-7-tuple(v_845),7-proj-7-tuple(v_845))) in
        {356}let (hs_862: handshakestate,re_863: key,plaintext_a: bitstring,valid_864: bool) = (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-7-tuple(v_845))))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then (if not-caught-fail(v_847) then (if not-caught-fail(v_848) then (if not-caught-fail(v_850) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if (v_847 && 3-proj-3-tuple(v_860)) then (if not-caught-fail(v_861) then (v_861,getpublickey(3-proj-7-tuple(v_845)),2-proj-3-tuple(v_860),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {357}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_864);
        {358}insert statestore(bob,alice,statepack_b(hs_862))
    ) | (
        {400}get statestore(=bob,=alice,statepack_b(hs_865: handshakestate)) in
        {360}let v_866: bitstring = catch-fail(handshakestateunpack(hs_865)) in
        {361}let v_867: bitstring = catch-fail((empty,empty,empty)) in
        {362}let v_868: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {363}let v_869: keypair = catch-fail((if not-caught-fail(v_868) then keypairpack(v_868,key_e(bob,alice)) else fail-any)) in
        {364}let v_870: bitstring = catch-fail(getpublickey(v_869)) in
        {365}let v_871: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_866))) in
        {366}let v_872: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_866)) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then symmetricstatepack(1-proj-3-tuple(v_871),2-proj-3-tuple(v_871),hash(3-proj-3-tuple(v_871),v_870)) else fail-any) else fail-any)) in
        {367}let v_873: bitstring = catch-fail(keypairunpack(v_869)) in
        {368}let v_874: bitstring = catch-fail(symmetricstateunpack(v_872)) in
        {369}let v_875: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_874),(if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {370}let v_876: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_874),(if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {371}let v_877: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_874),(if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any))) in
        {372}let v_878: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_874))) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then (v_875,v_876,v_877) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {373}let v_879: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_866)) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then dhexp(2-proj-2-tuple(v_873),5-proj-7-tuple(v_866)) else fail-any) else fail-any)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_878)) then cipherstatepack(2-proj-3-tuple(v_878),minnonce) else fail-any),1-proj-3-tuple(v_878),3-proj-3-tuple(v_874)) else fail-any) else fail-any) else fail-any)) in
        {374}let v_880: key = catch-fail(dhexp(key_s(bob),g)) in
        {375}let v_881: keypair = catch-fail((if not-caught-fail(v_880) then keypairpack(v_880,key_s(bob)) else fail-any)) in
        {376}let v_882: bitstring = catch-fail(symmetricstateunpack(v_879)) in
        {377}let v_883: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_882))) in
        {378}let v_884: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_883),2-proj-2-tuple(v_883),3-proj-3-tuple(v_882),getpublickey(v_881))) in
        {379}let v_885: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_882))) in
        {380}let v_886: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_883))) && success?(1-proj-3-tuple(v_882))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then cipherstatepack(1-proj-2-tuple(v_885),increment_nonce(2-proj-2-tuple(v_883))) else fail-any) else fail-any)) in
        {381}let v_887: bitstring = catch-fail((if (success?(getpublickey(v_881)) && (success?(3-proj-3-tuple(v_882)) && success?(1-proj-3-tuple(v_882)))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-2-tuple(v_883))))) then (if not-caught-fail(v_884) then (if not-caught-fail(v_886) then (v_886,v_884) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_888: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_887),2-proj-3-tuple(v_882),3-proj-3-tuple(v_882)))) in
        {383}let v_889: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_887)) && success?(symmetricstatepack(1-proj-2-tuple(v_887),2-proj-3-tuple(v_882),3-proj-3-tuple(v_882)))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then symmetricstatepack(1-proj-3-tuple(v_888),2-proj-3-tuple(v_888),hash(3-proj-3-tuple(v_888),2-proj-2-tuple(v_887))) else fail-any) else fail-any)) in
        {384}let v_890: bitstring = catch-fail((if success?(getpublickey(v_881)) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-2-tuple(v_887))))) then (if not-caught-fail(v_889) then (v_889,2-proj-2-tuple(v_887)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {385}let v_891: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_890))) in
        {386}let v_892: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {387}let v_893: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_892),2-proj-2-tuple(v_892),3-proj-3-tuple(v_891),msg_b(bob,alice))) in
        {388}let v_894: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {389}let v_895: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_892))) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then cipherstatepack(1-proj-2-tuple(v_894),increment_nonce(2-proj-2-tuple(v_892))) else fail-any) else fail-any)) in
        {390}let v_896: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_891)) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_895) then (v_895,v_893) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {391}let v_897: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) in
        {392}let v_898: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_896)) && success?(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_897),hash(3-proj-3-tuple(v_897),2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {393}let v_899: bitstring = catch-fail((if success?(1-proj-2-tuple(v_890)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_898) then (v_898,2-proj-2-tuple(v_896)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {394}let v_900: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_899),v_881,v_869,4-proj-7-tuple(v_866),5-proj-7-tuple(v_866),6-proj-7-tuple(v_866),7-proj-7-tuple(v_866))) in
        {395}let v_901: bitstring = catch-fail(concat3(v_870,2-proj-2-tuple(v_890),2-proj-2-tuple(v_899))) in
        {396}let (hs_902: handshakestate,re_903: key,message_b_904: bitstring) = (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-7-tuple(v_866))))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_872) then (if not-caught-fail(v_879) then (if not-caught-fail(v_881) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-2-tuple(v_890))))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (v_900,5-proj-7-tuple(v_866),v_901) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {397}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {398}insert statestore(bob,alice,statepack_c(hs_902));
        {399}out(pub, message_b_904)
    ) | (
        {438}get statestore(=bob,=alice,statepack_c(hs_905: handshakestate)) in
        {401}in(pub, message_c_906: bitstring);
        {402}let v_907: bitstring = catch-fail(handshakestateunpack(hs_905)) in
        {403}let v_908: bitstring = catch-fail(deconcat3(message_c_906)) in
        {404}let v_909: bool = catch-fail(true) in
        {405}let v_910: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_907))) in
        {406}let v_911: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
        {407}let v_912: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_911),(if (success?(5-proj-7-tuple(v_907)) && success?(2-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then dhexp(2-proj-2-tuple(v_910),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
        {408}let v_913: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_911),(if (success?(5-proj-7-tuple(v_907)) && success?(2-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then dhexp(2-proj-2-tuple(v_910),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
        {409}let v_914: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_911),(if (success?(5-proj-7-tuple(v_907)) && success?(2-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then dhexp(2-proj-2-tuple(v_910),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
        {410}let v_915: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_907)) && success?(2-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then dhexp(2-proj-2-tuple(v_910),5-proj-7-tuple(v_907)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_911))) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then (if not-caught-fail(v_914) then (v_912,v_913,v_914) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {411}let v_916: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_907)) && success?(2-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then dhexp(2-proj-2-tuple(v_910),5-proj-7-tuple(v_907)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_907))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_915)) then cipherstatepack(2-proj-3-tuple(v_915),minnonce) else fail-any),1-proj-3-tuple(v_915),3-proj-3-tuple(v_911)) else fail-any) else fail-any) else fail-any)) in
        {412}let v_917: bitstring = catch-fail(symmetricstateunpack(v_916)) in
        {413}let v_918: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_917))) in
        {414}let v_919: aead = catch-fail(decrypt(1-proj-2-tuple(v_918),2-proj-2-tuple(v_918),3-proj-3-tuple(v_917),2-proj-3-tuple(v_908))) in
        {415}let v_920: bitstring = catch-fail(aeadunpack(v_919)) in
        {416}let v_921: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_917))) in
        {417}let v_922: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_918))) && success?(1-proj-3-tuple(v_917))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then cipherstatepack(1-proj-2-tuple(v_921),increment_nonce(2-proj-2-tuple(v_918))) else fail-any) else fail-any)) in
        {418}let v_923: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_917)) && success?(1-proj-3-tuple(v_917)))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-2-tuple(v_918))))) then (if not-caught-fail(v_919) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then (if not-caught-fail(v_922) then (v_922,3-proj-3-tuple(v_920),1-proj-3-tuple(v_920)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {419}let v_924: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_923),2-proj-3-tuple(v_917),3-proj-3-tuple(v_917)))) in
        {420}let v_925: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_923),2-proj-3-tuple(v_917),3-proj-3-tuple(v_917)))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then symmetricstatepack(1-proj-3-tuple(v_924),2-proj-3-tuple(v_924),hash(3-proj-3-tuple(v_924),2-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {421}let v_926: bitstring = catch-fail((if success?(2-proj-3-tuple(v_908)) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (if not-caught-fail(v_925) then (v_925,2-proj-3-tuple(v_923),3-proj-3-tuple(v_923)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {422}let v_927: key = catch-fail(2-proj-3-tuple(v_926)) in
        {423}let v_928: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_926))) in
        {424}let v_929: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_928))) in
        {425}let v_930: aead = catch-fail(decrypt(1-proj-2-tuple(v_929),2-proj-2-tuple(v_929),3-proj-3-tuple(v_928),3-proj-3-tuple(v_908))) in
        {426}let v_931: bitstring = catch-fail(aeadunpack(v_930)) in
        {427}let v_932: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_928))) in
        {428}let v_933: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_929))) && success?(1-proj-3-tuple(v_928))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then cipherstatepack(1-proj-2-tuple(v_932),increment_nonce(2-proj-2-tuple(v_929))) else fail-any) else fail-any)) in
        {429}let v_934: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_928)) && success?(1-proj-3-tuple(v_928)))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_930) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if not-caught-fail(v_933) then (v_933,3-proj-3-tuple(v_931),1-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {430}let v_935: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)))) in
        {431}let v_936: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_935),hash(3-proj-3-tuple(v_935),3-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {432}let v_937: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(1-proj-3-tuple(v_926))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if not-caught-fail(v_936) then (v_936,2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {433}let v_938: key = catch-fail(dhexp(key_s(alice),g)) in
        {434}let v_939: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_937),2-proj-7-tuple(v_907),3-proj-7-tuple(v_907),v_927,5-proj-7-tuple(v_907),6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
        {435}let (hs_940: handshakestate,re_941: key,plaintext_c: bitstring,valid_942: bool) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_909) then (if not-caught-fail(v_916) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then (if not-caught-fail(v_927) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if ((3-proj-3-tuple(v_926) && 3-proj-3-tuple(v_937)) && (v_927 = getpublickey((if not-caught-fail(v_938) then keypairpack(v_938,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_939) then (v_939,getpublickey(3-proj-7-tuple(v_907)),2-proj-3-tuple(v_937),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {436}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_942);
        {437}insert statestore(bob,alice,statepack_d(hs_940))
    ) | (
        {456}get statestore(=bob,=alice,statepack_d(hs_943: handshakestate)) in
        {439}let v_944: bitstring = catch-fail(handshakestateunpack(hs_943)) in
        {440}let v_945: bitstring = catch-fail((empty,empty,empty)) in
        {441}let v_946: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_944))) in
        {442}let v_947: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {443}let v_948: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_947),2-proj-2-tuple(v_947),3-proj-3-tuple(v_946),msg_d(bob,alice))) in
        {444}let v_949: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {445}let v_950: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_947))) && success?(1-proj-3-tuple(v_946))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-2-tuple(v_949))))) then cipherstatepack(1-proj-2-tuple(v_949),increment_nonce(2-proj-2-tuple(v_947))) else fail-any) else fail-any)) in
        {446}let v_951: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_946)) && success?(1-proj-3-tuple(v_946))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_948) then (if not-caught-fail(v_950) then (v_950,v_948) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {447}let v_952: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_951),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) in
        {448}let v_953: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_951)) && success?(symmetricstatepack(1-proj-2-tuple(v_951),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_952),hash(3-proj-3-tuple(v_952),2-proj-2-tuple(v_951))) else fail-any) else fail-any)) in
        {449}let v_954: bitstring = catch-fail((if success?(1-proj-7-tuple(v_944)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then (if not-caught-fail(v_953) then (v_953,2-proj-2-tuple(v_951)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_955: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_954),2-proj-7-tuple(v_944),3-proj-7-tuple(v_944),4-proj-7-tuple(v_944),5-proj-7-tuple(v_944),6-proj-7-tuple(v_944),7-proj-7-tuple(v_944))) in
        {451}let v_956: bitstring = catch-fail(concat3(1-proj-3-tuple(v_945),2-proj-3-tuple(v_945),2-proj-2-tuple(v_954))) in
        {452}let (hs_957: handshakestate,re_958: key,message_d_959: bitstring) = (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-7-tuple(v_944))))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-2-tuple(v_954))))) then (if not-caught-fail(v_955) then (if not-caught-fail(v_956) then (v_955,5-proj-7-tuple(v_944),v_956) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {453}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {454}insert statestore(bob,alice,statepack_e(hs_957));
        {455}out(pub, message_d_959)
    ) | (
        {484}get statestore(=bob,=alice,statepack_e(hs_960: handshakestate)) in
        {457}in(pub, message_e_961: bitstring);
        {458}let v_962: bitstring = catch-fail(handshakestateunpack(hs_960)) in
        {459}let v_963: bitstring = catch-fail(deconcat3(message_e_961)) in
        {460}let v_964: bool = catch-fail(true) in
        {461}let v_965: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_962))) in
        {462}let v_966: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_965))) in
        {463}let v_967: aead = catch-fail(decrypt(1-proj-2-tuple(v_966),2-proj-2-tuple(v_966),3-proj-3-tuple(v_965),3-proj-3-tuple(v_963))) in
        {464}let v_968: bitstring = catch-fail(aeadunpack(v_967)) in
        {465}let v_969: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_965))) in
        {466}let v_970: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_966))) && success?(1-proj-3-tuple(v_965))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-2-tuple(v_969))))) then cipherstatepack(1-proj-2-tuple(v_969),increment_nonce(2-proj-2-tuple(v_966))) else fail-any) else fail-any)) in
        {467}let v_971: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_963)) && (success?(3-proj-3-tuple(v_965)) && success?(1-proj-3-tuple(v_965)))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then (if not-caught-fail(v_967) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then (if not-caught-fail(v_970) then (v_970,3-proj-3-tuple(v_968),1-proj-3-tuple(v_968)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {468}let v_972: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_971),2-proj-3-tuple(v_965),3-proj-3-tuple(v_965)))) in
        {469}let v_973: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_963)) && success?(symmetricstatepack(1-proj-3-tuple(v_971),2-proj-3-tuple(v_965),3-proj-3-tuple(v_965)))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then symmetricstatepack(1-proj-3-tuple(v_972),2-proj-3-tuple(v_972),hash(3-proj-3-tuple(v_972),3-proj-3-tuple(v_963))) else fail-any) else fail-any)) in
        {470}let v_974: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_963)) && success?(1-proj-7-tuple(v_962))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then (if not-caught-fail(v_973) then (v_973,2-proj-3-tuple(v_971),3-proj-3-tuple(v_971)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {471}let v_975: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_974),2-proj-7-tuple(v_962),3-proj-7-tuple(v_962),4-proj-7-tuple(v_962),5-proj-7-tuple(v_962),6-proj-7-tuple(v_962),7-proj-7-tuple(v_962))) in
        {472}let v_976: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_974))) in
        {473}let v_977: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_976),zero)) in
        {474}let v_978: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_976),zero)) in
        {475}let v_979: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_976),zero)) in
        {476}let v_980: bitstring = catch-fail((if success?(2-proj-3-tuple(v_976)) then (if not-caught-fail(v_977) then (if not-caught-fail(v_978) then (if not-caught-fail(v_979) then (v_977,v_978,v_979) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {477}let v_981: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_980)) then cipherstatepack(1-proj-3-tuple(v_980),minnonce) else fail-any)) in
        {478}let v_982: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_980)) then cipherstatepack(2-proj-3-tuple(v_980),minnonce) else fail-any)) in
        {479}let v_983: bitstring = catch-fail((if success?(1-proj-3-tuple(v_974)) then (if (not-caught-fail(v_976) && success?(is-true(success?(1-proj-3-tuple(v_976))))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-3-tuple(v_980))))) then (if not-caught-fail(v_981) then (if not-caught-fail(v_982) then (1-proj-3-tuple(v_974),v_981,v_982) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {480}let (hs_984: handshakestate,re_985: key,plaintext_e: bitstring,valid_986: bool,cs1_987: cipherstate,cs2_988: cipherstate) = (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-7-tuple(v_962))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if not-caught-fail(v_964) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if (v_964 && 3-proj-3-tuple(v_974)) then (if not-caught-fail(v_975) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (v_975,getpublickey(3-proj-7-tuple(v_962)),2-proj-3-tuple(v_974),true,2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {481}event RecvMsg(bob,alice,stage_e,plaintext_e,valid_986);
        {482}insert statestore(bob,alice,statepack_f(hs_984));
        {483}event RecvEnd(valid_986)
    ) | (
        {485}event LeakS(phase0,bob);
        {486}out(pub, key_s(bob))
    ) | (
        {487}phase 1;
        {488}event LeakS(phase1,bob);
        {489}out(pub, key_s(bob))
    )
) | (
    {490}let s_989: keypair = keypairpack(empty,empty) in
    {491}out(pub, getpublickey(s_989));
    (
        {492}let e_990: keypair = keypairpack(empty,empty) in
        {493}let rs_991: key = empty in
        {494}let re_992: key = empty in
        {495}let v_993: bitstring = catch-fail(hash(somename,empty)) in
        {496}let v_994: key = catch-fail(v_993) in
        {497}let v_995: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {498}let v_996: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_993) then (if not-caught-fail(v_994) then (if not-caught-fail(v_995) then symmetricstatepack(v_995,v_994,v_993) else fail-any) else fail-any) else fail-any))) in
        {499}let v_997: symmetricstate = catch-fail((if success?((if not-caught-fail(v_993) then (if not-caught-fail(v_994) then (if not-caught-fail(v_995) then symmetricstatepack(v_995,v_994,v_993) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then symmetricstatepack(1-proj-3-tuple(v_996),2-proj-3-tuple(v_996),hash(3-proj-3-tuple(v_996),empty)) else fail-any) else fail-any)) in
        {500}let hs_998: handshakestate = (if not-caught-fail(v_997) then handshakestatepack(v_997,s_989,e_990,rs_991,re_992,empty,false) else fail-any) in
        {501}insert statestore(bob,charlie,statepack_a(hs_998))
    ) | (
        {523}get statestore(=bob,=charlie,statepack_a(hs_999: handshakestate)) in
        {502}in(pub, message_a_1000: bitstring);
        {503}let v_1001: bitstring = catch-fail(handshakestateunpack(hs_999)) in
        {504}let v_1002: bitstring = catch-fail(deconcat3(message_a_1000)) in
        {505}let v_1003: bool = catch-fail(true) in
        {506}let v_1004: key = catch-fail(1-proj-3-tuple(v_1002)) in
        {507}let v_1005: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1001))) in
        {508}let v_1006: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1001)) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),hash(3-proj-3-tuple(v_1005),v_1004)) else fail-any) else fail-any)) in
        {509}let v_1007: bitstring = catch-fail(symmetricstateunpack(v_1006)) in
        {510}let v_1008: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1007))) in
        {511}let v_1009: aead = catch-fail(decrypt(1-proj-2-tuple(v_1008),2-proj-2-tuple(v_1008),3-proj-3-tuple(v_1007),3-proj-3-tuple(v_1002))) in
        {512}let v_1010: bitstring = catch-fail(aeadunpack(v_1009)) in
        {513}let v_1011: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1007))) in
        {514}let v_1012: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1008))) && success?(1-proj-3-tuple(v_1007))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-2-tuple(v_1011))))) then cipherstatepack(1-proj-2-tuple(v_1011),increment_nonce(2-proj-2-tuple(v_1008))) else fail-any) else fail-any)) in
        {515}let v_1013: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1002)) && (success?(3-proj-3-tuple(v_1007)) && success?(1-proj-3-tuple(v_1007)))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-2-tuple(v_1008))))) then (if not-caught-fail(v_1009) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then (if not-caught-fail(v_1012) then (v_1012,3-proj-3-tuple(v_1010),1-proj-3-tuple(v_1010)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {516}let v_1014: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1013),2-proj-3-tuple(v_1007),3-proj-3-tuple(v_1007)))) in
        {517}let v_1015: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1002)) && success?(symmetricstatepack(1-proj-3-tuple(v_1013),2-proj-3-tuple(v_1007),3-proj-3-tuple(v_1007)))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then symmetricstatepack(1-proj-3-tuple(v_1014),2-proj-3-tuple(v_1014),hash(3-proj-3-tuple(v_1014),3-proj-3-tuple(v_1002))) else fail-any) else fail-any)) in
        {518}let v_1016: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1002)) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-3-tuple(v_1013))))) then (if not-caught-fail(v_1015) then (v_1015,2-proj-3-tuple(v_1013),3-proj-3-tuple(v_1013)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {519}let v_1017: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1016),2-proj-7-tuple(v_1001),3-proj-7-tuple(v_1001),4-proj-7-tuple(v_1001),v_1004,6-proj-7-tuple(v_1001),7-proj-7-tuple(v_1001))) in
        {520}let (hs_1018: handshakestate,re_1019: key,plaintext_a_1020: bitstring,valid_1021: bool) = (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-7-tuple(v_1001))))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if not-caught-fail(v_1003) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1006) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-3-tuple(v_1016))))) then (if (v_1003 && 3-proj-3-tuple(v_1016)) then (if not-caught-fail(v_1017) then (v_1017,getpublickey(3-proj-7-tuple(v_1001)),2-proj-3-tuple(v_1016),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {521}event RecvMsg(bob,charlie,stage_a,plaintext_a_1020,valid_1021);
        {522}insert statestore(bob,charlie,statepack_b(hs_1018))
    ) | (
        {564}get statestore(=bob,=charlie,statepack_b(hs_1022: handshakestate)) in
        {524}let v_1023: bitstring = catch-fail(handshakestateunpack(hs_1022)) in
        {525}let v_1024: bitstring = catch-fail((empty,empty,empty)) in
        {526}let v_1025: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {527}let v_1026: keypair = catch-fail((if not-caught-fail(v_1025) then keypairpack(v_1025,key_e(bob,charlie)) else fail-any)) in
        {528}let v_1027: bitstring = catch-fail(getpublickey(v_1026)) in
        {529}let v_1028: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1023))) in
        {530}let v_1029: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1023)) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then symmetricstatepack(1-proj-3-tuple(v_1028),2-proj-3-tuple(v_1028),hash(3-proj-3-tuple(v_1028),v_1027)) else fail-any) else fail-any)) in
        {531}let v_1030: bitstring = catch-fail(keypairunpack(v_1026)) in
        {532}let v_1031: bitstring = catch-fail(symmetricstateunpack(v_1029)) in
        {533}let v_1032: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1031),(if success?(5-proj-7-tuple(v_1023)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),5-proj-7-tuple(v_1023)) else fail-any) else fail-any))) in
        {534}let v_1033: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1031),(if success?(5-proj-7-tuple(v_1023)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),5-proj-7-tuple(v_1023)) else fail-any) else fail-any))) in
        {535}let v_1034: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1031),(if success?(5-proj-7-tuple(v_1023)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),5-proj-7-tuple(v_1023)) else fail-any) else fail-any))) in
        {536}let v_1035: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1023)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),5-proj-7-tuple(v_1023)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1031))) then (if not-caught-fail(v_1032) then (if not-caught-fail(v_1033) then (if not-caught-fail(v_1034) then (v_1032,v_1033,v_1034) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {537}let v_1036: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1023)) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-2-tuple(v_1030))))) then dhexp(2-proj-2-tuple(v_1030),5-proj-7-tuple(v_1023)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1035)) then cipherstatepack(2-proj-3-tuple(v_1035),minnonce) else fail-any),1-proj-3-tuple(v_1035),3-proj-3-tuple(v_1031)) else fail-any) else fail-any) else fail-any)) in
        {538}let v_1037: key = catch-fail(dhexp(key_s(bob),g)) in
        {539}let v_1038: keypair = catch-fail((if not-caught-fail(v_1037) then keypairpack(v_1037,key_s(bob)) else fail-any)) in
        {540}let v_1039: bitstring = catch-fail(symmetricstateunpack(v_1036)) in
        {541}let v_1040: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {542}let v_1041: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1040),2-proj-2-tuple(v_1040),3-proj-3-tuple(v_1039),getpublickey(v_1038))) in
        {543}let v_1042: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {544}let v_1043: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1040))) && success?(1-proj-3-tuple(v_1039))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then cipherstatepack(1-proj-2-tuple(v_1042),increment_nonce(2-proj-2-tuple(v_1040))) else fail-any) else fail-any)) in
        {545}let v_1044: bitstring = catch-fail((if (success?(getpublickey(v_1038)) && (success?(3-proj-3-tuple(v_1039)) && success?(1-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then (if not-caught-fail(v_1041) then (if not-caught-fail(v_1043) then (v_1043,v_1041) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {546}let v_1045: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1044),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) in
        {547}let v_1046: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1044)) && success?(symmetricstatepack(1-proj-2-tuple(v_1044),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1045),hash(3-proj-3-tuple(v_1045),2-proj-2-tuple(v_1044))) else fail-any) else fail-any)) in
        {548}let v_1047: bitstring = catch-fail((if success?(getpublickey(v_1038)) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then (if not-caught-fail(v_1046) then (v_1046,2-proj-2-tuple(v_1044)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {549}let v_1048: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1047))) in
        {550}let v_1049: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1048))) in
        {551}let v_1050: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1049),2-proj-2-tuple(v_1049),3-proj-3-tuple(v_1048),msg_b(bob,charlie))) in
        {552}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1048))) in
        {553}let v_1052: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1049))) && success?(1-proj-3-tuple(v_1048))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then cipherstatepack(1-proj-2-tuple(v_1051),increment_nonce(2-proj-2-tuple(v_1049))) else fail-any) else fail-any)) in
        {554}let v_1053: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1048)) && success?(1-proj-3-tuple(v_1048))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-2-tuple(v_1049))))) then (if not-caught-fail(v_1050) then (if not-caught-fail(v_1052) then (v_1052,v_1050) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {555}let v_1054: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1053),2-proj-3-tuple(v_1048),3-proj-3-tuple(v_1048)))) in
        {556}let v_1055: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1053)) && success?(symmetricstatepack(1-proj-2-tuple(v_1053),2-proj-3-tuple(v_1048),3-proj-3-tuple(v_1048)))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then symmetricstatepack(1-proj-3-tuple(v_1054),2-proj-3-tuple(v_1054),hash(3-proj-3-tuple(v_1054),2-proj-2-tuple(v_1053))) else fail-any) else fail-any)) in
        {557}let v_1056: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1047)) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then (if not-caught-fail(v_1055) then (v_1055,2-proj-2-tuple(v_1053)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1057: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1056),v_1038,v_1026,4-proj-7-tuple(v_1023),5-proj-7-tuple(v_1023),6-proj-7-tuple(v_1023),7-proj-7-tuple(v_1023))) in
        {559}let v_1058: bitstring = catch-fail(concat3(v_1027,2-proj-2-tuple(v_1047),2-proj-2-tuple(v_1056))) in
        {560}let (hs_1059: handshakestate,re_1060: key,message_b_1061: bitstring) = (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-7-tuple(v_1023))))) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-3-tuple(v_1024))))) then (if not-caught-fail(v_1026) then (if not-caught-fail(v_1027) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1036) then (if not-caught-fail(v_1038) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-2-tuple(v_1056))))) then (if not-caught-fail(v_1057) then (if not-caught-fail(v_1058) then (v_1057,5-proj-7-tuple(v_1023),v_1058) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {561}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {562}insert statestore(bob,charlie,statepack_c(hs_1059));
        {563}out(pub, message_b_1061)
    ) | (
        {602}get statestore(=bob,=charlie,statepack_c(hs_1062: handshakestate)) in
        {565}in(pub, message_c_1063: bitstring);
        {566}let v_1064: bitstring = catch-fail(handshakestateunpack(hs_1062)) in
        {567}let v_1065: bitstring = catch-fail(deconcat3(message_c_1063)) in
        {568}let v_1066: bool = catch-fail(true) in
        {569}let v_1067: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1064))) in
        {570}let v_1068: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1064))) in
        {571}let v_1069: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1068),(if (success?(5-proj-7-tuple(v_1064)) && success?(2-proj-7-tuple(v_1064))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),5-proj-7-tuple(v_1064)) else fail-any) else fail-any))) in
        {572}let v_1070: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1068),(if (success?(5-proj-7-tuple(v_1064)) && success?(2-proj-7-tuple(v_1064))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),5-proj-7-tuple(v_1064)) else fail-any) else fail-any))) in
        {573}let v_1071: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1068),(if (success?(5-proj-7-tuple(v_1064)) && success?(2-proj-7-tuple(v_1064))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),5-proj-7-tuple(v_1064)) else fail-any) else fail-any))) in
        {574}let v_1072: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1064)) && success?(2-proj-7-tuple(v_1064))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),5-proj-7-tuple(v_1064)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1068))) then (if not-caught-fail(v_1069) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1071) then (v_1069,v_1070,v_1071) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {575}let v_1073: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1064)) && success?(2-proj-7-tuple(v_1064))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-2-tuple(v_1067))))) then dhexp(2-proj-2-tuple(v_1067),5-proj-7-tuple(v_1064)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1064))) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1072)) then cipherstatepack(2-proj-3-tuple(v_1072),minnonce) else fail-any),1-proj-3-tuple(v_1072),3-proj-3-tuple(v_1068)) else fail-any) else fail-any) else fail-any)) in
        {576}let v_1074: bitstring = catch-fail(symmetricstateunpack(v_1073)) in
        {577}let v_1075: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1074))) in
        {578}let v_1076: aead = catch-fail(decrypt(1-proj-2-tuple(v_1075),2-proj-2-tuple(v_1075),3-proj-3-tuple(v_1074),2-proj-3-tuple(v_1065))) in
        {579}let v_1077: bitstring = catch-fail(aeadunpack(v_1076)) in
        {580}let v_1078: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1074))) in
        {581}let v_1079: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1075))) && success?(1-proj-3-tuple(v_1074))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then cipherstatepack(1-proj-2-tuple(v_1078),increment_nonce(2-proj-2-tuple(v_1075))) else fail-any) else fail-any)) in
        {582}let v_1080: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1065)) && (success?(3-proj-3-tuple(v_1074)) && success?(1-proj-3-tuple(v_1074)))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then (if not-caught-fail(v_1076) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (if not-caught-fail(v_1079) then (v_1079,3-proj-3-tuple(v_1077),1-proj-3-tuple(v_1077)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {583}let v_1081: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1080),2-proj-3-tuple(v_1074),3-proj-3-tuple(v_1074)))) in
        {584}let v_1082: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1065)) && success?(symmetricstatepack(1-proj-3-tuple(v_1080),2-proj-3-tuple(v_1074),3-proj-3-tuple(v_1074)))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-3-tuple(v_1081))))) then symmetricstatepack(1-proj-3-tuple(v_1081),2-proj-3-tuple(v_1081),hash(3-proj-3-tuple(v_1081),2-proj-3-tuple(v_1065))) else fail-any) else fail-any)) in
        {585}let v_1083: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1065)) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if not-caught-fail(v_1082) then (v_1082,2-proj-3-tuple(v_1080),3-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {586}let v_1084: key = catch-fail(2-proj-3-tuple(v_1083)) in
        {587}let v_1085: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1083))) in
        {588}let v_1086: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1085))) in
        {589}let v_1087: aead = catch-fail(decrypt(1-proj-2-tuple(v_1086),2-proj-2-tuple(v_1086),3-proj-3-tuple(v_1085),3-proj-3-tuple(v_1065))) in
        {590}let v_1088: bitstring = catch-fail(aeadunpack(v_1087)) in
        {591}let v_1089: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1085))) in
        {592}let v_1090: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1086))) && success?(1-proj-3-tuple(v_1085))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-2-tuple(v_1089))))) then cipherstatepack(1-proj-2-tuple(v_1089),increment_nonce(2-proj-2-tuple(v_1086))) else fail-any) else fail-any)) in
        {593}let v_1091: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1065)) && (success?(3-proj-3-tuple(v_1085)) && success?(1-proj-3-tuple(v_1085)))) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-2-tuple(v_1086))))) then (if not-caught-fail(v_1087) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-3-tuple(v_1088))))) then (if not-caught-fail(v_1090) then (v_1090,3-proj-3-tuple(v_1088),1-proj-3-tuple(v_1088)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {594}let v_1092: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1085),3-proj-3-tuple(v_1085)))) in
        {595}let v_1093: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1065)) && success?(symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1085),3-proj-3-tuple(v_1085)))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1092),hash(3-proj-3-tuple(v_1092),3-proj-3-tuple(v_1065))) else fail-any) else fail-any)) in
        {596}let v_1094: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1065)) && success?(1-proj-3-tuple(v_1083))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-3-tuple(v_1085))))) then (if (not-caught-fail(v_1091) && success?(is-true(success?(1-proj-3-tuple(v_1091))))) then (if not-caught-fail(v_1093) then (v_1093,2-proj-3-tuple(v_1091),3-proj-3-tuple(v_1091)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {597}let v_1095: key = catch-fail(dhexp(key_s(charlie),g)) in
        {598}let v_1096: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1094),2-proj-7-tuple(v_1064),3-proj-7-tuple(v_1064),v_1084,5-proj-7-tuple(v_1064),6-proj-7-tuple(v_1064),7-proj-7-tuple(v_1064))) in
        {599}let (hs_1097: handshakestate,re_1098: key,plaintext_c_1099: bitstring,valid_1100: bool) = (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-7-tuple(v_1064))))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then (if not-caught-fail(v_1066) then (if not-caught-fail(v_1073) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if not-caught-fail(v_1084) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if ((3-proj-3-tuple(v_1083) && 3-proj-3-tuple(v_1094)) && (v_1084 = getpublickey((if not-caught-fail(v_1095) then keypairpack(v_1095,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1096) then (v_1096,getpublickey(3-proj-7-tuple(v_1064)),2-proj-3-tuple(v_1094),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {600}event RecvMsg(bob,charlie,stage_c,plaintext_c_1099,valid_1100);
        {601}insert statestore(bob,charlie,statepack_d(hs_1097))
    ) | (
        {620}get statestore(=bob,=charlie,statepack_d(hs_1101: handshakestate)) in
        {603}let v_1102: bitstring = catch-fail(handshakestateunpack(hs_1101)) in
        {604}let v_1103: bitstring = catch-fail((empty,empty,empty)) in
        {605}let v_1104: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1102))) in
        {606}let v_1105: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1104))) in
        {607}let v_1106: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1105),2-proj-2-tuple(v_1105),3-proj-3-tuple(v_1104),msg_d(bob,charlie))) in
        {608}let v_1107: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1104))) in
        {609}let v_1108: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1105))) && success?(1-proj-3-tuple(v_1104))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-2-tuple(v_1107))))) then cipherstatepack(1-proj-2-tuple(v_1107),increment_nonce(2-proj-2-tuple(v_1105))) else fail-any) else fail-any)) in
        {610}let v_1109: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1104)) && success?(1-proj-3-tuple(v_1104))) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then (if not-caught-fail(v_1106) then (if not-caught-fail(v_1108) then (v_1108,v_1106) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {611}let v_1110: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1109),2-proj-3-tuple(v_1104),3-proj-3-tuple(v_1104)))) in
        {612}let v_1111: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1109)) && success?(symmetricstatepack(1-proj-2-tuple(v_1109),2-proj-3-tuple(v_1104),3-proj-3-tuple(v_1104)))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then symmetricstatepack(1-proj-3-tuple(v_1110),2-proj-3-tuple(v_1110),hash(3-proj-3-tuple(v_1110),2-proj-2-tuple(v_1109))) else fail-any) else fail-any)) in
        {613}let v_1112: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1102)) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-3-tuple(v_1104))))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then (if not-caught-fail(v_1111) then (v_1111,2-proj-2-tuple(v_1109)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {614}let v_1113: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1112),2-proj-7-tuple(v_1102),3-proj-7-tuple(v_1102),4-proj-7-tuple(v_1102),5-proj-7-tuple(v_1102),6-proj-7-tuple(v_1102),7-proj-7-tuple(v_1102))) in
        {615}let v_1114: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1103),2-proj-3-tuple(v_1103),2-proj-2-tuple(v_1112))) in
        {616}let (hs_1115: handshakestate,re_1116: key,message_d_1117: bitstring) = (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-7-tuple(v_1102))))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-2-tuple(v_1112))))) then (if not-caught-fail(v_1113) then (if not-caught-fail(v_1114) then (v_1113,5-proj-7-tuple(v_1102),v_1114) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {617}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {618}insert statestore(bob,charlie,statepack_e(hs_1115));
        {619}out(pub, message_d_1117)
    ) | (
        {648}get statestore(=bob,=charlie,statepack_e(hs_1118: handshakestate)) in
        {621}in(pub, message_e_1119: bitstring);
        {622}let v_1120: bitstring = catch-fail(handshakestateunpack(hs_1118)) in
        {623}let v_1121: bitstring = catch-fail(deconcat3(message_e_1119)) in
        {624}let v_1122: bool = catch-fail(true) in
        {625}let v_1123: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1120))) in
        {626}let v_1124: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {627}let v_1125: aead = catch-fail(decrypt(1-proj-2-tuple(v_1124),2-proj-2-tuple(v_1124),3-proj-3-tuple(v_1123),3-proj-3-tuple(v_1121))) in
        {628}let v_1126: bitstring = catch-fail(aeadunpack(v_1125)) in
        {629}let v_1127: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {630}let v_1128: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1124))) && success?(1-proj-3-tuple(v_1123))) then (if (not-caught-fail(v_1127) && success?(is-true(success?(1-proj-2-tuple(v_1127))))) then cipherstatepack(1-proj-2-tuple(v_1127),increment_nonce(2-proj-2-tuple(v_1124))) else fail-any) else fail-any)) in
        {631}let v_1129: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1121)) && (success?(3-proj-3-tuple(v_1123)) && success?(1-proj-3-tuple(v_1123)))) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then (if not-caught-fail(v_1125) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-3-tuple(v_1126))))) then (if not-caught-fail(v_1128) then (v_1128,3-proj-3-tuple(v_1126),1-proj-3-tuple(v_1126)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {632}let v_1130: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1129),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) in
        {633}let v_1131: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1121)) && success?(symmetricstatepack(1-proj-3-tuple(v_1129),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) then (if (not-caught-fail(v_1130) && success?(is-true(success?(1-proj-3-tuple(v_1130))))) then symmetricstatepack(1-proj-3-tuple(v_1130),2-proj-3-tuple(v_1130),hash(3-proj-3-tuple(v_1130),3-proj-3-tuple(v_1121))) else fail-any) else fail-any)) in
        {634}let v_1132: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1121)) && success?(1-proj-7-tuple(v_1120))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-3-tuple(v_1129))))) then (if not-caught-fail(v_1131) then (v_1131,2-proj-3-tuple(v_1129),3-proj-3-tuple(v_1129)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {635}let v_1133: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1132),2-proj-7-tuple(v_1120),3-proj-7-tuple(v_1120),4-proj-7-tuple(v_1120),5-proj-7-tuple(v_1120),6-proj-7-tuple(v_1120),7-proj-7-tuple(v_1120))) in
        {636}let v_1134: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1132))) in
        {637}let v_1135: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1134),zero)) in
        {638}let v_1136: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1134),zero)) in
        {639}let v_1137: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1134),zero)) in
        {640}let v_1138: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1134)) then (if not-caught-fail(v_1135) then (if not-caught-fail(v_1136) then (if not-caught-fail(v_1137) then (v_1135,v_1136,v_1137) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {641}let v_1139: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1138)) then cipherstatepack(1-proj-3-tuple(v_1138),minnonce) else fail-any)) in
        {642}let v_1140: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1138)) then cipherstatepack(2-proj-3-tuple(v_1138),minnonce) else fail-any)) in
        {643}let v_1141: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1132)) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-3-tuple(v_1138))))) then (if not-caught-fail(v_1139) then (if not-caught-fail(v_1140) then (1-proj-3-tuple(v_1132),v_1139,v_1140) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {644}let (hs_1142: handshakestate,re_1143: key,plaintext_e_1144: bitstring,valid_1145: bool,cs1_1146: cipherstate,cs2_1147: cipherstate) = (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-7-tuple(v_1120))))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then (if not-caught-fail(v_1122) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-3-tuple(v_1132))))) then (if (v_1122 && 3-proj-3-tuple(v_1132)) then (if not-caught-fail(v_1133) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-3-tuple(v_1141))))) then (v_1133,getpublickey(3-proj-7-tuple(v_1120)),2-proj-3-tuple(v_1132),true,2-proj-3-tuple(v_1141),3-proj-3-tuple(v_1141)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {645}event RecvMsg(bob,charlie,stage_e,plaintext_e_1144,valid_1145);
        {646}insert statestore(bob,charlie,statepack_f(hs_1142));
        {647}event RecvEnd(valid_1145)
    ) | (
        {649}event LeakS(phase0,bob);
        {650}out(pub, key_s(bob))
    ) | (
        {651}phase 1;
        {652}event LeakS(phase1,bob);
        {653}out(pub, key_s(bob))
    )
) | (
    {654}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 146 rules in the queue.
400 rules inserted. The rule base contains 389 rules. 44 rules in the queue.
600 rules inserted. The rule base contains 565 rules. 214 rules in the queue.
800 rules inserted. The rule base contains 723 rules. 159 rules in the queue.
1000 rules inserted. The rule base contains 859 rules. 172 rules in the queue.
1200 rules inserted. The rule base contains 1023 rules. 224 rules in the queue.
1400 rules inserted. The rule base contains 1173 rules. 265 rules in the queue.
1600 rules inserted. The rule base contains 1278 rules. 255 rules in the queue.
1800 rules inserted. The rule base contains 1424 rules. 255 rules in the queue.
2000 rules inserted. The rule base contains 1586 rules. 280 rules in the queue.
2200 rules inserted. The rule base contains 1682 rules. 267 rules in the queue.
2400 rules inserted. The rule base contains 1778 rules. 237 rules in the queue.
2600 rules inserted. The rule base contains 1887 rules. 236 rules in the queue.
2800 rules inserted. The rule base contains 1977 rules. 226 rules in the queue.
3000 rules inserted. The rule base contains 2058 rules. 195 rules in the queue.
3200 rules inserted. The rule base contains 2143 rules. 191 rules in the queue.
3400 rules inserted. The rule base contains 2237 rules. 190 rules in the queue.
3600 rules inserted. The rule base contains 2393 rules. 225 rules in the queue.
3800 rules inserted. The rule base contains 2543 rules. 239 rules in the queue.
4000 rules inserted. The rule base contains 2667 rules. 253 rules in the queue.
4200 rules inserted. The rule base contains 2823 rules. 239 rules in the queue.
4400 rules inserted. The rule base contains 2948 rules. 207 rules in the queue.
4600 rules inserted. The rule base contains 3085 rules. 183 rules in the queue.
4800 rules inserted. The rule base contains 3209 rules. 175 rules in the queue.
5000 rules inserted. The rule base contains 3288 rules. 115 rules in the queue.
5200 rules inserted. The rule base contains 3370 rules. 97 rules in the queue.
5400 rules inserted. The rule base contains 3482 rules. 99 rules in the queue.
5600 rules inserted. The rule base contains 3586 rules. 54 rules in the queue.
5800 rules inserted. The rule base contains 3716 rules. 26 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {337}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {175}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {198}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {195}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {197}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {359}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {338}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {357}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {337}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {175}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {198}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {195}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {197}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {359}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {338}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {357}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {337}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {175}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {198}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {195}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {197}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {359}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {338}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {357}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {501}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {523}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {502}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {522}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {564}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {561}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {563}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {75}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {501}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {523}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {502}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {522}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {564}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {561}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {563}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {75}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {501}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {523}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {502}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {522}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {564}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {561}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {563}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {75}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
